// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Behaviour
#include "UnityEngine/Behaviour.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationClip
  class AnimationClip;
  // Forward declaring type: WrapMode
  struct WrapMode;
  // Forward declaring type: AnimationState
  class AnimationState;
  // Forward declaring type: PlayMode
  struct PlayMode;
  // Forward declaring type: QueueMode
  struct QueueMode;
  // Forward declaring type: AnimationPlayMode
  struct AnimationPlayMode;
  // Forward declaring type: AnimationCullingType
  struct AnimationCullingType;
  // Forward declaring type: Bounds
  struct Bounds;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animation
  class Animation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Animation);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animation*, "UnityEngine", "Animation");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Animation
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  class Animation : public ::UnityEngine::Behaviour/*, public ::System::Collections::IEnumerable*/ {
    public:
    // Nested type: ::UnityEngine::Animation::Enumerator
    class Enumerator;
    // Creating interface conversion operator: operator ::System::Collections::IEnumerable
    operator ::System::Collections::IEnumerable() noexcept {
      return *reinterpret_cast<::System::Collections::IEnumerable*>(this);
    }
    // public UnityEngine.AnimationClip get_clip()
    // Offset: 0x5462EF0
    ::UnityEngine::AnimationClip* get_clip();
    // public System.Void set_clip(UnityEngine.AnimationClip value)
    // Offset: 0x5462F2C
    void set_clip(::UnityEngine::AnimationClip* value);
    // public System.Boolean get_playAutomatically()
    // Offset: 0x5462F70
    bool get_playAutomatically();
    // public System.Void set_playAutomatically(System.Boolean value)
    // Offset: 0x5462FAC
    void set_playAutomatically(bool value);
    // public UnityEngine.WrapMode get_wrapMode()
    // Offset: 0x5462FF0
    ::UnityEngine::WrapMode get_wrapMode();
    // public System.Void set_wrapMode(UnityEngine.WrapMode value)
    // Offset: 0x546302C
    void set_wrapMode(::UnityEngine::WrapMode value);
    // public System.Void Stop()
    // Offset: 0x5463070
    void Stop();
    // public System.Void Stop(System.String name)
    // Offset: 0x54630AC
    void Stop(::StringW name);
    // private System.Void StopNamed(System.String name)
    // Offset: 0x54630F0
    void StopNamed(::StringW name);
    // public System.Void Rewind()
    // Offset: 0x5463134
    void Rewind();
    // public System.Void Rewind(System.String name)
    // Offset: 0x5463170
    void Rewind(::StringW name);
    // private System.Void RewindNamed(System.String name)
    // Offset: 0x54631B4
    void RewindNamed(::StringW name);
    // public System.Void Sample()
    // Offset: 0x54631F8
    void Sample();
    // public System.Boolean get_isPlaying()
    // Offset: 0x5463234
    bool get_isPlaying();
    // public System.Boolean IsPlaying(System.String name)
    // Offset: 0x5463270
    bool IsPlaying(::StringW name);
    // public UnityEngine.AnimationState get_Item(System.String name)
    // Offset: 0x54632B4
    ::UnityEngine::AnimationState* get_Item(::StringW name);
    // public System.Boolean Play()
    // Offset: 0x546333C
    bool Play();
    // public System.Boolean Play(UnityEngine.PlayMode mode)
    // Offset: 0x546337C
    bool Play(::UnityEngine::PlayMode mode);
    // private System.Boolean PlayDefaultAnimation(UnityEngine.PlayMode mode)
    // Offset: 0x54633C0
    bool PlayDefaultAnimation(::UnityEngine::PlayMode mode);
    // public System.Boolean Play(System.String animation)
    // Offset: 0x5463404
    bool Play(::StringW animation);
    // public System.Boolean Play(System.String animation, UnityEngine.PlayMode mode)
    // Offset: 0x546344C
    bool Play(::StringW animation, ::UnityEngine::PlayMode mode);
    // public System.Void CrossFade(System.String animation)
    // Offset: 0x54634A0
    void CrossFade(::StringW animation);
    // public System.Void CrossFade(System.String animation, System.Single fadeLength)
    // Offset: 0x54634F0
    void CrossFade(::StringW animation, float fadeLength);
    // public System.Void CrossFade(System.String animation, System.Single fadeLength, UnityEngine.PlayMode mode)
    // Offset: 0x5463548
    void CrossFade(::StringW animation, float fadeLength, ::UnityEngine::PlayMode mode);
    // public System.Void Blend(System.String animation)
    // Offset: 0x54635AC
    void Blend(::StringW animation);
    // public System.Void Blend(System.String animation, System.Single targetWeight)
    // Offset: 0x54635FC
    void Blend(::StringW animation, float targetWeight);
    // public System.Void Blend(System.String animation, System.Single targetWeight, System.Single fadeLength)
    // Offset: 0x5463658
    void Blend(::StringW animation, float targetWeight, float fadeLength);
    // public UnityEngine.AnimationState CrossFadeQueued(System.String animation)
    // Offset: 0x54636B4
    ::UnityEngine::AnimationState* CrossFadeQueued(::StringW animation);
    // public UnityEngine.AnimationState CrossFadeQueued(System.String animation, System.Single fadeLength)
    // Offset: 0x5463708
    ::UnityEngine::AnimationState* CrossFadeQueued(::StringW animation, float fadeLength);
    // public UnityEngine.AnimationState CrossFadeQueued(System.String animation, System.Single fadeLength, UnityEngine.QueueMode queue)
    // Offset: 0x5463764
    ::UnityEngine::AnimationState* CrossFadeQueued(::StringW animation, float fadeLength, ::UnityEngine::QueueMode queue);
    // public UnityEngine.AnimationState CrossFadeQueued(System.String animation, System.Single fadeLength, UnityEngine.QueueMode queue, UnityEngine.PlayMode mode)
    // Offset: 0x54637CC
    ::UnityEngine::AnimationState* CrossFadeQueued(::StringW animation, float fadeLength, ::UnityEngine::QueueMode queue, ::UnityEngine::PlayMode mode);
    // public UnityEngine.AnimationState PlayQueued(System.String animation)
    // Offset: 0x5463838
    ::UnityEngine::AnimationState* PlayQueued(::StringW animation);
    // public UnityEngine.AnimationState PlayQueued(System.String animation, UnityEngine.QueueMode queue)
    // Offset: 0x5463884
    ::UnityEngine::AnimationState* PlayQueued(::StringW animation, ::UnityEngine::QueueMode queue);
    // public UnityEngine.AnimationState PlayQueued(System.String animation, UnityEngine.QueueMode queue, UnityEngine.PlayMode mode)
    // Offset: 0x54638DC
    ::UnityEngine::AnimationState* PlayQueued(::StringW animation, ::UnityEngine::QueueMode queue, ::UnityEngine::PlayMode mode);
    // public System.Void AddClip(UnityEngine.AnimationClip clip, System.String newName)
    // Offset: 0x5463938
    void AddClip(::UnityEngine::AnimationClip* clip, ::StringW newName);
    // public System.Void AddClip(UnityEngine.AnimationClip clip, System.String newName, System.Int32 firstFrame, System.Int32 lastFrame)
    // Offset: 0x5463998
    void AddClip(::UnityEngine::AnimationClip* clip, ::StringW newName, int firstFrame, int lastFrame);
    // public System.Void AddClip(UnityEngine.AnimationClip clip, System.String newName, System.Int32 firstFrame, System.Int32 lastFrame, System.Boolean addLoopFrame)
    // Offset: 0x5463A08
    void AddClip(::UnityEngine::AnimationClip* clip, ::StringW newName, int firstFrame, int lastFrame, bool addLoopFrame);
    // public System.Void RemoveClip(UnityEngine.AnimationClip clip)
    // Offset: 0x5463A7C
    void RemoveClip(::UnityEngine::AnimationClip* clip);
    // public System.Void RemoveClip(System.String clipName)
    // Offset: 0x5463AC0
    void RemoveClip(::StringW clipName);
    // private System.Void RemoveClipNamed(System.String clipName)
    // Offset: 0x5463B04
    void RemoveClipNamed(::StringW clipName);
    // public System.Int32 GetClipCount()
    // Offset: 0x5463B48
    int GetClipCount();
    // public System.Boolean Play(UnityEngine.AnimationPlayMode mode)
    // Offset: 0x5463B84
    bool Play(::UnityEngine::AnimationPlayMode mode);
    // public System.Boolean Play(System.String animation, UnityEngine.AnimationPlayMode mode)
    // Offset: 0x5463BC8
    bool Play(::StringW animation, ::UnityEngine::AnimationPlayMode mode);
    // public System.Void SyncLayer(System.Int32 layer)
    // Offset: 0x5463C1C
    void SyncLayer(int layer);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x5463C60
    ::System::Collections::IEnumerator* GetEnumerator();
    // UnityEngine.AnimationState GetState(System.String name)
    // Offset: 0x54632F8
    ::UnityEngine::AnimationState* GetState(::StringW name);
    // UnityEngine.AnimationState GetStateAtIndex(System.Int32 index)
    // Offset: 0x5463D08
    ::UnityEngine::AnimationState* GetStateAtIndex(int index);
    // System.Int32 GetStateCount()
    // Offset: 0x5463D4C
    int GetStateCount();
    // public UnityEngine.AnimationClip GetClip(System.String name)
    // Offset: 0x5463D88
    ::UnityEngine::AnimationClip* GetClip(::StringW name);
    // public System.Boolean get_animatePhysics()
    // Offset: 0x5463E58
    bool get_animatePhysics();
    // public System.Void set_animatePhysics(System.Boolean value)
    // Offset: 0x5463E94
    void set_animatePhysics(bool value);
    // public System.Boolean get_animateOnlyIfVisible()
    // Offset: 0x5463ED8
    bool get_animateOnlyIfVisible();
    // public System.Void set_animateOnlyIfVisible(System.Boolean value)
    // Offset: 0x5463F14
    void set_animateOnlyIfVisible(bool value);
    // public UnityEngine.AnimationCullingType get_cullingType()
    // Offset: 0x5463F58
    ::UnityEngine::AnimationCullingType get_cullingType();
    // public System.Void set_cullingType(UnityEngine.AnimationCullingType value)
    // Offset: 0x5463F94
    void set_cullingType(::UnityEngine::AnimationCullingType value);
    // public UnityEngine.Bounds get_localBounds()
    // Offset: 0x5463FD8
    ::UnityEngine::Bounds get_localBounds();
    // public System.Void set_localBounds(UnityEngine.Bounds value)
    // Offset: 0x5464084
    void set_localBounds(::UnityEngine::Bounds value);
    // public System.Void .ctor()
    // Offset: 0x546410C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Animation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Animation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Animation*, creationType>()));
    }
    // private System.Void get_localBounds_Injected(out UnityEngine.Bounds ret)
    // Offset: 0x5464040
    void get_localBounds_Injected(ByRef<::UnityEngine::Bounds> ret);
    // private System.Void set_localBounds_Injected(ref UnityEngine.Bounds value)
    // Offset: 0x54640C8
    void set_localBounds_Injected(ByRef<::UnityEngine::Bounds> value);
  }; // UnityEngine.Animation
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animation::get_clip
// Il2CppName: get_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationClip* (UnityEngine::Animation::*)()>(&UnityEngine::Animation::get_clip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "get_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::set_clip
// Il2CppName: set_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::UnityEngine::AnimationClip*)>(&UnityEngine::Animation::set_clip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "set_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::get_playAutomatically
// Il2CppName: get_playAutomatically
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)()>(&UnityEngine::Animation::get_playAutomatically)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "get_playAutomatically", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::set_playAutomatically
// Il2CppName: set_playAutomatically
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(bool)>(&UnityEngine::Animation::set_playAutomatically)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "set_playAutomatically", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::get_wrapMode
// Il2CppName: get_wrapMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::WrapMode (UnityEngine::Animation::*)()>(&UnityEngine::Animation::get_wrapMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "get_wrapMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::set_wrapMode
// Il2CppName: set_wrapMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::UnityEngine::WrapMode)>(&UnityEngine::Animation::set_wrapMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "WrapMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "set_wrapMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)()>(&UnityEngine::Animation::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::Stop)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::StopNamed
// Il2CppName: StopNamed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::StopNamed)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "StopNamed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Rewind
// Il2CppName: Rewind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)()>(&UnityEngine::Animation::Rewind)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Rewind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Rewind
// Il2CppName: Rewind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::Rewind)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Rewind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::RewindNamed
// Il2CppName: RewindNamed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::RewindNamed)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "RewindNamed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Sample
// Il2CppName: Sample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)()>(&UnityEngine::Animation::Sample)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Sample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::get_isPlaying
// Il2CppName: get_isPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)()>(&UnityEngine::Animation::get_isPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "get_isPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::IsPlaying
// Il2CppName: IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::IsPlaying)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationState* (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::get_Item)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)()>(&UnityEngine::Animation::Play)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)(::UnityEngine::PlayMode)>(&UnityEngine::Animation::Play)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "PlayMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::PlayDefaultAnimation
// Il2CppName: PlayDefaultAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)(::UnityEngine::PlayMode)>(&UnityEngine::Animation::PlayDefaultAnimation)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "PlayMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "PlayDefaultAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::Play)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)(::StringW, ::UnityEngine::PlayMode)>(&UnityEngine::Animation::Play)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "PlayMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::CrossFade
// Il2CppName: CrossFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::CrossFade)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "CrossFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::CrossFade
// Il2CppName: CrossFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW, float)>(&UnityEngine::Animation::CrossFade)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fadeLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "CrossFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation, fadeLength});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::CrossFade
// Il2CppName: CrossFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW, float, ::UnityEngine::PlayMode)>(&UnityEngine::Animation::CrossFade)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fadeLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "PlayMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "CrossFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation, fadeLength, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Blend
// Il2CppName: Blend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::Blend)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Blend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Blend
// Il2CppName: Blend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW, float)>(&UnityEngine::Animation::Blend)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* targetWeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Blend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation, targetWeight});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Blend
// Il2CppName: Blend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW, float, float)>(&UnityEngine::Animation::Blend)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* targetWeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fadeLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Blend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation, targetWeight, fadeLength});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::CrossFadeQueued
// Il2CppName: CrossFadeQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationState* (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::CrossFadeQueued)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "CrossFadeQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::CrossFadeQueued
// Il2CppName: CrossFadeQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationState* (UnityEngine::Animation::*)(::StringW, float)>(&UnityEngine::Animation::CrossFadeQueued)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fadeLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "CrossFadeQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation, fadeLength});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::CrossFadeQueued
// Il2CppName: CrossFadeQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationState* (UnityEngine::Animation::*)(::StringW, float, ::UnityEngine::QueueMode)>(&UnityEngine::Animation::CrossFadeQueued)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fadeLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* queue = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueueMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "CrossFadeQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation, fadeLength, queue});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::CrossFadeQueued
// Il2CppName: CrossFadeQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationState* (UnityEngine::Animation::*)(::StringW, float, ::UnityEngine::QueueMode, ::UnityEngine::PlayMode)>(&UnityEngine::Animation::CrossFadeQueued)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fadeLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* queue = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueueMode")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "PlayMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "CrossFadeQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation, fadeLength, queue, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::PlayQueued
// Il2CppName: PlayQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationState* (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::PlayQueued)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "PlayQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::PlayQueued
// Il2CppName: PlayQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationState* (UnityEngine::Animation::*)(::StringW, ::UnityEngine::QueueMode)>(&UnityEngine::Animation::PlayQueued)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* queue = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueueMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "PlayQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation, queue});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::PlayQueued
// Il2CppName: PlayQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationState* (UnityEngine::Animation::*)(::StringW, ::UnityEngine::QueueMode, ::UnityEngine::PlayMode)>(&UnityEngine::Animation::PlayQueued)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* queue = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueueMode")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "PlayMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "PlayQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation, queue, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::AddClip
// Il2CppName: AddClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::UnityEngine::AnimationClip*, ::StringW)>(&UnityEngine::Animation::AddClip)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationClip")->byval_arg;
    static auto* newName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "AddClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip, newName});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::AddClip
// Il2CppName: AddClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::UnityEngine::AnimationClip*, ::StringW, int, int)>(&UnityEngine::Animation::AddClip)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationClip")->byval_arg;
    static auto* newName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* firstFrame = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lastFrame = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "AddClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip, newName, firstFrame, lastFrame});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::AddClip
// Il2CppName: AddClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::UnityEngine::AnimationClip*, ::StringW, int, int, bool)>(&UnityEngine::Animation::AddClip)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationClip")->byval_arg;
    static auto* newName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* firstFrame = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lastFrame = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* addLoopFrame = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "AddClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip, newName, firstFrame, lastFrame, addLoopFrame});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::RemoveClip
// Il2CppName: RemoveClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::UnityEngine::AnimationClip*)>(&UnityEngine::Animation::RemoveClip)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "RemoveClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::RemoveClip
// Il2CppName: RemoveClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::RemoveClip)> {
  static const MethodInfo* get() {
    static auto* clipName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "RemoveClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipName});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::RemoveClipNamed
// Il2CppName: RemoveClipNamed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::RemoveClipNamed)> {
  static const MethodInfo* get() {
    static auto* clipName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "RemoveClipNamed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipName});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::GetClipCount
// Il2CppName: GetClipCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Animation::*)()>(&UnityEngine::Animation::GetClipCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "GetClipCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)(::UnityEngine::AnimationPlayMode)>(&UnityEngine::Animation::Play)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationPlayMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)(::StringW, ::UnityEngine::AnimationPlayMode)>(&UnityEngine::Animation::Play)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationPlayMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::SyncLayer
// Il2CppName: SyncLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(int)>(&UnityEngine::Animation::SyncLayer)> {
  static const MethodInfo* get() {
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "SyncLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layer});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (UnityEngine::Animation::*)()>(&UnityEngine::Animation::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::GetState
// Il2CppName: GetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationState* (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::GetState)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "GetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::GetStateAtIndex
// Il2CppName: GetStateAtIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationState* (UnityEngine::Animation::*)(int)>(&UnityEngine::Animation::GetStateAtIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "GetStateAtIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::GetStateCount
// Il2CppName: GetStateCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Animation::*)()>(&UnityEngine::Animation::GetStateCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "GetStateCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::GetClip
// Il2CppName: GetClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationClip* (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::GetClip)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "GetClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::get_animatePhysics
// Il2CppName: get_animatePhysics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)()>(&UnityEngine::Animation::get_animatePhysics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "get_animatePhysics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::set_animatePhysics
// Il2CppName: set_animatePhysics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(bool)>(&UnityEngine::Animation::set_animatePhysics)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "set_animatePhysics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::get_animateOnlyIfVisible
// Il2CppName: get_animateOnlyIfVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)()>(&UnityEngine::Animation::get_animateOnlyIfVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "get_animateOnlyIfVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::set_animateOnlyIfVisible
// Il2CppName: set_animateOnlyIfVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(bool)>(&UnityEngine::Animation::set_animateOnlyIfVisible)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "set_animateOnlyIfVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::get_cullingType
// Il2CppName: get_cullingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCullingType (UnityEngine::Animation::*)()>(&UnityEngine::Animation::get_cullingType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "get_cullingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::set_cullingType
// Il2CppName: set_cullingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::UnityEngine::AnimationCullingType)>(&UnityEngine::Animation::set_cullingType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCullingType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "set_cullingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::get_localBounds
// Il2CppName: get_localBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (UnityEngine::Animation::*)()>(&UnityEngine::Animation::get_localBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "get_localBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::set_localBounds
// Il2CppName: set_localBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::UnityEngine::Bounds)>(&UnityEngine::Animation::set_localBounds)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "set_localBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Animation::get_localBounds_Injected
// Il2CppName: get_localBounds_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(ByRef<::UnityEngine::Bounds>)>(&UnityEngine::Animation::get_localBounds_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "get_localBounds_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::set_localBounds_Injected
// Il2CppName: set_localBounds_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(ByRef<::UnityEngine::Bounds>)>(&UnityEngine::Animation::set_localBounds_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "set_localBounds_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
