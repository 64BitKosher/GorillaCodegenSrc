// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine.ParticleSystemJobs
namespace UnityEngine::ParticleSystemJobs {
  // Forward declaring type: NativeParticleData
  struct NativeParticleData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ParticleSystemJobs::NativeParticleData, "UnityEngine.ParticleSystemJobs", "NativeParticleData");
// Type namespace: UnityEngine.ParticleSystemJobs
namespace UnityEngine::ParticleSystemJobs {
  // Size: 0x100
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ParticleSystemJobs.NativeParticleData
  // [TokenAttribute] Offset: FFFFFFFF
  struct NativeParticleData/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3
    struct Array3;
    // Nested type: ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array4
    struct Array4;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.ParticleSystemJobs.NativeParticleData/Array3
    // [TokenAttribute] Offset: FFFFFFFF
    struct Array3/*, public ::System::ValueType*/ {
      public:
      public:
      // System.Single* x
      // Size: 0x8
      // Offset: 0x0
      float* x;
      // Field size check
      static_assert(sizeof(float*) == 0x8);
      // System.Single* y
      // Size: 0x8
      // Offset: 0x8
      float* y;
      // Field size check
      static_assert(sizeof(float*) == 0x8);
      // System.Single* z
      // Size: 0x8
      // Offset: 0x10
      float* z;
      // Field size check
      static_assert(sizeof(float*) == 0x8);
      public:
      // Creating value type constructor for type: Array3
      constexpr Array3(float* x_ = {}, float* y_ = {}, float* z_ = {}) noexcept : x{x_}, y{y_}, z{z_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: System.Single* x
      [[deprecated("Use field access instead!")]] float*& dyn_x();
      // Get instance field reference: System.Single* y
      [[deprecated("Use field access instead!")]] float*& dyn_y();
      // Get instance field reference: System.Single* z
      [[deprecated("Use field access instead!")]] float*& dyn_z();
    }; // UnityEngine.ParticleSystemJobs.NativeParticleData/Array3
    #pragma pack(pop)
    static check_size<sizeof(NativeParticleData::Array3), 16 + sizeof(float*)> __UnityEngine_ParticleSystemJobs_NativeParticleData_Array3SizeCheck;
    static_assert(sizeof(NativeParticleData::Array3) == 0x18);
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.ParticleSystemJobs.NativeParticleData/Array4
    // [TokenAttribute] Offset: FFFFFFFF
    struct Array4/*, public ::System::ValueType*/ {
      public:
      public:
      // System.Single* x
      // Size: 0x8
      // Offset: 0x0
      float* x;
      // Field size check
      static_assert(sizeof(float*) == 0x8);
      // System.Single* y
      // Size: 0x8
      // Offset: 0x8
      float* y;
      // Field size check
      static_assert(sizeof(float*) == 0x8);
      // System.Single* z
      // Size: 0x8
      // Offset: 0x10
      float* z;
      // Field size check
      static_assert(sizeof(float*) == 0x8);
      // System.Single* w
      // Size: 0x8
      // Offset: 0x18
      float* w;
      // Field size check
      static_assert(sizeof(float*) == 0x8);
      public:
      // Creating value type constructor for type: Array4
      constexpr Array4(float* x_ = {}, float* y_ = {}, float* z_ = {}, float* w_ = {}) noexcept : x{x_}, y{y_}, z{z_}, w{w_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: System.Single* x
      [[deprecated("Use field access instead!")]] float*& dyn_x();
      // Get instance field reference: System.Single* y
      [[deprecated("Use field access instead!")]] float*& dyn_y();
      // Get instance field reference: System.Single* z
      [[deprecated("Use field access instead!")]] float*& dyn_z();
      // Get instance field reference: System.Single* w
      [[deprecated("Use field access instead!")]] float*& dyn_w();
    }; // UnityEngine.ParticleSystemJobs.NativeParticleData/Array4
    #pragma pack(pop)
    static check_size<sizeof(NativeParticleData::Array4), 24 + sizeof(float*)> __UnityEngine_ParticleSystemJobs_NativeParticleData_Array4SizeCheck;
    static_assert(sizeof(NativeParticleData::Array4) == 0x20);
    public:
    // System.Int32 count
    // Size: 0x4
    // Offset: 0x0
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: count and: positions
    char __padding0[0x4] = {};
    // UnityEngine.ParticleSystemJobs.NativeParticleData/Array3 positions
    // Size: 0x18
    // Offset: 0x8
    ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3 positions;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3) == 0x18);
    // UnityEngine.ParticleSystemJobs.NativeParticleData/Array3 velocities
    // Size: 0x18
    // Offset: 0x20
    ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3 velocities;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3) == 0x18);
    // UnityEngine.ParticleSystemJobs.NativeParticleData/Array3 axisOfRotations
    // Size: 0x18
    // Offset: 0x38
    ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3 axisOfRotations;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3) == 0x18);
    // UnityEngine.ParticleSystemJobs.NativeParticleData/Array3 rotations
    // Size: 0x18
    // Offset: 0x50
    ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3 rotations;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3) == 0x18);
    // UnityEngine.ParticleSystemJobs.NativeParticleData/Array3 rotationalSpeeds
    // Size: 0x18
    // Offset: 0x68
    ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3 rotationalSpeeds;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3) == 0x18);
    // UnityEngine.ParticleSystemJobs.NativeParticleData/Array3 sizes
    // Size: 0x18
    // Offset: 0x80
    ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3 sizes;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3) == 0x18);
    // System.Void* startColors
    // Size: 0x8
    // Offset: 0x98
    void* startColors;
    // Field size check
    static_assert(sizeof(void*) == 0x8);
    // System.Void* aliveTimePercent
    // Size: 0x8
    // Offset: 0xA0
    void* aliveTimePercent;
    // Field size check
    static_assert(sizeof(void*) == 0x8);
    // System.Void* inverseStartLifetimes
    // Size: 0x8
    // Offset: 0xA8
    void* inverseStartLifetimes;
    // Field size check
    static_assert(sizeof(void*) == 0x8);
    // System.Void* randomSeeds
    // Size: 0x8
    // Offset: 0xB0
    void* randomSeeds;
    // Field size check
    static_assert(sizeof(void*) == 0x8);
    // UnityEngine.ParticleSystemJobs.NativeParticleData/Array4 customData1
    // Size: 0x20
    // Offset: 0xB8
    ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array4 customData1;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystemJobs::NativeParticleData::Array4) == 0x20);
    // UnityEngine.ParticleSystemJobs.NativeParticleData/Array4 customData2
    // Size: 0x20
    // Offset: 0xD8
    ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array4 customData2;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystemJobs::NativeParticleData::Array4) == 0x20);
    // System.Void* meshIndices
    // Size: 0x8
    // Offset: 0xF8
    void* meshIndices;
    // Field size check
    static_assert(sizeof(void*) == 0x8);
    public:
    // Creating value type constructor for type: NativeParticleData
    constexpr NativeParticleData(int count_ = {}, ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3 positions_ = {}, ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3 velocities_ = {}, ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3 axisOfRotations_ = {}, ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3 rotations_ = {}, ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3 rotationalSpeeds_ = {}, ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3 sizes_ = {}, void* startColors_ = {}, void* aliveTimePercent_ = {}, void* inverseStartLifetimes_ = {}, void* randomSeeds_ = {}, ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array4 customData1_ = {}, ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array4 customData2_ = {}, void* meshIndices_ = {}) noexcept : count{count_}, positions{positions_}, velocities{velocities_}, axisOfRotations{axisOfRotations_}, rotations{rotations_}, rotationalSpeeds{rotationalSpeeds_}, sizes{sizes_}, startColors{startColors_}, aliveTimePercent{aliveTimePercent_}, inverseStartLifetimes{inverseStartLifetimes_}, randomSeeds{randomSeeds_}, customData1{customData1_}, customData2{customData2_}, meshIndices{meshIndices_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count();
    // Get instance field reference: UnityEngine.ParticleSystemJobs.NativeParticleData/Array3 positions
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3& dyn_positions();
    // Get instance field reference: UnityEngine.ParticleSystemJobs.NativeParticleData/Array3 velocities
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3& dyn_velocities();
    // Get instance field reference: UnityEngine.ParticleSystemJobs.NativeParticleData/Array3 axisOfRotations
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3& dyn_axisOfRotations();
    // Get instance field reference: UnityEngine.ParticleSystemJobs.NativeParticleData/Array3 rotations
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3& dyn_rotations();
    // Get instance field reference: UnityEngine.ParticleSystemJobs.NativeParticleData/Array3 rotationalSpeeds
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3& dyn_rotationalSpeeds();
    // Get instance field reference: UnityEngine.ParticleSystemJobs.NativeParticleData/Array3 sizes
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3& dyn_sizes();
    // Get instance field reference: System.Void* startColors
    [[deprecated("Use field access instead!")]] void*& dyn_startColors();
    // Get instance field reference: System.Void* aliveTimePercent
    [[deprecated("Use field access instead!")]] void*& dyn_aliveTimePercent();
    // Get instance field reference: System.Void* inverseStartLifetimes
    [[deprecated("Use field access instead!")]] void*& dyn_inverseStartLifetimes();
    // Get instance field reference: System.Void* randomSeeds
    [[deprecated("Use field access instead!")]] void*& dyn_randomSeeds();
    // Get instance field reference: UnityEngine.ParticleSystemJobs.NativeParticleData/Array4 customData1
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array4& dyn_customData1();
    // Get instance field reference: UnityEngine.ParticleSystemJobs.NativeParticleData/Array4 customData2
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystemJobs::NativeParticleData::Array4& dyn_customData2();
    // Get instance field reference: System.Void* meshIndices
    [[deprecated("Use field access instead!")]] void*& dyn_meshIndices();
  }; // UnityEngine.ParticleSystemJobs.NativeParticleData
  #pragma pack(pop)
  static check_size<sizeof(NativeParticleData), 248 + sizeof(void*)> __UnityEngine_ParticleSystemJobs_NativeParticleDataSizeCheck;
  static_assert(sizeof(NativeParticleData) == 0x100);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ParticleSystemJobs::NativeParticleData::Array4, "UnityEngine.ParticleSystemJobs", "NativeParticleData/Array4");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ParticleSystemJobs::NativeParticleData::Array3, "UnityEngine.ParticleSystemJobs", "NativeParticleData/Array3");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
