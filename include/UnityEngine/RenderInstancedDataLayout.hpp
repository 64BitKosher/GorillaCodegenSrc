// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderInstancedDataLayout
  struct RenderInstancedDataLayout;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::RenderInstancedDataLayout, "UnityEngine", "RenderInstancedDataLayout");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.RenderInstancedDataLayout
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct RenderInstancedDataLayout/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Int32 <size>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <offsetObjectToWorld>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    int offsetObjectToWorld;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <offsetPrevObjectToWorld>k__BackingField
    // Size: 0x4
    // Offset: 0x8
    int offsetPrevObjectToWorld;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <offsetRenderingLayerMask>k__BackingField
    // Size: 0x4
    // Offset: 0xC
    int offsetRenderingLayerMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: RenderInstancedDataLayout
    constexpr RenderInstancedDataLayout(int size_ = {}, int offsetObjectToWorld_ = {}, int offsetPrevObjectToWorld_ = {}, int offsetRenderingLayerMask_ = {}) noexcept : size{size_}, offsetObjectToWorld{offsetObjectToWorld_}, offsetPrevObjectToWorld{offsetPrevObjectToWorld_}, offsetRenderingLayerMask{offsetRenderingLayerMask_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly System.Int32 <size>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$size$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <offsetObjectToWorld>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$offsetObjectToWorld$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <offsetPrevObjectToWorld>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$offsetPrevObjectToWorld$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <offsetRenderingLayerMask>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$offsetRenderingLayerMask$k__BackingField();
  }; // UnityEngine.RenderInstancedDataLayout
  #pragma pack(pop)
  static check_size<sizeof(RenderInstancedDataLayout), 12 + sizeof(int)> __UnityEngine_RenderInstancedDataLayoutSizeCheck;
  static_assert(sizeof(RenderInstancedDataLayout) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
