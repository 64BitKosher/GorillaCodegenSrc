// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.GraphicsBuffer
#include "UnityEngine/GraphicsBuffer.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs, "UnityEngine", "GraphicsBuffer/IndirectDrawIndexedArgs");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.GraphicsBuffer/IndirectDrawIndexedArgs
  // [TokenAttribute] Offset: FFFFFFFF
  struct GraphicsBuffer::IndirectDrawIndexedArgs/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.UInt32 <indexCountPerInstance>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    uint indexCountPerInstance;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 <instanceCount>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    uint instanceCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 <startIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x8
    uint startIndex;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 <baseVertexIndex>k__BackingField
    // Size: 0x4
    // Offset: 0xC
    uint baseVertexIndex;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 <startInstance>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    uint startInstance;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: IndirectDrawIndexedArgs
    constexpr IndirectDrawIndexedArgs(uint indexCountPerInstance_ = {}, uint instanceCount_ = {}, uint startIndex_ = {}, uint baseVertexIndex_ = {}, uint startInstance_ = {}) noexcept : indexCountPerInstance{indexCountPerInstance_}, instanceCount{instanceCount_}, startIndex{startIndex_}, baseVertexIndex{baseVertexIndex_}, startInstance{startInstance_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 size
    static constexpr const int size = 20;
    // Get static field: static public System.Int32 size
    static int _get_size();
    // Set static field: static public System.Int32 size
    static void _set_size(int value);
    // Get instance field reference: private System.UInt32 <indexCountPerInstance>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$indexCountPerInstance$k__BackingField();
    // Get instance field reference: private System.UInt32 <instanceCount>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$instanceCount$k__BackingField();
    // Get instance field reference: private System.UInt32 <startIndex>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$startIndex$k__BackingField();
    // Get instance field reference: private System.UInt32 <baseVertexIndex>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$baseVertexIndex$k__BackingField();
    // Get instance field reference: private System.UInt32 <startInstance>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$startInstance$k__BackingField();
    // public System.Void set_indexCountPerInstance(System.UInt32 value)
    // Offset: 0x549DF7C
    void set_indexCountPerInstance(uint value);
    // public System.UInt32 get_instanceCount()
    // Offset: 0x549DF84
    uint get_instanceCount();
    // public System.Void set_instanceCount(System.UInt32 value)
    // Offset: 0x549DF8C
    void set_instanceCount(uint value);
    // public System.Void set_startIndex(System.UInt32 value)
    // Offset: 0x549DF94
    void set_startIndex(uint value);
    // public System.Void set_baseVertexIndex(System.UInt32 value)
    // Offset: 0x549DF9C
    void set_baseVertexIndex(uint value);
    // public System.UInt32 get_startInstance()
    // Offset: 0x549DFA4
    uint get_startInstance();
    // public System.Void set_startInstance(System.UInt32 value)
    // Offset: 0x549DFAC
    void set_startInstance(uint value);
  }; // UnityEngine.GraphicsBuffer/IndirectDrawIndexedArgs
  #pragma pack(pop)
  static check_size<sizeof(GraphicsBuffer::IndirectDrawIndexedArgs), 16 + sizeof(uint)> __UnityEngine_GraphicsBuffer_IndirectDrawIndexedArgsSizeCheck;
  static_assert(sizeof(GraphicsBuffer::IndirectDrawIndexedArgs) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::set_indexCountPerInstance
// Il2CppName: set_indexCountPerInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::*)(uint)>(&UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::set_indexCountPerInstance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs), "set_indexCountPerInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::get_instanceCount
// Il2CppName: get_instanceCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::*)()>(&UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::get_instanceCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs), "get_instanceCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::set_instanceCount
// Il2CppName: set_instanceCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::*)(uint)>(&UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::set_instanceCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs), "set_instanceCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::set_startIndex
// Il2CppName: set_startIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::*)(uint)>(&UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::set_startIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs), "set_startIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::set_baseVertexIndex
// Il2CppName: set_baseVertexIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::*)(uint)>(&UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::set_baseVertexIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs), "set_baseVertexIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::get_startInstance
// Il2CppName: get_startInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::*)()>(&UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::get_startInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs), "get_startInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::set_startInstance
// Il2CppName: set_startInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::*)(uint)>(&UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs::set_startInstance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs), "set_startInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
