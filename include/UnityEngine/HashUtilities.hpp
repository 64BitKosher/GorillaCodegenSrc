// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Hash128
  struct Hash128;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: HashUtilities
  class HashUtilities;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::HashUtilities);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::HashUtilities*, "UnityEngine", "HashUtilities");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.HashUtilities
  // [TokenAttribute] Offset: FFFFFFFF
  class HashUtilities : public ::Il2CppObject {
    public:
    // static public System.Void AppendHash(ref UnityEngine.Hash128 inHash, ref UnityEngine.Hash128 outHash)
    // Offset: 0x54B1E70
    static void AppendHash(ByRef<::UnityEngine::Hash128> inHash, ByRef<::UnityEngine::Hash128> outHash);
    // static public System.Void QuantisedMatrixHash(ref UnityEngine.Matrix4x4 value, ref UnityEngine.Hash128 hash)
    // Offset: 0x54B1EBC
    static void QuantisedMatrixHash(ByRef<::UnityEngine::Matrix4x4> value, ByRef<::UnityEngine::Hash128> hash);
    // static public System.Void QuantisedVectorHash(ref UnityEngine.Vector3 value, ref UnityEngine.Hash128 hash)
    // Offset: 0x54B207C
    static void QuantisedVectorHash(ByRef<::UnityEngine::Vector3> value, ByRef<::UnityEngine::Hash128> hash);
  }; // UnityEngine.HashUtilities
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::HashUtilities::AppendHash
// Il2CppName: AppendHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Hash128>, ByRef<::UnityEngine::Hash128>)>(&UnityEngine::HashUtilities::AppendHash)> {
  static const MethodInfo* get() {
    static auto* inHash = &::il2cpp_utils::GetClassFromName("UnityEngine", "Hash128")->this_arg;
    static auto* outHash = &::il2cpp_utils::GetClassFromName("UnityEngine", "Hash128")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HashUtilities*), "AppendHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inHash, outHash});
  }
};
// Writing MetadataGetter for method: UnityEngine::HashUtilities::QuantisedMatrixHash
// Il2CppName: QuantisedMatrixHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Matrix4x4>, ByRef<::UnityEngine::Hash128>)>(&UnityEngine::HashUtilities::QuantisedMatrixHash)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    static auto* hash = &::il2cpp_utils::GetClassFromName("UnityEngine", "Hash128")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HashUtilities*), "QuantisedMatrixHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, hash});
  }
};
// Writing MetadataGetter for method: UnityEngine::HashUtilities::QuantisedVectorHash
// Il2CppName: QuantisedVectorHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Hash128>)>(&UnityEngine::HashUtilities::QuantisedVectorHash)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hash = &::il2cpp_utils::GetClassFromName("UnityEngine", "Hash128")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HashUtilities*), "QuantisedVectorHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, hash});
  }
};
