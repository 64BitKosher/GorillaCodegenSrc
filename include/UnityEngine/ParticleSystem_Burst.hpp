// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.ParticleSystem/MinMaxCurve
#include "UnityEngine/ParticleSystem_MinMaxCurve.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ParticleSystem::Burst, "UnityEngine", "ParticleSystem/Burst");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x34
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ParticleSystem/Burst
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeTypeAttribute] Offset: FFFFFFFF
  struct ParticleSystem::Burst/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Single m_Time
    // Size: 0x4
    // Offset: 0x0
    float m_Time;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_Time and: m_Count
    char __padding0[0x4] = {};
    // private UnityEngine.ParticleSystem/MinMaxCurve m_Count
    // Size: 0x20
    // Offset: 0x8
    ::UnityEngine::ParticleSystem::MinMaxCurve m_Count;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem::MinMaxCurve) == 0x20);
    // private System.Int32 m_RepeatCount
    // Size: 0x4
    // Offset: 0x28
    int m_RepeatCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_RepeatInterval
    // Size: 0x4
    // Offset: 0x2C
    float m_RepeatInterval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_InvProbability
    // Size: 0x4
    // Offset: 0x30
    float m_InvProbability;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: Burst
    constexpr Burst(float m_Time_ = {}, ::UnityEngine::ParticleSystem::MinMaxCurve m_Count_ = {}, int m_RepeatCount_ = {}, float m_RepeatInterval_ = {}, float m_InvProbability_ = {}) noexcept : m_Time{m_Time_}, m_Count{m_Count_}, m_RepeatCount{m_RepeatCount_}, m_RepeatInterval{m_RepeatInterval_}, m_InvProbability{m_InvProbability_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Single m_Time
    [[deprecated("Use field access instead!")]] float& dyn_m_Time();
    // Get instance field reference: private UnityEngine.ParticleSystem/MinMaxCurve m_Count
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::MinMaxCurve& dyn_m_Count();
    // Get instance field reference: private System.Int32 m_RepeatCount
    [[deprecated("Use field access instead!")]] int& dyn_m_RepeatCount();
    // Get instance field reference: private System.Single m_RepeatInterval
    [[deprecated("Use field access instead!")]] float& dyn_m_RepeatInterval();
    // Get instance field reference: private System.Single m_InvProbability
    [[deprecated("Use field access instead!")]] float& dyn_m_InvProbability();
    // public System.Void .ctor(System.Single _time, System.Int16 _minCount, System.Int16 _maxCount, System.Int32 _cycleCount, System.Single _repeatInterval)
    // Offset: 0x5520B54
    Burst(float _time, int16_t _minCount, int16_t _maxCount, int _cycleCount, float _repeatInterval);
    // public System.Single get_time()
    // Offset: 0x5520C44
    float get_time();
    // public UnityEngine.ParticleSystem/MinMaxCurve get_count()
    // Offset: 0x5520C4C
    ::UnityEngine::ParticleSystem::MinMaxCurve get_count();
    // public System.Void set_count(UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5520C5C
    void set_count(::UnityEngine::ParticleSystem::MinMaxCurve value);
    // public System.Int16 get_minCount()
    // Offset: 0x5520C78
    int16_t get_minCount();
    // public System.Int16 get_maxCount()
    // Offset: 0x5520C9C
    int16_t get_maxCount();
    // public System.Int32 get_cycleCount()
    // Offset: 0x5520CC0
    int get_cycleCount();
    // public System.Single get_repeatInterval()
    // Offset: 0x5520CCC
    float get_repeatInterval();
    // public System.Single get_probability()
    // Offset: 0x5520CD4
    float get_probability();
    // public System.Void set_probability(System.Single value)
    // Offset: 0x5520CE4
    void set_probability(float value);
  }; // UnityEngine.ParticleSystem/Burst
  #pragma pack(pop)
  static check_size<sizeof(ParticleSystem::Burst), 48 + sizeof(float)> __UnityEngine_ParticleSystem_BurstSizeCheck;
  static_assert(sizeof(ParticleSystem::Burst) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Burst::Burst
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Burst::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystem::Burst::*)()>(&UnityEngine::ParticleSystem::Burst::get_time)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::Burst), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Burst::get_count
// Il2CppName: get_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::MinMaxCurve (UnityEngine::ParticleSystem::Burst::*)()>(&UnityEngine::ParticleSystem::Burst::get_count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::Burst), "get_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Burst::set_count
// Il2CppName: set_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::Burst::*)(::UnityEngine::ParticleSystem::MinMaxCurve)>(&UnityEngine::ParticleSystem::Burst::set_count)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::Burst), "set_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Burst::get_minCount
// Il2CppName: get_minCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (UnityEngine::ParticleSystem::Burst::*)()>(&UnityEngine::ParticleSystem::Burst::get_minCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::Burst), "get_minCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Burst::get_maxCount
// Il2CppName: get_maxCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (UnityEngine::ParticleSystem::Burst::*)()>(&UnityEngine::ParticleSystem::Burst::get_maxCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::Burst), "get_maxCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Burst::get_cycleCount
// Il2CppName: get_cycleCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystem::Burst::*)()>(&UnityEngine::ParticleSystem::Burst::get_cycleCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::Burst), "get_cycleCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Burst::get_repeatInterval
// Il2CppName: get_repeatInterval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystem::Burst::*)()>(&UnityEngine::ParticleSystem::Burst::get_repeatInterval)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::Burst), "get_repeatInterval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Burst::get_probability
// Il2CppName: get_probability
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystem::Burst::*)()>(&UnityEngine::ParticleSystem::Burst::get_probability)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::Burst), "get_probability", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Burst::set_probability
// Il2CppName: set_probability
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::Burst::*)(float)>(&UnityEngine::ParticleSystem::Burst::set_probability)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::Burst), "set_probability", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
