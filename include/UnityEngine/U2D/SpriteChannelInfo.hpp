// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Type namespace: UnityEngine.U2D
namespace UnityEngine::U2D {
  // Forward declaring type: SpriteChannelInfo
  struct SpriteChannelInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::U2D::SpriteChannelInfo, "UnityEngine.U2D", "SpriteChannelInfo");
// Type namespace: UnityEngine.U2D
namespace UnityEngine::U2D {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.U2D.SpriteChannelInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [VisibleToOtherModulesAttribute] Offset: FFFFFFFF
  struct SpriteChannelInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.IntPtr m_Buffer
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr m_Buffer;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.Int32 m_Count
    // Size: 0x4
    // Offset: 0x8
    int m_Count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_Offset
    // Size: 0x4
    // Offset: 0xC
    int m_Offset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_Stride
    // Size: 0x4
    // Offset: 0x10
    int m_Stride;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: SpriteChannelInfo
    constexpr SpriteChannelInfo(::System::IntPtr m_Buffer_ = {}, int m_Count_ = {}, int m_Offset_ = {}, int m_Stride_ = {}) noexcept : m_Buffer{m_Buffer_}, m_Count{m_Count_}, m_Offset{m_Offset_}, m_Stride{m_Stride_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.IntPtr m_Buffer
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_Buffer();
    // Get instance field reference: private System.Int32 m_Count
    [[deprecated("Use field access instead!")]] int& dyn_m_Count();
    // Get instance field reference: private System.Int32 m_Offset
    [[deprecated("Use field access instead!")]] int& dyn_m_Offset();
    // Get instance field reference: private System.Int32 m_Stride
    [[deprecated("Use field access instead!")]] int& dyn_m_Stride();
    // public System.Void* get_buffer()
    // Offset: 0x54D6BDC
    void* get_buffer();
    // public System.Int32 get_count()
    // Offset: 0x54D6BE8
    int get_count();
    // public System.Int32 get_offset()
    // Offset: 0x54D6BF0
    int get_offset();
    // public System.Int32 get_stride()
    // Offset: 0x54D6BF8
    int get_stride();
  }; // UnityEngine.U2D.SpriteChannelInfo
  #pragma pack(pop)
  static check_size<sizeof(SpriteChannelInfo), 16 + sizeof(int)> __UnityEngine_U2D_SpriteChannelInfoSizeCheck;
  static_assert(sizeof(SpriteChannelInfo) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::U2D::SpriteChannelInfo::get_buffer
// Il2CppName: get_buffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void* (UnityEngine::U2D::SpriteChannelInfo::*)()>(&UnityEngine::U2D::SpriteChannelInfo::get_buffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::U2D::SpriteChannelInfo), "get_buffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::U2D::SpriteChannelInfo::get_count
// Il2CppName: get_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::U2D::SpriteChannelInfo::*)()>(&UnityEngine::U2D::SpriteChannelInfo::get_count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::U2D::SpriteChannelInfo), "get_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::U2D::SpriteChannelInfo::get_offset
// Il2CppName: get_offset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::U2D::SpriteChannelInfo::*)()>(&UnityEngine::U2D::SpriteChannelInfo::get_offset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::U2D::SpriteChannelInfo), "get_offset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::U2D::SpriteChannelInfo::get_stride
// Il2CppName: get_stride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::U2D::SpriteChannelInfo::*)()>(&UnityEngine::U2D::SpriteChannelInfo::get_stride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::U2D::SpriteChannelInfo), "get_stride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
