// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.U2D
namespace UnityEngine::U2D {
  // Forward declaring type: SpriteBone
  struct SpriteBone;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::U2D::SpriteBone, "UnityEngine.U2D", "SpriteBone");
// Type namespace: UnityEngine.U2D
namespace UnityEngine::U2D {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.U2D.SpriteBone
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeTypeAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: FFFFFFFF
  // [MovedFromAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  struct SpriteBone/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.String m_Name
    // Size: 0x8
    // Offset: 0x0
    ::StringW m_Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_Guid
    // Size: 0x8
    // Offset: 0x8
    ::StringW m_Guid;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Vector3 m_Position
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 m_Position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion m_Rotation
    // Size: 0x10
    // Offset: 0x1C
    ::UnityEngine::Quaternion m_Rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Single m_Length
    // Size: 0x4
    // Offset: 0x2C
    float m_Length;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_ParentId
    // Size: 0x4
    // Offset: 0x30
    int m_ParentId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Color32 m_Color
    // Size: 0x4
    // Offset: 0x34
    ::UnityEngine::Color32 m_Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    public:
    // Creating value type constructor for type: SpriteBone
    constexpr SpriteBone(::StringW m_Name_ = {}, ::StringW m_Guid_ = {}, ::UnityEngine::Vector3 m_Position_ = {}, ::UnityEngine::Quaternion m_Rotation_ = {}, float m_Length_ = {}, int m_ParentId_ = {}, ::UnityEngine::Color32 m_Color_ = {}) noexcept : m_Name{m_Name_}, m_Guid{m_Guid_}, m_Position{m_Position_}, m_Rotation{m_Rotation_}, m_Length{m_Length_}, m_ParentId{m_ParentId_}, m_Color{m_Color_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.String m_Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Name();
    // Get instance field reference: private System.String m_Guid
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Guid();
    // Get instance field reference: private UnityEngine.Vector3 m_Position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Position();
    // Get instance field reference: private UnityEngine.Quaternion m_Rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_Rotation();
    // Get instance field reference: private System.Single m_Length
    [[deprecated("Use field access instead!")]] float& dyn_m_Length();
    // Get instance field reference: private System.Int32 m_ParentId
    [[deprecated("Use field access instead!")]] int& dyn_m_ParentId();
    // Get instance field reference: private UnityEngine.Color32 m_Color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_Color();
  }; // UnityEngine.U2D.SpriteBone
  #pragma pack(pop)
  static check_size<sizeof(SpriteBone), 52 + sizeof(::UnityEngine::Color32)> __UnityEngine_U2D_SpriteBoneSizeCheck;
  static_assert(sizeof(SpriteBone) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
