// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ColorGamut
  struct ColorGamut;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: HDROutputSettings
  class HDROutputSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::HDROutputSettings);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::HDROutputSettings*, "UnityEngine", "HDROutputSettings");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.HDROutputSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  class HDROutputSettings : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 m_DisplayIndex
    // Size: 0x4
    // Offset: 0x10
    int m_DisplayIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return m_DisplayIndex;
    }
    // Get static field: static public UnityEngine.HDROutputSettings[] displays
    static ::ArrayW<::UnityEngine::HDROutputSettings*> _get_displays();
    // Set static field: static public UnityEngine.HDROutputSettings[] displays
    static void _set_displays(::ArrayW<::UnityEngine::HDROutputSettings*> value);
    // Get static field: static private UnityEngine.HDROutputSettings _mainDisplay
    static ::UnityEngine::HDROutputSettings* _get__mainDisplay();
    // Set static field: static private UnityEngine.HDROutputSettings _mainDisplay
    static void _set__mainDisplay(::UnityEngine::HDROutputSettings* value);
    // Get instance field reference: private System.Int32 m_DisplayIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_DisplayIndex();
    // System.Void .ctor()
    // Offset: 0x548D0C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HDROutputSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::HDROutputSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HDROutputSettings*, creationType>()));
    }
    // static public UnityEngine.HDROutputSettings get_main()
    // Offset: 0x548D0E4
    static ::UnityEngine::HDROutputSettings* get_main();
    // public System.Boolean get_active()
    // Offset: 0x548D13C
    bool get_active();
    // public System.Boolean get_available()
    // Offset: 0x548D1F0
    bool get_available();
    // public System.Void set_automaticHDRTonemapping(System.Boolean value)
    // Offset: 0x548D2A4
    void set_automaticHDRTonemapping(bool value);
    // public UnityEngine.ColorGamut get_displayColorGamut()
    // Offset: 0x548D370
    ::UnityEngine::ColorGamut get_displayColorGamut();
    // public System.Single get_paperWhiteNits()
    // Offset: 0x548D424
    float get_paperWhiteNits();
    // public System.Int32 get_maxToneMapLuminance()
    // Offset: 0x548D4D8
    int get_maxToneMapLuminance();
    // public System.Int32 get_minToneMapLuminance()
    // Offset: 0x548D58C
    int get_minToneMapLuminance();
    // public System.Void RequestHDRModeChange(System.Boolean enabled)
    // Offset: 0x548D640
    void RequestHDRModeChange(bool enabled);
    // static private System.Boolean GetActive(System.Int32 displayIndex)
    // Offset: 0x548D1B4
    static bool GetActive(int displayIndex);
    // static private System.Boolean GetAvailable(System.Int32 displayIndex)
    // Offset: 0x548D268
    static bool GetAvailable(int displayIndex);
    // static private System.Void SetAutomaticHDRTonemapping(System.Int32 displayIndex, System.Boolean scripted)
    // Offset: 0x548D32C
    static void SetAutomaticHDRTonemapping(int displayIndex, bool scripted);
    // static private UnityEngine.ColorGamut GetDisplayColorGamut(System.Int32 displayIndex)
    // Offset: 0x548D3E8
    static ::UnityEngine::ColorGamut GetDisplayColorGamut(int displayIndex);
    // static private System.Single GetPaperWhiteNits(System.Int32 displayIndex)
    // Offset: 0x548D49C
    static float GetPaperWhiteNits(int displayIndex);
    // static private System.Int32 GetMaxToneMapLuminance(System.Int32 displayIndex)
    // Offset: 0x548D550
    static int GetMaxToneMapLuminance(int displayIndex);
    // static private System.Int32 GetMinToneMapLuminance(System.Int32 displayIndex)
    // Offset: 0x548D604
    static int GetMinToneMapLuminance(int displayIndex);
    // static private System.Void RequestHDRModeChangeInternal(System.Int32 displayIndex, System.Boolean enabled)
    // Offset: 0x548D6C8
    static void RequestHDRModeChangeInternal(int displayIndex, bool enabled);
    // static private System.Void .cctor()
    // Offset: 0x548D70C
    static void _cctor();
  }; // UnityEngine.HDROutputSettings
  #pragma pack(pop)
  static check_size<sizeof(HDROutputSettings), 16 + sizeof(int)> __UnityEngine_HDROutputSettingsSizeCheck;
  static_assert(sizeof(HDROutputSettings) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::get_main
// Il2CppName: get_main
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::HDROutputSettings* (*)()>(&UnityEngine::HDROutputSettings::get_main)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "get_main", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::get_active
// Il2CppName: get_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::HDROutputSettings::*)()>(&UnityEngine::HDROutputSettings::get_active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "get_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::get_available
// Il2CppName: get_available
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::HDROutputSettings::*)()>(&UnityEngine::HDROutputSettings::get_available)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "get_available", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::set_automaticHDRTonemapping
// Il2CppName: set_automaticHDRTonemapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HDROutputSettings::*)(bool)>(&UnityEngine::HDROutputSettings::set_automaticHDRTonemapping)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "set_automaticHDRTonemapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::get_displayColorGamut
// Il2CppName: get_displayColorGamut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ColorGamut (UnityEngine::HDROutputSettings::*)()>(&UnityEngine::HDROutputSettings::get_displayColorGamut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "get_displayColorGamut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::get_paperWhiteNits
// Il2CppName: get_paperWhiteNits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::HDROutputSettings::*)()>(&UnityEngine::HDROutputSettings::get_paperWhiteNits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "get_paperWhiteNits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::get_maxToneMapLuminance
// Il2CppName: get_maxToneMapLuminance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::HDROutputSettings::*)()>(&UnityEngine::HDROutputSettings::get_maxToneMapLuminance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "get_maxToneMapLuminance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::get_minToneMapLuminance
// Il2CppName: get_minToneMapLuminance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::HDROutputSettings::*)()>(&UnityEngine::HDROutputSettings::get_minToneMapLuminance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "get_minToneMapLuminance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::RequestHDRModeChange
// Il2CppName: RequestHDRModeChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HDROutputSettings::*)(bool)>(&UnityEngine::HDROutputSettings::RequestHDRModeChange)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "RequestHDRModeChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::GetActive
// Il2CppName: GetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&UnityEngine::HDROutputSettings::GetActive)> {
  static const MethodInfo* get() {
    static auto* displayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "GetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::GetAvailable
// Il2CppName: GetAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&UnityEngine::HDROutputSettings::GetAvailable)> {
  static const MethodInfo* get() {
    static auto* displayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "GetAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::SetAutomaticHDRTonemapping
// Il2CppName: SetAutomaticHDRTonemapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, bool)>(&UnityEngine::HDROutputSettings::SetAutomaticHDRTonemapping)> {
  static const MethodInfo* get() {
    static auto* displayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* scripted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "SetAutomaticHDRTonemapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayIndex, scripted});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::GetDisplayColorGamut
// Il2CppName: GetDisplayColorGamut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ColorGamut (*)(int)>(&UnityEngine::HDROutputSettings::GetDisplayColorGamut)> {
  static const MethodInfo* get() {
    static auto* displayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "GetDisplayColorGamut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::GetPaperWhiteNits
// Il2CppName: GetPaperWhiteNits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int)>(&UnityEngine::HDROutputSettings::GetPaperWhiteNits)> {
  static const MethodInfo* get() {
    static auto* displayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "GetPaperWhiteNits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::GetMaxToneMapLuminance
// Il2CppName: GetMaxToneMapLuminance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&UnityEngine::HDROutputSettings::GetMaxToneMapLuminance)> {
  static const MethodInfo* get() {
    static auto* displayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "GetMaxToneMapLuminance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::GetMinToneMapLuminance
// Il2CppName: GetMinToneMapLuminance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&UnityEngine::HDROutputSettings::GetMinToneMapLuminance)> {
  static const MethodInfo* get() {
    static auto* displayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "GetMinToneMapLuminance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::RequestHDRModeChangeInternal
// Il2CppName: RequestHDRModeChangeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, bool)>(&UnityEngine::HDROutputSettings::RequestHDRModeChangeInternal)> {
  static const MethodInfo* get() {
    static auto* displayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), "RequestHDRModeChangeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayIndex, enabled});
  }
};
// Writing MetadataGetter for method: UnityEngine::HDROutputSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::HDROutputSettings::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HDROutputSettings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
