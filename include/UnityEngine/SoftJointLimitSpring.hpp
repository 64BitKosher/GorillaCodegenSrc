// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SoftJointLimitSpring
  struct SoftJointLimitSpring;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::SoftJointLimitSpring, "UnityEngine", "SoftJointLimitSpring");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.SoftJointLimitSpring
  // [TokenAttribute] Offset: FFFFFFFF
  struct SoftJointLimitSpring/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Single m_Spring
    // Size: 0x4
    // Offset: 0x0
    float m_Spring;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Damper
    // Size: 0x4
    // Offset: 0x4
    float m_Damper;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: SoftJointLimitSpring
    constexpr SoftJointLimitSpring(float m_Spring_ = {}, float m_Damper_ = {}) noexcept : m_Spring{m_Spring_}, m_Damper{m_Damper_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Single m_Spring
    [[deprecated("Use field access instead!")]] float& dyn_m_Spring();
    // Get instance field reference: private System.Single m_Damper
    [[deprecated("Use field access instead!")]] float& dyn_m_Damper();
  }; // UnityEngine.SoftJointLimitSpring
  #pragma pack(pop)
  static check_size<sizeof(SoftJointLimitSpring), 4 + sizeof(float)> __UnityEngine_SoftJointLimitSpringSizeCheck;
  static_assert(sizeof(SoftJointLimitSpring) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
