// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: MeshUpdateFlags
  struct MeshUpdateFlags;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Mesh::MeshDataArray, "UnityEngine", "Mesh/MeshDataArray");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Mesh/MeshDataArray
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeContainerAttribute] Offset: FFFFFFFF
  // [NativeContainerSupportsMinMaxWriteRestrictionAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  // [StaticAccessorAttribute] Offset: FFFFFFFF
  struct Mesh::MeshDataArray/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // System.IntPtr* m_Ptrs
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr* m_Ptrs;
    // Field size check
    static_assert(sizeof(::System::IntPtr*) == 0x8);
    // System.Int32 m_Length
    // Size: 0x4
    // Offset: 0x8
    int m_Length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: MeshDataArray
    constexpr MeshDataArray(::System::IntPtr* m_Ptrs_ = {}, int m_Length_ = {}) noexcept : m_Ptrs{m_Ptrs_}, m_Length{m_Length_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: System.IntPtr* m_Ptrs
    [[deprecated("Use field access instead!")]] ::System::IntPtr*& dyn_m_Ptrs();
    // Get instance field reference: System.Int32 m_Length
    [[deprecated("Use field access instead!")]] int& dyn_m_Length();
    // static private System.Void AcquireReadOnlyMeshData(UnityEngine.Mesh mesh, System.IntPtr* datas)
    // Offset: 0x54A8664
    static void AcquireReadOnlyMeshData(::UnityEngine::Mesh* mesh, ::System::IntPtr* datas);
    // static private System.Void AcquireReadOnlyMeshDatas(UnityEngine.Mesh[] meshes, System.IntPtr* datas, System.Int32 count)
    // Offset: 0x54A86A8
    static void AcquireReadOnlyMeshDatas(::ArrayW<::UnityEngine::Mesh*> meshes, ::System::IntPtr* datas, int count);
    // static private System.Void ReleaseMeshDatas(System.IntPtr* datas, System.Int32 count)
    // Offset: 0x54A86FC
    static void ReleaseMeshDatas(::System::IntPtr* datas, int count);
    // static private System.Void CreateNewMeshDatas(System.IntPtr* datas, System.Int32 count)
    // Offset: 0x54A8740
    static void CreateNewMeshDatas(::System::IntPtr* datas, int count);
    // static private System.Void ApplyToMeshesImpl(UnityEngine.Mesh[] meshes, System.IntPtr* datas, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A8784
    static void ApplyToMeshesImpl(::ArrayW<::UnityEngine::Mesh*> meshes, ::System::IntPtr* datas, int count, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // static private System.Void ApplyToMeshImpl(UnityEngine.Mesh mesh, System.IntPtr data, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A87E0
    static void ApplyToMeshImpl(::UnityEngine::Mesh* mesh, ::System::IntPtr data, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Int32 get_Length()
    // Offset: 0x54A8834
    int get_Length();
    // public UnityEngine.Mesh/MeshData get_Item(System.Int32 index)
    // Offset: 0x54A883C
    ::UnityEngine::Mesh::MeshData get_Item(int index);
    // public System.Void Dispose()
    // Offset: 0x54A8848
    void Dispose();
    // System.Void ApplyToMeshAndDispose(UnityEngine.Mesh mesh, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A4548
    void ApplyToMeshAndDispose(::UnityEngine::Mesh* mesh, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // System.Void ApplyToMeshesAndDispose(UnityEngine.Mesh[] meshes, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A47B8
    void ApplyToMeshesAndDispose(::ArrayW<::UnityEngine::Mesh*> meshes, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // System.Void .ctor(UnityEngine.Mesh mesh, System.Boolean checkReadWrite)
    // Offset: 0x54A3C00
    MeshDataArray(::UnityEngine::Mesh* mesh, bool checkReadWrite);
    // System.Void .ctor(UnityEngine.Mesh[] meshes, System.Int32 meshesCount, System.Boolean checkReadWrite)
    // Offset: 0x54A3EB4
    MeshDataArray(::ArrayW<::UnityEngine::Mesh*> meshes, int meshesCount, bool checkReadWrite);
    // System.Void .ctor(System.Int32 meshesCount)
    // Offset: 0x54A42AC
    MeshDataArray(int meshesCount);
  }; // UnityEngine.Mesh/MeshDataArray
  #pragma pack(pop)
  static check_size<sizeof(Mesh::MeshDataArray), 8 + sizeof(int)> __UnityEngine_Mesh_MeshDataArraySizeCheck;
  static_assert(sizeof(Mesh::MeshDataArray) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshDataArray::AcquireReadOnlyMeshData
// Il2CppName: AcquireReadOnlyMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, ::System::IntPtr*)>(&UnityEngine::Mesh::MeshDataArray::AcquireReadOnlyMeshData)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* datas = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "IntPtr"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshDataArray), "AcquireReadOnlyMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, datas});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshDataArray::AcquireReadOnlyMeshDatas
// Il2CppName: AcquireReadOnlyMeshDatas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::UnityEngine::Mesh*>, ::System::IntPtr*, int)>(&UnityEngine::Mesh::MeshDataArray::AcquireReadOnlyMeshDatas)> {
  static const MethodInfo* get() {
    static auto* meshes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh"), 1)->byval_arg;
    static auto* datas = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "IntPtr"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshDataArray), "AcquireReadOnlyMeshDatas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshes, datas, count});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshDataArray::ReleaseMeshDatas
// Il2CppName: ReleaseMeshDatas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr*, int)>(&UnityEngine::Mesh::MeshDataArray::ReleaseMeshDatas)> {
  static const MethodInfo* get() {
    static auto* datas = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "IntPtr"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshDataArray), "ReleaseMeshDatas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{datas, count});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshDataArray::CreateNewMeshDatas
// Il2CppName: CreateNewMeshDatas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr*, int)>(&UnityEngine::Mesh::MeshDataArray::CreateNewMeshDatas)> {
  static const MethodInfo* get() {
    static auto* datas = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "IntPtr"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshDataArray), "CreateNewMeshDatas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{datas, count});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshDataArray::ApplyToMeshesImpl
// Il2CppName: ApplyToMeshesImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::UnityEngine::Mesh*>, ::System::IntPtr*, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::MeshDataArray::ApplyToMeshesImpl)> {
  static const MethodInfo* get() {
    static auto* meshes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh"), 1)->byval_arg;
    static auto* datas = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "IntPtr"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshDataArray), "ApplyToMeshesImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshes, datas, count, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshDataArray::ApplyToMeshImpl
// Il2CppName: ApplyToMeshImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, ::System::IntPtr, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::MeshDataArray::ApplyToMeshImpl)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshDataArray), "ApplyToMeshImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, data, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshDataArray::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::MeshDataArray::*)()>(&UnityEngine::Mesh::MeshDataArray::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshDataArray), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshDataArray::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh::MeshData (UnityEngine::Mesh::MeshDataArray::*)(int)>(&UnityEngine::Mesh::MeshDataArray::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshDataArray), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshDataArray::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::MeshDataArray::*)()>(&UnityEngine::Mesh::MeshDataArray::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshDataArray), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshDataArray::ApplyToMeshAndDispose
// Il2CppName: ApplyToMeshAndDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::MeshDataArray::*)(::UnityEngine::Mesh*, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::MeshDataArray::ApplyToMeshAndDispose)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshDataArray), "ApplyToMeshAndDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshDataArray::ApplyToMeshesAndDispose
// Il2CppName: ApplyToMeshesAndDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::MeshDataArray::*)(::ArrayW<::UnityEngine::Mesh*>, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::MeshDataArray::ApplyToMeshesAndDispose)> {
  static const MethodInfo* get() {
    static auto* meshes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh"), 1)->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh::MeshDataArray), "ApplyToMeshesAndDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshes, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshDataArray::MeshDataArray
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshDataArray::MeshDataArray
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Mesh::MeshDataArray::MeshDataArray
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
