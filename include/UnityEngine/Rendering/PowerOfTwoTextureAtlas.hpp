// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Texture2DAtlas
#include "UnityEngine/Rendering/Texture2DAtlas.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector4 because it is already included!
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: PowerOfTwoTextureAtlas
  class PowerOfTwoTextureAtlas;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::PowerOfTwoTextureAtlas);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::PowerOfTwoTextureAtlas*, "UnityEngine.Rendering", "PowerOfTwoTextureAtlas");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.PowerOfTwoTextureAtlas
  // [TokenAttribute] Offset: FFFFFFFF
  class PowerOfTwoTextureAtlas : public ::UnityEngine::Rendering::Texture2DAtlas {
    public:
    // Nested type: ::UnityEngine::Rendering::PowerOfTwoTextureAtlas::BlitType
    struct BlitType;
    public:
    // private readonly System.Int32 m_MipPadding
    // Size: 0x4
    // Offset: 0x48
    int m_MipPadding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_MipPadding and: m_RequestedTextures
    char __padding0[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.Vector2Int> m_RequestedTextures
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Vector2Int>* m_RequestedTextures;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Vector2Int>*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Int32 m_MipPadding
    [[deprecated("Use field access instead!")]] int& dyn_m_MipPadding();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.Vector2Int> m_RequestedTextures
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Vector2Int>*& dyn_m_RequestedTextures();
    // public System.Void .ctor(System.Int32 size, System.Int32 mipPadding, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.FilterMode filterMode, System.String name, System.Boolean useMipMap)
    // Offset: 0x525231C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PowerOfTwoTextureAtlas* New_ctor(int size, int mipPadding, ::UnityEngine::Experimental::Rendering::GraphicsFormat format, ::UnityEngine::FilterMode filterMode, ::StringW name, bool useMipMap) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::PowerOfTwoTextureAtlas::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PowerOfTwoTextureAtlas*, creationType>(size, mipPadding, format, filterMode, name, useMipMap)));
    }
    // public System.Int32 get_mipPadding()
    // Offset: 0x52526D4
    int get_mipPadding();
    // private System.Int32 GetTexturePadding()
    // Offset: 0x52526DC
    int GetTexturePadding();
    // static public UnityEngine.Vector4 GetPayloadScaleOffset(in UnityEngine.Vector2 textureSize, in UnityEngine.Vector2 paddingSize, in UnityEngine.Vector4 scaleOffset)
    // Offset: 0x525270C
    static ::UnityEngine::Vector4 GetPayloadScaleOffset(ByRef<::UnityEngine::Vector2> textureSize, ByRef<::UnityEngine::Vector2> paddingSize, ByRef<::UnityEngine::Vector4> scaleOffset);
    // private System.Void Blit2DTexture(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Vector4 scaleOffset, UnityEngine.Texture texture, UnityEngine.Vector4 sourceScaleOffset, System.Boolean blitMips, UnityEngine.Rendering.PowerOfTwoTextureAtlas/BlitType blitType)
    // Offset: 0x5252744
    void Blit2DTexture(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Vector4 scaleOffset, ::UnityEngine::Texture* texture, ::UnityEngine::Vector4 sourceScaleOffset, bool blitMips, ::UnityEngine::Rendering::PowerOfTwoTextureAtlas::BlitType blitType);
    // private System.Void TextureSizeToPowerOfTwo(UnityEngine.Texture texture, ref System.Int32 width, ref System.Int32 height)
    // Offset: 0x5252E54
    void TextureSizeToPowerOfTwo(::UnityEngine::Texture* texture, ByRef<int> width, ByRef<int> height);
    // private UnityEngine.Vector2 GetPowerOfTwoTextureSize(UnityEngine.Texture texture)
    // Offset: 0x5252BA8
    ::UnityEngine::Vector2 GetPowerOfTwoTextureSize(::UnityEngine::Texture* texture);
    // public override System.Void BlitTexture(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Vector4 scaleOffset, UnityEngine.Texture texture, UnityEngine.Vector4 sourceScaleOffset, System.Boolean blitMips, System.Int32 overrideInstanceID)
    // Offset: 0x5252C14
    // Implemented from: UnityEngine.Rendering.Texture2DAtlas
    // Base method: System.Void Texture2DAtlas::BlitTexture(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Vector4 scaleOffset, UnityEngine.Texture texture, UnityEngine.Vector4 sourceScaleOffset, System.Boolean blitMips, System.Int32 overrideInstanceID)
    void BlitTexture(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Vector4 scaleOffset, ::UnityEngine::Texture* texture, ::UnityEngine::Vector4 sourceScaleOffset, bool blitMips, int overrideInstanceID);
    // public override System.Boolean AllocateTexture(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Vector4 scaleOffset, UnityEngine.Texture texture, System.Int32 width, System.Int32 height, System.Int32 overrideInstanceID)
    // Offset: 0x5252E90
    // Implemented from: UnityEngine.Rendering.Texture2DAtlas
    // Base method: System.Boolean Texture2DAtlas::AllocateTexture(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Vector4 scaleOffset, UnityEngine.Texture texture, System.Int32 width, System.Int32 height, System.Int32 overrideInstanceID)
    bool AllocateTexture(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Vector4> scaleOffset, ::UnityEngine::Texture* texture, int width, int height, int overrideInstanceID);
  }; // UnityEngine.Rendering.PowerOfTwoTextureAtlas
  #pragma pack(pop)
  static check_size<sizeof(PowerOfTwoTextureAtlas), 80 + sizeof(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Vector2Int>*)> __UnityEngine_Rendering_PowerOfTwoTextureAtlasSizeCheck;
  static_assert(sizeof(PowerOfTwoTextureAtlas) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::PowerOfTwoTextureAtlas::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::PowerOfTwoTextureAtlas::get_mipPadding
// Il2CppName: get_mipPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::PowerOfTwoTextureAtlas::*)()>(&UnityEngine::Rendering::PowerOfTwoTextureAtlas::get_mipPadding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::PowerOfTwoTextureAtlas*), "get_mipPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::PowerOfTwoTextureAtlas::GetTexturePadding
// Il2CppName: GetTexturePadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::PowerOfTwoTextureAtlas::*)()>(&UnityEngine::Rendering::PowerOfTwoTextureAtlas::GetTexturePadding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::PowerOfTwoTextureAtlas*), "GetTexturePadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::PowerOfTwoTextureAtlas::GetPayloadScaleOffset
// Il2CppName: GetPayloadScaleOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector4>)>(&UnityEngine::Rendering::PowerOfTwoTextureAtlas::GetPayloadScaleOffset)> {
  static const MethodInfo* get() {
    static auto* textureSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* paddingSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* scaleOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::PowerOfTwoTextureAtlas*), "GetPayloadScaleOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textureSize, paddingSize, scaleOffset});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::PowerOfTwoTextureAtlas::Blit2DTexture
// Il2CppName: Blit2DTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::PowerOfTwoTextureAtlas::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Vector4, ::UnityEngine::Texture*, ::UnityEngine::Vector4, bool, ::UnityEngine::Rendering::PowerOfTwoTextureAtlas::BlitType)>(&UnityEngine::Rendering::PowerOfTwoTextureAtlas::Blit2DTexture)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* scaleOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* sourceScaleOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* blitMips = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* blitType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "PowerOfTwoTextureAtlas/BlitType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::PowerOfTwoTextureAtlas*), "Blit2DTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, scaleOffset, texture, sourceScaleOffset, blitMips, blitType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::PowerOfTwoTextureAtlas::TextureSizeToPowerOfTwo
// Il2CppName: TextureSizeToPowerOfTwo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::PowerOfTwoTextureAtlas::*)(::UnityEngine::Texture*, ByRef<int>, ByRef<int>)>(&UnityEngine::Rendering::PowerOfTwoTextureAtlas::TextureSizeToPowerOfTwo)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::PowerOfTwoTextureAtlas*), "TextureSizeToPowerOfTwo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, width, height});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::PowerOfTwoTextureAtlas::GetPowerOfTwoTextureSize
// Il2CppName: GetPowerOfTwoTextureSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::Rendering::PowerOfTwoTextureAtlas::*)(::UnityEngine::Texture*)>(&UnityEngine::Rendering::PowerOfTwoTextureAtlas::GetPowerOfTwoTextureSize)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::PowerOfTwoTextureAtlas*), "GetPowerOfTwoTextureSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::PowerOfTwoTextureAtlas::BlitTexture
// Il2CppName: BlitTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::PowerOfTwoTextureAtlas::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Vector4, ::UnityEngine::Texture*, ::UnityEngine::Vector4, bool, int)>(&UnityEngine::Rendering::PowerOfTwoTextureAtlas::BlitTexture)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* scaleOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* sourceScaleOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* blitMips = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* overrideInstanceID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::PowerOfTwoTextureAtlas*), "BlitTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, scaleOffset, texture, sourceScaleOffset, blitMips, overrideInstanceID});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::PowerOfTwoTextureAtlas::AllocateTexture
// Il2CppName: AllocateTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::PowerOfTwoTextureAtlas::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Vector4>, ::UnityEngine::Texture*, int, int, int)>(&UnityEngine::Rendering::PowerOfTwoTextureAtlas::AllocateTexture)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* scaleOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* overrideInstanceID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::PowerOfTwoTextureAtlas*), "AllocateTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, scaleOffset, texture, width, height, overrideInstanceID});
  }
};
