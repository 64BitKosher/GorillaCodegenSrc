// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.DebugUI/Widget
#include "UnityEngine/Rendering/DebugUI_Widget.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::DebugUI::Widget::NameAndTooltip, "UnityEngine.Rendering", "DebugUI/Widget/NameAndTooltip");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.DebugUI/Widget/NameAndTooltip
  // [TokenAttribute] Offset: FFFFFFFF
  struct DebugUI::Widget::NameAndTooltip/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String tooltip
    // Size: 0x8
    // Offset: 0x8
    ::StringW tooltip;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: NameAndTooltip
    constexpr NameAndTooltip(::StringW name_ = {}, ::StringW tooltip_ = {}) noexcept : name{name_}, tooltip{tooltip_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.String tooltip
    [[deprecated("Use field access instead!")]] ::StringW& dyn_tooltip();
  }; // UnityEngine.Rendering.DebugUI/Widget/NameAndTooltip
  #pragma pack(pop)
  static check_size<sizeof(DebugUI::Widget::NameAndTooltip), 8 + sizeof(::StringW)> __UnityEngine_Rendering_DebugUI_Widget_NameAndTooltipSizeCheck;
  static_assert(sizeof(DebugUI::Widget::NameAndTooltip) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
