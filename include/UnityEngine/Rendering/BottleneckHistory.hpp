// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.PerformanceBottleneck
#include "UnityEngine/Rendering/PerformanceBottleneck.hpp"
// Including type: UnityEngine.Rendering.BottleneckHistogram
#include "UnityEngine/Rendering/BottleneckHistogram.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: FrameTimeSample
  struct FrameTimeSample;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: BottleneckHistory
  class BottleneckHistory;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::BottleneckHistory);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::BottleneckHistory*, "UnityEngine.Rendering", "BottleneckHistory");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.BottleneckHistory
  // [TokenAttribute] Offset: FFFFFFFF
  class BottleneckHistory : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.PerformanceBottleneck> m_Bottlenecks
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::PerformanceBottleneck>* m_Bottlenecks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::PerformanceBottleneck>*) == 0x8);
    // UnityEngine.Rendering.BottleneckHistogram Histogram
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Rendering::BottleneckHistogram Histogram;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::BottleneckHistogram) == 0x10);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.PerformanceBottleneck> m_Bottlenecks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::PerformanceBottleneck>*& dyn_m_Bottlenecks();
    // Get instance field reference: UnityEngine.Rendering.BottleneckHistogram Histogram
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::BottleneckHistogram& dyn_Histogram();
    // public System.Void .ctor(System.Int32 initialCapacity)
    // Offset: 0x5243EA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BottleneckHistory* New_ctor(int initialCapacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::BottleneckHistory::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BottleneckHistory*, creationType>(initialCapacity)));
    }
    // System.Void DiscardOldSamples(System.Int32 historySize)
    // Offset: 0x5244548
    void DiscardOldSamples(int historySize);
    // System.Void AddBottleneckFromAveragedSample(UnityEngine.Rendering.FrameTimeSample frameHistorySampleAverage)
    // Offset: 0x52445E8
    void AddBottleneckFromAveragedSample(::UnityEngine::Rendering::FrameTimeSample frameHistorySampleAverage);
    // System.Void ComputeHistogram()
    // Offset: 0x52446B4
    void ComputeHistogram();
    // static private UnityEngine.Rendering.PerformanceBottleneck DetermineBottleneck(UnityEngine.Rendering.FrameTimeSample s)
    // Offset: 0x524BD1C
    static ::UnityEngine::Rendering::PerformanceBottleneck DetermineBottleneck(::UnityEngine::Rendering::FrameTimeSample s);
  }; // UnityEngine.Rendering.BottleneckHistory
  #pragma pack(pop)
  static check_size<sizeof(BottleneckHistory), 24 + sizeof(::UnityEngine::Rendering::BottleneckHistogram)> __UnityEngine_Rendering_BottleneckHistorySizeCheck;
  static_assert(sizeof(BottleneckHistory) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::BottleneckHistory::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::BottleneckHistory::DiscardOldSamples
// Il2CppName: DiscardOldSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::BottleneckHistory::*)(int)>(&UnityEngine::Rendering::BottleneckHistory::DiscardOldSamples)> {
  static const MethodInfo* get() {
    static auto* historySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::BottleneckHistory*), "DiscardOldSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{historySize});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::BottleneckHistory::AddBottleneckFromAveragedSample
// Il2CppName: AddBottleneckFromAveragedSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::BottleneckHistory::*)(::UnityEngine::Rendering::FrameTimeSample)>(&UnityEngine::Rendering::BottleneckHistory::AddBottleneckFromAveragedSample)> {
  static const MethodInfo* get() {
    static auto* frameHistorySampleAverage = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "FrameTimeSample")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::BottleneckHistory*), "AddBottleneckFromAveragedSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frameHistorySampleAverage});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::BottleneckHistory::ComputeHistogram
// Il2CppName: ComputeHistogram
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::BottleneckHistory::*)()>(&UnityEngine::Rendering::BottleneckHistory::ComputeHistogram)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::BottleneckHistory*), "ComputeHistogram", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::BottleneckHistory::DetermineBottleneck
// Il2CppName: DetermineBottleneck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::PerformanceBottleneck (*)(::UnityEngine::Rendering::FrameTimeSample)>(&UnityEngine::Rendering::BottleneckHistory::DetermineBottleneck)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "FrameTimeSample")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::BottleneckHistory*), "DetermineBottleneck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
