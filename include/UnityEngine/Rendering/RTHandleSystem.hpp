// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.Rendering.RTHandleProperties
#include "UnityEngine/Rendering/RTHandleProperties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: DepthBits
  struct DepthBits;
  // Forward declaring type: TextureDimension
  struct TextureDimension;
  // Forward declaring type: MSAASamples
  struct MSAASamples;
  // Forward declaring type: ScaleFunc
  class ScaleFunc;
  // Forward declaring type: RenderTargetIdentifier
  struct RenderTargetIdentifier;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
  // Skipping declaration: Vector2Int because it is already included!
  // Forward declaring type: FilterMode
  struct FilterMode;
  // Forward declaring type: TextureWrapMode
  struct TextureWrapMode;
  // Forward declaring type: RenderTextureMemoryless
  struct RenderTextureMemoryless;
  // Forward declaring type: VRTextureUsage
  struct VRTextureUsage;
  // Forward declaring type: Texture
  class Texture;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: GraphicsFormat
  struct GraphicsFormat;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandleSystem
  class RTHandleSystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::RTHandleSystem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::RTHandleSystem*, "UnityEngine.Rendering", "RTHandleSystem");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.RTHandleSystem
  // [TokenAttribute] Offset: FFFFFFFF
  class RTHandleSystem : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Boolean m_HardwareDynamicResRequested
    // Size: 0x1
    // Offset: 0x10
    bool m_HardwareDynamicResRequested;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_HardwareDynamicResRequested and: m_AutoSizedRTs
    char __padding0[0x7] = {};
    // private System.Collections.Generic.HashSet`1<UnityEngine.Rendering.RTHandle> m_AutoSizedRTs
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::HashSet_1<::UnityEngine::Rendering::RTHandle*>* m_AutoSizedRTs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::Rendering::RTHandle*>*) == 0x8);
    // private UnityEngine.Rendering.RTHandle[] m_AutoSizedRTsArray
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Rendering::RTHandle*> m_AutoSizedRTsArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::RTHandle*>) == 0x8);
    // private System.Collections.Generic.HashSet`1<UnityEngine.Rendering.RTHandle> m_ResizeOnDemandRTs
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::HashSet_1<::UnityEngine::Rendering::RTHandle*>* m_ResizeOnDemandRTs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::Rendering::RTHandle*>*) == 0x8);
    // private UnityEngine.Rendering.RTHandleProperties m_RTHandleProperties
    // Size: 0x30
    // Offset: 0x30
    ::UnityEngine::Rendering::RTHandleProperties m_RTHandleProperties;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandleProperties) == 0x30);
    // private System.Int32 m_MaxWidths
    // Size: 0x4
    // Offset: 0x60
    int m_MaxWidths;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_MaxHeights
    // Size: 0x4
    // Offset: 0x64
    int m_MaxHeights;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Boolean m_HardwareDynamicResRequested
    [[deprecated("Use field access instead!")]] bool& dyn_m_HardwareDynamicResRequested();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<UnityEngine.Rendering.RTHandle> m_AutoSizedRTs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::Rendering::RTHandle*>*& dyn_m_AutoSizedRTs();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle[] m_AutoSizedRTsArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::RTHandle*>& dyn_m_AutoSizedRTsArray();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<UnityEngine.Rendering.RTHandle> m_ResizeOnDemandRTs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::Rendering::RTHandle*>*& dyn_m_ResizeOnDemandRTs();
    // Get instance field reference: private UnityEngine.Rendering.RTHandleProperties m_RTHandleProperties
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandleProperties& dyn_m_RTHandleProperties();
    // Get instance field reference: private System.Int32 m_MaxWidths
    [[deprecated("Use field access instead!")]] int& dyn_m_MaxWidths();
    // Get instance field reference: private System.Int32 m_MaxHeights
    [[deprecated("Use field access instead!")]] int& dyn_m_MaxHeights();
    // public UnityEngine.Rendering.RTHandleProperties get_rtHandleProperties()
    // Offset: 0x52551DC
    ::UnityEngine::Rendering::RTHandleProperties get_rtHandleProperties();
    // public System.Void .ctor()
    // Offset: 0x5255070
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RTHandleSystem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::RTHandleSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RTHandleSystem*, creationType>()));
    }
    // public System.Void Dispose()
    // Offset: 0x52551F0
    void Dispose();
    // public System.Void Initialize(System.Int32 width, System.Int32 height)
    // Offset: 0x5254CB8
    void Initialize(int width, int height);
    // public System.Void Release(UnityEngine.Rendering.RTHandle rth)
    // Offset: 0x5254F64
    void Release(::UnityEngine::Rendering::RTHandle* rth);
    // System.Void Remove(UnityEngine.Rendering.RTHandle rth)
    // Offset: 0x5253684
    void Remove(::UnityEngine::Rendering::RTHandle* rth);
    // public System.Void SetReferenceSize(System.Int32 width, System.Int32 height)
    // Offset: 0x5254FF0
    void SetReferenceSize(int width, int height);
    // public System.Void SetReferenceSize(System.Int32 width, System.Int32 height, System.Boolean reset)
    // Offset: 0x52553C8
    void SetReferenceSize(int width, int height, bool reset);
    // UnityEngine.Vector2 CalculateRatioAgainstMaxSize(in UnityEngine.Vector2Int viewportSize)
    // Offset: 0x525583C
    ::UnityEngine::Vector2 CalculateRatioAgainstMaxSize(ByRef<::UnityEngine::Vector2Int> viewportSize);
    // public System.Int32 GetMaxWidth()
    // Offset: 0x5255A48
    int GetMaxWidth();
    // public System.Int32 GetMaxHeight()
    // Offset: 0x5255A50
    int GetMaxHeight();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x52551F8
    void Dispose(bool disposing);
    // private System.Void Resize(System.Int32 width, System.Int32 height, System.Boolean sizeChanged)
    // Offset: 0x5255554
    void Resize(int width, int height, bool sizeChanged);
    // public UnityEngine.Rendering.RTHandle Alloc(System.Int32 width, System.Int32 height, System.Int32 slices, UnityEngine.Rendering.DepthBits depthBufferBits, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat, UnityEngine.FilterMode filterMode, UnityEngine.TextureWrapMode wrapMode, UnityEngine.Rendering.TextureDimension dimension, System.Boolean enableRandomWrite, System.Boolean useMipMap, System.Boolean autoGenerateMips, System.Boolean isShadowMap, System.Int32 anisoLevel, System.Single mipMapBias, UnityEngine.Rendering.MSAASamples msaaSamples, System.Boolean bindTextureMS, System.Boolean useDynamicScale, UnityEngine.RenderTextureMemoryless memoryless, UnityEngine.VRTextureUsage vrUsage, System.String name)
    // Offset: 0x52539C8
    ::UnityEngine::Rendering::RTHandle* Alloc(int width, int height, int slices, ::UnityEngine::Rendering::DepthBits depthBufferBits, ::UnityEngine::Experimental::Rendering::GraphicsFormat colorFormat, ::UnityEngine::FilterMode filterMode, ::UnityEngine::TextureWrapMode wrapMode, ::UnityEngine::Rendering::TextureDimension dimension, bool enableRandomWrite, bool useMipMap, bool autoGenerateMips, bool isShadowMap, int anisoLevel, float mipMapBias, ::UnityEngine::Rendering::MSAASamples msaaSamples, bool bindTextureMS, bool useDynamicScale, ::UnityEngine::RenderTextureMemoryless memoryless, ::UnityEngine::VRTextureUsage vrUsage, ::StringW name);
    // public UnityEngine.Rendering.RTHandle Alloc(System.Int32 width, System.Int32 height, UnityEngine.TextureWrapMode wrapModeU, UnityEngine.TextureWrapMode wrapModeV, UnityEngine.TextureWrapMode wrapModeW, System.Int32 slices, UnityEngine.Rendering.DepthBits depthBufferBits, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat, UnityEngine.FilterMode filterMode, UnityEngine.Rendering.TextureDimension dimension, System.Boolean enableRandomWrite, System.Boolean useMipMap, System.Boolean autoGenerateMips, System.Boolean isShadowMap, System.Int32 anisoLevel, System.Single mipMapBias, UnityEngine.Rendering.MSAASamples msaaSamples, System.Boolean bindTextureMS, System.Boolean useDynamicScale, UnityEngine.RenderTextureMemoryless memoryless, UnityEngine.VRTextureUsage vrUsage, System.String name)
    // Offset: 0x5255A58
    ::UnityEngine::Rendering::RTHandle* Alloc(int width, int height, ::UnityEngine::TextureWrapMode wrapModeU, ::UnityEngine::TextureWrapMode wrapModeV, ::UnityEngine::TextureWrapMode wrapModeW, int slices, ::UnityEngine::Rendering::DepthBits depthBufferBits, ::UnityEngine::Experimental::Rendering::GraphicsFormat colorFormat, ::UnityEngine::FilterMode filterMode, ::UnityEngine::Rendering::TextureDimension dimension, bool enableRandomWrite, bool useMipMap, bool autoGenerateMips, bool isShadowMap, int anisoLevel, float mipMapBias, ::UnityEngine::Rendering::MSAASamples msaaSamples, bool bindTextureMS, bool useDynamicScale, ::UnityEngine::RenderTextureMemoryless memoryless, ::UnityEngine::VRTextureUsage vrUsage, ::StringW name);
    // public UnityEngine.Rendering.RTHandle Alloc(UnityEngine.Vector2 scaleFactor, System.Int32 slices, UnityEngine.Rendering.DepthBits depthBufferBits, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat, UnityEngine.FilterMode filterMode, UnityEngine.TextureWrapMode wrapMode, UnityEngine.Rendering.TextureDimension dimension, System.Boolean enableRandomWrite, System.Boolean useMipMap, System.Boolean autoGenerateMips, System.Boolean isShadowMap, System.Int32 anisoLevel, System.Single mipMapBias, UnityEngine.Rendering.MSAASamples msaaSamples, System.Boolean bindTextureMS, System.Boolean useDynamicScale, UnityEngine.RenderTextureMemoryless memoryless, UnityEngine.VRTextureUsage vrUsage, System.String name)
    // Offset: 0x5253E54
    ::UnityEngine::Rendering::RTHandle* Alloc(::UnityEngine::Vector2 scaleFactor, int slices, ::UnityEngine::Rendering::DepthBits depthBufferBits, ::UnityEngine::Experimental::Rendering::GraphicsFormat colorFormat, ::UnityEngine::FilterMode filterMode, ::UnityEngine::TextureWrapMode wrapMode, ::UnityEngine::Rendering::TextureDimension dimension, bool enableRandomWrite, bool useMipMap, bool autoGenerateMips, bool isShadowMap, int anisoLevel, float mipMapBias, ::UnityEngine::Rendering::MSAASamples msaaSamples, bool bindTextureMS, bool useDynamicScale, ::UnityEngine::RenderTextureMemoryless memoryless, ::UnityEngine::VRTextureUsage vrUsage, ::StringW name);
    // public UnityEngine.Rendering.RTHandle Alloc(UnityEngine.Rendering.ScaleFunc scaleFunc, System.Int32 slices, UnityEngine.Rendering.DepthBits depthBufferBits, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat, UnityEngine.FilterMode filterMode, UnityEngine.TextureWrapMode wrapMode, UnityEngine.Rendering.TextureDimension dimension, System.Boolean enableRandomWrite, System.Boolean useMipMap, System.Boolean autoGenerateMips, System.Boolean isShadowMap, System.Int32 anisoLevel, System.Single mipMapBias, UnityEngine.Rendering.MSAASamples msaaSamples, System.Boolean bindTextureMS, System.Boolean useDynamicScale, UnityEngine.RenderTextureMemoryless memoryless, UnityEngine.VRTextureUsage vrUsage, System.String name)
    // Offset: 0x52544DC
    ::UnityEngine::Rendering::RTHandle* Alloc(::UnityEngine::Rendering::ScaleFunc* scaleFunc, int slices, ::UnityEngine::Rendering::DepthBits depthBufferBits, ::UnityEngine::Experimental::Rendering::GraphicsFormat colorFormat, ::UnityEngine::FilterMode filterMode, ::UnityEngine::TextureWrapMode wrapMode, ::UnityEngine::Rendering::TextureDimension dimension, bool enableRandomWrite, bool useMipMap, bool autoGenerateMips, bool isShadowMap, int anisoLevel, float mipMapBias, ::UnityEngine::Rendering::MSAASamples msaaSamples, bool bindTextureMS, bool useDynamicScale, ::UnityEngine::RenderTextureMemoryless memoryless, ::UnityEngine::VRTextureUsage vrUsage, ::StringW name);
    // private UnityEngine.Rendering.RTHandle AllocAutoSizedRenderTexture(System.Int32 width, System.Int32 height, System.Int32 slices, UnityEngine.Rendering.DepthBits depthBufferBits, UnityEngine.Experimental.Rendering.GraphicsFormat colorFormat, UnityEngine.FilterMode filterMode, UnityEngine.TextureWrapMode wrapMode, UnityEngine.Rendering.TextureDimension dimension, System.Boolean enableRandomWrite, System.Boolean useMipMap, System.Boolean autoGenerateMips, System.Boolean isShadowMap, System.Int32 anisoLevel, System.Single mipMapBias, UnityEngine.Rendering.MSAASamples msaaSamples, System.Boolean bindTextureMS, System.Boolean useDynamicScale, UnityEngine.RenderTextureMemoryless memoryless, UnityEngine.VRTextureUsage vrUsage, System.String name)
    // Offset: 0x5255FA8
    ::UnityEngine::Rendering::RTHandle* AllocAutoSizedRenderTexture(int width, int height, int slices, ::UnityEngine::Rendering::DepthBits depthBufferBits, ::UnityEngine::Experimental::Rendering::GraphicsFormat colorFormat, ::UnityEngine::FilterMode filterMode, ::UnityEngine::TextureWrapMode wrapMode, ::UnityEngine::Rendering::TextureDimension dimension, bool enableRandomWrite, bool useMipMap, bool autoGenerateMips, bool isShadowMap, int anisoLevel, float mipMapBias, ::UnityEngine::Rendering::MSAASamples msaaSamples, bool bindTextureMS, bool useDynamicScale, ::UnityEngine::RenderTextureMemoryless memoryless, ::UnityEngine::VRTextureUsage vrUsage, ::StringW name);
    // public UnityEngine.Rendering.RTHandle Alloc(UnityEngine.Texture texture)
    // Offset: 0x5254904
    ::UnityEngine::Rendering::RTHandle* Alloc(::UnityEngine::Texture* texture);
    // public UnityEngine.Rendering.RTHandle Alloc(UnityEngine.Rendering.RenderTargetIdentifier texture)
    // Offset: 0x5254A48
    ::UnityEngine::Rendering::RTHandle* Alloc(::UnityEngine::Rendering::RenderTargetIdentifier texture);
    // public UnityEngine.Rendering.RTHandle Alloc(UnityEngine.Rendering.RenderTargetIdentifier texture, System.String name)
    // Offset: 0x5254B60
    ::UnityEngine::Rendering::RTHandle* Alloc(::UnityEngine::Rendering::RenderTargetIdentifier texture, ::StringW name);
  }; // UnityEngine.Rendering.RTHandleSystem
  #pragma pack(pop)
  static check_size<sizeof(RTHandleSystem), 100 + sizeof(int)> __UnityEngine_Rendering_RTHandleSystemSizeCheck;
  static_assert(sizeof(RTHandleSystem) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::get_rtHandleProperties
// Il2CppName: get_rtHandleProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandleProperties (UnityEngine::Rendering::RTHandleSystem::*)()>(&UnityEngine::Rendering::RTHandleSystem::get_rtHandleProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "get_rtHandleProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::RTHandleSystem::*)()>(&UnityEngine::Rendering::RTHandleSystem::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::RTHandleSystem::*)(int, int)>(&UnityEngine::Rendering::RTHandleSystem::Initialize)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::RTHandleSystem::*)(::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::RTHandleSystem::Release)> {
  static const MethodInfo* get() {
    static auto* rth = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rth});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::RTHandleSystem::*)(::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::RTHandleSystem::Remove)> {
  static const MethodInfo* get() {
    static auto* rth = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rth});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::SetReferenceSize
// Il2CppName: SetReferenceSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::RTHandleSystem::*)(int, int)>(&UnityEngine::Rendering::RTHandleSystem::SetReferenceSize)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "SetReferenceSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::SetReferenceSize
// Il2CppName: SetReferenceSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::RTHandleSystem::*)(int, int, bool)>(&UnityEngine::Rendering::RTHandleSystem::SetReferenceSize)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* reset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "SetReferenceSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, reset});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::CalculateRatioAgainstMaxSize
// Il2CppName: CalculateRatioAgainstMaxSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::Rendering::RTHandleSystem::*)(ByRef<::UnityEngine::Vector2Int>)>(&UnityEngine::Rendering::RTHandleSystem::CalculateRatioAgainstMaxSize)> {
  static const MethodInfo* get() {
    static auto* viewportSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2Int")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "CalculateRatioAgainstMaxSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewportSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::GetMaxWidth
// Il2CppName: GetMaxWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::RTHandleSystem::*)()>(&UnityEngine::Rendering::RTHandleSystem::GetMaxWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "GetMaxWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::GetMaxHeight
// Il2CppName: GetMaxHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::RTHandleSystem::*)()>(&UnityEngine::Rendering::RTHandleSystem::GetMaxHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "GetMaxHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::RTHandleSystem::*)(bool)>(&UnityEngine::Rendering::RTHandleSystem::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::RTHandleSystem::*)(int, int, bool)>(&UnityEngine::Rendering::RTHandleSystem::Resize)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sizeChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, sizeChanged});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::Alloc
// Il2CppName: Alloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::RTHandleSystem::*)(int, int, int, ::UnityEngine::Rendering::DepthBits, ::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::FilterMode, ::UnityEngine::TextureWrapMode, ::UnityEngine::Rendering::TextureDimension, bool, bool, bool, bool, int, float, ::UnityEngine::Rendering::MSAASamples, bool, bool, ::UnityEngine::RenderTextureMemoryless, ::UnityEngine::VRTextureUsage, ::StringW)>(&UnityEngine::Rendering::RTHandleSystem::Alloc)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* slices = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depthBufferBits = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DepthBits")->byval_arg;
    static auto* colorFormat = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* filterMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    static auto* wrapMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    static auto* dimension = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "TextureDimension")->byval_arg;
    static auto* enableRandomWrite = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useMipMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* autoGenerateMips = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isShadowMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* anisoLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mipMapBias = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* msaaSamples = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MSAASamples")->byval_arg;
    static auto* bindTextureMS = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useDynamicScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* memoryless = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureMemoryless")->byval_arg;
    static auto* vrUsage = &::il2cpp_utils::GetClassFromName("UnityEngine", "VRTextureUsage")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "Alloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, slices, depthBufferBits, colorFormat, filterMode, wrapMode, dimension, enableRandomWrite, useMipMap, autoGenerateMips, isShadowMap, anisoLevel, mipMapBias, msaaSamples, bindTextureMS, useDynamicScale, memoryless, vrUsage, name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::Alloc
// Il2CppName: Alloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::RTHandleSystem::*)(int, int, ::UnityEngine::TextureWrapMode, ::UnityEngine::TextureWrapMode, ::UnityEngine::TextureWrapMode, int, ::UnityEngine::Rendering::DepthBits, ::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::FilterMode, ::UnityEngine::Rendering::TextureDimension, bool, bool, bool, bool, int, float, ::UnityEngine::Rendering::MSAASamples, bool, bool, ::UnityEngine::RenderTextureMemoryless, ::UnityEngine::VRTextureUsage, ::StringW)>(&UnityEngine::Rendering::RTHandleSystem::Alloc)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wrapModeU = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    static auto* wrapModeV = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    static auto* wrapModeW = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    static auto* slices = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depthBufferBits = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DepthBits")->byval_arg;
    static auto* colorFormat = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* filterMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    static auto* dimension = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "TextureDimension")->byval_arg;
    static auto* enableRandomWrite = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useMipMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* autoGenerateMips = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isShadowMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* anisoLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mipMapBias = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* msaaSamples = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MSAASamples")->byval_arg;
    static auto* bindTextureMS = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useDynamicScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* memoryless = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureMemoryless")->byval_arg;
    static auto* vrUsage = &::il2cpp_utils::GetClassFromName("UnityEngine", "VRTextureUsage")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "Alloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, wrapModeU, wrapModeV, wrapModeW, slices, depthBufferBits, colorFormat, filterMode, dimension, enableRandomWrite, useMipMap, autoGenerateMips, isShadowMap, anisoLevel, mipMapBias, msaaSamples, bindTextureMS, useDynamicScale, memoryless, vrUsage, name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::Alloc
// Il2CppName: Alloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::RTHandleSystem::*)(::UnityEngine::Vector2, int, ::UnityEngine::Rendering::DepthBits, ::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::FilterMode, ::UnityEngine::TextureWrapMode, ::UnityEngine::Rendering::TextureDimension, bool, bool, bool, bool, int, float, ::UnityEngine::Rendering::MSAASamples, bool, bool, ::UnityEngine::RenderTextureMemoryless, ::UnityEngine::VRTextureUsage, ::StringW)>(&UnityEngine::Rendering::RTHandleSystem::Alloc)> {
  static const MethodInfo* get() {
    static auto* scaleFactor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* slices = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depthBufferBits = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DepthBits")->byval_arg;
    static auto* colorFormat = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* filterMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    static auto* wrapMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    static auto* dimension = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "TextureDimension")->byval_arg;
    static auto* enableRandomWrite = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useMipMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* autoGenerateMips = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isShadowMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* anisoLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mipMapBias = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* msaaSamples = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MSAASamples")->byval_arg;
    static auto* bindTextureMS = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useDynamicScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* memoryless = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureMemoryless")->byval_arg;
    static auto* vrUsage = &::il2cpp_utils::GetClassFromName("UnityEngine", "VRTextureUsage")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "Alloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scaleFactor, slices, depthBufferBits, colorFormat, filterMode, wrapMode, dimension, enableRandomWrite, useMipMap, autoGenerateMips, isShadowMap, anisoLevel, mipMapBias, msaaSamples, bindTextureMS, useDynamicScale, memoryless, vrUsage, name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::Alloc
// Il2CppName: Alloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::RTHandleSystem::*)(::UnityEngine::Rendering::ScaleFunc*, int, ::UnityEngine::Rendering::DepthBits, ::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::FilterMode, ::UnityEngine::TextureWrapMode, ::UnityEngine::Rendering::TextureDimension, bool, bool, bool, bool, int, float, ::UnityEngine::Rendering::MSAASamples, bool, bool, ::UnityEngine::RenderTextureMemoryless, ::UnityEngine::VRTextureUsage, ::StringW)>(&UnityEngine::Rendering::RTHandleSystem::Alloc)> {
  static const MethodInfo* get() {
    static auto* scaleFunc = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScaleFunc")->byval_arg;
    static auto* slices = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depthBufferBits = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DepthBits")->byval_arg;
    static auto* colorFormat = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* filterMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    static auto* wrapMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    static auto* dimension = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "TextureDimension")->byval_arg;
    static auto* enableRandomWrite = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useMipMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* autoGenerateMips = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isShadowMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* anisoLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mipMapBias = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* msaaSamples = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MSAASamples")->byval_arg;
    static auto* bindTextureMS = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useDynamicScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* memoryless = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureMemoryless")->byval_arg;
    static auto* vrUsage = &::il2cpp_utils::GetClassFromName("UnityEngine", "VRTextureUsage")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "Alloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scaleFunc, slices, depthBufferBits, colorFormat, filterMode, wrapMode, dimension, enableRandomWrite, useMipMap, autoGenerateMips, isShadowMap, anisoLevel, mipMapBias, msaaSamples, bindTextureMS, useDynamicScale, memoryless, vrUsage, name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::AllocAutoSizedRenderTexture
// Il2CppName: AllocAutoSizedRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::RTHandleSystem::*)(int, int, int, ::UnityEngine::Rendering::DepthBits, ::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::FilterMode, ::UnityEngine::TextureWrapMode, ::UnityEngine::Rendering::TextureDimension, bool, bool, bool, bool, int, float, ::UnityEngine::Rendering::MSAASamples, bool, bool, ::UnityEngine::RenderTextureMemoryless, ::UnityEngine::VRTextureUsage, ::StringW)>(&UnityEngine::Rendering::RTHandleSystem::AllocAutoSizedRenderTexture)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* slices = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depthBufferBits = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DepthBits")->byval_arg;
    static auto* colorFormat = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* filterMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    static auto* wrapMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    static auto* dimension = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "TextureDimension")->byval_arg;
    static auto* enableRandomWrite = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useMipMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* autoGenerateMips = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isShadowMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* anisoLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mipMapBias = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* msaaSamples = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MSAASamples")->byval_arg;
    static auto* bindTextureMS = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useDynamicScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* memoryless = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureMemoryless")->byval_arg;
    static auto* vrUsage = &::il2cpp_utils::GetClassFromName("UnityEngine", "VRTextureUsage")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "AllocAutoSizedRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, slices, depthBufferBits, colorFormat, filterMode, wrapMode, dimension, enableRandomWrite, useMipMap, autoGenerateMips, isShadowMap, anisoLevel, mipMapBias, msaaSamples, bindTextureMS, useDynamicScale, memoryless, vrUsage, name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::Alloc
// Il2CppName: Alloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::RTHandleSystem::*)(::UnityEngine::Texture*)>(&UnityEngine::Rendering::RTHandleSystem::Alloc)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "Alloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::Alloc
// Il2CppName: Alloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::RTHandleSystem::*)(::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Rendering::RTHandleSystem::Alloc)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "Alloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RTHandleSystem::Alloc
// Il2CppName: Alloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::RTHandleSystem::*)(::UnityEngine::Rendering::RenderTargetIdentifier, ::StringW)>(&UnityEngine::Rendering::RTHandleSystem::Alloc)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RTHandleSystem*), "Alloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, name});
  }
};
