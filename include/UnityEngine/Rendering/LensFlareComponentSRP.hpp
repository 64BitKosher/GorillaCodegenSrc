// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: LensFlareDataSRP
  class LensFlareDataSRP;
  // Forward declaring type: TextureCurve
  class TextureCurve;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Camera
  class Camera;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: LensFlareComponentSRP
  class LensFlareComponentSRP;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::LensFlareComponentSRP);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::LensFlareComponentSRP*, "UnityEngine.Rendering", "LensFlareComponentSRP");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.LensFlareComponentSRP
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class LensFlareComponentSRP : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Rendering.LensFlareDataSRP m_LensFlareData
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rendering::LensFlareDataSRP* m_LensFlareData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::LensFlareDataSRP*) == 0x8);
    // public System.Single intensity
    // Size: 0x4
    // Offset: 0x28
    float intensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxAttenuationDistance
    // Size: 0x4
    // Offset: 0x2C
    float maxAttenuationDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxAttenuationScale
    // Size: 0x4
    // Offset: 0x30
    float maxAttenuationScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: maxAttenuationScale and: distanceAttenuationCurve
    char __padding3[0x4] = {};
    // public UnityEngine.AnimationCurve distanceAttenuationCurve
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AnimationCurve* distanceAttenuationCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve scaleByDistanceCurve
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AnimationCurve* scaleByDistanceCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public System.Boolean attenuationByLightShape
    // Size: 0x1
    // Offset: 0x48
    bool attenuationByLightShape;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: attenuationByLightShape and: radialScreenAttenuationCurve
    char __padding6[0x7] = {};
    // public UnityEngine.AnimationCurve radialScreenAttenuationCurve
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AnimationCurve* radialScreenAttenuationCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public System.Boolean useOcclusion
    // Size: 0x1
    // Offset: 0x58
    bool useOcclusion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useOcclusion and: occlusionRadius
    char __padding8[0x3] = {};
    // public System.Single occlusionRadius
    // Size: 0x4
    // Offset: 0x5C
    float occlusionRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean useBackgroundCloudOcclusion
    // Size: 0x1
    // Offset: 0x60
    bool useBackgroundCloudOcclusion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useBackgroundCloudOcclusion and: sampleCount
    char __padding10[0x3] = {};
    // public System.UInt32 sampleCount
    // Size: 0x4
    // Offset: 0x64
    uint sampleCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Single occlusionOffset
    // Size: 0x4
    // Offset: 0x68
    float occlusionOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single scale
    // Size: 0x4
    // Offset: 0x6C
    float scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean allowOffScreen
    // Size: 0x1
    // Offset: 0x70
    bool allowOffScreen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean volumetricCloudOcclusion
    // Size: 0x1
    // Offset: 0x71
    bool volumetricCloudOcclusion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: volumetricCloudOcclusion and: occlusionRemapCurve
    char __padding15[0x6] = {};
    // public UnityEngine.Rendering.TextureCurve occlusionRemapCurve
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Rendering::TextureCurve* occlusionRemapCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::TextureCurve*) == 0x8);
    public:
    // Get static field: static private System.Single sCelestialAngularRadius
    static float _get_sCelestialAngularRadius();
    // Set static field: static private System.Single sCelestialAngularRadius
    static void _set_sCelestialAngularRadius(float value);
    // Get instance field reference: private UnityEngine.Rendering.LensFlareDataSRP m_LensFlareData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::LensFlareDataSRP*& dyn_m_LensFlareData();
    // Get instance field reference: public System.Single intensity
    [[deprecated("Use field access instead!")]] float& dyn_intensity();
    // Get instance field reference: public System.Single maxAttenuationDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxAttenuationDistance();
    // Get instance field reference: public System.Single maxAttenuationScale
    [[deprecated("Use field access instead!")]] float& dyn_maxAttenuationScale();
    // Get instance field reference: public UnityEngine.AnimationCurve distanceAttenuationCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_distanceAttenuationCurve();
    // Get instance field reference: public UnityEngine.AnimationCurve scaleByDistanceCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_scaleByDistanceCurve();
    // Get instance field reference: public System.Boolean attenuationByLightShape
    [[deprecated("Use field access instead!")]] bool& dyn_attenuationByLightShape();
    // Get instance field reference: public UnityEngine.AnimationCurve radialScreenAttenuationCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_radialScreenAttenuationCurve();
    // Get instance field reference: public System.Boolean useOcclusion
    [[deprecated("Use field access instead!")]] bool& dyn_useOcclusion();
    // Get instance field reference: public System.Single occlusionRadius
    [[deprecated("Use field access instead!")]] float& dyn_occlusionRadius();
    // Get instance field reference: public System.Boolean useBackgroundCloudOcclusion
    [[deprecated("Use field access instead!")]] bool& dyn_useBackgroundCloudOcclusion();
    // Get instance field reference: public System.UInt32 sampleCount
    [[deprecated("Use field access instead!")]] uint& dyn_sampleCount();
    // Get instance field reference: public System.Single occlusionOffset
    [[deprecated("Use field access instead!")]] float& dyn_occlusionOffset();
    // Get instance field reference: public System.Single scale
    [[deprecated("Use field access instead!")]] float& dyn_scale();
    // Get instance field reference: public System.Boolean allowOffScreen
    [[deprecated("Use field access instead!")]] bool& dyn_allowOffScreen();
    // Get instance field reference: public System.Boolean volumetricCloudOcclusion
    [[deprecated("Use field access instead!")]] bool& dyn_volumetricCloudOcclusion();
    // Get instance field reference: public UnityEngine.Rendering.TextureCurve occlusionRemapCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::TextureCurve*& dyn_occlusionRemapCurve();
    // public UnityEngine.Rendering.LensFlareDataSRP get_lensFlareData()
    // Offset: 0x52514E0
    ::UnityEngine::Rendering::LensFlareDataSRP* get_lensFlareData();
    // public System.Void set_lensFlareData(UnityEngine.Rendering.LensFlareDataSRP value)
    // Offset: 0x52514E8
    void set_lensFlareData(::UnityEngine::Rendering::LensFlareDataSRP* value);
    // public System.Single celestialProjectedOcclusionRadius(UnityEngine.Camera mainCam)
    // Offset: 0x524EA70
    float celestialProjectedOcclusionRadius(::UnityEngine::Camera* mainCam);
    // private System.Void OnEnable()
    // Offset: 0x52515D8
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x5251684
    void OnDisable();
    // private System.Void OnValidate()
    // Offset: 0x5251504
    void OnValidate();
    // public System.Void .ctor()
    // Offset: 0x52516E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LensFlareComponentSRP* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::LensFlareComponentSRP::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LensFlareComponentSRP*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x5251A8C
    static void _cctor();
  }; // UnityEngine.Rendering.LensFlareComponentSRP
  #pragma pack(pop)
  static check_size<sizeof(LensFlareComponentSRP), 120 + sizeof(::UnityEngine::Rendering::TextureCurve*)> __UnityEngine_Rendering_LensFlareComponentSRPSizeCheck;
  static_assert(sizeof(LensFlareComponentSRP) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareComponentSRP::get_lensFlareData
// Il2CppName: get_lensFlareData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::LensFlareDataSRP* (UnityEngine::Rendering::LensFlareComponentSRP::*)()>(&UnityEngine::Rendering::LensFlareComponentSRP::get_lensFlareData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareComponentSRP*), "get_lensFlareData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareComponentSRP::set_lensFlareData
// Il2CppName: set_lensFlareData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::LensFlareComponentSRP::*)(::UnityEngine::Rendering::LensFlareDataSRP*)>(&UnityEngine::Rendering::LensFlareComponentSRP::set_lensFlareData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LensFlareDataSRP")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareComponentSRP*), "set_lensFlareData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareComponentSRP::celestialProjectedOcclusionRadius
// Il2CppName: celestialProjectedOcclusionRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::LensFlareComponentSRP::*)(::UnityEngine::Camera*)>(&UnityEngine::Rendering::LensFlareComponentSRP::celestialProjectedOcclusionRadius)> {
  static const MethodInfo* get() {
    static auto* mainCam = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareComponentSRP*), "celestialProjectedOcclusionRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mainCam});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareComponentSRP::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::LensFlareComponentSRP::*)()>(&UnityEngine::Rendering::LensFlareComponentSRP::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareComponentSRP*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareComponentSRP::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::LensFlareComponentSRP::*)()>(&UnityEngine::Rendering::LensFlareComponentSRP::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareComponentSRP*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareComponentSRP::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::LensFlareComponentSRP::*)()>(&UnityEngine::Rendering::LensFlareComponentSRP::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareComponentSRP*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareComponentSRP::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareComponentSRP::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::LensFlareComponentSRP::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareComponentSRP*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
