// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.IVolumeDebugSettings2
#include "UnityEngine/Rendering/IVolumeDebugSettings2.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Skipping declaration: <>c because it is already included!
  // Forward declaring type: IAdditionalData
  class IAdditionalData;
  // Forward declaring type: Volume
  class Volume;
  // Forward declaring type: VolumeParameter
  class VolumeParameter;
  // Forward declaring type: VolumeStack
  class VolumeStack;
  // Forward declaring type: VolumeComponent
  class VolumeComponent;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MonoBehaviour
  class MonoBehaviour;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: FieldInfo
  class FieldInfo;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VolumeDebugSettings`1<T>
  template<typename T>
  class VolumeDebugSettings_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::Rendering::VolumeDebugSettings_1, "UnityEngine.Rendering", "VolumeDebugSettings`1");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.VolumeDebugSettings`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class VolumeDebugSettings_1 : public ::Il2CppObject/*, public ::UnityEngine::Rendering::IVolumeDebugSettings2*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::VolumeDebugSettings_1::$$c<T>
    class $$c;
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.Rendering.VolumeDebugSettings`1/<>c
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = VolumeDebugSettings_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c";
      static constexpr bool IS_VALUE_TYPE = false;
      // Autogenerated static field getter
      // Get static field: static public readonly UnityEngine.Rendering.VolumeDebugSettings`1/<>c<T> <>9
      static typename ::UnityEngine::Rendering::VolumeDebugSettings_1<T>::$$c* _get_$$9() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::$$c::_get_$$9");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename ::UnityEngine::Rendering::VolumeDebugSettings_1<T>::$$c*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename VolumeDebugSettings_1<T>::$$c*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly UnityEngine.Rendering.VolumeDebugSettings`1/<>c<T> <>9
      static void _set_$$9(typename ::UnityEngine::Rendering::VolumeDebugSettings_1<T>::$$c* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::$$c::_set_$$9");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename VolumeDebugSettings_1<T>::$$c*>::get(), "<>9", value)));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Func`2<UnityEngine.Rendering.Volume,System.Boolean> <>9__35_0
      static ::System::Func_2<::UnityEngine::Rendering::Volume*, bool>* _get_$$9__35_0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::$$c::_get_$$9__35_0");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::UnityEngine::Rendering::Volume*, bool>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename VolumeDebugSettings_1<T>::$$c*>::get(), "<>9__35_0")));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Func`2<UnityEngine.Rendering.Volume,System.Boolean> <>9__35_0
      static void _set_$$9__35_0(::System::Func_2<::UnityEngine::Rendering::Volume*, bool>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::$$c::_set_$$9__35_0");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename VolumeDebugSettings_1<T>::$$c*>::get(), "<>9__35_0", value)));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Func`2<System.Reflection.FieldInfo,System.Boolean> <>9__37_0
      static ::System::Func_2<::System::Reflection::FieldInfo*, bool>* _get_$$9__37_0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::$$c::_get_$$9__37_0");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::System::Reflection::FieldInfo*, bool>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename VolumeDebugSettings_1<T>::$$c*>::get(), "<>9__37_0")));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Func`2<System.Reflection.FieldInfo,System.Boolean> <>9__37_0
      static void _set_$$9__37_0(::System::Func_2<::System::Reflection::FieldInfo*, bool>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::$$c::_set_$$9__37_0");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename VolumeDebugSettings_1<T>::$$c*>::get(), "<>9__37_0", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::$$c::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename VolumeDebugSettings_1<T>::$$c*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename VolumeDebugSettings_1<T>::$$c* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::$$c::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename VolumeDebugSettings_1<T>::$$c*, creationType>()));
      }
      // System.Boolean <GetVolumes>b__35_0(UnityEngine.Rendering.Volume v)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool $GetVolumes$b__35_0(::UnityEngine::Rendering::Volume* v) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::$$c::<GetVolumes>b__35_0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetVolumes>b__35_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, v);
      }
      // System.Boolean <GetStates>b__37_0(System.Reflection.FieldInfo t)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool $GetStates$b__37_0(::System::Reflection::FieldInfo* t) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::$$c::<GetStates>b__37_0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetStates>b__37_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t);
      }
    }; // UnityEngine.Rendering.VolumeDebugSettings`1/<>c
    // Could not write size check! Type: UnityEngine.Rendering.VolumeDebugSettings`1/<>c is generic, or has no fields that are valid for size checks!
    public:
    // private System.Int32 <selectedComponent>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int selectedComponent;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Camera m_SelectedCamera
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Camera* m_SelectedCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // protected System.Int32 m_SelectedCameraIndex
    // Size: 0x4
    // Offset: 0x0
    int m_SelectedCameraIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Camera[] m_CamerasArray
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<::UnityEngine::Camera*> m_CamerasArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Camera*>) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Camera> m_Cameras
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<::UnityEngine::Camera*>* m_Cameras;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Camera*>*) == 0x8);
    // private System.Single[] weights
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<float> weights;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private UnityEngine.Rendering.Volume[] volumes
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<::UnityEngine::Rendering::Volume*> volumes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::Volume*>) == 0x8);
    // private UnityEngine.Rendering.VolumeParameter[,] savedStates
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<::UnityEngine::Rendering::VolumeParameter*> savedStates;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::VolumeParameter*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::Rendering::IVolumeDebugSettings2
    operator ::UnityEngine::Rendering::IVolumeDebugSettings2() noexcept {
      return *reinterpret_cast<::UnityEngine::Rendering::IVolumeDebugSettings2*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private System.Collections.Generic.List`1<System.ValueTuple`2<System.String,System.Type>> s_ComponentPathAndType
    static ::System::Collections::Generic::List_1<::System::ValueTuple_2<::StringW, ::System::Type*>>* _get_s_ComponentPathAndType() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::_get_s_ComponentPathAndType");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::System::ValueTuple_2<::StringW, ::System::Type*>>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<VolumeDebugSettings_1<T>*>::get(), "s_ComponentPathAndType")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Collections.Generic.List`1<System.ValueTuple`2<System.String,System.Type>> s_ComponentPathAndType
    static void _set_s_ComponentPathAndType(::System::Collections::Generic::List_1<::System::ValueTuple_2<::StringW, ::System::Type*>>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::_set_s_ComponentPathAndType");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<VolumeDebugSettings_1<T>*>::get(), "s_ComponentPathAndType", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Collections.Generic.List`1<T> <additionalCameraDatas>k__BackingField
    static ::System::Collections::Generic::List_1<T>* _get_$additionalCameraDatas$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::_get_$additionalCameraDatas$k__BackingField");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<T>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<VolumeDebugSettings_1<T>*>::get(), "<additionalCameraDatas>k__BackingField")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Collections.Generic.List`1<T> <additionalCameraDatas>k__BackingField
    static void _set_$additionalCameraDatas$k__BackingField(::System::Collections::Generic::List_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::_set_$additionalCameraDatas$k__BackingField");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<VolumeDebugSettings_1<T>*>::get(), "<additionalCameraDatas>k__BackingField", value)));
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <selectedComponent>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$selectedComponent$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::dyn_$selectedComponent$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<selectedComponent>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Camera m_SelectedCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_m_SelectedCamera() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::dyn_m_SelectedCamera");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SelectedCamera"))->offset;
      return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Int32 m_SelectedCameraIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_SelectedCameraIndex() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::dyn_m_SelectedCameraIndex");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SelectedCameraIndex"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Camera[] m_CamerasArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Camera*>& dyn_m_CamerasArray() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::dyn_m_CamerasArray");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CamerasArray"))->offset;
      return *reinterpret_cast<::ArrayW<::UnityEngine::Camera*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.List`1<UnityEngine.Camera> m_Cameras
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Camera*>*& dyn_m_Cameras() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::dyn_m_Cameras");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Cameras"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Camera*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Single[] weights
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_weights() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::dyn_weights");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "weights"))->offset;
      return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Rendering.Volume[] volumes
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::Volume*>& dyn_volumes() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::dyn_volumes");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "volumes"))->offset;
      return *reinterpret_cast<::ArrayW<::UnityEngine::Rendering::Volume*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Rendering.VolumeParameter[,] savedStates
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::VolumeParameter*>& dyn_savedStates() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::dyn_savedStates");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "savedStates"))->offset;
      return *reinterpret_cast<::ArrayW<::UnityEngine::Rendering::VolumeParameter*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_selectedComponent()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_selectedComponent() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::get_selectedComponent");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeDebugSettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Void set_selectedComponent(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_selectedComponent(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::set_selectedComponent");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeDebugSettings_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public UnityEngine.Camera get_selectedCamera()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Camera* get_selectedCamera() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::get_selectedCamera");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeDebugSettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Camera*, false>(this, ___internal__method);
    }
    // public System.Void set_selectedCameraIndex(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_selectedCameraIndex(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::set_selectedCameraIndex");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeDebugSettings_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Collections.Generic.IEnumerable`1<UnityEngine.Camera> get_cameras()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<::UnityEngine::Camera*>* get_cameras() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::get_cameras");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeDebugSettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Camera*>*, false>(this, ___internal__method);
    }
    // public UnityEngine.Rendering.VolumeStack get_selectedCameraVolumeStack()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Rendering::VolumeStack* get_selectedCameraVolumeStack() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::get_selectedCameraVolumeStack");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeDebugSettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rendering::VolumeStack*, false>(this, ___internal__method);
    }
    // public UnityEngine.LayerMask get_selectedCameraLayerMask()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::LayerMask get_selectedCameraLayerMask() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::get_selectedCameraLayerMask");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeDebugSettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::LayerMask, false>(this, ___internal__method);
    }
    // public UnityEngine.Vector3 get_selectedCameraPosition()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector3 get_selectedCameraPosition() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::get_selectedCameraPosition");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeDebugSettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
    }
    // public System.Type get_selectedComponentType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Type* get_selectedComponentType() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::get_selectedComponentType");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeDebugSettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
    }
    // public System.Collections.Generic.List`1<System.ValueTuple`2<System.String,System.Type>> get_volumeComponentsPathAndType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::List_1<::System::ValueTuple_2<::StringW, ::System::Type*>>* get_volumeComponentsPathAndType() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::get_volumeComponentsPathAndType");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeDebugSettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::ValueTuple_2<::StringW, ::System::Type*>>*, false>(this, ___internal__method);
    }
    // public System.Type get_targetRenderPipeline()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Type* get_targetRenderPipeline() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::get_targetRenderPipeline");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeDebugSettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
    }
    // UnityEngine.Rendering.VolumeParameter GetParameter(UnityEngine.Rendering.VolumeComponent component, System.Reflection.FieldInfo field)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Rendering::VolumeParameter* GetParameter(::UnityEngine::Rendering::VolumeComponent* component, ::System::Reflection::FieldInfo* field) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::GetParameter");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParameter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(component), ::il2cpp_utils::ExtractType(field)})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rendering::VolumeParameter*, false>(this, ___internal__method, component, field);
    }
    // private System.Single ComputeWeight(UnityEngine.Rendering.Volume volume, UnityEngine.Vector3 triggerPos)
    // Offset: 0xFFFFFFFFFFFFFFFF
    float ComputeWeight(::UnityEngine::Rendering::Volume* volume, ::UnityEngine::Vector3 triggerPos) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::ComputeWeight");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(volume), ::il2cpp_utils::ExtractType(triggerPos)})));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, volume, triggerPos);
    }
    // public UnityEngine.Rendering.Volume[] GetVolumes()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<::UnityEngine::Rendering::Volume*> GetVolumes() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::GetVolumes");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeDebugSettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Rendering::Volume*>, false>(this, ___internal__method);
    }
    // private UnityEngine.Rendering.VolumeParameter[,] GetStates()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<::UnityEngine::Rendering::VolumeParameter*> GetStates() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::GetStates");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Rendering::VolumeParameter*>, false>(this, ___internal__method);
    }
    // private System.Boolean ChangedStates(UnityEngine.Rendering.VolumeParameter[,] newStates)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ChangedStates(::ArrayW<::UnityEngine::Rendering::VolumeParameter*> newStates) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::ChangedStates");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangedStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newStates)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, newStates);
    }
    // public System.Boolean RefreshVolumes(UnityEngine.Rendering.Volume[] newVolumes)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool RefreshVolumes(::ArrayW<::UnityEngine::Rendering::Volume*> newVolumes) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::RefreshVolumes");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeDebugSettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, newVolumes);
    }
    // public System.Single GetVolumeWeight(UnityEngine.Rendering.Volume volume)
    // Offset: 0xFFFFFFFFFFFFFFFF
    float GetVolumeWeight(::UnityEngine::Rendering::Volume* volume) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::GetVolumeWeight");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeDebugSettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, volume);
    }
    // public System.Boolean VolumeHasInfluence(UnityEngine.Rendering.Volume volume)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool VolumeHasInfluence(::UnityEngine::Rendering::Volume* volume) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::VolumeHasInfluence");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeDebugSettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, volume);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VolumeDebugSettings_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VolumeDebugSettings_1<T>*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeDebugSettings_1::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<VolumeDebugSettings_1<T>*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
  }; // UnityEngine.Rendering.VolumeDebugSettings`1
  // Could not write size check! Type: UnityEngine.Rendering.VolumeDebugSettings`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
