// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VolumeParameter
  class VolumeParameter;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: FieldInfo
  class FieldInfo;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VolumeComponent
  class VolumeComponent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::VolumeComponent);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::VolumeComponent*, "UnityEngine.Rendering", "VolumeComponent");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.VolumeComponent
  // [TokenAttribute] Offset: FFFFFFFF
  class VolumeComponent : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::UnityEngine::Rendering::VolumeComponent::$$c
    class $$c;
    public:
    // public System.Boolean active
    // Size: 0x1
    // Offset: 0x18
    bool active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: active and: displayName
    char __padding0[0x7] = {};
    // private System.String <displayName>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // readonly System.Collections.Generic.List`1<UnityEngine.Rendering.VolumeParameter> parameterList
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::VolumeParameter*>* parameterList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::VolumeParameter*>*) == 0x8);
    // private System.Collections.ObjectModel.ReadOnlyCollection`1<UnityEngine.Rendering.VolumeParameter> m_ParameterReadOnlyCollection
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::UnityEngine::Rendering::VolumeParameter*>* m_ParameterReadOnlyCollection;
    // Field size check
    static_assert(sizeof(::System::Collections::ObjectModel::ReadOnlyCollection_1<::UnityEngine::Rendering::VolumeParameter*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean active
    [[deprecated("Use field access instead!")]] bool& dyn_active();
    // Get instance field reference: private System.String <displayName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$displayName$k__BackingField();
    // Get instance field reference: readonly System.Collections.Generic.List`1<UnityEngine.Rendering.VolumeParameter> parameterList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::VolumeParameter*>*& dyn_parameterList();
    // Get instance field reference: private System.Collections.ObjectModel.ReadOnlyCollection`1<UnityEngine.Rendering.VolumeParameter> m_ParameterReadOnlyCollection
    [[deprecated("Use field access instead!")]] ::System::Collections::ObjectModel::ReadOnlyCollection_1<::UnityEngine::Rendering::VolumeParameter*>*& dyn_m_ParameterReadOnlyCollection();
    // public System.String get_displayName()
    // Offset: 0x52604EC
    ::StringW get_displayName();
    // protected System.Void set_displayName(System.String value)
    // Offset: 0x52604F4
    void set_displayName(::StringW value);
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<UnityEngine.Rendering.VolumeParameter> get_parameters()
    // Offset: 0x52604FC
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::UnityEngine::Rendering::VolumeParameter*>* get_parameters();
    // static System.Void FindParameters(System.Object o, System.Collections.Generic.List`1<UnityEngine.Rendering.VolumeParameter> parameters, System.Func`2<System.Reflection.FieldInfo,System.Boolean> filter)
    // Offset: 0x5260570
    static void FindParameters(::Il2CppObject* o, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::VolumeParameter*>* parameters, ::System::Func_2<::System::Reflection::FieldInfo*, bool>* filter);
    // protected System.Void OnEnable()
    // Offset: 0x5260BA8
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x5260DEC
    void OnDisable();
    // public System.Void Override(UnityEngine.Rendering.VolumeComponent state, System.Single interpFactor)
    // Offset: 0x5260F34
    void Override(::UnityEngine::Rendering::VolumeComponent* state, float interpFactor);
    // public System.Void SetAllOverridesTo(System.Boolean state)
    // Offset: 0x5261058
    void SetAllOverridesTo(bool state);
    // System.Void SetOverridesTo(System.Collections.Generic.IEnumerable`1<UnityEngine.Rendering.VolumeParameter> enumerable, System.Boolean state)
    // Offset: 0x5261068
    void SetOverridesTo(::System::Collections::Generic::IEnumerable_1<::UnityEngine::Rendering::VolumeParameter*>* enumerable, bool state);
    // public System.Boolean AnyPropertiesIsOverridden()
    // Offset: 0x5261634
    bool AnyPropertiesIsOverridden();
    // protected System.Void OnDestroy()
    // Offset: 0x52616D8
    void OnDestroy();
    // public System.Void Release()
    // Offset: 0x52616DC
    void Release();
    // public System.Void .ctor()
    // Offset: 0x5261784
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VolumeComponent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeComponent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VolumeComponent*, creationType>()));
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0x5261588
    // Implemented from: UnityEngine.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Rendering.VolumeComponent
  #pragma pack(pop)
  static check_size<sizeof(VolumeComponent), 48 + sizeof(::System::Collections::ObjectModel::ReadOnlyCollection_1<::UnityEngine::Rendering::VolumeParameter*>*)> __UnityEngine_Rendering_VolumeComponentSizeCheck;
  static_assert(sizeof(VolumeComponent) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponent::get_displayName
// Il2CppName: get_displayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Rendering::VolumeComponent::*)()>(&UnityEngine::Rendering::VolumeComponent::get_displayName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeComponent*), "get_displayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponent::set_displayName
// Il2CppName: set_displayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeComponent::*)(::StringW)>(&UnityEngine::Rendering::VolumeComponent::set_displayName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeComponent*), "set_displayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponent::get_parameters
// Il2CppName: get_parameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::UnityEngine::Rendering::VolumeParameter*>* (UnityEngine::Rendering::VolumeComponent::*)()>(&UnityEngine::Rendering::VolumeComponent::get_parameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeComponent*), "get_parameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponent::FindParameters
// Il2CppName: FindParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::VolumeParameter*>*, ::System::Func_2<::System::Reflection::FieldInfo*, bool>*)>(&UnityEngine::Rendering::VolumeComponent::FindParameters)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* parameters = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VolumeParameter")})->byval_arg;
    static auto* filter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Reflection", "FieldInfo"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeComponent*), "FindParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o, parameters, filter});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponent::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeComponent::*)()>(&UnityEngine::Rendering::VolumeComponent::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeComponent*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponent::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeComponent::*)()>(&UnityEngine::Rendering::VolumeComponent::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeComponent*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponent::Override
// Il2CppName: Override
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeComponent::*)(::UnityEngine::Rendering::VolumeComponent*, float)>(&UnityEngine::Rendering::VolumeComponent::Override)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VolumeComponent")->byval_arg;
    static auto* interpFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeComponent*), "Override", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, interpFactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponent::SetAllOverridesTo
// Il2CppName: SetAllOverridesTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeComponent::*)(bool)>(&UnityEngine::Rendering::VolumeComponent::SetAllOverridesTo)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeComponent*), "SetAllOverridesTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponent::SetOverridesTo
// Il2CppName: SetOverridesTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeComponent::*)(::System::Collections::Generic::IEnumerable_1<::UnityEngine::Rendering::VolumeParameter*>*, bool)>(&UnityEngine::Rendering::VolumeComponent::SetOverridesTo)> {
  static const MethodInfo* get() {
    static auto* enumerable = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VolumeParameter")})->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeComponent*), "SetOverridesTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enumerable, state});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponent::AnyPropertiesIsOverridden
// Il2CppName: AnyPropertiesIsOverridden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::VolumeComponent::*)()>(&UnityEngine::Rendering::VolumeComponent::AnyPropertiesIsOverridden)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeComponent*), "AnyPropertiesIsOverridden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponent::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeComponent::*)()>(&UnityEngine::Rendering::VolumeComponent::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeComponent*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponent::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeComponent::*)()>(&UnityEngine::Rendering::VolumeComponent::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeComponent*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponent::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::VolumeComponent::*)()>(&UnityEngine::Rendering::VolumeComponent::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeComponent*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
