// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.VolumeComponentMenu
#include "UnityEngine/Rendering/VolumeComponentMenu.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VolumeComponentMenuForRenderPipeline
  class VolumeComponentMenuForRenderPipeline;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::VolumeComponentMenuForRenderPipeline);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::VolumeComponentMenuForRenderPipeline*, "UnityEngine.Rendering", "VolumeComponentMenuForRenderPipeline");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.VolumeComponentMenuForRenderPipeline
  // [TokenAttribute] Offset: FFFFFFFF
  class VolumeComponentMenuForRenderPipeline : public ::UnityEngine::Rendering::VolumeComponentMenu {
    public:
    public:
    // private readonly System.Type[] <pipelineTypes>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::System::Type*> pipelineTypes;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Type*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept = delete;
    // Get instance field reference: private readonly System.Type[] <pipelineTypes>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Type*>& dyn_$pipelineTypes$k__BackingField();
    // public System.Type[] get_pipelineTypes()
    // Offset: 0x52602FC
    ::ArrayW<::System::Type*> get_pipelineTypes();
    // public System.Void .ctor(System.String menu, params System.Type[] pipelineTypes)
    // Offset: 0x5260304
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VolumeComponentMenuForRenderPipeline* New_ctor(::StringW menu, ::ArrayW<::System::Type*> pipelineTypes) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeComponentMenuForRenderPipeline::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VolumeComponentMenuForRenderPipeline*, creationType>(menu, pipelineTypes)));
    }
  }; // UnityEngine.Rendering.VolumeComponentMenuForRenderPipeline
  #pragma pack(pop)
  static check_size<sizeof(VolumeComponentMenuForRenderPipeline), 24 + sizeof(::ArrayW<::System::Type*>)> __UnityEngine_Rendering_VolumeComponentMenuForRenderPipelineSizeCheck;
  static_assert(sizeof(VolumeComponentMenuForRenderPipeline) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponentMenuForRenderPipeline::get_pipelineTypes
// Il2CppName: get_pipelineTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (UnityEngine::Rendering::VolumeComponentMenuForRenderPipeline::*)()>(&UnityEngine::Rendering::VolumeComponentMenuForRenderPipeline::get_pipelineTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeComponentMenuForRenderPipeline*), "get_pipelineTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeComponentMenuForRenderPipeline::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
