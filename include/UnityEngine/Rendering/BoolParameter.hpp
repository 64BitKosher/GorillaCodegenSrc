// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.VolumeParameter`1
#include "UnityEngine/Rendering/VolumeParameter_1.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: BoolParameter
  class BoolParameter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::BoolParameter);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::BoolParameter*, "UnityEngine.Rendering", "BoolParameter");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.BoolParameter
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  class BoolParameter : public ::UnityEngine::Rendering::VolumeParameter_1<bool> {
    public:
    // Nested type: ::UnityEngine::Rendering::BoolParameter::DisplayType
    struct DisplayType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Rendering.BoolParameter/DisplayType
    // [TokenAttribute] Offset: FFFFFFFF
    struct DisplayType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DisplayType
      constexpr DisplayType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Rendering.BoolParameter/DisplayType Checkbox
      static constexpr const int Checkbox = 0;
      // Get static field: static public UnityEngine.Rendering.BoolParameter/DisplayType Checkbox
      static ::UnityEngine::Rendering::BoolParameter::DisplayType _get_Checkbox();
      // Set static field: static public UnityEngine.Rendering.BoolParameter/DisplayType Checkbox
      static void _set_Checkbox(::UnityEngine::Rendering::BoolParameter::DisplayType value);
      // static field const value: static public UnityEngine.Rendering.BoolParameter/DisplayType EnumPopup
      static constexpr const int EnumPopup = 1;
      // Get static field: static public UnityEngine.Rendering.BoolParameter/DisplayType EnumPopup
      static ::UnityEngine::Rendering::BoolParameter::DisplayType _get_EnumPopup();
      // Set static field: static public UnityEngine.Rendering.BoolParameter/DisplayType EnumPopup
      static void _set_EnumPopup(::UnityEngine::Rendering::BoolParameter::DisplayType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.Rendering.BoolParameter/DisplayType
    #pragma pack(pop)
    static check_size<sizeof(BoolParameter::DisplayType), 0 + sizeof(int)> __UnityEngine_Rendering_BoolParameter_DisplayTypeSizeCheck;
    static_assert(sizeof(BoolParameter::DisplayType) == 0x4);
    public:
    // public UnityEngine.Rendering.BoolParameter/DisplayType displayType
    // Size: 0x4
    // Offset: 0x14
    ::UnityEngine::Rendering::BoolParameter::DisplayType displayType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::BoolParameter::DisplayType) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Rendering.BoolParameter/DisplayType displayType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::BoolParameter::DisplayType& dyn_displayType();
    // public System.Void .ctor(System.Boolean value, System.Boolean overrideState)
    // Offset: 0x526379C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoolParameter* New_ctor(bool value, bool overrideState) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::BoolParameter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoolParameter*, creationType>(value, overrideState)));
    }
  }; // UnityEngine.Rendering.BoolParameter
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::BoolParameter::DisplayType, "UnityEngine.Rendering", "BoolParameter/DisplayType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::BoolParameter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
