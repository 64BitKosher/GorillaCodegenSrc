// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Skipping declaration: PooledObject because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityAction`1<T0>
  template<typename T0>
  class UnityAction_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ObjectPool`1<T>
  template<typename T>
  class ObjectPool_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::Rendering::ObjectPool_1, "UnityEngine.Rendering", "ObjectPool`1");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.ObjectPool`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class ObjectPool_1 : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Rendering::ObjectPool_1::PooledObject<T>
    struct PooledObject;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.ObjectPool`1/PooledObject
    // [TokenAttribute] Offset: FFFFFFFF
    struct PooledObject : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::IDisposable*/ {
      public:
      using declaring_type = ObjectPool_1<T>*;
      static constexpr std::string_view NESTED_NAME = "PooledObject";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // private readonly T m_ToReturn
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T m_ToReturn;
      // private readonly UnityEngine.Rendering.ObjectPool`1<T> m_Pool
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Rendering::ObjectPool_1<T>* m_Pool;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rendering::ObjectPool_1<T>*) == 0x8);
      public:
      // Creating value type constructor for type: PooledObject
      constexpr PooledObject(T m_ToReturn_ = {}, ::UnityEngine::Rendering::ObjectPool_1<T>* m_Pool_ = {}) noexcept : m_ToReturn{m_ToReturn_}, m_Pool{m_Pool_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::IDisposable
      operator ::System::IDisposable() noexcept {
        return *reinterpret_cast<::System::IDisposable*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly T m_ToReturn
      [[deprecated("Use field access instead!")]] T& dyn_m_ToReturn() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObjectPool_1::PooledObject::dyn_m_ToReturn");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ToReturn"))->offset;
        return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly UnityEngine.Rendering.ObjectPool`1<T> m_Pool
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ObjectPool_1<T>*& dyn_m_Pool() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObjectPool_1::PooledObject::dyn_m_Pool");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Pool"))->offset;
        return *reinterpret_cast<::UnityEngine::Rendering::ObjectPool_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void .ctor(T value, UnityEngine.Rendering.ObjectPool`1<T> pool)
      // Offset: 0xFFFFFFFFFFFFFFFF
      // ABORTED: conflicts with another method.  PooledObject(T value, ::UnityEngine::Rendering::ObjectPool_1<T>* pool)
      // private System.Void System.IDisposable.Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_IDisposable_Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObjectPool_1::PooledObject::System.IDisposable.Dispose");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::Rendering::ObjectPool_1<T>::PooledObject), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // UnityEngine.Rendering.ObjectPool`1/PooledObject
    // Could not write size check! Type: UnityEngine.Rendering.ObjectPool`1/PooledObject is generic, or has no fields that are valid for size checks!
    public:
    // private readonly System.Collections.Generic.Stack`1<T> m_Stack
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Stack_1<T>* m_Stack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<T>*) == 0x8);
    // private readonly UnityEngine.Events.UnityAction`1<T> m_ActionOnGet
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Events::UnityAction_1<T>* m_ActionOnGet;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityAction_1<T>*) == 0x8);
    // private readonly UnityEngine.Events.UnityAction`1<T> m_ActionOnRelease
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Events::UnityAction_1<T>* m_ActionOnRelease;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityAction_1<T>*) == 0x8);
    // private readonly System.Boolean m_CollectionCheck
    // Size: 0x1
    // Offset: 0x0
    bool m_CollectionCheck;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 <countAll>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int countAll;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.Stack`1<T> m_Stack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<T>*& dyn_m_Stack() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObjectPool_1::dyn_m_Stack");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Stack"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Stack_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly UnityEngine.Events.UnityAction`1<T> m_ActionOnGet
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityAction_1<T>*& dyn_m_ActionOnGet() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObjectPool_1::dyn_m_ActionOnGet");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ActionOnGet"))->offset;
      return *reinterpret_cast<::UnityEngine::Events::UnityAction_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly UnityEngine.Events.UnityAction`1<T> m_ActionOnRelease
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityAction_1<T>*& dyn_m_ActionOnRelease() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObjectPool_1::dyn_m_ActionOnRelease");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ActionOnRelease"))->offset;
      return *reinterpret_cast<::UnityEngine::Events::UnityAction_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Boolean m_CollectionCheck
    [[deprecated("Use field access instead!")]] bool& dyn_m_CollectionCheck() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObjectPool_1::dyn_m_CollectionCheck");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CollectionCheck"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <countAll>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$countAll$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObjectPool_1::dyn_$countAll$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<countAll>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_countAll()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_countAll() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObjectPool_1::get_countAll");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_countAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Void set_countAll(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_countAll(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObjectPool_1::set_countAll");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_countAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor(UnityEngine.Events.UnityAction`1<T> actionOnGet, UnityEngine.Events.UnityAction`1<T> actionOnRelease, System.Boolean collectionCheck)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjectPool_1<T>* New_ctor(::UnityEngine::Events::UnityAction_1<T>* actionOnGet, ::UnityEngine::Events::UnityAction_1<T>* actionOnRelease, bool collectionCheck) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObjectPool_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjectPool_1<T>*, creationType>(actionOnGet, actionOnRelease, collectionCheck)));
    }
    // public T Get()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Get() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObjectPool_1::Get");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public UnityEngine.Rendering.ObjectPool`1/PooledObject<T> Get(out T v)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::UnityEngine::Rendering::ObjectPool_1<T>::PooledObject Get(ByRef<T> v) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObjectPool_1::Get");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<T&>()})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::Rendering::ObjectPool_1<T>::PooledObject, false>(this, ___internal__method, byref(v));
    }
    // public System.Void Release(T element)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Release(T element) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObjectPool_1::Release");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, element);
    }
  }; // UnityEngine.Rendering.ObjectPool`1
  // Could not write size check! Type: UnityEngine.Rendering.ObjectPool`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
