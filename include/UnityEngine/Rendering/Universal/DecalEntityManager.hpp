// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalEntityChunk
  class DecalEntityChunk;
  // Forward declaring type: DecalCachedChunk
  class DecalCachedChunk;
  // Forward declaring type: DecalCulledChunk
  class DecalCulledChunk;
  // Forward declaring type: DecalDrawCallChunk
  class DecalDrawCallChunk;
  // Forward declaring type: DecalEntityIndexer
  class DecalEntityIndexer;
  // Forward declaring type: DecalEntity
  struct DecalEntity;
  // Forward declaring type: DecalProjector
  class DecalProjector;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalEntityManager
  class DecalEntityManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::DecalEntityManager);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DecalEntityManager*, "UnityEngine.Rendering.Universal", "DecalEntityManager");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.DecalEntityManager
  // [TokenAttribute] Offset: FFFFFFFF
  class DecalEntityManager : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::DecalEntityManager::CombinedChunks
    struct CombinedChunks;
    // Nested type: ::UnityEngine::Rendering::Universal::DecalEntityManager::$$c
    class $$c;
    // Size: 0x25
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.Universal.DecalEntityManager/CombinedChunks
    // [TokenAttribute] Offset: FFFFFFFF
    struct CombinedChunks/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Rendering.Universal.DecalEntityChunk entityChunk
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Rendering::Universal::DecalEntityChunk* entityChunk;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalEntityChunk*) == 0x8);
      // public UnityEngine.Rendering.Universal.DecalCachedChunk cachedChunk
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::Rendering::Universal::DecalCachedChunk* cachedChunk;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalCachedChunk*) == 0x8);
      // public UnityEngine.Rendering.Universal.DecalCulledChunk culledChunk
      // Size: 0x8
      // Offset: 0x10
      ::UnityEngine::Rendering::Universal::DecalCulledChunk* culledChunk;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalCulledChunk*) == 0x8);
      // public UnityEngine.Rendering.Universal.DecalDrawCallChunk drawCallChunk
      // Size: 0x8
      // Offset: 0x18
      ::UnityEngine::Rendering::Universal::DecalDrawCallChunk* drawCallChunk;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalDrawCallChunk*) == 0x8);
      // public System.Int32 previousChunkIndex
      // Size: 0x4
      // Offset: 0x20
      int previousChunkIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Boolean valid
      // Size: 0x1
      // Offset: 0x24
      bool valid;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: CombinedChunks
      constexpr CombinedChunks(::UnityEngine::Rendering::Universal::DecalEntityChunk* entityChunk_ = {}, ::UnityEngine::Rendering::Universal::DecalCachedChunk* cachedChunk_ = {}, ::UnityEngine::Rendering::Universal::DecalCulledChunk* culledChunk_ = {}, ::UnityEngine::Rendering::Universal::DecalDrawCallChunk* drawCallChunk_ = {}, int previousChunkIndex_ = {}, bool valid_ = {}) noexcept : entityChunk{entityChunk_}, cachedChunk{cachedChunk_}, culledChunk{culledChunk_}, drawCallChunk{drawCallChunk_}, previousChunkIndex{previousChunkIndex_}, valid{valid_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Rendering.Universal.DecalEntityChunk entityChunk
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalEntityChunk*& dyn_entityChunk();
      // Get instance field reference: public UnityEngine.Rendering.Universal.DecalCachedChunk cachedChunk
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalCachedChunk*& dyn_cachedChunk();
      // Get instance field reference: public UnityEngine.Rendering.Universal.DecalCulledChunk culledChunk
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalCulledChunk*& dyn_culledChunk();
      // Get instance field reference: public UnityEngine.Rendering.Universal.DecalDrawCallChunk drawCallChunk
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalDrawCallChunk*& dyn_drawCallChunk();
      // Get instance field reference: public System.Int32 previousChunkIndex
      [[deprecated("Use field access instead!")]] int& dyn_previousChunkIndex();
      // Get instance field reference: public System.Boolean valid
      [[deprecated("Use field access instead!")]] bool& dyn_valid();
    }; // UnityEngine.Rendering.Universal.DecalEntityManager/CombinedChunks
    #pragma pack(pop)
    static check_size<sizeof(DecalEntityManager::CombinedChunks), 36 + sizeof(bool)> __UnityEngine_Rendering_Universal_DecalEntityManager_CombinedChunksSizeCheck;
    static_assert(sizeof(DecalEntityManager::CombinedChunks) == 0x25);
    public:
    // public System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.DecalEntityChunk> entityChunks
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalEntityChunk*>* entityChunks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalEntityChunk*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.DecalCachedChunk> cachedChunks
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalCachedChunk*>* cachedChunks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalCachedChunk*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.DecalCulledChunk> culledChunks
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalCulledChunk*>* culledChunks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalCulledChunk*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.DecalDrawCallChunk> drawCallChunks
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalDrawCallChunk*>* drawCallChunks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalDrawCallChunk*>*) == 0x8);
    // public System.Int32 chunkCount
    // Size: 0x4
    // Offset: 0x30
    int chunkCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: chunkCount and: m_AddDecalSampler
    char __padding4[0x4] = {};
    // private UnityEngine.Rendering.ProfilingSampler m_AddDecalSampler
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Rendering::ProfilingSampler* m_AddDecalSampler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // private UnityEngine.Rendering.ProfilingSampler m_ResizeChunks
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Rendering::ProfilingSampler* m_ResizeChunks;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // private UnityEngine.Rendering.ProfilingSampler m_SortChunks
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Rendering::ProfilingSampler* m_SortChunks;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalEntityIndexer m_DecalEntityIndexer
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Rendering::Universal::DecalEntityIndexer* m_DecalEntityIndexer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalEntityIndexer*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Material,System.Int32> m_MaterialToChunkIndex
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Material*, int>* m_MaterialToChunkIndex;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Material*, int>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.DecalEntityManager/CombinedChunks> m_CombinedChunks
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalEntityManager::CombinedChunks>* m_CombinedChunks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalEntityManager::CombinedChunks>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> m_CombinedChunkRemmap
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<int>* m_CombinedChunkRemmap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private UnityEngine.Material m_ErrorMaterial
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Material* m_ErrorMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Mesh m_DecalProjectorMesh
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Mesh* m_DecalProjectorMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.DecalEntityChunk> entityChunks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalEntityChunk*>*& dyn_entityChunks();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.DecalCachedChunk> cachedChunks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalCachedChunk*>*& dyn_cachedChunks();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.DecalCulledChunk> culledChunks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalCulledChunk*>*& dyn_culledChunks();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.DecalDrawCallChunk> drawCallChunks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalDrawCallChunk*>*& dyn_drawCallChunks();
    // Get instance field reference: public System.Int32 chunkCount
    [[deprecated("Use field access instead!")]] int& dyn_chunkCount();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler m_AddDecalSampler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_m_AddDecalSampler();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler m_ResizeChunks
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_m_ResizeChunks();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler m_SortChunks
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_m_SortChunks();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalEntityIndexer m_DecalEntityIndexer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalEntityIndexer*& dyn_m_DecalEntityIndexer();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Material,System.Int32> m_MaterialToChunkIndex
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Material*, int>*& dyn_m_MaterialToChunkIndex();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.DecalEntityManager/CombinedChunks> m_CombinedChunks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalEntityManager::CombinedChunks>*& dyn_m_CombinedChunks();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> m_CombinedChunkRemmap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_m_CombinedChunkRemmap();
    // Get instance field reference: private UnityEngine.Material m_ErrorMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_ErrorMaterial();
    // Get instance field reference: private UnityEngine.Mesh m_DecalProjectorMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_m_DecalProjectorMesh();
    // public UnityEngine.Material get_errorMaterial()
    // Offset: 0x52A50E4
    ::UnityEngine::Material* get_errorMaterial();
    // public UnityEngine.Mesh get_decalProjectorMesh()
    // Offset: 0x52A4008
    ::UnityEngine::Mesh* get_decalProjectorMesh();
    // public System.Void .ctor()
    // Offset: 0x52A51B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DecalEntityManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DecalEntityManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DecalEntityManager*, creationType>()));
    }
    // public System.Boolean IsValid(UnityEngine.Rendering.Universal.DecalEntity decalEntity)
    // Offset: 0x52A551C
    bool IsValid(::UnityEngine::Rendering::Universal::DecalEntity decalEntity);
    // public UnityEngine.Rendering.Universal.DecalEntity CreateDecalEntity(UnityEngine.Rendering.Universal.DecalProjector decalProjector)
    // Offset: 0x52A5534
    ::UnityEngine::Rendering::Universal::DecalEntity CreateDecalEntity(::UnityEngine::Rendering::Universal::DecalProjector* decalProjector);
    // private System.Int32 CreateChunkIndex(UnityEngine.Material material)
    // Offset: 0x52A5AB8
    int CreateChunkIndex(::UnityEngine::Material* material);
    // public System.Void UpdateAllDecalEntitiesData()
    // Offset: 0x52A6360
    void UpdateAllDecalEntitiesData();
    // public System.Void UpdateDecalEntityData(UnityEngine.Rendering.Universal.DecalEntity decalEntity, UnityEngine.Rendering.Universal.DecalProjector decalProjector)
    // Offset: 0x52A5FE8
    void UpdateDecalEntityData(::UnityEngine::Rendering::Universal::DecalEntity decalEntity, ::UnityEngine::Rendering::Universal::DecalProjector* decalProjector);
    // public System.Void DestroyDecalEntity(UnityEngine.Rendering.Universal.DecalEntity decalEntity)
    // Offset: 0x52A6580
    void DestroyDecalEntity(::UnityEngine::Rendering::Universal::DecalEntity decalEntity);
    // public System.Void Update()
    // Offset: 0x52A6758
    void Update();
    // public System.Void Dispose()
    // Offset: 0x52A7144
    void Dispose();
  }; // UnityEngine.Rendering.Universal.DecalEntityManager
  #pragma pack(pop)
  static check_size<sizeof(DecalEntityManager), 120 + sizeof(::UnityEngine::Mesh*)> __UnityEngine_Rendering_Universal_DecalEntityManagerSizeCheck;
  static_assert(sizeof(DecalEntityManager) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DecalEntityManager::CombinedChunks, "UnityEngine.Rendering.Universal", "DecalEntityManager/CombinedChunks");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityManager::get_errorMaterial
// Il2CppName: get_errorMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::DecalEntityManager::*)()>(&UnityEngine::Rendering::Universal::DecalEntityManager::get_errorMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityManager*), "get_errorMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityManager::get_decalProjectorMesh
// Il2CppName: get_decalProjectorMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (UnityEngine::Rendering::Universal::DecalEntityManager::*)()>(&UnityEngine::Rendering::Universal::DecalEntityManager::get_decalProjectorMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityManager*), "get_decalProjectorMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityManager::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DecalEntityManager::*)(::UnityEngine::Rendering::Universal::DecalEntity)>(&UnityEngine::Rendering::Universal::DecalEntityManager::IsValid)> {
  static const MethodInfo* get() {
    static auto* decalEntity = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityManager*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{decalEntity});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityManager::CreateDecalEntity
// Il2CppName: CreateDecalEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DecalEntity (UnityEngine::Rendering::Universal::DecalEntityManager::*)(::UnityEngine::Rendering::Universal::DecalProjector*)>(&UnityEngine::Rendering::Universal::DecalEntityManager::CreateDecalEntity)> {
  static const MethodInfo* get() {
    static auto* decalProjector = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalProjector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityManager*), "CreateDecalEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{decalProjector});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityManager::CreateChunkIndex
// Il2CppName: CreateChunkIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::DecalEntityManager::*)(::UnityEngine::Material*)>(&UnityEngine::Rendering::Universal::DecalEntityManager::CreateChunkIndex)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityManager*), "CreateChunkIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityManager::UpdateAllDecalEntitiesData
// Il2CppName: UpdateAllDecalEntitiesData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalEntityManager::*)()>(&UnityEngine::Rendering::Universal::DecalEntityManager::UpdateAllDecalEntitiesData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityManager*), "UpdateAllDecalEntitiesData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityManager::UpdateDecalEntityData
// Il2CppName: UpdateDecalEntityData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalEntityManager::*)(::UnityEngine::Rendering::Universal::DecalEntity, ::UnityEngine::Rendering::Universal::DecalProjector*)>(&UnityEngine::Rendering::Universal::DecalEntityManager::UpdateDecalEntityData)> {
  static const MethodInfo* get() {
    static auto* decalEntity = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalEntity")->byval_arg;
    static auto* decalProjector = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalProjector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityManager*), "UpdateDecalEntityData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{decalEntity, decalProjector});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityManager::DestroyDecalEntity
// Il2CppName: DestroyDecalEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalEntityManager::*)(::UnityEngine::Rendering::Universal::DecalEntity)>(&UnityEngine::Rendering::Universal::DecalEntityManager::DestroyDecalEntity)> {
  static const MethodInfo* get() {
    static auto* decalEntity = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityManager*), "DestroyDecalEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{decalEntity});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalEntityManager::*)()>(&UnityEngine::Rendering::Universal::DecalEntityManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalEntityManager::*)()>(&UnityEngine::Rendering::Universal::DecalEntityManager::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
