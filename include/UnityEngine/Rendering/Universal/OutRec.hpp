// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: OutPt
  class OutPt;
  // Forward declaring type: PolyNode
  class PolyNode;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: OutRec
  class OutRec;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::OutRec);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::OutRec*, "UnityEngine.Rendering.Universal", "OutRec");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.OutRec
  // [TokenAttribute] Offset: FFFFFFFF
  class OutRec : public ::Il2CppObject {
    public:
    public:
    // System.Int32 Idx
    // Size: 0x4
    // Offset: 0x10
    int Idx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean IsHole
    // Size: 0x1
    // Offset: 0x14
    bool IsHole;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean IsOpen
    // Size: 0x1
    // Offset: 0x15
    bool IsOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsOpen and: FirstLeft
    char __padding2[0x2] = {};
    // UnityEngine.Rendering.Universal.OutRec FirstLeft
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Rendering::Universal::OutRec* FirstLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::OutRec*) == 0x8);
    // UnityEngine.Rendering.Universal.OutPt Pts
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rendering::Universal::OutPt* Pts;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::OutPt*) == 0x8);
    // UnityEngine.Rendering.Universal.OutPt BottomPt
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Rendering::Universal::OutPt* BottomPt;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::OutPt*) == 0x8);
    // UnityEngine.Rendering.Universal.PolyNode PolyNode
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Rendering::Universal::PolyNode* PolyNode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::PolyNode*) == 0x8);
    public:
    // Get instance field reference: System.Int32 Idx
    [[deprecated("Use field access instead!")]] int& dyn_Idx();
    // Get instance field reference: System.Boolean IsHole
    [[deprecated("Use field access instead!")]] bool& dyn_IsHole();
    // Get instance field reference: System.Boolean IsOpen
    [[deprecated("Use field access instead!")]] bool& dyn_IsOpen();
    // Get instance field reference: UnityEngine.Rendering.Universal.OutRec FirstLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::OutRec*& dyn_FirstLeft();
    // Get instance field reference: UnityEngine.Rendering.Universal.OutPt Pts
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::OutPt*& dyn_Pts();
    // Get instance field reference: UnityEngine.Rendering.Universal.OutPt BottomPt
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::OutPt*& dyn_BottomPt();
    // Get instance field reference: UnityEngine.Rendering.Universal.PolyNode PolyNode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::PolyNode*& dyn_PolyNode();
    // public System.Void .ctor()
    // Offset: 0x526CE34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OutRec* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::OutRec::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OutRec*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.OutRec
  #pragma pack(pop)
  static check_size<sizeof(OutRec), 48 + sizeof(::UnityEngine::Rendering::Universal::PolyNode*)> __UnityEngine_Rendering_Universal_OutRecSizeCheck;
  static_assert(sizeof(OutRec) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::OutRec::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
