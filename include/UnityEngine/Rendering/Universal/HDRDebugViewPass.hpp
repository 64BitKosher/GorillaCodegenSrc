// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderPass
#include "UnityEngine/Rendering/Universal/ScriptableRenderPass.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: HDRDebugMode
  struct HDRDebugMode;
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: RenderTextureDescriptor
  struct RenderTextureDescriptor;
  // Forward declaring type: Vector4
  struct Vector4;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraph
  class RenderGraph;
  // Forward declaring type: TextureHandle
  struct TextureHandle;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: HDRDebugViewPass
  class HDRDebugViewPass;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::HDRDebugViewPass);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::HDRDebugViewPass*, "UnityEngine.Rendering.Universal", "HDRDebugViewPass");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.HDRDebugViewPass
  // [TokenAttribute] Offset: FFFFFFFF
  class HDRDebugViewPass : public ::UnityEngine::Rendering::Universal::ScriptableRenderPass {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::HDRDebugViewPass::HDRDebugPassId
    struct HDRDebugPassId;
    // Nested type: ::UnityEngine::Rendering::Universal::HDRDebugViewPass::PassData
    class PassData;
    // Nested type: ::UnityEngine::Rendering::Universal::HDRDebugViewPass::ShaderConstants
    class ShaderConstants;
    // Nested type: ::UnityEngine::Rendering::Universal::HDRDebugViewPass::$$c__DisplayClass16_0
    class $$c__DisplayClass16_0;
    // Nested type: ::UnityEngine::Rendering::Universal::HDRDebugViewPass::$$c__DisplayClass16_1
    class $$c__DisplayClass16_1;
    // Nested type: ::UnityEngine::Rendering::Universal::HDRDebugViewPass::$$c__DisplayClass16_2
    class $$c__DisplayClass16_2;
    public:
    // private UnityEngine.Rendering.Universal.HDRDebugViewPass/PassData m_PassData
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::Rendering::Universal::HDRDebugViewPass::PassData* m_PassData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::HDRDebugViewPass::PassData*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_CIExyTarget
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Rendering::RTHandle* m_CIExyTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_PassthroughRT
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::Rendering::RTHandle* m_PassthroughRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_CameraTargetHandle
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Rendering::RTHandle* m_CameraTargetHandle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Rendering.Universal.HDRDebugViewPass/PassData m_PassData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::HDRDebugViewPass::PassData*& dyn_m_PassData();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_CIExyTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_CIExyTarget();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_PassthroughRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_PassthroughRT();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_CameraTargetHandle
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_CameraTargetHandle();
    // public System.Void .ctor(UnityEngine.Material mat)
    // Offset: 0x52C4D24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HDRDebugViewPass* New_ctor(::UnityEngine::Material* mat) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::HDRDebugViewPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HDRDebugViewPass*, creationType>(mat)));
    }
    // static public System.Void ConfigureDescriptor(ref UnityEngine.RenderTextureDescriptor descriptor)
    // Offset: 0x52C4E3C
    static void ConfigureDescriptor(ByRef<::UnityEngine::RenderTextureDescriptor> descriptor);
    // static public System.Void ConfigureDescriptorForCIEPrepass(ref UnityEngine.RenderTextureDescriptor descriptor)
    // Offset: 0x52C4E84
    static void ConfigureDescriptorForCIEPrepass(ByRef<::UnityEngine::RenderTextureDescriptor> descriptor);
    // static UnityEngine.Vector4 GetLuminanceParameters(System.Boolean isHDROutputActive)
    // Offset: 0x52C4F18
    static ::UnityEngine::Vector4 GetLuminanceParameters(bool isHDROutputActive);
    // private System.Void ExecutePass(UnityEngine.Rendering.Universal.HDRDebugViewPass/PassData data, UnityEngine.Rendering.RTHandle sourceTexture, UnityEngine.Rendering.RTHandle xyTarget)
    // Offset: 0x52C5040
    void ExecutePass(::UnityEngine::Rendering::Universal::HDRDebugViewPass::PassData* data, ::UnityEngine::Rendering::RTHandle* sourceTexture, ::UnityEngine::Rendering::RTHandle* xyTarget);
    // private System.Void ExecuteCIExyPrepass(UnityEngine.Rendering.Universal.HDRDebugViewPass/PassData data, UnityEngine.Rendering.RTHandle sourceTexture, UnityEngine.Rendering.RTHandle xyTarget)
    // Offset: 0x52C5074
    void ExecuteCIExyPrepass(::UnityEngine::Rendering::Universal::HDRDebugViewPass::PassData* data, ::UnityEngine::Rendering::RTHandle* sourceTexture, ::UnityEngine::Rendering::RTHandle* xyTarget);
    // private System.Void ExecuteHDRDebugViewFinalPass(UnityEngine.Rendering.Universal.HDRDebugViewPass/PassData data, UnityEngine.Rendering.RTHandle sourceTexture, UnityEngine.Rendering.RTHandle xyTarget)
    // Offset: 0x52C538C
    void ExecuteHDRDebugViewFinalPass(::UnityEngine::Rendering::Universal::HDRDebugViewPass::PassData* data, ::UnityEngine::Rendering::RTHandle* sourceTexture, ::UnityEngine::Rendering::RTHandle* xyTarget);
    // public System.Void Dispose()
    // Offset: 0x52C56C0
    void Dispose();
    // public System.Void Setup(UnityEngine.RenderTextureDescriptor descriptor, UnityEngine.Rendering.Universal.HDRDebugMode hdrdebugMode)
    // Offset: 0x52C5704
    void Setup(::UnityEngine::RenderTextureDescriptor descriptor, ::UnityEngine::Rendering::Universal::HDRDebugMode hdrdebugMode);
    // System.Void RenderHDRDebug(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle currentColorTarget, ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.Universal.HDRDebugMode hDRDebugMode)
    // Offset: 0x52C5A80
    void RenderHDRDebug(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle currentColorTarget, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::UnityEngine::Rendering::Universal::HDRDebugMode hDRDebugMode);
    // public override System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52C5808
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void Execute(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
  }; // UnityEngine.Rendering.Universal.HDRDebugViewPass
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::HDRDebugViewPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::HDRDebugViewPass::ConfigureDescriptor
// Il2CppName: ConfigureDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::RenderTextureDescriptor>)>(&UnityEngine::Rendering::Universal::HDRDebugViewPass::ConfigureDescriptor)> {
  static const MethodInfo* get() {
    static auto* descriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::HDRDebugViewPass*), "ConfigureDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{descriptor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::HDRDebugViewPass::ConfigureDescriptorForCIEPrepass
// Il2CppName: ConfigureDescriptorForCIEPrepass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::RenderTextureDescriptor>)>(&UnityEngine::Rendering::Universal::HDRDebugViewPass::ConfigureDescriptorForCIEPrepass)> {
  static const MethodInfo* get() {
    static auto* descriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::HDRDebugViewPass*), "ConfigureDescriptorForCIEPrepass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{descriptor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::HDRDebugViewPass::GetLuminanceParameters
// Il2CppName: GetLuminanceParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(bool)>(&UnityEngine::Rendering::Universal::HDRDebugViewPass::GetLuminanceParameters)> {
  static const MethodInfo* get() {
    static auto* isHDROutputActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::HDRDebugViewPass*), "GetLuminanceParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isHDROutputActive});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::HDRDebugViewPass::ExecutePass
// Il2CppName: ExecutePass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::HDRDebugViewPass::*)(::UnityEngine::Rendering::Universal::HDRDebugViewPass::PassData*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::HDRDebugViewPass::ExecutePass)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "HDRDebugViewPass/PassData")->byval_arg;
    static auto* sourceTexture = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* xyTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::HDRDebugViewPass*), "ExecutePass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, sourceTexture, xyTarget});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::HDRDebugViewPass::ExecuteCIExyPrepass
// Il2CppName: ExecuteCIExyPrepass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::HDRDebugViewPass::*)(::UnityEngine::Rendering::Universal::HDRDebugViewPass::PassData*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::HDRDebugViewPass::ExecuteCIExyPrepass)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "HDRDebugViewPass/PassData")->byval_arg;
    static auto* sourceTexture = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* xyTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::HDRDebugViewPass*), "ExecuteCIExyPrepass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, sourceTexture, xyTarget});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::HDRDebugViewPass::ExecuteHDRDebugViewFinalPass
// Il2CppName: ExecuteHDRDebugViewFinalPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::HDRDebugViewPass::*)(::UnityEngine::Rendering::Universal::HDRDebugViewPass::PassData*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::HDRDebugViewPass::ExecuteHDRDebugViewFinalPass)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "HDRDebugViewPass/PassData")->byval_arg;
    static auto* sourceTexture = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* xyTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::HDRDebugViewPass*), "ExecuteHDRDebugViewFinalPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, sourceTexture, xyTarget});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::HDRDebugViewPass::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::HDRDebugViewPass::*)()>(&UnityEngine::Rendering::Universal::HDRDebugViewPass::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::HDRDebugViewPass*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::HDRDebugViewPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::HDRDebugViewPass::*)(::UnityEngine::RenderTextureDescriptor, ::UnityEngine::Rendering::Universal::HDRDebugMode)>(&UnityEngine::Rendering::Universal::HDRDebugViewPass::Setup)> {
  static const MethodInfo* get() {
    static auto* descriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->byval_arg;
    static auto* hdrdebugMode = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "HDRDebugMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::HDRDebugViewPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{descriptor, hdrdebugMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::HDRDebugViewPass::RenderHDRDebug
// Il2CppName: RenderHDRDebug
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::HDRDebugViewPass::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Rendering::Universal::HDRDebugMode)>(&UnityEngine::Rendering::Universal::HDRDebugViewPass::RenderHDRDebug)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* currentColorTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* hDRDebugMode = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "HDRDebugMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::HDRDebugViewPass*), "RenderHDRDebug", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, currentColorTarget, renderingData, hDRDebugMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::HDRDebugViewPass::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::HDRDebugViewPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::HDRDebugViewPass::Execute)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::HDRDebugViewPass*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
