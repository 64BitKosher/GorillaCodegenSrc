// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: LightStats
  struct LightStats;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::LightStats, "UnityEngine.Rendering.Universal", "LightStats");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.LightStats
  // [TokenAttribute] Offset: FFFFFFFF
  struct LightStats/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 totalLights
    // Size: 0x4
    // Offset: 0x0
    int totalLights;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 totalNormalMapUsage
    // Size: 0x4
    // Offset: 0x4
    int totalNormalMapUsage;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 totalVolumetricUsage
    // Size: 0x4
    // Offset: 0x8
    int totalVolumetricUsage;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.UInt32 blendStylesUsed
    // Size: 0x4
    // Offset: 0xC
    uint blendStylesUsed;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 blendStylesWithLights
    // Size: 0x4
    // Offset: 0x10
    uint blendStylesWithLights;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: LightStats
    constexpr LightStats(int totalLights_ = {}, int totalNormalMapUsage_ = {}, int totalVolumetricUsage_ = {}, uint blendStylesUsed_ = {}, uint blendStylesWithLights_ = {}) noexcept : totalLights{totalLights_}, totalNormalMapUsage{totalNormalMapUsage_}, totalVolumetricUsage{totalVolumetricUsage_}, blendStylesUsed{blendStylesUsed_}, blendStylesWithLights{blendStylesWithLights_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 totalLights
    [[deprecated("Use field access instead!")]] int& dyn_totalLights();
    // Get instance field reference: public System.Int32 totalNormalMapUsage
    [[deprecated("Use field access instead!")]] int& dyn_totalNormalMapUsage();
    // Get instance field reference: public System.Int32 totalVolumetricUsage
    [[deprecated("Use field access instead!")]] int& dyn_totalVolumetricUsage();
    // Get instance field reference: public System.UInt32 blendStylesUsed
    [[deprecated("Use field access instead!")]] uint& dyn_blendStylesUsed();
    // Get instance field reference: public System.UInt32 blendStylesWithLights
    [[deprecated("Use field access instead!")]] uint& dyn_blendStylesWithLights();
  }; // UnityEngine.Rendering.Universal.LightStats
  #pragma pack(pop)
  static check_size<sizeof(LightStats), 16 + sizeof(uint)> __UnityEngine_Rendering_Universal_LightStatsSizeCheck;
  static_assert(sizeof(LightStats) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
