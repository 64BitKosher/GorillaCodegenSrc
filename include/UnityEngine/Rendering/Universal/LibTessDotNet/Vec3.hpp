// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal.LibTessDotNet
namespace UnityEngine::Rendering::Universal::LibTessDotNet {
  // Forward declaring type: Vec3
  struct Vec3;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3, "UnityEngine.Rendering.Universal.LibTessDotNet", "Vec3");
// Type namespace: UnityEngine.Rendering.Universal.LibTessDotNet
namespace UnityEngine::Rendering::Universal::LibTessDotNet {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.LibTessDotNet.Vec3
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  struct Vec3/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single X
    // Size: 0x4
    // Offset: 0x0
    float X;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Y
    // Size: 0x4
    // Offset: 0x4
    float Y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Z
    // Size: 0x4
    // Offset: 0x8
    float Z;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: Vec3
    constexpr Vec3(float X_ = {}, float Y_ = {}, float Z_ = {}) noexcept : X{X_}, Y{Y_}, Z{Z_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 Zero
    static ::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3 _get_Zero();
    // Set static field: static public readonly UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 Zero
    static void _set_Zero(::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3 value);
    // Get instance field reference: public System.Single X
    [[deprecated("Use field access instead!")]] float& dyn_X();
    // Get instance field reference: public System.Single Y
    [[deprecated("Use field access instead!")]] float& dyn_Y();
    // Get instance field reference: public System.Single Z
    [[deprecated("Use field access instead!")]] float& dyn_Z();
    // public System.Single get_Item(System.Int32 index)
    // Offset: 0x52FC06C
    float get_Item(int index);
    // public System.Void set_Item(System.Int32 index, System.Single value)
    // Offset: 0x52FC0D0
    void set_Item(int index, float value);
    // static public System.Void Sub(ref UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 lhs, ref UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 rhs, out UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 result)
    // Offset: 0x52FC134
    static void Sub(ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3> lhs, ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3> rhs, ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3> result);
    // static public System.Void Neg(ref UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 v)
    // Offset: 0x52FC158
    static void Neg(ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3> v);
    // static public System.Void Dot(ref UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 u, ref UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 v, out System.Single dot)
    // Offset: 0x52FC174
    static void Dot(ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3> u, ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3> v, ByRef<float> dot);
    // static public System.Void Normalize(ref UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 v)
    // Offset: 0x52FC1A0
    static void Normalize(ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3> v);
    // static public System.Int32 LongAxis(ref UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 v)
    // Offset: 0x52FC23C
    static int LongAxis(ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3> v);
    // static private System.Void .cctor()
    // Offset: 0x52FC3C8
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0x52FC304
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.Rendering.Universal.LibTessDotNet.Vec3
  #pragma pack(pop)
  static check_size<sizeof(Vec3), 8 + sizeof(float)> __UnityEngine_Rendering_Universal_LibTessDotNet_Vec3SizeCheck;
  static_assert(sizeof(Vec3) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::*)(int)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Vec3), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::*)(int, float)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Vec3), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::Sub
// Il2CppName: Sub
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3>, ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3>, ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3>)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::Sub)> {
  static const MethodInfo* get() {
    static auto* lhs = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Vec3")->this_arg;
    static auto* rhs = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Vec3")->this_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Vec3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Vec3), "Sub", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lhs, rhs, result});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::Neg
// Il2CppName: Neg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3>)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::Neg)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Vec3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Vec3), "Neg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::Dot
// Il2CppName: Dot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3>, ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3>, ByRef<float>)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::Dot)> {
  static const MethodInfo* get() {
    static auto* u = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Vec3")->this_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Vec3")->this_arg;
    static auto* dot = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Vec3), "Dot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{u, v, dot});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::Normalize
// Il2CppName: Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3>)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::Normalize)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Vec3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Vec3), "Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::LongAxis
// Il2CppName: LongAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3>)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::LongAxis)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Vec3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Vec3), "LongAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Vec3), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Vec3::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Vec3), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
