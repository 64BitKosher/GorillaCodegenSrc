// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.LibTessDotNet.Vec3
#include "UnityEngine/Rendering/Universal/LibTessDotNet/Vec3.hpp"
// Including type: UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule
#include "UnityEngine/Rendering/Universal/LibTessDotNet/WindingRule.hpp"
// Including type: UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils
#include "UnityEngine/Rendering/Universal/LibTessDotNet/MeshUtils.hpp"
// Including type: UnityEngine.Rendering.Universal.LibTessDotNet.ContourVertex
#include "UnityEngine/Rendering/Universal/LibTessDotNet/ContourVertex.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal::LibTessDotNet
namespace UnityEngine::Rendering::Universal::LibTessDotNet {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Dict`1<TValue>
  template<typename TValue>
  class Dict_1;
  // Forward declaring type: PriorityQueue`1<TValue>
  template<typename TValue>
  class PriorityQueue_1;
  // Forward declaring type: CombineCallback
  class CombineCallback;
  // Forward declaring type: ElementType
  struct ElementType;
  // Forward declaring type: ContourOrientation
  struct ContourOrientation;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal.LibTessDotNet
namespace UnityEngine::Rendering::Universal::LibTessDotNet {
  // Forward declaring type: Tess
  class Tess;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess*, "UnityEngine.Rendering.Universal.LibTessDotNet", "Tess");
// Type namespace: UnityEngine.Rendering.Universal.LibTessDotNet
namespace UnityEngine::Rendering::Universal::LibTessDotNet {
  // Size: 0x9A
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.LibTessDotNet.Tess
  // [TokenAttribute] Offset: FFFFFFFF
  class Tess : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion
    class ActiveRegion;
    public:
    // private UnityEngine.Rendering.Universal.LibTessDotNet.Mesh _mesh
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Rendering::Universal::LibTessDotNet::Mesh* mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LibTessDotNet::Mesh*) == 0x8);
    // private UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 _normal
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3 normal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3) == 0xC);
    // private UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 _sUnit
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3 sUnit;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3) == 0xC);
    // private UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 _tUnit
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3 tUnit;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3) == 0xC);
    // private System.Single _bminX
    // Size: 0x4
    // Offset: 0x3C
    float bminX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _bminY
    // Size: 0x4
    // Offset: 0x40
    float bminY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _bmaxX
    // Size: 0x4
    // Offset: 0x44
    float bmaxX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _bmaxY
    // Size: 0x4
    // Offset: 0x48
    float bmaxY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule _windingRule
    // Size: 0x4
    // Offset: 0x4C
    ::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule windingRule;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule) == 0x4);
    // private UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1<UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion> _dict
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*>* dict;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*>*) == 0x8);
    // private UnityEngine.Rendering.Universal.LibTessDotNet.PriorityQueue`1<UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex> _pq
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Rendering::Universal::LibTessDotNet::PriorityQueue_1<::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*>* pq;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LibTessDotNet::PriorityQueue_1<::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*>*) == 0x8);
    // private UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex _event
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex* event;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*) == 0x8);
    // private UnityEngine.Rendering.Universal.LibTessDotNet.CombineCallback _combineCallback
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Rendering::Universal::LibTessDotNet::CombineCallback* combineCallback;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LibTessDotNet::CombineCallback*) == 0x8);
    // private UnityEngine.Rendering.Universal.LibTessDotNet.ContourVertex[] _vertices
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::UnityEngine::Rendering::Universal::LibTessDotNet::ContourVertex> vertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::Universal::LibTessDotNet::ContourVertex>) == 0x8);
    // private System.Int32 _vertexCount
    // Size: 0x4
    // Offset: 0x78
    int vertexCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: vertexCount and: elements
    char __padding14[0x4] = {};
    // private System.Int32[] _elements
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<int> elements;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32 _elementCount
    // Size: 0x4
    // Offset: 0x88
    int elementCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single SUnitX
    // Size: 0x4
    // Offset: 0x8C
    float SUnitX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single SUnitY
    // Size: 0x4
    // Offset: 0x90
    float SUnitY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single SentinelCoord
    // Size: 0x4
    // Offset: 0x94
    float SentinelCoord;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean NoEmptyPolygons
    // Size: 0x1
    // Offset: 0x98
    bool NoEmptyPolygons;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean UsePooling
    // Size: 0x1
    // Offset: 0x99
    bool UsePooling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Rendering.Universal.LibTessDotNet.Mesh _mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LibTessDotNet::Mesh*& dyn__mesh();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 _normal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3& dyn__normal();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 _sUnit
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3& dyn__sUnit();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 _tUnit
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3& dyn__tUnit();
    // Get instance field reference: private System.Single _bminX
    [[deprecated("Use field access instead!")]] float& dyn__bminX();
    // Get instance field reference: private System.Single _bminY
    [[deprecated("Use field access instead!")]] float& dyn__bminY();
    // Get instance field reference: private System.Single _bmaxX
    [[deprecated("Use field access instead!")]] float& dyn__bmaxX();
    // Get instance field reference: private System.Single _bmaxY
    [[deprecated("Use field access instead!")]] float& dyn__bmaxY();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule _windingRule
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule& dyn__windingRule();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1<UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion> _dict
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*>*& dyn__dict();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LibTessDotNet.PriorityQueue`1<UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex> _pq
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LibTessDotNet::PriorityQueue_1<::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*>*& dyn__pq();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex _event
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*& dyn__event();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LibTessDotNet.CombineCallback _combineCallback
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LibTessDotNet::CombineCallback*& dyn__combineCallback();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LibTessDotNet.ContourVertex[] _vertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::Universal::LibTessDotNet::ContourVertex>& dyn__vertices();
    // Get instance field reference: private System.Int32 _vertexCount
    [[deprecated("Use field access instead!")]] int& dyn__vertexCount();
    // Get instance field reference: private System.Int32[] _elements
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__elements();
    // Get instance field reference: private System.Int32 _elementCount
    [[deprecated("Use field access instead!")]] int& dyn__elementCount();
    // Get instance field reference: public System.Single SUnitX
    [[deprecated("Use field access instead!")]] float& dyn_SUnitX();
    // Get instance field reference: public System.Single SUnitY
    [[deprecated("Use field access instead!")]] float& dyn_SUnitY();
    // Get instance field reference: public System.Single SentinelCoord
    [[deprecated("Use field access instead!")]] float& dyn_SentinelCoord();
    // Get instance field reference: public System.Boolean NoEmptyPolygons
    [[deprecated("Use field access instead!")]] bool& dyn_NoEmptyPolygons();
    // Get instance field reference: public System.Boolean UsePooling
    [[deprecated("Use field access instead!")]] bool& dyn_UsePooling();
    // private UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion RegionBelow(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion reg)
    // Offset: 0x52FC884
    ::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* RegionBelow(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* reg);
    // private UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion RegionAbove(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion reg)
    // Offset: 0x52FC8AC
    ::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* RegionAbove(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* reg);
    // private System.Boolean EdgeLeq(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion reg1, UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion reg2)
    // Offset: 0x52FC8D4
    bool EdgeLeq(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* reg1, ::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* reg2);
    // private System.Void DeleteRegion(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion reg)
    // Offset: 0x52FC9D0
    void DeleteRegion(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* reg);
    // private System.Void FixUpperEdge(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion reg, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge newEdge)
    // Offset: 0x52FCA40
    void FixUpperEdge(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* reg, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* newEdge);
    // private UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion TopLeftRegion(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion reg)
    // Offset: 0x52FCA9C
    ::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* TopLeftRegion(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* reg);
    // private UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion TopRightRegion(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion reg)
    // Offset: 0x52FCB4C
    ::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* TopRightRegion(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* reg);
    // private UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion AddRegionBelow(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion regAbove, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge eNewUp)
    // Offset: 0x52FCBA0
    ::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* AddRegionBelow(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* regAbove, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* eNewUp);
    // private System.Void ComputeWinding(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion reg)
    // Offset: 0x52FCC88
    void ComputeWinding(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* reg);
    // private System.Void FinishRegion(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion reg)
    // Offset: 0x52FCCDC
    void FinishRegion(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* reg);
    // private UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge FinishLeftRegions(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion regFirst, UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion regLast)
    // Offset: 0x52FCD28
    ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* FinishLeftRegions(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* regFirst, ::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* regLast);
    // private System.Void AddRightEdges(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion regUp, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge eFirst, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge eLast, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge eTopLeft, System.Boolean cleanUp)
    // Offset: 0x52FCE44
    void AddRightEdges(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* regUp, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* eFirst, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* eLast, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* eTopLeft, bool cleanUp);
    // private System.Void SpliceMergeVertices(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge e1, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge e2)
    // Offset: 0x52FD3BC
    void SpliceMergeVertices(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* e1, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* e2);
    // private System.Void VertexWeights(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex isect, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex org, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex dst, out System.Single w0, out System.Single w1)
    // Offset: 0x52FD3D4
    void VertexWeights(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex* isect, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex* org, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex* dst, ByRef<float> w0, ByRef<float> w1);
    // private System.Void GetIntersectData(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex isect, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex orgUp, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex dstUp, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex orgLo, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex dstLo)
    // Offset: 0x52FD4C4
    void GetIntersectData(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex* isect, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex* orgUp, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex* dstUp, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex* orgLo, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex* dstLo);
    // private System.Boolean CheckForRightSplice(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion regUp)
    // Offset: 0x52FD000
    bool CheckForRightSplice(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* regUp);
    // private System.Boolean CheckForLeftSplice(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion regUp)
    // Offset: 0x52FD788
    bool CheckForLeftSplice(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* regUp);
    // private System.Boolean CheckForIntersect(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion regUp)
    // Offset: 0x52FD8EC
    bool CheckForIntersect(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* regUp);
    // private System.Void WalkDirtyRegions(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion regUp)
    // Offset: 0x52FD18C
    void WalkDirtyRegions(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* regUp);
    // private System.Void ConnectRightVertex(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion regUp, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge eBottomLeft)
    // Offset: 0x52FDEA0
    void ConnectRightVertex(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* regUp, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* eBottomLeft);
    // private System.Void ConnectLeftDegenerate(UnityEngine.Rendering.Universal.LibTessDotNet.Tess/ActiveRegion regUp, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex vEvent)
    // Offset: 0x52FE094
    void ConnectLeftDegenerate(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* regUp, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex* vEvent);
    // private System.Void ConnectLeftVertex(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex vEvent)
    // Offset: 0x52FE254
    void ConnectLeftVertex(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex* vEvent);
    // private System.Void SweepEvent(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex vEvent)
    // Offset: 0x52FE188
    void SweepEvent(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex* vEvent);
    // private System.Void AddSentinel(System.Single smin, System.Single smax, System.Single t)
    // Offset: 0x52FE478
    void AddSentinel(float smin, float smax, float t);
    // private System.Void InitEdgeDict()
    // Offset: 0x52FE594
    void InitEdgeDict();
    // private System.Void DoneEdgeDict()
    // Offset: 0x52FE688
    void DoneEdgeDict();
    // private System.Void RemoveDegenerateEdges()
    // Offset: 0x52FE710
    void RemoveDegenerateEdges();
    // private System.Void InitPriorityQ()
    // Offset: 0x52FE844
    void InitPriorityQ();
    // private System.Void DonePriorityQ()
    // Offset: 0x52FEA34
    void DonePriorityQ();
    // private System.Void RemoveDegenerateFaces()
    // Offset: 0x52FEA40
    void RemoveDegenerateFaces();
    // protected System.Void ComputeInterior()
    // Offset: 0x52FEACC
    void ComputeInterior();
    // public UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 get_Normal()
    // Offset: 0x52FEBF8
    ::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3 get_Normal();
    // public System.Void set_Normal(UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 value)
    // Offset: 0x52FEC04
    void set_Normal(::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3 value);
    // public UnityEngine.Rendering.Universal.LibTessDotNet.ContourVertex[] get_Vertices()
    // Offset: 0x52FEC10
    ::ArrayW<::UnityEngine::Rendering::Universal::LibTessDotNet::ContourVertex> get_Vertices();
    // public System.Int32 get_VertexCount()
    // Offset: 0x52FEC18
    int get_VertexCount();
    // public System.Int32[] get_Elements()
    // Offset: 0x52FEC20
    ::ArrayW<int> get_Elements();
    // public System.Int32 get_ElementCount()
    // Offset: 0x52FEC28
    int get_ElementCount();
    // public System.Void .ctor()
    // Offset: 0x52FEC30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Tess* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Tess*, creationType>()));
    }
    // private System.Void ComputeNormal(ref UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 norm)
    // Offset: 0x52FECFC
    void ComputeNormal(ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3> norm);
    // private System.Void CheckOrientation()
    // Offset: 0x52FF3E4
    void CheckOrientation();
    // private System.Void ProjectPolygon()
    // Offset: 0x52FF4E0
    void ProjectPolygon();
    // private System.Void TessellateMonoRegion(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Face face)
    // Offset: 0x52FF7C0
    void TessellateMonoRegion(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Face* face);
    // private System.Void TessellateInterior()
    // Offset: 0x52FF998
    void TessellateInterior();
    // private System.Void DiscardExterior()
    // Offset: 0x52FF9F8
    void DiscardExterior();
    // private System.Void SetWindingNumber(System.Int32 value, System.Boolean keepOnlyBoundary)
    // Offset: 0x52FFA54
    void SetWindingNumber(int value, bool keepOnlyBoundary);
    // private System.Int32 GetNeighbourFace(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge edge)
    // Offset: 0x52FFB00
    int GetNeighbourFace(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* edge);
    // private System.Void OutputPolymesh(UnityEngine.Rendering.Universal.LibTessDotNet.ElementType elementType, System.Int32 polySize)
    // Offset: 0x52FFB38
    void OutputPolymesh(::UnityEngine::Rendering::Universal::LibTessDotNet::ElementType elementType, int polySize);
    // private System.Void OutputContours()
    // Offset: 0x52FFF98
    void OutputContours();
    // private System.Single SignedArea(UnityEngine.Rendering.Universal.LibTessDotNet.ContourVertex[] vertices)
    // Offset: 0x53001F0
    float SignedArea(::ArrayW<::UnityEngine::Rendering::Universal::LibTessDotNet::ContourVertex> vertices);
    // public System.Void AddContour(UnityEngine.Rendering.Universal.LibTessDotNet.ContourVertex[] vertices)
    // Offset: 0x5300288
    void AddContour(::ArrayW<::UnityEngine::Rendering::Universal::LibTessDotNet::ContourVertex> vertices);
    // public System.Void AddContour(UnityEngine.Rendering.Universal.LibTessDotNet.ContourVertex[] vertices, UnityEngine.Rendering.Universal.LibTessDotNet.ContourOrientation forceOrientation)
    // Offset: 0x5300290
    void AddContour(::ArrayW<::UnityEngine::Rendering::Universal::LibTessDotNet::ContourVertex> vertices, ::UnityEngine::Rendering::Universal::LibTessDotNet::ContourOrientation forceOrientation);
    // public System.Void Tessellate(UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule windingRule, UnityEngine.Rendering.Universal.LibTessDotNet.ElementType elementType, System.Int32 polySize)
    // Offset: 0x5300478
    void Tessellate(::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule windingRule, ::UnityEngine::Rendering::Universal::LibTessDotNet::ElementType elementType, int polySize);
    // public System.Void Tessellate(UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule windingRule, UnityEngine.Rendering.Universal.LibTessDotNet.ElementType elementType, System.Int32 polySize, UnityEngine.Rendering.Universal.LibTessDotNet.CombineCallback combineCallback)
    // Offset: 0x5300480
    void Tessellate(::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule windingRule, ::UnityEngine::Rendering::Universal::LibTessDotNet::ElementType elementType, int polySize, ::UnityEngine::Rendering::Universal::LibTessDotNet::CombineCallback* combineCallback);
  }; // UnityEngine.Rendering.Universal.LibTessDotNet.Tess
  #pragma pack(pop)
  static check_size<sizeof(Tess), 153 + sizeof(bool)> __UnityEngine_Rendering_Universal_LibTessDotNet_TessSizeCheck;
  static_assert(sizeof(Tess) == 0x9A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::RegionBelow
// Il2CppName: RegionBelow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::RegionBelow)> {
  static const MethodInfo* get() {
    static auto* reg = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "RegionBelow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reg});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::RegionAbove
// Il2CppName: RegionAbove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::RegionAbove)> {
  static const MethodInfo* get() {
    static auto* reg = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "RegionAbove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reg});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::EdgeLeq
// Il2CppName: EdgeLeq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*, ::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::EdgeLeq)> {
  static const MethodInfo* get() {
    static auto* reg1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    static auto* reg2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "EdgeLeq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reg1, reg2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::DeleteRegion
// Il2CppName: DeleteRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::DeleteRegion)> {
  static const MethodInfo* get() {
    static auto* reg = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "DeleteRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reg});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::FixUpperEdge
// Il2CppName: FixUpperEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::FixUpperEdge)> {
  static const MethodInfo* get() {
    static auto* reg = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    static auto* newEdge = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "FixUpperEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reg, newEdge});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::TopLeftRegion
// Il2CppName: TopLeftRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::TopLeftRegion)> {
  static const MethodInfo* get() {
    static auto* reg = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "TopLeftRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reg});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::TopRightRegion
// Il2CppName: TopRightRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::TopRightRegion)> {
  static const MethodInfo* get() {
    static auto* reg = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "TopRightRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reg});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::AddRegionBelow
// Il2CppName: AddRegionBelow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion* (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::AddRegionBelow)> {
  static const MethodInfo* get() {
    static auto* regAbove = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    static auto* eNewUp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "AddRegionBelow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{regAbove, eNewUp});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ComputeWinding
// Il2CppName: ComputeWinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ComputeWinding)> {
  static const MethodInfo* get() {
    static auto* reg = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "ComputeWinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reg});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::FinishRegion
// Il2CppName: FinishRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::FinishRegion)> {
  static const MethodInfo* get() {
    static auto* reg = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "FinishRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reg});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::FinishLeftRegions
// Il2CppName: FinishLeftRegions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*, ::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::FinishLeftRegions)> {
  static const MethodInfo* get() {
    static auto* regFirst = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    static auto* regLast = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "FinishLeftRegions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{regFirst, regLast});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::AddRightEdges
// Il2CppName: AddRightEdges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*, bool)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::AddRightEdges)> {
  static const MethodInfo* get() {
    static auto* regUp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    static auto* eFirst = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    static auto* eLast = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    static auto* eTopLeft = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    static auto* cleanUp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "AddRightEdges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{regUp, eFirst, eLast, eTopLeft, cleanUp});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::SpliceMergeVertices
// Il2CppName: SpliceMergeVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::SpliceMergeVertices)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "SpliceMergeVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::VertexWeights
// Il2CppName: VertexWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*, ByRef<float>, ByRef<float>)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::VertexWeights)> {
  static const MethodInfo* get() {
    static auto* isect = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Vertex")->byval_arg;
    static auto* org = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Vertex")->byval_arg;
    static auto* dst = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Vertex")->byval_arg;
    static auto* w0 = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* w1 = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "VertexWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isect, org, dst, w0, w1});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::GetIntersectData
// Il2CppName: GetIntersectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::GetIntersectData)> {
  static const MethodInfo* get() {
    static auto* isect = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Vertex")->byval_arg;
    static auto* orgUp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Vertex")->byval_arg;
    static auto* dstUp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Vertex")->byval_arg;
    static auto* orgLo = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Vertex")->byval_arg;
    static auto* dstLo = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Vertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "GetIntersectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isect, orgUp, dstUp, orgLo, dstLo});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::CheckForRightSplice
// Il2CppName: CheckForRightSplice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::CheckForRightSplice)> {
  static const MethodInfo* get() {
    static auto* regUp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "CheckForRightSplice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{regUp});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::CheckForLeftSplice
// Il2CppName: CheckForLeftSplice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::CheckForLeftSplice)> {
  static const MethodInfo* get() {
    static auto* regUp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "CheckForLeftSplice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{regUp});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::CheckForIntersect
// Il2CppName: CheckForIntersect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::CheckForIntersect)> {
  static const MethodInfo* get() {
    static auto* regUp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "CheckForIntersect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{regUp});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::WalkDirtyRegions
// Il2CppName: WalkDirtyRegions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::WalkDirtyRegions)> {
  static const MethodInfo* get() {
    static auto* regUp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "WalkDirtyRegions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{regUp});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ConnectRightVertex
// Il2CppName: ConnectRightVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ConnectRightVertex)> {
  static const MethodInfo* get() {
    static auto* regUp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    static auto* eBottomLeft = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "ConnectRightVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{regUp, eBottomLeft});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ConnectLeftDegenerate
// Il2CppName: ConnectLeftDegenerate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ActiveRegion*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ConnectLeftDegenerate)> {
  static const MethodInfo* get() {
    static auto* regUp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Tess/ActiveRegion")->byval_arg;
    static auto* vEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Vertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "ConnectLeftDegenerate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{regUp, vEvent});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ConnectLeftVertex
// Il2CppName: ConnectLeftVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ConnectLeftVertex)> {
  static const MethodInfo* get() {
    static auto* vEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Vertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "ConnectLeftVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vEvent});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::SweepEvent
// Il2CppName: SweepEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::SweepEvent)> {
  static const MethodInfo* get() {
    static auto* vEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Vertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "SweepEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vEvent});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::AddSentinel
// Il2CppName: AddSentinel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(float, float, float)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::AddSentinel)> {
  static const MethodInfo* get() {
    static auto* smin = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* smax = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "AddSentinel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{smin, smax, t});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::InitEdgeDict
// Il2CppName: InitEdgeDict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::InitEdgeDict)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "InitEdgeDict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::DoneEdgeDict
// Il2CppName: DoneEdgeDict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::DoneEdgeDict)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "DoneEdgeDict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::RemoveDegenerateEdges
// Il2CppName: RemoveDegenerateEdges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::RemoveDegenerateEdges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "RemoveDegenerateEdges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::InitPriorityQ
// Il2CppName: InitPriorityQ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::InitPriorityQ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "InitPriorityQ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::DonePriorityQ
// Il2CppName: DonePriorityQ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::DonePriorityQ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "DonePriorityQ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::RemoveDegenerateFaces
// Il2CppName: RemoveDegenerateFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::RemoveDegenerateFaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "RemoveDegenerateFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ComputeInterior
// Il2CppName: ComputeInterior
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ComputeInterior)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "ComputeInterior", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::get_Normal
// Il2CppName: get_Normal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3 (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::get_Normal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "get_Normal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::set_Normal
// Il2CppName: set_Normal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::set_Normal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Vec3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "set_Normal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::get_Vertices
// Il2CppName: get_Vertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rendering::Universal::LibTessDotNet::ContourVertex> (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::get_Vertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "get_Vertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::get_VertexCount
// Il2CppName: get_VertexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::get_VertexCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "get_VertexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::get_Elements
// Il2CppName: get_Elements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::get_Elements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "get_Elements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::get_ElementCount
// Il2CppName: get_ElementCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::get_ElementCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "get_ElementCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ComputeNormal
// Il2CppName: ComputeNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(ByRef<::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3>)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ComputeNormal)> {
  static const MethodInfo* get() {
    static auto* norm = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Vec3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "ComputeNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{norm});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::CheckOrientation
// Il2CppName: CheckOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::CheckOrientation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "CheckOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ProjectPolygon
// Il2CppName: ProjectPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::ProjectPolygon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "ProjectPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::TessellateMonoRegion
// Il2CppName: TessellateMonoRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Face*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::TessellateMonoRegion)> {
  static const MethodInfo* get() {
    static auto* face = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Face")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "TessellateMonoRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{face});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::TessellateInterior
// Il2CppName: TessellateInterior
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::TessellateInterior)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "TessellateInterior", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::DiscardExterior
// Il2CppName: DiscardExterior
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::DiscardExterior)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "DiscardExterior", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::SetWindingNumber
// Il2CppName: SetWindingNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(int, bool)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::SetWindingNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* keepOnlyBoundary = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "SetWindingNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, keepOnlyBoundary});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::GetNeighbourFace
// Il2CppName: GetNeighbourFace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::GetNeighbourFace)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "GetNeighbourFace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::OutputPolymesh
// Il2CppName: OutputPolymesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::ElementType, int)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::OutputPolymesh)> {
  static const MethodInfo* get() {
    static auto* elementType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "ElementType")->byval_arg;
    static auto* polySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "OutputPolymesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementType, polySize});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::OutputContours
// Il2CppName: OutputContours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::OutputContours)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "OutputContours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::SignedArea
// Il2CppName: SignedArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::ArrayW<::UnityEngine::Rendering::Universal::LibTessDotNet::ContourVertex>)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::SignedArea)> {
  static const MethodInfo* get() {
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "ContourVertex"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "SignedArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::AddContour
// Il2CppName: AddContour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::ArrayW<::UnityEngine::Rendering::Universal::LibTessDotNet::ContourVertex>)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::AddContour)> {
  static const MethodInfo* get() {
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "ContourVertex"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "AddContour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::AddContour
// Il2CppName: AddContour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::ArrayW<::UnityEngine::Rendering::Universal::LibTessDotNet::ContourVertex>, ::UnityEngine::Rendering::Universal::LibTessDotNet::ContourOrientation)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::AddContour)> {
  static const MethodInfo* get() {
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "ContourVertex"), 1)->byval_arg;
    static auto* forceOrientation = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "ContourOrientation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "AddContour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, forceOrientation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::Tessellate
// Il2CppName: Tessellate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule, ::UnityEngine::Rendering::Universal::LibTessDotNet::ElementType, int)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::Tessellate)> {
  static const MethodInfo* get() {
    static auto* windingRule = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "WindingRule")->byval_arg;
    static auto* elementType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "ElementType")->byval_arg;
    static auto* polySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "Tessellate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{windingRule, elementType, polySize});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Tess::Tessellate
// Il2CppName: Tessellate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Tess::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule, ::UnityEngine::Rendering::Universal::LibTessDotNet::ElementType, int, ::UnityEngine::Rendering::Universal::LibTessDotNet::CombineCallback*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Tess::Tessellate)> {
  static const MethodInfo* get() {
    static auto* windingRule = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "WindingRule")->byval_arg;
    static auto* elementType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "ElementType")->byval_arg;
    static auto* polySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* combineCallback = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "CombineCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Tess*), "Tessellate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{windingRule, elementType, polySize, combineCallback});
  }
};
