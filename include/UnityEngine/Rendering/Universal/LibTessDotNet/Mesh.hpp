// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Pooled`1
#include "UnityEngine/Rendering/Universal/LibTessDotNet/MeshUtils_Pooled_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal.LibTessDotNet
namespace UnityEngine::Rendering::Universal::LibTessDotNet {
  // Forward declaring type: Mesh
  class Mesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::LibTessDotNet::Mesh);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::LibTessDotNet::Mesh*, "UnityEngine.Rendering.Universal.LibTessDotNet", "Mesh");
// Type namespace: UnityEngine.Rendering.Universal.LibTessDotNet
namespace UnityEngine::Rendering::Universal::LibTessDotNet {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.LibTessDotNet.Mesh
  // [TokenAttribute] Offset: FFFFFFFF
  class Mesh : public ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Pooled_1<::UnityEngine::Rendering::Universal::LibTessDotNet::Mesh*> {
    public:
    public:
    // UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex _vHead
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex* vHead;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*) == 0x8);
    // UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Face _fHead
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Face* fHead;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Face*) == 0x8);
    // UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge _eHead
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* eHead;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*) == 0x8);
    // UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge _eHeadSym
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* eHeadSym;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*) == 0x8);
    public:
    // Get instance field reference: UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Vertex _vHead
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Vertex*& dyn__vHead();
    // Get instance field reference: UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Face _fHead
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Face*& dyn__fHead();
    // Get instance field reference: UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge _eHead
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*& dyn__eHead();
    // Get instance field reference: UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge _eHeadSym
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*& dyn__eHeadSym();
    // public UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge MakeEdge()
    // Offset: 0x52FB19C
    ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* MakeEdge();
    // public System.Void Splice(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge eOrg, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge eDst)
    // Offset: 0x52FB548
    void Splice(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* eOrg, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* eDst);
    // public System.Void Delete(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge eDel)
    // Offset: 0x52FB818
    void Delete(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* eDel);
    // public UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge AddEdgeVertex(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge eOrg)
    // Offset: 0x52FBA24
    ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* AddEdgeVertex(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* eOrg);
    // public UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge SplitEdge(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge eOrg)
    // Offset: 0x52FBABC
    ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* SplitEdge(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* eOrg);
    // public UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge Connect(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge eOrg, UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Edge eDst)
    // Offset: 0x52FBBB8
    ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* Connect(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* eOrg, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* eDst);
    // public System.Void ZapFace(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Face fZap)
    // Offset: 0x52FBCB4
    void ZapFace(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Face* fZap);
    // public System.Void MergeConvexFaces(System.Int32 maxVertsPerFace)
    // Offset: 0x52FBE10
    void MergeConvexFaces(int maxVertsPerFace);
    // public System.Void Check()
    // Offset: 0x52FBFD4
    void Check();
    // public System.Void .ctor()
    // Offset: 0x52FAD30
    // Implemented from: UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Pooled`1
    // Base method: System.Void Pooled_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Mesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Mesh*, creationType>()));
    }
    // public override System.Void Reset()
    // Offset: 0x52FB04C
    // Implemented from: UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Pooled`1
    // Base method: System.Void Pooled_1::Reset()
    void Reset();
    // public override System.Void OnFree()
    // Offset: 0x52FB094
    // Implemented from: UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils/Pooled`1
    // Base method: System.Void Pooled_1::OnFree()
    void OnFree();
  }; // UnityEngine.Rendering.Universal.LibTessDotNet.Mesh
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::MakeEdge
// Il2CppName: MakeEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* (UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::MakeEdge)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Mesh*), "MakeEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::Splice
// Il2CppName: Splice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::Splice)> {
  static const MethodInfo* get() {
    static auto* eOrg = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    static auto* eDst = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Mesh*), "Splice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eOrg, eDst});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::Delete)> {
  static const MethodInfo* get() {
    static auto* eDel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Mesh*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eDel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::AddEdgeVertex
// Il2CppName: AddEdgeVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* (UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::AddEdgeVertex)> {
  static const MethodInfo* get() {
    static auto* eOrg = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Mesh*), "AddEdgeVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eOrg});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::SplitEdge
// Il2CppName: SplitEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* (UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::SplitEdge)> {
  static const MethodInfo* get() {
    static auto* eOrg = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Mesh*), "SplitEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eOrg});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge* (UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*, ::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Edge*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::Connect)> {
  static const MethodInfo* get() {
    static auto* eOrg = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    static auto* eDst = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Edge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Mesh*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eOrg, eDst});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::ZapFace
// Il2CppName: ZapFace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::*)(::UnityEngine::Rendering::Universal::LibTessDotNet::MeshUtils::Face*)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::ZapFace)> {
  static const MethodInfo* get() {
    static auto* fZap = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "MeshUtils/Face")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Mesh*), "ZapFace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fZap});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::MergeConvexFaces
// Il2CppName: MergeConvexFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::*)(int)>(&UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::MergeConvexFaces)> {
  static const MethodInfo* get() {
    static auto* maxVertsPerFace = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Mesh*), "MergeConvexFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxVertsPerFace});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::Check
// Il2CppName: Check
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::Check)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Mesh*), "Check", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Mesh*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::OnFree
// Il2CppName: OnFree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::Mesh::OnFree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::Mesh*), "OnFree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
