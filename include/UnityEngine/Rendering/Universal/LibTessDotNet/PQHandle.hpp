// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal.LibTessDotNet
namespace UnityEngine::Rendering::Universal::LibTessDotNet {
  // Forward declaring type: PQHandle
  struct PQHandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::LibTessDotNet::PQHandle, "UnityEngine.Rendering.Universal.LibTessDotNet", "PQHandle");
// Type namespace: UnityEngine.Rendering.Universal.LibTessDotNet
namespace UnityEngine::Rendering::Universal::LibTessDotNet {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.LibTessDotNet.PQHandle
  // [TokenAttribute] Offset: FFFFFFFF
  struct PQHandle/*, public ::System::ValueType*/ {
    public:
    public:
    // System.Int32 _handle
    // Size: 0x4
    // Offset: 0x0
    int handle;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: PQHandle
    constexpr PQHandle(int handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return handle;
    }
    // Get static field: static public readonly System.Int32 Invalid
    static int _get_Invalid();
    // Set static field: static public readonly System.Int32 Invalid
    static void _set_Invalid(int value);
    // Get instance field reference: System.Int32 _handle
    [[deprecated("Use field access instead!")]] int& dyn__handle();
    // static private System.Void .cctor()
    // Offset: 0x52FC838
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.LibTessDotNet.PQHandle
  #pragma pack(pop)
  static check_size<sizeof(PQHandle), 0 + sizeof(int)> __UnityEngine_Rendering_Universal_LibTessDotNet_PQHandleSizeCheck;
  static_assert(sizeof(PQHandle) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LibTessDotNet::PQHandle::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::LibTessDotNet::PQHandle::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LibTessDotNet::PQHandle), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
