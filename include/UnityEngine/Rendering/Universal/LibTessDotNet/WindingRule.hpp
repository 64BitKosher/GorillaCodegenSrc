// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal.LibTessDotNet
namespace UnityEngine::Rendering::Universal::LibTessDotNet {
  // Forward declaring type: WindingRule
  struct WindingRule;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule, "UnityEngine.Rendering.Universal.LibTessDotNet", "WindingRule");
// Type namespace: UnityEngine.Rendering.Universal.LibTessDotNet
namespace UnityEngine::Rendering::Universal::LibTessDotNet {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule
  // [TokenAttribute] Offset: FFFFFFFF
  struct WindingRule/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: WindingRule
    constexpr WindingRule(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule EvenOdd
    static constexpr const int EvenOdd = 0;
    // Get static field: static public UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule EvenOdd
    static ::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule _get_EvenOdd();
    // Set static field: static public UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule EvenOdd
    static void _set_EvenOdd(::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule value);
    // static field const value: static public UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule NonZero
    static constexpr const int NonZero = 1;
    // Get static field: static public UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule NonZero
    static ::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule _get_NonZero();
    // Set static field: static public UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule NonZero
    static void _set_NonZero(::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule value);
    // static field const value: static public UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule Positive
    static constexpr const int Positive = 2;
    // Get static field: static public UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule Positive
    static ::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule _get_Positive();
    // Set static field: static public UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule Positive
    static void _set_Positive(::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule value);
    // static field const value: static public UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule Negative
    static constexpr const int Negative = 3;
    // Get static field: static public UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule Negative
    static ::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule _get_Negative();
    // Set static field: static public UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule Negative
    static void _set_Negative(::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule value);
    // static field const value: static public UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule AbsGeqTwo
    static constexpr const int AbsGeqTwo = 4;
    // Get static field: static public UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule AbsGeqTwo
    static ::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule _get_AbsGeqTwo();
    // Set static field: static public UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule AbsGeqTwo
    static void _set_AbsGeqTwo(::UnityEngine::Rendering::Universal::LibTessDotNet::WindingRule value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // UnityEngine.Rendering.Universal.LibTessDotNet.WindingRule
  #pragma pack(pop)
  static check_size<sizeof(WindingRule), 0 + sizeof(int)> __UnityEngine_Rendering_Universal_LibTessDotNet_WindingRuleSizeCheck;
  static_assert(sizeof(WindingRule) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
