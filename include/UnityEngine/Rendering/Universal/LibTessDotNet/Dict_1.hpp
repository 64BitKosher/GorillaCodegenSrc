// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal::LibTessDotNet
namespace UnityEngine::Rendering::Universal::LibTessDotNet {
  // Skipping declaration: Node because it is already included!
  // Skipping declaration: LessOrEqual because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal.LibTessDotNet
namespace UnityEngine::Rendering::Universal::LibTessDotNet {
  // Forward declaring type: Dict`1<TValue>
  template<typename TValue>
  class Dict_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1, "UnityEngine.Rendering.Universal.LibTessDotNet", "Dict`1");
// Type namespace: UnityEngine.Rendering.Universal.LibTessDotNet
namespace UnityEngine::Rendering::Universal::LibTessDotNet {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TValue>
  class Dict_1 : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::Node<TValue>
    class Node;
    // Nested type: ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::LessOrEqual<TValue>
    class LessOrEqual;
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node
    // [TokenAttribute] Offset: FFFFFFFF
    class Node : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = Dict_1<TValue>*;
      static constexpr std::string_view NESTED_NAME = "Node";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // TValue _key
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TValue key;
      // UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node<TValue> _prev
      // Size: 0x8
      // Offset: 0x0
      typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node* prev;
      // Field size check
      static_assert(sizeof(typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node*) == 0x8);
      // UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node<TValue> _next
      // Size: 0x8
      // Offset: 0x0
      typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node* next;
      // Field size check
      static_assert(sizeof(typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node*) == 0x8);
      public:
      // Autogenerated instance field getter
      // Get instance field: TValue _key
      [[deprecated("Use field access instead!")]] TValue& dyn__key() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::Node::dyn__key");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_key"))->offset;
        return *reinterpret_cast<TValue*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node<TValue> _prev
      [[deprecated("Use field access instead!")]] typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node*& dyn__prev() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::Node::dyn__prev");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prev"))->offset;
        return *reinterpret_cast<typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node<TValue> _next
      [[deprecated("Use field access instead!")]] typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node*& dyn__next() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::Node::dyn__next");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_next"))->offset;
        return *reinterpret_cast<typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public TValue get_Key()
      // Offset: 0xFFFFFFFFFFFFFFFF
      TValue get_Key() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::Node::get_Key");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Key", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___internal__method);
      }
      // public UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node<TValue> get_Prev()
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node* get_Prev() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::Node::get_Prev");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Prev", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node*, false>(this, ___internal__method);
      }
      // public UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node<TValue> get_Next()
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node* get_Next() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::Node::get_Next");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Next", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node*, false>(this, ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename Dict_1<TValue>::Node* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::Node::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename Dict_1<TValue>::Node*, creationType>()));
      }
    }; // UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node
    // Could not write size check! Type: UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/LessOrEqual
    // [TokenAttribute] Offset: FFFFFFFF
    class LessOrEqual : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::System::MulticastDelegate {
      public:
      using declaring_type = Dict_1<TValue>*;
      static constexpr std::string_view NESTED_NAME = "LessOrEqual";
      static constexpr bool IS_VALUE_TYPE = false;
      // public System.Void .ctor(System.Object object, System.IntPtr method)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename Dict_1<TValue>::LessOrEqual* New_ctor(::Il2CppObject* object, ::System::IntPtr method) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::LessOrEqual::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename Dict_1<TValue>::LessOrEqual*, creationType>(object, method)));
      }
      // public System.Boolean Invoke(TValue lhs, TValue rhs)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool Invoke(TValue lhs, TValue rhs) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::LessOrEqual::Invoke");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::LessOrEqual*), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, lhs, rhs);
      }
      // public System.IAsyncResult BeginInvoke(TValue lhs, TValue rhs, System.AsyncCallback callback, System.Object object)
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::IAsyncResult* BeginInvoke(TValue lhs, TValue rhs, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::LessOrEqual::BeginInvoke");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::LessOrEqual*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, lhs, rhs, callback, object);
      }
      // public System.Boolean EndInvoke(System.IAsyncResult result)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool EndInvoke(::System::IAsyncResult* result) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::LessOrEqual::EndInvoke");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::LessOrEqual*), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
      }
    }; // UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/LessOrEqual
    // Could not write size check! Type: UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/LessOrEqual is generic, or has no fields that are valid for size checks!
    public:
    // private UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/LessOrEqual<TValue> _leq
    // Size: 0x8
    // Offset: 0x0
    typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::LessOrEqual* leq;
    // Field size check
    static_assert(sizeof(typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::LessOrEqual*) == 0x8);
    // private UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node<TValue> _head
    // Size: 0x8
    // Offset: 0x0
    typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node* head;
    // Field size check
    static_assert(sizeof(typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/LessOrEqual<TValue> _leq
    [[deprecated("Use field access instead!")]] typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::LessOrEqual*& dyn__leq() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::dyn__leq");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leq"))->offset;
      return *reinterpret_cast<typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::LessOrEqual**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node<TValue> _head
    [[deprecated("Use field access instead!")]] typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node*& dyn__head() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::dyn__head");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_head"))->offset;
      return *reinterpret_cast<typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/LessOrEqual<TValue> leq)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Dict_1<TValue>* New_ctor(typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::LessOrEqual* leq) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Dict_1<TValue>*, creationType>(leq)));
    }
    // public UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node<TValue> Insert(TValue key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node* Insert(TValue key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::Insert");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Insert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node*, false>(this, ___internal__method, key);
    }
    // public UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node<TValue> InsertBefore(UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node<TValue> node, TValue key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node* InsertBefore(typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node* node, TValue key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::InsertBefore");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InsertBefore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node*, false>(this, ___internal__method, node, key);
    }
    // public UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node<TValue> Find(TValue key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node* Find(TValue key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::Find");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Find", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node*, false>(this, ___internal__method, key);
    }
    // public UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node<TValue> Min()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node* Min() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::Min");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Min", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node*, false>(this, ___internal__method);
    }
    // public System.Void Remove(UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1/Node<TValue> node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Remove(typename ::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1<TValue>::Node* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LibTessDotNet::Dict_1::Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
    }
  }; // UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1
  // Could not write size check! Type: UnityEngine.Rendering.Universal.LibTessDotNet.Dict`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
