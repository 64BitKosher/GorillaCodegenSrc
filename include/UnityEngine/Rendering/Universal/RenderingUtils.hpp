// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.AttachmentDescriptor
#include "UnityEngine/Rendering/AttachmentDescriptor.hpp"
// Including type: UnityEngine.Rendering.ShaderTagId
#include "UnityEngine/Rendering/ShaderTagId.hpp"
// Including type: UnityEngine.RenderTextureFormat
#include "UnityEngine/RenderTextureFormat.hpp"
// Including type: UnityEngine.Experimental.Rendering.FormatUsage
#include "UnityEngine/Experimental/Rendering/FormatUsage.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Rect
  struct Rect;
  // Skipping declaration: Color because it is already included!
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: RenderTextureDescriptor
  struct RenderTextureDescriptor;
  // Forward declaring type: FilterMode
  struct FilterMode;
  // Forward declaring type: TextureWrapMode
  struct TextureWrapMode;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: GraphicsDeviceType
  struct GraphicsDeviceType;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: RTHandle
  class RTHandle;
  // Skipping declaration: RenderBufferLoadAction because it is already included!
  // Skipping declaration: RenderBufferStoreAction because it is already included!
  // Forward declaring type: ClearFlag
  struct ClearFlag;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
  // Forward declaring type: CullingResults
  struct CullingResults;
  // Forward declaring type: FilteringSettings
  struct FilteringSettings;
  // Forward declaring type: SortingCriteria
  struct SortingCriteria;
  // Forward declaring type: ScaleFunc
  class ScaleFunc;
  // Forward declaring type: DrawingSettings
  struct DrawingSettings;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: RenderingData
  struct RenderingData;
  // Forward declaring type: CameraData
  struct CameraData;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: RenderingUtils
  class RenderingUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::RenderingUtils);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::RenderingUtils*, "UnityEngine.Rendering.Universal", "RenderingUtils");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.RenderingUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class RenderingUtils : public ::Il2CppObject {
    public:
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> m_LegacyShaderPassNames
    static ::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* _get_m_LegacyShaderPassNames();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> m_LegacyShaderPassNames
    static void _set_m_LegacyShaderPassNames(::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* value);
    // Get static field: static private UnityEngine.Rendering.AttachmentDescriptor s_EmptyAttachment
    static ::UnityEngine::Rendering::AttachmentDescriptor _get_s_EmptyAttachment();
    // Set static field: static private UnityEngine.Rendering.AttachmentDescriptor s_EmptyAttachment
    static void _set_s_EmptyAttachment(::UnityEngine::Rendering::AttachmentDescriptor value);
    // Get static field: static private UnityEngine.Mesh s_FullscreenMesh
    static ::UnityEngine::Mesh* _get_s_FullscreenMesh();
    // Set static field: static private UnityEngine.Mesh s_FullscreenMesh
    static void _set_s_FullscreenMesh(::UnityEngine::Mesh* value);
    // Get static field: static private UnityEngine.Material s_ErrorMaterial
    static ::UnityEngine::Material* _get_s_ErrorMaterial();
    // Set static field: static private UnityEngine.Material s_ErrorMaterial
    static void _set_s_ErrorMaterial(::UnityEngine::Material* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.RenderTextureFormat,System.Boolean> m_RenderTextureFormatSupport
    static ::System::Collections::Generic::Dictionary_2<::UnityEngine::RenderTextureFormat, bool>* _get_m_RenderTextureFormatSupport();
    // Set static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.RenderTextureFormat,System.Boolean> m_RenderTextureFormatSupport
    static void _set_m_RenderTextureFormatSupport(::System::Collections::Generic::Dictionary_2<::UnityEngine::RenderTextureFormat, bool>* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Experimental.Rendering.GraphicsFormat,System.Collections.Generic.Dictionary`2<UnityEngine.Experimental.Rendering.FormatUsage,System.Boolean>> m_GraphicsFormatSupport
    static ::System::Collections::Generic::Dictionary_2<::UnityEngine::Experimental::Rendering::GraphicsFormat, ::System::Collections::Generic::Dictionary_2<::UnityEngine::Experimental::Rendering::FormatUsage, bool>*>* _get_m_GraphicsFormatSupport();
    // Set static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Experimental.Rendering.GraphicsFormat,System.Collections.Generic.Dictionary`2<UnityEngine.Experimental.Rendering.FormatUsage,System.Boolean>> m_GraphicsFormatSupport
    static void _set_m_GraphicsFormatSupport(::System::Collections::Generic::Dictionary_2<::UnityEngine::Experimental::Rendering::GraphicsFormat, ::System::Collections::Generic::Dictionary_2<::UnityEngine::Experimental::Rendering::FormatUsage, bool>*>* value);
    // static UnityEngine.Rendering.AttachmentDescriptor get_emptyAttachment()
    // Offset: 0x52D8BA8
    static ::UnityEngine::Rendering::AttachmentDescriptor get_emptyAttachment();
    // static public UnityEngine.Mesh get_fullscreenMesh()
    // Offset: 0x52D8C0C
    static ::UnityEngine::Mesh* get_fullscreenMesh();
    // static System.Boolean get_useStructuredBuffer()
    // Offset: 0x52D91D4
    static bool get_useStructuredBuffer();
    // static System.Boolean SupportsLightLayers(UnityEngine.Rendering.GraphicsDeviceType type)
    // Offset: 0x52D91DC
    static bool SupportsLightLayers(::UnityEngine::Rendering::GraphicsDeviceType type);
    // static private UnityEngine.Material get_errorMaterial()
    // Offset: 0x52D91E8
    static ::UnityEngine::Material* get_errorMaterial();
    // static public System.Void SetViewAndProjectionMatrices(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Matrix4x4 viewMatrix, UnityEngine.Matrix4x4 projectionMatrix, System.Boolean setInverseMatrices)
    // Offset: 0x52D9380
    static void SetViewAndProjectionMatrices(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Matrix4x4 viewMatrix, ::UnityEngine::Matrix4x4 projectionMatrix, bool setInverseMatrices);
    // static System.Void SetScaleBiasRt(UnityEngine.Rendering.CommandBuffer cmd, in UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52D9634
    static void SetScaleBiasRt(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // static System.Void Blit(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle source, UnityEngine.Rect viewport, UnityEngine.Rendering.RTHandle destination, UnityEngine.Rendering.RenderBufferLoadAction loadAction, UnityEngine.Rendering.RenderBufferStoreAction storeAction, UnityEngine.Rendering.ClearFlag clearFlag, UnityEngine.Color clearColor, UnityEngine.Material material, System.Int32 passIndex)
    // Offset: 0x52D97A0
    static void Blit(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RTHandle* source, ::UnityEngine::Rect viewport, ::UnityEngine::Rendering::RTHandle* destination, ::UnityEngine::Rendering::RenderBufferLoadAction loadAction, ::UnityEngine::Rendering::RenderBufferStoreAction storeAction, ::UnityEngine::Rendering::ClearFlag clearFlag, ::UnityEngine::Color clearColor, ::UnityEngine::Material* material, int passIndex);
    // static System.Void Blit(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle source, UnityEngine.Rect viewport, UnityEngine.Rendering.RTHandle destinationColor, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RTHandle destinationDepthStencil, UnityEngine.Rendering.RenderBufferLoadAction depthStencilLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStencilStoreAction, UnityEngine.Rendering.ClearFlag clearFlag, UnityEngine.Color clearColor, UnityEngine.Material material, System.Int32 passIndex)
    // Offset: 0x52D9964
    static void Blit(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RTHandle* source, ::UnityEngine::Rect viewport, ::UnityEngine::Rendering::RTHandle* destinationColor, ::UnityEngine::Rendering::RenderBufferLoadAction colorLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction colorStoreAction, ::UnityEngine::Rendering::RTHandle* destinationDepthStencil, ::UnityEngine::Rendering::RenderBufferLoadAction depthStencilLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction depthStencilStoreAction, ::UnityEngine::Rendering::ClearFlag clearFlag, ::UnityEngine::Color clearColor, ::UnityEngine::Material* material, int passIndex);
    // static System.Void FinalBlit(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.CameraData cameraData, UnityEngine.Rendering.RTHandle source, UnityEngine.Rendering.RTHandle destination, UnityEngine.Rendering.RenderBufferLoadAction loadAction, UnityEngine.Rendering.RenderBufferStoreAction storeAction, UnityEngine.Material material, System.Int32 passIndex)
    // Offset: 0x52D9B68
    static void FinalBlit(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, ::UnityEngine::Rendering::RTHandle* source, ::UnityEngine::Rendering::RTHandle* destination, ::UnityEngine::Rendering::RenderBufferLoadAction loadAction, ::UnityEngine::Rendering::RenderBufferStoreAction storeAction, ::UnityEngine::Material* material, int passIndex);
    // static System.Void RenderObjectsWithError(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.CullingResults cullResults, UnityEngine.Camera camera, UnityEngine.Rendering.FilteringSettings filterSettings, UnityEngine.Rendering.SortingCriteria sortFlags)
    // Offset: 0x52D9FDC
    static void RenderObjectsWithError(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::CullingResults> cullResults, ::UnityEngine::Camera* camera, ::UnityEngine::Rendering::FilteringSettings filterSettings, ::UnityEngine::Rendering::SortingCriteria sortFlags);
    // static System.Void ClearSystemInfoCache()
    // Offset: 0x52DA26C
    static void ClearSystemInfoCache();
    // static public System.Boolean SupportsRenderTextureFormat(UnityEngine.RenderTextureFormat format)
    // Offset: 0x52DA310
    static bool SupportsRenderTextureFormat(::UnityEngine::RenderTextureFormat format);
    // static public System.Boolean SupportsGraphicsFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.FormatUsage usage)
    // Offset: 0x52D7A60
    static bool SupportsGraphicsFormat(::UnityEngine::Experimental::Rendering::GraphicsFormat format, ::UnityEngine::Experimental::Rendering::FormatUsage usage);
    // static System.Int32 GetLastValidColorBufferIndex(UnityEngine.Rendering.RenderTargetIdentifier[] colorBuffers)
    // Offset: 0x52DA408
    static int GetLastValidColorBufferIndex(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> colorBuffers);
    // static System.UInt32 GetValidColorBufferCount(UnityEngine.Rendering.RenderTargetIdentifier[] colorBuffers)
    // Offset: 0x52DA4B8
    static uint GetValidColorBufferCount(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> colorBuffers);
    // static System.UInt32 GetValidColorBufferCount(UnityEngine.Rendering.RTHandle[] colorBuffers)
    // Offset: 0x52DA588
    static uint GetValidColorBufferCount(::ArrayW<::UnityEngine::Rendering::RTHandle*> colorBuffers);
    // static System.Boolean IsMRT(UnityEngine.Rendering.RenderTargetIdentifier[] colorBuffers)
    // Offset: 0x52DA660
    static bool IsMRT(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> colorBuffers);
    // static System.Boolean IsMRT(UnityEngine.Rendering.RTHandle[] colorBuffers)
    // Offset: 0x52DA6C0
    static bool IsMRT(::ArrayW<::UnityEngine::Rendering::RTHandle*> colorBuffers);
    // static System.Boolean Contains(UnityEngine.Rendering.RenderTargetIdentifier[] source, UnityEngine.Rendering.RenderTargetIdentifier value)
    // Offset: 0x52DA720
    static bool Contains(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> source, ::UnityEngine::Rendering::RenderTargetIdentifier value);
    // static System.Int32 IndexOf(UnityEngine.Rendering.RenderTargetIdentifier[] source, UnityEngine.Rendering.RenderTargetIdentifier value)
    // Offset: 0x52DA7D0
    static int IndexOf(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> source, ::UnityEngine::Rendering::RenderTargetIdentifier value);
    // static System.UInt32 CountDistinct(UnityEngine.Rendering.RenderTargetIdentifier[] source, UnityEngine.Rendering.RenderTargetIdentifier value)
    // Offset: 0x52DA878
    static uint CountDistinct(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> source, ::UnityEngine::Rendering::RenderTargetIdentifier value);
    // static System.Int32 LastValid(UnityEngine.Rendering.RenderTargetIdentifier[] source)
    // Offset: 0x52DA998
    static int LastValid(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> source);
    // static System.Boolean Contains(UnityEngine.Rendering.ClearFlag a, UnityEngine.Rendering.ClearFlag b)
    // Offset: 0x52DAA48
    static bool Contains(::UnityEngine::Rendering::ClearFlag a, ::UnityEngine::Rendering::ClearFlag b);
    // static System.Boolean SequenceEqual(UnityEngine.Rendering.RenderTargetIdentifier[] left, UnityEngine.Rendering.RenderTargetIdentifier[] right)
    // Offset: 0x52DAA54
    static bool SequenceEqual(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> left, ::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> right);
    // static System.Boolean MultisampleDepthResolveSupported()
    // Offset: 0x52DAB40
    static bool MultisampleDepthResolveSupported();
    // static System.Boolean RTHandleNeedsReAlloc(UnityEngine.Rendering.RTHandle handle, in UnityEngine.RenderTextureDescriptor descriptor, UnityEngine.FilterMode filterMode, UnityEngine.TextureWrapMode wrapMode, System.Boolean isShadowMap, System.Int32 anisoLevel, System.Single mipMapBias, System.String name, System.Boolean scaled)
    // Offset: 0x52DABD8
    static bool RTHandleNeedsReAlloc(::UnityEngine::Rendering::RTHandle* handle, ByRef<::UnityEngine::RenderTextureDescriptor> descriptor, ::UnityEngine::FilterMode filterMode, ::UnityEngine::TextureWrapMode wrapMode, bool isShadowMap, int anisoLevel, float mipMapBias, ::StringW name, bool scaled);
    // static UnityEngine.Rendering.RenderTargetIdentifier GetCameraTargetIdentifier(ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52DB16C
    static ::UnityEngine::Rendering::RenderTargetIdentifier GetCameraTargetIdentifier(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // static public System.Boolean ReAllocateIfNeeded(ref UnityEngine.Rendering.RTHandle handle, in UnityEngine.RenderTextureDescriptor descriptor, UnityEngine.FilterMode filterMode, UnityEngine.TextureWrapMode wrapMode, System.Boolean isShadowMap, System.Int32 anisoLevel, System.Single mipMapBias, System.String name)
    // Offset: 0x52D6014
    static bool ReAllocateIfNeeded(ByRef<::UnityEngine::Rendering::RTHandle*> handle, ByRef<::UnityEngine::RenderTextureDescriptor> descriptor, ::UnityEngine::FilterMode filterMode, ::UnityEngine::TextureWrapMode wrapMode, bool isShadowMap, int anisoLevel, float mipMapBias, ::StringW name);
    // static public System.Boolean ReAllocateIfNeeded(ref UnityEngine.Rendering.RTHandle handle, UnityEngine.Vector2 scaleFactor, in UnityEngine.RenderTextureDescriptor descriptor, UnityEngine.FilterMode filterMode, UnityEngine.TextureWrapMode wrapMode, System.Boolean isShadowMap, System.Int32 anisoLevel, System.Single mipMapBias, System.String name)
    // Offset: 0x52DB2DC
    static bool ReAllocateIfNeeded(ByRef<::UnityEngine::Rendering::RTHandle*> handle, ::UnityEngine::Vector2 scaleFactor, ByRef<::UnityEngine::RenderTextureDescriptor> descriptor, ::UnityEngine::FilterMode filterMode, ::UnityEngine::TextureWrapMode wrapMode, bool isShadowMap, int anisoLevel, float mipMapBias, ::StringW name);
    // static public System.Boolean ReAllocateIfNeeded(ref UnityEngine.Rendering.RTHandle handle, UnityEngine.Rendering.ScaleFunc scaleFunc, in UnityEngine.RenderTextureDescriptor descriptor, UnityEngine.FilterMode filterMode, UnityEngine.TextureWrapMode wrapMode, System.Boolean isShadowMap, System.Int32 anisoLevel, System.Single mipMapBias, System.String name)
    // Offset: 0x52DB464
    static bool ReAllocateIfNeeded(ByRef<::UnityEngine::Rendering::RTHandle*> handle, ::UnityEngine::Rendering::ScaleFunc* scaleFunc, ByRef<::UnityEngine::RenderTextureDescriptor> descriptor, ::UnityEngine::FilterMode filterMode, ::UnityEngine::TextureWrapMode wrapMode, bool isShadowMap, int anisoLevel, float mipMapBias, ::StringW name);
    // static public UnityEngine.Rendering.DrawingSettings CreateDrawingSettings(UnityEngine.Rendering.ShaderTagId shaderTagId, ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.SortingCriteria sortingCriteria)
    // Offset: 0x52DB608
    static ::UnityEngine::Rendering::DrawingSettings CreateDrawingSettings(::UnityEngine::Rendering::ShaderTagId shaderTagId, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::UnityEngine::Rendering::SortingCriteria sortingCriteria);
    // static public UnityEngine.Rendering.DrawingSettings CreateDrawingSettings(System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> shaderTagIdList, ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.SortingCriteria sortingCriteria)
    // Offset: 0x52DB734
    static ::UnityEngine::Rendering::DrawingSettings CreateDrawingSettings(::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* shaderTagIdList, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::UnityEngine::Rendering::SortingCriteria sortingCriteria);
    // static private System.Void .cctor()
    // Offset: 0x52DB924
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.RenderingUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::get_emptyAttachment
// Il2CppName: get_emptyAttachment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::AttachmentDescriptor (*)()>(&UnityEngine::Rendering::Universal::RenderingUtils::get_emptyAttachment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "get_emptyAttachment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::get_fullscreenMesh
// Il2CppName: get_fullscreenMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (*)()>(&UnityEngine::Rendering::Universal::RenderingUtils::get_fullscreenMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "get_fullscreenMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::get_useStructuredBuffer
// Il2CppName: get_useStructuredBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::Rendering::Universal::RenderingUtils::get_useStructuredBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "get_useStructuredBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::SupportsLightLayers
// Il2CppName: SupportsLightLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::GraphicsDeviceType)>(&UnityEngine::Rendering::Universal::RenderingUtils::SupportsLightLayers)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "GraphicsDeviceType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "SupportsLightLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::get_errorMaterial
// Il2CppName: get_errorMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (*)()>(&UnityEngine::Rendering::Universal::RenderingUtils::get_errorMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "get_errorMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::SetViewAndProjectionMatrices
// Il2CppName: SetViewAndProjectionMatrices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Matrix4x4, ::UnityEngine::Matrix4x4, bool)>(&UnityEngine::Rendering::Universal::RenderingUtils::SetViewAndProjectionMatrices)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* viewMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* projectionMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* setInverseMatrices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "SetViewAndProjectionMatrices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, viewMatrix, projectionMatrix, setInverseMatrices});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::SetScaleBiasRt
// Il2CppName: SetScaleBiasRt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::RenderingUtils::SetScaleBiasRt)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "SetScaleBiasRt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rect, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RenderBufferLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction, ::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Color, ::UnityEngine::Material*, int)>(&UnityEngine::Rendering::Universal::RenderingUtils::Blit)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* viewport = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* loadAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferLoadAction")->byval_arg;
    static auto* storeAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* clearFlag = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* passIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, source, viewport, destination, loadAction, storeAction, clearFlag, clearColor, material, passIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rect, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RenderBufferLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RenderBufferLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction, ::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Color, ::UnityEngine::Material*, int)>(&UnityEngine::Rendering::Universal::RenderingUtils::Blit)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* viewport = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* destinationColor = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* colorLoadAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferLoadAction")->byval_arg;
    static auto* colorStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* destinationDepthStencil = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* depthStencilLoadAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferLoadAction")->byval_arg;
    static auto* depthStencilStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* clearFlag = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* passIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, source, viewport, destinationColor, colorLoadAction, colorStoreAction, destinationDepthStencil, depthStencilLoadAction, depthStencilStoreAction, clearFlag, clearColor, material, passIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::FinalBlit
// Il2CppName: FinalBlit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::CameraData>, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RenderBufferLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction, ::UnityEngine::Material*, int)>(&UnityEngine::Rendering::Universal::RenderingUtils::FinalBlit)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* loadAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferLoadAction")->byval_arg;
    static auto* storeAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* passIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "FinalBlit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cameraData, source, destination, loadAction, storeAction, material, passIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::RenderObjectsWithError
// Il2CppName: RenderObjectsWithError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::CullingResults>, ::UnityEngine::Camera*, ::UnityEngine::Rendering::FilteringSettings, ::UnityEngine::Rendering::SortingCriteria)>(&UnityEngine::Rendering::Universal::RenderingUtils::RenderObjectsWithError)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* cullResults = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CullingResults")->this_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* filterSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "FilteringSettings")->byval_arg;
    static auto* sortFlags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SortingCriteria")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "RenderObjectsWithError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, cullResults, camera, filterSettings, sortFlags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::ClearSystemInfoCache
// Il2CppName: ClearSystemInfoCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::RenderingUtils::ClearSystemInfoCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "ClearSystemInfoCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::SupportsRenderTextureFormat
// Il2CppName: SupportsRenderTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::RenderTextureFormat)>(&UnityEngine::Rendering::Universal::RenderingUtils::SupportsRenderTextureFormat)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "SupportsRenderTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::SupportsGraphicsFormat
// Il2CppName: SupportsGraphicsFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::Experimental::Rendering::FormatUsage)>(&UnityEngine::Rendering::Universal::RenderingUtils::SupportsGraphicsFormat)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* usage = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "FormatUsage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "SupportsGraphicsFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, usage});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::GetLastValidColorBufferIndex
// Il2CppName: GetLastValidColorBufferIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>)>(&UnityEngine::Rendering::Universal::RenderingUtils::GetLastValidColorBufferIndex)> {
  static const MethodInfo* get() {
    static auto* colorBuffers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "GetLastValidColorBufferIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorBuffers});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::GetValidColorBufferCount
// Il2CppName: GetValidColorBufferCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>)>(&UnityEngine::Rendering::Universal::RenderingUtils::GetValidColorBufferCount)> {
  static const MethodInfo* get() {
    static auto* colorBuffers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "GetValidColorBufferCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorBuffers});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::GetValidColorBufferCount
// Il2CppName: GetValidColorBufferCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::ArrayW<::UnityEngine::Rendering::RTHandle*>)>(&UnityEngine::Rendering::Universal::RenderingUtils::GetValidColorBufferCount)> {
  static const MethodInfo* get() {
    static auto* colorBuffers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "GetValidColorBufferCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorBuffers});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::IsMRT
// Il2CppName: IsMRT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>)>(&UnityEngine::Rendering::Universal::RenderingUtils::IsMRT)> {
  static const MethodInfo* get() {
    static auto* colorBuffers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "IsMRT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorBuffers});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::IsMRT
// Il2CppName: IsMRT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::UnityEngine::Rendering::RTHandle*>)>(&UnityEngine::Rendering::Universal::RenderingUtils::IsMRT)> {
  static const MethodInfo* get() {
    static auto* colorBuffers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "IsMRT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorBuffers});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>, ::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Rendering::Universal::RenderingUtils::Contains)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>, ::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Rendering::Universal::RenderingUtils::IndexOf)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::CountDistinct
// Il2CppName: CountDistinct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>, ::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Rendering::Universal::RenderingUtils::CountDistinct)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "CountDistinct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::LastValid
// Il2CppName: LastValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>)>(&UnityEngine::Rendering::Universal::RenderingUtils::LastValid)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "LastValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Rendering::ClearFlag)>(&UnityEngine::Rendering::Universal::RenderingUtils::Contains)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::SequenceEqual
// Il2CppName: SequenceEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>, ::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>)>(&UnityEngine::Rendering::Universal::RenderingUtils::SequenceEqual)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier"), 1)->byval_arg;
    static auto* right = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "SequenceEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::MultisampleDepthResolveSupported
// Il2CppName: MultisampleDepthResolveSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::Rendering::Universal::RenderingUtils::MultisampleDepthResolveSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "MultisampleDepthResolveSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::RTHandleNeedsReAlloc
// Il2CppName: RTHandleNeedsReAlloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::RTHandle*, ByRef<::UnityEngine::RenderTextureDescriptor>, ::UnityEngine::FilterMode, ::UnityEngine::TextureWrapMode, bool, int, float, ::StringW, bool)>(&UnityEngine::Rendering::Universal::RenderingUtils::RTHandleNeedsReAlloc)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* descriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->this_arg;
    static auto* filterMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    static auto* wrapMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    static auto* isShadowMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* anisoLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mipMapBias = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* scaled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "RTHandleNeedsReAlloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, descriptor, filterMode, wrapMode, isShadowMap, anisoLevel, mipMapBias, name, scaled});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::GetCameraTargetIdentifier
// Il2CppName: GetCameraTargetIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderTargetIdentifier (*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::RenderingUtils::GetCameraTargetIdentifier)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "GetCameraTargetIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::ReAllocateIfNeeded
// Il2CppName: ReAllocateIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Rendering::RTHandle*>, ByRef<::UnityEngine::RenderTextureDescriptor>, ::UnityEngine::FilterMode, ::UnityEngine::TextureWrapMode, bool, int, float, ::StringW)>(&UnityEngine::Rendering::Universal::RenderingUtils::ReAllocateIfNeeded)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->this_arg;
    static auto* descriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->this_arg;
    static auto* filterMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    static auto* wrapMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    static auto* isShadowMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* anisoLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mipMapBias = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "ReAllocateIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, descriptor, filterMode, wrapMode, isShadowMap, anisoLevel, mipMapBias, name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::ReAllocateIfNeeded
// Il2CppName: ReAllocateIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Rendering::RTHandle*>, ::UnityEngine::Vector2, ByRef<::UnityEngine::RenderTextureDescriptor>, ::UnityEngine::FilterMode, ::UnityEngine::TextureWrapMode, bool, int, float, ::StringW)>(&UnityEngine::Rendering::Universal::RenderingUtils::ReAllocateIfNeeded)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->this_arg;
    static auto* scaleFactor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* descriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->this_arg;
    static auto* filterMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    static auto* wrapMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    static auto* isShadowMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* anisoLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mipMapBias = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "ReAllocateIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, scaleFactor, descriptor, filterMode, wrapMode, isShadowMap, anisoLevel, mipMapBias, name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::ReAllocateIfNeeded
// Il2CppName: ReAllocateIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Rendering::RTHandle*>, ::UnityEngine::Rendering::ScaleFunc*, ByRef<::UnityEngine::RenderTextureDescriptor>, ::UnityEngine::FilterMode, ::UnityEngine::TextureWrapMode, bool, int, float, ::StringW)>(&UnityEngine::Rendering::Universal::RenderingUtils::ReAllocateIfNeeded)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->this_arg;
    static auto* scaleFunc = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScaleFunc")->byval_arg;
    static auto* descriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->this_arg;
    static auto* filterMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    static auto* wrapMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    static auto* isShadowMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* anisoLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mipMapBias = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "ReAllocateIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, scaleFunc, descriptor, filterMode, wrapMode, isShadowMap, anisoLevel, mipMapBias, name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::CreateDrawingSettings
// Il2CppName: CreateDrawingSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::DrawingSettings (*)(::UnityEngine::Rendering::ShaderTagId, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Rendering::SortingCriteria)>(&UnityEngine::Rendering::Universal::RenderingUtils::CreateDrawingSettings)> {
  static const MethodInfo* get() {
    static auto* shaderTagId = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShaderTagId")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* sortingCriteria = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SortingCriteria")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "CreateDrawingSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderTagId, renderingData, sortingCriteria});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::CreateDrawingSettings
// Il2CppName: CreateDrawingSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::DrawingSettings (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Rendering::SortingCriteria)>(&UnityEngine::Rendering::Universal::RenderingUtils::CreateDrawingSettings)> {
  static const MethodInfo* get() {
    static auto* shaderTagIdList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShaderTagId")})->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* sortingCriteria = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SortingCriteria")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), "CreateDrawingSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderTagIdList, renderingData, sortingCriteria});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderingUtils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::RenderingUtils::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderingUtils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
