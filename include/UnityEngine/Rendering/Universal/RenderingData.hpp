// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Rendering.CullingResults
#include "UnityEngine/Rendering/CullingResults.hpp"
// Including type: UnityEngine.Rendering.Universal.CameraData
#include "UnityEngine/Rendering/Universal/CameraData.hpp"
// Including type: UnityEngine.Rendering.Universal.LightData
#include "UnityEngine/Rendering/Universal/LightData.hpp"
// Including type: UnityEngine.Rendering.Universal.ShadowData
#include "UnityEngine/Rendering/Universal/ShadowData.hpp"
// Including type: UnityEngine.Rendering.Universal.PostProcessingData
#include "UnityEngine/Rendering/Universal/PostProcessingData.hpp"
// Including type: UnityEngine.Rendering.PerObjectData
#include "UnityEngine/Rendering/PerObjectData.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: RenderingData
  struct RenderingData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::RenderingData, "UnityEngine.Rendering.Universal", "RenderingData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.RenderingData
  // [TokenAttribute] Offset: FFFFFFFF
  struct RenderingData/*, public ::System::ValueType*/ {
    public:
    public:
    // UnityEngine.Rendering.CommandBuffer commandBuffer
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Rendering::CommandBuffer* commandBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CommandBuffer*) == 0x8);
    // public UnityEngine.Rendering.CullingResults cullResults
    // Size: 0x10
    // Offset: 0x8
    ::UnityEngine::Rendering::CullingResults cullResults;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CullingResults) == 0x10);
    // public UnityEngine.Rendering.Universal.CameraData cameraData
    // Size: 0x210
    // Offset: 0x18
    ::UnityEngine::Rendering::Universal::CameraData cameraData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::CameraData) == 0x210);
    // public UnityEngine.Rendering.Universal.LightData lightData
    // Size: 0xFFFFFFFF
    // Offset: 0x228
    ::UnityEngine::Rendering::Universal::LightData lightData;
    // public UnityEngine.Rendering.Universal.ShadowData shadowData
    // Size: 0x4A
    // Offset: 0x250
    ::UnityEngine::Rendering::Universal::ShadowData shadowData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ShadowData) == 0x4A);
    // public UnityEngine.Rendering.Universal.PostProcessingData postProcessingData
    // Size: 0x9
    // Offset: 0x2A0
    ::UnityEngine::Rendering::Universal::PostProcessingData postProcessingData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::PostProcessingData) == 0x9);
    // public System.Boolean supportsDynamicBatching
    // Size: 0x1
    // Offset: 0x2AC
    bool supportsDynamicBatching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.Rendering.PerObjectData perObjectData
    // Size: 0x4
    // Offset: 0x2B0
    ::UnityEngine::Rendering::PerObjectData perObjectData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::PerObjectData) == 0x4);
    // public System.Boolean postProcessingEnabled
    // Size: 0x1
    // Offset: 0x2B4
    bool postProcessingEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: RenderingData
    constexpr RenderingData(::UnityEngine::Rendering::CommandBuffer* commandBuffer_ = {}, ::UnityEngine::Rendering::CullingResults cullResults_ = {}, ::UnityEngine::Rendering::Universal::CameraData cameraData_ = {}, ::UnityEngine::Rendering::Universal::LightData lightData_ = {}, ::UnityEngine::Rendering::Universal::ShadowData shadowData_ = {}, ::UnityEngine::Rendering::Universal::PostProcessingData postProcessingData_ = {}, bool supportsDynamicBatching_ = {}, ::UnityEngine::Rendering::PerObjectData perObjectData_ = {}, bool postProcessingEnabled_ = {}) noexcept : commandBuffer{commandBuffer_}, cullResults{cullResults_}, cameraData{cameraData_}, lightData{lightData_}, shadowData{shadowData_}, postProcessingData{postProcessingData_}, supportsDynamicBatching{supportsDynamicBatching_}, perObjectData{perObjectData_}, postProcessingEnabled{postProcessingEnabled_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: UnityEngine.Rendering.CommandBuffer commandBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& dyn_commandBuffer();
    // Get instance field reference: public UnityEngine.Rendering.CullingResults cullResults
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CullingResults& dyn_cullResults();
    // Get instance field reference: public UnityEngine.Rendering.Universal.CameraData cameraData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::CameraData& dyn_cameraData();
    // Get instance field reference: public UnityEngine.Rendering.Universal.LightData lightData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LightData& dyn_lightData();
    // Get instance field reference: public UnityEngine.Rendering.Universal.ShadowData shadowData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ShadowData& dyn_shadowData();
    // Get instance field reference: public UnityEngine.Rendering.Universal.PostProcessingData postProcessingData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::PostProcessingData& dyn_postProcessingData();
    // Get instance field reference: public System.Boolean supportsDynamicBatching
    [[deprecated("Use field access instead!")]] bool& dyn_supportsDynamicBatching();
    // Get instance field reference: public UnityEngine.Rendering.PerObjectData perObjectData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::PerObjectData& dyn_perObjectData();
    // Get instance field reference: public System.Boolean postProcessingEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_postProcessingEnabled();
  }; // UnityEngine.Rendering.Universal.RenderingData
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
