// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Jobs.JobHandle
#include "Unity/Jobs/JobHandle.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Jobs
namespace UnityEngine::Jobs {
  // Forward declaring type: TransformAccessArray
  struct TransformAccessArray;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalProjector
  class DecalProjector;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalChunk
  class DecalChunk;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::DecalChunk);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DecalChunk*, "UnityEngine.Rendering.Universal", "DecalChunk");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.DecalChunk
  // [TokenAttribute] Offset: FFFFFFFF
  class DecalChunk : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Int32 <count>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <capacity>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int capacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Unity.Jobs.JobHandle <currentJobHandle>k__BackingField
    // Size: 0xC
    // Offset: 0x18
    ::Unity::Jobs::JobHandle currentJobHandle;
    // Field size check
    static_assert(sizeof(::Unity::Jobs::JobHandle) == 0xC);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Int32 <count>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$count$k__BackingField();
    // Get instance field reference: private System.Int32 <capacity>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$capacity$k__BackingField();
    // Get instance field reference: private Unity.Jobs.JobHandle <currentJobHandle>k__BackingField
    [[deprecated("Use field access instead!")]] ::Unity::Jobs::JobHandle& dyn_$currentJobHandle$k__BackingField();
    // public System.Int32 get_count()
    // Offset: 0x52A2B50
    int get_count();
    // protected System.Void set_count(System.Int32 value)
    // Offset: 0x52A2B58
    void set_count(int value);
    // public System.Int32 get_capacity()
    // Offset: 0x52A2B60
    int get_capacity();
    // protected System.Void set_capacity(System.Int32 value)
    // Offset: 0x52A2B68
    void set_capacity(int value);
    // public Unity.Jobs.JobHandle get_currentJobHandle()
    // Offset: 0x52A2B70
    ::Unity::Jobs::JobHandle get_currentJobHandle();
    // public System.Void set_currentJobHandle(Unity.Jobs.JobHandle value)
    // Offset: 0x52A2B7C
    void set_currentJobHandle(::Unity::Jobs::JobHandle value);
    // public System.Void Push()
    // Offset: 0x52A2B84
    void Push();
    // public System.Void RemoveAtSwapBack(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveAtSwapBack(int index);
    // public System.Void SetCapacity(System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetCapacity(int capacity);
    // public System.Void Dispose()
    // Offset: 0x52A2B94
    void Dispose();
    // protected System.Void ResizeNativeArray(ref UnityEngine.Jobs.TransformAccessArray array, UnityEngine.Rendering.Universal.DecalProjector[] decalProjectors, System.Int32 capacity)
    // Offset: 0x52A2B98
    void ResizeNativeArray(ByRef<::UnityEngine::Jobs::TransformAccessArray> array, ::ArrayW<::UnityEngine::Rendering::Universal::DecalProjector*> decalProjectors, int capacity);
    // protected System.Void RemoveAtSwapBack(ref Unity.Collections.NativeArray`1<T> array, System.Int32 index, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void RemoveAtSwapBack(ByRef<::Unity::Collections::NativeArray_1<T>> array, int index, int count) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DecalChunk::RemoveAtSwapBack");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveAtSwapBack", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, byref(array), index, count);
    }
    // protected System.Void RemoveAtSwapBack(ref T[] array, System.Int32 index, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void RemoveAtSwapBack(ByRef<::ArrayW<T>> array, int index, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DecalChunk::RemoveAtSwapBack");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveAtSwapBack", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, byref(array), index, count);
    }
    // protected System.Void .ctor()
    // Offset: 0x52A2C64
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DecalChunk* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DecalChunk::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DecalChunk*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.DecalChunk
  #pragma pack(pop)
  static check_size<sizeof(DecalChunk), 24 + sizeof(::Unity::Jobs::JobHandle)> __UnityEngine_Rendering_Universal_DecalChunkSizeCheck;
  static_assert(sizeof(DecalChunk) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalChunk::get_count
// Il2CppName: get_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::DecalChunk::*)()>(&UnityEngine::Rendering::Universal::DecalChunk::get_count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalChunk*), "get_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalChunk::set_count
// Il2CppName: set_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalChunk::*)(int)>(&UnityEngine::Rendering::Universal::DecalChunk::set_count)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalChunk*), "set_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalChunk::get_capacity
// Il2CppName: get_capacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::DecalChunk::*)()>(&UnityEngine::Rendering::Universal::DecalChunk::get_capacity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalChunk*), "get_capacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalChunk::set_capacity
// Il2CppName: set_capacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalChunk::*)(int)>(&UnityEngine::Rendering::Universal::DecalChunk::set_capacity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalChunk*), "set_capacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalChunk::get_currentJobHandle
// Il2CppName: get_currentJobHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Jobs::JobHandle (UnityEngine::Rendering::Universal::DecalChunk::*)()>(&UnityEngine::Rendering::Universal::DecalChunk::get_currentJobHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalChunk*), "get_currentJobHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalChunk::set_currentJobHandle
// Il2CppName: set_currentJobHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalChunk::*)(::Unity::Jobs::JobHandle)>(&UnityEngine::Rendering::Universal::DecalChunk::set_currentJobHandle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalChunk*), "set_currentJobHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalChunk::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalChunk::*)()>(&UnityEngine::Rendering::Universal::DecalChunk::Push)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalChunk*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalChunk::RemoveAtSwapBack
// Il2CppName: RemoveAtSwapBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalChunk::*)(int)>(&UnityEngine::Rendering::Universal::DecalChunk::RemoveAtSwapBack)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalChunk*), "RemoveAtSwapBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalChunk::SetCapacity
// Il2CppName: SetCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalChunk::*)(int)>(&UnityEngine::Rendering::Universal::DecalChunk::SetCapacity)> {
  static const MethodInfo* get() {
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalChunk*), "SetCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capacity});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalChunk::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalChunk::*)()>(&UnityEngine::Rendering::Universal::DecalChunk::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalChunk*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalChunk::ResizeNativeArray
// Il2CppName: ResizeNativeArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalChunk::*)(ByRef<::UnityEngine::Jobs::TransformAccessArray>, ::ArrayW<::UnityEngine::Rendering::Universal::DecalProjector*>, int)>(&UnityEngine::Rendering::Universal::DecalChunk::ResizeNativeArray)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("UnityEngine.Jobs", "TransformAccessArray")->this_arg;
    static auto* decalProjectors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalProjector"), 1)->byval_arg;
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalChunk*), "ResizeNativeArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, decalProjectors, capacity});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalChunk::RemoveAtSwapBack
// Il2CppName: RemoveAtSwapBack
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalChunk::RemoveAtSwapBack
// Il2CppName: RemoveAtSwapBack
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalChunk::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
