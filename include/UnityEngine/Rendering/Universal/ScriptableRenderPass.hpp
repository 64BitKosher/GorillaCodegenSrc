// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.RenderPassEvent
#include "UnityEngine/Rendering/Universal/RenderPassEvent.hpp"
// Including type: UnityEngine.Rendering.RenderBufferStoreAction
#include "UnityEngine/Rendering/RenderBufferStoreAction.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Experimental.Rendering.GraphicsFormat
#include "UnityEngine/Experimental/Rendering/GraphicsFormat.hpp"
// Including type: UnityEngine.Rendering.RenderTargetIdentifier
#include "UnityEngine/Rendering/RenderTargetIdentifier.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderPassInput
#include "UnityEngine/Rendering/Universal/ScriptableRenderPassInput.hpp"
// Including type: UnityEngine.Rendering.ClearFlag
#include "UnityEngine/Rendering/ClearFlag.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Rendering.ShaderTagId
#include "UnityEngine/Rendering/ShaderTagId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
  // Forward declaring type: DrawingSettings
  struct DrawingSettings;
  // Forward declaring type: SortingCriteria
  struct SortingCriteria;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DebugHandler
  class DebugHandler;
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTextureDescriptor
  struct RenderTextureDescriptor;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraph
  class RenderGraph;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ScriptableRenderPass
  class ScriptableRenderPass;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::ScriptableRenderPass);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ScriptableRenderPass*, "UnityEngine.Rendering.Universal", "ScriptableRenderPass");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.ScriptableRenderPass
  // [TokenAttribute] Offset: FFFFFFFF
  class ScriptableRenderPass : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Rendering.Universal.RenderPassEvent <renderPassEvent>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::UnityEngine::Rendering::Universal::RenderPassEvent renderPassEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::RenderPassEvent) == 0x4);
    // private UnityEngine.Rendering.RenderBufferStoreAction[] m_ColorStoreActions
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Rendering::RenderBufferStoreAction> m_ColorStoreActions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::RenderBufferStoreAction>) == 0x8);
    // private UnityEngine.Rendering.RenderBufferStoreAction m_DepthStoreAction
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::Rendering::RenderBufferStoreAction m_DepthStoreAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderBufferStoreAction) == 0x4);
    // private System.Boolean[] m_OverriddenColorStoreActions
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<bool> m_OverriddenColorStoreActions;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    // private System.Boolean m_OverriddenDepthStoreAction
    // Size: 0x1
    // Offset: 0x30
    bool m_OverriddenDepthStoreAction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Rendering.ProfilingSampler <profilingSampler>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Rendering::ProfilingSampler* profilingSampler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // private System.Boolean <overrideCameraTarget>k__BackingField
    // Size: 0x1
    // Offset: 0x40
    bool overrideCameraTarget;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <isBlitRenderPass>k__BackingField
    // Size: 0x1
    // Offset: 0x41
    bool isBlitRenderPass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <useNativeRenderPass>k__BackingField
    // Size: 0x1
    // Offset: 0x42
    bool useNativeRenderPass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 <renderPassQueueIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x44
    int renderPassQueueIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Unity.Collections.NativeArray`1<System.Int32> m_ColorAttachmentIndices
    // Size: 0xFFFFFFFF
    // Offset: 0x48
    ::Unity::Collections::NativeArray_1<int> m_ColorAttachmentIndices;
    // Unity.Collections.NativeArray`1<System.Int32> m_InputAttachmentIndices
    // Size: 0xFFFFFFFF
    // Offset: 0x58
    ::Unity::Collections::NativeArray_1<int> m_InputAttachmentIndices;
    // private UnityEngine.Experimental.Rendering.GraphicsFormat[] <renderTargetFormat>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat> renderTargetFormat;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat>) == 0x8);
    // System.Boolean m_UsesRTHandles
    // Size: 0x1
    // Offset: 0x70
    bool m_UsesRTHandles;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Rendering.RTHandle[] m_ColorAttachments
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::UnityEngine::Rendering::RTHandle*> m_ColorAttachments;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::RTHandle*>) == 0x8);
    // private UnityEngine.Rendering.RenderTargetIdentifier[] m_ColorAttachmentIds
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> m_ColorAttachmentIds;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>) == 0x8);
    // UnityEngine.Rendering.RTHandle[] m_InputAttachments
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::UnityEngine::Rendering::RTHandle*> m_InputAttachments;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::RTHandle*>) == 0x8);
    // System.Boolean[] m_InputAttachmentIsTransient
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<bool> m_InputAttachmentIsTransient;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_DepthAttachment
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Rendering::RTHandle* m_DepthAttachment;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RenderTargetIdentifier m_DepthAttachmentId
    // Size: 0x24
    // Offset: 0xA0
    ::UnityEngine::Rendering::RenderTargetIdentifier m_DepthAttachmentId;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetIdentifier) == 0x24);
    // private UnityEngine.Rendering.Universal.ScriptableRenderPassInput m_Input
    // Size: 0x4
    // Offset: 0xC8
    ::UnityEngine::Rendering::Universal::ScriptableRenderPassInput m_Input;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ScriptableRenderPassInput) == 0x4);
    // private UnityEngine.Rendering.ClearFlag m_ClearFlag
    // Size: 0x4
    // Offset: 0xCC
    ::UnityEngine::Rendering::ClearFlag m_ClearFlag;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ClearFlag) == 0x4);
    // private UnityEngine.Color m_ClearColor
    // Size: 0x10
    // Offset: 0xD0
    ::UnityEngine::Color m_ClearColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Get static field: static public UnityEngine.Rendering.RTHandle k_CameraTarget
    static ::UnityEngine::Rendering::RTHandle* _get_k_CameraTarget();
    // Set static field: static public UnityEngine.Rendering.RTHandle k_CameraTarget
    static void _set_k_CameraTarget(::UnityEngine::Rendering::RTHandle* value);
    // Get instance field reference: private UnityEngine.Rendering.Universal.RenderPassEvent <renderPassEvent>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::RenderPassEvent& dyn_$renderPassEvent$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.RenderBufferStoreAction[] m_ColorStoreActions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::RenderBufferStoreAction>& dyn_m_ColorStoreActions();
    // Get instance field reference: private UnityEngine.Rendering.RenderBufferStoreAction m_DepthStoreAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderBufferStoreAction& dyn_m_DepthStoreAction();
    // Get instance field reference: private System.Boolean[] m_OverriddenColorStoreActions
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_m_OverriddenColorStoreActions();
    // Get instance field reference: private System.Boolean m_OverriddenDepthStoreAction
    [[deprecated("Use field access instead!")]] bool& dyn_m_OverriddenDepthStoreAction();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler <profilingSampler>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_$profilingSampler$k__BackingField();
    // Get instance field reference: private System.Boolean <overrideCameraTarget>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$overrideCameraTarget$k__BackingField();
    // Get instance field reference: private System.Boolean <isBlitRenderPass>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isBlitRenderPass$k__BackingField();
    // Get instance field reference: private System.Boolean <useNativeRenderPass>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$useNativeRenderPass$k__BackingField();
    // Get instance field reference: private System.Int32 <renderPassQueueIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$renderPassQueueIndex$k__BackingField();
    // Get instance field reference: Unity.Collections.NativeArray`1<System.Int32> m_ColorAttachmentIndices
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_m_ColorAttachmentIndices();
    // Get instance field reference: Unity.Collections.NativeArray`1<System.Int32> m_InputAttachmentIndices
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_m_InputAttachmentIndices();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.GraphicsFormat[] <renderTargetFormat>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat>& dyn_$renderTargetFormat$k__BackingField();
    // Get instance field reference: System.Boolean m_UsesRTHandles
    [[deprecated("Use field access instead!")]] bool& dyn_m_UsesRTHandles();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle[] m_ColorAttachments
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::RTHandle*>& dyn_m_ColorAttachments();
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetIdentifier[] m_ColorAttachmentIds
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>& dyn_m_ColorAttachmentIds();
    // Get instance field reference: UnityEngine.Rendering.RTHandle[] m_InputAttachments
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::RTHandle*>& dyn_m_InputAttachments();
    // Get instance field reference: System.Boolean[] m_InputAttachmentIsTransient
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_m_InputAttachmentIsTransient();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_DepthAttachment
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_DepthAttachment();
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetIdentifier m_DepthAttachmentId
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetIdentifier& dyn_m_DepthAttachmentId();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ScriptableRenderPassInput m_Input
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ScriptableRenderPassInput& dyn_m_Input();
    // Get instance field reference: private UnityEngine.Rendering.ClearFlag m_ClearFlag
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ClearFlag& dyn_m_ClearFlag();
    // Get instance field reference: private UnityEngine.Color m_ClearColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_ClearColor();
    // public System.Void FrameCleanup(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52AB8C4
    void FrameCleanup(::UnityEngine::Rendering::CommandBuffer* cmd);
    // public UnityEngine.Rendering.Universal.RenderPassEvent get_renderPassEvent()
    // Offset: 0x52AB8D0
    ::UnityEngine::Rendering::Universal::RenderPassEvent get_renderPassEvent();
    // public System.Void set_renderPassEvent(UnityEngine.Rendering.Universal.RenderPassEvent value)
    // Offset: 0x52AB8D8
    void set_renderPassEvent(::UnityEngine::Rendering::Universal::RenderPassEvent value);
    // public UnityEngine.Rendering.RenderTargetIdentifier[] get_colorAttachments()
    // Offset: 0x52AB8E0
    ::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> get_colorAttachments();
    // public UnityEngine.Rendering.RenderTargetIdentifier get_colorAttachment()
    // Offset: 0x52AB8E8
    ::UnityEngine::Rendering::RenderTargetIdentifier get_colorAttachment();
    // public UnityEngine.Rendering.RenderTargetIdentifier get_depthAttachment()
    // Offset: 0x52AB91C
    ::UnityEngine::Rendering::RenderTargetIdentifier get_depthAttachment();
    // public UnityEngine.Rendering.RTHandle[] get_colorAttachmentHandles()
    // Offset: 0x52AB994
    ::ArrayW<::UnityEngine::Rendering::RTHandle*> get_colorAttachmentHandles();
    // public UnityEngine.Rendering.RTHandle get_colorAttachmentHandle()
    // Offset: 0x52AB99C
    ::UnityEngine::Rendering::RTHandle* get_colorAttachmentHandle();
    // public UnityEngine.Rendering.RTHandle get_depthAttachmentHandle()
    // Offset: 0x52AB9C4
    ::UnityEngine::Rendering::RTHandle* get_depthAttachmentHandle();
    // public UnityEngine.Rendering.RenderBufferStoreAction[] get_colorStoreActions()
    // Offset: 0x52AB9CC
    ::ArrayW<::UnityEngine::Rendering::RenderBufferStoreAction> get_colorStoreActions();
    // public UnityEngine.Rendering.RenderBufferStoreAction get_depthStoreAction()
    // Offset: 0x52AB9D4
    ::UnityEngine::Rendering::RenderBufferStoreAction get_depthStoreAction();
    // System.Boolean[] get_overriddenColorStoreActions()
    // Offset: 0x52AB9DC
    ::ArrayW<bool> get_overriddenColorStoreActions();
    // System.Boolean get_overriddenDepthStoreAction()
    // Offset: 0x52AB9E4
    bool get_overriddenDepthStoreAction();
    // public UnityEngine.Rendering.Universal.ScriptableRenderPassInput get_input()
    // Offset: 0x52AB9EC
    ::UnityEngine::Rendering::Universal::ScriptableRenderPassInput get_input();
    // public UnityEngine.Rendering.ClearFlag get_clearFlag()
    // Offset: 0x52AB9F4
    ::UnityEngine::Rendering::ClearFlag get_clearFlag();
    // public UnityEngine.Color get_clearColor()
    // Offset: 0x52AB9FC
    ::UnityEngine::Color get_clearColor();
    // protected internal UnityEngine.Rendering.ProfilingSampler get_profilingSampler()
    // Offset: 0x52ABA08
    ::UnityEngine::Rendering::ProfilingSampler* get_profilingSampler();
    // protected internal System.Void set_profilingSampler(UnityEngine.Rendering.ProfilingSampler value)
    // Offset: 0x52ABA10
    void set_profilingSampler(::UnityEngine::Rendering::ProfilingSampler* value);
    // System.Boolean get_overrideCameraTarget()
    // Offset: 0x52ABA18
    bool get_overrideCameraTarget();
    // System.Void set_overrideCameraTarget(System.Boolean value)
    // Offset: 0x52ABA20
    void set_overrideCameraTarget(bool value);
    // System.Boolean get_isBlitRenderPass()
    // Offset: 0x52ABA2C
    bool get_isBlitRenderPass();
    // System.Void set_isBlitRenderPass(System.Boolean value)
    // Offset: 0x52ABA34
    void set_isBlitRenderPass(bool value);
    // System.Boolean get_useNativeRenderPass()
    // Offset: 0x52ABA40
    bool get_useNativeRenderPass();
    // System.Void set_useNativeRenderPass(System.Boolean value)
    // Offset: 0x52ABA48
    void set_useNativeRenderPass(bool value);
    // System.Int32 get_renderPassQueueIndex()
    // Offset: 0x52ABA54
    int get_renderPassQueueIndex();
    // System.Void set_renderPassQueueIndex(System.Int32 value)
    // Offset: 0x52ABA5C
    void set_renderPassQueueIndex(int value);
    // UnityEngine.Experimental.Rendering.GraphicsFormat[] get_renderTargetFormat()
    // Offset: 0x52ABA64
    ::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat> get_renderTargetFormat();
    // System.Void set_renderTargetFormat(UnityEngine.Experimental.Rendering.GraphicsFormat[] value)
    // Offset: 0x52ABA6C
    void set_renderTargetFormat(::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat> value);
    // static UnityEngine.Rendering.Universal.DebugHandler GetActiveDebugHandler(ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52ABA74
    static ::UnityEngine::Rendering::Universal::DebugHandler* GetActiveDebugHandler(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public System.Void .ctor()
    // Offset: 0x52AA000
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScriptableRenderPass* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::ScriptableRenderPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScriptableRenderPass*, creationType>()));
    }
    // public System.Void ConfigureInput(UnityEngine.Rendering.Universal.ScriptableRenderPassInput passInput)
    // Offset: 0x52ABAB0
    void ConfigureInput(::UnityEngine::Rendering::Universal::ScriptableRenderPassInput passInput);
    // public System.Void ConfigureColorStoreAction(UnityEngine.Rendering.RenderBufferStoreAction storeAction, System.UInt32 attachmentIndex)
    // Offset: 0x52ABAB8
    void ConfigureColorStoreAction(::UnityEngine::Rendering::RenderBufferStoreAction storeAction, uint attachmentIndex);
    // public System.Void ConfigureColorStoreActions(UnityEngine.Rendering.RenderBufferStoreAction[] storeActions)
    // Offset: 0x52ABB0C
    void ConfigureColorStoreActions(::ArrayW<::UnityEngine::Rendering::RenderBufferStoreAction> storeActions);
    // public System.Void ConfigureDepthStoreAction(UnityEngine.Rendering.RenderBufferStoreAction storeAction)
    // Offset: 0x52ABBF0
    void ConfigureDepthStoreAction(::UnityEngine::Rendering::RenderBufferStoreAction storeAction);
    // System.Void ConfigureInputAttachments(UnityEngine.Rendering.RTHandle input, System.Boolean isTransient)
    // Offset: 0x52ABC00
    void ConfigureInputAttachments(::UnityEngine::Rendering::RTHandle* input, bool isTransient);
    // System.Void ConfigureInputAttachments(UnityEngine.Rendering.RTHandle[] inputs)
    // Offset: 0x52ABC8C
    void ConfigureInputAttachments(::ArrayW<::UnityEngine::Rendering::RTHandle*> inputs);
    // System.Void ConfigureInputAttachments(UnityEngine.Rendering.RTHandle[] inputs, System.Boolean[] isTransient)
    // Offset: 0x52AA934
    void ConfigureInputAttachments(::ArrayW<::UnityEngine::Rendering::RTHandle*> inputs, ::ArrayW<bool> isTransient);
    // System.Void SetInputAttachmentTransient(System.Int32 idx, System.Boolean isTransient)
    // Offset: 0x52ABC94
    void SetInputAttachmentTransient(int idx, bool isTransient);
    // System.Boolean IsInputAttachmentTransient(System.Int32 idx)
    // Offset: 0x52ABCC8
    bool IsInputAttachmentTransient(int idx);
    // public System.Void ResetTarget()
    // Offset: 0x52ABCF8
    void ResetTarget();
    // public System.Void ConfigureTarget(UnityEngine.Rendering.RenderTargetIdentifier colorAttachment, UnityEngine.Rendering.RenderTargetIdentifier depthAttachment)
    // Offset: 0x52ABE94
    void ConfigureTarget(::UnityEngine::Rendering::RenderTargetIdentifier colorAttachment, ::UnityEngine::Rendering::RenderTargetIdentifier depthAttachment);
    // public System.Void ConfigureTarget(UnityEngine.Rendering.RTHandle colorAttachment, UnityEngine.Rendering.RTHandle depthAttachment)
    // Offset: 0x52ABFD8
    void ConfigureTarget(::UnityEngine::Rendering::RTHandle* colorAttachment, ::UnityEngine::Rendering::RTHandle* depthAttachment);
    // public System.Void ConfigureTarget(UnityEngine.Rendering.RenderTargetIdentifier[] colorAttachments, UnityEngine.Rendering.RenderTargetIdentifier depthAttachment)
    // Offset: 0x52AC1D8
    void ConfigureTarget(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> colorAttachments, ::UnityEngine::Rendering::RenderTargetIdentifier depthAttachment);
    // public System.Void ConfigureTarget(UnityEngine.Rendering.RTHandle[] colorAttachments, UnityEngine.Rendering.RTHandle depthAttachment)
    // Offset: 0x52AA964
    void ConfigureTarget(::ArrayW<::UnityEngine::Rendering::RTHandle*> colorAttachments, ::UnityEngine::Rendering::RTHandle* depthAttachment);
    // System.Void ConfigureTarget(UnityEngine.Rendering.RTHandle[] colorAttachments, UnityEngine.Rendering.RTHandle depthAttachment, UnityEngine.Experimental.Rendering.GraphicsFormat[] formats)
    // Offset: 0x52AC344
    void ConfigureTarget(::ArrayW<::UnityEngine::Rendering::RTHandle*> colorAttachments, ::UnityEngine::Rendering::RTHandle* depthAttachment, ::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat> formats);
    // public System.Void ConfigureTarget(UnityEngine.Rendering.RenderTargetIdentifier colorAttachment)
    // Offset: 0x52ABEF0
    void ConfigureTarget(::UnityEngine::Rendering::RenderTargetIdentifier colorAttachment);
    // public System.Void ConfigureTarget(UnityEngine.Rendering.RTHandle colorAttachment)
    // Offset: 0x52AC030
    void ConfigureTarget(::UnityEngine::Rendering::RTHandle* colorAttachment);
    // public System.Void ConfigureTarget(UnityEngine.Rendering.RenderTargetIdentifier[] colorAttachments)
    // Offset: 0x52AC3C0
    void ConfigureTarget(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> colorAttachments);
    // public System.Void ConfigureTarget(UnityEngine.Rendering.RTHandle[] colorAttachments)
    // Offset: 0x52AC45C
    void ConfigureTarget(::ArrayW<::UnityEngine::Rendering::RTHandle*> colorAttachments);
    // public System.Void ConfigureClear(UnityEngine.Rendering.ClearFlag clearFlag, UnityEngine.Color clearColor)
    // Offset: 0x52AC4CC
    void ConfigureClear(::UnityEngine::Rendering::ClearFlag clearFlag, ::UnityEngine::Color clearColor);
    // public System.Void OnCameraSetup(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52AC4DC
    void OnCameraSetup(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public System.Void Configure(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.RenderTextureDescriptor cameraTextureDescriptor)
    // Offset: 0x52AC4E0
    void Configure(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::RenderTextureDescriptor cameraTextureDescriptor);
    // public System.Void OnCameraCleanup(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52AC4E4
    void OnCameraCleanup(::UnityEngine::Rendering::CommandBuffer* cmd);
    // public System.Void OnFinishCameraStackRendering(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52AC4E8
    void OnFinishCameraStackRendering(::UnityEngine::Rendering::CommandBuffer* cmd);
    // public System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Execute(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // System.Void RecordRenderGraph(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52AC4EC
    void RecordRenderGraph(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public System.Void Blit(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RenderTargetIdentifier source, UnityEngine.Rendering.RenderTargetIdentifier destination, UnityEngine.Material material, System.Int32 passIndex)
    // Offset: 0x52AC5A4
    void Blit(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RenderTargetIdentifier source, ::UnityEngine::Rendering::RenderTargetIdentifier destination, ::UnityEngine::Material* material, int passIndex);
    // public System.Void Blit(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle source, UnityEngine.Rendering.RTHandle destination, UnityEngine.Material material, System.Int32 passIndex)
    // Offset: 0x52AC9EC
    void Blit(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RTHandle* source, ::UnityEngine::Rendering::RTHandle* destination, ::UnityEngine::Material* material, int passIndex);
    // public System.Void Blit(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData data, UnityEngine.Material material, System.Int32 passIndex)
    // Offset: 0x52ACB0C
    void Blit(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> data, ::UnityEngine::Material* material, int passIndex);
    // public System.Void Blit(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData data, UnityEngine.Rendering.RTHandle source, UnityEngine.Material material, System.Int32 passIndex)
    // Offset: 0x52ACC10
    void Blit(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> data, ::UnityEngine::Rendering::RTHandle* source, ::UnityEngine::Material* material, int passIndex);
    // public UnityEngine.Rendering.DrawingSettings CreateDrawingSettings(UnityEngine.Rendering.ShaderTagId shaderTagId, ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.SortingCriteria sortingCriteria)
    // Offset: 0x52ACC60
    ::UnityEngine::Rendering::DrawingSettings CreateDrawingSettings(::UnityEngine::Rendering::ShaderTagId shaderTagId, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::UnityEngine::Rendering::SortingCriteria sortingCriteria);
    // public UnityEngine.Rendering.DrawingSettings CreateDrawingSettings(System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> shaderTagIdList, ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.SortingCriteria sortingCriteria)
    // Offset: 0x52AAEF8
    ::UnityEngine::Rendering::DrawingSettings CreateDrawingSettings(::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* shaderTagIdList, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::UnityEngine::Rendering::SortingCriteria sortingCriteria);
    // static System.Int32 GetRenderPassEventRange(UnityEngine.Rendering.Universal.RenderPassEvent renderPassEvent)
    // Offset: 0x52ACD74
    static int GetRenderPassEventRange(::UnityEngine::Rendering::Universal::RenderPassEvent renderPassEvent);
    // static private System.Void .cctor()
    // Offset: 0x52ACEE0
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.ScriptableRenderPass
  // WARNING Not writing size check since size may be invalid!
  // static public System.Boolean op_LessThan(UnityEngine.Rendering.Universal.ScriptableRenderPass lhs, UnityEngine.Rendering.Universal.ScriptableRenderPass rhs)
  // Offset: 0x52ACD24
  bool operator <(::UnityEngine::Rendering::Universal::ScriptableRenderPass* lhs, ::UnityEngine::Rendering::Universal::ScriptableRenderPass& rhs);
  // static public System.Boolean op_GreaterThan(UnityEngine.Rendering.Universal.ScriptableRenderPass lhs, UnityEngine.Rendering.Universal.ScriptableRenderPass rhs)
  // Offset: 0x52ACD4C
  bool operator >(::UnityEngine::Rendering::Universal::ScriptableRenderPass* lhs, ::UnityEngine::Rendering::Universal::ScriptableRenderPass& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::FrameCleanup
// Il2CppName: FrameCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::FrameCleanup)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "FrameCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_renderPassEvent
// Il2CppName: get_renderPassEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::RenderPassEvent (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_renderPassEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_renderPassEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::set_renderPassEvent
// Il2CppName: set_renderPassEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::Universal::RenderPassEvent)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::set_renderPassEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderPassEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "set_renderPassEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_colorAttachments
// Il2CppName: get_colorAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_colorAttachments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_colorAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_colorAttachment
// Il2CppName: get_colorAttachment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderTargetIdentifier (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_colorAttachment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_colorAttachment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_depthAttachment
// Il2CppName: get_depthAttachment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderTargetIdentifier (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_depthAttachment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_depthAttachment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_colorAttachmentHandles
// Il2CppName: get_colorAttachmentHandles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rendering::RTHandle*> (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_colorAttachmentHandles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_colorAttachmentHandles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_colorAttachmentHandle
// Il2CppName: get_colorAttachmentHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_colorAttachmentHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_colorAttachmentHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_depthAttachmentHandle
// Il2CppName: get_depthAttachmentHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_depthAttachmentHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_depthAttachmentHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_colorStoreActions
// Il2CppName: get_colorStoreActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rendering::RenderBufferStoreAction> (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_colorStoreActions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_colorStoreActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_depthStoreAction
// Il2CppName: get_depthStoreAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderBufferStoreAction (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_depthStoreAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_depthStoreAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_overriddenColorStoreActions
// Il2CppName: get_overriddenColorStoreActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<bool> (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_overriddenColorStoreActions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_overriddenColorStoreActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_overriddenDepthStoreAction
// Il2CppName: get_overriddenDepthStoreAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_overriddenDepthStoreAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_overriddenDepthStoreAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_input
// Il2CppName: get_input
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ScriptableRenderPassInput (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_input)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_input", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_clearFlag
// Il2CppName: get_clearFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::ClearFlag (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_clearFlag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_clearFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_clearColor
// Il2CppName: get_clearColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_clearColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_clearColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_profilingSampler
// Il2CppName: get_profilingSampler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::ProfilingSampler* (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_profilingSampler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_profilingSampler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::set_profilingSampler
// Il2CppName: set_profilingSampler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::ProfilingSampler*)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::set_profilingSampler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ProfilingSampler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "set_profilingSampler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_overrideCameraTarget
// Il2CppName: get_overrideCameraTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_overrideCameraTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_overrideCameraTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::set_overrideCameraTarget
// Il2CppName: set_overrideCameraTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::set_overrideCameraTarget)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "set_overrideCameraTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_isBlitRenderPass
// Il2CppName: get_isBlitRenderPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_isBlitRenderPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_isBlitRenderPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::set_isBlitRenderPass
// Il2CppName: set_isBlitRenderPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::set_isBlitRenderPass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "set_isBlitRenderPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_useNativeRenderPass
// Il2CppName: get_useNativeRenderPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_useNativeRenderPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_useNativeRenderPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::set_useNativeRenderPass
// Il2CppName: set_useNativeRenderPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::set_useNativeRenderPass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "set_useNativeRenderPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_renderPassQueueIndex
// Il2CppName: get_renderPassQueueIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_renderPassQueueIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_renderPassQueueIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::set_renderPassQueueIndex
// Il2CppName: set_renderPassQueueIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(int)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::set_renderPassQueueIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "set_renderPassQueueIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::get_renderTargetFormat
// Il2CppName: get_renderTargetFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat> (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::get_renderTargetFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "get_renderTargetFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::set_renderTargetFormat
// Il2CppName: set_renderTargetFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat>)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::set_renderTargetFormat)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "set_renderTargetFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::GetActiveDebugHandler
// Il2CppName: GetActiveDebugHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugHandler* (*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::GetActiveDebugHandler)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "GetActiveDebugHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureInput
// Il2CppName: ConfigureInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::Universal::ScriptableRenderPassInput)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureInput)> {
  static const MethodInfo* get() {
    static auto* passInput = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPassInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passInput});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureColorStoreAction
// Il2CppName: ConfigureColorStoreAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::RenderBufferStoreAction, uint)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureColorStoreAction)> {
  static const MethodInfo* get() {
    static auto* storeAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* attachmentIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureColorStoreAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{storeAction, attachmentIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureColorStoreActions
// Il2CppName: ConfigureColorStoreActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::ArrayW<::UnityEngine::Rendering::RenderBufferStoreAction>)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureColorStoreActions)> {
  static const MethodInfo* get() {
    static auto* storeActions = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureColorStoreActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{storeActions});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureDepthStoreAction
// Il2CppName: ConfigureDepthStoreAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::RenderBufferStoreAction)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureDepthStoreAction)> {
  static const MethodInfo* get() {
    static auto* storeAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureDepthStoreAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{storeAction});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureInputAttachments
// Il2CppName: ConfigureInputAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::RTHandle*, bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureInputAttachments)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* isTransient = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureInputAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, isTransient});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureInputAttachments
// Il2CppName: ConfigureInputAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::ArrayW<::UnityEngine::Rendering::RTHandle*>)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureInputAttachments)> {
  static const MethodInfo* get() {
    static auto* inputs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureInputAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureInputAttachments
// Il2CppName: ConfigureInputAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::ArrayW<::UnityEngine::Rendering::RTHandle*>, ::ArrayW<bool>)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureInputAttachments)> {
  static const MethodInfo* get() {
    static auto* inputs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle"), 1)->byval_arg;
    static auto* isTransient = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Boolean"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureInputAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputs, isTransient});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::SetInputAttachmentTransient
// Il2CppName: SetInputAttachmentTransient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(int, bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::SetInputAttachmentTransient)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isTransient = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "SetInputAttachmentTransient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, isTransient});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::IsInputAttachmentTransient
// Il2CppName: IsInputAttachmentTransient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(int)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::IsInputAttachmentTransient)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "IsInputAttachmentTransient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ResetTarget
// Il2CppName: ResetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ResetTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ResetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget
// Il2CppName: ConfigureTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget)> {
  static const MethodInfo* get() {
    static auto* colorAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorAttachment, depthAttachment});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget
// Il2CppName: ConfigureTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget)> {
  static const MethodInfo* get() {
    static auto* colorAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorAttachment, depthAttachment});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget
// Il2CppName: ConfigureTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>, ::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget)> {
  static const MethodInfo* get() {
    static auto* colorAttachments = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier"), 1)->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorAttachments, depthAttachment});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget
// Il2CppName: ConfigureTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::ArrayW<::UnityEngine::Rendering::RTHandle*>, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget)> {
  static const MethodInfo* get() {
    static auto* colorAttachments = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle"), 1)->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorAttachments, depthAttachment});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget
// Il2CppName: ConfigureTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::ArrayW<::UnityEngine::Rendering::RTHandle*>, ::UnityEngine::Rendering::RTHandle*, ::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat>)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget)> {
  static const MethodInfo* get() {
    static auto* colorAttachments = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle"), 1)->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* formats = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorAttachments, depthAttachment, formats});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget
// Il2CppName: ConfigureTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget)> {
  static const MethodInfo* get() {
    static auto* colorAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorAttachment});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget
// Il2CppName: ConfigureTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget)> {
  static const MethodInfo* get() {
    static auto* colorAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorAttachment});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget
// Il2CppName: ConfigureTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget)> {
  static const MethodInfo* get() {
    static auto* colorAttachments = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorAttachments});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget
// Il2CppName: ConfigureTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::ArrayW<::UnityEngine::Rendering::RTHandle*>)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureTarget)> {
  static const MethodInfo* get() {
    static auto* colorAttachments = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorAttachments});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureClear
// Il2CppName: ConfigureClear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Color)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::ConfigureClear)> {
  static const MethodInfo* get() {
    static auto* clearFlag = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "ConfigureClear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clearFlag, clearColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::OnCameraSetup
// Il2CppName: OnCameraSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::OnCameraSetup)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "OnCameraSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::Configure
// Il2CppName: Configure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::RenderTextureDescriptor)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::Configure)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cameraTextureDescriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "Configure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cameraTextureDescriptor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::OnCameraCleanup
// Il2CppName: OnCameraCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::OnCameraCleanup)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "OnCameraCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::OnFinishCameraStackRendering
// Il2CppName: OnFinishCameraStackRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::OnFinishCameraStackRendering)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "OnFinishCameraStackRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::Execute)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::RecordRenderGraph
// Il2CppName: RecordRenderGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::RecordRenderGraph)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "RecordRenderGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Material*, int)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::Blit)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* passIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, source, destination, material, passIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Material*, int)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::Blit)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* passIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, source, destination, material, passIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Material*, int)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::Blit)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* passIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, data, material, passIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Material*, int)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::Blit)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* passIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, data, source, material, passIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::CreateDrawingSettings
// Il2CppName: CreateDrawingSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::DrawingSettings (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::UnityEngine::Rendering::ShaderTagId, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Rendering::SortingCriteria)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::CreateDrawingSettings)> {
  static const MethodInfo* get() {
    static auto* shaderTagId = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShaderTagId")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* sortingCriteria = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SortingCriteria")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "CreateDrawingSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderTagId, renderingData, sortingCriteria});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::CreateDrawingSettings
// Il2CppName: CreateDrawingSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::DrawingSettings (UnityEngine::Rendering::Universal::ScriptableRenderPass::*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Rendering::SortingCriteria)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::CreateDrawingSettings)> {
  static const MethodInfo* get() {
    static auto* shaderTagIdList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShaderTagId")})->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* sortingCriteria = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SortingCriteria")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "CreateDrawingSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderTagIdList, renderingData, sortingCriteria});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::GetRenderPassEventRange
// Il2CppName: GetRenderPassEventRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Rendering::Universal::RenderPassEvent)>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::GetRenderPassEventRange)> {
  static const MethodInfo* get() {
    static auto* renderPassEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderPassEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), "GetRenderPassEventRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderPassEvent});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderPass::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderPass*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::operator <
// Il2CppName: op_LessThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderPass::operator >
// Il2CppName: op_GreaterThan
// Cannot perform method pointer template specialization from operators!
