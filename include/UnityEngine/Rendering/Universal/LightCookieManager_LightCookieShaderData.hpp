// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.LightCookieManager
#include "UnityEngine/Rendering/Universal/LightCookieManager.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Rendering.Universal.LightCookieManager/ShaderBitArray
#include "UnityEngine/Rendering/Universal/LightCookieManager_ShaderBitArray.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ComputeBuffer
  class ComputeBuffer;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData*, "UnityEngine.Rendering.Universal", "LightCookieManager/LightCookieShaderData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.LightCookieManager/LightCookieShaderData
  // [TokenAttribute] Offset: FFFFFFFF
  class LightCookieManager::LightCookieShaderData : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Int32 m_Size
    // Size: 0x4
    // Offset: 0x10
    int m_Size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_UseStructuredBuffer
    // Size: 0x1
    // Offset: 0x14
    bool m_UseStructuredBuffer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UseStructuredBuffer and: m_WorldToLightCpuData
    char __padding1[0x3] = {};
    // private UnityEngine.Matrix4x4[] m_WorldToLightCpuData
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Matrix4x4> m_WorldToLightCpuData;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // private UnityEngine.Vector4[] m_AtlasUVRectCpuData
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Vector4> m_AtlasUVRectCpuData;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private System.Single[] m_LightTypeCpuData
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<float> m_LightTypeCpuData;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private UnityEngine.Rendering.Universal.LightCookieManager/ShaderBitArray m_CookieEnableBitsCpuData
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray m_CookieEnableBitsCpuData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray) == 0x8);
    // private UnityEngine.ComputeBuffer m_WorldToLightBuffer
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::ComputeBuffer* m_WorldToLightBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::ComputeBuffer*) == 0x8);
    // private UnityEngine.ComputeBuffer m_AtlasUVRectBuffer
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::ComputeBuffer* m_AtlasUVRectBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::ComputeBuffer*) == 0x8);
    // private UnityEngine.ComputeBuffer m_LightTypeBuffer
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::ComputeBuffer* m_LightTypeBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::ComputeBuffer*) == 0x8);
    // private System.Boolean <isUploaded>k__BackingField
    // Size: 0x1
    // Offset: 0x50
    bool isUploaded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Int32 m_Size
    [[deprecated("Use field access instead!")]] int& dyn_m_Size();
    // Get instance field reference: private System.Boolean m_UseStructuredBuffer
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseStructuredBuffer();
    // Get instance field reference: private UnityEngine.Matrix4x4[] m_WorldToLightCpuData
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn_m_WorldToLightCpuData();
    // Get instance field reference: private UnityEngine.Vector4[] m_AtlasUVRectCpuData
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_AtlasUVRectCpuData();
    // Get instance field reference: private System.Single[] m_LightTypeCpuData
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_LightTypeCpuData();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LightCookieManager/ShaderBitArray m_CookieEnableBitsCpuData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray& dyn_m_CookieEnableBitsCpuData();
    // Get instance field reference: private UnityEngine.ComputeBuffer m_WorldToLightBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::ComputeBuffer*& dyn_m_WorldToLightBuffer();
    // Get instance field reference: private UnityEngine.ComputeBuffer m_AtlasUVRectBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::ComputeBuffer*& dyn_m_AtlasUVRectBuffer();
    // Get instance field reference: private UnityEngine.ComputeBuffer m_LightTypeBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::ComputeBuffer*& dyn_m_LightTypeBuffer();
    // Get instance field reference: private System.Boolean <isUploaded>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isUploaded$k__BackingField();
    // public UnityEngine.Matrix4x4[] get_worldToLights()
    // Offset: 0x52BF8D0
    ::ArrayW<::UnityEngine::Matrix4x4> get_worldToLights();
    // public UnityEngine.Rendering.Universal.LightCookieManager/ShaderBitArray get_cookieEnableBits()
    // Offset: 0x52BF8D8
    ::UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray get_cookieEnableBits();
    // public UnityEngine.Vector4[] get_atlasUVRects()
    // Offset: 0x52BF8E0
    ::ArrayW<::UnityEngine::Vector4> get_atlasUVRects();
    // public System.Single[] get_lightTypes()
    // Offset: 0x52BF8E8
    ::ArrayW<float> get_lightTypes();
    // public System.Boolean get_isUploaded()
    // Offset: 0x52BF8F0
    bool get_isUploaded();
    // public System.Void set_isUploaded(System.Boolean value)
    // Offset: 0x52BF8F8
    void set_isUploaded(bool value);
    // public System.Void .ctor(System.Int32 size, System.Boolean useStructuredBuffer)
    // Offset: 0x52BC858
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightCookieManager::LightCookieShaderData* New_ctor(int size, bool useStructuredBuffer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightCookieManager::LightCookieShaderData*, creationType>(size, useStructuredBuffer)));
    }
    // public System.Void Dispose()
    // Offset: 0x52BC8DC
    void Dispose();
    // public System.Void Resize(System.Int32 size)
    // Offset: 0x52BEADC
    void Resize(int size);
    // public System.Void Upload(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52BED98
    void Upload(::UnityEngine::Rendering::CommandBuffer* cmd);
    // public System.Void Clear(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52BD17C
    void Clear(::UnityEngine::Rendering::CommandBuffer* cmd);
  }; // UnityEngine.Rendering.Universal.LightCookieManager/LightCookieShaderData
  #pragma pack(pop)
  static check_size<sizeof(LightCookieManager::LightCookieShaderData), 80 + sizeof(bool)> __UnityEngine_Rendering_Universal_LightCookieManager_LightCookieShaderDataSizeCheck;
  static_assert(sizeof(LightCookieManager::LightCookieShaderData) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::get_worldToLights
// Il2CppName: get_worldToLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Matrix4x4> (UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::*)()>(&UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::get_worldToLights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData*), "get_worldToLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::get_cookieEnableBits
// Il2CppName: get_cookieEnableBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray (UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::*)()>(&UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::get_cookieEnableBits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData*), "get_cookieEnableBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::get_atlasUVRects
// Il2CppName: get_atlasUVRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector4> (UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::*)()>(&UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::get_atlasUVRects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData*), "get_atlasUVRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::get_lightTypes
// Il2CppName: get_lightTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::*)()>(&UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::get_lightTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData*), "get_lightTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::get_isUploaded
// Il2CppName: get_isUploaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::*)()>(&UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::get_isUploaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData*), "get_isUploaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::set_isUploaded
// Il2CppName: set_isUploaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::*)(bool)>(&UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::set_isUploaded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData*), "set_isUploaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::*)()>(&UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::*)(int)>(&UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::Resize)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData*), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::Upload
// Il2CppName: Upload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::Upload)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData*), "Upload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData::Clear)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
