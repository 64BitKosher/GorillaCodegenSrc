// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal::LibTessDotNet
namespace UnityEngine::Rendering::Universal::LibTessDotNet {
  // Forward declaring type: Vec3
  struct Vec3;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
  // Forward declaring type: Mesh
  class Mesh;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ShadowUtility
  class ShadowUtility;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::ShadowUtility);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ShadowUtility*, "UnityEngine.Rendering.Universal", "ShadowUtility");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.ShadowUtility
  // [TokenAttribute] Offset: FFFFFFFF
  class ShadowUtility : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::ShadowUtility::Edge
    struct Edge;
    // Nested type: ::UnityEngine::Rendering::Universal::ShadowUtility::$$c
    class $$c;
    // Size: 0x19
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.Universal.ShadowUtility/Edge
    // [TokenAttribute] Offset: FFFFFFFF
    struct Edge/*, public ::System::ValueType, public ::System::IComparable_1<::UnityEngine::Rendering::Universal::ShadowUtility::Edge>*/ {
      public:
      public:
      // public System.Int32 vertexIndex0
      // Size: 0x4
      // Offset: 0x0
      int vertexIndex0;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 vertexIndex1
      // Size: 0x4
      // Offset: 0x4
      int vertexIndex1;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public UnityEngine.Vector4 tangent
      // Size: 0x10
      // Offset: 0x8
      ::UnityEngine::Vector4 tangent;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
      // private System.Boolean compareReversed
      // Size: 0x1
      // Offset: 0x18
      bool compareReversed;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: Edge
      constexpr Edge(int vertexIndex0_ = {}, int vertexIndex1_ = {}, ::UnityEngine::Vector4 tangent_ = {}, bool compareReversed_ = {}) noexcept : vertexIndex0{vertexIndex0_}, vertexIndex1{vertexIndex1_}, tangent{tangent_}, compareReversed{compareReversed_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::IComparable_1<::UnityEngine::Rendering::Universal::ShadowUtility::Edge>
      operator ::System::IComparable_1<::UnityEngine::Rendering::Universal::ShadowUtility::Edge>() noexcept {
        return *reinterpret_cast<::System::IComparable_1<::UnityEngine::Rendering::Universal::ShadowUtility::Edge>*>(this);
      }
      // Get instance field reference: public System.Int32 vertexIndex0
      [[deprecated("Use field access instead!")]] int& dyn_vertexIndex0();
      // Get instance field reference: public System.Int32 vertexIndex1
      [[deprecated("Use field access instead!")]] int& dyn_vertexIndex1();
      // Get instance field reference: public UnityEngine.Vector4 tangent
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_tangent();
      // Get instance field reference: private System.Boolean compareReversed
      [[deprecated("Use field access instead!")]] bool& dyn_compareReversed();
      // public System.Void AssignVertexIndices(System.Int32 vi0, System.Int32 vi1)
      // Offset: 0x5291074
      void AssignVertexIndices(int vi0, int vi1);
      // public System.Int32 Compare(UnityEngine.Rendering.Universal.ShadowUtility/Edge a, UnityEngine.Rendering.Universal.ShadowUtility/Edge b)
      // Offset: 0x52919F4
      int Compare(::UnityEngine::Rendering::Universal::ShadowUtility::Edge a, ::UnityEngine::Rendering::Universal::ShadowUtility::Edge b);
      // public System.Int32 CompareTo(UnityEngine.Rendering.Universal.ShadowUtility/Edge edgeToCompare)
      // Offset: 0x5291444
      int CompareTo(::UnityEngine::Rendering::Universal::ShadowUtility::Edge edgeToCompare);
    }; // UnityEngine.Rendering.Universal.ShadowUtility/Edge
    #pragma pack(pop)
    static check_size<sizeof(ShadowUtility::Edge), 24 + sizeof(bool)> __UnityEngine_Rendering_Universal_ShadowUtility_EdgeSizeCheck;
    static_assert(sizeof(ShadowUtility::Edge) == 0x19);
    // static private UnityEngine.Rendering.Universal.ShadowUtility/Edge CreateEdge(System.Int32 triangleIndexA, System.Int32 triangleIndexB, System.Collections.Generic.List`1<UnityEngine.Vector3> vertices, System.Collections.Generic.List`1<System.Int32> triangles)
    // Offset: 0x5290E54
    static ::UnityEngine::Rendering::Universal::ShadowUtility::Edge CreateEdge(int triangleIndexA, int triangleIndexB, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* vertices, ::System::Collections::Generic::List_1<int>* triangles);
    // static private System.Void PopulateEdgeArray(System.Collections.Generic.List`1<UnityEngine.Vector3> vertices, System.Collections.Generic.List`1<System.Int32> triangles, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.ShadowUtility/Edge> edges)
    // Offset: 0x5291088
    static void PopulateEdgeArray(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* vertices, ::System::Collections::Generic::List_1<int>* triangles, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ShadowUtility::Edge>* edges);
    // static private System.Boolean IsOutsideEdge(System.Int32 edgeIndex, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.ShadowUtility/Edge> edgesToProcess)
    // Offset: 0x529130C
    static bool IsOutsideEdge(int edgeIndex, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ShadowUtility::Edge>* edgesToProcess);
    // static private System.Void SortEdges(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.ShadowUtility/Edge> edgesToProcess)
    // Offset: 0x529147C
    static void SortEdges(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ShadowUtility::Edge>* edgesToProcess);
    // static private System.Void CreateShadowTriangles(System.Collections.Generic.List`1<UnityEngine.Vector3> vertices, System.Collections.Generic.List`1<UnityEngine.Color> colors, System.Collections.Generic.List`1<System.Int32> triangles, System.Collections.Generic.List`1<UnityEngine.Vector4> tangents, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.ShadowUtility/Edge> edges)
    // Offset: 0x52914CC
    static void CreateShadowTriangles(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* vertices, ::System::Collections::Generic::List_1<::UnityEngine::Color>* colors, ::System::Collections::Generic::List_1<int>* triangles, ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* tangents, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ShadowUtility::Edge>* edges);
    // static private System.Object InterpCustomVertexData(UnityEngine.Rendering.Universal.LibTessDotNet.Vec3 position, System.Object[] data, System.Single[] weights)
    // Offset: 0x52918D4
    static ::Il2CppObject* InterpCustomVertexData(::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3 position, ::ArrayW<::Il2CppObject*> data, ::ArrayW<float> weights);
    // static private System.Void InitializeTangents(System.Int32 tangentsToAdd, System.Collections.Generic.List`1<UnityEngine.Vector4> tangents)
    // Offset: 0x52918F8
    static void InitializeTangents(int tangentsToAdd, ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* tangents);
    // static UnityEngine.Bounds CalculateLocalBounds(UnityEngine.Vector3[] inVertices)
    // Offset: 0x528E200
    static ::UnityEngine::Bounds CalculateLocalBounds(::ArrayW<::UnityEngine::Vector3> inVertices);
    // static public UnityEngine.Bounds GenerateShadowMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3[] shapePath)
    // Offset: 0x528D410
    static ::UnityEngine::Bounds GenerateShadowMesh(::UnityEngine::Mesh* mesh, ::ArrayW<::UnityEngine::Vector3> shapePath);
    // public System.Void .ctor()
    // Offset: 0x52919EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ShadowUtility* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::ShadowUtility::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ShadowUtility*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.ShadowUtility
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ShadowUtility::Edge, "UnityEngine.Rendering.Universal", "ShadowUtility/Edge");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShadowUtility::CreateEdge
// Il2CppName: CreateEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ShadowUtility::Edge (*)(int, int, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::System::Collections::Generic::List_1<int>*)>(&UnityEngine::Rendering::Universal::ShadowUtility::CreateEdge)> {
  static const MethodInfo* get() {
    static auto* triangleIndexA = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* triangleIndexB = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShadowUtility*), "CreateEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangleIndexA, triangleIndexB, vertices, triangles});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShadowUtility::PopulateEdgeArray
// Il2CppName: PopulateEdgeArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::System::Collections::Generic::List_1<int>*, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ShadowUtility::Edge>*)>(&UnityEngine::Rendering::Universal::ShadowUtility::PopulateEdgeArray)> {
  static const MethodInfo* get() {
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* edges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ShadowUtility/Edge")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShadowUtility*), "PopulateEdgeArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, triangles, edges});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShadowUtility::IsOutsideEdge
// Il2CppName: IsOutsideEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ShadowUtility::Edge>*)>(&UnityEngine::Rendering::Universal::ShadowUtility::IsOutsideEdge)> {
  static const MethodInfo* get() {
    static auto* edgeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* edgesToProcess = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ShadowUtility/Edge")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShadowUtility*), "IsOutsideEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edgeIndex, edgesToProcess});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShadowUtility::SortEdges
// Il2CppName: SortEdges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ShadowUtility::Edge>*)>(&UnityEngine::Rendering::Universal::ShadowUtility::SortEdges)> {
  static const MethodInfo* get() {
    static auto* edgesToProcess = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ShadowUtility/Edge")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShadowUtility*), "SortEdges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edgesToProcess});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShadowUtility::CreateShadowTriangles
// Il2CppName: CreateShadowTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::System::Collections::Generic::List_1<::UnityEngine::Color>*, ::System::Collections::Generic::List_1<int>*, ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ShadowUtility::Edge>*)>(&UnityEngine::Rendering::Universal::ShadowUtility::CreateShadowTriangles)> {
  static const MethodInfo* get() {
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* colors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* tangents = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    static auto* edges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ShadowUtility/Edge")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShadowUtility*), "CreateShadowTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, colors, triangles, tangents, edges});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShadowUtility::InterpCustomVertexData
// Il2CppName: InterpCustomVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::UnityEngine::Rendering::Universal::LibTessDotNet::Vec3, ::ArrayW<::Il2CppObject*>, ::ArrayW<float>)>(&UnityEngine::Rendering::Universal::ShadowUtility::InterpCustomVertexData)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.LibTessDotNet", "Vec3")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* weights = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShadowUtility*), "InterpCustomVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, data, weights});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShadowUtility::InitializeTangents
// Il2CppName: InitializeTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*)>(&UnityEngine::Rendering::Universal::ShadowUtility::InitializeTangents)> {
  static const MethodInfo* get() {
    static auto* tangentsToAdd = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tangents = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShadowUtility*), "InitializeTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tangentsToAdd, tangents});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShadowUtility::CalculateLocalBounds
// Il2CppName: CalculateLocalBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (*)(::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::Rendering::Universal::ShadowUtility::CalculateLocalBounds)> {
  static const MethodInfo* get() {
    static auto* inVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShadowUtility*), "CalculateLocalBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inVertices});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShadowUtility::GenerateShadowMesh
// Il2CppName: GenerateShadowMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (*)(::UnityEngine::Mesh*, ::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::Rendering::Universal::ShadowUtility::GenerateShadowMesh)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* shapePath = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShadowUtility*), "GenerateShadowMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, shapePath});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShadowUtility::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
