// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Rendering.Universal.ColorGradingMode
#include "UnityEngine/Rendering/Universal/ColorGradingMode.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: PostProcessingData
  struct PostProcessingData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::PostProcessingData, "UnityEngine.Rendering.Universal", "PostProcessingData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x9
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.PostProcessingData
  // [TokenAttribute] Offset: FFFFFFFF
  struct PostProcessingData/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Rendering.Universal.ColorGradingMode gradingMode
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::Rendering::Universal::ColorGradingMode gradingMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ColorGradingMode) == 0x4);
    // public System.Int32 lutSize
    // Size: 0x4
    // Offset: 0x4
    int lutSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean useFastSRGBLinearConversion
    // Size: 0x1
    // Offset: 0x8
    bool useFastSRGBLinearConversion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: PostProcessingData
    constexpr PostProcessingData(::UnityEngine::Rendering::Universal::ColorGradingMode gradingMode_ = {}, int lutSize_ = {}, bool useFastSRGBLinearConversion_ = {}) noexcept : gradingMode{gradingMode_}, lutSize{lutSize_}, useFastSRGBLinearConversion{useFastSRGBLinearConversion_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Rendering.Universal.ColorGradingMode gradingMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ColorGradingMode& dyn_gradingMode();
    // Get instance field reference: public System.Int32 lutSize
    [[deprecated("Use field access instead!")]] int& dyn_lutSize();
    // Get instance field reference: public System.Boolean useFastSRGBLinearConversion
    [[deprecated("Use field access instead!")]] bool& dyn_useFastSRGBLinearConversion();
  }; // UnityEngine.Rendering.Universal.PostProcessingData
  #pragma pack(pop)
  static check_size<sizeof(PostProcessingData), 8 + sizeof(bool)> __UnityEngine_Rendering_Universal_PostProcessingDataSizeCheck;
  static_assert(sizeof(PostProcessingData) == 0x9);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
