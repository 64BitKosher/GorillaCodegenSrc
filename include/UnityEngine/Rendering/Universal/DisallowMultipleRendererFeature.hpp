// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DisallowMultipleRendererFeature
  class DisallowMultipleRendererFeature;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::DisallowMultipleRendererFeature);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DisallowMultipleRendererFeature*, "UnityEngine.Rendering.Universal", "DisallowMultipleRendererFeature");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.DisallowMultipleRendererFeature
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class DisallowMultipleRendererFeature : public ::System::Attribute {
    public:
    public:
    // private System.String <customTitle>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW customTitle;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return customTitle;
    }
    // Get instance field reference: private System.String <customTitle>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$customTitle$k__BackingField();
    // private System.Void set_customTitle(System.String value)
    // Offset: 0x52D4914
    void set_customTitle(::StringW value);
    // public System.String get_customTitle()
    // Offset: 0x52D491C
    ::StringW get_customTitle();
    // public System.Void .ctor(System.String customTitle)
    // Offset: 0x52D4924
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DisallowMultipleRendererFeature* New_ctor(::StringW customTitle) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DisallowMultipleRendererFeature::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DisallowMultipleRendererFeature*, creationType>(customTitle)));
    }
  }; // UnityEngine.Rendering.Universal.DisallowMultipleRendererFeature
  #pragma pack(pop)
  static check_size<sizeof(DisallowMultipleRendererFeature), 16 + sizeof(::StringW)> __UnityEngine_Rendering_Universal_DisallowMultipleRendererFeatureSizeCheck;
  static_assert(sizeof(DisallowMultipleRendererFeature) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DisallowMultipleRendererFeature::set_customTitle
// Il2CppName: set_customTitle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DisallowMultipleRendererFeature::*)(::StringW)>(&UnityEngine::Rendering::Universal::DisallowMultipleRendererFeature::set_customTitle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DisallowMultipleRendererFeature*), "set_customTitle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DisallowMultipleRendererFeature::get_customTitle
// Il2CppName: get_customTitle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Rendering::Universal::DisallowMultipleRendererFeature::*)()>(&UnityEngine::Rendering::Universal::DisallowMultipleRendererFeature::get_customTitle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DisallowMultipleRendererFeature*), "get_customTitle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DisallowMultipleRendererFeature::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
