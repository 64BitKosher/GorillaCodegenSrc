// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.RenderTextureDescriptor
#include "UnityEngine/RenderTextureDescriptor.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderPass
#include "UnityEngine/Rendering/Universal/ScriptableRenderPass.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Rendering.Universal.PostProcessParams
#include "UnityEngine/Rendering/Universal/PostProcessParams.hpp"
// Including type: UnityEngine.Rendering.HDROutputUtils
#include "UnityEngine/Rendering/HDROutputUtils.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: PostProcessData
  class PostProcessData;
  // Forward declaring type: DepthOfField
  class DepthOfField;
  // Forward declaring type: MotionBlur
  class MotionBlur;
  // Forward declaring type: PaniniProjection
  class PaniniProjection;
  // Forward declaring type: Bloom
  class Bloom;
  // Forward declaring type: LensDistortion
  class LensDistortion;
  // Forward declaring type: ChromaticAberration
  class ChromaticAberration;
  // Forward declaring type: Vignette
  class Vignette;
  // Forward declaring type: ColorLookup
  class ColorLookup;
  // Forward declaring type: ColorAdjustments
  class ColorAdjustments;
  // Forward declaring type: Tonemapping
  class Tonemapping;
  // Forward declaring type: FilmGrain
  class FilmGrain;
  // Forward declaring type: CameraData
  struct CameraData;
  // Forward declaring type: RenderingData
  struct RenderingData;
  // Forward declaring type: ScriptableRenderer
  class ScriptableRenderer;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: DepthBits
  struct DepthBits;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Rect
  struct Rect;
  // Forward declaring type: Light
  class Light;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: XRPass
  class XRPass;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: PostProcessPass
  class PostProcessPass;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::PostProcessPass);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::PostProcessPass*, "UnityEngine.Rendering.Universal", "PostProcessPass");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.PostProcessPass
  // [TokenAttribute] Offset: FFFFFFFF
  class PostProcessPass : public ::UnityEngine::Rendering::Universal::ScriptableRenderPass {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary
    class MaterialLibrary;
    // Nested type: ::UnityEngine::Rendering::Universal::PostProcessPass::ShaderConstants
    class ShaderConstants;
    // Nested type: ::UnityEngine::Rendering::Universal::PostProcessPass::$$c
    class $$c;
    // Nested type: ::UnityEngine::Rendering::Universal::PostProcessPass::$$c__DisplayClass69_0
    struct $$c__DisplayClass69_0;
    public:
    // private UnityEngine.RenderTextureDescriptor m_Descriptor
    // Size: 0x34
    // Offset: 0xE0
    ::UnityEngine::RenderTextureDescriptor m_Descriptor;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTextureDescriptor) == 0x34);
    // private UnityEngine.Rendering.RTHandle m_Source
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Rendering::RTHandle* m_Source;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_Destination
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::Rendering::RTHandle* m_Destination;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_Depth
    // Size: 0x8
    // Offset: 0x128
    ::UnityEngine::Rendering::RTHandle* m_Depth;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_InternalLut
    // Size: 0x8
    // Offset: 0x130
    ::UnityEngine::Rendering::RTHandle* m_InternalLut;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_MotionVectors
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::Rendering::RTHandle* m_MotionVectors;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_CameraTargetHandle
    // Size: 0x8
    // Offset: 0x140
    ::UnityEngine::Rendering::RTHandle* m_CameraTargetHandle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_FullCoCTexture
    // Size: 0x8
    // Offset: 0x148
    ::UnityEngine::Rendering::RTHandle* m_FullCoCTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_HalfCoCTexture
    // Size: 0x8
    // Offset: 0x150
    ::UnityEngine::Rendering::RTHandle* m_HalfCoCTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_PingTexture
    // Size: 0x8
    // Offset: 0x158
    ::UnityEngine::Rendering::RTHandle* m_PingTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_PongTexture
    // Size: 0x8
    // Offset: 0x160
    ::UnityEngine::Rendering::RTHandle* m_PongTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle[] m_BloomMipDown
    // Size: 0x8
    // Offset: 0x168
    ::ArrayW<::UnityEngine::Rendering::RTHandle*> m_BloomMipDown;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::RTHandle*>) == 0x8);
    // private UnityEngine.Rendering.RTHandle[] m_BloomMipUp
    // Size: 0x8
    // Offset: 0x170
    ::ArrayW<::UnityEngine::Rendering::RTHandle*> m_BloomMipUp;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::RTHandle*>) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_BlendTexture
    // Size: 0x8
    // Offset: 0x178
    ::UnityEngine::Rendering::RTHandle* m_BlendTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_EdgeColorTexture
    // Size: 0x8
    // Offset: 0x180
    ::UnityEngine::Rendering::RTHandle* m_EdgeColorTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_EdgeStencilTexture
    // Size: 0x8
    // Offset: 0x188
    ::UnityEngine::Rendering::RTHandle* m_EdgeStencilTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_TempTarget
    // Size: 0x8
    // Offset: 0x190
    ::UnityEngine::Rendering::RTHandle* m_TempTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_TempTarget2
    // Size: 0x8
    // Offset: 0x198
    ::UnityEngine::Rendering::RTHandle* m_TempTarget2;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.Universal.PostProcessPass/MaterialLibrary m_Materials
    // Size: 0x8
    // Offset: 0x1A0
    ::UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary* m_Materials;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary*) == 0x8);
    // private UnityEngine.Rendering.Universal.PostProcessData m_Data
    // Size: 0x8
    // Offset: 0x1A8
    ::UnityEngine::Rendering::Universal::PostProcessData* m_Data;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::PostProcessData*) == 0x8);
    // private UnityEngine.Rendering.Universal.DepthOfField m_DepthOfField
    // Size: 0x8
    // Offset: 0x1B0
    ::UnityEngine::Rendering::Universal::DepthOfField* m_DepthOfField;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DepthOfField*) == 0x8);
    // private UnityEngine.Rendering.Universal.MotionBlur m_MotionBlur
    // Size: 0x8
    // Offset: 0x1B8
    ::UnityEngine::Rendering::Universal::MotionBlur* m_MotionBlur;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::MotionBlur*) == 0x8);
    // private UnityEngine.Rendering.Universal.PaniniProjection m_PaniniProjection
    // Size: 0x8
    // Offset: 0x1C0
    ::UnityEngine::Rendering::Universal::PaniniProjection* m_PaniniProjection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::PaniniProjection*) == 0x8);
    // private UnityEngine.Rendering.Universal.Bloom m_Bloom
    // Size: 0x8
    // Offset: 0x1C8
    ::UnityEngine::Rendering::Universal::Bloom* m_Bloom;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Bloom*) == 0x8);
    // private UnityEngine.Rendering.Universal.LensDistortion m_LensDistortion
    // Size: 0x8
    // Offset: 0x1D0
    ::UnityEngine::Rendering::Universal::LensDistortion* m_LensDistortion;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LensDistortion*) == 0x8);
    // private UnityEngine.Rendering.Universal.ChromaticAberration m_ChromaticAberration
    // Size: 0x8
    // Offset: 0x1D8
    ::UnityEngine::Rendering::Universal::ChromaticAberration* m_ChromaticAberration;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ChromaticAberration*) == 0x8);
    // private UnityEngine.Rendering.Universal.Vignette m_Vignette
    // Size: 0x8
    // Offset: 0x1E0
    ::UnityEngine::Rendering::Universal::Vignette* m_Vignette;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Vignette*) == 0x8);
    // private UnityEngine.Rendering.Universal.ColorLookup m_ColorLookup
    // Size: 0x8
    // Offset: 0x1E8
    ::UnityEngine::Rendering::Universal::ColorLookup* m_ColorLookup;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ColorLookup*) == 0x8);
    // private UnityEngine.Rendering.Universal.ColorAdjustments m_ColorAdjustments
    // Size: 0x8
    // Offset: 0x1F0
    ::UnityEngine::Rendering::Universal::ColorAdjustments* m_ColorAdjustments;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ColorAdjustments*) == 0x8);
    // private UnityEngine.Rendering.Universal.Tonemapping m_Tonemapping
    // Size: 0x8
    // Offset: 0x1F8
    ::UnityEngine::Rendering::Universal::Tonemapping* m_Tonemapping;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Tonemapping*) == 0x8);
    // private UnityEngine.Rendering.Universal.FilmGrain m_FilmGrain
    // Size: 0x8
    // Offset: 0x200
    ::UnityEngine::Rendering::Universal::FilmGrain* m_FilmGrain;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::FilmGrain*) == 0x8);
    // private readonly UnityEngine.Experimental.Rendering.GraphicsFormat m_DefaultHDRFormat
    // Size: 0x4
    // Offset: 0x208
    ::UnityEngine::Experimental::Rendering::GraphicsFormat m_DefaultHDRFormat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::GraphicsFormat) == 0x4);
    // private System.Boolean m_UseRGBM
    // Size: 0x1
    // Offset: 0x20C
    bool m_UseRGBM;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly UnityEngine.Experimental.Rendering.GraphicsFormat m_SMAAEdgeFormat
    // Size: 0x4
    // Offset: 0x210
    ::UnityEngine::Experimental::Rendering::GraphicsFormat m_SMAAEdgeFormat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::GraphicsFormat) == 0x4);
    // private readonly UnityEngine.Experimental.Rendering.GraphicsFormat m_GaussianCoCFormat
    // Size: 0x4
    // Offset: 0x214
    ::UnityEngine::Experimental::Rendering::GraphicsFormat m_GaussianCoCFormat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::GraphicsFormat) == 0x4);
    // private System.Int32 m_DitheringTextureIndex
    // Size: 0x4
    // Offset: 0x218
    int m_DitheringTextureIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.RenderTargetIdentifier[] m_MRT2
    // Size: 0x8
    // Offset: 0x220
    ::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> m_MRT2;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>) == 0x8);
    // private UnityEngine.Vector4[] m_BokehKernel
    // Size: 0x8
    // Offset: 0x228
    ::ArrayW<::UnityEngine::Vector4> m_BokehKernel;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private System.Int32 m_BokehHash
    // Size: 0x4
    // Offset: 0x230
    int m_BokehHash;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_BokehMaxRadius
    // Size: 0x4
    // Offset: 0x234
    float m_BokehMaxRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_BokehRCPAspect
    // Size: 0x4
    // Offset: 0x238
    float m_BokehRCPAspect;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_IsFinalPass
    // Size: 0x1
    // Offset: 0x23C
    bool m_IsFinalPass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_HasFinalPass
    // Size: 0x1
    // Offset: 0x23D
    bool m_HasFinalPass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_EnableColorEncodingIfNeeded
    // Size: 0x1
    // Offset: 0x23E
    bool m_EnableColorEncodingIfNeeded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_UseFastSRGBLinearConversion
    // Size: 0x1
    // Offset: 0x23F
    bool m_UseFastSRGBLinearConversion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ResolveToScreen
    // Size: 0x1
    // Offset: 0x240
    bool m_ResolveToScreen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_UseSwapBuffer
    // Size: 0x1
    // Offset: 0x241
    bool m_UseSwapBuffer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Rendering.RTHandle m_ScalingSetupTarget
    // Size: 0x8
    // Offset: 0x248
    ::UnityEngine::Rendering::RTHandle* m_ScalingSetupTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_UpscaledTarget
    // Size: 0x8
    // Offset: 0x250
    ::UnityEngine::Rendering::RTHandle* m_UpscaledTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Material m_BlitMaterial
    // Size: 0x8
    // Offset: 0x258
    ::UnityEngine::Material* m_BlitMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    public:
    // static field const value: static private System.String k_RenderPostProcessingTag
    static constexpr const char* k_RenderPostProcessingTag = "Render PostProcessing Effects";
    // Get static field: static private System.String k_RenderPostProcessingTag
    static ::StringW _get_k_RenderPostProcessingTag();
    // Set static field: static private System.String k_RenderPostProcessingTag
    static void _set_k_RenderPostProcessingTag(::StringW value);
    // static field const value: static private System.String k_RenderFinalPostProcessingTag
    static constexpr const char* k_RenderFinalPostProcessingTag = "Render Final PostProcessing Pass";
    // Get static field: static private System.String k_RenderFinalPostProcessingTag
    static ::StringW _get_k_RenderFinalPostProcessingTag();
    // Set static field: static private System.String k_RenderFinalPostProcessingTag
    static void _set_k_RenderFinalPostProcessingTag(::StringW value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingRenderPostProcessing
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingRenderPostProcessing();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingRenderPostProcessing
    static void _set_m_ProfilingRenderPostProcessing(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingRenderFinalPostProcessing
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingRenderFinalPostProcessing();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingRenderFinalPostProcessing
    static void _set_m_ProfilingRenderFinalPostProcessing(::UnityEngine::Rendering::ProfilingSampler* value);
    // static field const value: static private System.Int32 k_MaxPyramidSize
    static constexpr const int k_MaxPyramidSize = 16;
    // Get static field: static private System.Int32 k_MaxPyramidSize
    static int _get_k_MaxPyramidSize();
    // Set static field: static private System.Int32 k_MaxPyramidSize
    static void _set_k_MaxPyramidSize(int value);
    // Get static field: static readonly System.Int32 k_ShaderPropertyId_ViewProjM
    static int _get_k_ShaderPropertyId_ViewProjM();
    // Set static field: static readonly System.Int32 k_ShaderPropertyId_ViewProjM
    static void _set_k_ShaderPropertyId_ViewProjM(int value);
    // Get static field: static readonly System.Int32 k_ShaderPropertyId_PrevViewProjM
    static int _get_k_ShaderPropertyId_PrevViewProjM();
    // Set static field: static readonly System.Int32 k_ShaderPropertyId_PrevViewProjM
    static void _set_k_ShaderPropertyId_PrevViewProjM(int value);
    // Get static field: static readonly System.Int32 k_ShaderPropertyId_ViewProjMStereo
    static int _get_k_ShaderPropertyId_ViewProjMStereo();
    // Set static field: static readonly System.Int32 k_ShaderPropertyId_ViewProjMStereo
    static void _set_k_ShaderPropertyId_ViewProjMStereo(int value);
    // Get static field: static readonly System.Int32 k_ShaderPropertyId_PrevViewProjMStereo
    static int _get_k_ShaderPropertyId_PrevViewProjMStereo();
    // Set static field: static readonly System.Int32 k_ShaderPropertyId_PrevViewProjMStereo
    static void _set_k_ShaderPropertyId_PrevViewProjMStereo(int value);
    // Get instance field reference: private UnityEngine.RenderTextureDescriptor m_Descriptor
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTextureDescriptor& dyn_m_Descriptor();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_Source
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_Source();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_Destination
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_Destination();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_Depth
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_Depth();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_InternalLut
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_InternalLut();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_MotionVectors
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_MotionVectors();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_CameraTargetHandle
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_CameraTargetHandle();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_FullCoCTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_FullCoCTexture();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_HalfCoCTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_HalfCoCTexture();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_PingTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_PingTexture();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_PongTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_PongTexture();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle[] m_BloomMipDown
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::RTHandle*>& dyn_m_BloomMipDown();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle[] m_BloomMipUp
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::RTHandle*>& dyn_m_BloomMipUp();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_BlendTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_BlendTexture();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_EdgeColorTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_EdgeColorTexture();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_EdgeStencilTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_EdgeStencilTexture();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_TempTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_TempTarget();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_TempTarget2
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_TempTarget2();
    // Get instance field reference: private UnityEngine.Rendering.Universal.PostProcessPass/MaterialLibrary m_Materials
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary*& dyn_m_Materials();
    // Get instance field reference: private UnityEngine.Rendering.Universal.PostProcessData m_Data
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::PostProcessData*& dyn_m_Data();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DepthOfField m_DepthOfField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DepthOfField*& dyn_m_DepthOfField();
    // Get instance field reference: private UnityEngine.Rendering.Universal.MotionBlur m_MotionBlur
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::MotionBlur*& dyn_m_MotionBlur();
    // Get instance field reference: private UnityEngine.Rendering.Universal.PaniniProjection m_PaniniProjection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::PaniniProjection*& dyn_m_PaniniProjection();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Bloom m_Bloom
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Bloom*& dyn_m_Bloom();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LensDistortion m_LensDistortion
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LensDistortion*& dyn_m_LensDistortion();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ChromaticAberration m_ChromaticAberration
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ChromaticAberration*& dyn_m_ChromaticAberration();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Vignette m_Vignette
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Vignette*& dyn_m_Vignette();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ColorLookup m_ColorLookup
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ColorLookup*& dyn_m_ColorLookup();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ColorAdjustments m_ColorAdjustments
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ColorAdjustments*& dyn_m_ColorAdjustments();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Tonemapping m_Tonemapping
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Tonemapping*& dyn_m_Tonemapping();
    // Get instance field reference: private UnityEngine.Rendering.Universal.FilmGrain m_FilmGrain
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::FilmGrain*& dyn_m_FilmGrain();
    // Get instance field reference: private readonly UnityEngine.Experimental.Rendering.GraphicsFormat m_DefaultHDRFormat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::GraphicsFormat& dyn_m_DefaultHDRFormat();
    // Get instance field reference: private System.Boolean m_UseRGBM
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseRGBM();
    // Get instance field reference: private readonly UnityEngine.Experimental.Rendering.GraphicsFormat m_SMAAEdgeFormat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::GraphicsFormat& dyn_m_SMAAEdgeFormat();
    // Get instance field reference: private readonly UnityEngine.Experimental.Rendering.GraphicsFormat m_GaussianCoCFormat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::GraphicsFormat& dyn_m_GaussianCoCFormat();
    // Get instance field reference: private System.Int32 m_DitheringTextureIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_DitheringTextureIndex();
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetIdentifier[] m_MRT2
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>& dyn_m_MRT2();
    // Get instance field reference: private UnityEngine.Vector4[] m_BokehKernel
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_BokehKernel();
    // Get instance field reference: private System.Int32 m_BokehHash
    [[deprecated("Use field access instead!")]] int& dyn_m_BokehHash();
    // Get instance field reference: private System.Single m_BokehMaxRadius
    [[deprecated("Use field access instead!")]] float& dyn_m_BokehMaxRadius();
    // Get instance field reference: private System.Single m_BokehRCPAspect
    [[deprecated("Use field access instead!")]] float& dyn_m_BokehRCPAspect();
    // Get instance field reference: private System.Boolean m_IsFinalPass
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsFinalPass();
    // Get instance field reference: private System.Boolean m_HasFinalPass
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasFinalPass();
    // Get instance field reference: private System.Boolean m_EnableColorEncodingIfNeeded
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableColorEncodingIfNeeded();
    // Get instance field reference: private System.Boolean m_UseFastSRGBLinearConversion
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseFastSRGBLinearConversion();
    // Get instance field reference: private System.Boolean m_ResolveToScreen
    [[deprecated("Use field access instead!")]] bool& dyn_m_ResolveToScreen();
    // Get instance field reference: private System.Boolean m_UseSwapBuffer
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseSwapBuffer();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_ScalingSetupTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_ScalingSetupTarget();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_UpscaledTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_UpscaledTarget();
    // Get instance field reference: private UnityEngine.Material m_BlitMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_BlitMaterial();
    // public System.Void .ctor(UnityEngine.Rendering.Universal.RenderPassEvent evt, UnityEngine.Rendering.Universal.PostProcessData data, ref UnityEngine.Rendering.Universal.PostProcessParams postProcessParams)
    // Offset: 0x52C775C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PostProcessPass* New_ctor(::UnityEngine::Rendering::Universal::RenderPassEvent evt, ::UnityEngine::Rendering::Universal::PostProcessData* data, ByRef<::UnityEngine::Rendering::Universal::PostProcessParams> postProcessParams) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::PostProcessPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PostProcessPass*, creationType>(evt, data, byref(postProcessParams))));
    }
    // public System.Void Cleanup()
    // Offset: 0x52C7D88
    void Cleanup();
    // public System.Void Dispose()
    // Offset: 0x52C7DA4
    void Dispose();
    // public System.Void Setup(in UnityEngine.RenderTextureDescriptor baseDescriptor, in UnityEngine.Rendering.RTHandle source, System.Boolean resolveToScreen, in UnityEngine.Rendering.RTHandle depth, in UnityEngine.Rendering.RTHandle internalLut, in UnityEngine.Rendering.RTHandle motionVectors, System.Boolean hasFinalPass, System.Boolean enableColorEncoding)
    // Offset: 0x52C7F50
    void Setup(ByRef<::UnityEngine::RenderTextureDescriptor> baseDescriptor, ByRef<::UnityEngine::Rendering::RTHandle*> source, bool resolveToScreen, ByRef<::UnityEngine::Rendering::RTHandle*> depth, ByRef<::UnityEngine::Rendering::RTHandle*> internalLut, ByRef<::UnityEngine::Rendering::RTHandle*> motionVectors, bool hasFinalPass, bool enableColorEncoding);
    // public System.Void Setup(in UnityEngine.RenderTextureDescriptor baseDescriptor, in UnityEngine.Rendering.RTHandle source, UnityEngine.Rendering.RTHandle destination, in UnityEngine.Rendering.RTHandle depth, in UnityEngine.Rendering.RTHandle internalLut, System.Boolean hasFinalPass, System.Boolean enableColorEncoding)
    // Offset: 0x52C8098
    void Setup(ByRef<::UnityEngine::RenderTextureDescriptor> baseDescriptor, ByRef<::UnityEngine::Rendering::RTHandle*> source, ::UnityEngine::Rendering::RTHandle* destination, ByRef<::UnityEngine::Rendering::RTHandle*> depth, ByRef<::UnityEngine::Rendering::RTHandle*> internalLut, bool hasFinalPass, bool enableColorEncoding);
    // public System.Void SetupFinalPass(in UnityEngine.Rendering.RTHandle source, System.Boolean useSwapBuffer, System.Boolean enableColorEncoding)
    // Offset: 0x52C816C
    void SetupFinalPass(ByRef<::UnityEngine::Rendering::RTHandle*> source, bool useSwapBuffer, bool enableColorEncoding);
    // public System.Boolean CanRunOnTile()
    // Offset: 0x52C8224
    bool CanRunOnTile();
    // private UnityEngine.RenderTextureDescriptor GetCompatibleDescriptor()
    // Offset: 0x52CA52C
    ::UnityEngine::RenderTextureDescriptor GetCompatibleDescriptor();
    // private UnityEngine.RenderTextureDescriptor GetCompatibleDescriptor(System.Int32 width, System.Int32 height, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Rendering.DepthBits depthBufferBits)
    // Offset: 0x52CA5A0
    ::UnityEngine::RenderTextureDescriptor GetCompatibleDescriptor(int width, int height, ::UnityEngine::Experimental::Rendering::GraphicsFormat format, ::UnityEngine::Rendering::DepthBits depthBufferBits);
    // static UnityEngine.RenderTextureDescriptor GetCompatibleDescriptor(UnityEngine.RenderTextureDescriptor desc, System.Int32 width, System.Int32 height, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Rendering.DepthBits depthBufferBits)
    // Offset: 0x52CA698
    static ::UnityEngine::RenderTextureDescriptor GetCompatibleDescriptor(::UnityEngine::RenderTextureDescriptor desc, int width, int height, ::UnityEngine::Experimental::Rendering::GraphicsFormat format, ::UnityEngine::Rendering::DepthBits depthBufferBits);
    // private System.Boolean RequireSRGBConversionBlitToBackBuffer(ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52CA708
    bool RequireSRGBConversionBlitToBackBuffer(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // private System.Boolean RequireHDROutput(ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52CA73C
    bool RequireHDROutput(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // private System.Void Render(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52C8EC4
    void Render(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void DoSubpixelMorphologicalAntialiasing(ref UnityEngine.Rendering.Universal.CameraData cameraData, UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle source, UnityEngine.Rendering.RTHandle destination)
    // Offset: 0x52CAA14
    void DoSubpixelMorphologicalAntialiasing(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, ::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RTHandle* source, ::UnityEngine::Rendering::RTHandle* destination);
    // private System.Void DoDepthOfField(UnityEngine.Camera camera, UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle source, UnityEngine.Rendering.RTHandle destination, UnityEngine.Rect pixelRect)
    // Offset: 0x52CB000
    void DoDepthOfField(::UnityEngine::Camera* camera, ::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RTHandle* source, ::UnityEngine::Rendering::RTHandle* destination, ::UnityEngine::Rect pixelRect);
    // private System.Void DoGaussianDepthOfField(UnityEngine.Camera camera, UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle source, UnityEngine.Rendering.RTHandle destination, UnityEngine.Rect pixelRect)
    // Offset: 0x52CD318
    void DoGaussianDepthOfField(::UnityEngine::Camera* camera, ::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RTHandle* source, ::UnityEngine::Rendering::RTHandle* destination, ::UnityEngine::Rect pixelRect);
    // private System.Void PrepareBokehKernel(System.Single maxRadius, System.Single rcpAspect)
    // Offset: 0x52CE0EC
    void PrepareBokehKernel(float maxRadius, float rcpAspect);
    // static private System.Single GetMaxBokehRadiusInPixels(System.Single viewportHeight)
    // Offset: 0x52CE350
    static float GetMaxBokehRadiusInPixels(float viewportHeight);
    // private System.Void DoBokehDepthOfField(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle source, UnityEngine.Rendering.RTHandle destination, UnityEngine.Rect pixelRect)
    // Offset: 0x52CDAC0
    void DoBokehDepthOfField(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RTHandle* source, ::UnityEngine::Rendering::RTHandle* destination, ::UnityEngine::Rect pixelRect);
    // static private System.Single GetLensFlareLightAttenuation(UnityEngine.Light light, UnityEngine.Camera cam, UnityEngine.Vector3 wo)
    // Offset: 0x52CE368
    static float GetLensFlareLightAttenuation(::UnityEngine::Light* light, ::UnityEngine::Camera* cam, ::UnityEngine::Vector3 wo);
    // private System.Void LensFlareDataDrivenComputeOcclusion(UnityEngine.Camera camera, UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RenderTargetIdentifier source, System.Boolean usePanini, System.Single paniniDistance, System.Single paniniCropToFit)
    // Offset: 0x52CC054
    void LensFlareDataDrivenComputeOcclusion(::UnityEngine::Camera* camera, ::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RenderTargetIdentifier source, bool usePanini, float paniniDistance, float paniniCropToFit);
    // private System.Void LensFlareDataDriven(UnityEngine.Camera camera, UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RenderTargetIdentifier source, System.Boolean usePanini, System.Single paniniDistance, System.Single paniniCropToFit)
    // Offset: 0x52CC340
    void LensFlareDataDriven(::UnityEngine::Camera* camera, ::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RenderTargetIdentifier source, bool usePanini, float paniniDistance, float paniniCropToFit);
    // static System.Void UpdateMotionBlurMatrices(ref UnityEngine.Material material, UnityEngine.Camera camera, UnityEngine.Experimental.Rendering.XRPass xr)
    // Offset: 0x52CE580
    static void UpdateMotionBlurMatrices(ByRef<::UnityEngine::Material*> material, ::UnityEngine::Camera* camera, ::UnityEngine::Experimental::Rendering::XRPass* xr);
    // private System.Void DoMotionBlur(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle source, UnityEngine.Rendering.RTHandle destination, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52CB0C0
    void DoMotionBlur(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RTHandle* source, ::UnityEngine::Rendering::RTHandle* destination, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // private System.Void DoPaniniProjection(UnityEngine.Camera camera, UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle source, UnityEngine.Rendering.RTHandle destination)
    // Offset: 0x52CB288
    void DoPaniniProjection(::UnityEngine::Camera* camera, ::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RTHandle* source, ::UnityEngine::Rendering::RTHandle* destination);
    // private UnityEngine.Vector2 CalcViewExtents(UnityEngine.Camera camera)
    // Offset: 0x52CE788
    ::UnityEngine::Vector2 CalcViewExtents(::UnityEngine::Camera* camera);
    // private UnityEngine.Vector2 CalcCropExtents(UnityEngine.Camera camera, System.Single d)
    // Offset: 0x52CE7E4
    ::UnityEngine::Vector2 CalcCropExtents(::UnityEngine::Camera* camera, float d);
    // private System.Void SetupBloom(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle source, UnityEngine.Material uberMaterial)
    // Offset: 0x52CB4BC
    void SetupBloom(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RTHandle* source, ::UnityEngine::Material* uberMaterial);
    // private System.Void SetupLensDistortion(UnityEngine.Material material, System.Boolean isSceneView)
    // Offset: 0x52CC750
    void SetupLensDistortion(::UnityEngine::Material* material, bool isSceneView);
    // private System.Void SetupChromaticAberration(UnityEngine.Material material)
    // Offset: 0x52CCA1C
    void SetupChromaticAberration(::UnityEngine::Material* material);
    // private System.Void SetupVignette(UnityEngine.Material material, UnityEngine.Experimental.Rendering.XRPass xrPass)
    // Offset: 0x52CCB24
    void SetupVignette(::UnityEngine::Material* material, ::UnityEngine::Experimental::Rendering::XRPass* xrPass);
    // private System.Void SetupColorGrading(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Material material)
    // Offset: 0x52CCD70
    void SetupColorGrading(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::UnityEngine::Material* material);
    // private System.Void SetupGrain(ref UnityEngine.Rendering.Universal.CameraData cameraData, UnityEngine.Material material)
    // Offset: 0x52CD0C0
    void SetupGrain(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, ::UnityEngine::Material* material);
    // private System.Void SetupDithering(ref UnityEngine.Rendering.Universal.CameraData cameraData, UnityEngine.Material material)
    // Offset: 0x52CD168
    void SetupDithering(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, ::UnityEngine::Material* material);
    // private System.Void SetupHDROutput(UnityEngine.Material material, UnityEngine.Rendering.HDROutputUtils/Operation hdrOperations)
    // Offset: 0x52CD200
    void SetupHDROutput(::UnityEngine::Material* material, ::UnityEngine::Rendering::HDROutputUtils::Operation hdrOperations);
    // private System.Void RenderFinalPass(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52C8648
    void RenderFinalPass(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private UnityEngine.Rendering.RTHandle <Render>g__GetSource|69_0(ref UnityEngine.Rendering.Universal.PostProcessPass/<>c__DisplayClass69_0 )
    // Offset: 0x52CA770
    ::UnityEngine::Rendering::RTHandle* $Render$g__GetSource_69_0(ByRef<::UnityEngine::Rendering::Universal::PostProcessPass::$$c__DisplayClass69_0> param_0);
    // private UnityEngine.Rendering.RTHandle <Render>g__GetDestination|69_1(ref UnityEngine.Rendering.Universal.PostProcessPass/<>c__DisplayClass69_0 )
    // Offset: 0x52CA778
    ::UnityEngine::Rendering::RTHandle* $Render$g__GetDestination_69_1(ByRef<::UnityEngine::Rendering::Universal::PostProcessPass::$$c__DisplayClass69_0> param_0);
    // private System.Void <Render>g__Swap|69_2(ref UnityEngine.Rendering.Universal.ScriptableRenderer r, ref UnityEngine.Rendering.Universal.PostProcessPass/<>c__DisplayClass69_0 )
    // Offset: 0x52CA8DC
    void $Render$g__Swap_69_2(ByRef<::UnityEngine::Rendering::Universal::ScriptableRenderer*> r, ByRef<::UnityEngine::Rendering::Universal::PostProcessPass::$$c__DisplayClass69_0> param_1);
    // public override System.Void OnCameraSetup(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52C8218
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::OnCameraSetup(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void OnCameraSetup(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public override System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52C822C
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void Execute(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // static private System.Void .cctor()
    // Offset: 0x52CE838
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::.cctor()
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.PostProcessPass
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)()>(&UnityEngine::Rendering::Universal::PostProcessPass::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)()>(&UnityEngine::Rendering::Universal::PostProcessPass::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(ByRef<::UnityEngine::RenderTextureDescriptor>, ByRef<::UnityEngine::Rendering::RTHandle*>, bool, ByRef<::UnityEngine::Rendering::RTHandle*>, ByRef<::UnityEngine::Rendering::RTHandle*>, ByRef<::UnityEngine::Rendering::RTHandle*>, bool, bool)>(&UnityEngine::Rendering::Universal::PostProcessPass::Setup)> {
  static const MethodInfo* get() {
    static auto* baseDescriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->this_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->this_arg;
    static auto* resolveToScreen = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->this_arg;
    static auto* internalLut = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->this_arg;
    static auto* motionVectors = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->this_arg;
    static auto* hasFinalPass = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* enableColorEncoding = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseDescriptor, source, resolveToScreen, depth, internalLut, motionVectors, hasFinalPass, enableColorEncoding});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(ByRef<::UnityEngine::RenderTextureDescriptor>, ByRef<::UnityEngine::Rendering::RTHandle*>, ::UnityEngine::Rendering::RTHandle*, ByRef<::UnityEngine::Rendering::RTHandle*>, ByRef<::UnityEngine::Rendering::RTHandle*>, bool, bool)>(&UnityEngine::Rendering::Universal::PostProcessPass::Setup)> {
  static const MethodInfo* get() {
    static auto* baseDescriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->this_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->this_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->this_arg;
    static auto* internalLut = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->this_arg;
    static auto* hasFinalPass = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* enableColorEncoding = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseDescriptor, source, destination, depth, internalLut, hasFinalPass, enableColorEncoding});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::SetupFinalPass
// Il2CppName: SetupFinalPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(ByRef<::UnityEngine::Rendering::RTHandle*>, bool, bool)>(&UnityEngine::Rendering::Universal::PostProcessPass::SetupFinalPass)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->this_arg;
    static auto* useSwapBuffer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* enableColorEncoding = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "SetupFinalPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, useSwapBuffer, enableColorEncoding});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::CanRunOnTile
// Il2CppName: CanRunOnTile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::PostProcessPass::*)()>(&UnityEngine::Rendering::Universal::PostProcessPass::CanRunOnTile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "CanRunOnTile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::GetCompatibleDescriptor
// Il2CppName: GetCompatibleDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTextureDescriptor (UnityEngine::Rendering::Universal::PostProcessPass::*)()>(&UnityEngine::Rendering::Universal::PostProcessPass::GetCompatibleDescriptor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "GetCompatibleDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::GetCompatibleDescriptor
// Il2CppName: GetCompatibleDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTextureDescriptor (UnityEngine::Rendering::Universal::PostProcessPass::*)(int, int, ::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::Rendering::DepthBits)>(&UnityEngine::Rendering::Universal::PostProcessPass::GetCompatibleDescriptor)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* depthBufferBits = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DepthBits")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "GetCompatibleDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, format, depthBufferBits});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::GetCompatibleDescriptor
// Il2CppName: GetCompatibleDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTextureDescriptor (*)(::UnityEngine::RenderTextureDescriptor, int, int, ::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::Rendering::DepthBits)>(&UnityEngine::Rendering::Universal::PostProcessPass::GetCompatibleDescriptor)> {
  static const MethodInfo* get() {
    static auto* desc = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* depthBufferBits = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DepthBits")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "GetCompatibleDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desc, width, height, format, depthBufferBits});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::RequireSRGBConversionBlitToBackBuffer
// Il2CppName: RequireSRGBConversionBlitToBackBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::PostProcessPass::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::PostProcessPass::RequireSRGBConversionBlitToBackBuffer)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "RequireSRGBConversionBlitToBackBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::RequireHDROutput
// Il2CppName: RequireHDROutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::PostProcessPass::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::PostProcessPass::RequireHDROutput)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "RequireHDROutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::PostProcessPass::Render)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::DoSubpixelMorphologicalAntialiasing
// Il2CppName: DoSubpixelMorphologicalAntialiasing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>, ::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::PostProcessPass::DoSubpixelMorphologicalAntialiasing)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "DoSubpixelMorphologicalAntialiasing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData, cmd, source, destination});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::DoDepthOfField
// Il2CppName: DoDepthOfField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Camera*, ::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rect)>(&UnityEngine::Rendering::Universal::PostProcessPass::DoDepthOfField)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* pixelRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "DoDepthOfField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, cmd, source, destination, pixelRect});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::DoGaussianDepthOfField
// Il2CppName: DoGaussianDepthOfField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Camera*, ::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rect)>(&UnityEngine::Rendering::Universal::PostProcessPass::DoGaussianDepthOfField)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* pixelRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "DoGaussianDepthOfField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, cmd, source, destination, pixelRect});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::PrepareBokehKernel
// Il2CppName: PrepareBokehKernel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(float, float)>(&UnityEngine::Rendering::Universal::PostProcessPass::PrepareBokehKernel)> {
  static const MethodInfo* get() {
    static auto* maxRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rcpAspect = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "PrepareBokehKernel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxRadius, rcpAspect});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::GetMaxBokehRadiusInPixels
// Il2CppName: GetMaxBokehRadiusInPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&UnityEngine::Rendering::Universal::PostProcessPass::GetMaxBokehRadiusInPixels)> {
  static const MethodInfo* get() {
    static auto* viewportHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "GetMaxBokehRadiusInPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewportHeight});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::DoBokehDepthOfField
// Il2CppName: DoBokehDepthOfField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rect)>(&UnityEngine::Rendering::Universal::PostProcessPass::DoBokehDepthOfField)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* pixelRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "DoBokehDepthOfField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, source, destination, pixelRect});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::GetLensFlareLightAttenuation
// Il2CppName: GetLensFlareLightAttenuation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Light*, ::UnityEngine::Camera*, ::UnityEngine::Vector3)>(&UnityEngine::Rendering::Universal::PostProcessPass::GetLensFlareLightAttenuation)> {
  static const MethodInfo* get() {
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine", "Light")->byval_arg;
    static auto* cam = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* wo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "GetLensFlareLightAttenuation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{light, cam, wo});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::LensFlareDataDrivenComputeOcclusion
// Il2CppName: LensFlareDataDrivenComputeOcclusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Camera*, ::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RenderTargetIdentifier, bool, float, float)>(&UnityEngine::Rendering::Universal::PostProcessPass::LensFlareDataDrivenComputeOcclusion)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* usePanini = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* paniniDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* paniniCropToFit = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "LensFlareDataDrivenComputeOcclusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, cmd, source, usePanini, paniniDistance, paniniCropToFit});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::LensFlareDataDriven
// Il2CppName: LensFlareDataDriven
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Camera*, ::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RenderTargetIdentifier, bool, float, float)>(&UnityEngine::Rendering::Universal::PostProcessPass::LensFlareDataDriven)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* usePanini = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* paniniDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* paniniCropToFit = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "LensFlareDataDriven", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, cmd, source, usePanini, paniniDistance, paniniCropToFit});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::UpdateMotionBlurMatrices
// Il2CppName: UpdateMotionBlurMatrices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Material*>, ::UnityEngine::Camera*, ::UnityEngine::Experimental::Rendering::XRPass*)>(&UnityEngine::Rendering::Universal::PostProcessPass::UpdateMotionBlurMatrices)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->this_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* xr = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "XRPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "UpdateMotionBlurMatrices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material, camera, xr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::DoMotionBlur
// Il2CppName: DoMotionBlur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::PostProcessPass::DoMotionBlur)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "DoMotionBlur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, source, destination, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::DoPaniniProjection
// Il2CppName: DoPaniniProjection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Camera*, ::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::PostProcessPass::DoPaniniProjection)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "DoPaniniProjection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, cmd, source, destination});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::CalcViewExtents
// Il2CppName: CalcViewExtents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Camera*)>(&UnityEngine::Rendering::Universal::PostProcessPass::CalcViewExtents)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "CalcViewExtents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::CalcCropExtents
// Il2CppName: CalcCropExtents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Camera*, float)>(&UnityEngine::Rendering::Universal::PostProcessPass::CalcCropExtents)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "CalcCropExtents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, d});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::SetupBloom
// Il2CppName: SetupBloom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Material*)>(&UnityEngine::Rendering::Universal::PostProcessPass::SetupBloom)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* uberMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "SetupBloom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, source, uberMaterial});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::SetupLensDistortion
// Il2CppName: SetupLensDistortion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Material*, bool)>(&UnityEngine::Rendering::Universal::PostProcessPass::SetupLensDistortion)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* isSceneView = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "SetupLensDistortion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material, isSceneView});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::SetupChromaticAberration
// Il2CppName: SetupChromaticAberration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Material*)>(&UnityEngine::Rendering::Universal::PostProcessPass::SetupChromaticAberration)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "SetupChromaticAberration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::SetupVignette
// Il2CppName: SetupVignette
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Material*, ::UnityEngine::Experimental::Rendering::XRPass*)>(&UnityEngine::Rendering::Universal::PostProcessPass::SetupVignette)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* xrPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "XRPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "SetupVignette", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material, xrPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::SetupColorGrading
// Il2CppName: SetupColorGrading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Material*)>(&UnityEngine::Rendering::Universal::PostProcessPass::SetupColorGrading)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "SetupColorGrading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData, material});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::SetupGrain
// Il2CppName: SetupGrain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>, ::UnityEngine::Material*)>(&UnityEngine::Rendering::Universal::PostProcessPass::SetupGrain)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "SetupGrain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData, material});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::SetupDithering
// Il2CppName: SetupDithering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>, ::UnityEngine::Material*)>(&UnityEngine::Rendering::Universal::PostProcessPass::SetupDithering)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "SetupDithering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData, material});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::SetupHDROutput
// Il2CppName: SetupHDROutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Material*, ::UnityEngine::Rendering::HDROutputUtils::Operation)>(&UnityEngine::Rendering::Universal::PostProcessPass::SetupHDROutput)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* hdrOperations = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "HDROutputUtils/Operation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "SetupHDROutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material, hdrOperations});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::RenderFinalPass
// Il2CppName: RenderFinalPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::PostProcessPass::RenderFinalPass)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "RenderFinalPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::$Render$g__GetSource_69_0
// Il2CppName: <Render>g__GetSource|69_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::PostProcessPass::*)(ByRef<::UnityEngine::Rendering::Universal::PostProcessPass::$$c__DisplayClass69_0>)>(&UnityEngine::Rendering::Universal::PostProcessPass::$Render$g__GetSource_69_0)> {
  static const MethodInfo* get() {
    static auto* param_0 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PostProcessPass/<>c__DisplayClass69_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "<Render>g__GetSource|69_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{param_0});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::$Render$g__GetDestination_69_1
// Il2CppName: <Render>g__GetDestination|69_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::PostProcessPass::*)(ByRef<::UnityEngine::Rendering::Universal::PostProcessPass::$$c__DisplayClass69_0>)>(&UnityEngine::Rendering::Universal::PostProcessPass::$Render$g__GetDestination_69_1)> {
  static const MethodInfo* get() {
    static auto* param_0 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PostProcessPass/<>c__DisplayClass69_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "<Render>g__GetDestination|69_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{param_0});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::$Render$g__Swap_69_2
// Il2CppName: <Render>g__Swap|69_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(ByRef<::UnityEngine::Rendering::Universal::ScriptableRenderer*>, ByRef<::UnityEngine::Rendering::Universal::PostProcessPass::$$c__DisplayClass69_0>)>(&UnityEngine::Rendering::Universal::PostProcessPass::$Render$g__Swap_69_2)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer")->this_arg;
    static auto* param_1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PostProcessPass/<>c__DisplayClass69_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "<Render>g__Swap|69_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r, param_1});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::OnCameraSetup
// Il2CppName: OnCameraSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::PostProcessPass::OnCameraSetup)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "OnCameraSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::PostProcessPass::Execute)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::PostProcessPass::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
