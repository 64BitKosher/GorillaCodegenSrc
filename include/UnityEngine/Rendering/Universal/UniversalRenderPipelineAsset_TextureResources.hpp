// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset
#include "UnityEngine/Rendering/Universal/UniversalRenderPipelineAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::TextureResources);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::TextureResources*, "UnityEngine.Rendering.Universal", "UniversalRenderPipelineAsset/TextureResources");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset/TextureResources
  // [TokenAttribute] Offset: FFFFFFFF
  // [ReloadGroupAttribute] Offset: FFFFFFFF
  class UniversalRenderPipelineAsset::TextureResources : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Texture2D blueNoise64LTex
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Texture2D* blueNoise64LTex;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public UnityEngine.Texture2D bayerMatrixTex
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Texture2D* bayerMatrixTex;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Texture2D blueNoise64LTex
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_blueNoise64LTex();
    // Get instance field reference: public UnityEngine.Texture2D bayerMatrixTex
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_bayerMatrixTex();
    // public System.Boolean NeedsReload()
    // Offset: 0x5293DA8
    bool NeedsReload();
    // public System.Void .ctor()
    // Offset: 0x52934E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UniversalRenderPipelineAsset::TextureResources* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::TextureResources::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UniversalRenderPipelineAsset::TextureResources*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset/TextureResources
  #pragma pack(pop)
  static check_size<sizeof(UniversalRenderPipelineAsset::TextureResources), 24 + sizeof(::UnityEngine::Texture2D*)> __UnityEngine_Rendering_Universal_UniversalRenderPipelineAsset_TextureResourcesSizeCheck;
  static_assert(sizeof(UniversalRenderPipelineAsset::TextureResources) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::TextureResources::NeedsReload
// Il2CppName: NeedsReload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::TextureResources::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::TextureResources::NeedsReload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::TextureResources*), "NeedsReload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::TextureResources::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
