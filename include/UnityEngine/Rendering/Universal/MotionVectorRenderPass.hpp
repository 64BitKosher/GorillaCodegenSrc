// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderPass
#include "UnityEngine/Rendering/Universal/ScriptableRenderPass.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
  // Forward declaring type: DrawingSettings
  struct DrawingSettings;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: RenderTextureDescriptor
  struct RenderTextureDescriptor;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraph
  class RenderGraph;
  // Forward declaring type: TextureHandle
  struct TextureHandle;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: MotionVectorRenderPass
  class MotionVectorRenderPass;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::MotionVectorRenderPass);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::MotionVectorRenderPass*, "UnityEngine.Rendering.Universal", "MotionVectorRenderPass");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.MotionVectorRenderPass
  // [TokenAttribute] Offset: FFFFFFFF
  class MotionVectorRenderPass : public ::UnityEngine::Rendering::Universal::ScriptableRenderPass {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::MotionVectorRenderPass::PassData
    class PassData;
    // Nested type: ::UnityEngine::Rendering::Universal::MotionVectorRenderPass::$$c
    class $$c;
    public:
    // private UnityEngine.Rendering.RTHandle m_Color
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::Rendering::RTHandle* m_Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_Depth
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Rendering::RTHandle* m_Depth;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private readonly UnityEngine.Material m_CameraMaterial
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::Material* m_CameraMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private readonly UnityEngine.Material m_ObjectMaterial
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Material* m_ObjectMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Rendering.Universal.MotionVectorRenderPass/PassData m_PassData
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::Rendering::Universal::MotionVectorRenderPass::PassData* m_PassData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::MotionVectorRenderPass::PassData*) == 0x8);
    public:
    // static field const value: static private System.String kPreviousViewProjectionNoJitter
    static constexpr const char* kPreviousViewProjectionNoJitter = "_PrevViewProjMatrix";
    // Get static field: static private System.String kPreviousViewProjectionNoJitter
    static ::StringW _get_kPreviousViewProjectionNoJitter();
    // Set static field: static private System.String kPreviousViewProjectionNoJitter
    static void _set_kPreviousViewProjectionNoJitter(::StringW value);
    // static field const value: static private System.String kViewProjectionNoJitter
    static constexpr const char* kViewProjectionNoJitter = "_NonJitteredViewProjMatrix";
    // Get static field: static private System.String kViewProjectionNoJitter
    static ::StringW _get_kViewProjectionNoJitter();
    // Set static field: static private System.String kViewProjectionNoJitter
    static void _set_kViewProjectionNoJitter(::StringW value);
    // static field const value: static private System.String kPreviousViewProjectionNoJitterStereo
    static constexpr const char* kPreviousViewProjectionNoJitterStereo = "_PrevViewProjMatrixStereo";
    // Get static field: static private System.String kPreviousViewProjectionNoJitterStereo
    static ::StringW _get_kPreviousViewProjectionNoJitterStereo();
    // Set static field: static private System.String kPreviousViewProjectionNoJitterStereo
    static void _set_kPreviousViewProjectionNoJitterStereo(::StringW value);
    // static field const value: static private System.String kViewProjectionNoJitterStereo
    static constexpr const char* kViewProjectionNoJitterStereo = "_NonJitteredViewProjMatrixStereo";
    // Get static field: static private System.String kViewProjectionNoJitterStereo
    static ::StringW _get_kViewProjectionNoJitterStereo();
    // Set static field: static private System.String kViewProjectionNoJitterStereo
    static void _set_kViewProjectionNoJitterStereo(::StringW value);
    // static field const value: static UnityEngine.Experimental.Rendering.GraphicsFormat k_TargetFormat
    static constexpr const int k_TargetFormat = 46;
    // Get static field: static UnityEngine.Experimental.Rendering.GraphicsFormat k_TargetFormat
    static ::UnityEngine::Experimental::Rendering::GraphicsFormat _get_k_TargetFormat();
    // Set static field: static UnityEngine.Experimental.Rendering.GraphicsFormat k_TargetFormat
    static void _set_k_TargetFormat(::UnityEngine::Experimental::Rendering::GraphicsFormat value);
    // Get static field: static private readonly System.String[] s_ShaderTags
    static ::ArrayW<::StringW> _get_s_ShaderTags();
    // Set static field: static private readonly System.String[] s_ShaderTags
    static void _set_s_ShaderTags(::ArrayW<::StringW> value);
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_Color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_Color();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_Depth
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_Depth();
    // Get instance field reference: private readonly UnityEngine.Material m_CameraMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_CameraMaterial();
    // Get instance field reference: private readonly UnityEngine.Material m_ObjectMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_ObjectMaterial();
    // Get instance field reference: private UnityEngine.Rendering.Universal.MotionVectorRenderPass/PassData m_PassData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::MotionVectorRenderPass::PassData*& dyn_m_PassData();
    // System.Void .ctor(UnityEngine.Material cameraMaterial, UnityEngine.Material objectMaterial)
    // Offset: 0x52C65C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MotionVectorRenderPass* New_ctor(::UnityEngine::Material* cameraMaterial, ::UnityEngine::Material* objectMaterial) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::MotionVectorRenderPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MotionVectorRenderPass*, creationType>(cameraMaterial, objectMaterial)));
    }
    // System.Void Setup(UnityEngine.Rendering.RTHandle color, UnityEngine.Rendering.RTHandle depth)
    // Offset: 0x52C66CC
    void Setup(::UnityEngine::Rendering::RTHandle* color, ::UnityEngine::Rendering::RTHandle* depth);
    // static private System.Void ExecutePass(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Rendering.Universal.MotionVectorRenderPass/PassData passData, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52C67D8
    static void ExecutePass(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Rendering::Universal::MotionVectorRenderPass::PassData* passData, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // static private UnityEngine.Rendering.DrawingSettings GetDrawingSettings(ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Material objectMaterial)
    // Offset: 0x52C7018
    static ::UnityEngine::Rendering::DrawingSettings GetDrawingSettings(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::UnityEngine::Material* objectMaterial);
    // static private System.Void DrawCameraMotionVectors(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Camera camera, UnityEngine.Material cameraMaterial)
    // Offset: 0x52C6BC8
    static void DrawCameraMotionVectors(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::UnityEngine::Camera* camera, ::UnityEngine::Material* cameraMaterial);
    // static private System.Void DrawObjectMotionVectors(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Camera camera, UnityEngine.Material objectMaterial, UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52C6D64
    static void DrawObjectMotionVectors(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::UnityEngine::Camera* camera, ::UnityEngine::Material* objectMaterial, ::UnityEngine::Rendering::CommandBuffer* cmd);
    // System.Void Render(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, ref UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle cameraDepthTexture, in UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle motionVectorColor, in UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle motionVectorDepth, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52C723C
    void Render(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> cameraDepthTexture, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> motionVectorColor, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> motionVectorDepth, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public override System.Void Configure(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.RenderTextureDescriptor cameraTextureDescriptor)
    // Offset: 0x52C66FC
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Configure(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.RenderTextureDescriptor cameraTextureDescriptor)
    void Configure(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::RenderTextureDescriptor cameraTextureDescriptor);
    // public override System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52C6F74
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void Execute(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // static private System.Void .cctor()
    // Offset: 0x52C7558
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::.cctor()
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.MotionVectorRenderPass
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorRenderPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorRenderPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::MotionVectorRenderPass::*)(::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::MotionVectorRenderPass::Setup)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorRenderPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, depth});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorRenderPass::ExecutePass
// Il2CppName: ExecutePass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Rendering::Universal::MotionVectorRenderPass::PassData*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::MotionVectorRenderPass::ExecutePass)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* passData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "MotionVectorRenderPass/PassData")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorRenderPass*), "ExecutePass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, passData, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorRenderPass::GetDrawingSettings
// Il2CppName: GetDrawingSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::DrawingSettings (*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Material*)>(&UnityEngine::Rendering::Universal::MotionVectorRenderPass::GetDrawingSettings)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* objectMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorRenderPass*), "GetDrawingSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData, objectMaterial});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorRenderPass::DrawCameraMotionVectors
// Il2CppName: DrawCameraMotionVectors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Camera*, ::UnityEngine::Material*)>(&UnityEngine::Rendering::Universal::MotionVectorRenderPass::DrawCameraMotionVectors)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cameraMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorRenderPass*), "DrawCameraMotionVectors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, cmd, renderingData, camera, cameraMaterial});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorRenderPass::DrawObjectMotionVectors
// Il2CppName: DrawObjectMotionVectors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Camera*, ::UnityEngine::Material*, ::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::MotionVectorRenderPass::DrawObjectMotionVectors)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* objectMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorRenderPass*), "DrawObjectMotionVectors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData, camera, objectMaterial, cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorRenderPass::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::MotionVectorRenderPass::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::MotionVectorRenderPass::Render)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* cameraDepthTexture = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->this_arg;
    static auto* motionVectorColor = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->this_arg;
    static auto* motionVectorDepth = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->this_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorRenderPass*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, cameraDepthTexture, motionVectorColor, motionVectorDepth, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorRenderPass::Configure
// Il2CppName: Configure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::MotionVectorRenderPass::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::RenderTextureDescriptor)>(&UnityEngine::Rendering::Universal::MotionVectorRenderPass::Configure)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cameraTextureDescriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorRenderPass*), "Configure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cameraTextureDescriptor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorRenderPass::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::MotionVectorRenderPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::MotionVectorRenderPass::Execute)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorRenderPass*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorRenderPass::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::MotionVectorRenderPass::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorRenderPass*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
