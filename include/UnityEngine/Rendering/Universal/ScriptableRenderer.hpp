// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.AttachmentDescriptor
#include "UnityEngine/Rendering/AttachmentDescriptor.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.Hash128
#include "UnityEngine/Hash128.hpp"
// Including type: UnityEngine.Rendering.GraphicsDeviceType
#include "UnityEngine/Rendering/GraphicsDeviceType.hpp"
// Including type: UnityEngine.Rendering.Universal.StoreActionsOptimization
#include "UnityEngine/Rendering/Universal/StoreActionsOptimization.hpp"
// Including type: UnityEngine.Plane
#include "UnityEngine/Plane.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DebugHandler
  class DebugHandler;
  // Forward declaring type: ScriptableRenderPass
  class ScriptableRenderPass;
  // Forward declaring type: ScriptableRendererFeature
  class ScriptableRendererFeature;
  // Forward declaring type: CameraData
  struct CameraData;
  // Forward declaring type: RenderingData
  struct RenderingData;
  // Forward declaring type: CameraRenderType
  struct CameraRenderType;
  // Forward declaring type: ScriptableRendererData
  class ScriptableRendererData;
  // Forward declaring type: RenderPassEvent
  struct RenderPassEvent;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: ClearFlag
  struct ClearFlag;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: ScriptableCullingParameters
  struct ScriptableCullingParameters;
  // Forward declaring type: GizmoSubset
  struct GizmoSubset;
  // Skipping declaration: RenderBufferLoadAction because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Skipping declaration: Color because it is already included!
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraph
  class RenderGraph;
  // Forward declaring type: TextureHandle
  struct TextureHandle;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ScriptableRenderer
  class ScriptableRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::ScriptableRenderer);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ScriptableRenderer*, "UnityEngine.Rendering.Universal", "ScriptableRenderer");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x1A8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.ScriptableRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  class ScriptableRenderer : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::ScriptableRenderer::Profiling
    class Profiling;
    // Nested type: ::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderPassDescriptor
    struct RenderPassDescriptor;
    // Nested type: ::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderingFeatures
    class RenderingFeatures;
    // Nested type: ::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderPassBlock
    class RenderPassBlock;
    // Nested type: ::UnityEngine::Rendering::Universal::ScriptableRenderer::RTHandleRenderTargetIdentifierCompat
    struct RTHandleRenderTargetIdentifierCompat;
    // Nested type: ::UnityEngine::Rendering::Universal::ScriptableRenderer::VFXProcessCameraPassData
    class VFXProcessCameraPassData;
    // Nested type: ::UnityEngine::Rendering::Universal::ScriptableRenderer::DrawGizmosPassData
    class DrawGizmosPassData;
    // Nested type: ::UnityEngine::Rendering::Universal::ScriptableRenderer::BeginXRPassData
    class BeginXRPassData;
    // Nested type: ::UnityEngine::Rendering::Universal::ScriptableRenderer::EndXRPassData
    class EndXRPassData;
    // Nested type: ::UnityEngine::Rendering::Universal::ScriptableRenderer::PassData
    class PassData;
    // Nested type: ::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks
    struct RenderBlocks;
    // Nested type: ::UnityEngine::Rendering::Universal::ScriptableRenderer::$$c
    class $$c;
    // Size: 0x2C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.Universal.ScriptableRenderer/RTHandleRenderTargetIdentifierCompat
    // [TokenAttribute] Offset: FFFFFFFF
    struct RTHandleRenderTargetIdentifierCompat/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Rendering.RTHandle handle
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Rendering::RTHandle* handle;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
      // public UnityEngine.Rendering.RenderTargetIdentifier fallback
      // Size: 0x24
      // Offset: 0x8
      ::UnityEngine::Rendering::RenderTargetIdentifier fallback;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rendering::RenderTargetIdentifier) == 0x24);
      public:
      // Creating value type constructor for type: RTHandleRenderTargetIdentifierCompat
      constexpr RTHandleRenderTargetIdentifierCompat(::UnityEngine::Rendering::RTHandle* handle_ = {}, ::UnityEngine::Rendering::RenderTargetIdentifier fallback_ = {}) noexcept : handle{handle_}, fallback{fallback_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Rendering.RTHandle handle
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_handle();
      // Get instance field reference: public UnityEngine.Rendering.RenderTargetIdentifier fallback
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetIdentifier& dyn_fallback();
      // public System.Boolean get_useRTHandle()
      // Offset: 0x52BB478
      bool get_useRTHandle();
      // public UnityEngine.Rendering.RenderTargetIdentifier get_nameID()
      // Offset: 0x52BB488
      ::UnityEngine::Rendering::RenderTargetIdentifier get_nameID();
    }; // UnityEngine.Rendering.Universal.ScriptableRenderer/RTHandleRenderTargetIdentifierCompat
    #pragma pack(pop)
    static check_size<sizeof(ScriptableRenderer::RTHandleRenderTargetIdentifierCompat), 8 + sizeof(::UnityEngine::Rendering::RenderTargetIdentifier)> __UnityEngine_Rendering_Universal_ScriptableRenderer_RTHandleRenderTargetIdentifierCompatSizeCheck;
    static_assert(sizeof(ScriptableRenderer::RTHandleRenderTargetIdentifierCompat) == 0x2C);
    public:
    // private System.Int32 m_LastBeginSubpassPassIndex
    // Size: 0x4
    // Offset: 0x10
    int m_LastBeginSubpassPassIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_LastBeginSubpassPassIndex and: m_MergeableRenderPassesMap
    char __padding0[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Hash128,System.Int32[]> m_MergeableRenderPassesMap
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Hash128, ::ArrayW<int>>* m_MergeableRenderPassesMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Hash128, ::ArrayW<int>>*) == 0x8);
    // private System.Int32[][] m_MergeableRenderPassesMapArrays
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::ArrayW<int>> m_MergeableRenderPassesMapArrays;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<int>>) == 0x8);
    // private UnityEngine.Hash128[] m_PassIndexToPassHash
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Hash128> m_PassIndexToPassHash;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Hash128>) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Hash128,System.Int32> m_RenderPassesAttachmentCount
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Hash128, int>* m_RenderPassesAttachmentCount;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Hash128, int>*) == 0x8);
    // private UnityEngine.Rendering.AttachmentDescriptor[] m_ActiveColorAttachmentDescriptors
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Rendering::AttachmentDescriptor> m_ActiveColorAttachmentDescriptors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::AttachmentDescriptor>) == 0x8);
    // private UnityEngine.Rendering.AttachmentDescriptor m_ActiveDepthAttachmentDescriptor
    // Size: 0x78
    // Offset: 0x40
    ::UnityEngine::Rendering::AttachmentDescriptor m_ActiveDepthAttachmentDescriptor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::AttachmentDescriptor) == 0x78);
    // private System.Boolean[] m_IsActiveColorAttachmentTransient
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<bool> m_IsActiveColorAttachmentTransient;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    // UnityEngine.Rendering.RenderBufferStoreAction[] m_FinalColorStoreAction
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<::UnityEngine::Rendering::RenderBufferStoreAction> m_FinalColorStoreAction;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::RenderBufferStoreAction>) == 0x8);
    // UnityEngine.Rendering.RenderBufferStoreAction m_FinalDepthStoreAction
    // Size: 0x4
    // Offset: 0xC8
    ::UnityEngine::Rendering::RenderBufferStoreAction m_FinalDepthStoreAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderBufferStoreAction) == 0x4);
    // Padding between fields: m_FinalDepthStoreAction and: profilingExecute
    char __padding9[0x4] = {};
    // private UnityEngine.Rendering.ProfilingSampler <profilingExecute>k__BackingField
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::Rendering::ProfilingSampler* profilingExecute;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // System.Boolean hasReleasedRTs
    // Size: 0x1
    // Offset: 0xD8
    bool hasReleasedRTs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasReleasedRTs and: DebugHandler
    char __padding11[0x7] = {};
    // private readonly UnityEngine.Rendering.Universal.DebugHandler <DebugHandler>k__BackingField
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::Rendering::Universal::DebugHandler* DebugHandler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DebugHandler*) == 0x8);
    // private UnityEngine.Rendering.Universal.ScriptableRenderer/RenderingFeatures <supportedRenderingFeatures>k__BackingField
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderingFeatures* supportedRenderingFeatures;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderingFeatures*) == 0x8);
    // private UnityEngine.Rendering.GraphicsDeviceType[] <unsupportedGraphicsDeviceTypes>k__BackingField
    // Size: 0x8
    // Offset: 0xF0
    ::ArrayW<::UnityEngine::Rendering::GraphicsDeviceType> unsupportedGraphicsDeviceTypes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::GraphicsDeviceType>) == 0x8);
    // private UnityEngine.Rendering.Universal.StoreActionsOptimization m_StoreActionsOptimizationSetting
    // Size: 0x4
    // Offset: 0xF8
    ::UnityEngine::Rendering::Universal::StoreActionsOptimization m_StoreActionsOptimizationSetting;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::StoreActionsOptimization) == 0x4);
    // Padding between fields: m_StoreActionsOptimizationSetting and: m_ActiveRenderPassQueue
    char __padding15[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.ScriptableRenderPass> m_ActiveRenderPassQueue
    // Size: 0x8
    // Offset: 0x100
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ScriptableRenderPass*>* m_ActiveRenderPassQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ScriptableRenderPass*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.ScriptableRendererFeature> m_RendererFeatures
    // Size: 0x8
    // Offset: 0x108
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ScriptableRendererFeature*>* m_RendererFeatures;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ScriptableRendererFeature*>*) == 0x8);
    // private UnityEngine.Rendering.Universal.ScriptableRenderer/RTHandleRenderTargetIdentifierCompat m_CameraColorTarget
    // Size: 0x2C
    // Offset: 0x110
    ::UnityEngine::Rendering::Universal::ScriptableRenderer::RTHandleRenderTargetIdentifierCompat m_CameraColorTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ScriptableRenderer::RTHandleRenderTargetIdentifierCompat) == 0x2C);
    // Padding between fields: m_CameraColorTarget and: m_CameraDepthTarget
    char __padding18[0x4] = {};
    // private UnityEngine.Rendering.Universal.ScriptableRenderer/RTHandleRenderTargetIdentifierCompat m_CameraDepthTarget
    // Size: 0x2C
    // Offset: 0x140
    ::UnityEngine::Rendering::Universal::ScriptableRenderer::RTHandleRenderTargetIdentifierCompat m_CameraDepthTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ScriptableRenderer::RTHandleRenderTargetIdentifierCompat) == 0x2C);
    // Padding between fields: m_CameraDepthTarget and: m_CameraResolveTarget
    char __padding19[0x4] = {};
    // private UnityEngine.Rendering.Universal.ScriptableRenderer/RTHandleRenderTargetIdentifierCompat m_CameraResolveTarget
    // Size: 0x2C
    // Offset: 0x170
    ::UnityEngine::Rendering::Universal::ScriptableRenderer::RTHandleRenderTargetIdentifierCompat m_CameraResolveTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ScriptableRenderer::RTHandleRenderTargetIdentifierCompat) == 0x2C);
    // Padding between fields: m_CameraResolveTarget and: m_FirstTimeCameraColorTargetIsBound
    char __padding20[0x4] = {};
    // private System.Boolean m_FirstTimeCameraColorTargetIsBound
    // Size: 0x1
    // Offset: 0x1A0
    bool m_FirstTimeCameraColorTargetIsBound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_FirstTimeCameraDepthTargetIsBound
    // Size: 0x1
    // Offset: 0x1A1
    bool m_FirstTimeCameraDepthTargetIsBound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsPipelineExecuting
    // Size: 0x1
    // Offset: 0x1A2
    bool m_IsPipelineExecuting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean disableNativeRenderPassInFeatures
    // Size: 0x1
    // Offset: 0x1A3
    bool disableNativeRenderPassInFeatures;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean useRenderPassEnabled
    // Size: 0x1
    // Offset: 0x1A4
    bool useRenderPassEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <useDepthPriming>k__BackingField
    // Size: 0x1
    // Offset: 0x1A5
    bool useDepthPriming;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <stripShadowsOffVariants>k__BackingField
    // Size: 0x1
    // Offset: 0x1A6
    bool stripShadowsOffVariants;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <stripAdditionalLightOffVariants>k__BackingField
    // Size: 0x1
    // Offset: 0x1A7
    bool stripAdditionalLightOffVariants;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // static field const value: static private System.Int32 kRenderPassMapSize
    static constexpr const int kRenderPassMapSize = 10;
    // Get static field: static private System.Int32 kRenderPassMapSize
    static int _get_kRenderPassMapSize();
    // Set static field: static private System.Int32 kRenderPassMapSize
    static void _set_kRenderPassMapSize(int value);
    // static field const value: static private System.Int32 kRenderPassMaxCount
    static constexpr const int kRenderPassMaxCount = 20;
    // Get static field: static private System.Int32 kRenderPassMaxCount
    static int _get_kRenderPassMaxCount();
    // Set static field: static private System.Int32 kRenderPassMaxCount
    static void _set_kRenderPassMaxCount(int value);
    // Get static field: static UnityEngine.Rendering.Universal.ScriptableRenderer current
    static ::UnityEngine::Rendering::Universal::ScriptableRenderer* _get_current();
    // Set static field: static UnityEngine.Rendering.Universal.ScriptableRenderer current
    static void _set_current(::UnityEngine::Rendering::Universal::ScriptableRenderer* value);
    // Get static field: static private System.Boolean m_UseOptimizedStoreActions
    static bool _get_m_UseOptimizedStoreActions();
    // Set static field: static private System.Boolean m_UseOptimizedStoreActions
    static void _set_m_UseOptimizedStoreActions(bool value);
    // static field const value: static private System.Int32 k_RenderPassBlockCount
    static constexpr const int k_RenderPassBlockCount = 4;
    // Get static field: static private System.Int32 k_RenderPassBlockCount
    static int _get_k_RenderPassBlockCount();
    // Set static field: static private System.Int32 k_RenderPassBlockCount
    static void _set_k_RenderPassBlockCount(int value);
    // Get static field: static protected readonly UnityEngine.Rendering.RTHandle k_CameraTarget
    static ::UnityEngine::Rendering::RTHandle* _get_k_CameraTarget();
    // Set static field: static protected readonly UnityEngine.Rendering.RTHandle k_CameraTarget
    static void _set_k_CameraTarget(::UnityEngine::Rendering::RTHandle* value);
    // Get static field: static private UnityEngine.Rendering.RenderTargetIdentifier[] m_ActiveColorAttachments
    static ::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> _get_m_ActiveColorAttachments();
    // Set static field: static private UnityEngine.Rendering.RenderTargetIdentifier[] m_ActiveColorAttachments
    static void _set_m_ActiveColorAttachments(::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> value);
    // Get static field: static private UnityEngine.Rendering.RenderTargetIdentifier m_ActiveDepthAttachment
    static ::UnityEngine::Rendering::RenderTargetIdentifier _get_m_ActiveDepthAttachment();
    // Set static field: static private UnityEngine.Rendering.RenderTargetIdentifier m_ActiveDepthAttachment
    static void _set_m_ActiveDepthAttachment(::UnityEngine::Rendering::RenderTargetIdentifier value);
    // Get static field: static private UnityEngine.Rendering.RenderBufferStoreAction[] m_ActiveColorStoreActions
    static ::ArrayW<::UnityEngine::Rendering::RenderBufferStoreAction> _get_m_ActiveColorStoreActions();
    // Set static field: static private UnityEngine.Rendering.RenderBufferStoreAction[] m_ActiveColorStoreActions
    static void _set_m_ActiveColorStoreActions(::ArrayW<::UnityEngine::Rendering::RenderBufferStoreAction> value);
    // Get static field: static private UnityEngine.Rendering.RenderBufferStoreAction m_ActiveDepthStoreAction
    static ::UnityEngine::Rendering::RenderBufferStoreAction _get_m_ActiveDepthStoreAction();
    // Set static field: static private UnityEngine.Rendering.RenderBufferStoreAction m_ActiveDepthStoreAction
    static void _set_m_ActiveDepthStoreAction(::UnityEngine::Rendering::RenderBufferStoreAction value);
    // Get static field: static private UnityEngine.Rendering.RenderTargetIdentifier[][] m_TrimmedColorAttachmentCopies
    static ::ArrayW<::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>> _get_m_TrimmedColorAttachmentCopies();
    // Set static field: static private UnityEngine.Rendering.RenderTargetIdentifier[][] m_TrimmedColorAttachmentCopies
    static void _set_m_TrimmedColorAttachmentCopies(::ArrayW<::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>> value);
    // Get static field: static private UnityEngine.Plane[] s_Planes
    static ::ArrayW<::UnityEngine::Plane> _get_s_Planes();
    // Set static field: static private UnityEngine.Plane[] s_Planes
    static void _set_s_Planes(::ArrayW<::UnityEngine::Plane> value);
    // Get static field: static private UnityEngine.Vector4[] s_VectorPlanes
    static ::ArrayW<::UnityEngine::Vector4> _get_s_VectorPlanes();
    // Set static field: static private UnityEngine.Vector4[] s_VectorPlanes
    static void _set_s_VectorPlanes(::ArrayW<::UnityEngine::Vector4> value);
    // Get instance field reference: private System.Int32 m_LastBeginSubpassPassIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_LastBeginSubpassPassIndex();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Hash128,System.Int32[]> m_MergeableRenderPassesMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Hash128, ::ArrayW<int>>*& dyn_m_MergeableRenderPassesMap();
    // Get instance field reference: private System.Int32[][] m_MergeableRenderPassesMapArrays
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<int>>& dyn_m_MergeableRenderPassesMapArrays();
    // Get instance field reference: private UnityEngine.Hash128[] m_PassIndexToPassHash
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Hash128>& dyn_m_PassIndexToPassHash();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Hash128,System.Int32> m_RenderPassesAttachmentCount
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Hash128, int>*& dyn_m_RenderPassesAttachmentCount();
    // Get instance field reference: private UnityEngine.Rendering.AttachmentDescriptor[] m_ActiveColorAttachmentDescriptors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::AttachmentDescriptor>& dyn_m_ActiveColorAttachmentDescriptors();
    // Get instance field reference: private UnityEngine.Rendering.AttachmentDescriptor m_ActiveDepthAttachmentDescriptor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::AttachmentDescriptor& dyn_m_ActiveDepthAttachmentDescriptor();
    // Get instance field reference: private System.Boolean[] m_IsActiveColorAttachmentTransient
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_m_IsActiveColorAttachmentTransient();
    // Get instance field reference: UnityEngine.Rendering.RenderBufferStoreAction[] m_FinalColorStoreAction
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::RenderBufferStoreAction>& dyn_m_FinalColorStoreAction();
    // Get instance field reference: UnityEngine.Rendering.RenderBufferStoreAction m_FinalDepthStoreAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderBufferStoreAction& dyn_m_FinalDepthStoreAction();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler <profilingExecute>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_$profilingExecute$k__BackingField();
    // Get instance field reference: System.Boolean hasReleasedRTs
    [[deprecated("Use field access instead!")]] bool& dyn_hasReleasedRTs();
    // Get instance field reference: private readonly UnityEngine.Rendering.Universal.DebugHandler <DebugHandler>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DebugHandler*& dyn_$DebugHandler$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ScriptableRenderer/RenderingFeatures <supportedRenderingFeatures>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderingFeatures*& dyn_$supportedRenderingFeatures$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.GraphicsDeviceType[] <unsupportedGraphicsDeviceTypes>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::GraphicsDeviceType>& dyn_$unsupportedGraphicsDeviceTypes$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.Universal.StoreActionsOptimization m_StoreActionsOptimizationSetting
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::StoreActionsOptimization& dyn_m_StoreActionsOptimizationSetting();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.ScriptableRenderPass> m_ActiveRenderPassQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ScriptableRenderPass*>*& dyn_m_ActiveRenderPassQueue();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.ScriptableRendererFeature> m_RendererFeatures
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ScriptableRendererFeature*>*& dyn_m_RendererFeatures();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ScriptableRenderer/RTHandleRenderTargetIdentifierCompat m_CameraColorTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ScriptableRenderer::RTHandleRenderTargetIdentifierCompat& dyn_m_CameraColorTarget();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ScriptableRenderer/RTHandleRenderTargetIdentifierCompat m_CameraDepthTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ScriptableRenderer::RTHandleRenderTargetIdentifierCompat& dyn_m_CameraDepthTarget();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ScriptableRenderer/RTHandleRenderTargetIdentifierCompat m_CameraResolveTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ScriptableRenderer::RTHandleRenderTargetIdentifierCompat& dyn_m_CameraResolveTarget();
    // Get instance field reference: private System.Boolean m_FirstTimeCameraColorTargetIsBound
    [[deprecated("Use field access instead!")]] bool& dyn_m_FirstTimeCameraColorTargetIsBound();
    // Get instance field reference: private System.Boolean m_FirstTimeCameraDepthTargetIsBound
    [[deprecated("Use field access instead!")]] bool& dyn_m_FirstTimeCameraDepthTargetIsBound();
    // Get instance field reference: private System.Boolean m_IsPipelineExecuting
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsPipelineExecuting();
    // Get instance field reference: System.Boolean disableNativeRenderPassInFeatures
    [[deprecated("Use field access instead!")]] bool& dyn_disableNativeRenderPassInFeatures();
    // Get instance field reference: System.Boolean useRenderPassEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_useRenderPassEnabled();
    // Get instance field reference: private System.Boolean <useDepthPriming>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$useDepthPriming$k__BackingField();
    // Get instance field reference: private System.Boolean <stripShadowsOffVariants>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$stripShadowsOffVariants$k__BackingField();
    // Get instance field reference: private System.Boolean <stripAdditionalLightOffVariants>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$stripAdditionalLightOffVariants$k__BackingField();
    // public UnityEngine.Rendering.RenderTargetIdentifier get_cameraDepth()
    // Offset: 0x52ADC74
    ::UnityEngine::Rendering::RenderTargetIdentifier get_cameraDepth();
    // System.Void ResetNativeRenderPassFrameData()
    // Offset: 0x52ADCB0
    void ResetNativeRenderPassFrameData();
    // System.Void SetupNativeRenderPassFrameData(ref UnityEngine.Rendering.Universal.CameraData cameraData, System.Boolean isRenderPassEnabled)
    // Offset: 0x52ADDE8
    void SetupNativeRenderPassFrameData(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, bool isRenderPassEnabled);
    // System.Void UpdateFinalStoreActions(System.Int32[] currentMergeablePasses, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52AE868
    void UpdateFinalStoreActions(::ArrayW<int> currentMergeablePasses, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // System.Void SetNativeRenderPassMRTAttachmentList(UnityEngine.Rendering.Universal.ScriptableRenderPass renderPass, ref UnityEngine.Rendering.Universal.CameraData cameraData, System.Boolean needCustomCameraColorClear, UnityEngine.Rendering.ClearFlag cameraClearFlag)
    // Offset: 0x52AEBF4
    void SetNativeRenderPassMRTAttachmentList(::UnityEngine::Rendering::Universal::ScriptableRenderPass* renderPass, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, bool needCustomCameraColorClear, ::UnityEngine::Rendering::ClearFlag cameraClearFlag);
    // private System.Boolean IsDepthOnlyRenderTexture(UnityEngine.RenderTexture t)
    // Offset: 0x52AF9A0
    bool IsDepthOnlyRenderTexture(::UnityEngine::RenderTexture* t);
    // System.Void SetNativeRenderPassAttachmentList(UnityEngine.Rendering.Universal.ScriptableRenderPass renderPass, ref UnityEngine.Rendering.Universal.CameraData cameraData, UnityEngine.Rendering.RTHandle passColorAttachment, UnityEngine.Rendering.RTHandle passDepthAttachment, UnityEngine.Rendering.ClearFlag finalClearFlag, UnityEngine.Color finalClearColor)
    // Offset: 0x52AF9C8
    void SetNativeRenderPassAttachmentList(::UnityEngine::Rendering::Universal::ScriptableRenderPass* renderPass, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, ::UnityEngine::Rendering::RTHandle* passColorAttachment, ::UnityEngine::Rendering::RTHandle* passDepthAttachment, ::UnityEngine::Rendering::ClearFlag finalClearFlag, ::UnityEngine::Color finalClearColor);
    // System.Void ExecuteNativeRenderPass(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Rendering.Universal.ScriptableRenderPass renderPass, ref UnityEngine.Rendering.Universal.CameraData cameraData, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B06FC
    void ExecuteNativeRenderPass(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Rendering::Universal::ScriptableRenderPass* renderPass, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // System.Void SetupInputAttachmentIndices(UnityEngine.Rendering.Universal.ScriptableRenderPass pass)
    // Offset: 0x52AF698
    void SetupInputAttachmentIndices(::UnityEngine::Rendering::Universal::ScriptableRenderPass* pass);
    // System.Void SetupTransientInputAttachments(System.Int32 attachmentCount)
    // Offset: 0x52AF88C
    void SetupTransientInputAttachments(int attachmentCount);
    // static System.UInt32 GetSubPassAttachmentIndicesCount(UnityEngine.Rendering.Universal.ScriptableRenderPass pass)
    // Offset: 0x52B1104
    static uint GetSubPassAttachmentIndicesCount(::UnityEngine::Rendering::Universal::ScriptableRenderPass* pass);
    // static System.Boolean AreAttachmentIndicesCompatible(UnityEngine.Rendering.Universal.ScriptableRenderPass lastSubPass, UnityEngine.Rendering.Universal.ScriptableRenderPass currentSubPass)
    // Offset: 0x52B1290
    static bool AreAttachmentIndicesCompatible(::UnityEngine::Rendering::Universal::ScriptableRenderPass* lastSubPass, ::UnityEngine::Rendering::Universal::ScriptableRenderPass* currentSubPass);
    // static System.UInt32 GetValidColorAttachmentCount(UnityEngine.Rendering.AttachmentDescriptor[] colorAttachments)
    // Offset: 0x52B13CC
    static uint GetValidColorAttachmentCount(::ArrayW<::UnityEngine::Rendering::AttachmentDescriptor> colorAttachments);
    // static System.Int32 GetValidInputAttachmentCount(UnityEngine.Rendering.Universal.ScriptableRenderPass renderPass)
    // Offset: 0x52B1384
    static int GetValidInputAttachmentCount(::UnityEngine::Rendering::Universal::ScriptableRenderPass* renderPass);
    // static System.Int32 FindAttachmentDescriptorIndexInList(System.Int32 attachmentIdx, UnityEngine.Rendering.AttachmentDescriptor attachmentDescriptor, UnityEngine.Rendering.AttachmentDescriptor[] attachmentDescriptors)
    // Offset: 0x52B05D0
    static int FindAttachmentDescriptorIndexInList(int attachmentIdx, ::UnityEngine::Rendering::AttachmentDescriptor attachmentDescriptor, ::ArrayW<::UnityEngine::Rendering::AttachmentDescriptor> attachmentDescriptors);
    // static System.Int32 FindAttachmentDescriptorIndexInList(UnityEngine.Rendering.RenderTargetIdentifier target, UnityEngine.Rendering.AttachmentDescriptor[] attachmentDescriptors)
    // Offset: 0x52AF578
    static int FindAttachmentDescriptorIndexInList(::UnityEngine::Rendering::RenderTargetIdentifier target, ::ArrayW<::UnityEngine::Rendering::AttachmentDescriptor> attachmentDescriptors);
    // static System.Int32 GetValidPassIndexCount(System.Int32[] array)
    // Offset: 0x52AE814
    static int GetValidPassIndexCount(::ArrayW<int> array);
    // static UnityEngine.Rendering.RTHandle GetFirstAllocatedRTHandle(UnityEngine.Rendering.Universal.ScriptableRenderPass pass)
    // Offset: 0x52AEB18
    static ::UnityEngine::Rendering::RTHandle* GetFirstAllocatedRTHandle(::UnityEngine::Rendering::Universal::ScriptableRenderPass* pass);
    // static System.Boolean PassHasInputAttachments(UnityEngine.Rendering.Universal.ScriptableRenderPass renderPass)
    // Offset: 0x52AF65C
    static bool PassHasInputAttachments(::UnityEngine::Rendering::Universal::ScriptableRenderPass* renderPass);
    // static UnityEngine.Hash128 CreateRenderPassHash(System.Int32 width, System.Int32 height, System.Int32 depthID, System.Int32 sample, System.UInt32 hashIndex)
    // Offset: 0x52B1514
    static ::UnityEngine::Hash128 CreateRenderPassHash(int width, int height, int depthID, int sample, uint hashIndex);
    // static UnityEngine.Hash128 CreateRenderPassHash(UnityEngine.Rendering.Universal.ScriptableRenderer/RenderPassDescriptor desc, System.UInt32 hashIndex)
    // Offset: 0x52AE784
    static ::UnityEngine::Hash128 CreateRenderPassHash(::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderPassDescriptor desc, uint hashIndex);
    // private UnityEngine.Rendering.Universal.ScriptableRenderer/RenderPassDescriptor InitializeRenderPassDescriptor(ref UnityEngine.Rendering.Universal.CameraData cameraData, UnityEngine.Rendering.Universal.ScriptableRenderPass renderPass)
    // Offset: 0x52AE510
    ::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderPassDescriptor InitializeRenderPassDescriptor(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, ::UnityEngine::Rendering::Universal::ScriptableRenderPass* renderPass);
    // public System.Int32 SupportedCameraStackingTypes()
    // Offset: 0x52B15C4
    int SupportedCameraStackingTypes();
    // public System.Boolean SupportsCameraStackingType(UnityEngine.Rendering.Universal.CameraRenderType cameraRenderType)
    // Offset: 0x52B15CC
    bool SupportsCameraStackingType(::UnityEngine::Rendering::Universal::CameraRenderType cameraRenderType);
    // protected UnityEngine.Rendering.ProfilingSampler get_profilingExecute()
    // Offset: 0x52B15F4
    ::UnityEngine::Rendering::ProfilingSampler* get_profilingExecute();
    // protected System.Void set_profilingExecute(UnityEngine.Rendering.ProfilingSampler value)
    // Offset: 0x52B15FC
    void set_profilingExecute(::UnityEngine::Rendering::ProfilingSampler* value);
    // UnityEngine.Rendering.Universal.DebugHandler get_DebugHandler()
    // Offset: 0x52B1604
    ::UnityEngine::Rendering::Universal::DebugHandler* get_DebugHandler();
    // static public System.Void SetCameraMatrices(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.CameraData cameraData, System.Boolean setInverseMatrices)
    // Offset: 0x52B160C
    static void SetCameraMatrices(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, bool setInverseMatrices);
    // static System.Void SetCameraMatrices(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.CameraData cameraData, System.Boolean setInverseMatrices, System.Boolean isTargetFlipped)
    // Offset: 0x52B1690
    static void SetCameraMatrices(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, bool setInverseMatrices, bool isTargetFlipped);
    // private System.Void SetPerCameraShaderVariables(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52B1BB8
    void SetPerCameraShaderVariables(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // private System.Void SetPerCameraShaderVariables(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.CameraData cameraData, System.Boolean isTargetFlipped)
    // Offset: 0x52B1BF4
    void SetPerCameraShaderVariables(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, bool isTargetFlipped);
    // private System.Void SetPerCameraBillboardProperties(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52B2238
    void SetPerCameraBillboardProperties(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // static private System.Void CalculateBillboardProperties(in UnityEngine.Matrix4x4 worldToCameraMatrix, out UnityEngine.Vector3 billboardTangent, out UnityEngine.Vector3 billboardNormal, out System.Single cameraXZAngle)
    // Offset: 0x52B2410
    static void CalculateBillboardProperties(ByRef<::UnityEngine::Matrix4x4> worldToCameraMatrix, ByRef<::UnityEngine::Vector3> billboardTangent, ByRef<::UnityEngine::Vector3> billboardNormal, ByRef<float> cameraXZAngle);
    // private System.Void SetPerCameraClippingPlaneProperties(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52B27DC
    void SetPerCameraClippingPlaneProperties(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // private System.Void SetPerCameraClippingPlaneProperties(UnityEngine.Rendering.CommandBuffer cmd, in UnityEngine.Rendering.Universal.CameraData cameraData, System.Boolean isTargetFlipped)
    // Offset: 0x52B2810
    void SetPerCameraClippingPlaneProperties(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, bool isTargetFlipped);
    // static private System.Void SetShaderTimeValues(UnityEngine.Rendering.CommandBuffer cmd, System.Single time, System.Single deltaTime, System.Single smoothDeltaTime)
    // Offset: 0x52B2A18
    static void SetShaderTimeValues(::UnityEngine::Rendering::CommandBuffer* cmd, float time, float deltaTime, float smoothDeltaTime);
    // public UnityEngine.Rendering.RenderTargetIdentifier get_cameraColorTarget()
    // Offset: 0x52B2BFC
    ::UnityEngine::Rendering::RenderTargetIdentifier get_cameraColorTarget();
    // public UnityEngine.Rendering.RTHandle get_cameraColorTargetHandle()
    // Offset: 0x52ACB8C
    ::UnityEngine::Rendering::RTHandle* get_cameraColorTargetHandle();
    // UnityEngine.Rendering.RTHandle GetCameraColorFrontBuffer(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52B2CB8
    ::UnityEngine::Rendering::RTHandle* GetCameraColorFrontBuffer(::UnityEngine::Rendering::CommandBuffer* cmd);
    // UnityEngine.Rendering.RTHandle GetCameraColorBackBuffer(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52B2CC0
    ::UnityEngine::Rendering::RTHandle* GetCameraColorBackBuffer(::UnityEngine::Rendering::CommandBuffer* cmd);
    // public UnityEngine.Rendering.RenderTargetIdentifier get_cameraDepthTarget()
    // Offset: 0x52B2CC8
    ::UnityEngine::Rendering::RenderTargetIdentifier get_cameraDepthTarget();
    // public UnityEngine.Rendering.RTHandle get_cameraDepthTargetHandle()
    // Offset: 0x52B1540
    ::UnityEngine::Rendering::RTHandle* get_cameraDepthTargetHandle();
    // protected System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.ScriptableRendererFeature> get_rendererFeatures()
    // Offset: 0x52B2D84
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ScriptableRendererFeature*>* get_rendererFeatures();
    // protected System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.ScriptableRenderPass> get_activeRenderPassQueue()
    // Offset: 0x52B2D8C
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ScriptableRenderPass*>* get_activeRenderPassQueue();
    // public UnityEngine.Rendering.Universal.ScriptableRenderer/RenderingFeatures get_supportedRenderingFeatures()
    // Offset: 0x52B2D94
    ::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderingFeatures* get_supportedRenderingFeatures();
    // public System.Void set_supportedRenderingFeatures(UnityEngine.Rendering.Universal.ScriptableRenderer/RenderingFeatures value)
    // Offset: 0x52B2D9C
    void set_supportedRenderingFeatures(::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderingFeatures* value);
    // public UnityEngine.Rendering.GraphicsDeviceType[] get_unsupportedGraphicsDeviceTypes()
    // Offset: 0x52B2DA4
    ::ArrayW<::UnityEngine::Rendering::GraphicsDeviceType> get_unsupportedGraphicsDeviceTypes();
    // public System.Void set_unsupportedGraphicsDeviceTypes(UnityEngine.Rendering.GraphicsDeviceType[] value)
    // Offset: 0x52B2DAC
    void set_unsupportedGraphicsDeviceTypes(::ArrayW<::UnityEngine::Rendering::GraphicsDeviceType> value);
    // static System.Void ConfigureActiveTarget(UnityEngine.Rendering.RenderTargetIdentifier colorAttachment, UnityEngine.Rendering.RenderTargetIdentifier depthAttachment)
    // Offset: 0x52B2DB4
    static void ConfigureActiveTarget(::UnityEngine::Rendering::RenderTargetIdentifier colorAttachment, ::UnityEngine::Rendering::RenderTargetIdentifier depthAttachment);
    // System.Boolean get_useDepthPriming()
    // Offset: 0x52B2F4C
    bool get_useDepthPriming();
    // System.Void set_useDepthPriming(System.Boolean value)
    // Offset: 0x52B2F54
    void set_useDepthPriming(bool value);
    // System.Boolean get_stripShadowsOffVariants()
    // Offset: 0x52B2F60
    bool get_stripShadowsOffVariants();
    // System.Void set_stripShadowsOffVariants(System.Boolean value)
    // Offset: 0x52B2F68
    void set_stripShadowsOffVariants(bool value);
    // System.Boolean get_stripAdditionalLightOffVariants()
    // Offset: 0x52B2F74
    bool get_stripAdditionalLightOffVariants();
    // System.Void set_stripAdditionalLightOffVariants(System.Boolean value)
    // Offset: 0x52B2F7C
    void set_stripAdditionalLightOffVariants(bool value);
    // public System.Void .ctor(UnityEngine.Rendering.Universal.ScriptableRendererData data)
    // Offset: 0x52AD02C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScriptableRenderer* New_ctor(::UnityEngine::Rendering::Universal::ScriptableRendererData* data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::ScriptableRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScriptableRenderer*, creationType>(data)));
    }
    // public System.Void Dispose()
    // Offset: 0x52B3210
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x52B3348
    void Dispose(bool disposing);
    // System.Void ReleaseRenderTargets()
    // Offset: 0x52B335C
    void ReleaseRenderTargets();
    // public System.Void ConfigureCameraTarget(UnityEngine.Rendering.RenderTargetIdentifier colorTarget, UnityEngine.Rendering.RenderTargetIdentifier depthTarget)
    // Offset: 0x52B3360
    void ConfigureCameraTarget(::UnityEngine::Rendering::RenderTargetIdentifier colorTarget, ::UnityEngine::Rendering::RenderTargetIdentifier depthTarget);
    // public System.Void ConfigureCameraTarget(UnityEngine.Rendering.RTHandle colorTarget, UnityEngine.Rendering.RTHandle depthTarget)
    // Offset: 0x52B33E4
    void ConfigureCameraTarget(::UnityEngine::Rendering::RTHandle* colorTarget, ::UnityEngine::Rendering::RTHandle* depthTarget);
    // System.Void ConfigureCameraTarget(UnityEngine.Rendering.RenderTargetIdentifier colorTarget, UnityEngine.Rendering.RenderTargetIdentifier depthTarget, UnityEngine.Rendering.RenderTargetIdentifier resolveTarget)
    // Offset: 0x52B3478
    void ConfigureCameraTarget(::UnityEngine::Rendering::RenderTargetIdentifier colorTarget, ::UnityEngine::Rendering::RenderTargetIdentifier depthTarget, ::UnityEngine::Rendering::RenderTargetIdentifier resolveTarget);
    // System.Void ConfigureCameraTarget(UnityEngine.Rendering.RTHandle colorTarget, UnityEngine.Rendering.RTHandle depthTarget, UnityEngine.Rendering.RTHandle resolveTarget)
    // Offset: 0x52B3538
    void ConfigureCameraTarget(::UnityEngine::Rendering::RTHandle* colorTarget, ::UnityEngine::Rendering::RTHandle* depthTarget, ::UnityEngine::Rendering::RTHandle* resolveTarget);
    // System.Void ConfigureCameraColorTarget(UnityEngine.Rendering.RenderTargetIdentifier colorTarget)
    // Offset: 0x52B3610
    void ConfigureCameraColorTarget(::UnityEngine::Rendering::RenderTargetIdentifier colorTarget);
    // System.Void ConfigureCameraColorTarget(UnityEngine.Rendering.RTHandle colorTarget)
    // Offset: 0x52B364C
    void ConfigureCameraColorTarget(::UnityEngine::Rendering::RTHandle* colorTarget);
    // public System.Void Setup(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Setup(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public System.Void SetupLights(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B369C
    void SetupLights(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public System.Void SetupCullingParameters(ref UnityEngine.Rendering.ScriptableCullingParameters cullingParameters, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52B36A0
    void SetupCullingParameters(ByRef<::UnityEngine::Rendering::ScriptableCullingParameters> cullingParameters, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // public System.Void FinishRendering(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52B36A4
    void FinishRendering(::UnityEngine::Rendering::CommandBuffer* cmd);
    // System.Void OnRecordRenderGraph(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B36A8
    void OnRecordRenderGraph(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void InitRenderGraphFrame(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B36AC
    void InitRenderGraphFrame(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // System.Void ProcessVFXCameraCommand(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B3940
    void ProcessVFXCameraCommand(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // System.Void SetupRenderGraphCameraProperties(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, ref UnityEngine.Rendering.Universal.RenderingData renderingData, System.Boolean isTargetBackbuffer)
    // Offset: 0x52B3BA0
    void SetupRenderGraphCameraProperties(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, bool isTargetBackbuffer);
    // System.Void DrawRenderGraphGizmos(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle color, UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle depth, UnityEngine.Rendering.GizmoSubset gizmoSubset, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B3E90
    void DrawRenderGraphGizmos(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle color, ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle depth, ::UnityEngine::Rendering::GizmoSubset gizmoSubset, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void BeginRenderGraphXRRendering(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B4170
    void BeginRenderGraphXRRendering(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void EndRenderGraphXRRendering(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B4418
    void EndRenderGraphXRRendering(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // System.Void RecordRenderGraph(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B46C0
    void RecordRenderGraph(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // System.Void FinishRenderGraphRendering(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B4994
    void FinishRenderGraphRendering(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // System.Void OnFinishRenderGraphRendering(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B4C2C
    void OnFinishRenderGraphRendering(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // System.Void RecordCustomRenderGraphPasses(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.Universal.RenderPassEvent injectionPoint)
    // Offset: 0x52B4C30
    void RecordCustomRenderGraphPasses(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::UnityEngine::Rendering::Universal::RenderPassEvent injectionPoint);
    // System.Void SetPerCameraProperties(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.CameraData cameraData, UnityEngine.Camera camera, UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52B4DE0
    void SetPerCameraProperties(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, ::UnityEngine::Camera* camera, ::UnityEngine::Rendering::CommandBuffer* cmd);
    // public System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B4E9C
    void Execute(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public System.Void EnqueuePass(UnityEngine.Rendering.Universal.ScriptableRenderPass pass)
    // Offset: 0x52B6940
    void EnqueuePass(::UnityEngine::Rendering::Universal::ScriptableRenderPass* pass);
    // static protected UnityEngine.Rendering.ClearFlag GetCameraClearFlag(ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52B69FC
    static ::UnityEngine::Rendering::ClearFlag GetCameraClearFlag(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // System.Void OnPreCullRenderPasses(in UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52B6B58
    void OnPreCullRenderPasses(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // System.Void AddRenderPasses(ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B6C1C
    void AddRenderPasses(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // protected System.Void SetupRenderPasses(in UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B5DF8
    void SetupRenderPasses(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // static private System.Void ClearRenderingState(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52B6128
    static void ClearRenderingState(::UnityEngine::Rendering::CommandBuffer* cmd);
    // System.Void Clear(UnityEngine.Rendering.Universal.CameraRenderType cameraType)
    // Offset: 0x52B2F88
    void Clear(::UnityEngine::Rendering::Universal::CameraRenderType cameraType);
    // private System.Void ExecuteBlock(System.Int32 blockIndex, in UnityEngine.Rendering.Universal.ScriptableRenderer/RenderBlocks renderBlocks, UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData, System.Boolean submit)
    // Offset: 0x52B6444
    void ExecuteBlock(int blockIndex, ByRef<::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks> renderBlocks, ::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, bool submit);
    // private System.Boolean IsRenderPassEnabled(UnityEngine.Rendering.Universal.ScriptableRenderPass renderPass)
    // Offset: 0x52AE4D8
    bool IsRenderPassEnabled(::UnityEngine::Rendering::Universal::ScriptableRenderPass* renderPass);
    // private System.Void ExecuteRenderPass(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Rendering.Universal.ScriptableRenderPass renderPass, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B6EF4
    void ExecuteRenderPass(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Rendering::Universal::ScriptableRenderPass* renderPass, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void SetRenderPassAttachments(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.Universal.ScriptableRenderPass renderPass, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52B7284
    void SetRenderPassAttachments(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::Universal::ScriptableRenderPass* renderPass, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // private System.Void BeginXRRendering(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52B65B4
    void BeginXRRendering(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // private System.Void EndXRRendering(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52B6738
    void EndXRRendering(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // static System.Void SetRenderTarget(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RenderTargetIdentifier colorAttachment, UnityEngine.Rendering.RenderTargetIdentifier depthAttachment, UnityEngine.Rendering.ClearFlag clearFlag, UnityEngine.Color clearColor)
    // Offset: 0x52AC71C
    static void SetRenderTarget(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RenderTargetIdentifier colorAttachment, ::UnityEngine::Rendering::RenderTargetIdentifier depthAttachment, ::UnityEngine::Rendering::ClearFlag clearFlag, ::UnityEngine::Color clearColor);
    // static System.Void SetRenderTarget(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle colorAttachment, UnityEngine.Rendering.RTHandle depthAttachment, UnityEngine.Rendering.ClearFlag clearFlag, UnityEngine.Color clearColor)
    // Offset: 0x52B91E8
    static void SetRenderTarget(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RTHandle* colorAttachment, ::UnityEngine::Rendering::RTHandle* depthAttachment, ::UnityEngine::Rendering::ClearFlag clearFlag, ::UnityEngine::Color clearColor);
    // static System.Void SetRenderTarget(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RenderTargetIdentifier colorAttachment, UnityEngine.Rendering.RenderTargetIdentifier depthAttachment, UnityEngine.Rendering.ClearFlag clearFlag, UnityEngine.Color clearColor, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction)
    // Offset: 0x52B8CF4
    static void SetRenderTarget(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RenderTargetIdentifier colorAttachment, ::UnityEngine::Rendering::RenderTargetIdentifier depthAttachment, ::UnityEngine::Rendering::ClearFlag clearFlag, ::UnityEngine::Color clearColor, ::UnityEngine::Rendering::RenderBufferStoreAction colorStoreAction, ::UnityEngine::Rendering::RenderBufferStoreAction depthStoreAction);
    // static System.Void SetRenderTarget(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle colorAttachment, UnityEngine.Rendering.RTHandle depthAttachment, UnityEngine.Rendering.ClearFlag clearFlag, UnityEngine.Color clearColor, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction)
    // Offset: 0x52B89EC
    static void SetRenderTarget(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RTHandle* colorAttachment, ::UnityEngine::Rendering::RTHandle* depthAttachment, ::UnityEngine::Rendering::ClearFlag clearFlag, ::UnityEngine::Color clearColor, ::UnityEngine::Rendering::RenderBufferStoreAction colorStoreAction, ::UnityEngine::Rendering::RenderBufferStoreAction depthStoreAction);
    // static private System.Void SetRenderTarget(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RenderTargetIdentifier colorAttachment, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.ClearFlag clearFlags, UnityEngine.Color clearColor)
    // Offset: 0x52B975C
    static void SetRenderTarget(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RenderTargetIdentifier colorAttachment, ::UnityEngine::Rendering::RenderBufferLoadAction colorLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction colorStoreAction, ::UnityEngine::Rendering::ClearFlag clearFlags, ::UnityEngine::Color clearColor);
    // static private System.Void SetRenderTarget(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle colorAttachment, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.ClearFlag clearFlags, UnityEngine.Color clearColor)
    // Offset: 0x52B9840
    static void SetRenderTarget(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RTHandle* colorAttachment, ::UnityEngine::Rendering::RenderBufferLoadAction colorLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction colorStoreAction, ::UnityEngine::Rendering::ClearFlag clearFlags, ::UnityEngine::Color clearColor);
    // static private System.Void SetRenderTarget(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RenderTargetIdentifier colorAttachment, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderTargetIdentifier depthAttachment, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction, UnityEngine.Rendering.ClearFlag clearFlags, UnityEngine.Color clearColor)
    // Offset: 0x52B9000
    static void SetRenderTarget(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RenderTargetIdentifier colorAttachment, ::UnityEngine::Rendering::RenderBufferLoadAction colorLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction colorStoreAction, ::UnityEngine::Rendering::RenderTargetIdentifier depthAttachment, ::UnityEngine::Rendering::RenderBufferLoadAction depthLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction depthStoreAction, ::UnityEngine::Rendering::ClearFlag clearFlags, ::UnityEngine::Color clearColor);
    // static private System.Void SetRenderTarget(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle colorAttachment, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RTHandle depthAttachment, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction, UnityEngine.Rendering.ClearFlag clearFlags, UnityEngine.Color clearColor)
    // Offset: 0x52B95B4
    static void SetRenderTarget(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RTHandle* colorAttachment, ::UnityEngine::Rendering::RenderBufferLoadAction colorLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction colorStoreAction, ::UnityEngine::Rendering::RTHandle* depthAttachment, ::UnityEngine::Rendering::RenderBufferLoadAction depthLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction depthStoreAction, ::UnityEngine::Rendering::ClearFlag clearFlags, ::UnityEngine::Color clearColor);
    // static private System.Void SetRenderTarget(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RenderTargetIdentifier[] colorAttachments, UnityEngine.Rendering.RenderTargetIdentifier depthAttachment, UnityEngine.Rendering.ClearFlag clearFlag, UnityEngine.Color clearColor)
    // Offset: 0x52B878C
    static void SetRenderTarget(::UnityEngine::Rendering::CommandBuffer* cmd, ::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> colorAttachments, ::UnityEngine::Rendering::RenderTargetIdentifier depthAttachment, ::UnityEngine::Rendering::ClearFlag clearFlag, ::UnityEngine::Color clearColor);
    // static private System.Void SetRenderTarget(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RenderTargetIdentifier[] colorAttachments, UnityEngine.Rendering.RTHandle depthAttachment, UnityEngine.Rendering.ClearFlag clearFlag, UnityEngine.Color clearColor)
    // Offset: 0x52B88C8
    static void SetRenderTarget(::UnityEngine::Rendering::CommandBuffer* cmd, ::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier> colorAttachments, ::UnityEngine::Rendering::RTHandle* depthAttachment, ::UnityEngine::Rendering::ClearFlag clearFlag, ::UnityEngine::Color clearColor);
    // static private System.Void SetRenderTarget(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle[] colorAttachments, UnityEngine.Rendering.RTHandle depthAttachment, UnityEngine.Rendering.ClearFlag clearFlag, UnityEngine.Color clearColor)
    // Offset: 0x52B9910
    static void SetRenderTarget(::UnityEngine::Rendering::CommandBuffer* cmd, ::ArrayW<::UnityEngine::Rendering::RTHandle*> colorAttachments, ::UnityEngine::Rendering::RTHandle* depthAttachment, ::UnityEngine::Rendering::ClearFlag clearFlag, ::UnityEngine::Color clearColor);
    // System.Void SwapColorBuffer(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52B9B58
    void SwapColorBuffer(::UnityEngine::Rendering::CommandBuffer* cmd);
    // System.Void EnableSwapBufferMSAA(System.Boolean enable)
    // Offset: 0x52B9B5C
    void EnableSwapBufferMSAA(bool enable);
    // private System.Void DrawGizmos(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera camera, UnityEngine.Rendering.GizmoSubset gizmoSubset, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B9B60
    void DrawGizmos(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Camera* camera, ::UnityEngine::Rendering::GizmoSubset gizmoSubset, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void DrawWireOverlay(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera camera)
    // Offset: 0x52B9B64
    void DrawWireOverlay(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Camera* camera);
    // private System.Void InternalStartRendering(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B5F94
    void InternalStartRendering(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void InternalFinishRendering(System.Boolean resolveFinalTarget, UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B49F4
    void InternalFinishRendering(bool resolveFinalTarget, ::UnityEngine::Rendering::Universal::RenderingData renderingData);
    // private System.Void InternalFinishRendering(UnityEngine.Rendering.ScriptableRenderContext context, System.Boolean resolveFinalTarget, UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52B68C0
    void InternalFinishRendering(::UnityEngine::Rendering::ScriptableRenderContext context, bool resolveFinalTarget, ::UnityEngine::Rendering::Universal::RenderingData renderingData);
    // static System.Void SortStable(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.ScriptableRenderPass> list)
    // Offset: 0x52B4834
    static void SortStable(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ScriptableRenderPass*>* list);
    // static private System.Void .cctor()
    // Offset: 0x52B9B84
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.ScriptableRenderer
  #pragma pack(pop)
  static check_size<sizeof(ScriptableRenderer), 423 + sizeof(bool)> __UnityEngine_Rendering_Universal_ScriptableRendererSizeCheck;
  static_assert(sizeof(ScriptableRenderer) == 0x1A8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ScriptableRenderer::RTHandleRenderTargetIdentifierCompat, "UnityEngine.Rendering.Universal", "ScriptableRenderer/RTHandleRenderTargetIdentifierCompat");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::get_cameraDepth
// Il2CppName: get_cameraDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderTargetIdentifier (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::get_cameraDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "get_cameraDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::ResetNativeRenderPassFrameData
// Il2CppName: ResetNativeRenderPassFrameData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::ResetNativeRenderPassFrameData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "ResetNativeRenderPassFrameData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetupNativeRenderPassFrameData
// Il2CppName: SetupNativeRenderPassFrameData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>, bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetupNativeRenderPassFrameData)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* isRenderPassEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetupNativeRenderPassFrameData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData, isRenderPassEnabled});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::UpdateFinalStoreActions
// Il2CppName: UpdateFinalStoreActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::ArrayW<int>, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::UpdateFinalStoreActions)> {
  static const MethodInfo* get() {
    static auto* currentMergeablePasses = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "UpdateFinalStoreActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentMergeablePasses, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetNativeRenderPassMRTAttachmentList
// Il2CppName: SetNativeRenderPassMRTAttachmentList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::Universal::ScriptableRenderPass*, ByRef<::UnityEngine::Rendering::Universal::CameraData>, bool, ::UnityEngine::Rendering::ClearFlag)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetNativeRenderPassMRTAttachmentList)> {
  static const MethodInfo* get() {
    static auto* renderPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* needCustomCameraColorClear = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cameraClearFlag = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetNativeRenderPassMRTAttachmentList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderPass, cameraData, needCustomCameraColorClear, cameraClearFlag});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::IsDepthOnlyRenderTexture
// Il2CppName: IsDepthOnlyRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::RenderTexture*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::IsDepthOnlyRenderTexture)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "IsDepthOnlyRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetNativeRenderPassAttachmentList
// Il2CppName: SetNativeRenderPassAttachmentList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::Universal::ScriptableRenderPass*, ByRef<::UnityEngine::Rendering::Universal::CameraData>, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Color)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetNativeRenderPassAttachmentList)> {
  static const MethodInfo* get() {
    static auto* renderPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* passColorAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* passDepthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* finalClearFlag = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* finalClearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetNativeRenderPassAttachmentList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderPass, cameraData, passColorAttachment, passDepthAttachment, finalClearFlag, finalClearColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::ExecuteNativeRenderPass
// Il2CppName: ExecuteNativeRenderPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Rendering::Universal::ScriptableRenderPass*, ByRef<::UnityEngine::Rendering::Universal::CameraData>, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::ExecuteNativeRenderPass)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "ExecuteNativeRenderPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderPass, cameraData, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetupInputAttachmentIndices
// Il2CppName: SetupInputAttachmentIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::Universal::ScriptableRenderPass*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetupInputAttachmentIndices)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetupInputAttachmentIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetupTransientInputAttachments
// Il2CppName: SetupTransientInputAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(int)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetupTransientInputAttachments)> {
  static const MethodInfo* get() {
    static auto* attachmentCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetupTransientInputAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attachmentCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::GetSubPassAttachmentIndicesCount
// Il2CppName: GetSubPassAttachmentIndicesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::UnityEngine::Rendering::Universal::ScriptableRenderPass*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::GetSubPassAttachmentIndicesCount)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "GetSubPassAttachmentIndicesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::AreAttachmentIndicesCompatible
// Il2CppName: AreAttachmentIndicesCompatible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::Universal::ScriptableRenderPass*, ::UnityEngine::Rendering::Universal::ScriptableRenderPass*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::AreAttachmentIndicesCompatible)> {
  static const MethodInfo* get() {
    static auto* lastSubPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")->byval_arg;
    static auto* currentSubPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "AreAttachmentIndicesCompatible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lastSubPass, currentSubPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::GetValidColorAttachmentCount
// Il2CppName: GetValidColorAttachmentCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::ArrayW<::UnityEngine::Rendering::AttachmentDescriptor>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::GetValidColorAttachmentCount)> {
  static const MethodInfo* get() {
    static auto* colorAttachments = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "AttachmentDescriptor"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "GetValidColorAttachmentCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorAttachments});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::GetValidInputAttachmentCount
// Il2CppName: GetValidInputAttachmentCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Rendering::Universal::ScriptableRenderPass*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::GetValidInputAttachmentCount)> {
  static const MethodInfo* get() {
    static auto* renderPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "GetValidInputAttachmentCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::FindAttachmentDescriptorIndexInList
// Il2CppName: FindAttachmentDescriptorIndexInList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::UnityEngine::Rendering::AttachmentDescriptor, ::ArrayW<::UnityEngine::Rendering::AttachmentDescriptor>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::FindAttachmentDescriptorIndexInList)> {
  static const MethodInfo* get() {
    static auto* attachmentIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachmentDescriptor = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "AttachmentDescriptor")->byval_arg;
    static auto* attachmentDescriptors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "AttachmentDescriptor"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "FindAttachmentDescriptorIndexInList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attachmentIdx, attachmentDescriptor, attachmentDescriptors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::FindAttachmentDescriptorIndexInList
// Il2CppName: FindAttachmentDescriptorIndexInList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Rendering::RenderTargetIdentifier, ::ArrayW<::UnityEngine::Rendering::AttachmentDescriptor>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::FindAttachmentDescriptorIndexInList)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* attachmentDescriptors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "AttachmentDescriptor"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "FindAttachmentDescriptorIndexInList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, attachmentDescriptors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::GetValidPassIndexCount
// Il2CppName: GetValidPassIndexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<int>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::GetValidPassIndexCount)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "GetValidPassIndexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::GetFirstAllocatedRTHandle
// Il2CppName: GetFirstAllocatedRTHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (*)(::UnityEngine::Rendering::Universal::ScriptableRenderPass*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::GetFirstAllocatedRTHandle)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "GetFirstAllocatedRTHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::PassHasInputAttachments
// Il2CppName: PassHasInputAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::Universal::ScriptableRenderPass*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::PassHasInputAttachments)> {
  static const MethodInfo* get() {
    static auto* renderPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "PassHasInputAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::CreateRenderPassHash
// Il2CppName: CreateRenderPassHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Hash128 (*)(int, int, int, int, uint)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::CreateRenderPassHash)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depthID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sample = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hashIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "CreateRenderPassHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, depthID, sample, hashIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::CreateRenderPassHash
// Il2CppName: CreateRenderPassHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Hash128 (*)(::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderPassDescriptor, uint)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::CreateRenderPassHash)> {
  static const MethodInfo* get() {
    static auto* desc = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer/RenderPassDescriptor")->byval_arg;
    static auto* hashIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "CreateRenderPassHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desc, hashIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::InitializeRenderPassDescriptor
// Il2CppName: InitializeRenderPassDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderPassDescriptor (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>, ::UnityEngine::Rendering::Universal::ScriptableRenderPass*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::InitializeRenderPassDescriptor)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* renderPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "InitializeRenderPassDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData, renderPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SupportedCameraStackingTypes
// Il2CppName: SupportedCameraStackingTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SupportedCameraStackingTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SupportedCameraStackingTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SupportsCameraStackingType
// Il2CppName: SupportsCameraStackingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::Universal::CameraRenderType)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SupportsCameraStackingType)> {
  static const MethodInfo* get() {
    static auto* cameraRenderType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraRenderType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SupportsCameraStackingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraRenderType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::get_profilingExecute
// Il2CppName: get_profilingExecute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::ProfilingSampler* (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::get_profilingExecute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "get_profilingExecute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::set_profilingExecute
// Il2CppName: set_profilingExecute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::ProfilingSampler*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::set_profilingExecute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ProfilingSampler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "set_profilingExecute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::get_DebugHandler
// Il2CppName: get_DebugHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugHandler* (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::get_DebugHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "get_DebugHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetCameraMatrices
// Il2CppName: SetCameraMatrices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::CameraData>, bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetCameraMatrices)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* setInverseMatrices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetCameraMatrices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cameraData, setInverseMatrices});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetCameraMatrices
// Il2CppName: SetCameraMatrices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::CameraData>, bool, bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetCameraMatrices)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* setInverseMatrices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isTargetFlipped = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetCameraMatrices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cameraData, setInverseMatrices, isTargetFlipped});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetPerCameraShaderVariables
// Il2CppName: SetPerCameraShaderVariables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetPerCameraShaderVariables)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetPerCameraShaderVariables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetPerCameraShaderVariables
// Il2CppName: SetPerCameraShaderVariables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::CameraData>, bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetPerCameraShaderVariables)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* isTargetFlipped = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetPerCameraShaderVariables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cameraData, isTargetFlipped});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetPerCameraBillboardProperties
// Il2CppName: SetPerCameraBillboardProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetPerCameraBillboardProperties)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetPerCameraBillboardProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::CalculateBillboardProperties
// Il2CppName: CalculateBillboardProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Matrix4x4>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<float>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::CalculateBillboardProperties)> {
  static const MethodInfo* get() {
    static auto* worldToCameraMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    static auto* billboardTangent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* billboardNormal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* cameraXZAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "CalculateBillboardProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldToCameraMatrix, billboardTangent, billboardNormal, cameraXZAngle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetPerCameraClippingPlaneProperties
// Il2CppName: SetPerCameraClippingPlaneProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetPerCameraClippingPlaneProperties)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetPerCameraClippingPlaneProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetPerCameraClippingPlaneProperties
// Il2CppName: SetPerCameraClippingPlaneProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::CameraData>, bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetPerCameraClippingPlaneProperties)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* isTargetFlipped = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetPerCameraClippingPlaneProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cameraData, isTargetFlipped});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetShaderTimeValues
// Il2CppName: SetShaderTimeValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, float, float, float)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetShaderTimeValues)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* smoothDeltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetShaderTimeValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, time, deltaTime, smoothDeltaTime});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::get_cameraColorTarget
// Il2CppName: get_cameraColorTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderTargetIdentifier (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::get_cameraColorTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "get_cameraColorTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::get_cameraColorTargetHandle
// Il2CppName: get_cameraColorTargetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::get_cameraColorTargetHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "get_cameraColorTargetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::GetCameraColorFrontBuffer
// Il2CppName: GetCameraColorFrontBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::GetCameraColorFrontBuffer)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "GetCameraColorFrontBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::GetCameraColorBackBuffer
// Il2CppName: GetCameraColorBackBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::GetCameraColorBackBuffer)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "GetCameraColorBackBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::get_cameraDepthTarget
// Il2CppName: get_cameraDepthTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderTargetIdentifier (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::get_cameraDepthTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "get_cameraDepthTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::get_cameraDepthTargetHandle
// Il2CppName: get_cameraDepthTargetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::get_cameraDepthTargetHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "get_cameraDepthTargetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::get_rendererFeatures
// Il2CppName: get_rendererFeatures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ScriptableRendererFeature*>* (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::get_rendererFeatures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "get_rendererFeatures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::get_activeRenderPassQueue
// Il2CppName: get_activeRenderPassQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ScriptableRenderPass*>* (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::get_activeRenderPassQueue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "get_activeRenderPassQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::get_supportedRenderingFeatures
// Il2CppName: get_supportedRenderingFeatures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderingFeatures* (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::get_supportedRenderingFeatures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "get_supportedRenderingFeatures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::set_supportedRenderingFeatures
// Il2CppName: set_supportedRenderingFeatures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderingFeatures*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::set_supportedRenderingFeatures)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer/RenderingFeatures")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "set_supportedRenderingFeatures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::get_unsupportedGraphicsDeviceTypes
// Il2CppName: get_unsupportedGraphicsDeviceTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rendering::GraphicsDeviceType> (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::get_unsupportedGraphicsDeviceTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "get_unsupportedGraphicsDeviceTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::set_unsupportedGraphicsDeviceTypes
// Il2CppName: set_unsupportedGraphicsDeviceTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::ArrayW<::UnityEngine::Rendering::GraphicsDeviceType>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::set_unsupportedGraphicsDeviceTypes)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "GraphicsDeviceType"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "set_unsupportedGraphicsDeviceTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::ConfigureActiveTarget
// Il2CppName: ConfigureActiveTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::ConfigureActiveTarget)> {
  static const MethodInfo* get() {
    static auto* colorAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "ConfigureActiveTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorAttachment, depthAttachment});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::get_useDepthPriming
// Il2CppName: get_useDepthPriming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::get_useDepthPriming)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "get_useDepthPriming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::set_useDepthPriming
// Il2CppName: set_useDepthPriming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::set_useDepthPriming)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "set_useDepthPriming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::get_stripShadowsOffVariants
// Il2CppName: get_stripShadowsOffVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::get_stripShadowsOffVariants)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "get_stripShadowsOffVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::set_stripShadowsOffVariants
// Il2CppName: set_stripShadowsOffVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::set_stripShadowsOffVariants)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "set_stripShadowsOffVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::get_stripAdditionalLightOffVariants
// Il2CppName: get_stripAdditionalLightOffVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::get_stripAdditionalLightOffVariants)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "get_stripAdditionalLightOffVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::set_stripAdditionalLightOffVariants
// Il2CppName: set_stripAdditionalLightOffVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::set_stripAdditionalLightOffVariants)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "set_stripAdditionalLightOffVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::ReleaseRenderTargets
// Il2CppName: ReleaseRenderTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::ReleaseRenderTargets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "ReleaseRenderTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::ConfigureCameraTarget
// Il2CppName: ConfigureCameraTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::ConfigureCameraTarget)> {
  static const MethodInfo* get() {
    static auto* colorTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* depthTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "ConfigureCameraTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorTarget, depthTarget});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::ConfigureCameraTarget
// Il2CppName: ConfigureCameraTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::ConfigureCameraTarget)> {
  static const MethodInfo* get() {
    static auto* colorTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* depthTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "ConfigureCameraTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorTarget, depthTarget});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::ConfigureCameraTarget
// Il2CppName: ConfigureCameraTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::ConfigureCameraTarget)> {
  static const MethodInfo* get() {
    static auto* colorTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* depthTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* resolveTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "ConfigureCameraTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorTarget, depthTarget, resolveTarget});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::ConfigureCameraTarget
// Il2CppName: ConfigureCameraTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::ConfigureCameraTarget)> {
  static const MethodInfo* get() {
    static auto* colorTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* depthTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* resolveTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "ConfigureCameraTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorTarget, depthTarget, resolveTarget});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::ConfigureCameraColorTarget
// Il2CppName: ConfigureCameraColorTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::ConfigureCameraColorTarget)> {
  static const MethodInfo* get() {
    static auto* colorTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "ConfigureCameraColorTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorTarget});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::ConfigureCameraColorTarget
// Il2CppName: ConfigureCameraColorTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::ConfigureCameraColorTarget)> {
  static const MethodInfo* get() {
    static auto* colorTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "ConfigureCameraColorTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorTarget});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::Setup)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetupLights
// Il2CppName: SetupLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetupLights)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetupLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetupCullingParameters
// Il2CppName: SetupCullingParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(ByRef<::UnityEngine::Rendering::ScriptableCullingParameters>, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetupCullingParameters)> {
  static const MethodInfo* get() {
    static auto* cullingParameters = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableCullingParameters")->this_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetupCullingParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cullingParameters, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::FinishRendering
// Il2CppName: FinishRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::FinishRendering)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "FinishRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::OnRecordRenderGraph
// Il2CppName: OnRecordRenderGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::OnRecordRenderGraph)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "OnRecordRenderGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::InitRenderGraphFrame
// Il2CppName: InitRenderGraphFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::InitRenderGraphFrame)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "InitRenderGraphFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::ProcessVFXCameraCommand
// Il2CppName: ProcessVFXCameraCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::ProcessVFXCameraCommand)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "ProcessVFXCameraCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetupRenderGraphCameraProperties
// Il2CppName: SetupRenderGraphCameraProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetupRenderGraphCameraProperties)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* isTargetBackbuffer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetupRenderGraphCameraProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, renderingData, isTargetBackbuffer});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::DrawRenderGraphGizmos
// Il2CppName: DrawRenderGraphGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle, ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle, ::UnityEngine::Rendering::GizmoSubset, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::DrawRenderGraphGizmos)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->byval_arg;
    static auto* gizmoSubset = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "GizmoSubset")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "DrawRenderGraphGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, color, depth, gizmoSubset, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::BeginRenderGraphXRRendering
// Il2CppName: BeginRenderGraphXRRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::BeginRenderGraphXRRendering)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "BeginRenderGraphXRRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::EndRenderGraphXRRendering
// Il2CppName: EndRenderGraphXRRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::EndRenderGraphXRRendering)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "EndRenderGraphXRRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::RecordRenderGraph
// Il2CppName: RecordRenderGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::RecordRenderGraph)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "RecordRenderGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::FinishRenderGraphRendering
// Il2CppName: FinishRenderGraphRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::FinishRenderGraphRendering)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "FinishRenderGraphRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::OnFinishRenderGraphRendering
// Il2CppName: OnFinishRenderGraphRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::OnFinishRenderGraphRendering)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "OnFinishRenderGraphRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::RecordCustomRenderGraphPasses
// Il2CppName: RecordCustomRenderGraphPasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Rendering::Universal::RenderPassEvent)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::RecordCustomRenderGraphPasses)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* injectionPoint = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderPassEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "RecordCustomRenderGraphPasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, context, renderingData, injectionPoint});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetPerCameraProperties
// Il2CppName: SetPerCameraProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::CameraData>, ::UnityEngine::Camera*, ::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetPerCameraProperties)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetPerCameraProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, cameraData, camera, cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::Execute)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::EnqueuePass
// Il2CppName: EnqueuePass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::Universal::ScriptableRenderPass*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::EnqueuePass)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "EnqueuePass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::GetCameraClearFlag
// Il2CppName: GetCameraClearFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::ClearFlag (*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::GetCameraClearFlag)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "GetCameraClearFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::OnPreCullRenderPasses
// Il2CppName: OnPreCullRenderPasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::OnPreCullRenderPasses)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "OnPreCullRenderPasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::AddRenderPasses
// Il2CppName: AddRenderPasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::AddRenderPasses)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "AddRenderPasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetupRenderPasses
// Il2CppName: SetupRenderPasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetupRenderPasses)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetupRenderPasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::ClearRenderingState
// Il2CppName: ClearRenderingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::ClearRenderingState)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "ClearRenderingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::Universal::CameraRenderType)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::Clear)> {
  static const MethodInfo* get() {
    static auto* cameraType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraRenderType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::ExecuteBlock
// Il2CppName: ExecuteBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(int, ByRef<::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks>, ::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::ExecuteBlock)> {
  static const MethodInfo* get() {
    static auto* blockIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* renderBlocks = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer/RenderBlocks")->this_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* submit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "ExecuteBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blockIndex, renderBlocks, context, renderingData, submit});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::IsRenderPassEnabled
// Il2CppName: IsRenderPassEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::Universal::ScriptableRenderPass*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::IsRenderPassEnabled)> {
  static const MethodInfo* get() {
    static auto* renderPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "IsRenderPassEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::ExecuteRenderPass
// Il2CppName: ExecuteRenderPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Rendering::Universal::ScriptableRenderPass*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::ExecuteRenderPass)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "ExecuteRenderPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderPass, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderPassAttachments
// Il2CppName: SetRenderPassAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::Universal::ScriptableRenderPass*, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderPassAttachments)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetRenderPassAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderPass, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::BeginXRRendering
// Il2CppName: BeginXRRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::BeginXRRendering)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "BeginXRRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, context, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::EndXRRendering
// Il2CppName: EndXRRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::EndXRRendering)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "EndXRRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, context, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Color)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* colorAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* clearFlag = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, colorAttachment, depthAttachment, clearFlag, clearColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Color)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* colorAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* clearFlag = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, colorAttachment, depthAttachment, clearFlag, clearColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Color, ::UnityEngine::Rendering::RenderBufferStoreAction, ::UnityEngine::Rendering::RenderBufferStoreAction)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* colorAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* clearFlag = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* colorStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* depthStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, colorAttachment, depthAttachment, clearFlag, clearColor, colorStoreAction, depthStoreAction});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Color, ::UnityEngine::Rendering::RenderBufferStoreAction, ::UnityEngine::Rendering::RenderBufferStoreAction)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* colorAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* clearFlag = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* colorStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* depthStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, colorAttachment, depthAttachment, clearFlag, clearColor, colorStoreAction, depthStoreAction});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderBufferLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction, ::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Color)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* colorAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* colorLoadAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferLoadAction")->byval_arg;
    static auto* colorStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* clearFlags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, colorAttachment, colorLoadAction, colorStoreAction, clearFlags, clearColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RenderBufferLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction, ::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Color)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* colorAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* colorLoadAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferLoadAction")->byval_arg;
    static auto* colorStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* clearFlags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, colorAttachment, colorLoadAction, colorStoreAction, clearFlags, clearColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderBufferLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction, ::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderBufferLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction, ::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Color)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* colorAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* colorLoadAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferLoadAction")->byval_arg;
    static auto* colorStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* depthLoadAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferLoadAction")->byval_arg;
    static auto* depthStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* clearFlags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, colorAttachment, colorLoadAction, colorStoreAction, depthAttachment, depthLoadAction, depthStoreAction, clearFlags, clearColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RenderBufferLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RenderBufferLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction, ::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Color)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* colorAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* colorLoadAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferLoadAction")->byval_arg;
    static auto* colorStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* depthLoadAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferLoadAction")->byval_arg;
    static auto* depthStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* clearFlags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, colorAttachment, colorLoadAction, colorStoreAction, depthAttachment, depthLoadAction, depthStoreAction, clearFlags, clearColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>, ::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Color)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* colorAttachments = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier"), 1)->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* clearFlag = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, colorAttachments, depthAttachment, clearFlag, clearColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::ArrayW<::UnityEngine::Rendering::RenderTargetIdentifier>, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Color)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* colorAttachments = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier"), 1)->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* clearFlag = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, colorAttachments, depthAttachment, clearFlag, clearColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::ArrayW<::UnityEngine::Rendering::RTHandle*>, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::ClearFlag, ::UnityEngine::Color)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SetRenderTarget)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* colorAttachments = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle"), 1)->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* clearFlag = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ClearFlag")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, colorAttachments, depthAttachment, clearFlag, clearColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SwapColorBuffer
// Il2CppName: SwapColorBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SwapColorBuffer)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SwapColorBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::EnableSwapBufferMSAA
// Il2CppName: EnableSwapBufferMSAA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(bool)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::EnableSwapBufferMSAA)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "EnableSwapBufferMSAA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::DrawGizmos
// Il2CppName: DrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Camera*, ::UnityEngine::Rendering::GizmoSubset, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::DrawGizmos)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* gizmoSubset = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "GizmoSubset")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "DrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, camera, gizmoSubset, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::DrawWireOverlay
// Il2CppName: DrawWireOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Camera*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::DrawWireOverlay)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "DrawWireOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::InternalStartRendering
// Il2CppName: InternalStartRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::InternalStartRendering)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "InternalStartRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::InternalFinishRendering
// Il2CppName: InternalFinishRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(bool, ::UnityEngine::Rendering::Universal::RenderingData)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::InternalFinishRendering)> {
  static const MethodInfo* get() {
    static auto* resolveFinalTarget = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "InternalFinishRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resolveFinalTarget, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::InternalFinishRendering
// Il2CppName: InternalFinishRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, bool, ::UnityEngine::Rendering::Universal::RenderingData)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::InternalFinishRendering)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* resolveFinalTarget = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "InternalFinishRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, resolveFinalTarget, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::SortStable
// Il2CppName: SortStable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ScriptableRenderPass*>*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::SortStable)> {
  static const MethodInfo* get() {
    static auto* list = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), "SortStable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{list});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
