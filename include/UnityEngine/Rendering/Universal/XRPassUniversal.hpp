// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Experimental.Rendering.XRPass
#include "UnityEngine/Experimental/Rendering/XRPass.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: XRPassCreateInfo
  struct XRPassCreateInfo;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: XRPassUniversal
  class XRPassUniversal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::XRPassUniversal);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::XRPassUniversal*, "UnityEngine.Rendering.Universal", "XRPassUniversal");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x6CB
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.XRPassUniversal
  // [TokenAttribute] Offset: FFFFFFFF
  class XRPassUniversal : public ::UnityEngine::Experimental::Rendering::XRPass {
    public:
    public:
    // private System.Boolean <isLateLatchEnabled>k__BackingField
    // Size: 0x1
    // Offset: 0x6C8
    bool isLateLatchEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <canMarkLateLatch>k__BackingField
    // Size: 0x1
    // Offset: 0x6C9
    bool canMarkLateLatch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <hasMarkedLateLatch>k__BackingField
    // Size: 0x1
    // Offset: 0x6CA
    bool hasMarkedLateLatch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Boolean <isLateLatchEnabled>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isLateLatchEnabled$k__BackingField();
    // Get instance field reference: private System.Boolean <canMarkLateLatch>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$canMarkLateLatch$k__BackingField();
    // Get instance field reference: private System.Boolean <hasMarkedLateLatch>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$hasMarkedLateLatch$k__BackingField();
    // static public UnityEngine.Experimental.Rendering.XRPass Create(UnityEngine.Experimental.Rendering.XRPassCreateInfo createInfo)
    // Offset: 0x52F9D60
    static ::UnityEngine::Experimental::Rendering::XRPass* Create(::UnityEngine::Experimental::Rendering::XRPassCreateInfo createInfo);
    // System.Boolean get_isLateLatchEnabled()
    // Offset: 0x52F9EB0
    bool get_isLateLatchEnabled();
    // System.Void set_isLateLatchEnabled(System.Boolean value)
    // Offset: 0x52F9EB8
    void set_isLateLatchEnabled(bool value);
    // System.Boolean get_canMarkLateLatch()
    // Offset: 0x52F9EC4
    bool get_canMarkLateLatch();
    // System.Void set_canMarkLateLatch(System.Boolean value)
    // Offset: 0x52F9ECC
    void set_canMarkLateLatch(bool value);
    // System.Boolean get_hasMarkedLateLatch()
    // Offset: 0x52F9ED8
    bool get_hasMarkedLateLatch();
    // System.Void set_hasMarkedLateLatch(System.Boolean value)
    // Offset: 0x52F9EE0
    void set_hasMarkedLateLatch(bool value);
    // public System.Void .ctor()
    // Offset: 0x52F9EEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRPassUniversal* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::XRPassUniversal::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRPassUniversal*, creationType>()));
    }
    // public override System.Void Release()
    // Offset: 0x52F9E44
    // Implemented from: UnityEngine.Experimental.Rendering.XRPass
    // Base method: System.Void XRPass::Release()
    void Release();
  }; // UnityEngine.Rendering.Universal.XRPassUniversal
  #pragma pack(pop)
  static check_size<sizeof(XRPassUniversal), 1738 + sizeof(bool)> __UnityEngine_Rendering_Universal_XRPassUniversalSizeCheck;
  static_assert(sizeof(XRPassUniversal) == 0x6CB);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::XRPassUniversal::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::XRPass* (*)(::UnityEngine::Experimental::Rendering::XRPassCreateInfo)>(&UnityEngine::Rendering::Universal::XRPassUniversal::Create)> {
  static const MethodInfo* get() {
    static auto* createInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "XRPassCreateInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::XRPassUniversal*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{createInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::XRPassUniversal::get_isLateLatchEnabled
// Il2CppName: get_isLateLatchEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::XRPassUniversal::*)()>(&UnityEngine::Rendering::Universal::XRPassUniversal::get_isLateLatchEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::XRPassUniversal*), "get_isLateLatchEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::XRPassUniversal::set_isLateLatchEnabled
// Il2CppName: set_isLateLatchEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::XRPassUniversal::*)(bool)>(&UnityEngine::Rendering::Universal::XRPassUniversal::set_isLateLatchEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::XRPassUniversal*), "set_isLateLatchEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::XRPassUniversal::get_canMarkLateLatch
// Il2CppName: get_canMarkLateLatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::XRPassUniversal::*)()>(&UnityEngine::Rendering::Universal::XRPassUniversal::get_canMarkLateLatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::XRPassUniversal*), "get_canMarkLateLatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::XRPassUniversal::set_canMarkLateLatch
// Il2CppName: set_canMarkLateLatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::XRPassUniversal::*)(bool)>(&UnityEngine::Rendering::Universal::XRPassUniversal::set_canMarkLateLatch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::XRPassUniversal*), "set_canMarkLateLatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::XRPassUniversal::get_hasMarkedLateLatch
// Il2CppName: get_hasMarkedLateLatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::XRPassUniversal::*)()>(&UnityEngine::Rendering::Universal::XRPassUniversal::get_hasMarkedLateLatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::XRPassUniversal*), "get_hasMarkedLateLatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::XRPassUniversal::set_hasMarkedLateLatch
// Il2CppName: set_hasMarkedLateLatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::XRPassUniversal::*)(bool)>(&UnityEngine::Rendering::Universal::XRPassUniversal::set_hasMarkedLateLatch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::XRPassUniversal*), "set_hasMarkedLateLatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::XRPassUniversal::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::XRPassUniversal::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::XRPassUniversal::*)()>(&UnityEngine::Rendering::Universal::XRPassUniversal::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::XRPassUniversal*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
