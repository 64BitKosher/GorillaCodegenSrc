// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.IntPoint
#include "UnityEngine/Rendering/Universal/IntPoint.hpp"
// Including type: UnityEngine.Rendering.Universal.DoublePoint
#include "UnityEngine/Rendering/Universal/DoublePoint.hpp"
// Including type: System.Double
#include "System/Double.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: PolyNode
  class PolyNode;
  // Forward declaring type: JoinType
  struct JoinType;
  // Forward declaring type: EndType
  struct EndType;
  // Forward declaring type: PolyTree
  class PolyTree;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ClipperOffset
  class ClipperOffset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::ClipperOffset);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ClipperOffset*, "UnityEngine.Rendering.Universal", "ClipperOffset");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.ClipperOffset
  // [TokenAttribute] Offset: FFFFFFFF
  class ClipperOffset : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> m_destPolys
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* m_destPolys;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> m_srcPoly
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* m_srcPoly;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> m_destPoly
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* m_destPoly;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.DoublePoint> m_normals
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DoublePoint>* m_normals;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DoublePoint>*) == 0x8);
    // private System.Double m_delta
    // Size: 0x8
    // Offset: 0x30
    double m_delta;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_sinA
    // Size: 0x8
    // Offset: 0x38
    double m_sinA;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_sin
    // Size: 0x8
    // Offset: 0x40
    double m_sin;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_cos
    // Size: 0x8
    // Offset: 0x48
    double m_cos;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_StepsPerRad
    // Size: 0x8
    // Offset: 0x50
    double m_StepsPerRad;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private UnityEngine.Rendering.Universal.IntPoint m_lowest
    // Size: 0x30
    // Offset: 0x58
    ::UnityEngine::Rendering::Universal::IntPoint m_lowest;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::IntPoint) == 0x30);
    // private UnityEngine.Rendering.Universal.PolyNode m_polyNodes
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Rendering::Universal::PolyNode* m_polyNodes;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::PolyNode*) == 0x8);
    // private System.Double <ArcTolerance>k__BackingField
    // Size: 0x8
    // Offset: 0x90
    double ArcTolerance;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // static field const value: static private System.Double two_pi
    static constexpr const double two_pi = 6.283185307179586;
    // Get static field: static private System.Double two_pi
    static double _get_two_pi();
    // Set static field: static private System.Double two_pi
    static void _set_two_pi(double value);
    // static field const value: static private System.Double def_arc_tolerance
    static constexpr const double def_arc_tolerance = 0.25;
    // Get static field: static private System.Double def_arc_tolerance
    static double _get_def_arc_tolerance();
    // Set static field: static private System.Double def_arc_tolerance
    static void _set_def_arc_tolerance(double value);
    // Get instance field reference: private System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> m_destPolys
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>*& dyn_m_destPolys();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> m_srcPoly
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*& dyn_m_srcPoly();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> m_destPoly
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*& dyn_m_destPoly();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.DoublePoint> m_normals
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DoublePoint>*& dyn_m_normals();
    // Get instance field reference: private System.Double m_delta
    [[deprecated("Use field access instead!")]] double& dyn_m_delta();
    // Get instance field reference: private System.Double m_sinA
    [[deprecated("Use field access instead!")]] double& dyn_m_sinA();
    // Get instance field reference: private System.Double m_sin
    [[deprecated("Use field access instead!")]] double& dyn_m_sin();
    // Get instance field reference: private System.Double m_cos
    [[deprecated("Use field access instead!")]] double& dyn_m_cos();
    // Get instance field reference: private System.Double m_StepsPerRad
    [[deprecated("Use field access instead!")]] double& dyn_m_StepsPerRad();
    // Get instance field reference: private UnityEngine.Rendering.Universal.IntPoint m_lowest
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::IntPoint& dyn_m_lowest();
    // Get instance field reference: private UnityEngine.Rendering.Universal.PolyNode m_polyNodes
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::PolyNode*& dyn_m_polyNodes();
    // Get instance field reference: private System.Double <ArcTolerance>k__BackingField
    [[deprecated("Use field access instead!")]] double& dyn_$ArcTolerance$k__BackingField();
    // public System.Double get_ArcTolerance()
    // Offset: 0x5278FF0
    double get_ArcTolerance();
    // public System.Void set_ArcTolerance(System.Double value)
    // Offset: 0x5278FF8
    void set_ArcTolerance(double value);
    // public System.Void .ctor(System.Double arcTolerance)
    // Offset: 0x5279000
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClipperOffset* New_ctor(double arcTolerance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::ClipperOffset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClipperOffset*, creationType>(arcTolerance)));
    }
    // public System.Void Clear()
    // Offset: 0x52790DC
    void Clear();
    // static System.Int64 Round(System.Double value)
    // Offset: 0x5279154
    static int64_t Round(double value);
    // public System.Void AddPath(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> path, UnityEngine.Rendering.Universal.JoinType joinType, UnityEngine.Rendering.Universal.EndType endType)
    // Offset: 0x5279188
    void AddPath(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* path, ::UnityEngine::Rendering::Universal::JoinType joinType, ::UnityEngine::Rendering::Universal::EndType endType);
    // public System.Void AddPaths(System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> paths, UnityEngine.Rendering.Universal.JoinType joinType, UnityEngine.Rendering.Universal.EndType endType)
    // Offset: 0x5279718
    void AddPaths(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* paths, ::UnityEngine::Rendering::Universal::JoinType joinType, ::UnityEngine::Rendering::Universal::EndType endType);
    // private System.Void FixOrientations()
    // Offset: 0x527986C
    void FixOrientations();
    // static UnityEngine.Rendering.Universal.DoublePoint GetUnitNormal(UnityEngine.Rendering.Universal.IntPoint pt1, UnityEngine.Rendering.Universal.IntPoint pt2)
    // Offset: 0x52799F8
    static ::UnityEngine::Rendering::Universal::DoublePoint GetUnitNormal(::UnityEngine::Rendering::Universal::IntPoint pt1, ::UnityEngine::Rendering::Universal::IntPoint pt2);
    // private System.Void DoOffset(System.Double delta)
    // Offset: 0x5279ABC
    void DoOffset(double delta);
    // public System.Void Execute(ref System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> solution, System.Double delta, System.Int32 inputSize)
    // Offset: 0x527B6A0
    void Execute(ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>*> solution, double delta, int inputSize);
    // public System.Void Execute(ref UnityEngine.Rendering.Universal.PolyTree solution, System.Double delta)
    // Offset: 0x527BB6C
    void Execute(ByRef<::UnityEngine::Rendering::Universal::PolyTree*> solution, double delta);
    // private System.Void OffsetPoint(System.Int32 j, ref System.Int32 k, UnityEngine.Rendering.Universal.JoinType jointype)
    // Offset: 0x527A8D0
    void OffsetPoint(int j, ByRef<int> k, ::UnityEngine::Rendering::Universal::JoinType jointype);
    // System.Void DoSquare(System.Int32 j, System.Int32 k)
    // Offset: 0x527C16C
    void DoSquare(int j, int k);
    // System.Void DoMiter(System.Int32 j, System.Int32 k, System.Double r)
    // Offset: 0x527C740
    void DoMiter(int j, int k, double r);
    // System.Void DoRound(System.Int32 j, System.Int32 k)
    // Offset: 0x527B164
    void DoRound(int j, int k);
  }; // UnityEngine.Rendering.Universal.ClipperOffset
  #pragma pack(pop)
  static check_size<sizeof(ClipperOffset), 144 + sizeof(double)> __UnityEngine_Rendering_Universal_ClipperOffsetSizeCheck;
  static_assert(sizeof(ClipperOffset) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::get_ArcTolerance
// Il2CppName: get_ArcTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Rendering::Universal::ClipperOffset::*)()>(&UnityEngine::Rendering::Universal::ClipperOffset::get_ArcTolerance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperOffset*), "get_ArcTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::set_ArcTolerance
// Il2CppName: set_ArcTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperOffset::*)(double)>(&UnityEngine::Rendering::Universal::ClipperOffset::set_ArcTolerance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperOffset*), "set_ArcTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperOffset::*)()>(&UnityEngine::Rendering::Universal::ClipperOffset::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperOffset*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::Round
// Il2CppName: Round
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(double)>(&UnityEngine::Rendering::Universal::ClipperOffset::Round)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperOffset*), "Round", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::AddPath
// Il2CppName: AddPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperOffset::*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, ::UnityEngine::Rendering::Universal::JoinType, ::UnityEngine::Rendering::Universal::EndType)>(&UnityEngine::Rendering::Universal::ClipperOffset::AddPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* joinType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "JoinType")->byval_arg;
    static auto* endType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "EndType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperOffset*), "AddPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, joinType, endType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::AddPaths
// Il2CppName: AddPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperOffset::*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>*, ::UnityEngine::Rendering::Universal::JoinType, ::UnityEngine::Rendering::Universal::EndType)>(&UnityEngine::Rendering::Universal::ClipperOffset::AddPaths)> {
  static const MethodInfo* get() {
    static auto* paths = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})})->byval_arg;
    static auto* joinType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "JoinType")->byval_arg;
    static auto* endType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "EndType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperOffset*), "AddPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paths, joinType, endType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::FixOrientations
// Il2CppName: FixOrientations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperOffset::*)()>(&UnityEngine::Rendering::Universal::ClipperOffset::FixOrientations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperOffset*), "FixOrientations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::GetUnitNormal
// Il2CppName: GetUnitNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DoublePoint (*)(::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint)>(&UnityEngine::Rendering::Universal::ClipperOffset::GetUnitNormal)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperOffset*), "GetUnitNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::DoOffset
// Il2CppName: DoOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperOffset::*)(double)>(&UnityEngine::Rendering::Universal::ClipperOffset::DoOffset)> {
  static const MethodInfo* get() {
    static auto* delta = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperOffset*), "DoOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delta});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperOffset::*)(ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>*>, double, int)>(&UnityEngine::Rendering::Universal::ClipperOffset::Execute)> {
  static const MethodInfo* get() {
    static auto* solution = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})})->this_arg;
    static auto* delta = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* inputSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperOffset*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{solution, delta, inputSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperOffset::*)(ByRef<::UnityEngine::Rendering::Universal::PolyTree*>, double)>(&UnityEngine::Rendering::Universal::ClipperOffset::Execute)> {
  static const MethodInfo* get() {
    static auto* solution = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyTree")->this_arg;
    static auto* delta = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperOffset*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{solution, delta});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::OffsetPoint
// Il2CppName: OffsetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperOffset::*)(int, ByRef<int>, ::UnityEngine::Rendering::Universal::JoinType)>(&UnityEngine::Rendering::Universal::ClipperOffset::OffsetPoint)> {
  static const MethodInfo* get() {
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* jointype = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "JoinType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperOffset*), "OffsetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{j, k, jointype});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::DoSquare
// Il2CppName: DoSquare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperOffset::*)(int, int)>(&UnityEngine::Rendering::Universal::ClipperOffset::DoSquare)> {
  static const MethodInfo* get() {
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperOffset*), "DoSquare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{j, k});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::DoMiter
// Il2CppName: DoMiter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperOffset::*)(int, int, double)>(&UnityEngine::Rendering::Universal::ClipperOffset::DoMiter)> {
  static const MethodInfo* get() {
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperOffset*), "DoMiter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{j, k, r});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperOffset::DoRound
// Il2CppName: DoRound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperOffset::*)(int, int)>(&UnityEngine::Rendering::Universal::ClipperOffset::DoRound)> {
  static const MethodInfo* get() {
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperOffset*), "DoRound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{j, k});
  }
};
