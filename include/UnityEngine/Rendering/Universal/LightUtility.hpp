// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.VertexAttributeDescriptor
#include "UnityEngine/Rendering/VertexAttributeDescriptor.hpp"
// Including type: UnityEngine.Rendering.Universal.Light2D
#include "UnityEngine/Rendering/Universal/Light2D.hpp"
// Including type: UnityEngine.Rendering.Universal.IntPoint
#include "UnityEngine/Rendering/Universal/IntPoint.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
  // Forward declaring type: Sprite
  class Sprite;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: NativeArray`1<T>
  template<typename T>
  struct NativeArray_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: LightUtility
  class LightUtility;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::LightUtility);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::LightUtility*, "UnityEngine.Rendering.Universal", "LightUtility");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.LightUtility
  // [TokenAttribute] Offset: FFFFFFFF
  class LightUtility : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::LightUtility::PivotType
    struct PivotType;
    // Nested type: ::UnityEngine::Rendering::Universal::LightUtility::LightMeshVertex
    struct LightMeshVertex;
    // Size: 0x24
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.Universal.LightUtility/LightMeshVertex
    // [TokenAttribute] Offset: FFFFFFFF
    struct LightMeshVertex/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 position
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 position;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Color color
      // Size: 0x10
      // Offset: 0xC
      ::UnityEngine::Color color;
      // Field size check
      static_assert(sizeof(::UnityEngine::Color) == 0x10);
      // public UnityEngine.Vector2 uv
      // Size: 0x8
      // Offset: 0x1C
      ::UnityEngine::Vector2 uv;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
      public:
      // Creating value type constructor for type: LightMeshVertex
      constexpr LightMeshVertex(::UnityEngine::Vector3 position_ = {}, ::UnityEngine::Color color_ = {}, ::UnityEngine::Vector2 uv_ = {}) noexcept : position{position_}, color{color_}, uv{uv_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get static field: static public readonly UnityEngine.Rendering.VertexAttributeDescriptor[] VertexLayout
      static ::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor> _get_VertexLayout();
      // Set static field: static public readonly UnityEngine.Rendering.VertexAttributeDescriptor[] VertexLayout
      static void _set_VertexLayout(::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor> value);
      // Get instance field reference: public UnityEngine.Vector3 position
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
      // Get instance field reference: public UnityEngine.Color color
      [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_color();
      // Get instance field reference: public UnityEngine.Vector2 uv
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_uv();
      // static private System.Void .cctor()
      // Offset: 0x5281780
      static void _cctor();
    }; // UnityEngine.Rendering.Universal.LightUtility/LightMeshVertex
    #pragma pack(pop)
    static check_size<sizeof(LightUtility::LightMeshVertex), 28 + sizeof(::UnityEngine::Vector2)> __UnityEngine_Rendering_Universal_LightUtility_LightMeshVertexSizeCheck;
    static_assert(sizeof(LightUtility::LightMeshVertex) == 0x24);
    // static public System.Boolean CheckForChange(UnityEngine.Rendering.Universal.Light2D/LightType a, ref UnityEngine.Rendering.Universal.Light2D/LightType b)
    // Offset: 0x527D96C
    static bool CheckForChange(::UnityEngine::Rendering::Universal::Light2D::LightType a, ByRef<::UnityEngine::Rendering::Universal::Light2D::LightType> b);
    // static public System.Boolean CheckForChange(System.Int32 a, ref System.Int32 b)
    // Offset: 0x527D954
    static bool CheckForChange(int a, ByRef<int> b);
    // static public System.Boolean CheckForChange(System.Single a, ref System.Single b)
    // Offset: 0x527D93C
    static bool CheckForChange(float a, ByRef<float> b);
    // static public System.Boolean CheckForChange(System.Boolean a, ref System.Boolean b)
    // Offset: 0x5280760
    static bool CheckForChange(bool a, ByRef<bool> b);
    // static private System.Boolean TestPivot(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> path, System.Int32 activePoint, System.Int64 lastPoint)
    // Offset: 0x5280778
    static bool TestPivot(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* path, int activePoint, int64_t lastPoint);
    // static private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> DegeneratePivots(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> path, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> inPath, ref System.Int32 interiorStart)
    // Offset: 0x528084C
    static ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* DegeneratePivots(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* path, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* inPath, ByRef<int> interiorStart);
    // static private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> SortPivots(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> outPath, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> inPath)
    // Offset: 0x5280C58
    static ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* SortPivots(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* outPath, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* inPath);
    // static private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> FixPivots(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> outPath, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> inPath, ref System.Int32 interiorStart)
    // Offset: 0x5280E80
    static ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* FixPivots(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* outPath, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* inPath, ByRef<int> interiorStart);
    // static System.Collections.Generic.List`1<UnityEngine.Vector2> GetOutlinePath(UnityEngine.Vector3[] shapePath, System.Single offsetDistance)
    // Offset: 0x5281190
    static ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* GetOutlinePath(::ArrayW<::UnityEngine::Vector3> shapePath, float offsetDistance);
    // static private System.Void TransferToMesh(Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.LightUtility/LightMeshVertex> vertices, System.Int32 vertexCount, Unity.Collections.NativeArray`1<System.UInt16> indices, System.Int32 indexCount, UnityEngine.Rendering.Universal.Light2D light)
    // Offset: 0x528157C
    static void TransferToMesh(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::LightUtility::LightMeshVertex> vertices, int vertexCount, ::Unity::Collections::NativeArray_1<uint16_t> indices, int indexCount, ::UnityEngine::Rendering::Universal::Light2D* light);
    // static public UnityEngine.Bounds GenerateShapeMesh(UnityEngine.Rendering.Universal.Light2D light, UnityEngine.Vector3[] shapePath, System.Single falloffDistance)
    // Offset: 0x527D984
    static ::UnityEngine::Bounds GenerateShapeMesh(::UnityEngine::Rendering::Universal::Light2D* light, ::ArrayW<::UnityEngine::Vector3> shapePath, float falloffDistance);
    // static public UnityEngine.Bounds GenerateParametricMesh(UnityEngine.Rendering.Universal.Light2D light, System.Single radius, System.Single falloffDistance, System.Single angle, System.Int32 sides)
    // Offset: 0x527E52C
    static ::UnityEngine::Bounds GenerateParametricMesh(::UnityEngine::Rendering::Universal::Light2D* light, float radius, float falloffDistance, float angle, int sides);
    // static public UnityEngine.Bounds GenerateSpriteMesh(UnityEngine.Rendering.Universal.Light2D light, UnityEngine.Sprite sprite)
    // Offset: 0x527D3EC
    static ::UnityEngine::Bounds GenerateSpriteMesh(::UnityEngine::Rendering::Universal::Light2D* light, ::UnityEngine::Sprite* sprite);
    // static public System.Int32 GetShapePathHash(UnityEngine.Vector3[] path)
    // Offset: 0x527D850
    static int GetShapePathHash(::ArrayW<::UnityEngine::Vector3> path);
  }; // UnityEngine.Rendering.Universal.LightUtility
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::LightUtility::LightMeshVertex, "UnityEngine.Rendering.Universal", "LightUtility/LightMeshVertex");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightUtility::CheckForChange
// Il2CppName: CheckForChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::Universal::Light2D::LightType, ByRef<::UnityEngine::Rendering::Universal::Light2D::LightType>)>(&UnityEngine::Rendering::Universal::LightUtility::CheckForChange)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D/LightType")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D/LightType")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightUtility*), "CheckForChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightUtility::CheckForChange
// Il2CppName: CheckForChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ByRef<int>)>(&UnityEngine::Rendering::Universal::LightUtility::CheckForChange)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightUtility*), "CheckForChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightUtility::CheckForChange
// Il2CppName: CheckForChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, ByRef<float>)>(&UnityEngine::Rendering::Universal::LightUtility::CheckForChange)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightUtility*), "CheckForChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightUtility::CheckForChange
// Il2CppName: CheckForChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool, ByRef<bool>)>(&UnityEngine::Rendering::Universal::LightUtility::CheckForChange)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightUtility*), "CheckForChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightUtility::TestPivot
// Il2CppName: TestPivot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, int, int64_t)>(&UnityEngine::Rendering::Universal::LightUtility::TestPivot)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* activePoint = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lastPoint = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightUtility*), "TestPivot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, activePoint, lastPoint});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightUtility::DegeneratePivots
// Il2CppName: DegeneratePivots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, ByRef<int>)>(&UnityEngine::Rendering::Universal::LightUtility::DegeneratePivots)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* inPath = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* interiorStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightUtility*), "DegeneratePivots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, inPath, interiorStart});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightUtility::SortPivots
// Il2CppName: SortPivots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*)>(&UnityEngine::Rendering::Universal::LightUtility::SortPivots)> {
  static const MethodInfo* get() {
    static auto* outPath = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* inPath = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightUtility*), "SortPivots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outPath, inPath});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightUtility::FixPivots
// Il2CppName: FixPivots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, ByRef<int>)>(&UnityEngine::Rendering::Universal::LightUtility::FixPivots)> {
  static const MethodInfo* get() {
    static auto* outPath = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* inPath = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* interiorStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightUtility*), "FixPivots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outPath, inPath, interiorStart});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightUtility::GetOutlinePath
// Il2CppName: GetOutlinePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector2>* (*)(::ArrayW<::UnityEngine::Vector3>, float)>(&UnityEngine::Rendering::Universal::LightUtility::GetOutlinePath)> {
  static const MethodInfo* get() {
    static auto* shapePath = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* offsetDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightUtility*), "GetOutlinePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shapePath, offsetDistance});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightUtility::TransferToMesh
// Il2CppName: TransferToMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::LightUtility::LightMeshVertex>, int, ::Unity::Collections::NativeArray_1<uint16_t>, int, ::UnityEngine::Rendering::Universal::Light2D*)>(&UnityEngine::Rendering::Universal::LightUtility::TransferToMesh)> {
  static const MethodInfo* get() {
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightUtility/LightMeshVertex")})->byval_arg;
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    static auto* indexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightUtility*), "TransferToMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, vertexCount, indices, indexCount, light});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightUtility::GenerateShapeMesh
// Il2CppName: GenerateShapeMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (*)(::UnityEngine::Rendering::Universal::Light2D*, ::ArrayW<::UnityEngine::Vector3>, float)>(&UnityEngine::Rendering::Universal::LightUtility::GenerateShapeMesh)> {
  static const MethodInfo* get() {
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")->byval_arg;
    static auto* shapePath = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* falloffDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightUtility*), "GenerateShapeMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{light, shapePath, falloffDistance});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightUtility::GenerateParametricMesh
// Il2CppName: GenerateParametricMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (*)(::UnityEngine::Rendering::Universal::Light2D*, float, float, float, int)>(&UnityEngine::Rendering::Universal::LightUtility::GenerateParametricMesh)> {
  static const MethodInfo* get() {
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* falloffDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* sides = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightUtility*), "GenerateParametricMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{light, radius, falloffDistance, angle, sides});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightUtility::GenerateSpriteMesh
// Il2CppName: GenerateSpriteMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (*)(::UnityEngine::Rendering::Universal::Light2D*, ::UnityEngine::Sprite*)>(&UnityEngine::Rendering::Universal::LightUtility::GenerateSpriteMesh)> {
  static const MethodInfo* get() {
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")->byval_arg;
    static auto* sprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightUtility*), "GenerateSpriteMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{light, sprite});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightUtility::GetShapePathHash
// Il2CppName: GetShapePathHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::Rendering::Universal::LightUtility::GetShapePathHash)> {
  static const MethodInfo* get() {
    static auto* path = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightUtility*), "GetShapePathHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
