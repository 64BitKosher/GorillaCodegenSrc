// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.Rendering.Universal.RenderingLayerUtils
#include "UnityEngine/Rendering/Universal/RenderingLayerUtils.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ScriptableRenderer
  class ScriptableRenderer;
  // Forward declaring type: CameraData
  struct CameraData;
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ScriptableRendererFeature
  class ScriptableRendererFeature;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::ScriptableRendererFeature);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ScriptableRendererFeature*, "UnityEngine.Rendering.Universal", "ScriptableRendererFeature");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.ScriptableRendererFeature
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExcludeFromPresetAttribute] Offset: FFFFFFFF
  class ScriptableRendererFeature : public ::UnityEngine::ScriptableObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Boolean m_Active
    // Size: 0x1
    // Offset: 0x18
    bool m_Active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean m_Active
    [[deprecated("Use field access instead!")]] bool& dyn_m_Active();
    // public System.Boolean get_isActive()
    // Offset: 0x52DC470
    bool get_isActive();
    // public System.Void Create()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Create();
    // public System.Void OnCameraPreCull(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, in UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52DC478
    void OnCameraPreCull(::UnityEngine::Rendering::Universal::ScriptableRenderer* renderer, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // public System.Void AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddRenderPasses(::UnityEngine::Rendering::Universal::ScriptableRenderer* renderer, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public System.Void SetupRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, in UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52DC47C
    void SetupRenderPasses(::UnityEngine::Rendering::Universal::ScriptableRenderer* renderer, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void OnEnable()
    // Offset: 0x52DC480
    void OnEnable();
    // private System.Void OnValidate()
    // Offset: 0x52DC48C
    void OnValidate();
    // System.Boolean SupportsNativeRenderPass()
    // Offset: 0x52DC498
    bool SupportsNativeRenderPass();
    // System.Boolean RequireRenderingLayers(System.Boolean isDeferred, out UnityEngine.Rendering.Universal.RenderingLayerUtils/Event atEvent, out UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize maskSize)
    // Offset: 0x52DC4A0
    bool RequireRenderingLayers(bool isDeferred, ByRef<::UnityEngine::Rendering::Universal::RenderingLayerUtils::Event> atEvent, ByRef<::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize> maskSize);
    // public System.Void SetActive(System.Boolean active)
    // Offset: 0x52DC4B0
    void SetActive(bool active);
    // public System.Void Dispose()
    // Offset: 0x52DC4BC
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x52DC528
    void Dispose(bool disposing);
    // protected System.Void .ctor()
    // Offset: 0x52D4888
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScriptableRendererFeature* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::ScriptableRendererFeature::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScriptableRendererFeature*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.ScriptableRendererFeature
  #pragma pack(pop)
  static check_size<sizeof(ScriptableRendererFeature), 24 + sizeof(bool)> __UnityEngine_Rendering_Universal_ScriptableRendererFeatureSizeCheck;
  static_assert(sizeof(ScriptableRendererFeature) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRendererFeature::get_isActive
// Il2CppName: get_isActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScriptableRendererFeature::*)()>(&UnityEngine::Rendering::Universal::ScriptableRendererFeature::get_isActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRendererFeature*), "get_isActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRendererFeature::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRendererFeature::*)()>(&UnityEngine::Rendering::Universal::ScriptableRendererFeature::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRendererFeature*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRendererFeature::OnCameraPreCull
// Il2CppName: OnCameraPreCull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRendererFeature::*)(::UnityEngine::Rendering::Universal::ScriptableRenderer*, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::ScriptableRendererFeature::OnCameraPreCull)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRendererFeature*), "OnCameraPreCull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRendererFeature::AddRenderPasses
// Il2CppName: AddRenderPasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRendererFeature::*)(::UnityEngine::Rendering::Universal::ScriptableRenderer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRendererFeature::AddRenderPasses)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRendererFeature*), "AddRenderPasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRendererFeature::SetupRenderPasses
// Il2CppName: SetupRenderPasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRendererFeature::*)(::UnityEngine::Rendering::Universal::ScriptableRenderer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScriptableRendererFeature::SetupRenderPasses)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRendererFeature*), "SetupRenderPasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRendererFeature::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRendererFeature::*)()>(&UnityEngine::Rendering::Universal::ScriptableRendererFeature::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRendererFeature*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRendererFeature::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRendererFeature::*)()>(&UnityEngine::Rendering::Universal::ScriptableRendererFeature::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRendererFeature*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRendererFeature::SupportsNativeRenderPass
// Il2CppName: SupportsNativeRenderPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScriptableRendererFeature::*)()>(&UnityEngine::Rendering::Universal::ScriptableRendererFeature::SupportsNativeRenderPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRendererFeature*), "SupportsNativeRenderPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRendererFeature::RequireRenderingLayers
// Il2CppName: RequireRenderingLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScriptableRendererFeature::*)(bool, ByRef<::UnityEngine::Rendering::Universal::RenderingLayerUtils::Event>, ByRef<::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize>)>(&UnityEngine::Rendering::Universal::ScriptableRendererFeature::RequireRenderingLayers)> {
  static const MethodInfo* get() {
    static auto* isDeferred = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* atEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingLayerUtils/Event")->this_arg;
    static auto* maskSize = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingLayerUtils/MaskSize")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRendererFeature*), "RequireRenderingLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isDeferred, atEvent, maskSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRendererFeature::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRendererFeature::*)(bool)>(&UnityEngine::Rendering::Universal::ScriptableRendererFeature::SetActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRendererFeature*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRendererFeature::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRendererFeature::*)()>(&UnityEngine::Rendering::Universal::ScriptableRendererFeature::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRendererFeature*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRendererFeature::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRendererFeature::*)(bool)>(&UnityEngine::Rendering::Universal::ScriptableRendererFeature::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRendererFeature*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRendererFeature::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
