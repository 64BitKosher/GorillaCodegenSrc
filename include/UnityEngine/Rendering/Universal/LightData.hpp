// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Rendering.VisibleLight
#include "UnityEngine/Rendering/VisibleLight.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: LightData
  struct LightData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::LightData, "UnityEngine.Rendering.Universal", "LightData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.LightData
  // [TokenAttribute] Offset: FFFFFFFF
  struct LightData/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 mainLightIndex
    // Size: 0x4
    // Offset: 0x0
    int mainLightIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 additionalLightsCount
    // Size: 0x4
    // Offset: 0x4
    int additionalLightsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 maxPerObjectAdditionalLightsCount
    // Size: 0x4
    // Offset: 0x8
    int maxPerObjectAdditionalLightsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleLight> visibleLights
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight> visibleLights;
    // public System.Boolean shadeAdditionalLightsPerVertex
    // Size: 0x1
    // Offset: 0x20
    bool shadeAdditionalLightsPerVertex;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean supportsMixedLighting
    // Size: 0x1
    // Offset: 0x21
    bool supportsMixedLighting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean reflectionProbeBoxProjection
    // Size: 0x1
    // Offset: 0x22
    bool reflectionProbeBoxProjection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean reflectionProbeBlending
    // Size: 0x1
    // Offset: 0x23
    bool reflectionProbeBlending;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean supportsLightLayers
    // Size: 0x1
    // Offset: 0x24
    bool supportsLightLayers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean supportsAdditionalLights
    // Size: 0x1
    // Offset: 0x25
    bool supportsAdditionalLights;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: LightData
    constexpr LightData(int mainLightIndex_ = {}, int additionalLightsCount_ = {}, int maxPerObjectAdditionalLightsCount_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight> visibleLights_ = {}, bool shadeAdditionalLightsPerVertex_ = {}, bool supportsMixedLighting_ = {}, bool reflectionProbeBoxProjection_ = {}, bool reflectionProbeBlending_ = {}, bool supportsLightLayers_ = {}, bool supportsAdditionalLights_ = {}) noexcept : mainLightIndex{mainLightIndex_}, additionalLightsCount{additionalLightsCount_}, maxPerObjectAdditionalLightsCount{maxPerObjectAdditionalLightsCount_}, visibleLights{visibleLights_}, shadeAdditionalLightsPerVertex{shadeAdditionalLightsPerVertex_}, supportsMixedLighting{supportsMixedLighting_}, reflectionProbeBoxProjection{reflectionProbeBoxProjection_}, reflectionProbeBlending{reflectionProbeBlending_}, supportsLightLayers{supportsLightLayers_}, supportsAdditionalLights{supportsAdditionalLights_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 mainLightIndex
    [[deprecated("Use field access instead!")]] int& dyn_mainLightIndex();
    // Get instance field reference: public System.Int32 additionalLightsCount
    [[deprecated("Use field access instead!")]] int& dyn_additionalLightsCount();
    // Get instance field reference: public System.Int32 maxPerObjectAdditionalLightsCount
    [[deprecated("Use field access instead!")]] int& dyn_maxPerObjectAdditionalLightsCount();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleLight> visibleLights
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight>& dyn_visibleLights();
    // Get instance field reference: public System.Boolean shadeAdditionalLightsPerVertex
    [[deprecated("Use field access instead!")]] bool& dyn_shadeAdditionalLightsPerVertex();
    // Get instance field reference: public System.Boolean supportsMixedLighting
    [[deprecated("Use field access instead!")]] bool& dyn_supportsMixedLighting();
    // Get instance field reference: public System.Boolean reflectionProbeBoxProjection
    [[deprecated("Use field access instead!")]] bool& dyn_reflectionProbeBoxProjection();
    // Get instance field reference: public System.Boolean reflectionProbeBlending
    [[deprecated("Use field access instead!")]] bool& dyn_reflectionProbeBlending();
    // Get instance field reference: public System.Boolean supportsLightLayers
    [[deprecated("Use field access instead!")]] bool& dyn_supportsLightLayers();
    // Get instance field reference: public System.Boolean supportsAdditionalLights
    [[deprecated("Use field access instead!")]] bool& dyn_supportsAdditionalLights();
  }; // UnityEngine.Rendering.Universal.LightData
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
