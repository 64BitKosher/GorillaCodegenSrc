// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DebugLightingMode
  struct DebugLightingMode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DebugLightingMode, "UnityEngine.Rendering.Universal", "DebugLightingMode");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.DebugLightingMode
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateHLSL] Offset: FFFFFFFF
  struct DebugLightingMode/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: DebugLightingMode
    constexpr DebugLightingMode(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public UnityEngine.Rendering.Universal.DebugLightingMode None
    static constexpr const int None = 0;
    // Get static field: static public UnityEngine.Rendering.Universal.DebugLightingMode None
    static ::UnityEngine::Rendering::Universal::DebugLightingMode _get_None();
    // Set static field: static public UnityEngine.Rendering.Universal.DebugLightingMode None
    static void _set_None(::UnityEngine::Rendering::Universal::DebugLightingMode value);
    // static field const value: static public UnityEngine.Rendering.Universal.DebugLightingMode ShadowCascades
    static constexpr const int ShadowCascades = 1;
    // Get static field: static public UnityEngine.Rendering.Universal.DebugLightingMode ShadowCascades
    static ::UnityEngine::Rendering::Universal::DebugLightingMode _get_ShadowCascades();
    // Set static field: static public UnityEngine.Rendering.Universal.DebugLightingMode ShadowCascades
    static void _set_ShadowCascades(::UnityEngine::Rendering::Universal::DebugLightingMode value);
    // static field const value: static public UnityEngine.Rendering.Universal.DebugLightingMode LightingWithoutNormalMaps
    static constexpr const int LightingWithoutNormalMaps = 2;
    // Get static field: static public UnityEngine.Rendering.Universal.DebugLightingMode LightingWithoutNormalMaps
    static ::UnityEngine::Rendering::Universal::DebugLightingMode _get_LightingWithoutNormalMaps();
    // Set static field: static public UnityEngine.Rendering.Universal.DebugLightingMode LightingWithoutNormalMaps
    static void _set_LightingWithoutNormalMaps(::UnityEngine::Rendering::Universal::DebugLightingMode value);
    // static field const value: static public UnityEngine.Rendering.Universal.DebugLightingMode LightingWithNormalMaps
    static constexpr const int LightingWithNormalMaps = 3;
    // Get static field: static public UnityEngine.Rendering.Universal.DebugLightingMode LightingWithNormalMaps
    static ::UnityEngine::Rendering::Universal::DebugLightingMode _get_LightingWithNormalMaps();
    // Set static field: static public UnityEngine.Rendering.Universal.DebugLightingMode LightingWithNormalMaps
    static void _set_LightingWithNormalMaps(::UnityEngine::Rendering::Universal::DebugLightingMode value);
    // static field const value: static public UnityEngine.Rendering.Universal.DebugLightingMode Reflections
    static constexpr const int Reflections = 4;
    // Get static field: static public UnityEngine.Rendering.Universal.DebugLightingMode Reflections
    static ::UnityEngine::Rendering::Universal::DebugLightingMode _get_Reflections();
    // Set static field: static public UnityEngine.Rendering.Universal.DebugLightingMode Reflections
    static void _set_Reflections(::UnityEngine::Rendering::Universal::DebugLightingMode value);
    // static field const value: static public UnityEngine.Rendering.Universal.DebugLightingMode ReflectionsWithSmoothness
    static constexpr const int ReflectionsWithSmoothness = 5;
    // Get static field: static public UnityEngine.Rendering.Universal.DebugLightingMode ReflectionsWithSmoothness
    static ::UnityEngine::Rendering::Universal::DebugLightingMode _get_ReflectionsWithSmoothness();
    // Set static field: static public UnityEngine.Rendering.Universal.DebugLightingMode ReflectionsWithSmoothness
    static void _set_ReflectionsWithSmoothness(::UnityEngine::Rendering::Universal::DebugLightingMode value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // UnityEngine.Rendering.Universal.DebugLightingMode
  #pragma pack(pop)
  static check_size<sizeof(DebugLightingMode), 0 + sizeof(int)> __UnityEngine_Rendering_Universal_DebugLightingModeSizeCheck;
  static_assert(sizeof(DebugLightingMode) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
