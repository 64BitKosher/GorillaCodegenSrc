// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.ShaderTagId
#include "UnityEngine/Rendering/ShaderTagId.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Experimental.Rendering.GraphicsFormat
#include "UnityEngine/Experimental/Rendering/GraphicsFormat.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: RenderTargetIdentifier
  struct RenderTargetIdentifier;
  // Forward declaring type: RenderBufferStoreAction
  struct RenderBufferStoreAction;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
  // Forward declaring type: DrawingSettings
  struct DrawingSettings;
  // Forward declaring type: FilteringSettings
  struct FilteringSettings;
  // Forward declaring type: BlendMode
  struct BlendMode;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: IRenderPass2D
  class IRenderPass2D;
  // Forward declaring type: RenderingData
  struct RenderingData;
  // Forward declaring type: Downsampling
  struct Downsampling;
  // Forward declaring type: Light2D
  class Light2D;
  // Forward declaring type: LightStats
  struct LightStats;
  // Forward declaring type: LayerBatch
  struct LayerBatch;
  // Forward declaring type: Renderer2DData
  class Renderer2DData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTextureDescriptor
  struct RenderTextureDescriptor;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: RendererLighting
  class RendererLighting;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::RendererLighting);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::RendererLighting*, "UnityEngine.Rendering.Universal", "RendererLighting");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.RendererLighting
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class RendererLighting : public ::Il2CppObject {
    public:
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingSampler();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    static void _set_m_ProfilingSampler(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get static field: static private readonly UnityEngine.Rendering.ShaderTagId k_NormalsRenderingPassName
    static ::UnityEngine::Rendering::ShaderTagId _get_k_NormalsRenderingPassName();
    // Set static field: static private readonly UnityEngine.Rendering.ShaderTagId k_NormalsRenderingPassName
    static void _set_k_NormalsRenderingPassName(::UnityEngine::Rendering::ShaderTagId value);
    // Get static field: static private readonly UnityEngine.Color k_NormalClearColor
    static ::UnityEngine::Color _get_k_NormalClearColor();
    // Set static field: static private readonly UnityEngine.Color k_NormalClearColor
    static void _set_k_NormalClearColor(::UnityEngine::Color value);
    // Get static field: static private readonly System.String k_SpriteLightKeyword
    static ::StringW _get_k_SpriteLightKeyword();
    // Set static field: static private readonly System.String k_SpriteLightKeyword
    static void _set_k_SpriteLightKeyword(::StringW value);
    // Get static field: static private readonly System.String k_UsePointLightCookiesKeyword
    static ::StringW _get_k_UsePointLightCookiesKeyword();
    // Set static field: static private readonly System.String k_UsePointLightCookiesKeyword
    static void _set_k_UsePointLightCookiesKeyword(::StringW value);
    // Get static field: static private readonly System.String k_LightQualityFastKeyword
    static ::StringW _get_k_LightQualityFastKeyword();
    // Set static field: static private readonly System.String k_LightQualityFastKeyword
    static void _set_k_LightQualityFastKeyword(::StringW value);
    // Get static field: static private readonly System.String k_UseNormalMap
    static ::StringW _get_k_UseNormalMap();
    // Set static field: static private readonly System.String k_UseNormalMap
    static void _set_k_UseNormalMap(::StringW value);
    // Get static field: static private readonly System.String k_UseAdditiveBlendingKeyword
    static ::StringW _get_k_UseAdditiveBlendingKeyword();
    // Set static field: static private readonly System.String k_UseAdditiveBlendingKeyword
    static void _set_k_UseAdditiveBlendingKeyword(::StringW value);
    // Get static field: static private readonly System.String[] k_UseBlendStyleKeywords
    static ::ArrayW<::StringW> _get_k_UseBlendStyleKeywords();
    // Set static field: static private readonly System.String[] k_UseBlendStyleKeywords
    static void _set_k_UseBlendStyleKeywords(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.Int32[] k_BlendFactorsPropIDs
    static ::ArrayW<int> _get_k_BlendFactorsPropIDs();
    // Set static field: static private readonly System.Int32[] k_BlendFactorsPropIDs
    static void _set_k_BlendFactorsPropIDs(::ArrayW<int> value);
    // Get static field: static private readonly System.Int32[] k_MaskFilterPropIDs
    static ::ArrayW<int> _get_k_MaskFilterPropIDs();
    // Set static field: static private readonly System.Int32[] k_MaskFilterPropIDs
    static void _set_k_MaskFilterPropIDs(::ArrayW<int> value);
    // Get static field: static private readonly System.Int32[] k_InvertedFilterPropIDs
    static ::ArrayW<int> _get_k_InvertedFilterPropIDs();
    // Set static field: static private readonly System.Int32[] k_InvertedFilterPropIDs
    static void _set_k_InvertedFilterPropIDs(::ArrayW<int> value);
    // Get static field: static private UnityEngine.Experimental.Rendering.GraphicsFormat s_RenderTextureFormatToUse
    static ::UnityEngine::Experimental::Rendering::GraphicsFormat _get_s_RenderTextureFormatToUse();
    // Set static field: static private UnityEngine.Experimental.Rendering.GraphicsFormat s_RenderTextureFormatToUse
    static void _set_s_RenderTextureFormatToUse(::UnityEngine::Experimental::Rendering::GraphicsFormat value);
    // Get static field: static private System.Boolean s_HasSetupRenderTextureFormatToUse
    static bool _get_s_HasSetupRenderTextureFormatToUse();
    // Set static field: static private System.Boolean s_HasSetupRenderTextureFormatToUse
    static void _set_s_HasSetupRenderTextureFormatToUse(bool value);
    // Get static field: static private readonly System.Int32 k_SrcBlendID
    static int _get_k_SrcBlendID();
    // Set static field: static private readonly System.Int32 k_SrcBlendID
    static void _set_k_SrcBlendID(int value);
    // Get static field: static private readonly System.Int32 k_DstBlendID
    static int _get_k_DstBlendID();
    // Set static field: static private readonly System.Int32 k_DstBlendID
    static void _set_k_DstBlendID(int value);
    // Get static field: static private readonly System.Int32 k_FalloffIntensityID
    static int _get_k_FalloffIntensityID();
    // Set static field: static private readonly System.Int32 k_FalloffIntensityID
    static void _set_k_FalloffIntensityID(int value);
    // Get static field: static private readonly System.Int32 k_FalloffDistanceID
    static int _get_k_FalloffDistanceID();
    // Set static field: static private readonly System.Int32 k_FalloffDistanceID
    static void _set_k_FalloffDistanceID(int value);
    // Get static field: static private readonly System.Int32 k_LightColorID
    static int _get_k_LightColorID();
    // Set static field: static private readonly System.Int32 k_LightColorID
    static void _set_k_LightColorID(int value);
    // Get static field: static private readonly System.Int32 k_VolumeOpacityID
    static int _get_k_VolumeOpacityID();
    // Set static field: static private readonly System.Int32 k_VolumeOpacityID
    static void _set_k_VolumeOpacityID(int value);
    // Get static field: static private readonly System.Int32 k_CookieTexID
    static int _get_k_CookieTexID();
    // Set static field: static private readonly System.Int32 k_CookieTexID
    static void _set_k_CookieTexID(int value);
    // Get static field: static private readonly System.Int32 k_FalloffLookupID
    static int _get_k_FalloffLookupID();
    // Set static field: static private readonly System.Int32 k_FalloffLookupID
    static void _set_k_FalloffLookupID(int value);
    // Get static field: static private readonly System.Int32 k_LightPositionID
    static int _get_k_LightPositionID();
    // Set static field: static private readonly System.Int32 k_LightPositionID
    static void _set_k_LightPositionID(int value);
    // Get static field: static private readonly System.Int32 k_LightInvMatrixID
    static int _get_k_LightInvMatrixID();
    // Set static field: static private readonly System.Int32 k_LightInvMatrixID
    static void _set_k_LightInvMatrixID(int value);
    // Get static field: static private readonly System.Int32 k_InnerRadiusMultID
    static int _get_k_InnerRadiusMultID();
    // Set static field: static private readonly System.Int32 k_InnerRadiusMultID
    static void _set_k_InnerRadiusMultID(int value);
    // Get static field: static private readonly System.Int32 k_OuterAngleID
    static int _get_k_OuterAngleID();
    // Set static field: static private readonly System.Int32 k_OuterAngleID
    static void _set_k_OuterAngleID(int value);
    // Get static field: static private readonly System.Int32 k_InnerAngleMultID
    static int _get_k_InnerAngleMultID();
    // Set static field: static private readonly System.Int32 k_InnerAngleMultID
    static void _set_k_InnerAngleMultID(int value);
    // Get static field: static private readonly System.Int32 k_LightLookupID
    static int _get_k_LightLookupID();
    // Set static field: static private readonly System.Int32 k_LightLookupID
    static void _set_k_LightLookupID(int value);
    // Get static field: static private readonly System.Int32 k_IsFullSpotlightID
    static int _get_k_IsFullSpotlightID();
    // Set static field: static private readonly System.Int32 k_IsFullSpotlightID
    static void _set_k_IsFullSpotlightID(int value);
    // Get static field: static private readonly System.Int32 k_LightZDistanceID
    static int _get_k_LightZDistanceID();
    // Set static field: static private readonly System.Int32 k_LightZDistanceID
    static void _set_k_LightZDistanceID(int value);
    // Get static field: static private readonly System.Int32 k_PointLightCookieTexID
    static int _get_k_PointLightCookieTexID();
    // Set static field: static private readonly System.Int32 k_PointLightCookieTexID
    static void _set_k_PointLightCookieTexID(int value);
    // static private UnityEngine.Experimental.Rendering.GraphicsFormat GetRenderTextureFormat()
    // Offset: 0x5287724
    static ::UnityEngine::Experimental::Rendering::GraphicsFormat GetRenderTextureFormat();
    // static public System.Void CreateNormalMapRenderTexture(UnityEngine.Rendering.Universal.IRenderPass2D pass, UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.CommandBuffer cmd, System.Single renderScale)
    // Offset: 0x528782C
    static void CreateNormalMapRenderTexture(::UnityEngine::Rendering::Universal::IRenderPass2D* pass, ::UnityEngine::Rendering::Universal::RenderingData renderingData, ::UnityEngine::Rendering::CommandBuffer* cmd, float renderScale);
    // static public UnityEngine.RenderTextureDescriptor GetBlendStyleRenderTextureDesc(UnityEngine.Rendering.Universal.IRenderPass2D pass, UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52859DC
    static ::UnityEngine::RenderTextureDescriptor GetBlendStyleRenderTextureDesc(::UnityEngine::Rendering::Universal::IRenderPass2D* pass, ::UnityEngine::Rendering::Universal::RenderingData renderingData);
    // static public System.Void CreateCameraSortingLayerRenderTexture(UnityEngine.Rendering.Universal.IRenderPass2D pass, UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.Universal.Downsampling downsamplingMethod)
    // Offset: 0x5281FC4
    static void CreateCameraSortingLayerRenderTexture(::UnityEngine::Rendering::Universal::IRenderPass2D* pass, ::UnityEngine::Rendering::Universal::RenderingData renderingData, ::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::Universal::Downsampling downsamplingMethod);
    // static public System.Void EnableBlendStyle(UnityEngine.Rendering.CommandBuffer cmd, System.Int32 blendStyleIndex, System.Boolean enabled)
    // Offset: 0x5284348
    static void EnableBlendStyle(::UnityEngine::Rendering::CommandBuffer* cmd, int blendStyleIndex, bool enabled);
    // static public System.Void DisableAllKeywords(UnityEngine.Rendering.Universal.IRenderPass2D pass, UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x5285E0C
    static void DisableAllKeywords(::UnityEngine::Rendering::Universal::IRenderPass2D* pass, ::UnityEngine::Rendering::CommandBuffer* cmd);
    // static public System.Void ReleaseRenderTextures(UnityEngine.Rendering.Universal.IRenderPass2D pass, UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x5285EC0
    static void ReleaseRenderTextures(::UnityEngine::Rendering::Universal::IRenderPass2D* pass, ::UnityEngine::Rendering::CommandBuffer* cmd);
    // static public System.Void DrawPointLight(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.Universal.Light2D light, UnityEngine.Mesh lightMesh, UnityEngine.Material material)
    // Offset: 0x5287C6C
    static void DrawPointLight(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::Universal::Light2D* light, ::UnityEngine::Mesh* lightMesh, ::UnityEngine::Material* material);
    // static private System.Boolean CanCastShadows(UnityEngine.Rendering.Universal.Light2D light, System.Int32 layerToRender)
    // Offset: 0x5287D7C
    static bool CanCastShadows(::UnityEngine::Rendering::Universal::Light2D* light, int layerToRender);
    // static private System.Boolean CanCastVolumetricShadows(UnityEngine.Rendering.Universal.Light2D light, System.Int32 endLayerValue)
    // Offset: 0x5287DB0
    static bool CanCastVolumetricShadows(::UnityEngine::Rendering::Universal::Light2D* light, int endLayerValue);
    // static private System.Boolean ShouldRenderLight(UnityEngine.Rendering.Universal.Light2D light, System.Int32 blendStyleIndex, System.Int32 layerToRender)
    // Offset: 0x5287E00
    static bool ShouldRenderLight(::UnityEngine::Rendering::Universal::Light2D* light, int blendStyleIndex, int layerToRender);
    // static private System.Void RenderLightSet(UnityEngine.Rendering.Universal.IRenderPass2D pass, UnityEngine.Rendering.Universal.RenderingData renderingData, System.Int32 blendStyleIndex, UnityEngine.Rendering.CommandBuffer cmd, System.Int32 layerToRender, UnityEngine.Rendering.RenderTargetIdentifier renderTexture, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.Light2D> lights)
    // Offset: 0x5287EB0
    static void RenderLightSet(::UnityEngine::Rendering::Universal::IRenderPass2D* pass, ::UnityEngine::Rendering::Universal::RenderingData renderingData, int blendStyleIndex, ::UnityEngine::Rendering::CommandBuffer* cmd, int layerToRender, ::UnityEngine::Rendering::RenderTargetIdentifier renderTexture, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::Light2D*>* lights);
    // static public System.Void RenderLightVolumes(UnityEngine.Rendering.Universal.IRenderPass2D pass, UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.CommandBuffer cmd, System.Int32 layerToRender, System.Int32 endLayerValue, UnityEngine.Rendering.RenderTargetIdentifier renderTexture, UnityEngine.Rendering.RenderTargetIdentifier depthTexture, UnityEngine.Rendering.RenderBufferStoreAction intermediateStoreAction, UnityEngine.Rendering.RenderBufferStoreAction finalStoreAction, System.Boolean requiresRTInit, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.Light2D> lights)
    // Offset: 0x52843F4
    static void RenderLightVolumes(::UnityEngine::Rendering::Universal::IRenderPass2D* pass, ::UnityEngine::Rendering::Universal::RenderingData renderingData, ::UnityEngine::Rendering::CommandBuffer* cmd, int layerToRender, int endLayerValue, ::UnityEngine::Rendering::RenderTargetIdentifier renderTexture, ::UnityEngine::Rendering::RenderTargetIdentifier depthTexture, ::UnityEngine::Rendering::RenderBufferStoreAction intermediateStoreAction, ::UnityEngine::Rendering::RenderBufferStoreAction finalStoreAction, bool requiresRTInit, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::Light2D*>* lights);
    // static public System.Void SetShapeLightShaderGlobals(UnityEngine.Rendering.Universal.IRenderPass2D pass, UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x5285668
    static void SetShapeLightShaderGlobals(::UnityEngine::Rendering::Universal::IRenderPass2D* pass, ::UnityEngine::Rendering::CommandBuffer* cmd);
    // static private System.Single GetNormalizedInnerRadius(UnityEngine.Rendering.Universal.Light2D light)
    // Offset: 0x5288CA4
    static float GetNormalizedInnerRadius(::UnityEngine::Rendering::Universal::Light2D* light);
    // static private System.Single GetNormalizedAngle(System.Single angle)
    // Offset: 0x5288CC0
    static float GetNormalizedAngle(float angle);
    // static private System.Void GetScaledLightInvMatrix(UnityEngine.Rendering.Universal.Light2D light, out UnityEngine.Matrix4x4 retMatrix)
    // Offset: 0x5288CD0
    static void GetScaledLightInvMatrix(::UnityEngine::Rendering::Universal::Light2D* light, ByRef<::UnityEngine::Matrix4x4> retMatrix);
    // static private System.Void SetGeneralLightShaderGlobals(UnityEngine.Rendering.Universal.IRenderPass2D pass, UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.Universal.Light2D light)
    // Offset: 0x528878C
    static void SetGeneralLightShaderGlobals(::UnityEngine::Rendering::Universal::IRenderPass2D* pass, ::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::Universal::Light2D* light);
    // static private System.Void SetPointLightShaderGlobals(UnityEngine.Rendering.Universal.IRenderPass2D pass, UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.Universal.Light2D light)
    // Offset: 0x5288898
    static void SetPointLightShaderGlobals(::UnityEngine::Rendering::Universal::IRenderPass2D* pass, ::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::Universal::Light2D* light);
    // static public System.Void ClearDirtyLighting(UnityEngine.Rendering.Universal.IRenderPass2D pass, UnityEngine.Rendering.CommandBuffer cmd, System.UInt32 blendStylesUsed)
    // Offset: 0x5288E18
    static void ClearDirtyLighting(::UnityEngine::Rendering::Universal::IRenderPass2D* pass, ::UnityEngine::Rendering::CommandBuffer* cmd, uint blendStylesUsed);
    // static public System.Void RenderNormals(UnityEngine.Rendering.Universal.IRenderPass2D pass, UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.DrawingSettings drawSettings, UnityEngine.Rendering.FilteringSettings filterSettings, UnityEngine.Rendering.RenderTargetIdentifier depthTarget, UnityEngine.Rendering.Universal.LightStats lightStats)
    // Offset: 0x528371C
    static void RenderNormals(::UnityEngine::Rendering::Universal::IRenderPass2D* pass, ::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Rendering::Universal::RenderingData renderingData, ::UnityEngine::Rendering::DrawingSettings drawSettings, ::UnityEngine::Rendering::FilteringSettings filterSettings, ::UnityEngine::Rendering::RenderTargetIdentifier depthTarget, ::UnityEngine::Rendering::Universal::LightStats lightStats);
    // static public System.Void RenderLights(UnityEngine.Rendering.Universal.IRenderPass2D pass, UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.CommandBuffer cmd, System.Int32 layerToRender, ref UnityEngine.Rendering.Universal.LayerBatch layerBatch, ref UnityEngine.RenderTextureDescriptor rtDesc)
    // Offset: 0x5283D24
    static void RenderLights(::UnityEngine::Rendering::Universal::IRenderPass2D* pass, ::UnityEngine::Rendering::Universal::RenderingData renderingData, ::UnityEngine::Rendering::CommandBuffer* cmd, int layerToRender, ByRef<::UnityEngine::Rendering::Universal::LayerBatch> layerBatch, ByRef<::UnityEngine::RenderTextureDescriptor> rtDesc);
    // static private System.Void SetBlendModes(UnityEngine.Material material, UnityEngine.Rendering.BlendMode src, UnityEngine.Rendering.BlendMode dst)
    // Offset: 0x52890C0
    static void SetBlendModes(::UnityEngine::Material* material, ::UnityEngine::Rendering::BlendMode src, ::UnityEngine::Rendering::BlendMode dst);
    // static private System.UInt32 GetLightMaterialIndex(UnityEngine.Rendering.Universal.Light2D light, System.Boolean isVolume)
    // Offset: 0x528915C
    static uint GetLightMaterialIndex(::UnityEngine::Rendering::Universal::Light2D* light, bool isVolume);
    // static private UnityEngine.Material CreateLightMaterial(UnityEngine.Rendering.Universal.Renderer2DData rendererData, UnityEngine.Rendering.Universal.Light2D light, System.Boolean isVolume)
    // Offset: 0x52892A4
    static ::UnityEngine::Material* CreateLightMaterial(::UnityEngine::Rendering::Universal::Renderer2DData* rendererData, ::UnityEngine::Rendering::Universal::Light2D* light, bool isVolume);
    // static private UnityEngine.Material GetLightMaterial(UnityEngine.Rendering.Universal.Renderer2DData rendererData, UnityEngine.Rendering.Universal.Light2D light, System.Boolean isVolume)
    // Offset: 0x5288684
    static ::UnityEngine::Material* GetLightMaterial(::UnityEngine::Rendering::Universal::Renderer2DData* rendererData, ::UnityEngine::Rendering::Universal::Light2D* light, bool isVolume);
    // static private System.Void .cctor()
    // Offset: 0x5289580
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.RendererLighting
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::GetRenderTextureFormat
// Il2CppName: GetRenderTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::GraphicsFormat (*)()>(&UnityEngine::Rendering::Universal::RendererLighting::GetRenderTextureFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "GetRenderTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::CreateNormalMapRenderTexture
// Il2CppName: CreateNormalMapRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::IRenderPass2D*, ::UnityEngine::Rendering::Universal::RenderingData, ::UnityEngine::Rendering::CommandBuffer*, float)>(&UnityEngine::Rendering::Universal::RendererLighting::CreateNormalMapRenderTexture)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IRenderPass2D")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "CreateNormalMapRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass, renderingData, cmd, renderScale});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::GetBlendStyleRenderTextureDesc
// Il2CppName: GetBlendStyleRenderTextureDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTextureDescriptor (*)(::UnityEngine::Rendering::Universal::IRenderPass2D*, ::UnityEngine::Rendering::Universal::RenderingData)>(&UnityEngine::Rendering::Universal::RendererLighting::GetBlendStyleRenderTextureDesc)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IRenderPass2D")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "GetBlendStyleRenderTextureDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::CreateCameraSortingLayerRenderTexture
// Il2CppName: CreateCameraSortingLayerRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::IRenderPass2D*, ::UnityEngine::Rendering::Universal::RenderingData, ::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::Universal::Downsampling)>(&UnityEngine::Rendering::Universal::RendererLighting::CreateCameraSortingLayerRenderTexture)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IRenderPass2D")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* downsamplingMethod = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Downsampling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "CreateCameraSortingLayerRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass, renderingData, cmd, downsamplingMethod});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::EnableBlendStyle
// Il2CppName: EnableBlendStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, int, bool)>(&UnityEngine::Rendering::Universal::RendererLighting::EnableBlendStyle)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* blendStyleIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "EnableBlendStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, blendStyleIndex, enabled});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::DisableAllKeywords
// Il2CppName: DisableAllKeywords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::IRenderPass2D*, ::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::RendererLighting::DisableAllKeywords)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IRenderPass2D")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "DisableAllKeywords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass, cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::ReleaseRenderTextures
// Il2CppName: ReleaseRenderTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::IRenderPass2D*, ::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::RendererLighting::ReleaseRenderTextures)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IRenderPass2D")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "ReleaseRenderTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass, cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::DrawPointLight
// Il2CppName: DrawPointLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::Universal::Light2D*, ::UnityEngine::Mesh*, ::UnityEngine::Material*)>(&UnityEngine::Rendering::Universal::RendererLighting::DrawPointLight)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")->byval_arg;
    static auto* lightMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "DrawPointLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, light, lightMesh, material});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::CanCastShadows
// Il2CppName: CanCastShadows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::Universal::Light2D*, int)>(&UnityEngine::Rendering::Universal::RendererLighting::CanCastShadows)> {
  static const MethodInfo* get() {
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")->byval_arg;
    static auto* layerToRender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "CanCastShadows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{light, layerToRender});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::CanCastVolumetricShadows
// Il2CppName: CanCastVolumetricShadows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::Universal::Light2D*, int)>(&UnityEngine::Rendering::Universal::RendererLighting::CanCastVolumetricShadows)> {
  static const MethodInfo* get() {
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")->byval_arg;
    static auto* endLayerValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "CanCastVolumetricShadows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{light, endLayerValue});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::ShouldRenderLight
// Il2CppName: ShouldRenderLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::Universal::Light2D*, int, int)>(&UnityEngine::Rendering::Universal::RendererLighting::ShouldRenderLight)> {
  static const MethodInfo* get() {
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")->byval_arg;
    static auto* blendStyleIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* layerToRender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "ShouldRenderLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{light, blendStyleIndex, layerToRender});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::RenderLightSet
// Il2CppName: RenderLightSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::IRenderPass2D*, ::UnityEngine::Rendering::Universal::RenderingData, int, ::UnityEngine::Rendering::CommandBuffer*, int, ::UnityEngine::Rendering::RenderTargetIdentifier, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::Light2D*>*)>(&UnityEngine::Rendering::Universal::RendererLighting::RenderLightSet)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IRenderPass2D")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->byval_arg;
    static auto* blendStyleIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* layerToRender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* renderTexture = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* lights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "RenderLightSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass, renderingData, blendStyleIndex, cmd, layerToRender, renderTexture, lights});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::RenderLightVolumes
// Il2CppName: RenderLightVolumes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::IRenderPass2D*, ::UnityEngine::Rendering::Universal::RenderingData, ::UnityEngine::Rendering::CommandBuffer*, int, int, ::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderBufferStoreAction, ::UnityEngine::Rendering::RenderBufferStoreAction, bool, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::Light2D*>*)>(&UnityEngine::Rendering::Universal::RendererLighting::RenderLightVolumes)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IRenderPass2D")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* layerToRender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endLayerValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* renderTexture = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* depthTexture = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* intermediateStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* finalStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* requiresRTInit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* lights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "RenderLightVolumes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass, renderingData, cmd, layerToRender, endLayerValue, renderTexture, depthTexture, intermediateStoreAction, finalStoreAction, requiresRTInit, lights});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::SetShapeLightShaderGlobals
// Il2CppName: SetShapeLightShaderGlobals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::IRenderPass2D*, ::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::RendererLighting::SetShapeLightShaderGlobals)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IRenderPass2D")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "SetShapeLightShaderGlobals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass, cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::GetNormalizedInnerRadius
// Il2CppName: GetNormalizedInnerRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Rendering::Universal::Light2D*)>(&UnityEngine::Rendering::Universal::RendererLighting::GetNormalizedInnerRadius)> {
  static const MethodInfo* get() {
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "GetNormalizedInnerRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{light});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::GetNormalizedAngle
// Il2CppName: GetNormalizedAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&UnityEngine::Rendering::Universal::RendererLighting::GetNormalizedAngle)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "GetNormalizedAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::GetScaledLightInvMatrix
// Il2CppName: GetScaledLightInvMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::Light2D*, ByRef<::UnityEngine::Matrix4x4>)>(&UnityEngine::Rendering::Universal::RendererLighting::GetScaledLightInvMatrix)> {
  static const MethodInfo* get() {
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")->byval_arg;
    static auto* retMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "GetScaledLightInvMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{light, retMatrix});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::SetGeneralLightShaderGlobals
// Il2CppName: SetGeneralLightShaderGlobals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::IRenderPass2D*, ::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::Universal::Light2D*)>(&UnityEngine::Rendering::Universal::RendererLighting::SetGeneralLightShaderGlobals)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IRenderPass2D")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "SetGeneralLightShaderGlobals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass, cmd, light});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::SetPointLightShaderGlobals
// Il2CppName: SetPointLightShaderGlobals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::IRenderPass2D*, ::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::Universal::Light2D*)>(&UnityEngine::Rendering::Universal::RendererLighting::SetPointLightShaderGlobals)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IRenderPass2D")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "SetPointLightShaderGlobals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass, cmd, light});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::ClearDirtyLighting
// Il2CppName: ClearDirtyLighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::IRenderPass2D*, ::UnityEngine::Rendering::CommandBuffer*, uint)>(&UnityEngine::Rendering::Universal::RendererLighting::ClearDirtyLighting)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IRenderPass2D")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* blendStylesUsed = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "ClearDirtyLighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass, cmd, blendStylesUsed});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::RenderNormals
// Il2CppName: RenderNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::IRenderPass2D*, ::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Rendering::Universal::RenderingData, ::UnityEngine::Rendering::DrawingSettings, ::UnityEngine::Rendering::FilteringSettings, ::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::Universal::LightStats)>(&UnityEngine::Rendering::Universal::RendererLighting::RenderNormals)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IRenderPass2D")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->byval_arg;
    static auto* drawSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DrawingSettings")->byval_arg;
    static auto* filterSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "FilteringSettings")->byval_arg;
    static auto* depthTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* lightStats = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightStats")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "RenderNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass, context, renderingData, drawSettings, filterSettings, depthTarget, lightStats});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::RenderLights
// Il2CppName: RenderLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::IRenderPass2D*, ::UnityEngine::Rendering::Universal::RenderingData, ::UnityEngine::Rendering::CommandBuffer*, int, ByRef<::UnityEngine::Rendering::Universal::LayerBatch>, ByRef<::UnityEngine::RenderTextureDescriptor>)>(&UnityEngine::Rendering::Universal::RendererLighting::RenderLights)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IRenderPass2D")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* layerToRender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* layerBatch = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LayerBatch")->this_arg;
    static auto* rtDesc = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "RenderLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass, renderingData, cmd, layerToRender, layerBatch, rtDesc});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::SetBlendModes
// Il2CppName: SetBlendModes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Material*, ::UnityEngine::Rendering::BlendMode, ::UnityEngine::Rendering::BlendMode)>(&UnityEngine::Rendering::Universal::RendererLighting::SetBlendModes)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "BlendMode")->byval_arg;
    static auto* dst = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "BlendMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "SetBlendModes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material, src, dst});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::GetLightMaterialIndex
// Il2CppName: GetLightMaterialIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::UnityEngine::Rendering::Universal::Light2D*, bool)>(&UnityEngine::Rendering::Universal::RendererLighting::GetLightMaterialIndex)> {
  static const MethodInfo* get() {
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")->byval_arg;
    static auto* isVolume = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "GetLightMaterialIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{light, isVolume});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::CreateLightMaterial
// Il2CppName: CreateLightMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (*)(::UnityEngine::Rendering::Universal::Renderer2DData*, ::UnityEngine::Rendering::Universal::Light2D*, bool)>(&UnityEngine::Rendering::Universal::RendererLighting::CreateLightMaterial)> {
  static const MethodInfo* get() {
    static auto* rendererData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Renderer2DData")->byval_arg;
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")->byval_arg;
    static auto* isVolume = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "CreateLightMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rendererData, light, isVolume});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::GetLightMaterial
// Il2CppName: GetLightMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (*)(::UnityEngine::Rendering::Universal::Renderer2DData*, ::UnityEngine::Rendering::Universal::Light2D*, bool)>(&UnityEngine::Rendering::Universal::RendererLighting::GetLightMaterial)> {
  static const MethodInfo* get() {
    static auto* rendererData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Renderer2DData")->byval_arg;
    static auto* light = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D")->byval_arg;
    static auto* isVolume = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), "GetLightMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rendererData, light, isVolume});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RendererLighting::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::RendererLighting::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RendererLighting*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
