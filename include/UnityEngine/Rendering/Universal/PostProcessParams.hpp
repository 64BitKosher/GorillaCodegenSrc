// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Experimental.Rendering.GraphicsFormat
#include "UnityEngine/Experimental/Rendering/GraphicsFormat.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: PostProcessParams
  struct PostProcessParams;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::PostProcessParams, "UnityEngine.Rendering.Universal", "PostProcessParams");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.PostProcessParams
  // [TokenAttribute] Offset: FFFFFFFF
  struct PostProcessParams/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Material blitMaterial
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Material* blitMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Experimental.Rendering.GraphicsFormat requestHDRFormat
    // Size: 0x4
    // Offset: 0x8
    ::UnityEngine::Experimental::Rendering::GraphicsFormat requestHDRFormat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::GraphicsFormat) == 0x4);
    public:
    // Creating value type constructor for type: PostProcessParams
    constexpr PostProcessParams(::UnityEngine::Material* blitMaterial_ = {}, ::UnityEngine::Experimental::Rendering::GraphicsFormat requestHDRFormat_ = {}) noexcept : blitMaterial{blitMaterial_}, requestHDRFormat{requestHDRFormat_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Material blitMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_blitMaterial();
    // Get instance field reference: public UnityEngine.Experimental.Rendering.GraphicsFormat requestHDRFormat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::GraphicsFormat& dyn_requestHDRFormat();
    // static public UnityEngine.Rendering.Universal.PostProcessParams Create()
    // Offset: 0x52D0468
    static ::UnityEngine::Rendering::Universal::PostProcessParams Create();
  }; // UnityEngine.Rendering.Universal.PostProcessParams
  #pragma pack(pop)
  static check_size<sizeof(PostProcessParams), 8 + sizeof(::UnityEngine::Experimental::Rendering::GraphicsFormat)> __UnityEngine_Rendering_Universal_PostProcessParamsSizeCheck;
  static_assert(sizeof(PostProcessParams) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessParams::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::PostProcessParams (*)()>(&UnityEngine::Rendering::Universal::PostProcessParams::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessParams), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
