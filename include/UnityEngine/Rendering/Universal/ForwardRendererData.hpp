// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRendererData
#include "UnityEngine/Rendering/Universal/ScriptableRendererData.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Rendering.Universal.RenderingMode
#include "UnityEngine/Rendering/Universal/RenderingMode.hpp"
// Including type: UnityEngine.Rendering.Universal.DepthPrimingMode
#include "UnityEngine/Rendering/Universal/DepthPrimingMode.hpp"
// Including type: UnityEngine.Rendering.Universal.TileSize
#include "UnityEngine/Rendering/Universal/TileSize.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: PostProcessData
  class PostProcessData;
  // Forward declaring type: XRSystemData
  class XRSystemData;
  // Forward declaring type: StencilStateData
  class StencilStateData;
  // Forward declaring type: ScriptableRenderer
  class ScriptableRenderer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ForwardRendererData
  class ForwardRendererData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::ForwardRendererData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ForwardRendererData*, "UnityEngine.Rendering.Universal", "ForwardRendererData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x7C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.ForwardRendererData
  // [TokenAttribute] Offset: FFFFFFFF
  // [ReloadGroupAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  // [ExcludeFromPresetAttribute] Offset: FFFFFFFF
  class ForwardRendererData : public ::UnityEngine::Rendering::Universal::ScriptableRendererData {
    public:
    // Writing base type padding for base size: 0x39 to desired offset: 0x40
    char ___base_padding[0x7] = {};
    // Nested type: ::UnityEngine::Rendering::Universal::ForwardRendererData::ShaderResources
    class ShaderResources;
    public:
    // public UnityEngine.Rendering.Universal.ForwardRendererData/ShaderResources shaders
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Rendering::Universal::ForwardRendererData::ShaderResources* shaders;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ForwardRendererData::ShaderResources*) == 0x8);
    // public UnityEngine.Rendering.Universal.PostProcessData postProcessData
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Rendering::Universal::PostProcessData* postProcessData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::PostProcessData*) == 0x8);
    // public UnityEngine.Rendering.Universal.XRSystemData xrSystemData
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Rendering::Universal::XRSystemData* xrSystemData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::XRSystemData*) == 0x8);
    // private UnityEngine.LayerMask m_OpaqueLayerMask
    // Size: 0x4
    // Offset: 0x58
    ::UnityEngine::LayerMask m_OpaqueLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.LayerMask m_TransparentLayerMask
    // Size: 0x4
    // Offset: 0x5C
    ::UnityEngine::LayerMask m_TransparentLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.Rendering.Universal.StencilStateData m_DefaultStencilState
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Rendering::Universal::StencilStateData* m_DefaultStencilState;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::StencilStateData*) == 0x8);
    // private System.Boolean m_ShadowTransparentReceive
    // Size: 0x1
    // Offset: 0x68
    bool m_ShadowTransparentReceive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ShadowTransparentReceive and: m_RenderingMode
    char __padding6[0x3] = {};
    // private UnityEngine.Rendering.Universal.RenderingMode m_RenderingMode
    // Size: 0x4
    // Offset: 0x6C
    ::UnityEngine::Rendering::Universal::RenderingMode m_RenderingMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::RenderingMode) == 0x4);
    // private UnityEngine.Rendering.Universal.DepthPrimingMode m_DepthPrimingMode
    // Size: 0x4
    // Offset: 0x70
    ::UnityEngine::Rendering::Universal::DepthPrimingMode m_DepthPrimingMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DepthPrimingMode) == 0x4);
    // private System.Boolean m_AccurateGbufferNormals
    // Size: 0x1
    // Offset: 0x74
    bool m_AccurateGbufferNormals;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ClusteredRendering
    // Size: 0x1
    // Offset: 0x75
    bool m_ClusteredRendering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ClusteredRendering and: m_TileSize
    char __padding10[0x2] = {};
    // private UnityEngine.Rendering.Universal.TileSize m_TileSize
    // Size: 0x4
    // Offset: 0x78
    ::UnityEngine::Rendering::Universal::TileSize m_TileSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::TileSize) == 0x4);
    public:
    // static field const value: static private System.String k_ErrorMessage
    static constexpr const char* k_ErrorMessage = "ForwardRendererData has been deprecated. Use UniversalRendererData instead";
    // Get static field: static private System.String k_ErrorMessage
    static ::StringW _get_k_ErrorMessage();
    // Set static field: static private System.String k_ErrorMessage
    static void _set_k_ErrorMessage(::StringW value);
    // Get instance field reference: public UnityEngine.Rendering.Universal.ForwardRendererData/ShaderResources shaders
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ForwardRendererData::ShaderResources*& dyn_shaders();
    // Get instance field reference: public UnityEngine.Rendering.Universal.PostProcessData postProcessData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::PostProcessData*& dyn_postProcessData();
    // Get instance field reference: public UnityEngine.Rendering.Universal.XRSystemData xrSystemData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::XRSystemData*& dyn_xrSystemData();
    // Get instance field reference: private UnityEngine.LayerMask m_OpaqueLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_m_OpaqueLayerMask();
    // Get instance field reference: private UnityEngine.LayerMask m_TransparentLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_m_TransparentLayerMask();
    // Get instance field reference: private UnityEngine.Rendering.Universal.StencilStateData m_DefaultStencilState
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::StencilStateData*& dyn_m_DefaultStencilState();
    // Get instance field reference: private System.Boolean m_ShadowTransparentReceive
    [[deprecated("Use field access instead!")]] bool& dyn_m_ShadowTransparentReceive();
    // Get instance field reference: private UnityEngine.Rendering.Universal.RenderingMode m_RenderingMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::RenderingMode& dyn_m_RenderingMode();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DepthPrimingMode m_DepthPrimingMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DepthPrimingMode& dyn_m_DepthPrimingMode();
    // Get instance field reference: private System.Boolean m_AccurateGbufferNormals
    [[deprecated("Use field access instead!")]] bool& dyn_m_AccurateGbufferNormals();
    // Get instance field reference: private System.Boolean m_ClusteredRendering
    [[deprecated("Use field access instead!")]] bool& dyn_m_ClusteredRendering();
    // Get instance field reference: private UnityEngine.Rendering.Universal.TileSize m_TileSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::TileSize& dyn_m_TileSize();
    // public UnityEngine.LayerMask get_opaqueLayerMask()
    // Offset: 0x52BC1F0
    ::UnityEngine::LayerMask get_opaqueLayerMask();
    // public System.Void set_opaqueLayerMask(UnityEngine.LayerMask value)
    // Offset: 0x52BC23C
    void set_opaqueLayerMask(::UnityEngine::LayerMask value);
    // public UnityEngine.LayerMask get_transparentLayerMask()
    // Offset: 0x52BC288
    ::UnityEngine::LayerMask get_transparentLayerMask();
    // public System.Void set_transparentLayerMask(UnityEngine.LayerMask value)
    // Offset: 0x52BC2D4
    void set_transparentLayerMask(::UnityEngine::LayerMask value);
    // public UnityEngine.Rendering.Universal.StencilStateData get_defaultStencilState()
    // Offset: 0x52BC320
    ::UnityEngine::Rendering::Universal::StencilStateData* get_defaultStencilState();
    // public System.Void set_defaultStencilState(UnityEngine.Rendering.Universal.StencilStateData value)
    // Offset: 0x52BC36C
    void set_defaultStencilState(::UnityEngine::Rendering::Universal::StencilStateData* value);
    // public System.Boolean get_shadowTransparentReceive()
    // Offset: 0x52BC3B8
    bool get_shadowTransparentReceive();
    // public System.Void set_shadowTransparentReceive(System.Boolean value)
    // Offset: 0x52BC404
    void set_shadowTransparentReceive(bool value);
    // public UnityEngine.Rendering.Universal.RenderingMode get_renderingMode()
    // Offset: 0x52BC450
    ::UnityEngine::Rendering::Universal::RenderingMode get_renderingMode();
    // public System.Void set_renderingMode(UnityEngine.Rendering.Universal.RenderingMode value)
    // Offset: 0x52BC49C
    void set_renderingMode(::UnityEngine::Rendering::Universal::RenderingMode value);
    // public System.Boolean get_accurateGbufferNormals()
    // Offset: 0x52BC4E8
    bool get_accurateGbufferNormals();
    // public System.Void set_accurateGbufferNormals(System.Boolean value)
    // Offset: 0x52BC534
    void set_accurateGbufferNormals(bool value);
    // protected override UnityEngine.Rendering.Universal.ScriptableRenderer Create()
    // Offset: 0x52BC134
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererData
    // Base method: UnityEngine.Rendering.Universal.ScriptableRenderer ScriptableRendererData::Create()
    ::UnityEngine::Rendering::Universal::ScriptableRenderer* Create();
    // public System.Void .ctor()
    // Offset: 0x52BC580
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererData
    // Base method: System.Void ScriptableRendererData::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ForwardRendererData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::ForwardRendererData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ForwardRendererData*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.ForwardRendererData
  #pragma pack(pop)
  static check_size<sizeof(ForwardRendererData), 120 + sizeof(::UnityEngine::Rendering::Universal::TileSize)> __UnityEngine_Rendering_Universal_ForwardRendererDataSizeCheck;
  static_assert(sizeof(ForwardRendererData) == 0x7C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ForwardRendererData::get_opaqueLayerMask
// Il2CppName: get_opaqueLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (UnityEngine::Rendering::Universal::ForwardRendererData::*)()>(&UnityEngine::Rendering::Universal::ForwardRendererData::get_opaqueLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ForwardRendererData*), "get_opaqueLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ForwardRendererData::set_opaqueLayerMask
// Il2CppName: set_opaqueLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ForwardRendererData::*)(::UnityEngine::LayerMask)>(&UnityEngine::Rendering::Universal::ForwardRendererData::set_opaqueLayerMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ForwardRendererData*), "set_opaqueLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ForwardRendererData::get_transparentLayerMask
// Il2CppName: get_transparentLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (UnityEngine::Rendering::Universal::ForwardRendererData::*)()>(&UnityEngine::Rendering::Universal::ForwardRendererData::get_transparentLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ForwardRendererData*), "get_transparentLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ForwardRendererData::set_transparentLayerMask
// Il2CppName: set_transparentLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ForwardRendererData::*)(::UnityEngine::LayerMask)>(&UnityEngine::Rendering::Universal::ForwardRendererData::set_transparentLayerMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ForwardRendererData*), "set_transparentLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ForwardRendererData::get_defaultStencilState
// Il2CppName: get_defaultStencilState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::StencilStateData* (UnityEngine::Rendering::Universal::ForwardRendererData::*)()>(&UnityEngine::Rendering::Universal::ForwardRendererData::get_defaultStencilState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ForwardRendererData*), "get_defaultStencilState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ForwardRendererData::set_defaultStencilState
// Il2CppName: set_defaultStencilState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ForwardRendererData::*)(::UnityEngine::Rendering::Universal::StencilStateData*)>(&UnityEngine::Rendering::Universal::ForwardRendererData::set_defaultStencilState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "StencilStateData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ForwardRendererData*), "set_defaultStencilState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ForwardRendererData::get_shadowTransparentReceive
// Il2CppName: get_shadowTransparentReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ForwardRendererData::*)()>(&UnityEngine::Rendering::Universal::ForwardRendererData::get_shadowTransparentReceive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ForwardRendererData*), "get_shadowTransparentReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ForwardRendererData::set_shadowTransparentReceive
// Il2CppName: set_shadowTransparentReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ForwardRendererData::*)(bool)>(&UnityEngine::Rendering::Universal::ForwardRendererData::set_shadowTransparentReceive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ForwardRendererData*), "set_shadowTransparentReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ForwardRendererData::get_renderingMode
// Il2CppName: get_renderingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::RenderingMode (UnityEngine::Rendering::Universal::ForwardRendererData::*)()>(&UnityEngine::Rendering::Universal::ForwardRendererData::get_renderingMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ForwardRendererData*), "get_renderingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ForwardRendererData::set_renderingMode
// Il2CppName: set_renderingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ForwardRendererData::*)(::UnityEngine::Rendering::Universal::RenderingMode)>(&UnityEngine::Rendering::Universal::ForwardRendererData::set_renderingMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ForwardRendererData*), "set_renderingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ForwardRendererData::get_accurateGbufferNormals
// Il2CppName: get_accurateGbufferNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ForwardRendererData::*)()>(&UnityEngine::Rendering::Universal::ForwardRendererData::get_accurateGbufferNormals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ForwardRendererData*), "get_accurateGbufferNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ForwardRendererData::set_accurateGbufferNormals
// Il2CppName: set_accurateGbufferNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ForwardRendererData::*)(bool)>(&UnityEngine::Rendering::Universal::ForwardRendererData::set_accurateGbufferNormals)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ForwardRendererData*), "set_accurateGbufferNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ForwardRendererData::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ScriptableRenderer* (UnityEngine::Rendering::Universal::ForwardRendererData::*)()>(&UnityEngine::Rendering::Universal::ForwardRendererData::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ForwardRendererData*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ForwardRendererData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
