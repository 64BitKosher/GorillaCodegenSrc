// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.Light2DBlendStyle
#include "UnityEngine/Rendering/Universal/Light2DBlendStyle.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter, "UnityEngine.Rendering.Universal", "Light2DBlendStyle/MaskChannelFilter");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.Light2DBlendStyle/MaskChannelFilter
  // [TokenAttribute] Offset: FFFFFFFF
  struct Light2DBlendStyle::MaskChannelFilter/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.Vector4 <mask>k__BackingField
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Vector4 mask;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private UnityEngine.Vector4 <inverted>k__BackingField
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Vector4 inverted;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    public:
    // Creating value type constructor for type: MaskChannelFilter
    constexpr MaskChannelFilter(::UnityEngine::Vector4 mask_ = {}, ::UnityEngine::Vector4 inverted_ = {}) noexcept : mask{mask_}, inverted{inverted_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private UnityEngine.Vector4 <mask>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_$mask$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector4 <inverted>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_$inverted$k__BackingField();
    // public UnityEngine.Vector4 get_mask()
    // Offset: 0x527F4B0
    ::UnityEngine::Vector4 get_mask();
    // private System.Void set_mask(UnityEngine.Vector4 value)
    // Offset: 0x527F4BC
    void set_mask(::UnityEngine::Vector4 value);
    // public UnityEngine.Vector4 get_inverted()
    // Offset: 0x527F4C8
    ::UnityEngine::Vector4 get_inverted();
    // private System.Void set_inverted(UnityEngine.Vector4 value)
    // Offset: 0x527F4D4
    void set_inverted(::UnityEngine::Vector4 value);
    // public System.Void .ctor(UnityEngine.Vector4 m, UnityEngine.Vector4 i)
    // Offset: 0x527F474
    // ABORTED: conflicts with another method.  MaskChannelFilter(::UnityEngine::Vector4 m, ::UnityEngine::Vector4 i);
  }; // UnityEngine.Rendering.Universal.Light2DBlendStyle/MaskChannelFilter
  #pragma pack(pop)
  static check_size<sizeof(Light2DBlendStyle::MaskChannelFilter), 16 + sizeof(::UnityEngine::Vector4)> __UnityEngine_Rendering_Universal_Light2DBlendStyle_MaskChannelFilterSizeCheck;
  static_assert(sizeof(Light2DBlendStyle::MaskChannelFilter) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter::get_mask
// Il2CppName: get_mask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter::*)()>(&UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter::get_mask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter), "get_mask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter::set_mask
// Il2CppName: set_mask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter::*)(::UnityEngine::Vector4)>(&UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter::set_mask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter), "set_mask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter::get_inverted
// Il2CppName: get_inverted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter::*)()>(&UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter::get_inverted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter), "get_inverted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter::set_inverted
// Il2CppName: set_inverted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter::*)(::UnityEngine::Vector4)>(&UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter::set_inverted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter), "set_inverted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2DBlendStyle::MaskChannelFilter::MaskChannelFilter
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
