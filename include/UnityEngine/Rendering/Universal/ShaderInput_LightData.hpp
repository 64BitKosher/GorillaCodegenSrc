// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ShaderInput
#include "UnityEngine/Rendering/Universal/ShaderInput.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ShaderInput::LightData, "UnityEngine.Rendering.Universal", "ShaderInput/LightData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x54
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.ShaderInput/LightData
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateHLSL] Offset: FFFFFFFF
  struct ShaderInput::LightData/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector4 position
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Vector4 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public UnityEngine.Vector4 color
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Vector4 color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public UnityEngine.Vector4 attenuation
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Vector4 attenuation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public UnityEngine.Vector4 spotDirection
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Vector4 spotDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public UnityEngine.Vector4 occlusionProbeChannels
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Vector4 occlusionProbeChannels;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public System.UInt32 layerMask
    // Size: 0x4
    // Offset: 0x50
    uint layerMask;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: LightData
    constexpr LightData(::UnityEngine::Vector4 position_ = {}, ::UnityEngine::Vector4 color_ = {}, ::UnityEngine::Vector4 attenuation_ = {}, ::UnityEngine::Vector4 spotDirection_ = {}, ::UnityEngine::Vector4 occlusionProbeChannels_ = {}, uint layerMask_ = {}) noexcept : position{position_}, color{color_}, attenuation{attenuation_}, spotDirection{spotDirection_}, occlusionProbeChannels{occlusionProbeChannels_}, layerMask{layerMask_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector4 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_position();
    // Get instance field reference: public UnityEngine.Vector4 color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_color();
    // Get instance field reference: public UnityEngine.Vector4 attenuation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_attenuation();
    // Get instance field reference: public UnityEngine.Vector4 spotDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_spotDirection();
    // Get instance field reference: public UnityEngine.Vector4 occlusionProbeChannels
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_occlusionProbeChannels();
    // Get instance field reference: public System.UInt32 layerMask
    [[deprecated("Use field access instead!")]] uint& dyn_layerMask();
  }; // UnityEngine.Rendering.Universal.ShaderInput/LightData
  #pragma pack(pop)
  static check_size<sizeof(ShaderInput::LightData), 80 + sizeof(uint)> __UnityEngine_Rendering_Universal_ShaderInput_LightDataSizeCheck;
  static_assert(sizeof(ShaderInput::LightData) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
