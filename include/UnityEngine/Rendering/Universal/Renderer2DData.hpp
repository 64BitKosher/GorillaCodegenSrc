// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRendererData
#include "UnityEngine/Rendering/Universal/ScriptableRendererData.hpp"
// Including type: UnityEngine.TransparencySortMode
#include "UnityEngine/TransparencySortMode.hpp"
// Including type: UnityEngine.Rendering.Universal.Light2DBlendStyle
#include "UnityEngine/Rendering/Universal/Light2DBlendStyle.hpp"
// Including type: UnityEngine.Rendering.Universal.Downsampling
#include "UnityEngine/Rendering/Universal/Downsampling.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: PostProcessData
  class PostProcessData;
  // Forward declaring type: ILight2DCullResult
  class ILight2DCullResult;
  // Forward declaring type: ScriptableRenderer
  class ScriptableRenderer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: Renderer2DData
  class Renderer2DData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::Renderer2DData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Renderer2DData*, "UnityEngine.Rendering.Universal", "Renderer2DData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x160
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.Renderer2DData
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExcludeFromPresetAttribute] Offset: FFFFFFFF
  // [ReloadGroupAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [MovedFromAttribute] Offset: FFFFFFFF
  class Renderer2DData : public ::UnityEngine::Rendering::Universal::ScriptableRendererData {
    public:
    // Writing base type padding for base size: 0x39 to desired offset: 0x3C
    char ___base_padding[0x3] = {};
    // Nested type: ::UnityEngine::Rendering::Universal::Renderer2DData::Renderer2DDefaultMaterialType
    struct Renderer2DDefaultMaterialType;
    public:
    // private UnityEngine.TransparencySortMode m_TransparencySortMode
    // Size: 0x4
    // Offset: 0x3C
    ::UnityEngine::TransparencySortMode m_TransparencySortMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::TransparencySortMode) == 0x4);
    // private UnityEngine.Vector3 m_TransparencySortAxis
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 m_TransparencySortAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_HDREmulationScale
    // Size: 0x4
    // Offset: 0x4C
    float m_HDREmulationScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_LightRenderTextureScale
    // Size: 0x4
    // Offset: 0x50
    float m_LightRenderTextureScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_LightRenderTextureScale and: m_LightBlendStyles
    char __padding3[0x4] = {};
    // private UnityEngine.Rendering.Universal.Light2DBlendStyle[] m_LightBlendStyles
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::Rendering::Universal::Light2DBlendStyle> m_LightBlendStyles;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::Universal::Light2DBlendStyle>) == 0x8);
    // private System.Boolean m_UseDepthStencilBuffer
    // Size: 0x1
    // Offset: 0x60
    bool m_UseDepthStencilBuffer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_UseCameraSortingLayersTexture
    // Size: 0x1
    // Offset: 0x61
    bool m_UseCameraSortingLayersTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UseCameraSortingLayersTexture and: m_CameraSortingLayersTextureBound
    char __padding6[0x2] = {};
    // private System.Int32 m_CameraSortingLayersTextureBound
    // Size: 0x4
    // Offset: 0x64
    int m_CameraSortingLayersTextureBound;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.Universal.Downsampling m_CameraSortingLayerDownsamplingMethod
    // Size: 0x4
    // Offset: 0x68
    ::UnityEngine::Rendering::Universal::Downsampling m_CameraSortingLayerDownsamplingMethod;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Downsampling) == 0x4);
    // private System.UInt32 m_MaxLightRenderTextureCount
    // Size: 0x4
    // Offset: 0x6C
    uint m_MaxLightRenderTextureCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_MaxShadowRenderTextureCount
    // Size: 0x4
    // Offset: 0x70
    uint m_MaxShadowRenderTextureCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: m_MaxShadowRenderTextureCount and: m_ShapeLightShader
    char __padding10[0x4] = {};
    // private UnityEngine.Shader m_ShapeLightShader
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Shader* m_ShapeLightShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_ShapeLightVolumeShader
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Shader* m_ShapeLightVolumeShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_PointLightShader
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Shader* m_PointLightShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_PointLightVolumeShader
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Shader* m_PointLightVolumeShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_CoreBlitShader
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Shader* m_CoreBlitShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_BlitHDROverlay
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Shader* m_BlitHDROverlay;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_CoreBlitColorAndDepthPS
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Shader* m_CoreBlitColorAndDepthPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_SamplingShader
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Shader* m_SamplingShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_ProjectedShadowShader
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Shader* m_ProjectedShadowShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_SpriteShadowShader
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Shader* m_SpriteShadowShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_SpriteUnshadowShader
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::Shader* m_SpriteUnshadowShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_GeometryUnshadowShader
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::Shader* m_GeometryUnshadowShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_FallbackErrorShader
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::Shader* m_FallbackErrorShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Rendering.Universal.PostProcessData m_PostProcessData
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::Rendering::Universal::PostProcessData* m_PostProcessData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::PostProcessData*) == 0x8);
    // private UnityEngine.Texture2D m_FallOffLookup
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Texture2D* m_FallOffLookup;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.Material> <lightMaterials>k__BackingField
    // Size: 0x8
    // Offset: 0xF0
    ::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::Material*>* lightMaterials;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::Material*>*) == 0x8);
    // private UnityEngine.Material[] <spriteSelfShadowMaterial>k__BackingField
    // Size: 0x8
    // Offset: 0xF8
    ::ArrayW<::UnityEngine::Material*> spriteSelfShadowMaterial;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // private UnityEngine.Material[] <spriteUnshadowMaterial>k__BackingField
    // Size: 0x8
    // Offset: 0x100
    ::ArrayW<::UnityEngine::Material*> spriteUnshadowMaterial;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // private UnityEngine.Material[] <geometryUnshadowMaterial>k__BackingField
    // Size: 0x8
    // Offset: 0x108
    ::ArrayW<::UnityEngine::Material*> geometryUnshadowMaterial;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // private UnityEngine.Material[] <projectedShadowMaterial>k__BackingField
    // Size: 0x8
    // Offset: 0x110
    ::ArrayW<::UnityEngine::Material*> projectedShadowMaterial;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // private UnityEngine.Material[] <stencilOnlyShadowMaterial>k__BackingField
    // Size: 0x8
    // Offset: 0x118
    ::ArrayW<::UnityEngine::Material*> stencilOnlyShadowMaterial;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // private System.Boolean <isNormalsRenderTargetValid>k__BackingField
    // Size: 0x1
    // Offset: 0x120
    bool isNormalsRenderTargetValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isNormalsRenderTargetValid and: normalsRenderTargetScale
    char __padding32[0x3] = {};
    // private System.Single <normalsRenderTargetScale>k__BackingField
    // Size: 0x4
    // Offset: 0x124
    float normalsRenderTargetScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // UnityEngine.Rendering.RTHandle normalsRenderTarget
    // Size: 0x8
    // Offset: 0x128
    ::UnityEngine::Rendering::RTHandle* normalsRenderTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // System.Int32 normalsRenderTargetId
    // Size: 0x4
    // Offset: 0x130
    int normalsRenderTargetId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: normalsRenderTargetId and: shadowsRenderTarget
    char __padding35[0x4] = {};
    // UnityEngine.Rendering.RTHandle shadowsRenderTarget
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::Rendering::RTHandle* shadowsRenderTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // System.Int32 shadowsRenderTargetId
    // Size: 0x4
    // Offset: 0x140
    int shadowsRenderTargetId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: shadowsRenderTargetId and: cameraSortingLayerRenderTarget
    char __padding37[0x4] = {};
    // UnityEngine.Rendering.RTHandle cameraSortingLayerRenderTarget
    // Size: 0x8
    // Offset: 0x148
    ::UnityEngine::Rendering::RTHandle* cameraSortingLayerRenderTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // System.Int32 cameraSortingLayerRenderTargetId
    // Size: 0x4
    // Offset: 0x150
    int cameraSortingLayerRenderTargetId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: cameraSortingLayerRenderTargetId and: lightCullResult
    char __padding39[0x4] = {};
    // private UnityEngine.Rendering.Universal.ILight2DCullResult <lightCullResult>k__BackingField
    // Size: 0x8
    // Offset: 0x158
    ::UnityEngine::Rendering::Universal::ILight2DCullResult* lightCullResult;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ILight2DCullResult*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.TransparencySortMode m_TransparencySortMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::TransparencySortMode& dyn_m_TransparencySortMode();
    // Get instance field reference: private UnityEngine.Vector3 m_TransparencySortAxis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_TransparencySortAxis();
    // Get instance field reference: private System.Single m_HDREmulationScale
    [[deprecated("Use field access instead!")]] float& dyn_m_HDREmulationScale();
    // Get instance field reference: private System.Single m_LightRenderTextureScale
    [[deprecated("Use field access instead!")]] float& dyn_m_LightRenderTextureScale();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Light2DBlendStyle[] m_LightBlendStyles
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::Universal::Light2DBlendStyle>& dyn_m_LightBlendStyles();
    // Get instance field reference: private System.Boolean m_UseDepthStencilBuffer
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseDepthStencilBuffer();
    // Get instance field reference: private System.Boolean m_UseCameraSortingLayersTexture
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseCameraSortingLayersTexture();
    // Get instance field reference: private System.Int32 m_CameraSortingLayersTextureBound
    [[deprecated("Use field access instead!")]] int& dyn_m_CameraSortingLayersTextureBound();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Downsampling m_CameraSortingLayerDownsamplingMethod
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Downsampling& dyn_m_CameraSortingLayerDownsamplingMethod();
    // Get instance field reference: private System.UInt32 m_MaxLightRenderTextureCount
    [[deprecated("Use field access instead!")]] uint& dyn_m_MaxLightRenderTextureCount();
    // Get instance field reference: private System.UInt32 m_MaxShadowRenderTextureCount
    [[deprecated("Use field access instead!")]] uint& dyn_m_MaxShadowRenderTextureCount();
    // Get instance field reference: private UnityEngine.Shader m_ShapeLightShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_ShapeLightShader();
    // Get instance field reference: private UnityEngine.Shader m_ShapeLightVolumeShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_ShapeLightVolumeShader();
    // Get instance field reference: private UnityEngine.Shader m_PointLightShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_PointLightShader();
    // Get instance field reference: private UnityEngine.Shader m_PointLightVolumeShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_PointLightVolumeShader();
    // Get instance field reference: private UnityEngine.Shader m_CoreBlitShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_CoreBlitShader();
    // Get instance field reference: private UnityEngine.Shader m_BlitHDROverlay
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_BlitHDROverlay();
    // Get instance field reference: private UnityEngine.Shader m_CoreBlitColorAndDepthPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_CoreBlitColorAndDepthPS();
    // Get instance field reference: private UnityEngine.Shader m_SamplingShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_SamplingShader();
    // Get instance field reference: private UnityEngine.Shader m_ProjectedShadowShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_ProjectedShadowShader();
    // Get instance field reference: private UnityEngine.Shader m_SpriteShadowShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_SpriteShadowShader();
    // Get instance field reference: private UnityEngine.Shader m_SpriteUnshadowShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_SpriteUnshadowShader();
    // Get instance field reference: private UnityEngine.Shader m_GeometryUnshadowShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_GeometryUnshadowShader();
    // Get instance field reference: private UnityEngine.Shader m_FallbackErrorShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_FallbackErrorShader();
    // Get instance field reference: private UnityEngine.Rendering.Universal.PostProcessData m_PostProcessData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::PostProcessData*& dyn_m_PostProcessData();
    // Get instance field reference: private UnityEngine.Texture2D m_FallOffLookup
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_m_FallOffLookup();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.Material> <lightMaterials>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::Material*>*& dyn_$lightMaterials$k__BackingField();
    // Get instance field reference: private UnityEngine.Material[] <spriteSelfShadowMaterial>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_$spriteSelfShadowMaterial$k__BackingField();
    // Get instance field reference: private UnityEngine.Material[] <spriteUnshadowMaterial>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_$spriteUnshadowMaterial$k__BackingField();
    // Get instance field reference: private UnityEngine.Material[] <geometryUnshadowMaterial>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_$geometryUnshadowMaterial$k__BackingField();
    // Get instance field reference: private UnityEngine.Material[] <projectedShadowMaterial>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_$projectedShadowMaterial$k__BackingField();
    // Get instance field reference: private UnityEngine.Material[] <stencilOnlyShadowMaterial>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_$stencilOnlyShadowMaterial$k__BackingField();
    // Get instance field reference: private System.Boolean <isNormalsRenderTargetValid>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isNormalsRenderTargetValid$k__BackingField();
    // Get instance field reference: private System.Single <normalsRenderTargetScale>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$normalsRenderTargetScale$k__BackingField();
    // Get instance field reference: UnityEngine.Rendering.RTHandle normalsRenderTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_normalsRenderTarget();
    // Get instance field reference: System.Int32 normalsRenderTargetId
    [[deprecated("Use field access instead!")]] int& dyn_normalsRenderTargetId();
    // Get instance field reference: UnityEngine.Rendering.RTHandle shadowsRenderTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_shadowsRenderTarget();
    // Get instance field reference: System.Int32 shadowsRenderTargetId
    [[deprecated("Use field access instead!")]] int& dyn_shadowsRenderTargetId();
    // Get instance field reference: UnityEngine.Rendering.RTHandle cameraSortingLayerRenderTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_cameraSortingLayerRenderTarget();
    // Get instance field reference: System.Int32 cameraSortingLayerRenderTargetId
    [[deprecated("Use field access instead!")]] int& dyn_cameraSortingLayerRenderTargetId();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ILight2DCullResult <lightCullResult>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ILight2DCullResult*& dyn_$lightCullResult$k__BackingField();
    // public System.Single get_hdrEmulationScale()
    // Offset: 0x528C3FC
    float get_hdrEmulationScale();
    // System.Single get_lightRenderTextureScale()
    // Offset: 0x528C404
    float get_lightRenderTextureScale();
    // public UnityEngine.Rendering.Universal.Light2DBlendStyle[] get_lightBlendStyles()
    // Offset: 0x528C40C
    ::ArrayW<::UnityEngine::Rendering::Universal::Light2DBlendStyle> get_lightBlendStyles();
    // System.Boolean get_useDepthStencilBuffer()
    // Offset: 0x528C414
    bool get_useDepthStencilBuffer();
    // UnityEngine.Texture2D get_fallOffLookup()
    // Offset: 0x528C41C
    ::UnityEngine::Texture2D* get_fallOffLookup();
    // UnityEngine.Shader get_shapeLightShader()
    // Offset: 0x528C424
    ::UnityEngine::Shader* get_shapeLightShader();
    // UnityEngine.Shader get_shapeLightVolumeShader()
    // Offset: 0x528C42C
    ::UnityEngine::Shader* get_shapeLightVolumeShader();
    // UnityEngine.Shader get_pointLightShader()
    // Offset: 0x528C434
    ::UnityEngine::Shader* get_pointLightShader();
    // UnityEngine.Shader get_pointLightVolumeShader()
    // Offset: 0x528C43C
    ::UnityEngine::Shader* get_pointLightVolumeShader();
    // UnityEngine.Shader get_blitShader()
    // Offset: 0x528C444
    ::UnityEngine::Shader* get_blitShader();
    // UnityEngine.Shader get_blitHDROverlay()
    // Offset: 0x528C44C
    ::UnityEngine::Shader* get_blitHDROverlay();
    // UnityEngine.Shader get_coreBlitPS()
    // Offset: 0x528C454
    ::UnityEngine::Shader* get_coreBlitPS();
    // UnityEngine.Shader get_coreBlitColorAndDepthPS()
    // Offset: 0x528C45C
    ::UnityEngine::Shader* get_coreBlitColorAndDepthPS();
    // UnityEngine.Shader get_samplingShader()
    // Offset: 0x528C464
    ::UnityEngine::Shader* get_samplingShader();
    // UnityEngine.Rendering.Universal.PostProcessData get_postProcessData()
    // Offset: 0x528C46C
    ::UnityEngine::Rendering::Universal::PostProcessData* get_postProcessData();
    // System.Void set_postProcessData(UnityEngine.Rendering.Universal.PostProcessData value)
    // Offset: 0x528C474
    void set_postProcessData(::UnityEngine::Rendering::Universal::PostProcessData* value);
    // UnityEngine.Shader get_spriteShadowShader()
    // Offset: 0x528C47C
    ::UnityEngine::Shader* get_spriteShadowShader();
    // UnityEngine.Shader get_spriteUnshadowShader()
    // Offset: 0x528C484
    ::UnityEngine::Shader* get_spriteUnshadowShader();
    // UnityEngine.Shader get_geometryUnshadowShader()
    // Offset: 0x528C48C
    ::UnityEngine::Shader* get_geometryUnshadowShader();
    // UnityEngine.Shader get_projectedShadowShader()
    // Offset: 0x528C494
    ::UnityEngine::Shader* get_projectedShadowShader();
    // UnityEngine.TransparencySortMode get_transparencySortMode()
    // Offset: 0x528C49C
    ::UnityEngine::TransparencySortMode get_transparencySortMode();
    // UnityEngine.Vector3 get_transparencySortAxis()
    // Offset: 0x528C4A4
    ::UnityEngine::Vector3 get_transparencySortAxis();
    // System.UInt32 get_lightRenderTextureMemoryBudget()
    // Offset: 0x528C4B0
    uint get_lightRenderTextureMemoryBudget();
    // System.UInt32 get_shadowRenderTextureMemoryBudget()
    // Offset: 0x528C4B8
    uint get_shadowRenderTextureMemoryBudget();
    // System.Boolean get_useCameraSortingLayerTexture()
    // Offset: 0x528C4C0
    bool get_useCameraSortingLayerTexture();
    // System.Int32 get_cameraSortingLayerTextureBound()
    // Offset: 0x528C4C8
    int get_cameraSortingLayerTextureBound();
    // UnityEngine.Rendering.Universal.Downsampling get_cameraSortingLayerDownsamplingMethod()
    // Offset: 0x528C4D0
    ::UnityEngine::Rendering::Universal::Downsampling get_cameraSortingLayerDownsamplingMethod();
    // System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.Material> get_lightMaterials()
    // Offset: 0x528C87C
    ::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::Material*>* get_lightMaterials();
    // UnityEngine.Material[] get_spriteSelfShadowMaterial()
    // Offset: 0x528C884
    ::ArrayW<::UnityEngine::Material*> get_spriteSelfShadowMaterial();
    // System.Void set_spriteSelfShadowMaterial(UnityEngine.Material[] value)
    // Offset: 0x528C88C
    void set_spriteSelfShadowMaterial(::ArrayW<::UnityEngine::Material*> value);
    // UnityEngine.Material[] get_spriteUnshadowMaterial()
    // Offset: 0x528C894
    ::ArrayW<::UnityEngine::Material*> get_spriteUnshadowMaterial();
    // System.Void set_spriteUnshadowMaterial(UnityEngine.Material[] value)
    // Offset: 0x528C89C
    void set_spriteUnshadowMaterial(::ArrayW<::UnityEngine::Material*> value);
    // UnityEngine.Material[] get_geometryUnshadowMaterial()
    // Offset: 0x528C8AC
    ::ArrayW<::UnityEngine::Material*> get_geometryUnshadowMaterial();
    // System.Void set_geometryUnshadowMaterial(UnityEngine.Material[] value)
    // Offset: 0x528C8B4
    void set_geometryUnshadowMaterial(::ArrayW<::UnityEngine::Material*> value);
    // UnityEngine.Material[] get_projectedShadowMaterial()
    // Offset: 0x528C8C4
    ::ArrayW<::UnityEngine::Material*> get_projectedShadowMaterial();
    // System.Void set_projectedShadowMaterial(UnityEngine.Material[] value)
    // Offset: 0x528C8CC
    void set_projectedShadowMaterial(::ArrayW<::UnityEngine::Material*> value);
    // UnityEngine.Material[] get_stencilOnlyShadowMaterial()
    // Offset: 0x528C8DC
    ::ArrayW<::UnityEngine::Material*> get_stencilOnlyShadowMaterial();
    // System.Void set_stencilOnlyShadowMaterial(UnityEngine.Material[] value)
    // Offset: 0x528C8E4
    void set_stencilOnlyShadowMaterial(::ArrayW<::UnityEngine::Material*> value);
    // System.Boolean get_isNormalsRenderTargetValid()
    // Offset: 0x528C8F4
    bool get_isNormalsRenderTargetValid();
    // System.Void set_isNormalsRenderTargetValid(System.Boolean value)
    // Offset: 0x528C8FC
    void set_isNormalsRenderTargetValid(bool value);
    // System.Single get_normalsRenderTargetScale()
    // Offset: 0x528C908
    float get_normalsRenderTargetScale();
    // System.Void set_normalsRenderTargetScale(System.Single value)
    // Offset: 0x528C910
    void set_normalsRenderTargetScale(float value);
    // UnityEngine.Rendering.Universal.ILight2DCullResult get_lightCullResult()
    // Offset: 0x528C918
    ::UnityEngine::Rendering::Universal::ILight2DCullResult* get_lightCullResult();
    // System.Void set_lightCullResult(UnityEngine.Rendering.Universal.ILight2DCullResult value)
    // Offset: 0x528C920
    void set_lightCullResult(::UnityEngine::Rendering::Universal::ILight2DCullResult* value);
    // protected override UnityEngine.Rendering.Universal.ScriptableRenderer Create()
    // Offset: 0x528C4D8
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererData
    // Base method: UnityEngine.Rendering.Universal.ScriptableRenderer ScriptableRendererData::Create()
    ::UnityEngine::Rendering::Universal::ScriptableRenderer* Create();
    // protected override System.Void OnEnable()
    // Offset: 0x528C534
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererData
    // Base method: System.Void ScriptableRendererData::OnEnable()
    void OnEnable();
    // public System.Void .ctor()
    // Offset: 0x528C930
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererData
    // Base method: System.Void ScriptableRendererData::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Renderer2DData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Renderer2DData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Renderer2DData*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.Renderer2DData
  #pragma pack(pop)
  static check_size<sizeof(Renderer2DData), 344 + sizeof(::UnityEngine::Rendering::Universal::ILight2DCullResult*)> __UnityEngine_Rendering_Universal_Renderer2DDataSizeCheck;
  static_assert(sizeof(Renderer2DData) == 0x160);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_hdrEmulationScale
// Il2CppName: get_hdrEmulationScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_hdrEmulationScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_hdrEmulationScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_lightRenderTextureScale
// Il2CppName: get_lightRenderTextureScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_lightRenderTextureScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_lightRenderTextureScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_lightBlendStyles
// Il2CppName: get_lightBlendStyles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rendering::Universal::Light2DBlendStyle> (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_lightBlendStyles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_lightBlendStyles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_useDepthStencilBuffer
// Il2CppName: get_useDepthStencilBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_useDepthStencilBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_useDepthStencilBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_fallOffLookup
// Il2CppName: get_fallOffLookup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_fallOffLookup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_fallOffLookup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_shapeLightShader
// Il2CppName: get_shapeLightShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_shapeLightShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_shapeLightShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_shapeLightVolumeShader
// Il2CppName: get_shapeLightVolumeShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_shapeLightVolumeShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_shapeLightVolumeShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_pointLightShader
// Il2CppName: get_pointLightShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_pointLightShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_pointLightShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_pointLightVolumeShader
// Il2CppName: get_pointLightVolumeShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_pointLightVolumeShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_pointLightVolumeShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_blitShader
// Il2CppName: get_blitShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_blitShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_blitShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_blitHDROverlay
// Il2CppName: get_blitHDROverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_blitHDROverlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_blitHDROverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_coreBlitPS
// Il2CppName: get_coreBlitPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_coreBlitPS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_coreBlitPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_coreBlitColorAndDepthPS
// Il2CppName: get_coreBlitColorAndDepthPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_coreBlitColorAndDepthPS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_coreBlitColorAndDepthPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_samplingShader
// Il2CppName: get_samplingShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_samplingShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_samplingShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_postProcessData
// Il2CppName: get_postProcessData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::PostProcessData* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_postProcessData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_postProcessData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::set_postProcessData
// Il2CppName: set_postProcessData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Renderer2DData::*)(::UnityEngine::Rendering::Universal::PostProcessData*)>(&UnityEngine::Rendering::Universal::Renderer2DData::set_postProcessData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PostProcessData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "set_postProcessData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_spriteShadowShader
// Il2CppName: get_spriteShadowShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_spriteShadowShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_spriteShadowShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_spriteUnshadowShader
// Il2CppName: get_spriteUnshadowShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_spriteUnshadowShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_spriteUnshadowShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_geometryUnshadowShader
// Il2CppName: get_geometryUnshadowShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_geometryUnshadowShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_geometryUnshadowShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_projectedShadowShader
// Il2CppName: get_projectedShadowShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_projectedShadowShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_projectedShadowShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_transparencySortMode
// Il2CppName: get_transparencySortMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TransparencySortMode (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_transparencySortMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_transparencySortMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_transparencySortAxis
// Il2CppName: get_transparencySortAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_transparencySortAxis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_transparencySortAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_lightRenderTextureMemoryBudget
// Il2CppName: get_lightRenderTextureMemoryBudget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_lightRenderTextureMemoryBudget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_lightRenderTextureMemoryBudget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_shadowRenderTextureMemoryBudget
// Il2CppName: get_shadowRenderTextureMemoryBudget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_shadowRenderTextureMemoryBudget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_shadowRenderTextureMemoryBudget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_useCameraSortingLayerTexture
// Il2CppName: get_useCameraSortingLayerTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_useCameraSortingLayerTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_useCameraSortingLayerTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_cameraSortingLayerTextureBound
// Il2CppName: get_cameraSortingLayerTextureBound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_cameraSortingLayerTextureBound)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_cameraSortingLayerTextureBound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_cameraSortingLayerDownsamplingMethod
// Il2CppName: get_cameraSortingLayerDownsamplingMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::Downsampling (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_cameraSortingLayerDownsamplingMethod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_cameraSortingLayerDownsamplingMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_lightMaterials
// Il2CppName: get_lightMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::Material*>* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_lightMaterials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_lightMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_spriteSelfShadowMaterial
// Il2CppName: get_spriteSelfShadowMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Material*> (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_spriteSelfShadowMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_spriteSelfShadowMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::set_spriteSelfShadowMaterial
// Il2CppName: set_spriteSelfShadowMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Renderer2DData::*)(::ArrayW<::UnityEngine::Material*>)>(&UnityEngine::Rendering::Universal::Renderer2DData::set_spriteSelfShadowMaterial)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Material"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "set_spriteSelfShadowMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_spriteUnshadowMaterial
// Il2CppName: get_spriteUnshadowMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Material*> (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_spriteUnshadowMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_spriteUnshadowMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::set_spriteUnshadowMaterial
// Il2CppName: set_spriteUnshadowMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Renderer2DData::*)(::ArrayW<::UnityEngine::Material*>)>(&UnityEngine::Rendering::Universal::Renderer2DData::set_spriteUnshadowMaterial)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Material"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "set_spriteUnshadowMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_geometryUnshadowMaterial
// Il2CppName: get_geometryUnshadowMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Material*> (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_geometryUnshadowMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_geometryUnshadowMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::set_geometryUnshadowMaterial
// Il2CppName: set_geometryUnshadowMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Renderer2DData::*)(::ArrayW<::UnityEngine::Material*>)>(&UnityEngine::Rendering::Universal::Renderer2DData::set_geometryUnshadowMaterial)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Material"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "set_geometryUnshadowMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_projectedShadowMaterial
// Il2CppName: get_projectedShadowMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Material*> (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_projectedShadowMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_projectedShadowMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::set_projectedShadowMaterial
// Il2CppName: set_projectedShadowMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Renderer2DData::*)(::ArrayW<::UnityEngine::Material*>)>(&UnityEngine::Rendering::Universal::Renderer2DData::set_projectedShadowMaterial)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Material"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "set_projectedShadowMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_stencilOnlyShadowMaterial
// Il2CppName: get_stencilOnlyShadowMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Material*> (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_stencilOnlyShadowMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_stencilOnlyShadowMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::set_stencilOnlyShadowMaterial
// Il2CppName: set_stencilOnlyShadowMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Renderer2DData::*)(::ArrayW<::UnityEngine::Material*>)>(&UnityEngine::Rendering::Universal::Renderer2DData::set_stencilOnlyShadowMaterial)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Material"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "set_stencilOnlyShadowMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_isNormalsRenderTargetValid
// Il2CppName: get_isNormalsRenderTargetValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_isNormalsRenderTargetValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_isNormalsRenderTargetValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::set_isNormalsRenderTargetValid
// Il2CppName: set_isNormalsRenderTargetValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Renderer2DData::*)(bool)>(&UnityEngine::Rendering::Universal::Renderer2DData::set_isNormalsRenderTargetValid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "set_isNormalsRenderTargetValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_normalsRenderTargetScale
// Il2CppName: get_normalsRenderTargetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_normalsRenderTargetScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_normalsRenderTargetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::set_normalsRenderTargetScale
// Il2CppName: set_normalsRenderTargetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Renderer2DData::*)(float)>(&UnityEngine::Rendering::Universal::Renderer2DData::set_normalsRenderTargetScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "set_normalsRenderTargetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::get_lightCullResult
// Il2CppName: get_lightCullResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ILight2DCullResult* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::get_lightCullResult)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "get_lightCullResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::set_lightCullResult
// Il2CppName: set_lightCullResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Renderer2DData::*)(::UnityEngine::Rendering::Universal::ILight2DCullResult*)>(&UnityEngine::Rendering::Universal::Renderer2DData::set_lightCullResult)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ILight2DCullResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "set_lightCullResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ScriptableRenderer* (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Renderer2DData::*)()>(&UnityEngine::Rendering::Universal::Renderer2DData::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2DData*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2DData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
