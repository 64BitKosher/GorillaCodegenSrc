// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Double
#include "System/Double.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
// Including type: UnityEngine.Rendering.Universal.IntPoint
#include "UnityEngine/Rendering/Universal/IntPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: LocalMinima
  class LocalMinima;
  // Forward declaring type: TEdge
  class TEdge;
  // Forward declaring type: Scanbeam
  class Scanbeam;
  // Forward declaring type: OutRec
  class OutRec;
  // Forward declaring type: IntRect
  struct IntRect;
  // Forward declaring type: OutPt
  class OutPt;
  // Forward declaring type: PolyType
  struct PolyType;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ClipperBase
  class ClipperBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::ClipperBase);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ClipperBase*, "UnityEngine.Rendering.Universal", "ClipperBase");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x43
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.ClipperBase
  // [TokenAttribute] Offset: FFFFFFFF
  class ClipperBase : public ::Il2CppObject {
    public:
    public:
    // UnityEngine.Rendering.Universal.LocalMinima m_MinimaList
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Rendering::Universal::LocalMinima* m_MinimaList;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LocalMinima*) == 0x8);
    // UnityEngine.Rendering.Universal.LocalMinima m_CurrentLM
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Rendering::Universal::LocalMinima* m_CurrentLM;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LocalMinima*) == 0x8);
    // System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.TEdge>> m_edges
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::TEdge*>*>* m_edges;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::TEdge*>*>*) == 0x8);
    // UnityEngine.Rendering.Universal.Scanbeam m_Scanbeam
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Rendering::Universal::Scanbeam* m_Scanbeam;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Scanbeam*) == 0x8);
    // System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.OutRec> m_PolyOuts
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::OutRec*>* m_PolyOuts;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::OutRec*>*) == 0x8);
    // UnityEngine.Rendering.Universal.TEdge m_ActiveEdges
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Rendering::Universal::TEdge* m_ActiveEdges;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::TEdge*) == 0x8);
    // System.Boolean m_UseFullRange
    // Size: 0x1
    // Offset: 0x40
    bool m_UseFullRange;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean m_HasOpenPaths
    // Size: 0x1
    // Offset: 0x41
    bool m_HasOpenPaths;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <PreserveCollinear>k__BackingField
    // Size: 0x1
    // Offset: 0x42
    bool PreserveCollinear;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static System.Double horizontal
    static constexpr const double horizontal = -3.4e+38;
    // Get static field: static System.Double horizontal
    static double _get_horizontal();
    // Set static field: static System.Double horizontal
    static void _set_horizontal(double value);
    // static field const value: static System.Int32 Skip
    static constexpr const int Skip = -2;
    // Get static field: static System.Int32 Skip
    static int _get_Skip();
    // Set static field: static System.Int32 Skip
    static void _set_Skip(int value);
    // static field const value: static System.Int32 Unassigned
    static constexpr const int Unassigned = -1;
    // Get static field: static System.Int32 Unassigned
    static int _get_Unassigned();
    // Set static field: static System.Int32 Unassigned
    static void _set_Unassigned(int value);
    // static field const value: static System.Double tolerance
    static constexpr const double tolerance = 1e-20;
    // Get static field: static System.Double tolerance
    static double _get_tolerance();
    // Set static field: static System.Double tolerance
    static void _set_tolerance(double value);
    // static field const value: static public System.Int64 loRange
    static constexpr const int64_t loRange = 1073741823;
    // Get static field: static public System.Int64 loRange
    static int64_t _get_loRange();
    // Set static field: static public System.Int64 loRange
    static void _set_loRange(int64_t value);
    // static field const value: static public System.Int64 hiRange
    static constexpr const int64_t hiRange = 4611686018427387903;
    // Get static field: static public System.Int64 hiRange
    static int64_t _get_hiRange();
    // Set static field: static public System.Int64 hiRange
    static void _set_hiRange(int64_t value);
    // Get instance field reference: UnityEngine.Rendering.Universal.LocalMinima m_MinimaList
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LocalMinima*& dyn_m_MinimaList();
    // Get instance field reference: UnityEngine.Rendering.Universal.LocalMinima m_CurrentLM
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LocalMinima*& dyn_m_CurrentLM();
    // Get instance field reference: System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.TEdge>> m_edges
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::TEdge*>*>*& dyn_m_edges();
    // Get instance field reference: UnityEngine.Rendering.Universal.Scanbeam m_Scanbeam
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Scanbeam*& dyn_m_Scanbeam();
    // Get instance field reference: System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.OutRec> m_PolyOuts
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::OutRec*>*& dyn_m_PolyOuts();
    // Get instance field reference: UnityEngine.Rendering.Universal.TEdge m_ActiveEdges
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::TEdge*& dyn_m_ActiveEdges();
    // Get instance field reference: System.Boolean m_UseFullRange
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseFullRange();
    // Get instance field reference: System.Boolean m_HasOpenPaths
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasOpenPaths();
    // Get instance field reference: private System.Boolean <PreserveCollinear>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$PreserveCollinear$k__BackingField();
    // static System.Boolean near_zero(System.Double val)
    // Offset: 0x526CE4C
    static bool near_zero(double val);
    // public System.Boolean get_PreserveCollinear()
    // Offset: 0x526CE74
    bool get_PreserveCollinear();
    // public System.Void set_PreserveCollinear(System.Boolean value)
    // Offset: 0x526CE7C
    void set_PreserveCollinear(bool value);
    // public System.Void Swap(ref System.Int64 val1, ref System.Int64 val2)
    // Offset: 0x526CE88
    void Swap(ByRef<int64_t> val1, ByRef<int64_t> val2);
    // static System.Boolean IsHorizontal(UnityEngine.Rendering.Universal.TEdge e)
    // Offset: 0x526CE9C
    static bool IsHorizontal(::UnityEngine::Rendering::Universal::TEdge* e);
    // System.Boolean PointIsVertex(UnityEngine.Rendering.Universal.IntPoint pt, UnityEngine.Rendering.Universal.OutPt pp)
    // Offset: 0x526CEBC
    bool PointIsVertex(::UnityEngine::Rendering::Universal::IntPoint pt, ::UnityEngine::Rendering::Universal::OutPt* pp);
    // System.Boolean PointOnLineSegment(UnityEngine.Rendering.Universal.IntPoint pt, UnityEngine.Rendering.Universal.IntPoint linePt1, UnityEngine.Rendering.Universal.IntPoint linePt2, System.Boolean UseFullRange)
    // Offset: 0x526CF00
    bool PointOnLineSegment(::UnityEngine::Rendering::Universal::IntPoint pt, ::UnityEngine::Rendering::Universal::IntPoint linePt1, ::UnityEngine::Rendering::Universal::IntPoint linePt2, bool UseFullRange);
    // System.Boolean PointOnPolygon(UnityEngine.Rendering.Universal.IntPoint pt, UnityEngine.Rendering.Universal.OutPt pp, System.Boolean UseFullRange)
    // Offset: 0x526D068
    bool PointOnPolygon(::UnityEngine::Rendering::Universal::IntPoint pt, ::UnityEngine::Rendering::Universal::OutPt* pp, bool UseFullRange);
    // static System.Boolean SlopesEqual(UnityEngine.Rendering.Universal.TEdge e1, UnityEngine.Rendering.Universal.TEdge e2, System.Boolean UseFullRange)
    // Offset: 0x526D12C
    static bool SlopesEqual(::UnityEngine::Rendering::Universal::TEdge* e1, ::UnityEngine::Rendering::Universal::TEdge* e2, bool UseFullRange);
    // static System.Boolean SlopesEqual(UnityEngine.Rendering.Universal.IntPoint pt1, UnityEngine.Rendering.Universal.IntPoint pt2, UnityEngine.Rendering.Universal.IntPoint pt3, System.Boolean UseFullRange)
    // Offset: 0x526D1B0
    static bool SlopesEqual(::UnityEngine::Rendering::Universal::IntPoint pt1, ::UnityEngine::Rendering::Universal::IntPoint pt2, ::UnityEngine::Rendering::Universal::IntPoint pt3, bool UseFullRange);
    // static System.Boolean SlopesEqual(UnityEngine.Rendering.Universal.IntPoint pt1, UnityEngine.Rendering.Universal.IntPoint pt2, UnityEngine.Rendering.Universal.IntPoint pt3, UnityEngine.Rendering.Universal.IntPoint pt4, System.Boolean UseFullRange)
    // Offset: 0x526D260
    static bool SlopesEqual(::UnityEngine::Rendering::Universal::IntPoint pt1, ::UnityEngine::Rendering::Universal::IntPoint pt2, ::UnityEngine::Rendering::Universal::IntPoint pt3, ::UnityEngine::Rendering::Universal::IntPoint pt4, bool UseFullRange);
    // System.Void .ctor()
    // Offset: 0x526D32C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClipperBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::ClipperBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClipperBase*, creationType>()));
    }
    // public System.Void Clear()
    // Offset: 0x526D3DC
    void Clear();
    // private System.Void DisposeLocalMinimaList()
    // Offset: 0x526D548
    void DisposeLocalMinimaList();
    // private System.Void RangeTest(UnityEngine.Rendering.Universal.IntPoint Pt, ref System.Boolean useFullRange)
    // Offset: 0x526D5A4
    void RangeTest(::UnityEngine::Rendering::Universal::IntPoint Pt, ByRef<bool> useFullRange);
    // private System.Void InitEdge(UnityEngine.Rendering.Universal.TEdge e, UnityEngine.Rendering.Universal.TEdge eNext, UnityEngine.Rendering.Universal.TEdge ePrev, UnityEngine.Rendering.Universal.IntPoint pt)
    // Offset: 0x526D6A4
    void InitEdge(::UnityEngine::Rendering::Universal::TEdge* e, ::UnityEngine::Rendering::Universal::TEdge* eNext, ::UnityEngine::Rendering::Universal::TEdge* ePrev, ::UnityEngine::Rendering::Universal::IntPoint pt);
    // private System.Void InitEdge2(UnityEngine.Rendering.Universal.TEdge e, UnityEngine.Rendering.Universal.PolyType polyType)
    // Offset: 0x526D708
    void InitEdge2(::UnityEngine::Rendering::Universal::TEdge* e, ::UnityEngine::Rendering::Universal::PolyType polyType);
    // private UnityEngine.Rendering.Universal.TEdge FindNextLocMin(UnityEngine.Rendering.Universal.TEdge E)
    // Offset: 0x526D7DC
    ::UnityEngine::Rendering::Universal::TEdge* FindNextLocMin(::UnityEngine::Rendering::Universal::TEdge* E);
    // private UnityEngine.Rendering.Universal.TEdge ProcessBound(UnityEngine.Rendering.Universal.TEdge E, System.Boolean LeftBoundIsForward)
    // Offset: 0x526D8D4
    ::UnityEngine::Rendering::Universal::TEdge* ProcessBound(::UnityEngine::Rendering::Universal::TEdge* E, bool LeftBoundIsForward);
    // public System.Boolean AddPath(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> pg, UnityEngine.Rendering.Universal.PolyType polyType, System.Boolean Closed)
    // Offset: 0x526DDC0
    bool AddPath(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* pg, ::UnityEngine::Rendering::Universal::PolyType polyType, bool Closed);
    // public System.Boolean AddPaths(System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> ppg, UnityEngine.Rendering.Universal.PolyType polyType, System.Boolean closed)
    // Offset: 0x526EA58
    bool AddPaths(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* ppg, ::UnityEngine::Rendering::Universal::PolyType polyType, bool closed);
    // System.Boolean Pt2IsBetweenPt1AndPt3(UnityEngine.Rendering.Universal.IntPoint pt1, UnityEngine.Rendering.Universal.IntPoint pt2, UnityEngine.Rendering.Universal.IntPoint pt3)
    // Offset: 0x526E9DC
    bool Pt2IsBetweenPt1AndPt3(::UnityEngine::Rendering::Universal::IntPoint pt1, ::UnityEngine::Rendering::Universal::IntPoint pt2, ::UnityEngine::Rendering::Universal::IntPoint pt3);
    // private UnityEngine.Rendering.Universal.TEdge RemoveEdge(UnityEngine.Rendering.Universal.TEdge e)
    // Offset: 0x526E978
    ::UnityEngine::Rendering::Universal::TEdge* RemoveEdge(::UnityEngine::Rendering::Universal::TEdge* e);
    // private System.Void SetDx(UnityEngine.Rendering.Universal.TEdge e)
    // Offset: 0x526D790
    void SetDx(::UnityEngine::Rendering::Universal::TEdge* e);
    // private System.Void InsertLocalMinima(UnityEngine.Rendering.Universal.LocalMinima newLm)
    // Offset: 0x526DD14
    void InsertLocalMinima(::UnityEngine::Rendering::Universal::LocalMinima* newLm);
    // System.Boolean PopLocalMinima(System.Int64 Y, out UnityEngine.Rendering.Universal.LocalMinima current)
    // Offset: 0x526EB24
    bool PopLocalMinima(int64_t Y, ByRef<::UnityEngine::Rendering::Universal::LocalMinima*> current);
    // private System.Void ReverseHorizontal(UnityEngine.Rendering.Universal.TEdge e)
    // Offset: 0x526DD9C
    void ReverseHorizontal(::UnityEngine::Rendering::Universal::TEdge* e);
    // System.Void Reset()
    // Offset: 0x526EB80
    void Reset();
    // static public UnityEngine.Rendering.Universal.IntRect GetBounds(System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> paths)
    // Offset: 0x526ED8C
    static ::UnityEngine::Rendering::Universal::IntRect GetBounds(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* paths);
    // System.Void InsertScanbeam(System.Int64 Y)
    // Offset: 0x526EC38
    void InsertScanbeam(int64_t Y);
    // System.Boolean PopScanbeam(out System.Int64 Y)
    // Offset: 0x526F084
    bool PopScanbeam(ByRef<int64_t> Y);
    // System.Boolean LocalMinimaPending()
    // Offset: 0x526F0BC
    bool LocalMinimaPending();
    // UnityEngine.Rendering.Universal.OutRec CreateOutRec()
    // Offset: 0x526F0CC
    ::UnityEngine::Rendering::Universal::OutRec* CreateOutRec();
    // System.Void DisposeOutRec(System.Int32 index)
    // Offset: 0x526F210
    void DisposeOutRec(int index);
    // System.Void UpdateEdgeIntoAEL(ref UnityEngine.Rendering.Universal.TEdge e)
    // Offset: 0x526F2A4
    void UpdateEdgeIntoAEL(ByRef<::UnityEngine::Rendering::Universal::TEdge*> e);
    // System.Void SwapPositionsInAEL(UnityEngine.Rendering.Universal.TEdge edge1, UnityEngine.Rendering.Universal.TEdge edge2)
    // Offset: 0x526F3F8
    void SwapPositionsInAEL(::UnityEngine::Rendering::Universal::TEdge* edge1, ::UnityEngine::Rendering::Universal::TEdge* edge2);
    // System.Void DeleteFromAEL(UnityEngine.Rendering.Universal.TEdge e)
    // Offset: 0x526F63C
    void DeleteFromAEL(::UnityEngine::Rendering::Universal::TEdge* e);
  }; // UnityEngine.Rendering.Universal.ClipperBase
  #pragma pack(pop)
  static check_size<sizeof(ClipperBase), 66 + sizeof(bool)> __UnityEngine_Rendering_Universal_ClipperBaseSizeCheck;
  static_assert(sizeof(ClipperBase) == 0x43);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::near_zero
// Il2CppName: near_zero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double)>(&UnityEngine::Rendering::Universal::ClipperBase::near_zero)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "near_zero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::get_PreserveCollinear
// Il2CppName: get_PreserveCollinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ClipperBase::*)()>(&UnityEngine::Rendering::Universal::ClipperBase::get_PreserveCollinear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "get_PreserveCollinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::set_PreserveCollinear
// Il2CppName: set_PreserveCollinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)(bool)>(&UnityEngine::Rendering::Universal::ClipperBase::set_PreserveCollinear)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "set_PreserveCollinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::Swap
// Il2CppName: Swap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)(ByRef<int64_t>, ByRef<int64_t>)>(&UnityEngine::Rendering::Universal::ClipperBase::Swap)> {
  static const MethodInfo* get() {
    static auto* val1 = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* val2 = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "Swap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val1, val2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::IsHorizontal
// Il2CppName: IsHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::ClipperBase::IsHorizontal)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "IsHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::PointIsVertex
// Il2CppName: PointIsVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ClipperBase::*)(::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::OutPt*)>(&UnityEngine::Rendering::Universal::ClipperBase::PointIsVertex)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* pp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "PointIsVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, pp});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::PointOnLineSegment
// Il2CppName: PointOnLineSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ClipperBase::*)(::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint, bool)>(&UnityEngine::Rendering::Universal::ClipperBase::PointOnLineSegment)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* linePt1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* linePt2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "PointOnLineSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, linePt1, linePt2, UseFullRange});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::PointOnPolygon
// Il2CppName: PointOnPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ClipperBase::*)(::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::OutPt*, bool)>(&UnityEngine::Rendering::Universal::ClipperBase::PointOnPolygon)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* pp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "PointOnPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, pp, UseFullRange});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::SlopesEqual
// Il2CppName: SlopesEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::TEdge*, bool)>(&UnityEngine::Rendering::Universal::ClipperBase::SlopesEqual)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "SlopesEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, UseFullRange});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::SlopesEqual
// Il2CppName: SlopesEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint, bool)>(&UnityEngine::Rendering::Universal::ClipperBase::SlopesEqual)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* pt3 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "SlopesEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2, pt3, UseFullRange});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::SlopesEqual
// Il2CppName: SlopesEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint, bool)>(&UnityEngine::Rendering::Universal::ClipperBase::SlopesEqual)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* pt3 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* pt4 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "SlopesEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2, pt3, pt4, UseFullRange});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)()>(&UnityEngine::Rendering::Universal::ClipperBase::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::DisposeLocalMinimaList
// Il2CppName: DisposeLocalMinimaList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)()>(&UnityEngine::Rendering::Universal::ClipperBase::DisposeLocalMinimaList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "DisposeLocalMinimaList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::RangeTest
// Il2CppName: RangeTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)(::UnityEngine::Rendering::Universal::IntPoint, ByRef<bool>)>(&UnityEngine::Rendering::Universal::ClipperBase::RangeTest)> {
  static const MethodInfo* get() {
    static auto* Pt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* useFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "RangeTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Pt, useFullRange});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::InitEdge
// Il2CppName: InitEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::IntPoint)>(&UnityEngine::Rendering::Universal::ClipperBase::InitEdge)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* eNext = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* ePrev = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "InitEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, eNext, ePrev, pt});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::InitEdge2
// Il2CppName: InitEdge2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::PolyType)>(&UnityEngine::Rendering::Universal::ClipperBase::InitEdge2)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* polyType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "InitEdge2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, polyType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::FindNextLocMin
// Il2CppName: FindNextLocMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::TEdge* (UnityEngine::Rendering::Universal::ClipperBase::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::ClipperBase::FindNextLocMin)> {
  static const MethodInfo* get() {
    static auto* E = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "FindNextLocMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{E});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::ProcessBound
// Il2CppName: ProcessBound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::TEdge* (UnityEngine::Rendering::Universal::ClipperBase::*)(::UnityEngine::Rendering::Universal::TEdge*, bool)>(&UnityEngine::Rendering::Universal::ClipperBase::ProcessBound)> {
  static const MethodInfo* get() {
    static auto* E = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* LeftBoundIsForward = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "ProcessBound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{E, LeftBoundIsForward});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::AddPath
// Il2CppName: AddPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ClipperBase::*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, ::UnityEngine::Rendering::Universal::PolyType, bool)>(&UnityEngine::Rendering::Universal::ClipperBase::AddPath)> {
  static const MethodInfo* get() {
    static auto* pg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* polyType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyType")->byval_arg;
    static auto* Closed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "AddPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pg, polyType, Closed});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::AddPaths
// Il2CppName: AddPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ClipperBase::*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>*, ::UnityEngine::Rendering::Universal::PolyType, bool)>(&UnityEngine::Rendering::Universal::ClipperBase::AddPaths)> {
  static const MethodInfo* get() {
    static auto* ppg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})})->byval_arg;
    static auto* polyType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyType")->byval_arg;
    static auto* closed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "AddPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ppg, polyType, closed});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::Pt2IsBetweenPt1AndPt3
// Il2CppName: Pt2IsBetweenPt1AndPt3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ClipperBase::*)(::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint)>(&UnityEngine::Rendering::Universal::ClipperBase::Pt2IsBetweenPt1AndPt3)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* pt3 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "Pt2IsBetweenPt1AndPt3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2, pt3});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::RemoveEdge
// Il2CppName: RemoveEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::TEdge* (UnityEngine::Rendering::Universal::ClipperBase::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::ClipperBase::RemoveEdge)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "RemoveEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::SetDx
// Il2CppName: SetDx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::ClipperBase::SetDx)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "SetDx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::InsertLocalMinima
// Il2CppName: InsertLocalMinima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)(::UnityEngine::Rendering::Universal::LocalMinima*)>(&UnityEngine::Rendering::Universal::ClipperBase::InsertLocalMinima)> {
  static const MethodInfo* get() {
    static auto* newLm = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LocalMinima")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "InsertLocalMinima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newLm});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::PopLocalMinima
// Il2CppName: PopLocalMinima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ClipperBase::*)(int64_t, ByRef<::UnityEngine::Rendering::Universal::LocalMinima*>)>(&UnityEngine::Rendering::Universal::ClipperBase::PopLocalMinima)> {
  static const MethodInfo* get() {
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* current = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LocalMinima")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "PopLocalMinima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Y, current});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::ReverseHorizontal
// Il2CppName: ReverseHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::ClipperBase::ReverseHorizontal)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "ReverseHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)()>(&UnityEngine::Rendering::Universal::ClipperBase::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::GetBounds
// Il2CppName: GetBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::IntRect (*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>*)>(&UnityEngine::Rendering::Universal::ClipperBase::GetBounds)> {
  static const MethodInfo* get() {
    static auto* paths = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "GetBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paths});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::InsertScanbeam
// Il2CppName: InsertScanbeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)(int64_t)>(&UnityEngine::Rendering::Universal::ClipperBase::InsertScanbeam)> {
  static const MethodInfo* get() {
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "InsertScanbeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Y});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::PopScanbeam
// Il2CppName: PopScanbeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ClipperBase::*)(ByRef<int64_t>)>(&UnityEngine::Rendering::Universal::ClipperBase::PopScanbeam)> {
  static const MethodInfo* get() {
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "PopScanbeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Y});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::LocalMinimaPending
// Il2CppName: LocalMinimaPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ClipperBase::*)()>(&UnityEngine::Rendering::Universal::ClipperBase::LocalMinimaPending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "LocalMinimaPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::CreateOutRec
// Il2CppName: CreateOutRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::OutRec* (UnityEngine::Rendering::Universal::ClipperBase::*)()>(&UnityEngine::Rendering::Universal::ClipperBase::CreateOutRec)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "CreateOutRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::DisposeOutRec
// Il2CppName: DisposeOutRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)(int)>(&UnityEngine::Rendering::Universal::ClipperBase::DisposeOutRec)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "DisposeOutRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::UpdateEdgeIntoAEL
// Il2CppName: UpdateEdgeIntoAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)(ByRef<::UnityEngine::Rendering::Universal::TEdge*>)>(&UnityEngine::Rendering::Universal::ClipperBase::UpdateEdgeIntoAEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "UpdateEdgeIntoAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::SwapPositionsInAEL
// Il2CppName: SwapPositionsInAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::ClipperBase::SwapPositionsInAEL)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "SwapPositionsInAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ClipperBase::DeleteFromAEL
// Il2CppName: DeleteFromAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ClipperBase::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::ClipperBase::DeleteFromAEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ClipperBase*), "DeleteFromAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
