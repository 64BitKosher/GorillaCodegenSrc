// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: UniversalAdditionalCameraData
  class UniversalAdditionalCameraData;
  // Forward declaring type: VolumeFrameworkUpdateMode
  struct VolumeFrameworkUpdateMode;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: LayerMask
  struct LayerMask;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: CameraExtensions
  class CameraExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::CameraExtensions);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::CameraExtensions*, "UnityEngine.Rendering.Universal", "CameraExtensions");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.CameraExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class CameraExtensions : public ::Il2CppObject {
    public:
    // static public UnityEngine.Rendering.Universal.UniversalAdditionalCameraData GetUniversalAdditionalCameraData(UnityEngine.Camera camera)
    // Offset: 0x52E63A4
    static ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData* GetUniversalAdditionalCameraData(::UnityEngine::Camera* camera);
    // static public UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode GetVolumeFrameworkUpdateMode(UnityEngine.Camera camera)
    // Offset: 0x52E643C
    static ::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode GetVolumeFrameworkUpdateMode(::UnityEngine::Camera* camera);
    // static public System.Void SetVolumeFrameworkUpdateMode(UnityEngine.Camera camera, UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode mode)
    // Offset: 0x52E6458
    static void SetVolumeFrameworkUpdateMode(::UnityEngine::Camera* camera, ::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode mode);
    // static public System.Void UpdateVolumeStack(UnityEngine.Camera camera)
    // Offset: 0x52E65F8
    static void UpdateVolumeStack(::UnityEngine::Camera* camera);
    // static public System.Void UpdateVolumeStack(UnityEngine.Camera camera, UnityEngine.Rendering.Universal.UniversalAdditionalCameraData cameraData)
    // Offset: 0x52E653C
    static void UpdateVolumeStack(::UnityEngine::Camera* camera, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData* cameraData);
    // static public System.Void DestroyVolumeStack(UnityEngine.Camera camera)
    // Offset: 0x52E692C
    static void DestroyVolumeStack(::UnityEngine::Camera* camera);
    // static public System.Void DestroyVolumeStack(UnityEngine.Camera camera, UnityEngine.Rendering.Universal.UniversalAdditionalCameraData cameraData)
    // Offset: 0x52E6940
    static void DestroyVolumeStack(::UnityEngine::Camera* camera, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData* cameraData);
    // static System.Void GetVolumeLayerMaskAndTrigger(UnityEngine.Camera camera, UnityEngine.Rendering.Universal.UniversalAdditionalCameraData cameraData, out UnityEngine.LayerMask layerMask, out UnityEngine.Transform trigger)
    // Offset: 0x52E6730
    static void GetVolumeLayerMaskAndTrigger(::UnityEngine::Camera* camera, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData* cameraData, ByRef<::UnityEngine::LayerMask> layerMask, ByRef<::UnityEngine::Transform*> trigger);
  }; // UnityEngine.Rendering.Universal.CameraExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraExtensions::GetUniversalAdditionalCameraData
// Il2CppName: GetUniversalAdditionalCameraData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData* (*)(::UnityEngine::Camera*)>(&UnityEngine::Rendering::Universal::CameraExtensions::GetUniversalAdditionalCameraData)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraExtensions*), "GetUniversalAdditionalCameraData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraExtensions::GetVolumeFrameworkUpdateMode
// Il2CppName: GetVolumeFrameworkUpdateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode (*)(::UnityEngine::Camera*)>(&UnityEngine::Rendering::Universal::CameraExtensions::GetVolumeFrameworkUpdateMode)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraExtensions*), "GetVolumeFrameworkUpdateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraExtensions::SetVolumeFrameworkUpdateMode
// Il2CppName: SetVolumeFrameworkUpdateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode)>(&UnityEngine::Rendering::Universal::CameraExtensions::SetVolumeFrameworkUpdateMode)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "VolumeFrameworkUpdateMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraExtensions*), "SetVolumeFrameworkUpdateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraExtensions::UpdateVolumeStack
// Il2CppName: UpdateVolumeStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*)>(&UnityEngine::Rendering::Universal::CameraExtensions::UpdateVolumeStack)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraExtensions*), "UpdateVolumeStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraExtensions::UpdateVolumeStack
// Il2CppName: UpdateVolumeStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*)>(&UnityEngine::Rendering::Universal::CameraExtensions::UpdateVolumeStack)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalAdditionalCameraData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraExtensions*), "UpdateVolumeStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraExtensions::DestroyVolumeStack
// Il2CppName: DestroyVolumeStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*)>(&UnityEngine::Rendering::Universal::CameraExtensions::DestroyVolumeStack)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraExtensions*), "DestroyVolumeStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraExtensions::DestroyVolumeStack
// Il2CppName: DestroyVolumeStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*)>(&UnityEngine::Rendering::Universal::CameraExtensions::DestroyVolumeStack)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalAdditionalCameraData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraExtensions*), "DestroyVolumeStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraExtensions::GetVolumeLayerMaskAndTrigger
// Il2CppName: GetVolumeLayerMaskAndTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*, ByRef<::UnityEngine::LayerMask>, ByRef<::UnityEngine::Transform*>)>(&UnityEngine::Rendering::Universal::CameraExtensions::GetVolumeLayerMaskAndTrigger)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalAdditionalCameraData")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->this_arg;
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraExtensions*), "GetVolumeLayerMaskAndTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, cameraData, layerMask, trigger});
  }
};
