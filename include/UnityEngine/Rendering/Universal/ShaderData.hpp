// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ComputeBuffer
  class ComputeBuffer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueType
  class ValueType;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ShaderData
  class ShaderData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::ShaderData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ShaderData*, "UnityEngine.Rendering.Universal", "ShaderData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.ShaderData
  // [TokenAttribute] Offset: FFFFFFFF
  class ShaderData : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private UnityEngine.ComputeBuffer m_LightDataBuffer
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::ComputeBuffer* m_LightDataBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::ComputeBuffer*) == 0x8);
    // private UnityEngine.ComputeBuffer m_LightIndicesBuffer
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::ComputeBuffer* m_LightIndicesBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::ComputeBuffer*) == 0x8);
    // private UnityEngine.ComputeBuffer m_AdditionalLightShadowParamsStructuredBuffer
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::ComputeBuffer* m_AdditionalLightShadowParamsStructuredBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::ComputeBuffer*) == 0x8);
    // private UnityEngine.ComputeBuffer m_AdditionalLightShadowSliceMatricesStructuredBuffer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::ComputeBuffer* m_AdditionalLightShadowSliceMatricesStructuredBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::ComputeBuffer*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private UnityEngine.Rendering.Universal.ShaderData m_Instance
    static ::UnityEngine::Rendering::Universal::ShaderData* _get_m_Instance();
    // Set static field: static private UnityEngine.Rendering.Universal.ShaderData m_Instance
    static void _set_m_Instance(::UnityEngine::Rendering::Universal::ShaderData* value);
    // Get instance field reference: private UnityEngine.ComputeBuffer m_LightDataBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::ComputeBuffer*& dyn_m_LightDataBuffer();
    // Get instance field reference: private UnityEngine.ComputeBuffer m_LightIndicesBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::ComputeBuffer*& dyn_m_LightIndicesBuffer();
    // Get instance field reference: private UnityEngine.ComputeBuffer m_AdditionalLightShadowParamsStructuredBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::ComputeBuffer*& dyn_m_AdditionalLightShadowParamsStructuredBuffer();
    // Get instance field reference: private UnityEngine.ComputeBuffer m_AdditionalLightShadowSliceMatricesStructuredBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::ComputeBuffer*& dyn_m_AdditionalLightShadowSliceMatricesStructuredBuffer();
    // private System.Void .ctor()
    // Offset: 0x52DC52C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ShaderData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::ShaderData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ShaderData*, creationType>()));
    }
    // static UnityEngine.Rendering.Universal.ShaderData get_instance()
    // Offset: 0x52DC534
    static ::UnityEngine::Rendering::Universal::ShaderData* get_instance();
    // public System.Void Dispose()
    // Offset: 0x52DC5BC
    void Dispose();
    // UnityEngine.ComputeBuffer GetLightDataBuffer(System.Int32 size)
    // Offset: 0x52DC61C
    ::UnityEngine::ComputeBuffer* GetLightDataBuffer(int size);
    // UnityEngine.ComputeBuffer GetLightIndicesBuffer(System.Int32 size)
    // Offset: 0x52DC678
    ::UnityEngine::ComputeBuffer* GetLightIndicesBuffer(int size);
    // UnityEngine.ComputeBuffer GetAdditionalLightShadowParamsStructuredBuffer(System.Int32 size)
    // Offset: 0x52DC6D4
    ::UnityEngine::ComputeBuffer* GetAdditionalLightShadowParamsStructuredBuffer(int size);
    // UnityEngine.ComputeBuffer GetAdditionalLightShadowSliceMatricesStructuredBuffer(System.Int32 size)
    // Offset: 0x52DC730
    ::UnityEngine::ComputeBuffer* GetAdditionalLightShadowSliceMatricesStructuredBuffer(int size);
    // private UnityEngine.ComputeBuffer GetOrUpdateBuffer(ref UnityEngine.ComputeBuffer buffer, System.Int32 size)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::UnityEngine::ComputeBuffer* GetOrUpdateBuffer(ByRef<::UnityEngine::ComputeBuffer*> buffer, int size) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::ShaderData::GetOrUpdateBuffer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOrUpdateBuffer", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(size)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::ComputeBuffer*, false>(this, ___generic__method, byref(buffer), size);
    }
    // private System.Void DisposeBuffer(ref UnityEngine.ComputeBuffer buffer)
    // Offset: 0x52DC5E8
    void DisposeBuffer(ByRef<::UnityEngine::ComputeBuffer*> buffer);
  }; // UnityEngine.Rendering.Universal.ShaderData
  #pragma pack(pop)
  static check_size<sizeof(ShaderData), 40 + sizeof(::UnityEngine::ComputeBuffer*)> __UnityEngine_Rendering_Universal_ShaderDataSizeCheck;
  static_assert(sizeof(ShaderData) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShaderData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShaderData::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ShaderData* (*)()>(&UnityEngine::Rendering::Universal::ShaderData::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShaderData*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShaderData::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ShaderData::*)()>(&UnityEngine::Rendering::Universal::ShaderData::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShaderData*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShaderData::GetLightDataBuffer
// Il2CppName: GetLightDataBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ComputeBuffer* (UnityEngine::Rendering::Universal::ShaderData::*)(int)>(&UnityEngine::Rendering::Universal::ShaderData::GetLightDataBuffer)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShaderData*), "GetLightDataBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShaderData::GetLightIndicesBuffer
// Il2CppName: GetLightIndicesBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ComputeBuffer* (UnityEngine::Rendering::Universal::ShaderData::*)(int)>(&UnityEngine::Rendering::Universal::ShaderData::GetLightIndicesBuffer)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShaderData*), "GetLightIndicesBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShaderData::GetAdditionalLightShadowParamsStructuredBuffer
// Il2CppName: GetAdditionalLightShadowParamsStructuredBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ComputeBuffer* (UnityEngine::Rendering::Universal::ShaderData::*)(int)>(&UnityEngine::Rendering::Universal::ShaderData::GetAdditionalLightShadowParamsStructuredBuffer)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShaderData*), "GetAdditionalLightShadowParamsStructuredBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShaderData::GetAdditionalLightShadowSliceMatricesStructuredBuffer
// Il2CppName: GetAdditionalLightShadowSliceMatricesStructuredBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ComputeBuffer* (UnityEngine::Rendering::Universal::ShaderData::*)(int)>(&UnityEngine::Rendering::Universal::ShaderData::GetAdditionalLightShadowSliceMatricesStructuredBuffer)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShaderData*), "GetAdditionalLightShadowSliceMatricesStructuredBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShaderData::GetOrUpdateBuffer
// Il2CppName: GetOrUpdateBuffer
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShaderData::DisposeBuffer
// Il2CppName: DisposeBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ShaderData::*)(ByRef<::UnityEngine::ComputeBuffer*>)>(&UnityEngine::Rendering::Universal::ShaderData::DisposeBuffer)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("UnityEngine", "ComputeBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShaderData*), "DisposeBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
