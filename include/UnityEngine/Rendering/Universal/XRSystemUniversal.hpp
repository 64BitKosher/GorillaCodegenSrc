// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: XRPassUniversal
  class XRPassUniversal;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: XRSystemUniversal
  class XRSystemUniversal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::XRSystemUniversal);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::XRSystemUniversal*, "UnityEngine.Rendering.Universal", "XRSystemUniversal");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.XRSystemUniversal
  // [TokenAttribute] Offset: FFFFFFFF
  class XRSystemUniversal : public ::Il2CppObject {
    public:
    // Get static field: static private UnityEngine.Matrix4x4[] s_projMatrix
    static ::ArrayW<::UnityEngine::Matrix4x4> _get_s_projMatrix();
    // Set static field: static private UnityEngine.Matrix4x4[] s_projMatrix
    static void _set_s_projMatrix(::ArrayW<::UnityEngine::Matrix4x4> value);
    // static System.Void BeginLateLatching(UnityEngine.Camera camera, UnityEngine.Rendering.Universal.XRPassUniversal xrPass)
    // Offset: 0x52F9EF4
    static void BeginLateLatching(::UnityEngine::Camera* camera, ::UnityEngine::Rendering::Universal::XRPassUniversal* xrPass);
    // static System.Void EndLateLatching(UnityEngine.Camera camera, UnityEngine.Rendering.Universal.XRPassUniversal xrPass)
    // Offset: 0x52F9FC4
    static void EndLateLatching(::UnityEngine::Camera* camera, ::UnityEngine::Rendering::Universal::XRPassUniversal* xrPass);
    // static System.Void UnmarkShaderProperties(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.Universal.XRPassUniversal xrPass)
    // Offset: 0x52FA080
    static void UnmarkShaderProperties(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::Universal::XRPassUniversal* xrPass);
    // static System.Void MarkShaderProperties(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.Universal.XRPassUniversal xrPass, System.Boolean renderIntoTexture)
    // Offset: 0x52FA0FC
    static void MarkShaderProperties(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::Universal::XRPassUniversal* xrPass, bool renderIntoTexture);
    // static private System.Void .cctor()
    // Offset: 0x52FA2E8
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.XRSystemUniversal
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::XRSystemUniversal::BeginLateLatching
// Il2CppName: BeginLateLatching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ::UnityEngine::Rendering::Universal::XRPassUniversal*)>(&UnityEngine::Rendering::Universal::XRSystemUniversal::BeginLateLatching)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* xrPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "XRPassUniversal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::XRSystemUniversal*), "BeginLateLatching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, xrPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::XRSystemUniversal::EndLateLatching
// Il2CppName: EndLateLatching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ::UnityEngine::Rendering::Universal::XRPassUniversal*)>(&UnityEngine::Rendering::Universal::XRSystemUniversal::EndLateLatching)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* xrPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "XRPassUniversal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::XRSystemUniversal*), "EndLateLatching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, xrPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::XRSystemUniversal::UnmarkShaderProperties
// Il2CppName: UnmarkShaderProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::Universal::XRPassUniversal*)>(&UnityEngine::Rendering::Universal::XRSystemUniversal::UnmarkShaderProperties)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* xrPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "XRPassUniversal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::XRSystemUniversal*), "UnmarkShaderProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, xrPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::XRSystemUniversal::MarkShaderProperties
// Il2CppName: MarkShaderProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::Universal::XRPassUniversal*, bool)>(&UnityEngine::Rendering::Universal::XRSystemUniversal::MarkShaderProperties)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* xrPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "XRPassUniversal")->byval_arg;
    static auto* renderIntoTexture = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::XRSystemUniversal*), "MarkShaderProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, xrPass, renderIntoTexture});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::XRSystemUniversal::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::XRSystemUniversal::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::XRSystemUniversal*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
