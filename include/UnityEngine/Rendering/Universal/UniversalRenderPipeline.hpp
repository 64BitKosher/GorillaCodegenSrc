// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.RenderPipeline
#include "UnityEngine/Rendering/RenderPipeline.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.Lightmapping
#include "UnityEngine/Experimental/GlobalIllumination/Lightmapping.hpp"
// Including type: UnityEngine.Rendering.VisibleLight
#include "UnityEngine/Rendering/VisibleLight.hpp"
// Including type: UnityEngine.Rendering.Universal.TemporalAA
#include "UnityEngine/Rendering/Universal/TemporalAA.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: UniversalRenderPipelineGlobalSettings
  class UniversalRenderPipelineGlobalSettings;
  // Forward declaring type: UniversalRenderPipelineAsset
  class UniversalRenderPipelineAsset;
  // Forward declaring type: CameraData
  struct CameraData;
  // Forward declaring type: UniversalAdditionalCameraData
  class UniversalAdditionalCameraData;
  // Forward declaring type: RenderingData
  struct RenderingData;
  // Forward declaring type: ShadowData
  struct ShadowData;
  // Forward declaring type: PostProcessingData
  struct PostProcessingData;
  // Forward declaring type: LightData
  struct LightData;
  // Forward declaring type: ImageUpscalingFilter
  struct ImageUpscalingFilter;
  // Forward declaring type: UpscalingFilterSelection
  struct UpscalingFilterSelection;
  // Forward declaring type: Tonemapping
  class Tonemapping;
  // Forward declaring type: HDRColorBufferPrecision
  struct HDRColorBufferPrecision;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: DebugDisplaySettingsUI
  class DebugDisplaySettingsUI;
  // Forward declaring type: ScriptableCullingParameters
  struct ScriptableCullingParameters;
  // Forward declaring type: CullingResults
  struct CullingResults;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: PerObjectData
  struct PerObjectData;
  // Forward declaring type: RenderPipelineGlobalSettings
  class RenderPipelineGlobalSettings;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Comparison`1<T>
  template<typename T>
  class Comparison_1;
  // Forward declaring type: String
  class String;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Skipping declaration: Vector2 because it is already included!
  // Forward declaring type: RenderTextureDescriptor
  struct RenderTextureDescriptor;
  // Skipping declaration: LightType because it is already included!
  // Skipping declaration: Matrix4x4 because it is already included!
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraph
  class RenderGraph;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: XRPass
  class XRPass;
  // Skipping declaration: GraphicsFormat because it is already included!
}
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: NativeArray`1<T>
  template<typename T>
  struct NativeArray_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: UniversalRenderPipeline
  class UniversalRenderPipeline;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::UniversalRenderPipeline);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UniversalRenderPipeline*, "UnityEngine.Rendering.Universal", "UniversalRenderPipeline");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.UniversalRenderPipeline
  // [TokenAttribute] Offset: FFFFFFFF
  class UniversalRenderPipeline : public ::UnityEngine::Rendering::RenderPipeline {
    public:
    // Writing base type padding for base size: 0x11 to desired offset: 0x18
    char ___base_padding[0x7] = {};
    // Nested type: ::UnityEngine::Rendering::Universal::UniversalRenderPipeline::Profiling
    class Profiling;
    // Nested type: ::UnityEngine::Rendering::Universal::UniversalRenderPipeline::SingleCameraRequest
    class SingleCameraRequest;
    // Nested type: ::UnityEngine::Rendering::Universal::UniversalRenderPipeline::$$c
    class $$c;
    public:
    // private readonly UnityEngine.Rendering.DebugDisplaySettingsUI m_DebugDisplaySettingsUI
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Rendering::DebugDisplaySettingsUI* m_DebugDisplaySettingsUI;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::DebugDisplaySettingsUI*) == 0x8);
    // private UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings m_GlobalSettings
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings* m_GlobalSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*) == 0x8);
    // private readonly UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset pipelineAsset
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset* pipelineAsset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*) == 0x8);
    // private System.Comparison`1<UnityEngine.Camera> cameraComparison
    // Size: 0x8
    // Offset: 0x30
    ::System::Comparison_1<::UnityEngine::Camera*>* cameraComparison;
    // Field size check
    static_assert(sizeof(::System::Comparison_1<::UnityEngine::Camera*>*) == 0x8);
    public:
    // Deleting conversion operator: operator bool
    constexpr operator bool() const noexcept = delete;
    // static field const value: static public System.String k_ShaderTagName
    static constexpr const char* k_ShaderTagName = "UniversalPipeline";
    // Get static field: static public System.String k_ShaderTagName
    static ::StringW _get_k_ShaderTagName();
    // Set static field: static public System.String k_ShaderTagName
    static void _set_k_ShaderTagName(::StringW value);
    // static field const value: static System.Int32 k_MaxVisibleAdditionalLightsMobileShaderLevelLessThan45
    static constexpr const int k_MaxVisibleAdditionalLightsMobileShaderLevelLessThan45 = 16;
    // Get static field: static System.Int32 k_MaxVisibleAdditionalLightsMobileShaderLevelLessThan45
    static int _get_k_MaxVisibleAdditionalLightsMobileShaderLevelLessThan45();
    // Set static field: static System.Int32 k_MaxVisibleAdditionalLightsMobileShaderLevelLessThan45
    static void _set_k_MaxVisibleAdditionalLightsMobileShaderLevelLessThan45(int value);
    // static field const value: static System.Int32 k_MaxVisibleAdditionalLightsMobile
    static constexpr const int k_MaxVisibleAdditionalLightsMobile = 32;
    // Get static field: static System.Int32 k_MaxVisibleAdditionalLightsMobile
    static int _get_k_MaxVisibleAdditionalLightsMobile();
    // Set static field: static System.Int32 k_MaxVisibleAdditionalLightsMobile
    static void _set_k_MaxVisibleAdditionalLightsMobile(int value);
    // static field const value: static System.Int32 k_MaxVisibleAdditionalLightsNonMobile
    static constexpr const int k_MaxVisibleAdditionalLightsNonMobile = 256;
    // Get static field: static System.Int32 k_MaxVisibleAdditionalLightsNonMobile
    static int _get_k_MaxVisibleAdditionalLightsNonMobile();
    // Set static field: static System.Int32 k_MaxVisibleAdditionalLightsNonMobile
    static void _set_k_MaxVisibleAdditionalLightsNonMobile(int value);
    // static field const value: static System.Int32 k_DefaultRenderingLayerMask
    static constexpr const int k_DefaultRenderingLayerMask = 1;
    // Get static field: static System.Int32 k_DefaultRenderingLayerMask
    static int _get_k_DefaultRenderingLayerMask();
    // Set static field: static System.Int32 k_DefaultRenderingLayerMask
    static void _set_k_DefaultRenderingLayerMask(int value);
    // Get static field: static System.Boolean cameraStackRequiresDepthForPostprocessing
    static bool _get_cameraStackRequiresDepthForPostprocessing();
    // Set static field: static System.Boolean cameraStackRequiresDepthForPostprocessing
    static void _set_cameraStackRequiresDepthForPostprocessing(bool value);
    // Get static field: static UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph s_RenderGraph
    static ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* _get_s_RenderGraph();
    // Set static field: static UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph s_RenderGraph
    static void _set_s_RenderGraph(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* value);
    // Get static field: static private System.Boolean useRenderGraph
    static bool _get_useRenderGraph();
    // Set static field: static private System.Boolean useRenderGraph
    static void _set_useRenderGraph(bool value);
    // Get static field: static private UnityEngine.Vector4 k_DefaultLightPosition
    static ::UnityEngine::Vector4 _get_k_DefaultLightPosition();
    // Set static field: static private UnityEngine.Vector4 k_DefaultLightPosition
    static void _set_k_DefaultLightPosition(::UnityEngine::Vector4 value);
    // Get static field: static private UnityEngine.Vector4 k_DefaultLightColor
    static ::UnityEngine::Vector4 _get_k_DefaultLightColor();
    // Set static field: static private UnityEngine.Vector4 k_DefaultLightColor
    static void _set_k_DefaultLightColor(::UnityEngine::Vector4 value);
    // Get static field: static private UnityEngine.Vector4 k_DefaultLightAttenuation
    static ::UnityEngine::Vector4 _get_k_DefaultLightAttenuation();
    // Set static field: static private UnityEngine.Vector4 k_DefaultLightAttenuation
    static void _set_k_DefaultLightAttenuation(::UnityEngine::Vector4 value);
    // Get static field: static private UnityEngine.Vector4 k_DefaultLightSpotDirection
    static ::UnityEngine::Vector4 _get_k_DefaultLightSpotDirection();
    // Set static field: static private UnityEngine.Vector4 k_DefaultLightSpotDirection
    static void _set_k_DefaultLightSpotDirection(::UnityEngine::Vector4 value);
    // Get static field: static private UnityEngine.Vector4 k_DefaultLightsProbeChannel
    static ::UnityEngine::Vector4 _get_k_DefaultLightsProbeChannel();
    // Set static field: static private UnityEngine.Vector4 k_DefaultLightsProbeChannel
    static void _set_k_DefaultLightsProbeChannel(::UnityEngine::Vector4 value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Vector4> m_ShadowBiasData
    static ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* _get_m_ShadowBiasData();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Vector4> m_ShadowBiasData
    static void _set_m_ShadowBiasData(::System::Collections::Generic::List_1<::UnityEngine::Vector4>* value);
    // Get static field: static private System.Collections.Generic.List`1<System.Int32> m_ShadowResolutionData
    static ::System::Collections::Generic::List_1<int>* _get_m_ShadowResolutionData();
    // Set static field: static private System.Collections.Generic.List`1<System.Int32> m_ShadowResolutionData
    static void _set_m_ShadowResolutionData(::System::Collections::Generic::List_1<int>* value);
    // Get static field: static private UnityEngine.Experimental.GlobalIllumination.Lightmapping/RequestLightsDelegate lightsDelegate
    static ::UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate* _get_lightsDelegate();
    // Set static field: static private UnityEngine.Experimental.GlobalIllumination.Lightmapping/RequestLightsDelegate lightsDelegate
    static void _set_lightsDelegate(::UnityEngine::Experimental::GlobalIllumination::Lightmapping::RequestLightsDelegate* value);
    // Get instance field reference: private readonly UnityEngine.Rendering.DebugDisplaySettingsUI m_DebugDisplaySettingsUI
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::DebugDisplaySettingsUI*& dyn_m_DebugDisplaySettingsUI();
    // Get instance field reference: private UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings m_GlobalSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*& dyn_m_GlobalSettings();
    // Get instance field reference: private readonly UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset pipelineAsset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*& dyn_pipelineAsset();
    // Get instance field reference: private System.Comparison`1<UnityEngine.Camera> cameraComparison
    [[deprecated("Use field access instead!")]] ::System::Comparison_1<::UnityEngine::Camera*>*& dyn_cameraComparison();
    // static public System.Single get_maxShadowBias()
    // Offset: 0x52EEE74
    static float get_maxShadowBias();
    // static public System.Single get_minRenderScale()
    // Offset: 0x52EEE7C
    static float get_minRenderScale();
    // static public System.Single get_maxRenderScale()
    // Offset: 0x52EEE88
    static float get_maxRenderScale();
    // static public System.Int32 get_maxNumIterationsEnclosingSphere()
    // Offset: 0x52EEE90
    static int get_maxNumIterationsEnclosingSphere();
    // static public System.Int32 get_maxPerObjectLights()
    // Offset: 0x52EEE98
    static int get_maxPerObjectLights();
    // static public System.Int32 get_maxVisibleAdditionalLights()
    // Offset: 0x52ECD08
    static int get_maxVisibleAdditionalLights();
    // static System.Int32 get_lightsPerTile()
    // Offset: 0x52EEEBC
    static int get_lightsPerTile();
    // static System.Int32 get_maxZBinWords()
    // Offset: 0x52EEF20
    static int get_maxZBinWords();
    // static System.Int32 get_maxTileWords()
    // Offset: 0x52EEF28
    static int get_maxTileWords();
    // static System.Int32 get_maxVisibleReflectionProbes()
    // Offset: 0x52EEF88
    static int get_maxVisibleReflectionProbes();
    // public System.Void .ctor(UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset asset)
    // Offset: 0x52EF030
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UniversalRenderPipeline* New_ctor(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset* asset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UniversalRenderPipeline::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UniversalRenderPipeline*, creationType>(asset)));
    }
    // private System.Void DisposeAdditionalCameraData()
    // Offset: 0x52EF7B8
    void DisposeAdditionalCameraData();
    // static public System.Void RenderSingleCamera(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera camera)
    // Offset: 0x52F2038
    static void RenderSingleCamera(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Camera* camera);
    // static System.Void RenderSingleCameraInternal(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera camera)
    // Offset: 0x52F1E94
    static void RenderSingleCameraInternal(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Camera* camera);
    // static private System.Boolean TryGetCullingParameters(UnityEngine.Rendering.Universal.CameraData cameraData, out UnityEngine.Rendering.ScriptableCullingParameters cullingParams)
    // Offset: 0x52F3528
    static bool TryGetCullingParameters(::UnityEngine::Rendering::Universal::CameraData cameraData, ByRef<::UnityEngine::Rendering::ScriptableCullingParameters> cullingParams);
    // static private System.Void RenderSingleCamera(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.CameraData cameraData, System.Boolean anyPostProcessingEnabled)
    // Offset: 0x52F2C50
    static void RenderSingleCamera(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, bool anyPostProcessingEnabled);
    // static private System.Void RenderCameraStack(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera baseCamera)
    // Offset: 0x52F067C
    static void RenderCameraStack(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Camera* baseCamera);
    // static private System.Void UpdateCameraData(ref UnityEngine.Rendering.Universal.CameraData baseCameraData, in UnityEngine.Experimental.Rendering.XRPass xr)
    // Offset: 0x52F4524
    static void UpdateCameraData(ByRef<::UnityEngine::Rendering::Universal::CameraData> baseCameraData, ByRef<::UnityEngine::Experimental::Rendering::XRPass*> xr);
    // static private System.Void UpdateVolumeFramework(UnityEngine.Camera camera, UnityEngine.Rendering.Universal.UniversalAdditionalCameraData additionalCameraData)
    // Offset: 0x52F1BC4
    static void UpdateVolumeFramework(::UnityEngine::Camera* camera, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData* additionalCameraData);
    // static private System.Boolean CheckPostProcessForDepth(ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52F49D8
    static bool CheckPostProcessForDepth(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // static private System.Boolean CheckPostProcessForDepth()
    // Offset: 0x52F42B4
    static bool CheckPostProcessForDepth();
    // static private System.Void SetSupportedRenderingFeatures(UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset pipelineAsset)
    // Offset: 0x52EF534
    static void SetSupportedRenderingFeatures(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset* pipelineAsset);
    // static private System.Void InitializeCameraData(UnityEngine.Camera camera, UnityEngine.Rendering.Universal.UniversalAdditionalCameraData additionalCameraData, System.Boolean resolveFinalTarget, out UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52F209C
    static void InitializeCameraData(::UnityEngine::Camera* camera, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData* additionalCameraData, bool resolveFinalTarget, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // static private System.Void InitializeStackedCameraData(UnityEngine.Camera baseCamera, UnityEngine.Rendering.Universal.UniversalAdditionalCameraData baseAdditionalCameraData, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52F4A68
    static void InitializeStackedCameraData(::UnityEngine::Camera* baseCamera, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData* baseAdditionalCameraData, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // static private System.Void InitializeAdditionalCameraData(UnityEngine.Camera camera, UnityEngine.Rendering.Universal.UniversalAdditionalCameraData additionalCameraData, System.Boolean resolveFinalTarget, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52F2500
    static void InitializeAdditionalCameraData(::UnityEngine::Camera* camera, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData* additionalCameraData, bool resolveFinalTarget, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // static private System.Void InitializeRenderingData(UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset settings, ref UnityEngine.Rendering.Universal.CameraData cameraData, ref UnityEngine.Rendering.CullingResults cullResults, System.Boolean anyPostProcessingEnabled, UnityEngine.Rendering.CommandBuffer cmd, out UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52F3C4C
    static void InitializeRenderingData(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset* settings, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, ByRef<::UnityEngine::Rendering::CullingResults> cullResults, bool anyPostProcessingEnabled, ::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // static private System.Void InitializeShadowData(UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset settings, Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleLight> visibleLights, System.Boolean mainLightCastShadows, System.Boolean additionalLightsCastShadows, out UnityEngine.Rendering.Universal.ShadowData shadowData)
    // Offset: 0x52F5BF4
    static void InitializeShadowData(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset* settings, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight> visibleLights, bool mainLightCastShadows, bool additionalLightsCastShadows, ByRef<::UnityEngine::Rendering::Universal::ShadowData> shadowData);
    // static private System.Void InitializePostProcessingData(UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset settings, out UnityEngine.Rendering.Universal.PostProcessingData postProcessingData)
    // Offset: 0x52F6518
    static void InitializePostProcessingData(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset* settings, ByRef<::UnityEngine::Rendering::Universal::PostProcessingData> postProcessingData);
    // static private System.Void InitializeLightData(UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset settings, Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleLight> visibleLights, System.Int32 mainLightIndex, out UnityEngine.Rendering.Universal.LightData lightData)
    // Offset: 0x52F5988
    static void InitializeLightData(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset* settings, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight> visibleLights, int mainLightIndex, ByRef<::UnityEngine::Rendering::Universal::LightData> lightData);
    // static private System.Void ApplyTaaRenderingDebugOverrides(ref UnityEngine.Rendering.Universal.TemporalAA/Settings taaSettings)
    // Offset: 0x52F5630
    static void ApplyTaaRenderingDebugOverrides(ByRef<::UnityEngine::Rendering::Universal::TemporalAA::Settings> taaSettings);
    // static private System.Void UpdateTemporalAAData(ref UnityEngine.Rendering.Universal.CameraData cameraData, UnityEngine.Rendering.Universal.UniversalAdditionalCameraData additionalCameraData)
    // Offset: 0x52F5588
    static void UpdateTemporalAAData(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData* additionalCameraData);
    // static private System.Void UpdateTemporalAATargets(ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52F3BB0
    static void UpdateTemporalAATargets(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // static private System.Void UpdateCameraStereoMatrices(UnityEngine.Camera camera, UnityEngine.Experimental.Rendering.XRPass xr)
    // Offset: 0x52F4380
    static void UpdateCameraStereoMatrices(::UnityEngine::Camera* camera, ::UnityEngine::Experimental::Rendering::XRPass* xr);
    // static private UnityEngine.Rendering.PerObjectData GetPerObjectLightFlags(System.Int32 additionalLightsCount, System.Boolean isForwardPlus)
    // Offset: 0x52F65A4
    static ::UnityEngine::Rendering::PerObjectData GetPerObjectLightFlags(int additionalLightsCount, bool isForwardPlus);
    // static private System.Int32 GetMainLightIndex(UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset settings, Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleLight> visibleLights)
    // Offset: 0x52F571C
    static int GetMainLightIndex(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset* settings, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight> visibleLights);
    // static private System.Void SetupPerFrameShaderConstants()
    // Offset: 0x52F01E8
    static void SetupPerFrameShaderConstants();
    // static private System.Void SetupPerCameraShaderConstants(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52F37E8
    static void SetupPerCameraShaderConstants(::UnityEngine::Rendering::CommandBuffer* cmd);
    // static private System.Void CheckAndApplyDebugSettings(ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52F66F4
    static void CheckAndApplyDebugSettings(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // static private UnityEngine.Rendering.Universal.ImageUpscalingFilter ResolveUpscalingFilterSelection(UnityEngine.Vector2 imageSize, System.Single renderScale, UnityEngine.Rendering.Universal.UpscalingFilterSelection selection)
    // Offset: 0x52F5458
    static ::UnityEngine::Rendering::Universal::ImageUpscalingFilter ResolveUpscalingFilterSelection(::UnityEngine::Vector2 imageSize, float renderScale, ::UnityEngine::Rendering::Universal::UpscalingFilterSelection selection);
    // static System.Boolean HDROutputIsActive()
    // Offset: 0x52F00D8
    static bool HDROutputIsActive();
    // static private System.Void SetHDRState(System.Collections.Generic.List`1<UnityEngine.Camera> cameras)
    // Offset: 0x52EFF94
    static void SetHDRState(::System::Collections::Generic::List_1<::UnityEngine::Camera*>* cameras);
    // static System.Void GetHDROutputLuminanceParameters(UnityEngine.Rendering.Universal.Tonemapping tonemapping, out UnityEngine.Vector4 hdrOutputParameters)
    // Offset: 0x52F6898
    static void GetHDROutputLuminanceParameters(::UnityEngine::Rendering::Universal::Tonemapping* tonemapping, ByRef<::UnityEngine::Vector4> hdrOutputParameters);
    // static System.Void GetHDROutputGradingParameters(UnityEngine.Rendering.Universal.Tonemapping tonemapping, out UnityEngine.Vector4 hdrOutputParameters)
    // Offset: 0x52F69F0
    static void GetHDROutputGradingParameters(::UnityEngine::Rendering::Universal::Tonemapping* tonemapping, ByRef<::UnityEngine::Vector4> hdrOutputParameters);
    // static public System.Boolean IsGameCamera(UnityEngine.Camera camera)
    // Offset: 0x52F05A0
    static bool IsGameCamera(::UnityEngine::Camera* camera);
    // static public System.Boolean IsStereoEnabled(UnityEngine.Camera camera)
    // Offset: 0x52F6AB8
    static bool IsStereoEnabled(::UnityEngine::Camera* camera);
    // static public UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset get_asset()
    // Offset: 0x52E7798
    static ::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset* get_asset();
    // private System.Void SortCameras(System.Collections.Generic.List`1<UnityEngine.Camera> cameras)
    // Offset: 0x52F0524
    void SortCameras(::System::Collections::Generic::List_1<::UnityEngine::Camera*>* cameras);
    // static UnityEngine.Experimental.Rendering.GraphicsFormat MakeRenderTextureGraphicsFormat(System.Boolean isHdrEnabled, UnityEngine.Rendering.Universal.HDRColorBufferPrecision requestHDRColorBufferPrecision, System.Boolean needsAlpha)
    // Offset: 0x52E9224
    static ::UnityEngine::Experimental::Rendering::GraphicsFormat MakeRenderTextureGraphicsFormat(bool isHdrEnabled, ::UnityEngine::Rendering::Universal::HDRColorBufferPrecision requestHDRColorBufferPrecision, bool needsAlpha);
    // static UnityEngine.Experimental.Rendering.GraphicsFormat MakeUnormRenderTextureGraphicsFormat()
    // Offset: 0x52F6BB8
    static ::UnityEngine::Experimental::Rendering::GraphicsFormat MakeUnormRenderTextureGraphicsFormat();
    // static private UnityEngine.RenderTextureDescriptor CreateRenderTextureDescriptor(UnityEngine.Camera camera, System.Single renderScale, System.Boolean isHdrEnabled, UnityEngine.Rendering.Universal.HDRColorBufferPrecision requestHDRColorBufferPrecision, System.Int32 msaaSamples, System.Boolean needsAlpha, System.Boolean requiresOpaqueTexture)
    // Offset: 0x52F5124
    static ::UnityEngine::RenderTextureDescriptor CreateRenderTextureDescriptor(::UnityEngine::Camera* camera, float renderScale, bool isHdrEnabled, ::UnityEngine::Rendering::Universal::HDRColorBufferPrecision requestHDRColorBufferPrecision, int msaaSamples, bool needsAlpha, bool requiresOpaqueTexture);
    // static public System.Void GetLightAttenuationAndSpotDirection(UnityEngine.LightType lightType, System.Single lightRange, UnityEngine.Matrix4x4 lightLocalToWorldMatrix, System.Single spotAngle, System.Nullable`1<System.Single> innerSpotAngle, out UnityEngine.Vector4 lightAttenuation, out UnityEngine.Vector4 lightSpotDir)
    // Offset: 0x52F6C24
    static void GetLightAttenuationAndSpotDirection(::UnityEngine::LightType lightType, float lightRange, ::UnityEngine::Matrix4x4 lightLocalToWorldMatrix, float spotAngle, ::System::Nullable_1<float> innerSpotAngle, ByRef<::UnityEngine::Vector4> lightAttenuation, ByRef<::UnityEngine::Vector4> lightSpotDir);
    // static System.Void GetPunctualLightDistanceAttenuation(System.Single lightRange, ref UnityEngine.Vector4 lightAttenuation)
    // Offset: 0x52F6D70
    static void GetPunctualLightDistanceAttenuation(float lightRange, ByRef<::UnityEngine::Vector4> lightAttenuation);
    // static System.Void GetSpotAngleAttenuation(System.Single spotAngle, System.Nullable`1<System.Single> innerSpotAngle, ref UnityEngine.Vector4 lightAttenuation)
    // Offset: 0x52F6DDC
    static void GetSpotAngleAttenuation(float spotAngle, ::System::Nullable_1<float> innerSpotAngle, ByRef<::UnityEngine::Vector4> lightAttenuation);
    // static System.Void GetSpotDirection(ref UnityEngine.Matrix4x4 lightLocalToWorldMatrix, out UnityEngine.Vector4 lightSpotDir)
    // Offset: 0x52F6DA8
    static void GetSpotDirection(ByRef<::UnityEngine::Matrix4x4> lightLocalToWorldMatrix, ByRef<::UnityEngine::Vector4> lightSpotDir);
    // static public System.Void InitializeLightConstants_Common(Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleLight> lights, System.Int32 lightIndex, out UnityEngine.Vector4 lightPos, out UnityEngine.Vector4 lightColor, out UnityEngine.Vector4 lightAttenuation, out UnityEngine.Vector4 lightSpotDir, out UnityEngine.Vector4 lightOcclusionProbeChannel)
    // Offset: 0x52F6EDC
    static void InitializeLightConstants_Common(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight> lights, int lightIndex, ByRef<::UnityEngine::Vector4> lightPos, ByRef<::UnityEngine::Vector4> lightColor, ByRef<::UnityEngine::Vector4> lightAttenuation, ByRef<::UnityEngine::Vector4> lightSpotDir, ByRef<::UnityEngine::Vector4> lightOcclusionProbeChannel);
    // static private System.Void RecordRenderGraph(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52F72AC
    static void RecordRenderGraph(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // static private System.Void RecordAndExecuteRenderGraph(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52F4124
    static void RecordAndExecuteRenderGraph(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // static private System.Void .cctor()
    // Offset: 0x52F72D8
    static void _cctor();
    // public override UnityEngine.Rendering.RenderPipelineGlobalSettings get_defaultSettings()
    // Offset: 0x52EF010
    // Implemented from: UnityEngine.Rendering.RenderPipeline
    // Base method: UnityEngine.Rendering.RenderPipelineGlobalSettings RenderPipeline::get_defaultSettings()
    ::UnityEngine::Rendering::RenderPipelineGlobalSettings* get_defaultSettings();
    // public override System.String ToString()
    // Offset: 0x52EF018
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x52EF5A0
    // Implemented from: UnityEngine.Rendering.RenderPipeline
    // Base method: System.Void RenderPipeline::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // protected override System.Void Render(UnityEngine.Rendering.ScriptableRenderContext renderContext, UnityEngine.Camera[] cameras)
    // Offset: 0x52EF890
    // Implemented from: UnityEngine.Rendering.RenderPipeline
    // Base method: System.Void RenderPipeline::Render(UnityEngine.Rendering.ScriptableRenderContext renderContext, UnityEngine.Camera[] cameras)
    void Render(::UnityEngine::Rendering::ScriptableRenderContext renderContext, ::ArrayW<::UnityEngine::Camera*> cameras);
    // protected override System.Void Render(UnityEngine.Rendering.ScriptableRenderContext renderContext, System.Collections.Generic.List`1<UnityEngine.Camera> cameras)
    // Offset: 0x52EF928
    // Implemented from: UnityEngine.Rendering.RenderPipeline
    // Base method: System.Void RenderPipeline::Render(UnityEngine.Rendering.ScriptableRenderContext renderContext, System.Collections.Generic.List`1<UnityEngine.Camera> cameras)
    void Render(::UnityEngine::Rendering::ScriptableRenderContext renderContext, ::System::Collections::Generic::List_1<::UnityEngine::Camera*>* cameras);
    // protected override System.Boolean IsRenderRequestSupported(UnityEngine.Camera camera, RequestData data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Rendering.RenderPipeline
    // Base method: System.Boolean RenderPipeline::IsRenderRequestSupported(UnityEngine.Camera camera, RequestData data)
    template<class RequestData>
    bool IsRenderRequestSupported(::UnityEngine::Camera* camera, RequestData data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UniversalRenderPipeline::IsRenderRequestSupported");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::RenderPipeline*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<RequestData>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, camera, data);
    }
    // protected override System.Void ProcessRenderRequests(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera camera, RequestData renderRequest)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Rendering.RenderPipeline
    // Base method: System.Void RenderPipeline::ProcessRenderRequests(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera camera, RequestData renderRequest)
    template<class RequestData>
    void ProcessRenderRequests(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Camera* camera, RequestData renderRequest) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UniversalRenderPipeline::ProcessRenderRequests");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::RenderPipeline*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<RequestData>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, context, camera, renderRequest);
    }
  }; // UnityEngine.Rendering.Universal.UniversalRenderPipeline
  #pragma pack(pop)
  static check_size<sizeof(UniversalRenderPipeline), 48 + sizeof(::System::Comparison_1<::UnityEngine::Camera*>*)> __UnityEngine_Rendering_Universal_UniversalRenderPipelineSizeCheck;
  static_assert(sizeof(UniversalRenderPipeline) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxShadowBias
// Il2CppName: get_maxShadowBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxShadowBias)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "get_maxShadowBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_minRenderScale
// Il2CppName: get_minRenderScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_minRenderScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "get_minRenderScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxRenderScale
// Il2CppName: get_maxRenderScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxRenderScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "get_maxRenderScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxNumIterationsEnclosingSphere
// Il2CppName: get_maxNumIterationsEnclosingSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxNumIterationsEnclosingSphere)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "get_maxNumIterationsEnclosingSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxPerObjectLights
// Il2CppName: get_maxPerObjectLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxPerObjectLights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "get_maxPerObjectLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxVisibleAdditionalLights
// Il2CppName: get_maxVisibleAdditionalLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxVisibleAdditionalLights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "get_maxVisibleAdditionalLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_lightsPerTile
// Il2CppName: get_lightsPerTile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_lightsPerTile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "get_lightsPerTile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxZBinWords
// Il2CppName: get_maxZBinWords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxZBinWords)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "get_maxZBinWords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxTileWords
// Il2CppName: get_maxTileWords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxTileWords)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "get_maxTileWords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxVisibleReflectionProbes
// Il2CppName: get_maxVisibleReflectionProbes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_maxVisibleReflectionProbes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "get_maxVisibleReflectionProbes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::DisposeAdditionalCameraData
// Il2CppName: DisposeAdditionalCameraData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipeline::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::DisposeAdditionalCameraData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "DisposeAdditionalCameraData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::RenderSingleCamera
// Il2CppName: RenderSingleCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Camera*)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::RenderSingleCamera)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "RenderSingleCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::RenderSingleCameraInternal
// Il2CppName: RenderSingleCameraInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Camera*)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::RenderSingleCameraInternal)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "RenderSingleCameraInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::TryGetCullingParameters
// Il2CppName: TryGetCullingParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::Universal::CameraData, ByRef<::UnityEngine::Rendering::ScriptableCullingParameters>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::TryGetCullingParameters)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->byval_arg;
    static auto* cullingParams = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableCullingParameters")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "TryGetCullingParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData, cullingParams});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::RenderSingleCamera
// Il2CppName: RenderSingleCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::CameraData>, bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::RenderSingleCamera)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* anyPostProcessingEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "RenderSingleCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, cameraData, anyPostProcessingEnabled});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::RenderCameraStack
// Il2CppName: RenderCameraStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Camera*)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::RenderCameraStack)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* baseCamera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "RenderCameraStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, baseCamera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::UpdateCameraData
// Il2CppName: UpdateCameraData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>, ByRef<::UnityEngine::Experimental::Rendering::XRPass*>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::UpdateCameraData)> {
  static const MethodInfo* get() {
    static auto* baseCameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* xr = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "XRPass")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "UpdateCameraData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseCameraData, xr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::UpdateVolumeFramework
// Il2CppName: UpdateVolumeFramework
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::UpdateVolumeFramework)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* additionalCameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalAdditionalCameraData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "UpdateVolumeFramework", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, additionalCameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::CheckPostProcessForDepth
// Il2CppName: CheckPostProcessForDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::CheckPostProcessForDepth)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "CheckPostProcessForDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::CheckPostProcessForDepth
// Il2CppName: CheckPostProcessForDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::CheckPostProcessForDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "CheckPostProcessForDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::SetSupportedRenderingFeatures
// Il2CppName: SetSupportedRenderingFeatures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::SetSupportedRenderingFeatures)> {
  static const MethodInfo* get() {
    static auto* pipelineAsset = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalRenderPipelineAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "SetSupportedRenderingFeatures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pipelineAsset});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializeCameraData
// Il2CppName: InitializeCameraData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*, bool, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializeCameraData)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* additionalCameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalAdditionalCameraData")->byval_arg;
    static auto* resolveFinalTarget = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "InitializeCameraData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, additionalCameraData, resolveFinalTarget, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializeStackedCameraData
// Il2CppName: InitializeStackedCameraData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializeStackedCameraData)> {
  static const MethodInfo* get() {
    static auto* baseCamera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* baseAdditionalCameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalAdditionalCameraData")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "InitializeStackedCameraData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseCamera, baseAdditionalCameraData, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializeAdditionalCameraData
// Il2CppName: InitializeAdditionalCameraData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*, bool, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializeAdditionalCameraData)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* additionalCameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalAdditionalCameraData")->byval_arg;
    static auto* resolveFinalTarget = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "InitializeAdditionalCameraData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, additionalCameraData, resolveFinalTarget, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializeRenderingData
// Il2CppName: InitializeRenderingData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*, ByRef<::UnityEngine::Rendering::Universal::CameraData>, ByRef<::UnityEngine::Rendering::CullingResults>, bool, ::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializeRenderingData)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalRenderPipelineAsset")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* cullResults = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CullingResults")->this_arg;
    static auto* anyPostProcessingEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "InitializeRenderingData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings, cameraData, cullResults, anyPostProcessingEnabled, cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializeShadowData
// Il2CppName: InitializeShadowData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight>, bool, bool, ByRef<::UnityEngine::Rendering::Universal::ShadowData>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializeShadowData)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalRenderPipelineAsset")->byval_arg;
    static auto* visibleLights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VisibleLight")})->byval_arg;
    static auto* mainLightCastShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* additionalLightsCastShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* shadowData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ShadowData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "InitializeShadowData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings, visibleLights, mainLightCastShadows, additionalLightsCastShadows, shadowData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializePostProcessingData
// Il2CppName: InitializePostProcessingData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*, ByRef<::UnityEngine::Rendering::Universal::PostProcessingData>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializePostProcessingData)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalRenderPipelineAsset")->byval_arg;
    static auto* postProcessingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PostProcessingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "InitializePostProcessingData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings, postProcessingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializeLightData
// Il2CppName: InitializeLightData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight>, int, ByRef<::UnityEngine::Rendering::Universal::LightData>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializeLightData)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalRenderPipelineAsset")->byval_arg;
    static auto* visibleLights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VisibleLight")})->byval_arg;
    static auto* mainLightIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lightData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "InitializeLightData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings, visibleLights, mainLightIndex, lightData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::ApplyTaaRenderingDebugOverrides
// Il2CppName: ApplyTaaRenderingDebugOverrides
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Rendering::Universal::TemporalAA::Settings>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::ApplyTaaRenderingDebugOverrides)> {
  static const MethodInfo* get() {
    static auto* taaSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TemporalAA/Settings")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "ApplyTaaRenderingDebugOverrides", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{taaSettings});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::UpdateTemporalAAData
// Il2CppName: UpdateTemporalAAData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>, ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::UpdateTemporalAAData)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* additionalCameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalAdditionalCameraData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "UpdateTemporalAAData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData, additionalCameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::UpdateTemporalAATargets
// Il2CppName: UpdateTemporalAATargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::UpdateTemporalAATargets)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "UpdateTemporalAATargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::UpdateCameraStereoMatrices
// Il2CppName: UpdateCameraStereoMatrices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ::UnityEngine::Experimental::Rendering::XRPass*)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::UpdateCameraStereoMatrices)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* xr = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "XRPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "UpdateCameraStereoMatrices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, xr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetPerObjectLightFlags
// Il2CppName: GetPerObjectLightFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::PerObjectData (*)(int, bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetPerObjectLightFlags)> {
  static const MethodInfo* get() {
    static auto* additionalLightsCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isForwardPlus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "GetPerObjectLightFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{additionalLightsCount, isForwardPlus});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetMainLightIndex
// Il2CppName: GetMainLightIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetMainLightIndex)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalRenderPipelineAsset")->byval_arg;
    static auto* visibleLights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VisibleLight")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "GetMainLightIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings, visibleLights});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::SetupPerFrameShaderConstants
// Il2CppName: SetupPerFrameShaderConstants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::SetupPerFrameShaderConstants)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "SetupPerFrameShaderConstants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::SetupPerCameraShaderConstants
// Il2CppName: SetupPerCameraShaderConstants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::SetupPerCameraShaderConstants)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "SetupPerCameraShaderConstants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::CheckAndApplyDebugSettings
// Il2CppName: CheckAndApplyDebugSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::CheckAndApplyDebugSettings)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "CheckAndApplyDebugSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::ResolveUpscalingFilterSelection
// Il2CppName: ResolveUpscalingFilterSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ImageUpscalingFilter (*)(::UnityEngine::Vector2, float, ::UnityEngine::Rendering::Universal::UpscalingFilterSelection)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::ResolveUpscalingFilterSelection)> {
  static const MethodInfo* get() {
    static auto* imageSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* renderScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* selection = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UpscalingFilterSelection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "ResolveUpscalingFilterSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{imageSize, renderScale, selection});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::HDROutputIsActive
// Il2CppName: HDROutputIsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::HDROutputIsActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "HDROutputIsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::SetHDRState
// Il2CppName: SetHDRState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::UnityEngine::Camera*>*)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::SetHDRState)> {
  static const MethodInfo* get() {
    static auto* cameras = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "SetHDRState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameras});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetHDROutputLuminanceParameters
// Il2CppName: GetHDROutputLuminanceParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::Tonemapping*, ByRef<::UnityEngine::Vector4>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetHDROutputLuminanceParameters)> {
  static const MethodInfo* get() {
    static auto* tonemapping = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Tonemapping")->byval_arg;
    static auto* hdrOutputParameters = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "GetHDROutputLuminanceParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tonemapping, hdrOutputParameters});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetHDROutputGradingParameters
// Il2CppName: GetHDROutputGradingParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::Tonemapping*, ByRef<::UnityEngine::Vector4>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetHDROutputGradingParameters)> {
  static const MethodInfo* get() {
    static auto* tonemapping = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Tonemapping")->byval_arg;
    static auto* hdrOutputParameters = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "GetHDROutputGradingParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tonemapping, hdrOutputParameters});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::IsGameCamera
// Il2CppName: IsGameCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Camera*)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::IsGameCamera)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "IsGameCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::IsStereoEnabled
// Il2CppName: IsStereoEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Camera*)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::IsStereoEnabled)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "IsStereoEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_asset
// Il2CppName: get_asset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset* (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_asset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "get_asset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::SortCameras
// Il2CppName: SortCameras
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipeline::*)(::System::Collections::Generic::List_1<::UnityEngine::Camera*>*)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::SortCameras)> {
  static const MethodInfo* get() {
    static auto* cameras = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "SortCameras", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameras});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::MakeRenderTextureGraphicsFormat
// Il2CppName: MakeRenderTextureGraphicsFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::GraphicsFormat (*)(bool, ::UnityEngine::Rendering::Universal::HDRColorBufferPrecision, bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::MakeRenderTextureGraphicsFormat)> {
  static const MethodInfo* get() {
    static auto* isHdrEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* requestHDRColorBufferPrecision = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "HDRColorBufferPrecision")->byval_arg;
    static auto* needsAlpha = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "MakeRenderTextureGraphicsFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isHdrEnabled, requestHDRColorBufferPrecision, needsAlpha});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::MakeUnormRenderTextureGraphicsFormat
// Il2CppName: MakeUnormRenderTextureGraphicsFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::GraphicsFormat (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::MakeUnormRenderTextureGraphicsFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "MakeUnormRenderTextureGraphicsFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::CreateRenderTextureDescriptor
// Il2CppName: CreateRenderTextureDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTextureDescriptor (*)(::UnityEngine::Camera*, float, bool, ::UnityEngine::Rendering::Universal::HDRColorBufferPrecision, int, bool, bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::CreateRenderTextureDescriptor)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* renderScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isHdrEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* requestHDRColorBufferPrecision = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "HDRColorBufferPrecision")->byval_arg;
    static auto* msaaSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* needsAlpha = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* requiresOpaqueTexture = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "CreateRenderTextureDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, renderScale, isHdrEnabled, requestHDRColorBufferPrecision, msaaSamples, needsAlpha, requiresOpaqueTexture});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetLightAttenuationAndSpotDirection
// Il2CppName: GetLightAttenuationAndSpotDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::LightType, float, ::UnityEngine::Matrix4x4, float, ::System::Nullable_1<float>, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetLightAttenuationAndSpotDirection)> {
  static const MethodInfo* get() {
    static auto* lightType = &::il2cpp_utils::GetClassFromName("UnityEngine", "LightType")->byval_arg;
    static auto* lightRange = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lightLocalToWorldMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* spotAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* innerSpotAngle = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* lightAttenuation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* lightSpotDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "GetLightAttenuationAndSpotDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lightType, lightRange, lightLocalToWorldMatrix, spotAngle, innerSpotAngle, lightAttenuation, lightSpotDir});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetPunctualLightDistanceAttenuation
// Il2CppName: GetPunctualLightDistanceAttenuation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, ByRef<::UnityEngine::Vector4>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetPunctualLightDistanceAttenuation)> {
  static const MethodInfo* get() {
    static auto* lightRange = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lightAttenuation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "GetPunctualLightDistanceAttenuation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lightRange, lightAttenuation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetSpotAngleAttenuation
// Il2CppName: GetSpotAngleAttenuation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, ::System::Nullable_1<float>, ByRef<::UnityEngine::Vector4>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetSpotAngleAttenuation)> {
  static const MethodInfo* get() {
    static auto* spotAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* innerSpotAngle = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* lightAttenuation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "GetSpotAngleAttenuation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{spotAngle, innerSpotAngle, lightAttenuation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetSpotDirection
// Il2CppName: GetSpotDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Matrix4x4>, ByRef<::UnityEngine::Vector4>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::GetSpotDirection)> {
  static const MethodInfo* get() {
    static auto* lightLocalToWorldMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    static auto* lightSpotDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "GetSpotDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lightLocalToWorldMatrix, lightSpotDir});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializeLightConstants_Common
// Il2CppName: InitializeLightConstants_Common
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight>, int, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::InitializeLightConstants_Common)> {
  static const MethodInfo* get() {
    static auto* lights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VisibleLight")})->byval_arg;
    static auto* lightIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lightPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* lightColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* lightAttenuation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* lightSpotDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* lightOcclusionProbeChannel = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "InitializeLightConstants_Common", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lights, lightIndex, lightPos, lightColor, lightAttenuation, lightSpotDir, lightOcclusionProbeChannel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::RecordRenderGraph
// Il2CppName: RecordRenderGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::RecordRenderGraph)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "RecordRenderGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::RecordAndExecuteRenderGraph
// Il2CppName: RecordAndExecuteRenderGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::RecordAndExecuteRenderGraph)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "RecordAndExecuteRenderGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_defaultSettings
// Il2CppName: get_defaultSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderPipelineGlobalSettings* (UnityEngine::Rendering::Universal::UniversalRenderPipeline::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::get_defaultSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "get_defaultSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Rendering::Universal::UniversalRenderPipeline::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipeline::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipeline::*)(::UnityEngine::Rendering::ScriptableRenderContext, ::ArrayW<::UnityEngine::Camera*>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::Render)> {
  static const MethodInfo* get() {
    static auto* renderContext = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* cameras = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Camera"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderContext, cameras});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipeline::*)(::UnityEngine::Rendering::ScriptableRenderContext, ::System::Collections::Generic::List_1<::UnityEngine::Camera*>*)>(&UnityEngine::Rendering::Universal::UniversalRenderPipeline::Render)> {
  static const MethodInfo* get() {
    static auto* renderContext = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* cameras = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipeline*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderContext, cameras});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::IsRenderRequestSupported
// Il2CppName: IsRenderRequestSupported
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::ProcessRenderRequests
// Il2CppName: ProcessRenderRequests
// Cannot write MetadataGetter for generic methods!
