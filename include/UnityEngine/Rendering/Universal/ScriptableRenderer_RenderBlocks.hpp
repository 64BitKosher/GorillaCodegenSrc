// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderer
#include "UnityEngine/Rendering/Universal/ScriptableRenderer.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Rendering.Universal.RenderPassEvent
#include "UnityEngine/Rendering/Universal/RenderPassEvent.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ScriptableRenderPass
  class ScriptableRenderPass;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks, "UnityEngine.Rendering.Universal", "ScriptableRenderer/RenderBlocks");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.ScriptableRenderer/RenderBlocks
  // [TokenAttribute] Offset: FFFFFFFF
  struct ScriptableRenderer::RenderBlocks/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange
    struct BlockRange;
    public:
    // private Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.RenderPassEvent> m_BlockEventLimits
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::RenderPassEvent> m_BlockEventLimits;
    // private Unity.Collections.NativeArray`1<System.Int32> m_BlockRanges
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Collections::NativeArray_1<int> m_BlockRanges;
    // private Unity.Collections.NativeArray`1<System.Int32> m_BlockRangeLengths
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::Unity::Collections::NativeArray_1<int> m_BlockRangeLengths;
    public:
    // Creating value type constructor for type: RenderBlocks
    constexpr RenderBlocks(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::RenderPassEvent> m_BlockEventLimits_ = {}, ::Unity::Collections::NativeArray_1<int> m_BlockRanges_ = {}, ::Unity::Collections::NativeArray_1<int> m_BlockRangeLengths_ = {}) noexcept : m_BlockEventLimits{m_BlockEventLimits_}, m_BlockRanges{m_BlockRanges_}, m_BlockRangeLengths{m_BlockRangeLengths_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.RenderPassEvent> m_BlockEventLimits
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::RenderPassEvent>& dyn_m_BlockEventLimits();
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.Int32> m_BlockRanges
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_m_BlockRanges();
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.Int32> m_BlockRangeLengths
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_m_BlockRangeLengths();
    // public System.Void .ctor(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.ScriptableRenderPass> activeRenderPassQueue)
    // Offset: 0x52BB520
    RenderBlocks(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ScriptableRenderPass*>* activeRenderPassQueue);
    // public System.Void Dispose()
    // Offset: 0x52BB7DC
    void Dispose();
    // private System.Void FillBlockRanges(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.ScriptableRenderPass> activeRenderPassQueue)
    // Offset: 0x52BB6D4
    void FillBlockRanges(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ScriptableRenderPass*>* activeRenderPassQueue);
    // public System.Int32 GetLength(System.Int32 index)
    // Offset: 0x52BB830
    int GetLength(int index);
    // public UnityEngine.Rendering.Universal.ScriptableRenderer/RenderBlocks/BlockRange GetRange(System.Int32 index)
    // Offset: 0x52BB83C
    ::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange GetRange(int index);
  }; // UnityEngine.Rendering.Universal.ScriptableRenderer/RenderBlocks
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::RenderBlocks
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::FillBlockRanges
// Il2CppName: FillBlockRanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::ScriptableRenderPass*>*)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::FillBlockRanges)> {
  static const MethodInfo* get() {
    static auto* activeRenderPassQueue = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderPass")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks), "FillBlockRanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activeRenderPassQueue});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::GetLength
// Il2CppName: GetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::*)(int)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::GetLength)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks), "GetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::GetRange
// Il2CppName: GetRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange (UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::*)(int)>(&UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::GetRange)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks), "GetRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
