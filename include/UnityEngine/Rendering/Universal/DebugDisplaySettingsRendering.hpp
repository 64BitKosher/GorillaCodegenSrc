// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.IDebugDisplaySettingsData
#include "UnityEngine/Rendering/IDebugDisplaySettingsData.hpp"
// Including type: UnityEngine.Rendering.Universal.DebugWireframeMode
#include "UnityEngine/Rendering/Universal/DebugWireframeMode.hpp"
// Including type: UnityEngine.Rendering.Universal.DebugOverdrawMode
#include "UnityEngine/Rendering/Universal/DebugOverdrawMode.hpp"
// Including type: UnityEngine.Rendering.Universal.DebugFullScreenMode
#include "UnityEngine/Rendering/Universal/DebugFullScreenMode.hpp"
// Including type: UnityEngine.Rendering.Universal.DebugSceneOverrideMode
#include "UnityEngine/Rendering/Universal/DebugSceneOverrideMode.hpp"
// Including type: UnityEngine.Rendering.Universal.DebugMipInfoMode
#include "UnityEngine/Rendering/Universal/DebugMipInfoMode.hpp"
// Including type: UnityEngine.Rendering.Universal.DebugPostProcessingMode
#include "UnityEngine/Rendering/Universal/DebugPostProcessingMode.hpp"
// Including type: UnityEngine.Rendering.Universal.DebugValidationMode
#include "UnityEngine/Rendering/Universal/DebugValidationMode.hpp"
// Including type: UnityEngine.Rendering.Universal.PixelValidationChannels
#include "UnityEngine/Rendering/Universal/PixelValidationChannels.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Skipping declaration: TaaDebugMode because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: IDebugDisplaySettingsPanelDisposable
  class IDebugDisplaySettingsPanelDisposable;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DebugDisplaySettingsRendering
  class DebugDisplaySettingsRendering;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*, "UnityEngine.Rendering.Universal", "DebugDisplaySettingsRendering");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugDisplaySettingsRendering : public ::Il2CppObject/*, public ::UnityEngine::Rendering::IDebugDisplaySettingsData*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode
    struct TaaDebugMode;
    // Nested type: ::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::Strings
    class Strings;
    // Nested type: ::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::WidgetFactory
    class WidgetFactory;
    // Nested type: ::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::SettingsPanel
    class SettingsPanel;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct TaaDebugMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TaaDebugMode
      constexpr TaaDebugMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode None
      static ::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode _get_None();
      // Set static field: static public UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode None
      static void _set_None(::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode value);
      // static field const value: static public UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode ShowRawFrame
      static constexpr const int ShowRawFrame = 1;
      // Get static field: static public UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode ShowRawFrame
      static ::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode _get_ShowRawFrame();
      // Set static field: static public UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode ShowRawFrame
      static void _set_ShowRawFrame(::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode value);
      // static field const value: static public UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode ShowRawFrameNoJitter
      static constexpr const int ShowRawFrameNoJitter = 2;
      // Get static field: static public UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode ShowRawFrameNoJitter
      static ::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode _get_ShowRawFrameNoJitter();
      // Set static field: static public UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode ShowRawFrameNoJitter
      static void _set_ShowRawFrameNoJitter(::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode value);
      // static field const value: static public UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode ShowClampedHistory
      static constexpr const int ShowClampedHistory = 3;
      // Get static field: static public UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode ShowClampedHistory
      static ::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode _get_ShowClampedHistory();
      // Set static field: static public UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode ShowClampedHistory
      static void _set_ShowClampedHistory(::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode
    #pragma pack(pop)
    static check_size<sizeof(DebugDisplaySettingsRendering::TaaDebugMode), 0 + sizeof(int)> __UnityEngine_Rendering_Universal_DebugDisplaySettingsRendering_TaaDebugModeSizeCheck;
    static_assert(sizeof(DebugDisplaySettingsRendering::TaaDebugMode) == 0x4);
    public:
    // private UnityEngine.Rendering.Universal.DebugWireframeMode m_WireframeMode
    // Size: 0x4
    // Offset: 0x10
    ::UnityEngine::Rendering::Universal::DebugWireframeMode m_WireframeMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DebugWireframeMode) == 0x4);
    // private System.Boolean m_Overdraw
    // Size: 0x1
    // Offset: 0x14
    bool m_Overdraw;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Overdraw and: m_OverdrawMode
    char __padding1[0x3] = {};
    // private UnityEngine.Rendering.Universal.DebugOverdrawMode m_OverdrawMode
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::Rendering::Universal::DebugOverdrawMode m_OverdrawMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DebugOverdrawMode) == 0x4);
    // private System.Int32 <maxOverdrawCount>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    int maxOverdrawCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.Universal.DebugFullScreenMode <fullScreenDebugMode>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::Rendering::Universal::DebugFullScreenMode fullScreenDebugMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DebugFullScreenMode) == 0x4);
    // private System.Int32 <fullScreenDebugModeOutputSizeScreenPercent>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    int fullScreenDebugModeOutputSizeScreenPercent;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.Universal.DebugSceneOverrideMode <sceneOverrideMode>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::Rendering::Universal::DebugSceneOverrideMode sceneOverrideMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DebugSceneOverrideMode) == 0x4);
    // private UnityEngine.Rendering.Universal.DebugMipInfoMode <mipInfoMode>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    ::UnityEngine::Rendering::Universal::DebugMipInfoMode mipInfoMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DebugMipInfoMode) == 0x4);
    // private UnityEngine.Rendering.Universal.DebugPostProcessingMode <postProcessingDebugMode>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    ::UnityEngine::Rendering::Universal::DebugPostProcessingMode postProcessingDebugMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DebugPostProcessingMode) == 0x4);
    // private System.Boolean <enableMsaa>k__BackingField
    // Size: 0x1
    // Offset: 0x34
    bool enableMsaa;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <enableHDR>k__BackingField
    // Size: 0x1
    // Offset: 0x35
    bool enableHDR;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableHDR and: taaDebugMode
    char __padding10[0x2] = {};
    // private UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode <taaDebugMode>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode taaDebugMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode) == 0x4);
    // private UnityEngine.Rendering.Universal.DebugValidationMode <validationMode>k__BackingField
    // Size: 0x4
    // Offset: 0x3C
    ::UnityEngine::Rendering::Universal::DebugValidationMode validationMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DebugValidationMode) == 0x4);
    // private UnityEngine.Rendering.Universal.PixelValidationChannels <validationChannels>k__BackingField
    // Size: 0x4
    // Offset: 0x40
    ::UnityEngine::Rendering::Universal::PixelValidationChannels validationChannels;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::PixelValidationChannels) == 0x4);
    // private System.Single <validationRangeMin>k__BackingField
    // Size: 0x4
    // Offset: 0x44
    float validationRangeMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <validationRangeMax>k__BackingField
    // Size: 0x4
    // Offset: 0x48
    float validationRangeMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::Rendering::IDebugDisplaySettingsData
    operator ::UnityEngine::Rendering::IDebugDisplaySettingsData() noexcept {
      return *reinterpret_cast<::UnityEngine::Rendering::IDebugDisplaySettingsData*>(this);
    }
    // Get instance field reference: private UnityEngine.Rendering.Universal.DebugWireframeMode m_WireframeMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DebugWireframeMode& dyn_m_WireframeMode();
    // Get instance field reference: private System.Boolean m_Overdraw
    [[deprecated("Use field access instead!")]] bool& dyn_m_Overdraw();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DebugOverdrawMode m_OverdrawMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DebugOverdrawMode& dyn_m_OverdrawMode();
    // Get instance field reference: private System.Int32 <maxOverdrawCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$maxOverdrawCount$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DebugFullScreenMode <fullScreenDebugMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DebugFullScreenMode& dyn_$fullScreenDebugMode$k__BackingField();
    // Get instance field reference: private System.Int32 <fullScreenDebugModeOutputSizeScreenPercent>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$fullScreenDebugModeOutputSizeScreenPercent$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DebugSceneOverrideMode <sceneOverrideMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DebugSceneOverrideMode& dyn_$sceneOverrideMode$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DebugMipInfoMode <mipInfoMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DebugMipInfoMode& dyn_$mipInfoMode$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DebugPostProcessingMode <postProcessingDebugMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DebugPostProcessingMode& dyn_$postProcessingDebugMode$k__BackingField();
    // Get instance field reference: private System.Boolean <enableMsaa>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$enableMsaa$k__BackingField();
    // Get instance field reference: private System.Boolean <enableHDR>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$enableHDR$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode <taaDebugMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode& dyn_$taaDebugMode$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DebugValidationMode <validationMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DebugValidationMode& dyn_$validationMode$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.Universal.PixelValidationChannels <validationChannels>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::PixelValidationChannels& dyn_$validationChannels$k__BackingField();
    // Get instance field reference: private System.Single <validationRangeMin>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$validationRangeMin$k__BackingField();
    // Get instance field reference: private System.Single <validationRangeMax>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$validationRangeMax$k__BackingField();
    // public UnityEngine.Rendering.Universal.DebugWireframeMode get_wireframeMode()
    // Offset: 0x5298D70
    ::UnityEngine::Rendering::Universal::DebugWireframeMode get_wireframeMode();
    // public System.Void set_wireframeMode(UnityEngine.Rendering.Universal.DebugWireframeMode value)
    // Offset: 0x5298D78
    void set_wireframeMode(::UnityEngine::Rendering::Universal::DebugWireframeMode value);
    // public System.Boolean get_overdraw()
    // Offset: 0x5298DD0
    bool get_overdraw();
    // public System.Void set_overdraw(System.Boolean value)
    // Offset: 0x5298DD8
    void set_overdraw(bool value);
    // public UnityEngine.Rendering.Universal.DebugOverdrawMode get_overdrawMode()
    // Offset: 0x5298E0C
    ::UnityEngine::Rendering::Universal::DebugOverdrawMode get_overdrawMode();
    // public System.Void set_overdrawMode(UnityEngine.Rendering.Universal.DebugOverdrawMode value)
    // Offset: 0x5298E14
    void set_overdrawMode(::UnityEngine::Rendering::Universal::DebugOverdrawMode value);
    // public System.Int32 get_maxOverdrawCount()
    // Offset: 0x5298E38
    int get_maxOverdrawCount();
    // public System.Void set_maxOverdrawCount(System.Int32 value)
    // Offset: 0x5298E40
    void set_maxOverdrawCount(int value);
    // private System.Void UpdateDebugSceneOverrideMode()
    // Offset: 0x5298DA4
    void UpdateDebugSceneOverrideMode();
    // public UnityEngine.Rendering.Universal.DebugFullScreenMode get_fullScreenDebugMode()
    // Offset: 0x5298E48
    ::UnityEngine::Rendering::Universal::DebugFullScreenMode get_fullScreenDebugMode();
    // public System.Void set_fullScreenDebugMode(UnityEngine.Rendering.Universal.DebugFullScreenMode value)
    // Offset: 0x5298E50
    void set_fullScreenDebugMode(::UnityEngine::Rendering::Universal::DebugFullScreenMode value);
    // public System.Int32 get_fullScreenDebugModeOutputSizeScreenPercent()
    // Offset: 0x5298E58
    int get_fullScreenDebugModeOutputSizeScreenPercent();
    // public System.Void set_fullScreenDebugModeOutputSizeScreenPercent(System.Int32 value)
    // Offset: 0x5298E60
    void set_fullScreenDebugModeOutputSizeScreenPercent(int value);
    // UnityEngine.Rendering.Universal.DebugSceneOverrideMode get_sceneOverrideMode()
    // Offset: 0x5298E68
    ::UnityEngine::Rendering::Universal::DebugSceneOverrideMode get_sceneOverrideMode();
    // System.Void set_sceneOverrideMode(UnityEngine.Rendering.Universal.DebugSceneOverrideMode value)
    // Offset: 0x5298E70
    void set_sceneOverrideMode(::UnityEngine::Rendering::Universal::DebugSceneOverrideMode value);
    // UnityEngine.Rendering.Universal.DebugMipInfoMode get_mipInfoMode()
    // Offset: 0x5298E78
    ::UnityEngine::Rendering::Universal::DebugMipInfoMode get_mipInfoMode();
    // System.Void set_mipInfoMode(UnityEngine.Rendering.Universal.DebugMipInfoMode value)
    // Offset: 0x5298E80
    void set_mipInfoMode(::UnityEngine::Rendering::Universal::DebugMipInfoMode value);
    // public UnityEngine.Rendering.Universal.DebugPostProcessingMode get_postProcessingDebugMode()
    // Offset: 0x5298E88
    ::UnityEngine::Rendering::Universal::DebugPostProcessingMode get_postProcessingDebugMode();
    // public System.Void set_postProcessingDebugMode(UnityEngine.Rendering.Universal.DebugPostProcessingMode value)
    // Offset: 0x5298E90
    void set_postProcessingDebugMode(::UnityEngine::Rendering::Universal::DebugPostProcessingMode value);
    // public System.Boolean get_enableMsaa()
    // Offset: 0x5298E98
    bool get_enableMsaa();
    // public System.Void set_enableMsaa(System.Boolean value)
    // Offset: 0x5298EA0
    void set_enableMsaa(bool value);
    // public System.Boolean get_enableHDR()
    // Offset: 0x5298EAC
    bool get_enableHDR();
    // public System.Void set_enableHDR(System.Boolean value)
    // Offset: 0x5298EB4
    void set_enableHDR(bool value);
    // public UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode get_taaDebugMode()
    // Offset: 0x5298EC0
    ::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode get_taaDebugMode();
    // public System.Void set_taaDebugMode(UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering/TaaDebugMode value)
    // Offset: 0x5298EC8
    void set_taaDebugMode(::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode value);
    // public UnityEngine.Rendering.Universal.DebugValidationMode get_validationMode()
    // Offset: 0x5298ED0
    ::UnityEngine::Rendering::Universal::DebugValidationMode get_validationMode();
    // public System.Void set_validationMode(UnityEngine.Rendering.Universal.DebugValidationMode value)
    // Offset: 0x5298ED8
    void set_validationMode(::UnityEngine::Rendering::Universal::DebugValidationMode value);
    // public UnityEngine.Rendering.Universal.PixelValidationChannels get_validationChannels()
    // Offset: 0x5298EE0
    ::UnityEngine::Rendering::Universal::PixelValidationChannels get_validationChannels();
    // public System.Void set_validationChannels(UnityEngine.Rendering.Universal.PixelValidationChannels value)
    // Offset: 0x5298EE8
    void set_validationChannels(::UnityEngine::Rendering::Universal::PixelValidationChannels value);
    // public System.Single get_validationRangeMin()
    // Offset: 0x5298EF0
    float get_validationRangeMin();
    // public System.Void set_validationRangeMin(System.Single value)
    // Offset: 0x5298EF8
    void set_validationRangeMin(float value);
    // public System.Single get_validationRangeMax()
    // Offset: 0x5298F00
    float get_validationRangeMax();
    // public System.Void set_validationRangeMax(System.Single value)
    // Offset: 0x5298F08
    void set_validationRangeMax(float value);
    // public System.Boolean get_AreAnySettingsActive()
    // Offset: 0x5298F10
    bool get_AreAnySettingsActive();
    // public System.Boolean get_IsPostProcessingAllowed()
    // Offset: 0x5298F64
    bool get_IsPostProcessingAllowed();
    // public System.Boolean get_IsLightingActive()
    // Offset: 0x5298F8C
    bool get_IsLightingActive();
    // public System.Boolean TryGetScreenClearColor(ref UnityEngine.Color color)
    // Offset: 0x5298FAC
    bool TryGetScreenClearColor(ByRef<::UnityEngine::Color> color);
    // private UnityEngine.Rendering.IDebugDisplaySettingsPanelDisposable UnityEngine.Rendering.IDebugDisplaySettingsData.CreatePanel()
    // Offset: 0x5299044
    ::UnityEngine::Rendering::IDebugDisplaySettingsPanelDisposable* UnityEngine_Rendering_IDebugDisplaySettingsData_CreatePanel();
    // public System.Void .ctor()
    // Offset: 0x52994BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugDisplaySettingsRendering* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugDisplaySettingsRendering*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering
  #pragma pack(pop)
  static check_size<sizeof(DebugDisplaySettingsRendering), 72 + sizeof(float)> __UnityEngine_Rendering_Universal_DebugDisplaySettingsRenderingSizeCheck;
  static_assert(sizeof(DebugDisplaySettingsRendering) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode, "UnityEngine.Rendering.Universal", "DebugDisplaySettingsRendering/TaaDebugMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_wireframeMode
// Il2CppName: get_wireframeMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugWireframeMode (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_wireframeMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_wireframeMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_wireframeMode
// Il2CppName: set_wireframeMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(::UnityEngine::Rendering::Universal::DebugWireframeMode)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_wireframeMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DebugWireframeMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_wireframeMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_overdraw
// Il2CppName: get_overdraw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_overdraw)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_overdraw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_overdraw
// Il2CppName: set_overdraw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(bool)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_overdraw)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_overdraw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_overdrawMode
// Il2CppName: get_overdrawMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugOverdrawMode (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_overdrawMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_overdrawMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_overdrawMode
// Il2CppName: set_overdrawMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(::UnityEngine::Rendering::Universal::DebugOverdrawMode)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_overdrawMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DebugOverdrawMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_overdrawMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_maxOverdrawCount
// Il2CppName: get_maxOverdrawCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_maxOverdrawCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_maxOverdrawCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_maxOverdrawCount
// Il2CppName: set_maxOverdrawCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(int)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_maxOverdrawCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_maxOverdrawCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::UpdateDebugSceneOverrideMode
// Il2CppName: UpdateDebugSceneOverrideMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::UpdateDebugSceneOverrideMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "UpdateDebugSceneOverrideMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_fullScreenDebugMode
// Il2CppName: get_fullScreenDebugMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugFullScreenMode (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_fullScreenDebugMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_fullScreenDebugMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_fullScreenDebugMode
// Il2CppName: set_fullScreenDebugMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(::UnityEngine::Rendering::Universal::DebugFullScreenMode)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_fullScreenDebugMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DebugFullScreenMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_fullScreenDebugMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_fullScreenDebugModeOutputSizeScreenPercent
// Il2CppName: get_fullScreenDebugModeOutputSizeScreenPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_fullScreenDebugModeOutputSizeScreenPercent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_fullScreenDebugModeOutputSizeScreenPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_fullScreenDebugModeOutputSizeScreenPercent
// Il2CppName: set_fullScreenDebugModeOutputSizeScreenPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(int)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_fullScreenDebugModeOutputSizeScreenPercent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_fullScreenDebugModeOutputSizeScreenPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_sceneOverrideMode
// Il2CppName: get_sceneOverrideMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugSceneOverrideMode (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_sceneOverrideMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_sceneOverrideMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_sceneOverrideMode
// Il2CppName: set_sceneOverrideMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(::UnityEngine::Rendering::Universal::DebugSceneOverrideMode)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_sceneOverrideMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DebugSceneOverrideMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_sceneOverrideMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_mipInfoMode
// Il2CppName: get_mipInfoMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugMipInfoMode (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_mipInfoMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_mipInfoMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_mipInfoMode
// Il2CppName: set_mipInfoMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(::UnityEngine::Rendering::Universal::DebugMipInfoMode)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_mipInfoMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DebugMipInfoMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_mipInfoMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_postProcessingDebugMode
// Il2CppName: get_postProcessingDebugMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugPostProcessingMode (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_postProcessingDebugMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_postProcessingDebugMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_postProcessingDebugMode
// Il2CppName: set_postProcessingDebugMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(::UnityEngine::Rendering::Universal::DebugPostProcessingMode)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_postProcessingDebugMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DebugPostProcessingMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_postProcessingDebugMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_enableMsaa
// Il2CppName: get_enableMsaa
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_enableMsaa)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_enableMsaa", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_enableMsaa
// Il2CppName: set_enableMsaa
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(bool)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_enableMsaa)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_enableMsaa", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_enableHDR
// Il2CppName: get_enableHDR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_enableHDR)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_enableHDR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_enableHDR
// Il2CppName: set_enableHDR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(bool)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_enableHDR)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_enableHDR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_taaDebugMode
// Il2CppName: get_taaDebugMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_taaDebugMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_taaDebugMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_taaDebugMode
// Il2CppName: set_taaDebugMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TaaDebugMode)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_taaDebugMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DebugDisplaySettingsRendering/TaaDebugMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_taaDebugMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_validationMode
// Il2CppName: get_validationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugValidationMode (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_validationMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_validationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_validationMode
// Il2CppName: set_validationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(::UnityEngine::Rendering::Universal::DebugValidationMode)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_validationMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DebugValidationMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_validationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_validationChannels
// Il2CppName: get_validationChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::PixelValidationChannels (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_validationChannels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_validationChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_validationChannels
// Il2CppName: set_validationChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(::UnityEngine::Rendering::Universal::PixelValidationChannels)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_validationChannels)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PixelValidationChannels")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_validationChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_validationRangeMin
// Il2CppName: get_validationRangeMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_validationRangeMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_validationRangeMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_validationRangeMin
// Il2CppName: set_validationRangeMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(float)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_validationRangeMin)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_validationRangeMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_validationRangeMax
// Il2CppName: get_validationRangeMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_validationRangeMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_validationRangeMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_validationRangeMax
// Il2CppName: set_validationRangeMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(float)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::set_validationRangeMax)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "set_validationRangeMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_AreAnySettingsActive
// Il2CppName: get_AreAnySettingsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_AreAnySettingsActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_AreAnySettingsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_IsPostProcessingAllowed
// Il2CppName: get_IsPostProcessingAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_IsPostProcessingAllowed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_IsPostProcessingAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_IsLightingActive
// Il2CppName: get_IsLightingActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::get_IsLightingActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "get_IsLightingActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TryGetScreenClearColor
// Il2CppName: TryGetScreenClearColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)(ByRef<::UnityEngine::Color>)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::TryGetScreenClearColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "TryGetScreenClearColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::UnityEngine_Rendering_IDebugDisplaySettingsData_CreatePanel
// Il2CppName: UnityEngine.Rendering.IDebugDisplaySettingsData.CreatePanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::IDebugDisplaySettingsPanelDisposable* (UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::UnityEngine_Rendering_IDebugDisplaySettingsData_CreatePanel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering*), "UnityEngine.Rendering.IDebugDisplaySettingsData.CreatePanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
