// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.PostProcessPass
#include "UnityEngine/Rendering/Universal/PostProcessPass.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Shader
  class Shader;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: PostProcessData
  class PostProcessData;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary*, "UnityEngine.Rendering.Universal", "PostProcessPass/MaterialLibrary");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.PostProcessPass/MaterialLibrary
  // [TokenAttribute] Offset: FFFFFFFF
  class PostProcessPass::MaterialLibrary : public ::Il2CppObject {
    public:
    public:
    // public readonly UnityEngine.Material stopNaN
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Material* stopNaN;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public readonly UnityEngine.Material subpixelMorphologicalAntialiasing
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* subpixelMorphologicalAntialiasing;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public readonly UnityEngine.Material gaussianDepthOfField
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* gaussianDepthOfField;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public readonly UnityEngine.Material bokehDepthOfField
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* bokehDepthOfField;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public readonly UnityEngine.Material cameraMotionBlur
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* cameraMotionBlur;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public readonly UnityEngine.Material paniniProjection
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Material* paniniProjection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public readonly UnityEngine.Material bloom
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Material* bloom;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public readonly UnityEngine.Material temporalAntialiasing
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Material* temporalAntialiasing;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public readonly UnityEngine.Material scalingSetup
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Material* scalingSetup;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public readonly UnityEngine.Material easu
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Material* easu;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public readonly UnityEngine.Material uber
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Material* uber;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public readonly UnityEngine.Material finalPass
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Material* finalPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public readonly UnityEngine.Material lensFlareDataDriven
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Material* lensFlareDataDriven;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    public:
    // Get instance field reference: public readonly UnityEngine.Material stopNaN
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_stopNaN();
    // Get instance field reference: public readonly UnityEngine.Material subpixelMorphologicalAntialiasing
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_subpixelMorphologicalAntialiasing();
    // Get instance field reference: public readonly UnityEngine.Material gaussianDepthOfField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_gaussianDepthOfField();
    // Get instance field reference: public readonly UnityEngine.Material bokehDepthOfField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_bokehDepthOfField();
    // Get instance field reference: public readonly UnityEngine.Material cameraMotionBlur
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_cameraMotionBlur();
    // Get instance field reference: public readonly UnityEngine.Material paniniProjection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_paniniProjection();
    // Get instance field reference: public readonly UnityEngine.Material bloom
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_bloom();
    // Get instance field reference: public readonly UnityEngine.Material temporalAntialiasing
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_temporalAntialiasing();
    // Get instance field reference: public readonly UnityEngine.Material scalingSetup
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_scalingSetup();
    // Get instance field reference: public readonly UnityEngine.Material easu
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_easu();
    // Get instance field reference: public readonly UnityEngine.Material uber
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_uber();
    // Get instance field reference: public readonly UnityEngine.Material finalPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_finalPass();
    // Get instance field reference: public readonly UnityEngine.Material lensFlareDataDriven
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_lensFlareDataDriven();
    // public System.Void .ctor(UnityEngine.Rendering.Universal.PostProcessData data)
    // Offset: 0x52CE9D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PostProcessPass::MaterialLibrary* New_ctor(::UnityEngine::Rendering::Universal::PostProcessData* data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PostProcessPass::MaterialLibrary*, creationType>(data)));
    }
    // private UnityEngine.Material Load(UnityEngine.Shader shader)
    // Offset: 0x52CEBD4
    ::UnityEngine::Material* Load(::UnityEngine::Shader* shader);
    // System.Void Cleanup()
    // Offset: 0x52CEDAC
    void Cleanup();
  }; // UnityEngine.Rendering.Universal.PostProcessPass/MaterialLibrary
  #pragma pack(pop)
  static check_size<sizeof(PostProcessPass::MaterialLibrary), 112 + sizeof(::UnityEngine::Material*)> __UnityEngine_Rendering_Universal_PostProcessPass_MaterialLibrarySizeCheck;
  static_assert(sizeof(PostProcessPass::MaterialLibrary) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary::*)(::UnityEngine::Shader*)>(&UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary::Load)> {
  static const MethodInfo* get() {
    static auto* shader = &::il2cpp_utils::GetClassFromName("UnityEngine", "Shader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shader});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary::*)()>(&UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PostProcessPass::MaterialLibrary*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
