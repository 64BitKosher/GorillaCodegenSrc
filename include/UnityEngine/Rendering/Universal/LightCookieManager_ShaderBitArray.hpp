// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.LightCookieManager
#include "UnityEngine/Rendering/Universal/LightCookieManager.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray, "UnityEngine.Rendering.Universal", "LightCookieManager/ShaderBitArray");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.LightCookieManager/ShaderBitArray
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  struct LightCookieManager::ShaderBitArray/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Single[] m_Data
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<float> m_Data;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Creating value type constructor for type: ShaderBitArray
    constexpr ShaderBitArray(::ArrayW<float> m_Data_ = ::ArrayW<float>(static_cast<void*>(nullptr))) noexcept : m_Data{m_Data_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::ArrayW<float>
    constexpr operator ::ArrayW<float>() const noexcept {
      return m_Data;
    }
    // static field const value: static private System.Int32 k_BitsPerElement
    static constexpr const int k_BitsPerElement = 32;
    // Get static field: static private System.Int32 k_BitsPerElement
    static int _get_k_BitsPerElement();
    // Set static field: static private System.Int32 k_BitsPerElement
    static void _set_k_BitsPerElement(int value);
    // static field const value: static private System.Int32 k_ElementShift
    static constexpr const int k_ElementShift = 5;
    // Get static field: static private System.Int32 k_ElementShift
    static int _get_k_ElementShift();
    // Set static field: static private System.Int32 k_ElementShift
    static void _set_k_ElementShift(int value);
    // static field const value: static private System.Int32 k_ElementMask
    static constexpr const int k_ElementMask = 31;
    // Get static field: static private System.Int32 k_ElementMask
    static int _get_k_ElementMask();
    // Set static field: static private System.Int32 k_ElementMask
    static void _set_k_ElementMask(int value);
    // Get instance field reference: private System.Single[] m_Data
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_Data();
    // public System.Int32 get_elemLength()
    // Offset: 0x52BF588
    int get_elemLength();
    // public System.Int32 get_bitCapacity()
    // Offset: 0x52BF5A0
    int get_bitCapacity();
    // public System.Single[] get_data()
    // Offset: 0x52BF5BC
    ::ArrayW<float> get_data();
    // public System.Void Resize(System.Int32 bitCount)
    // Offset: 0x52BF5C4
    void Resize(int bitCount);
    // public System.Void Clear()
    // Offset: 0x52BED04
    void Clear();
    // private System.Void GetElementIndexAndBitOffset(System.Int32 index, out System.Int32 elemIndex, out System.Int32 bitOffset)
    // Offset: 0x52BF720
    void GetElementIndexAndBitOffset(int index, ByRef<int> elemIndex, ByRef<int> bitOffset);
    // public System.Boolean get_Item(System.Int32 index)
    // Offset: 0x52BF734
    bool get_Item(int index);
    // public System.Void set_Item(System.Int32 index, System.Boolean value)
    // Offset: 0x52BED54
    void set_Item(int index, bool value);
    // public override System.String ToString()
    // Offset: 0x52BF764
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.Rendering.Universal.LightCookieManager/ShaderBitArray
  #pragma pack(pop)
  static check_size<sizeof(LightCookieManager::ShaderBitArray), 0 + sizeof(::ArrayW<float>)> __UnityEngine_Rendering_Universal_LightCookieManager_ShaderBitArraySizeCheck;
  static_assert(sizeof(LightCookieManager::ShaderBitArray) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::get_elemLength
// Il2CppName: get_elemLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::*)()>(&UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::get_elemLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray), "get_elemLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::get_bitCapacity
// Il2CppName: get_bitCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::*)()>(&UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::get_bitCapacity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray), "get_bitCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::get_data
// Il2CppName: get_data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::*)()>(&UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::get_data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray), "get_data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::*)(int)>(&UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::Resize)> {
  static const MethodInfo* get() {
    static auto* bitCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bitCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::*)()>(&UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::GetElementIndexAndBitOffset
// Il2CppName: GetElementIndexAndBitOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::*)(int, ByRef<int>, ByRef<int>)>(&UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::GetElementIndexAndBitOffset)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elemIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bitOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray), "GetElementIndexAndBitOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, elemIndex, bitOffset});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::*)(int)>(&UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::*)(int, bool)>(&UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::*)()>(&UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
