// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Mathematics.int2
#include "Unity/Mathematics/int2.hpp"
// Including type: UnityEngine.Rendering.Universal.BuddyAllocator
#include "UnityEngine/Rendering/Universal/BuddyAllocator.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Hash128
#include "UnityEngine/Hash128.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Texture
  class Texture;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Forward declaring namespace: Unity::Mathematics
namespace Unity::Mathematics {
  // Forward declaring type: float4
  struct float4;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ReflectionProbeManager
  struct ReflectionProbeManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ReflectionProbeManager, "UnityEngine.Rendering.Universal", "ReflectionProbeManager");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.ReflectionProbeManager
  // [TokenAttribute] Offset: FFFFFFFF
  struct ReflectionProbeManager/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe
    struct CachedProbe;
    // Nested type: ::UnityEngine::Rendering::Universal::ReflectionProbeManager::ShaderProperties
    class ShaderProperties;
    // Size: 0x74
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.Universal.ReflectionProbeManager/CachedProbe
    // [TokenAttribute] Offset: FFFFFFFF
    struct CachedProbe/*, public ::System::ValueType*/ {
      public:
      // Nested type: ::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe::$dataIndices$e__FixedBuffer
      struct $dataIndices$e__FixedBuffer;
      // Nested type: ::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe::$levels$e__FixedBuffer
      struct $levels$e__FixedBuffer;
      // Size: 0x4
      #pragma pack(push, 1)
      // WARNING Layout: Sequential may not be correctly taken into account!
      // Autogenerated type: UnityEngine.Rendering.Universal.ReflectionProbeManager/CachedProbe/<dataIndices>e__FixedBuffer
      // [TokenAttribute] Offset: FFFFFFFF
      // [CompilerGeneratedAttribute] Offset: FFFFFFFF
      // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
      struct $dataIndices$e__FixedBuffer/*, public ::System::ValueType*/ {
        public:
        public:
        // public System.Int32 FixedElementField
        // Size: 0x4
        // Offset: 0x0
        int FixedElementField;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        public:
        // Creating value type constructor for type: $dataIndices$e__FixedBuffer
        constexpr $dataIndices$e__FixedBuffer(int FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
        // Creating interface conversion operator: operator ::System::ValueType
        operator ::System::ValueType() noexcept {
          return *reinterpret_cast<::System::ValueType*>(this);
        }
        // Creating conversion operator: operator int
        constexpr operator int() const noexcept {
          return FixedElementField;
        }
        // Get instance field reference: public System.Int32 FixedElementField
        [[deprecated("Use field access instead!")]] int& dyn_FixedElementField();
      }; // UnityEngine.Rendering.Universal.ReflectionProbeManager/CachedProbe/<dataIndices>e__FixedBuffer
      #pragma pack(pop)
      static check_size<sizeof(ReflectionProbeManager::CachedProbe::$dataIndices$e__FixedBuffer), 0 + sizeof(int)> __UnityEngine_Rendering_Universal_ReflectionProbeManager_CachedProbe_$dataIndices$e__FixedBufferSizeCheck;
      static_assert(sizeof(ReflectionProbeManager::CachedProbe::$dataIndices$e__FixedBuffer) == 0x4);
      // Size: 0x4
      #pragma pack(push, 1)
      // WARNING Layout: Sequential may not be correctly taken into account!
      // Autogenerated type: UnityEngine.Rendering.Universal.ReflectionProbeManager/CachedProbe/<levels>e__FixedBuffer
      // [TokenAttribute] Offset: FFFFFFFF
      // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
      // [CompilerGeneratedAttribute] Offset: FFFFFFFF
      struct $levels$e__FixedBuffer/*, public ::System::ValueType*/ {
        public:
        public:
        // public System.Int32 FixedElementField
        // Size: 0x4
        // Offset: 0x0
        int FixedElementField;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        public:
        // Creating value type constructor for type: $levels$e__FixedBuffer
        constexpr $levels$e__FixedBuffer(int FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
        // Creating interface conversion operator: operator ::System::ValueType
        operator ::System::ValueType() noexcept {
          return *reinterpret_cast<::System::ValueType*>(this);
        }
        // Creating conversion operator: operator int
        constexpr operator int() const noexcept {
          return FixedElementField;
        }
        // Get instance field reference: public System.Int32 FixedElementField
        [[deprecated("Use field access instead!")]] int& dyn_FixedElementField();
      }; // UnityEngine.Rendering.Universal.ReflectionProbeManager/CachedProbe/<levels>e__FixedBuffer
      #pragma pack(pop)
      static check_size<sizeof(ReflectionProbeManager::CachedProbe::$levels$e__FixedBuffer), 0 + sizeof(int)> __UnityEngine_Rendering_Universal_ReflectionProbeManager_CachedProbe_$levels$e__FixedBufferSizeCheck;
      static_assert(sizeof(ReflectionProbeManager::CachedProbe::$levels$e__FixedBuffer) == 0x4);
      public:
      // public System.UInt32 updateCount
      // Size: 0x4
      // Offset: 0x0
      uint updateCount;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // Padding between fields: updateCount and: imageContentsHash
      char __padding0[0x4] = {};
      // public UnityEngine.Hash128 imageContentsHash
      // Size: 0x10
      // Offset: 0x8
      ::UnityEngine::Hash128 imageContentsHash;
      // Field size check
      static_assert(sizeof(::UnityEngine::Hash128) == 0x10);
      // public System.Int32 size
      // Size: 0x4
      // Offset: 0x18
      int size;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 mipCount
      // Size: 0x4
      // Offset: 0x1C
      int mipCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public UnityEngine.Rendering.Universal.ReflectionProbeManager/CachedProbe/<dataIndices>e__FixedBuffer dataIndices
      // Size: 0x4
      // Offset: 0x20
      ::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe::$dataIndices$e__FixedBuffer dataIndices;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe::$dataIndices$e__FixedBuffer) == 0x4);
      // Padding between fields: dataIndices and: levels
      char __padding4[0x18] = {};
      // public UnityEngine.Rendering.Universal.ReflectionProbeManager/CachedProbe/<levels>e__FixedBuffer levels
      // Size: 0x4
      // Offset: 0x3C
      ::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe::$levels$e__FixedBuffer levels;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe::$levels$e__FixedBuffer) == 0x4);
      // Padding between fields: levels and: texture
      char __padding5[0x18] = {};
      // public UnityEngine.Texture texture
      // Size: 0x8
      // Offset: 0x58
      ::UnityEngine::Texture* texture;
      // Field size check
      static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
      // public System.Int32 lastUsed
      // Size: 0x4
      // Offset: 0x60
      int lastUsed;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public UnityEngine.Vector4 hdrData
      // Size: 0x10
      // Offset: 0x64
      ::UnityEngine::Vector4 hdrData;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
      public:
      // Creating value type constructor for type: CachedProbe
      constexpr CachedProbe(uint updateCount_ = {}, ::UnityEngine::Hash128 imageContentsHash_ = {}, int size_ = {}, int mipCount_ = {}, ::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe::$dataIndices$e__FixedBuffer dataIndices_ = {}, ::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe::$levels$e__FixedBuffer levels_ = {}, ::UnityEngine::Texture* texture_ = {}, int lastUsed_ = {}, ::UnityEngine::Vector4 hdrData_ = {}) noexcept : updateCount{updateCount_}, imageContentsHash{imageContentsHash_}, size{size_}, mipCount{mipCount_}, dataIndices{dataIndices_}, levels{levels_}, texture{texture_}, lastUsed{lastUsed_}, hdrData{hdrData_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.UInt32 updateCount
      [[deprecated("Use field access instead!")]] uint& dyn_updateCount();
      // Get instance field reference: public UnityEngine.Hash128 imageContentsHash
      [[deprecated("Use field access instead!")]] ::UnityEngine::Hash128& dyn_imageContentsHash();
      // Get instance field reference: public System.Int32 size
      [[deprecated("Use field access instead!")]] int& dyn_size();
      // Get instance field reference: public System.Int32 mipCount
      [[deprecated("Use field access instead!")]] int& dyn_mipCount();
      // Get instance field reference: public UnityEngine.Rendering.Universal.ReflectionProbeManager/CachedProbe/<dataIndices>e__FixedBuffer dataIndices
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe::$dataIndices$e__FixedBuffer& dyn_dataIndices();
      // Get instance field reference: public UnityEngine.Rendering.Universal.ReflectionProbeManager/CachedProbe/<levels>e__FixedBuffer levels
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe::$levels$e__FixedBuffer& dyn_levels();
      // Get instance field reference: public UnityEngine.Texture texture
      [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_texture();
      // Get instance field reference: public System.Int32 lastUsed
      [[deprecated("Use field access instead!")]] int& dyn_lastUsed();
      // Get instance field reference: public UnityEngine.Vector4 hdrData
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_hdrData();
    }; // UnityEngine.Rendering.Universal.ReflectionProbeManager/CachedProbe
    #pragma pack(pop)
    static check_size<sizeof(ReflectionProbeManager::CachedProbe), 100 + sizeof(::UnityEngine::Vector4)> __UnityEngine_Rendering_Universal_ReflectionProbeManager_CachedProbeSizeCheck;
    static_assert(sizeof(ReflectionProbeManager::CachedProbe) == 0x74);
    public:
    // private Unity.Mathematics.int2 m_Resolution
    // Size: 0x8
    // Offset: 0x0
    ::Unity::Mathematics::int2 m_Resolution;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::int2) == 0x8);
    // private UnityEngine.RenderTexture m_AtlasTexture0
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::RenderTexture* m_AtlasTexture0;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.RenderTexture m_AtlasTexture1
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::RenderTexture* m_AtlasTexture1;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.Rendering.Universal.BuddyAllocator m_AtlasAllocator
    // Size: 0xFFFFFFFF
    // Offset: 0x18
    ::UnityEngine::Rendering::Universal::BuddyAllocator m_AtlasAllocator;
    // private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.Rendering.Universal.ReflectionProbeManager/CachedProbe> m_Cache
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe>* m_Cache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> m_WarningCache
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<int, int>* m_WarningCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> m_NeedsUpdate
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<int>* m_NeedsUpdate;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> m_NeedsRemove
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<int>* m_NeedsRemove;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private UnityEngine.Vector4[] m_BoxMax
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::Vector4> m_BoxMax;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private UnityEngine.Vector4[] m_BoxMin
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::Vector4> m_BoxMin;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private UnityEngine.Vector4[] m_ProbePosition
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::UnityEngine::Vector4> m_ProbePosition;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private UnityEngine.Vector4[] m_MipScaleOffset
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::UnityEngine::Vector4> m_MipScaleOffset;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    public:
    // Creating value type constructor for type: ReflectionProbeManager
    constexpr ReflectionProbeManager(::Unity::Mathematics::int2 m_Resolution_ = {}, ::UnityEngine::RenderTexture* m_AtlasTexture0_ = {}, ::UnityEngine::RenderTexture* m_AtlasTexture1_ = {}, ::UnityEngine::Rendering::Universal::BuddyAllocator m_AtlasAllocator_ = {}, ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe>* m_Cache_ = {}, ::System::Collections::Generic::Dictionary_2<int, int>* m_WarningCache_ = {}, ::System::Collections::Generic::List_1<int>* m_NeedsUpdate_ = {}, ::System::Collections::Generic::List_1<int>* m_NeedsRemove_ = {}, ::ArrayW<::UnityEngine::Vector4> m_BoxMax_ = ::ArrayW<::UnityEngine::Vector4>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::Vector4> m_BoxMin_ = ::ArrayW<::UnityEngine::Vector4>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::Vector4> m_ProbePosition_ = ::ArrayW<::UnityEngine::Vector4>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::Vector4> m_MipScaleOffset_ = ::ArrayW<::UnityEngine::Vector4>(static_cast<void*>(nullptr))) noexcept : m_Resolution{m_Resolution_}, m_AtlasTexture0{m_AtlasTexture0_}, m_AtlasTexture1{m_AtlasTexture1_}, m_AtlasAllocator{m_AtlasAllocator_}, m_Cache{m_Cache_}, m_WarningCache{m_WarningCache_}, m_NeedsUpdate{m_NeedsUpdate_}, m_NeedsRemove{m_NeedsRemove_}, m_BoxMax{m_BoxMax_}, m_BoxMin{m_BoxMin_}, m_ProbePosition{m_ProbePosition_}, m_MipScaleOffset{m_MipScaleOffset_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // static field const value: static private System.Int32 k_MaxMipCount
    static constexpr const int k_MaxMipCount = 7;
    // Get static field: static private System.Int32 k_MaxMipCount
    static int _get_k_MaxMipCount();
    // Set static field: static private System.Int32 k_MaxMipCount
    static void _set_k_MaxMipCount(int value);
    // Get instance field reference: private Unity.Mathematics.int2 m_Resolution
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::int2& dyn_m_Resolution();
    // Get instance field reference: private UnityEngine.RenderTexture m_AtlasTexture0
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_m_AtlasTexture0();
    // Get instance field reference: private UnityEngine.RenderTexture m_AtlasTexture1
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_m_AtlasTexture1();
    // Get instance field reference: private UnityEngine.Rendering.Universal.BuddyAllocator m_AtlasAllocator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::BuddyAllocator& dyn_m_AtlasAllocator();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.Rendering.Universal.ReflectionProbeManager/CachedProbe> m_Cache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe>*& dyn_m_Cache();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> m_WarningCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn_m_WarningCache();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> m_NeedsUpdate
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_m_NeedsUpdate();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> m_NeedsRemove
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_m_NeedsRemove();
    // Get instance field reference: private UnityEngine.Vector4[] m_BoxMax
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_BoxMax();
    // Get instance field reference: private UnityEngine.Vector4[] m_BoxMin
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_BoxMin();
    // Get instance field reference: private UnityEngine.Vector4[] m_ProbePosition
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_ProbePosition();
    // Get instance field reference: private UnityEngine.Vector4[] m_MipScaleOffset
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_MipScaleOffset();
    // public UnityEngine.RenderTexture get_atlasRT()
    // Offset: 0x52D0FB0
    ::UnityEngine::RenderTexture* get_atlasRT();
    // static public UnityEngine.Rendering.Universal.ReflectionProbeManager Create()
    // Offset: 0x52D0FB8
    static ::UnityEngine::Rendering::Universal::ReflectionProbeManager Create();
    // private System.Void Init()
    // Offset: 0x52D0FFC
    void Init();
    // public System.Void UpdateGpuData(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52D1484
    void UpdateGpuData(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private Unity.Mathematics.float4 GetScaleOffset(System.Int32 level, System.Int32 dataIndex, System.Boolean includePadding)
    // Offset: 0x52D2CE8
    ::Unity::Mathematics::float4 GetScaleOffset(int level, int dataIndex, bool includePadding);
    // public System.Void Dispose()
    // Offset: 0x52D2DE8
    void Dispose();
  }; // UnityEngine.Rendering.Universal.ReflectionProbeManager
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe, "UnityEngine.Rendering.Universal", "ReflectionProbeManager/CachedProbe");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe::$levels$e__FixedBuffer, "UnityEngine.Rendering.Universal", "ReflectionProbeManager/CachedProbe/<levels>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ReflectionProbeManager::CachedProbe::$dataIndices$e__FixedBuffer, "UnityEngine.Rendering.Universal", "ReflectionProbeManager/CachedProbe/<dataIndices>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ReflectionProbeManager::get_atlasRT
// Il2CppName: get_atlasRT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTexture* (UnityEngine::Rendering::Universal::ReflectionProbeManager::*)()>(&UnityEngine::Rendering::Universal::ReflectionProbeManager::get_atlasRT)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ReflectionProbeManager), "get_atlasRT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ReflectionProbeManager::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ReflectionProbeManager (*)()>(&UnityEngine::Rendering::Universal::ReflectionProbeManager::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ReflectionProbeManager), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ReflectionProbeManager::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ReflectionProbeManager::*)()>(&UnityEngine::Rendering::Universal::ReflectionProbeManager::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ReflectionProbeManager), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ReflectionProbeManager::UpdateGpuData
// Il2CppName: UpdateGpuData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ReflectionProbeManager::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ReflectionProbeManager::UpdateGpuData)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ReflectionProbeManager), "UpdateGpuData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ReflectionProbeManager::GetScaleOffset
// Il2CppName: GetScaleOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (UnityEngine::Rendering::Universal::ReflectionProbeManager::*)(int, int, bool)>(&UnityEngine::Rendering::Universal::ReflectionProbeManager::GetScaleOffset)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dataIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* includePadding = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ReflectionProbeManager), "GetScaleOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, dataIndex, includePadding});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ReflectionProbeManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ReflectionProbeManager::*)()>(&UnityEngine::Rendering::Universal::ReflectionProbeManager::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ReflectionProbeManager), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
