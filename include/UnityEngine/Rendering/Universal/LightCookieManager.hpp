// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Vector2Int
#include "UnityEngine/Vector2Int.hpp"
// Including type: UnityEngine.Experimental.Rendering.GraphicsFormat
#include "UnityEngine/Experimental/Rendering/GraphicsFormat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: LightData
  struct LightData;
  // Forward declaring type: UniversalAdditionalLightData
  class UniversalAdditionalLightData;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
  // Forward declaring type: Texture2DAtlas
  class Texture2DAtlas;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: VisibleLight
  struct VisibleLight;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Light
  class Light;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: LightCookieManager
  class LightCookieManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::LightCookieManager);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::LightCookieManager*, "UnityEngine.Rendering.Universal", "LightCookieManager");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x5D
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.LightCookieManager
  // [TokenAttribute] Offset: FFFFFFFF
  class LightCookieManager : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::LightCookieManager::ShaderProperty
    class ShaderProperty;
    // Nested type: ::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderFormat
    struct LightCookieShaderFormat;
    // Nested type: ::UnityEngine::Rendering::Universal::LightCookieManager::Settings
    struct Settings;
    // Nested type: ::UnityEngine::Rendering::Universal::LightCookieManager::Sorting
    struct Sorting;
    // Nested type: ::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping
    struct LightCookieMapping;
    // Nested type: ::UnityEngine::Rendering::Universal::LightCookieManager::WorkSlice_1<T>
    template<typename T>
    struct WorkSlice_1;
    // Nested type: ::UnityEngine::Rendering::Universal::LightCookieManager::WorkMemory
    class WorkMemory;
    // Nested type: ::UnityEngine::Rendering::Universal::LightCookieManager::ShaderBitArray
    struct ShaderBitArray;
    // Nested type: ::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData
    class LightCookieShaderData;
    // Size: 0x19
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.Universal.LightCookieManager/Settings
    // [TokenAttribute] Offset: FFFFFFFF
    struct Settings/*, public ::System::ValueType*/ {
      public:
      // Nested type: ::UnityEngine::Rendering::Universal::LightCookieManager::Settings::AtlasSettings
      struct AtlasSettings;
      // Size: 0xD
      #pragma pack(push, 1)
      // WARNING Layout: Sequential may not be correctly taken into account!
      // Autogenerated type: UnityEngine.Rendering.Universal.LightCookieManager/Settings/AtlasSettings
      // [TokenAttribute] Offset: FFFFFFFF
      struct AtlasSettings/*, public ::System::ValueType*/ {
        public:
        public:
        // public UnityEngine.Vector2Int resolution
        // Size: 0x8
        // Offset: 0x0
        ::UnityEngine::Vector2Int resolution;
        // Field size check
        static_assert(sizeof(::UnityEngine::Vector2Int) == 0x8);
        // public UnityEngine.Experimental.Rendering.GraphicsFormat format
        // Size: 0x4
        // Offset: 0x8
        ::UnityEngine::Experimental::Rendering::GraphicsFormat format;
        // Field size check
        static_assert(sizeof(::UnityEngine::Experimental::Rendering::GraphicsFormat) == 0x4);
        // public System.Boolean useMips
        // Size: 0x1
        // Offset: 0xC
        bool useMips;
        // Field size check
        static_assert(sizeof(bool) == 0x1);
        public:
        // Creating value type constructor for type: AtlasSettings
        constexpr AtlasSettings(::UnityEngine::Vector2Int resolution_ = {}, ::UnityEngine::Experimental::Rendering::GraphicsFormat format_ = {}, bool useMips_ = {}) noexcept : resolution{resolution_}, format{format_}, useMips{useMips_} {}
        // Creating interface conversion operator: operator ::System::ValueType
        operator ::System::ValueType() noexcept {
          return *reinterpret_cast<::System::ValueType*>(this);
        }
        // Get instance field reference: public UnityEngine.Vector2Int resolution
        [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2Int& dyn_resolution();
        // Get instance field reference: public UnityEngine.Experimental.Rendering.GraphicsFormat format
        [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::GraphicsFormat& dyn_format();
        // Get instance field reference: public System.Boolean useMips
        [[deprecated("Use field access instead!")]] bool& dyn_useMips();
        // public System.Boolean get_isPow2()
        // Offset: 0x52BC824
        bool get_isPow2();
        // public System.Boolean get_isSquare()
        // Offset: 0x52BF308
        bool get_isSquare();
      }; // UnityEngine.Rendering.Universal.LightCookieManager/Settings/AtlasSettings
      #pragma pack(pop)
      static check_size<sizeof(LightCookieManager::Settings::AtlasSettings), 12 + sizeof(bool)> __UnityEngine_Rendering_Universal_LightCookieManager_Settings_AtlasSettingsSizeCheck;
      static_assert(sizeof(LightCookieManager::Settings::AtlasSettings) == 0xD);
      public:
      // public UnityEngine.Rendering.Universal.LightCookieManager/Settings/AtlasSettings atlas
      // Size: 0xD
      // Offset: 0x0
      ::UnityEngine::Rendering::Universal::LightCookieManager::Settings::AtlasSettings atlas;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rendering::Universal::LightCookieManager::Settings::AtlasSettings) == 0xD);
      // Padding between fields: atlas and: maxAdditionalLights
      char __padding0[0x3] = {};
      // public System.Int32 maxAdditionalLights
      // Size: 0x4
      // Offset: 0x10
      int maxAdditionalLights;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Single cubeOctahedralSizeScale
      // Size: 0x4
      // Offset: 0x14
      float cubeOctahedralSizeScale;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Boolean useStructuredBuffer
      // Size: 0x1
      // Offset: 0x18
      bool useStructuredBuffer;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: Settings
      constexpr Settings(::UnityEngine::Rendering::Universal::LightCookieManager::Settings::AtlasSettings atlas_ = {}, int maxAdditionalLights_ = {}, float cubeOctahedralSizeScale_ = {}, bool useStructuredBuffer_ = {}) noexcept : atlas{atlas_}, maxAdditionalLights{maxAdditionalLights_}, cubeOctahedralSizeScale{cubeOctahedralSizeScale_}, useStructuredBuffer{useStructuredBuffer_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Rendering.Universal.LightCookieManager/Settings/AtlasSettings atlas
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LightCookieManager::Settings::AtlasSettings& dyn_atlas();
      // Get instance field reference: public System.Int32 maxAdditionalLights
      [[deprecated("Use field access instead!")]] int& dyn_maxAdditionalLights();
      // Get instance field reference: public System.Single cubeOctahedralSizeScale
      [[deprecated("Use field access instead!")]] float& dyn_cubeOctahedralSizeScale();
      // Get instance field reference: public System.Boolean useStructuredBuffer
      [[deprecated("Use field access instead!")]] bool& dyn_useStructuredBuffer();
      // static public UnityEngine.Rendering.Universal.LightCookieManager/Settings Create()
      // Offset: 0x52BF220
      static ::UnityEngine::Rendering::Universal::LightCookieManager::Settings Create();
    }; // UnityEngine.Rendering.Universal.LightCookieManager/Settings
    #pragma pack(pop)
    static check_size<sizeof(LightCookieManager::Settings), 24 + sizeof(bool)> __UnityEngine_Rendering_Universal_LightCookieManager_SettingsSizeCheck;
    static_assert(sizeof(LightCookieManager::Settings) == 0x19);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.Universal.LightCookieManager/LightCookieMapping
    // [TokenAttribute] Offset: FFFFFFFF
    struct LightCookieMapping/*, public ::System::ValueType*/ {
      public:
      // Nested type: ::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping::$$c
      class $$c;
      public:
      // public System.UInt16 visibleLightIndex
      // Size: 0x2
      // Offset: 0x0
      uint16_t visibleLightIndex;
      // Field size check
      static_assert(sizeof(uint16_t) == 0x2);
      // public System.UInt16 lightBufferIndex
      // Size: 0x2
      // Offset: 0x2
      uint16_t lightBufferIndex;
      // Field size check
      static_assert(sizeof(uint16_t) == 0x2);
      // Padding between fields: lightBufferIndex and: light
      char __padding1[0x4] = {};
      // public UnityEngine.Light light
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::Light* light;
      // Field size check
      static_assert(sizeof(::UnityEngine::Light*) == 0x8);
      public:
      // Creating value type constructor for type: LightCookieMapping
      constexpr LightCookieMapping(uint16_t visibleLightIndex_ = {}, uint16_t lightBufferIndex_ = {}, ::UnityEngine::Light* light_ = {}) noexcept : visibleLightIndex{visibleLightIndex_}, lightBufferIndex{lightBufferIndex_}, light{light_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get static field: static public System.Func`3<UnityEngine.Rendering.Universal.LightCookieManager/LightCookieMapping,UnityEngine.Rendering.Universal.LightCookieManager/LightCookieMapping,System.Int32> s_CompareByCookieSize
      static ::System::Func_3<::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping, ::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping, int>* _get_s_CompareByCookieSize();
      // Set static field: static public System.Func`3<UnityEngine.Rendering.Universal.LightCookieManager/LightCookieMapping,UnityEngine.Rendering.Universal.LightCookieManager/LightCookieMapping,System.Int32> s_CompareByCookieSize
      static void _set_s_CompareByCookieSize(::System::Func_3<::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping, ::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping, int>* value);
      // Get static field: static public System.Func`3<UnityEngine.Rendering.Universal.LightCookieManager/LightCookieMapping,UnityEngine.Rendering.Universal.LightCookieManager/LightCookieMapping,System.Int32> s_CompareByBufferIndex
      static ::System::Func_3<::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping, ::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping, int>* _get_s_CompareByBufferIndex();
      // Set static field: static public System.Func`3<UnityEngine.Rendering.Universal.LightCookieManager/LightCookieMapping,UnityEngine.Rendering.Universal.LightCookieManager/LightCookieMapping,System.Int32> s_CompareByBufferIndex
      static void _set_s_CompareByBufferIndex(::System::Func_3<::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping, ::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping, int>* value);
      // Get instance field reference: public System.UInt16 visibleLightIndex
      [[deprecated("Use field access instead!")]] uint16_t& dyn_visibleLightIndex();
      // Get instance field reference: public System.UInt16 lightBufferIndex
      [[deprecated("Use field access instead!")]] uint16_t& dyn_lightBufferIndex();
      // Get instance field reference: public UnityEngine.Light light
      [[deprecated("Use field access instead!")]] ::UnityEngine::Light*& dyn_light();
      // static private System.Void .cctor()
      // Offset: 0x52BF318
      static void _cctor();
    }; // UnityEngine.Rendering.Universal.LightCookieManager/LightCookieMapping
    #pragma pack(pop)
    static check_size<sizeof(LightCookieManager::LightCookieMapping), 8 + sizeof(::UnityEngine::Light*)> __UnityEngine_Rendering_Universal_LightCookieManager_LightCookieMappingSizeCheck;
    static_assert(sizeof(LightCookieManager::LightCookieMapping) == 0x10);
    public:
    // private UnityEngine.Rendering.Texture2DAtlas m_AdditionalLightsCookieAtlas
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Rendering::Texture2DAtlas* m_AdditionalLightsCookieAtlas;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Texture2DAtlas*) == 0x8);
    // private UnityEngine.Rendering.Universal.LightCookieManager/LightCookieShaderData m_AdditionalLightsCookieShaderData
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData* m_AdditionalLightsCookieShaderData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData*) == 0x8);
    // private readonly UnityEngine.Rendering.Universal.LightCookieManager/Settings m_Settings
    // Size: 0x19
    // Offset: 0x20
    ::UnityEngine::Rendering::Universal::LightCookieManager::Settings m_Settings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LightCookieManager::Settings) == 0x19);
    // Padding between fields: m_Settings and: m_WorkMem
    char __padding2[0x7] = {};
    // private UnityEngine.Rendering.Universal.LightCookieManager/WorkMemory m_WorkMem
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Rendering::Universal::LightCookieManager::WorkMemory* m_WorkMem;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LightCookieManager::WorkMemory*) == 0x8);
    // private System.Int32[] m_VisibleLightIndexToShaderDataIndex
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<int> m_VisibleLightIndexToShaderDataIndex;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32 m_CookieSizeDivisor
    // Size: 0x4
    // Offset: 0x50
    int m_CookieSizeDivisor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt32 m_PrevCookieRequestPixelCount
    // Size: 0x4
    // Offset: 0x54
    uint m_PrevCookieRequestPixelCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Int32 m_PrevWarnFrame
    // Size: 0x4
    // Offset: 0x58
    int m_PrevWarnFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <IsKeywordLightCookieEnabled>k__BackingField
    // Size: 0x1
    // Offset: 0x5C
    bool IsKeywordLightCookieEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private readonly UnityEngine.Matrix4x4 s_DirLightProj
    static ::UnityEngine::Matrix4x4 _get_s_DirLightProj();
    // Set static field: static private readonly UnityEngine.Matrix4x4 s_DirLightProj
    static void _set_s_DirLightProj(::UnityEngine::Matrix4x4 value);
    // static field const value: static private System.Int32 k_MaxCookieSizeDivisor
    static constexpr const int k_MaxCookieSizeDivisor = 16;
    // Get static field: static private System.Int32 k_MaxCookieSizeDivisor
    static int _get_k_MaxCookieSizeDivisor();
    // Set static field: static private System.Int32 k_MaxCookieSizeDivisor
    static void _set_k_MaxCookieSizeDivisor(int value);
    // Get instance field reference: private UnityEngine.Rendering.Texture2DAtlas m_AdditionalLightsCookieAtlas
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Texture2DAtlas*& dyn_m_AdditionalLightsCookieAtlas();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LightCookieManager/LightCookieShaderData m_AdditionalLightsCookieShaderData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderData*& dyn_m_AdditionalLightsCookieShaderData();
    // Get instance field reference: private readonly UnityEngine.Rendering.Universal.LightCookieManager/Settings m_Settings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LightCookieManager::Settings& dyn_m_Settings();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LightCookieManager/WorkMemory m_WorkMem
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LightCookieManager::WorkMemory*& dyn_m_WorkMem();
    // Get instance field reference: private System.Int32[] m_VisibleLightIndexToShaderDataIndex
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_m_VisibleLightIndexToShaderDataIndex();
    // Get instance field reference: private System.Int32 m_CookieSizeDivisor
    [[deprecated("Use field access instead!")]] int& dyn_m_CookieSizeDivisor();
    // Get instance field reference: private System.UInt32 m_PrevCookieRequestPixelCount
    [[deprecated("Use field access instead!")]] uint& dyn_m_PrevCookieRequestPixelCount();
    // Get instance field reference: private System.Int32 m_PrevWarnFrame
    [[deprecated("Use field access instead!")]] int& dyn_m_PrevWarnFrame();
    // Get instance field reference: private System.Boolean <IsKeywordLightCookieEnabled>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsKeywordLightCookieEnabled$k__BackingField();
    // System.Boolean get_IsKeywordLightCookieEnabled()
    // Offset: 0x52BC590
    bool get_IsKeywordLightCookieEnabled();
    // private System.Void set_IsKeywordLightCookieEnabled(System.Boolean value)
    // Offset: 0x52BC598
    void set_IsKeywordLightCookieEnabled(bool value);
    // public System.Void .ctor(ref UnityEngine.Rendering.Universal.LightCookieManager/Settings settings)
    // Offset: 0x52BC5A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightCookieManager* New_ctor(ByRef<::UnityEngine::Rendering::Universal::LightCookieManager::Settings> settings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::LightCookieManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightCookieManager*, creationType>(byref(settings))));
    }
    // private System.Void InitAdditionalLights(System.Int32 size)
    // Offset: 0x52BC650
    void InitAdditionalLights(int size);
    // public System.Boolean isInitialized()
    // Offset: 0x52BC88C
    bool isInitialized();
    // public System.Void Dispose()
    // Offset: 0x52BC8AC
    void Dispose();
    // public System.Int32 GetLightCookieShaderDataIndex(System.Int32 visibleLightIndex)
    // Offset: 0x52BC928
    int GetLightCookieShaderDataIndex(int visibleLightIndex);
    // public System.Void Setup(UnityEngine.Rendering.ScriptableRenderContext ctx, UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.LightData lightData)
    // Offset: 0x52BC970
    void Setup(::UnityEngine::Rendering::ScriptableRenderContext ctx, ::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::LightData> lightData);
    // private System.Boolean SetupMainLight(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.VisibleLight visibleMainLight)
    // Offset: 0x52BCBD8
    bool SetupMainLight(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::VisibleLight> visibleMainLight);
    // private UnityEngine.Rendering.Universal.LightCookieManager/LightCookieShaderFormat GetLightCookieShaderFormat(UnityEngine.Experimental.Rendering.GraphicsFormat cookieFormat)
    // Offset: 0x52BD208
    ::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderFormat GetLightCookieShaderFormat(::UnityEngine::Experimental::Rendering::GraphicsFormat cookieFormat);
    // private System.Void GetLightUVScaleOffset(ref UnityEngine.Rendering.Universal.UniversalAdditionalLightData additionalLightData, ref UnityEngine.Matrix4x4 uvTransform)
    // Offset: 0x52BD2DC
    void GetLightUVScaleOffset(ByRef<::UnityEngine::Rendering::Universal::UniversalAdditionalLightData*> additionalLightData, ByRef<::UnityEngine::Matrix4x4> uvTransform);
    // private System.Boolean SetupAdditionalLights(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.LightData lightData)
    // Offset: 0x52BCFE8
    bool SetupAdditionalLights(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::LightData> lightData);
    // private System.Int32 FilterAndValidateAdditionalLights(ref UnityEngine.Rendering.Universal.LightData lightData, UnityEngine.Rendering.Universal.LightCookieManager/LightCookieMapping[] validLightMappings)
    // Offset: 0x52BD55C
    int FilterAndValidateAdditionalLights(ByRef<::UnityEngine::Rendering::Universal::LightData> lightData, ::ArrayW<::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping> validLightMappings);
    // private System.Int32 UpdateAdditionalLightsAtlas(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.LightCookieManager/WorkSlice`1<UnityEngine.Rendering.Universal.LightCookieManager/LightCookieMapping> validLightMappings, UnityEngine.Vector4[] textureAtlasUVRects)
    // Offset: 0x52BDA54
    int UpdateAdditionalLightsAtlas(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::LightCookieManager::WorkSlice_1<::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping>> validLightMappings, ::ArrayW<::UnityEngine::Vector4> textureAtlasUVRects);
    // private System.Int32 FetchUVRects(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.LightCookieManager/WorkSlice`1<UnityEngine.Rendering.Universal.LightCookieManager/LightCookieMapping> validLightMappings, UnityEngine.Vector4[] textureAtlasUVRects, System.Int32 cookieSizeDivisor)
    // Offset: 0x52BE278
    int FetchUVRects(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::LightCookieManager::WorkSlice_1<::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping>> validLightMappings, ::ArrayW<::UnityEngine::Vector4> textureAtlasUVRects, int cookieSizeDivisor);
    // private System.UInt32 ComputeCookieRequestPixelCount(ref UnityEngine.Rendering.Universal.LightCookieManager/WorkSlice`1<UnityEngine.Rendering.Universal.LightCookieManager/LightCookieMapping> validLightMappings)
    // Offset: 0x52BE150
    uint ComputeCookieRequestPixelCount(ByRef<::UnityEngine::Rendering::Universal::LightCookieManager::WorkSlice_1<::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping>> validLightMappings);
    // private System.Int32 ApproximateCookieSizeDivisor(System.Single requestAtlasRatio)
    // Offset: 0x52BE24C
    int ApproximateCookieSizeDivisor(float requestAtlasRatio);
    // private UnityEngine.Vector4 Fetch2D(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Texture cookie, System.Int32 cookieSizeDivisor)
    // Offset: 0x52BE630
    ::UnityEngine::Vector4 Fetch2D(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Texture* cookie, int cookieSizeDivisor);
    // private UnityEngine.Vector4 FetchCube(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Texture cookie, System.Int32 cookieSizeDivisor)
    // Offset: 0x52BE4D0
    ::UnityEngine::Vector4 FetchCube(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Texture* cookie, int cookieSizeDivisor);
    // private System.Int32 ComputeOctahedralCookieSize(UnityEngine.Texture cookie)
    // Offset: 0x52BE92C
    int ComputeOctahedralCookieSize(::UnityEngine::Texture* cookie);
    // private System.Void AdjustUVRect(ref UnityEngine.Vector4 uvScaleOffset, UnityEngine.Texture cookie, ref UnityEngine.Vector2 cookieSize)
    // Offset: 0x52BE784
    void AdjustUVRect(ByRef<::UnityEngine::Vector4> uvScaleOffset, ::UnityEngine::Texture* cookie, ByRef<::UnityEngine::Vector2> cookieSize);
    // private System.Void ShrinkUVRect(ref UnityEngine.Vector4 uvScaleOffset, System.Single amountPixels, ref UnityEngine.Vector2 cookieSize)
    // Offset: 0x52BEA4C
    void ShrinkUVRect(ByRef<::UnityEngine::Vector4> uvScaleOffset, float amountPixels, ByRef<::UnityEngine::Vector2> cookieSize);
    // private System.Void UploadAdditionalLights(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.LightData lightData, ref UnityEngine.Rendering.Universal.LightCookieManager/WorkSlice`1<UnityEngine.Rendering.Universal.LightCookieManager/LightCookieMapping> validLightMappings, ref UnityEngine.Rendering.Universal.LightCookieManager/WorkSlice`1<UnityEngine.Vector4> validUvRects)
    // Offset: 0x52BDBD0
    void UploadAdditionalLights(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::LightData> lightData, ByRef<::UnityEngine::Rendering::Universal::LightCookieManager::WorkSlice_1<::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping>> validLightMappings, ByRef<::UnityEngine::Rendering::Universal::LightCookieManager::WorkSlice_1<::UnityEngine::Vector4>> validUvRects);
    // static private System.Void .cctor()
    // Offset: 0x52BEF2C
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.LightCookieManager
  #pragma pack(pop)
  static check_size<sizeof(LightCookieManager), 92 + sizeof(bool)> __UnityEngine_Rendering_Universal_LightCookieManagerSizeCheck;
  static_assert(sizeof(LightCookieManager) == 0x5D);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping, "UnityEngine.Rendering.Universal", "LightCookieManager/LightCookieMapping");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::LightCookieManager::Settings, "UnityEngine.Rendering.Universal", "LightCookieManager/Settings");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::LightCookieManager::Settings::AtlasSettings, "UnityEngine.Rendering.Universal", "LightCookieManager/Settings/AtlasSettings");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::get_IsKeywordLightCookieEnabled
// Il2CppName: get_IsKeywordLightCookieEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::LightCookieManager::*)()>(&UnityEngine::Rendering::Universal::LightCookieManager::get_IsKeywordLightCookieEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "get_IsKeywordLightCookieEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::set_IsKeywordLightCookieEnabled
// Il2CppName: set_IsKeywordLightCookieEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::*)(bool)>(&UnityEngine::Rendering::Universal::LightCookieManager::set_IsKeywordLightCookieEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "set_IsKeywordLightCookieEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::InitAdditionalLights
// Il2CppName: InitAdditionalLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::*)(int)>(&UnityEngine::Rendering::Universal::LightCookieManager::InitAdditionalLights)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "InitAdditionalLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::isInitialized
// Il2CppName: isInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::LightCookieManager::*)()>(&UnityEngine::Rendering::Universal::LightCookieManager::isInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "isInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::*)()>(&UnityEngine::Rendering::Universal::LightCookieManager::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::GetLightCookieShaderDataIndex
// Il2CppName: GetLightCookieShaderDataIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::LightCookieManager::*)(int)>(&UnityEngine::Rendering::Universal::LightCookieManager::GetLightCookieShaderDataIndex)> {
  static const MethodInfo* get() {
    static auto* visibleLightIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "GetLightCookieShaderDataIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{visibleLightIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::LightData>)>(&UnityEngine::Rendering::Universal::LightCookieManager::Setup)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* lightData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx, cmd, lightData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::SetupMainLight
// Il2CppName: SetupMainLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::LightCookieManager::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::VisibleLight>)>(&UnityEngine::Rendering::Universal::LightCookieManager::SetupMainLight)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* visibleMainLight = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VisibleLight")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "SetupMainLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, visibleMainLight});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::GetLightCookieShaderFormat
// Il2CppName: GetLightCookieShaderFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieShaderFormat (UnityEngine::Rendering::Universal::LightCookieManager::*)(::UnityEngine::Experimental::Rendering::GraphicsFormat)>(&UnityEngine::Rendering::Universal::LightCookieManager::GetLightCookieShaderFormat)> {
  static const MethodInfo* get() {
    static auto* cookieFormat = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "GetLightCookieShaderFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cookieFormat});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::GetLightUVScaleOffset
// Il2CppName: GetLightUVScaleOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::*)(ByRef<::UnityEngine::Rendering::Universal::UniversalAdditionalLightData*>, ByRef<::UnityEngine::Matrix4x4>)>(&UnityEngine::Rendering::Universal::LightCookieManager::GetLightUVScaleOffset)> {
  static const MethodInfo* get() {
    static auto* additionalLightData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalAdditionalLightData")->this_arg;
    static auto* uvTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "GetLightUVScaleOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{additionalLightData, uvTransform});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::SetupAdditionalLights
// Il2CppName: SetupAdditionalLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::LightCookieManager::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::LightData>)>(&UnityEngine::Rendering::Universal::LightCookieManager::SetupAdditionalLights)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* lightData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "SetupAdditionalLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, lightData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::FilterAndValidateAdditionalLights
// Il2CppName: FilterAndValidateAdditionalLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::LightCookieManager::*)(ByRef<::UnityEngine::Rendering::Universal::LightData>, ::ArrayW<::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping>)>(&UnityEngine::Rendering::Universal::LightCookieManager::FilterAndValidateAdditionalLights)> {
  static const MethodInfo* get() {
    static auto* lightData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightData")->this_arg;
    static auto* validLightMappings = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightCookieManager/LightCookieMapping"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "FilterAndValidateAdditionalLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lightData, validLightMappings});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::UpdateAdditionalLightsAtlas
// Il2CppName: UpdateAdditionalLightsAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::LightCookieManager::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::LightCookieManager::WorkSlice_1<::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping>>, ::ArrayW<::UnityEngine::Vector4>)>(&UnityEngine::Rendering::Universal::LightCookieManager::UpdateAdditionalLightsAtlas)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* validLightMappings = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightCookieManager/WorkSlice`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightCookieManager/LightCookieMapping")})->this_arg;
    static auto* textureAtlasUVRects = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "UpdateAdditionalLightsAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, validLightMappings, textureAtlasUVRects});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::FetchUVRects
// Il2CppName: FetchUVRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::LightCookieManager::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::LightCookieManager::WorkSlice_1<::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping>>, ::ArrayW<::UnityEngine::Vector4>, int)>(&UnityEngine::Rendering::Universal::LightCookieManager::FetchUVRects)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* validLightMappings = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightCookieManager/WorkSlice`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightCookieManager/LightCookieMapping")})->this_arg;
    static auto* textureAtlasUVRects = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    static auto* cookieSizeDivisor = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "FetchUVRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, validLightMappings, textureAtlasUVRects, cookieSizeDivisor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::ComputeCookieRequestPixelCount
// Il2CppName: ComputeCookieRequestPixelCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Rendering::Universal::LightCookieManager::*)(ByRef<::UnityEngine::Rendering::Universal::LightCookieManager::WorkSlice_1<::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping>>)>(&UnityEngine::Rendering::Universal::LightCookieManager::ComputeCookieRequestPixelCount)> {
  static const MethodInfo* get() {
    static auto* validLightMappings = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightCookieManager/WorkSlice`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightCookieManager/LightCookieMapping")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "ComputeCookieRequestPixelCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{validLightMappings});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::ApproximateCookieSizeDivisor
// Il2CppName: ApproximateCookieSizeDivisor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::LightCookieManager::*)(float)>(&UnityEngine::Rendering::Universal::LightCookieManager::ApproximateCookieSizeDivisor)> {
  static const MethodInfo* get() {
    static auto* requestAtlasRatio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "ApproximateCookieSizeDivisor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestAtlasRatio});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::Fetch2D
// Il2CppName: Fetch2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (UnityEngine::Rendering::Universal::LightCookieManager::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Texture*, int)>(&UnityEngine::Rendering::Universal::LightCookieManager::Fetch2D)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cookie = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* cookieSizeDivisor = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "Fetch2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cookie, cookieSizeDivisor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::FetchCube
// Il2CppName: FetchCube
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (UnityEngine::Rendering::Universal::LightCookieManager::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Texture*, int)>(&UnityEngine::Rendering::Universal::LightCookieManager::FetchCube)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cookie = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* cookieSizeDivisor = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "FetchCube", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cookie, cookieSizeDivisor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::ComputeOctahedralCookieSize
// Il2CppName: ComputeOctahedralCookieSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::LightCookieManager::*)(::UnityEngine::Texture*)>(&UnityEngine::Rendering::Universal::LightCookieManager::ComputeOctahedralCookieSize)> {
  static const MethodInfo* get() {
    static auto* cookie = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "ComputeOctahedralCookieSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cookie});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::AdjustUVRect
// Il2CppName: AdjustUVRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::*)(ByRef<::UnityEngine::Vector4>, ::UnityEngine::Texture*, ByRef<::UnityEngine::Vector2>)>(&UnityEngine::Rendering::Universal::LightCookieManager::AdjustUVRect)> {
  static const MethodInfo* get() {
    static auto* uvScaleOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* cookie = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* cookieSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "AdjustUVRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvScaleOffset, cookie, cookieSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::ShrinkUVRect
// Il2CppName: ShrinkUVRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::*)(ByRef<::UnityEngine::Vector4>, float, ByRef<::UnityEngine::Vector2>)>(&UnityEngine::Rendering::Universal::LightCookieManager::ShrinkUVRect)> {
  static const MethodInfo* get() {
    static auto* uvScaleOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* amountPixels = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* cookieSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "ShrinkUVRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvScaleOffset, amountPixels, cookieSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::UploadAdditionalLights
// Il2CppName: UploadAdditionalLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::LightCookieManager::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::LightData>, ByRef<::UnityEngine::Rendering::Universal::LightCookieManager::WorkSlice_1<::UnityEngine::Rendering::Universal::LightCookieManager::LightCookieMapping>>, ByRef<::UnityEngine::Rendering::Universal::LightCookieManager::WorkSlice_1<::UnityEngine::Vector4>>)>(&UnityEngine::Rendering::Universal::LightCookieManager::UploadAdditionalLights)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* lightData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightData")->this_arg;
    static auto* validLightMappings = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightCookieManager/WorkSlice`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightCookieManager/LightCookieMapping")})->this_arg;
    static auto* validUvRects = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightCookieManager/WorkSlice`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), "UploadAdditionalLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, lightData, validLightMappings, validUvRects});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::LightCookieManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::LightCookieManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::LightCookieManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
