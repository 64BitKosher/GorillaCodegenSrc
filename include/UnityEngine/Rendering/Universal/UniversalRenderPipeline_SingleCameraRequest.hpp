// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.UniversalRenderPipeline
#include "UnityEngine/Rendering/Universal/UniversalRenderPipeline.hpp"
// Including type: UnityEngine.CubemapFace
#include "UnityEngine/CubemapFace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::UniversalRenderPipeline::SingleCameraRequest);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UniversalRenderPipeline::SingleCameraRequest*, "UnityEngine.Rendering.Universal", "UniversalRenderPipeline/SingleCameraRequest");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.UniversalRenderPipeline/SingleCameraRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class UniversalRenderPipeline::SingleCameraRequest : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.RenderTexture destination
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::RenderTexture* destination;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // public System.Int32 mipLevel
    // Size: 0x4
    // Offset: 0x18
    int mipLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.CubemapFace face
    // Size: 0x4
    // Offset: 0x1C
    ::UnityEngine::CubemapFace face;
    // Field size check
    static_assert(sizeof(::UnityEngine::CubemapFace) == 0x4);
    // public System.Int32 slice
    // Size: 0x4
    // Offset: 0x20
    int slice;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.RenderTexture destination
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_destination();
    // Get instance field reference: public System.Int32 mipLevel
    [[deprecated("Use field access instead!")]] int& dyn_mipLevel();
    // Get instance field reference: public UnityEngine.CubemapFace face
    [[deprecated("Use field access instead!")]] ::UnityEngine::CubemapFace& dyn_face();
    // Get instance field reference: public System.Int32 slice
    [[deprecated("Use field access instead!")]] int& dyn_slice();
    // public System.Void .ctor()
    // Offset: 0x52F7AF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UniversalRenderPipeline::SingleCameraRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UniversalRenderPipeline::SingleCameraRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UniversalRenderPipeline::SingleCameraRequest*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.UniversalRenderPipeline/SingleCameraRequest
  #pragma pack(pop)
  static check_size<sizeof(UniversalRenderPipeline::SingleCameraRequest), 32 + sizeof(int)> __UnityEngine_Rendering_Universal_UniversalRenderPipeline_SingleCameraRequestSizeCheck;
  static_assert(sizeof(UniversalRenderPipeline::SingleCameraRequest) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipeline::SingleCameraRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
