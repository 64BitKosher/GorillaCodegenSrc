// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: IntPoint
  struct IntPoint;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DoublePoint
  struct DoublePoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DoublePoint, "UnityEngine.Rendering.Universal", "DoublePoint");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.DoublePoint
  // [TokenAttribute] Offset: FFFFFFFF
  struct DoublePoint/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Double X
    // Size: 0x8
    // Offset: 0x0
    double X;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double Y
    // Size: 0x8
    // Offset: 0x8
    double Y;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating value type constructor for type: DoublePoint
    constexpr DoublePoint(double X_ = {}, double Y_ = {}) noexcept : X{X_}, Y{Y_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Double X
    [[deprecated("Use field access instead!")]] double& dyn_X();
    // Get instance field reference: public System.Double Y
    [[deprecated("Use field access instead!")]] double& dyn_Y();
    // public System.Void .ctor(System.Double x, System.Double y)
    // Offset: 0x526C2C4
    // ABORTED: conflicts with another method.  DoublePoint(double x, double y);
    // public System.Void .ctor(UnityEngine.Rendering.Universal.DoublePoint dp)
    // Offset: 0x526C2CC
    // ABORTED: is copy constructor.  DoublePoint(::UnityEngine::Rendering::Universal::DoublePoint dp);
    // public System.Void .ctor(UnityEngine.Rendering.Universal.IntPoint ip)
    // Offset: 0x526C2D4
    DoublePoint(::UnityEngine::Rendering::Universal::IntPoint ip);
  }; // UnityEngine.Rendering.Universal.DoublePoint
  #pragma pack(pop)
  static check_size<sizeof(DoublePoint), 8 + sizeof(double)> __UnityEngine_Rendering_Universal_DoublePointSizeCheck;
  static_assert(sizeof(DoublePoint) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DoublePoint::DoublePoint
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DoublePoint::DoublePoint
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DoublePoint::DoublePoint
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
