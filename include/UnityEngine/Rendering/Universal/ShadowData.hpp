// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ShadowData
  struct ShadowData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ShadowData, "UnityEngine.Rendering.Universal", "ShadowData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x4A
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.ShadowData
  // [TokenAttribute] Offset: FFFFFFFF
  struct ShadowData/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Boolean supportsMainLightShadows
    // Size: 0x1
    // Offset: 0x0
    bool supportsMainLightShadows;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean requiresScreenSpaceShadowResolve
    // Size: 0x1
    // Offset: 0x1
    bool requiresScreenSpaceShadowResolve;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: requiresScreenSpaceShadowResolve and: mainLightShadowmapWidth
    char __padding1[0x2] = {};
    // public System.Int32 mainLightShadowmapWidth
    // Size: 0x4
    // Offset: 0x4
    int mainLightShadowmapWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 mainLightShadowmapHeight
    // Size: 0x4
    // Offset: 0x8
    int mainLightShadowmapHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 mainLightShadowCascadesCount
    // Size: 0x4
    // Offset: 0xC
    int mainLightShadowCascadesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Vector3 mainLightShadowCascadesSplit
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 mainLightShadowCascadesSplit;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single mainLightShadowCascadeBorder
    // Size: 0x4
    // Offset: 0x1C
    float mainLightShadowCascadeBorder;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean supportsAdditionalLightShadows
    // Size: 0x1
    // Offset: 0x20
    bool supportsAdditionalLightShadows;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: supportsAdditionalLightShadows and: additionalLightsShadowmapWidth
    char __padding7[0x3] = {};
    // public System.Int32 additionalLightsShadowmapWidth
    // Size: 0x4
    // Offset: 0x24
    int additionalLightsShadowmapWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 additionalLightsShadowmapHeight
    // Size: 0x4
    // Offset: 0x28
    int additionalLightsShadowmapHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean supportsSoftShadows
    // Size: 0x1
    // Offset: 0x2C
    bool supportsSoftShadows;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: supportsSoftShadows and: shadowmapDepthBufferBits
    char __padding10[0x3] = {};
    // public System.Int32 shadowmapDepthBufferBits
    // Size: 0x4
    // Offset: 0x30
    int shadowmapDepthBufferBits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: shadowmapDepthBufferBits and: bias
    char __padding11[0x4] = {};
    // public System.Collections.Generic.List`1<UnityEngine.Vector4> bias
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* bias;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector4>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Int32> resolution
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<int>* resolution;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // System.Boolean isKeywordAdditionalLightShadowsEnabled
    // Size: 0x1
    // Offset: 0x48
    bool isKeywordAdditionalLightShadowsEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean isKeywordSoftShadowsEnabled
    // Size: 0x1
    // Offset: 0x49
    bool isKeywordSoftShadowsEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: ShadowData
    constexpr ShadowData(bool supportsMainLightShadows_ = {}, bool requiresScreenSpaceShadowResolve_ = {}, int mainLightShadowmapWidth_ = {}, int mainLightShadowmapHeight_ = {}, int mainLightShadowCascadesCount_ = {}, ::UnityEngine::Vector3 mainLightShadowCascadesSplit_ = {}, float mainLightShadowCascadeBorder_ = {}, bool supportsAdditionalLightShadows_ = {}, int additionalLightsShadowmapWidth_ = {}, int additionalLightsShadowmapHeight_ = {}, bool supportsSoftShadows_ = {}, int shadowmapDepthBufferBits_ = {}, ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* bias_ = {}, ::System::Collections::Generic::List_1<int>* resolution_ = {}, bool isKeywordAdditionalLightShadowsEnabled_ = {}, bool isKeywordSoftShadowsEnabled_ = {}) noexcept : supportsMainLightShadows{supportsMainLightShadows_}, requiresScreenSpaceShadowResolve{requiresScreenSpaceShadowResolve_}, mainLightShadowmapWidth{mainLightShadowmapWidth_}, mainLightShadowmapHeight{mainLightShadowmapHeight_}, mainLightShadowCascadesCount{mainLightShadowCascadesCount_}, mainLightShadowCascadesSplit{mainLightShadowCascadesSplit_}, mainLightShadowCascadeBorder{mainLightShadowCascadeBorder_}, supportsAdditionalLightShadows{supportsAdditionalLightShadows_}, additionalLightsShadowmapWidth{additionalLightsShadowmapWidth_}, additionalLightsShadowmapHeight{additionalLightsShadowmapHeight_}, supportsSoftShadows{supportsSoftShadows_}, shadowmapDepthBufferBits{shadowmapDepthBufferBits_}, bias{bias_}, resolution{resolution_}, isKeywordAdditionalLightShadowsEnabled{isKeywordAdditionalLightShadowsEnabled_}, isKeywordSoftShadowsEnabled{isKeywordSoftShadowsEnabled_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Boolean supportsMainLightShadows
    [[deprecated("Use field access instead!")]] bool& dyn_supportsMainLightShadows();
    // Get instance field reference: public System.Boolean requiresScreenSpaceShadowResolve
    [[deprecated("Use field access instead!")]] bool& dyn_requiresScreenSpaceShadowResolve();
    // Get instance field reference: public System.Int32 mainLightShadowmapWidth
    [[deprecated("Use field access instead!")]] int& dyn_mainLightShadowmapWidth();
    // Get instance field reference: public System.Int32 mainLightShadowmapHeight
    [[deprecated("Use field access instead!")]] int& dyn_mainLightShadowmapHeight();
    // Get instance field reference: public System.Int32 mainLightShadowCascadesCount
    [[deprecated("Use field access instead!")]] int& dyn_mainLightShadowCascadesCount();
    // Get instance field reference: public UnityEngine.Vector3 mainLightShadowCascadesSplit
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_mainLightShadowCascadesSplit();
    // Get instance field reference: public System.Single mainLightShadowCascadeBorder
    [[deprecated("Use field access instead!")]] float& dyn_mainLightShadowCascadeBorder();
    // Get instance field reference: public System.Boolean supportsAdditionalLightShadows
    [[deprecated("Use field access instead!")]] bool& dyn_supportsAdditionalLightShadows();
    // Get instance field reference: public System.Int32 additionalLightsShadowmapWidth
    [[deprecated("Use field access instead!")]] int& dyn_additionalLightsShadowmapWidth();
    // Get instance field reference: public System.Int32 additionalLightsShadowmapHeight
    [[deprecated("Use field access instead!")]] int& dyn_additionalLightsShadowmapHeight();
    // Get instance field reference: public System.Boolean supportsSoftShadows
    [[deprecated("Use field access instead!")]] bool& dyn_supportsSoftShadows();
    // Get instance field reference: public System.Int32 shadowmapDepthBufferBits
    [[deprecated("Use field access instead!")]] int& dyn_shadowmapDepthBufferBits();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector4> bias
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*& dyn_bias();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> resolution
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_resolution();
    // Get instance field reference: System.Boolean isKeywordAdditionalLightShadowsEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_isKeywordAdditionalLightShadowsEnabled();
    // Get instance field reference: System.Boolean isKeywordSoftShadowsEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_isKeywordSoftShadowsEnabled();
  }; // UnityEngine.Rendering.Universal.ShadowData
  #pragma pack(pop)
  static check_size<sizeof(ShadowData), 73 + sizeof(bool)> __UnityEngine_Rendering_Universal_ShadowDataSizeCheck;
  static_assert(sizeof(ShadowData) == 0x4A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
