// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Mathematics.float4
#include "Unity/Mathematics/float4.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: PreTile
  struct PreTile;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::PreTile, "UnityEngine.Rendering.Universal", "PreTile");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x40
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.PreTile
  // [TokenAttribute] Offset: FFFFFFFF
  struct PreTile/*, public ::System::ValueType*/ {
    public:
    public:
    // public Unity.Mathematics.float4 planeLeft
    // Size: 0x10
    // Offset: 0x0
    ::Unity::Mathematics::float4 planeLeft;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float4) == 0x10);
    // public Unity.Mathematics.float4 planeRight
    // Size: 0x10
    // Offset: 0x10
    ::Unity::Mathematics::float4 planeRight;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float4) == 0x10);
    // public Unity.Mathematics.float4 planeBottom
    // Size: 0x10
    // Offset: 0x20
    ::Unity::Mathematics::float4 planeBottom;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float4) == 0x10);
    // public Unity.Mathematics.float4 planeTop
    // Size: 0x10
    // Offset: 0x30
    ::Unity::Mathematics::float4 planeTop;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float4) == 0x10);
    public:
    // Creating value type constructor for type: PreTile
    constexpr PreTile(::Unity::Mathematics::float4 planeLeft_ = {}, ::Unity::Mathematics::float4 planeRight_ = {}, ::Unity::Mathematics::float4 planeBottom_ = {}, ::Unity::Mathematics::float4 planeTop_ = {}) noexcept : planeLeft{planeLeft_}, planeRight{planeRight_}, planeBottom{planeBottom_}, planeTop{planeTop_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Unity.Mathematics.float4 planeLeft
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float4& dyn_planeLeft();
    // Get instance field reference: public Unity.Mathematics.float4 planeRight
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float4& dyn_planeRight();
    // Get instance field reference: public Unity.Mathematics.float4 planeBottom
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float4& dyn_planeBottom();
    // Get instance field reference: public Unity.Mathematics.float4 planeTop
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float4& dyn_planeTop();
  }; // UnityEngine.Rendering.Universal.PreTile
  #pragma pack(pop)
  static check_size<sizeof(PreTile), 48 + sizeof(::Unity::Mathematics::float4)> __UnityEngine_Rendering_Universal_PreTileSizeCheck;
  static_assert(sizeof(PreTile) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
