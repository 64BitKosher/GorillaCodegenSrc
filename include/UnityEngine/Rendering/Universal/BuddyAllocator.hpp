// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: Unity.Collections.Allocator
#include "Unity/Collections/Allocator.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: BuddyAllocation
  struct BuddyAllocation;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: BuddyAllocator
  struct BuddyAllocator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::BuddyAllocator, "UnityEngine.Rendering.Universal", "BuddyAllocator");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.BuddyAllocator
  // [TokenAttribute] Offset: FFFFFFFF
  struct BuddyAllocator/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::BuddyAllocator::Header
    struct Header;
    public:
    // private System.Void* m_Data
    // Size: 0x8
    // Offset: 0x0
    void* m_Data;
    // Field size check
    static_assert(sizeof(void*) == 0x8);
    // private System.ValueTuple`2<System.Int32,System.Int32> m_ActiveFreeMaskCounts
    // Size: 0xFFFFFFFF
    // Offset: 0x8
    ::System::ValueTuple_2<int, int> m_ActiveFreeMaskCounts;
    // private System.ValueTuple`2<System.Int32,System.Int32> m_FreeMasksStorage
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::System::ValueTuple_2<int, int> m_FreeMasksStorage;
    // private System.ValueTuple`2<System.Int32,System.Int32> m_FreeMaskIndicesStorage
    // Size: 0xFFFFFFFF
    // Offset: 0x18
    ::System::ValueTuple_2<int, int> m_FreeMaskIndicesStorage;
    // private Unity.Collections.Allocator m_Allocator
    // Size: 0x4
    // Offset: 0x20
    ::Unity::Collections::Allocator m_Allocator;
    // Field size check
    static_assert(sizeof(::Unity::Collections::Allocator) == 0x4);
    public:
    // Creating value type constructor for type: BuddyAllocator
    constexpr BuddyAllocator(void* m_Data_ = {}, ::System::ValueTuple_2<int, int> m_ActiveFreeMaskCounts_ = {}, ::System::ValueTuple_2<int, int> m_FreeMasksStorage_ = {}, ::System::ValueTuple_2<int, int> m_FreeMaskIndicesStorage_ = {}, ::Unity::Collections::Allocator m_Allocator_ = {}) noexcept : m_Data{m_Data_}, m_ActiveFreeMaskCounts{m_ActiveFreeMaskCounts_}, m_FreeMasksStorage{m_FreeMasksStorage_}, m_FreeMaskIndicesStorage{m_FreeMaskIndicesStorage_}, m_Allocator{m_Allocator_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Void* m_Data
    [[deprecated("Use field access instead!")]] void*& dyn_m_Data();
    // Get instance field reference: private System.ValueTuple`2<System.Int32,System.Int32> m_ActiveFreeMaskCounts
    [[deprecated("Use field access instead!")]] ::System::ValueTuple_2<int, int>& dyn_m_ActiveFreeMaskCounts();
    // Get instance field reference: private System.ValueTuple`2<System.Int32,System.Int32> m_FreeMasksStorage
    [[deprecated("Use field access instead!")]] ::System::ValueTuple_2<int, int>& dyn_m_FreeMasksStorage();
    // Get instance field reference: private System.ValueTuple`2<System.Int32,System.Int32> m_FreeMaskIndicesStorage
    [[deprecated("Use field access instead!")]] ::System::ValueTuple_2<int, int>& dyn_m_FreeMaskIndicesStorage();
    // Get instance field reference: private Unity.Collections.Allocator m_Allocator
    [[deprecated("Use field access instead!")]] ::Unity::Collections::Allocator& dyn_m_Allocator();
    // private UnityEngine.Rendering.Universal.BuddyAllocator/Header get_header()
    // Offset: 0x52BF918
    ::UnityEngine::Rendering::Universal::BuddyAllocator::Header get_header();
    // private Unity.Collections.NativeArray`1<System.Int32> get_freeMaskCounts()
    // Offset: 0x52BF954
    ::Unity::Collections::NativeArray_1<int> get_freeMaskCounts();
    // private Unity.Collections.NativeArray`1<System.UInt64> get_freeMasksStorage()
    // Offset: 0x52BF9A0
    ::Unity::Collections::NativeArray_1<uint64_t> get_freeMasksStorage();
    // private Unity.Collections.NativeArray`1<System.UInt64> FreeMasks(System.Int32 level)
    // Offset: 0x52BF9EC
    ::Unity::Collections::NativeArray_1<uint64_t> FreeMasks(int level);
    // private Unity.Collections.NativeArray`1<System.Int32> get_freeMaskIndicesStorage()
    // Offset: 0x52BFB2C
    ::Unity::Collections::NativeArray_1<int> get_freeMaskIndicesStorage();
    // private Unity.Collections.NativeArray`1<System.Int32> FreeMaskIndices(System.Int32 level)
    // Offset: 0x52BFB78
    ::Unity::Collections::NativeArray_1<int> FreeMaskIndices(int level);
    // public System.Int32 get_levelCount()
    // Offset: 0x52BFC58
    int get_levelCount();
    // public System.Void .ctor(System.Int32 levelCount, System.Int32 branchingOrder, Unity.Collections.Allocator allocator)
    // Offset: 0x52BFC98
    BuddyAllocator(int levelCount, int branchingOrder, ::Unity::Collections::Allocator allocator);
    // public System.Boolean TryAllocate(System.Int32 requestedLevel, out UnityEngine.Rendering.Universal.BuddyAllocation allocation)
    // Offset: 0x52BFE04
    bool TryAllocate(int requestedLevel, ByRef<::UnityEngine::Rendering::Universal::BuddyAllocation> allocation);
    // public System.Void Free(UnityEngine.Rendering.Universal.BuddyAllocation allocation)
    // Offset: 0x52C0034
    void Free(::UnityEngine::Rendering::Universal::BuddyAllocation allocation);
    // public System.Void Dispose()
    // Offset: 0x52C0194
    void Dispose();
    // private Unity.Collections.NativeArray`1<T> GetNativeArray(System.Int32 offset, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::Unity::Collections::NativeArray_1<T> GetNativeArray(int offset, int length) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::BuddyAllocator::GetNativeArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetNativeArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Unity::Collections::NativeArray_1<T>, false>(this, ___generic__method, offset, length);
    }
    // static private System.Int32 LevelOffset(System.Int32 level, System.Int32 branchingOrder)
    // Offset: 0x52C01BC
    static int LevelOffset(int level, int branchingOrder);
    // static private System.Int32 LevelLength(System.Int32 level, System.Int32 branchingOrder)
    // Offset: 0x52C01E0
    static int LevelLength(int level, int branchingOrder);
    // static private System.Int32 LevelOffset64(System.Int32 level, System.Int32 branchingOrder)
    // Offset: 0x52BFACC
    static int LevelOffset64(int level, int branchingOrder);
    // static private System.Int32 LevelLength64(System.Int32 level, System.Int32 branchingOrder)
    // Offset: 0x52BFB08
    static int LevelLength64(int level, int branchingOrder);
    // static private System.ValueTuple`2<System.Int32,System.Int32> AllocateRange(System.Int32 length, ref System.Int32 dataSize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::ValueTuple_2<int, int> AllocateRange(int length, ByRef<int> dataSize) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::BuddyAllocator::AllocateRange");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering.Universal", "BuddyAllocator", "AllocateRange", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(dataSize)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::ValueTuple_2<int, int>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, length, byref(dataSize));
    }
    // static private System.Int32 AlignForward(System.Int32 offset, System.Int32 alignment)
    // Offset: 0x52C0204
    static int AlignForward(int offset, int alignment);
    // static private System.Void* PtrAdd(System.Void* ptr, System.Int32 bytes)
    // Offset: 0x52C0220
    static void* PtrAdd(void* ptr, int bytes);
    // static private System.Int32 Pow2(System.Int32 n)
    // Offset: 0x52C0028
    static int Pow2(int n);
    // static private System.Int32 Pow2N(System.Int32 x, System.Int32 n)
    // Offset: 0x52C01F4
    static int Pow2N(int x, int n);
  }; // UnityEngine.Rendering.Universal.BuddyAllocator
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::get_header
// Il2CppName: get_header
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::BuddyAllocator::Header (UnityEngine::Rendering::Universal::BuddyAllocator::*)()>(&UnityEngine::Rendering::Universal::BuddyAllocator::get_header)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "get_header", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::get_freeMaskCounts
// Il2CppName: get_freeMaskCounts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<int> (UnityEngine::Rendering::Universal::BuddyAllocator::*)()>(&UnityEngine::Rendering::Universal::BuddyAllocator::get_freeMaskCounts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "get_freeMaskCounts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::get_freeMasksStorage
// Il2CppName: get_freeMasksStorage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<uint64_t> (UnityEngine::Rendering::Universal::BuddyAllocator::*)()>(&UnityEngine::Rendering::Universal::BuddyAllocator::get_freeMasksStorage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "get_freeMasksStorage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::FreeMasks
// Il2CppName: FreeMasks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<uint64_t> (UnityEngine::Rendering::Universal::BuddyAllocator::*)(int)>(&UnityEngine::Rendering::Universal::BuddyAllocator::FreeMasks)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "FreeMasks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::get_freeMaskIndicesStorage
// Il2CppName: get_freeMaskIndicesStorage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<int> (UnityEngine::Rendering::Universal::BuddyAllocator::*)()>(&UnityEngine::Rendering::Universal::BuddyAllocator::get_freeMaskIndicesStorage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "get_freeMaskIndicesStorage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::FreeMaskIndices
// Il2CppName: FreeMaskIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<int> (UnityEngine::Rendering::Universal::BuddyAllocator::*)(int)>(&UnityEngine::Rendering::Universal::BuddyAllocator::FreeMaskIndices)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "FreeMaskIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::get_levelCount
// Il2CppName: get_levelCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::BuddyAllocator::*)()>(&UnityEngine::Rendering::Universal::BuddyAllocator::get_levelCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "get_levelCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::BuddyAllocator
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::TryAllocate
// Il2CppName: TryAllocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::BuddyAllocator::*)(int, ByRef<::UnityEngine::Rendering::Universal::BuddyAllocation>)>(&UnityEngine::Rendering::Universal::BuddyAllocator::TryAllocate)> {
  static const MethodInfo* get() {
    static auto* requestedLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* allocation = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "BuddyAllocation")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "TryAllocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestedLevel, allocation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::Free
// Il2CppName: Free
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::BuddyAllocator::*)(::UnityEngine::Rendering::Universal::BuddyAllocation)>(&UnityEngine::Rendering::Universal::BuddyAllocator::Free)> {
  static const MethodInfo* get() {
    static auto* allocation = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "BuddyAllocation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "Free", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allocation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::BuddyAllocator::*)()>(&UnityEngine::Rendering::Universal::BuddyAllocator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::GetNativeArray
// Il2CppName: GetNativeArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::LevelOffset
// Il2CppName: LevelOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&UnityEngine::Rendering::Universal::BuddyAllocator::LevelOffset)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* branchingOrder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "LevelOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, branchingOrder});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::LevelLength
// Il2CppName: LevelLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&UnityEngine::Rendering::Universal::BuddyAllocator::LevelLength)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* branchingOrder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "LevelLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, branchingOrder});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::LevelOffset64
// Il2CppName: LevelOffset64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&UnityEngine::Rendering::Universal::BuddyAllocator::LevelOffset64)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* branchingOrder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "LevelOffset64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, branchingOrder});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::LevelLength64
// Il2CppName: LevelLength64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&UnityEngine::Rendering::Universal::BuddyAllocator::LevelLength64)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* branchingOrder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "LevelLength64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, branchingOrder});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::AllocateRange
// Il2CppName: AllocateRange
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::AlignForward
// Il2CppName: AlignForward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&UnityEngine::Rendering::Universal::BuddyAllocator::AlignForward)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* alignment = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "AlignForward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, alignment});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::PtrAdd
// Il2CppName: PtrAdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void* (*)(void*, int)>(&UnityEngine::Rendering::Universal::BuddyAllocator::PtrAdd)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "PtrAdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, bytes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::Pow2
// Il2CppName: Pow2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&UnityEngine::Rendering::Universal::BuddyAllocator::Pow2)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "Pow2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocator::Pow2N
// Il2CppName: Pow2N
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&UnityEngine::Rendering::Universal::BuddyAllocator::Pow2N)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocator), "Pow2N", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, n});
  }
};
