// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderPass
#include "UnityEngine/Rendering/Universal/ScriptableRenderPass.hpp"
// Including type: UnityEngine.Rendering.FilteringSettings
#include "UnityEngine/Rendering/FilteringSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalDrawGBufferSystem
  class DecalDrawGBufferSystem;
  // Forward declaring type: DecalScreenSpaceSettings
  class DecalScreenSpaceSettings;
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal::Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // Forward declaring type: DeferredLights
  class DeferredLights;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTextureDescriptor
  struct RenderTextureDescriptor;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalGBufferRenderPass
  class DecalGBufferRenderPass;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::DecalGBufferRenderPass);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DecalGBufferRenderPass*, "UnityEngine.Rendering.Universal", "DecalGBufferRenderPass");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.DecalGBufferRenderPass
  // [TokenAttribute] Offset: FFFFFFFF
  class DecalGBufferRenderPass : public ::UnityEngine::Rendering::Universal::ScriptableRenderPass {
    public:
    public:
    // private UnityEngine.Rendering.FilteringSettings m_FilteringSettings
    // Size: 0x18
    // Offset: 0xE0
    ::UnityEngine::Rendering::FilteringSettings m_FilteringSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::FilteringSettings) == 0x18);
    // private UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Rendering::ProfilingSampler* m_ProfilingSampler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> m_ShaderTagIdList
    // Size: 0x8
    // Offset: 0x100
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* m_ShaderTagIdList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalDrawGBufferSystem m_DrawSystem
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::Rendering::Universal::DecalDrawGBufferSystem* m_DrawSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalDrawGBufferSystem*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalScreenSpaceSettings m_Settings
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::Rendering::Universal::DecalScreenSpaceSettings* m_Settings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalScreenSpaceSettings*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.DeferredLights m_DeferredLights
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Rendering::Universal::Internal::DeferredLights* m_DeferredLights;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::DeferredLights*) == 0x8);
    // private UnityEngine.Rendering.RTHandle[] m_GbufferAttachments
    // Size: 0x8
    // Offset: 0x120
    ::ArrayW<::UnityEngine::Rendering::RTHandle*> m_GbufferAttachments;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::RTHandle*>) == 0x8);
    // private System.Boolean m_DecalLayers
    // Size: 0x1
    // Offset: 0x128
    bool m_DecalLayers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Rendering.FilteringSettings m_FilteringSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::FilteringSettings& dyn_m_FilteringSettings();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_m_ProfilingSampler();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> m_ShaderTagIdList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>*& dyn_m_ShaderTagIdList();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalDrawGBufferSystem m_DrawSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalDrawGBufferSystem*& dyn_m_DrawSystem();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalScreenSpaceSettings m_Settings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalScreenSpaceSettings*& dyn_m_Settings();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.DeferredLights m_DeferredLights
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::DeferredLights*& dyn_m_DeferredLights();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle[] m_GbufferAttachments
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::RTHandle*>& dyn_m_GbufferAttachments();
    // Get instance field reference: private System.Boolean m_DecalLayers
    [[deprecated("Use field access instead!")]] bool& dyn_m_DecalLayers();
    // public System.Void .ctor(UnityEngine.Rendering.Universal.DecalScreenSpaceSettings settings, UnityEngine.Rendering.Universal.DecalDrawGBufferSystem drawSystem, System.Boolean decalLayers)
    // Offset: 0x52A9D60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DecalGBufferRenderPass* New_ctor(::UnityEngine::Rendering::Universal::DecalScreenSpaceSettings* settings, ::UnityEngine::Rendering::Universal::DecalDrawGBufferSystem* drawSystem, bool decalLayers) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DecalGBufferRenderPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DecalGBufferRenderPass*, creationType>(settings, drawSystem, decalLayers)));
    }
    // System.Void Setup(UnityEngine.Rendering.Universal.Internal.DeferredLights deferredLights)
    // Offset: 0x52AA584
    void Setup(::UnityEngine::Rendering::Universal::Internal::DeferredLights* deferredLights);
    // public override System.Void Configure(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.RenderTextureDescriptor cameraTextureDescriptor)
    // Offset: 0x52AA594
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Configure(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.RenderTextureDescriptor cameraTextureDescriptor)
    void Configure(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::RenderTextureDescriptor cameraTextureDescriptor);
    // public override System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52AAC0C
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void Execute(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public override System.Void OnCameraCleanup(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52AAFBC
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::OnCameraCleanup(UnityEngine.Rendering.CommandBuffer cmd)
    void OnCameraCleanup(::UnityEngine::Rendering::CommandBuffer* cmd);
  }; // UnityEngine.Rendering.Universal.DecalGBufferRenderPass
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalGBufferRenderPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalGBufferRenderPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalGBufferRenderPass::*)(::UnityEngine::Rendering::Universal::Internal::DeferredLights*)>(&UnityEngine::Rendering::Universal::DecalGBufferRenderPass::Setup)> {
  static const MethodInfo* get() {
    static auto* deferredLights = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.Internal", "DeferredLights")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalGBufferRenderPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deferredLights});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalGBufferRenderPass::Configure
// Il2CppName: Configure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalGBufferRenderPass::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::RenderTextureDescriptor)>(&UnityEngine::Rendering::Universal::DecalGBufferRenderPass::Configure)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cameraTextureDescriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalGBufferRenderPass*), "Configure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cameraTextureDescriptor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalGBufferRenderPass::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalGBufferRenderPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::DecalGBufferRenderPass::Execute)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalGBufferRenderPass*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalGBufferRenderPass::OnCameraCleanup
// Il2CppName: OnCameraCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalGBufferRenderPass::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::DecalGBufferRenderPass::OnCameraCleanup)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalGBufferRenderPass*), "OnCameraCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
