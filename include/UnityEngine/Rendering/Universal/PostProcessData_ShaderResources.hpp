// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.PostProcessData
#include "UnityEngine/Rendering/Universal/PostProcessData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::PostProcessData::ShaderResources);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::PostProcessData::ShaderResources*, "UnityEngine.Rendering.Universal", "PostProcessData/ShaderResources");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.PostProcessData/ShaderResources
  // [TokenAttribute] Offset: FFFFFFFF
  // [ReloadGroupAttribute] Offset: FFFFFFFF
  class PostProcessData::ShaderResources : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Shader stopNanPS
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Shader* stopNanPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader subpixelMorphologicalAntialiasingPS
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Shader* subpixelMorphologicalAntialiasingPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader gaussianDepthOfFieldPS
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Shader* gaussianDepthOfFieldPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader bokehDepthOfFieldPS
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Shader* bokehDepthOfFieldPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader cameraMotionBlurPS
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Shader* cameraMotionBlurPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader paniniProjectionPS
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Shader* paniniProjectionPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader lutBuilderLdrPS
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Shader* lutBuilderLdrPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader lutBuilderHdrPS
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Shader* lutBuilderHdrPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader bloomPS
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Shader* bloomPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader temporalAntialiasingPS
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Shader* temporalAntialiasingPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader LensFlareDataDrivenPS
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Shader* LensFlareDataDrivenPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader scalingSetupPS
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Shader* scalingSetupPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader easuPS
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Shader* easuPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader uberPostPS
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Shader* uberPostPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader finalPostPassPS
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Shader* finalPostPassPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Shader stopNanPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_stopNanPS();
    // Get instance field reference: public UnityEngine.Shader subpixelMorphologicalAntialiasingPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_subpixelMorphologicalAntialiasingPS();
    // Get instance field reference: public UnityEngine.Shader gaussianDepthOfFieldPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_gaussianDepthOfFieldPS();
    // Get instance field reference: public UnityEngine.Shader bokehDepthOfFieldPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_bokehDepthOfFieldPS();
    // Get instance field reference: public UnityEngine.Shader cameraMotionBlurPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_cameraMotionBlurPS();
    // Get instance field reference: public UnityEngine.Shader paniniProjectionPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_paniniProjectionPS();
    // Get instance field reference: public UnityEngine.Shader lutBuilderLdrPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_lutBuilderLdrPS();
    // Get instance field reference: public UnityEngine.Shader lutBuilderHdrPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_lutBuilderHdrPS();
    // Get instance field reference: public UnityEngine.Shader bloomPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_bloomPS();
    // Get instance field reference: public UnityEngine.Shader temporalAntialiasingPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_temporalAntialiasingPS();
    // Get instance field reference: public UnityEngine.Shader LensFlareDataDrivenPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_LensFlareDataDrivenPS();
    // Get instance field reference: public UnityEngine.Shader scalingSetupPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_scalingSetupPS();
    // Get instance field reference: public UnityEngine.Shader easuPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_easuPS();
    // Get instance field reference: public UnityEngine.Shader uberPostPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_uberPostPS();
    // Get instance field reference: public UnityEngine.Shader finalPostPassPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_finalPostPassPS();
    // public System.Void .ctor()
    // Offset: 0x5291CEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PostProcessData::ShaderResources* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::PostProcessData::ShaderResources::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PostProcessData::ShaderResources*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.PostProcessData/ShaderResources
  #pragma pack(pop)
  static check_size<sizeof(PostProcessData::ShaderResources), 128 + sizeof(::UnityEngine::Shader*)> __UnityEngine_Rendering_Universal_PostProcessData_ShaderResourcesSizeCheck;
  static_assert(sizeof(PostProcessData::ShaderResources) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PostProcessData::ShaderResources::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
