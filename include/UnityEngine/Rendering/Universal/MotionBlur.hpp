// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.VolumeComponent
#include "UnityEngine/Rendering/VolumeComponent.hpp"
// Including type: UnityEngine.Rendering.Universal.IPostProcessComponent
#include "UnityEngine/Rendering/Universal/IPostProcessComponent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: MotionBlurModeParameter
  class MotionBlurModeParameter;
  // Forward declaring type: MotionBlurQualityParameter
  class MotionBlurQualityParameter;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ClampedFloatParameter
  class ClampedFloatParameter;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: MotionBlur
  class MotionBlur;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::MotionBlur);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::MotionBlur*, "UnityEngine.Rendering.Universal", "MotionBlur");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.MotionBlur
  // [TokenAttribute] Offset: FFFFFFFF
  // [VolumeComponentMenuForRenderPipeline] Offset: FFFFFFFF
  class MotionBlur : public ::UnityEngine::Rendering::VolumeComponent/*, public ::UnityEngine::Rendering::Universal::IPostProcessComponent*/ {
    public:
    public:
    // public UnityEngine.Rendering.Universal.MotionBlurModeParameter mode
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Rendering::Universal::MotionBlurModeParameter* mode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::MotionBlurModeParameter*) == 0x8);
    // public UnityEngine.Rendering.Universal.MotionBlurQualityParameter quality
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Rendering::Universal::MotionBlurQualityParameter* quality;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::MotionBlurQualityParameter*) == 0x8);
    // public UnityEngine.Rendering.ClampedFloatParameter intensity
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Rendering::ClampedFloatParameter* intensity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ClampedFloatParameter*) == 0x8);
    // public UnityEngine.Rendering.ClampedFloatParameter clamp
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Rendering::ClampedFloatParameter* clamp;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ClampedFloatParameter*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::Rendering::Universal::IPostProcessComponent
    operator ::UnityEngine::Rendering::Universal::IPostProcessComponent() noexcept {
      return *reinterpret_cast<::UnityEngine::Rendering::Universal::IPostProcessComponent*>(this);
    }
    // Get instance field reference: public UnityEngine.Rendering.Universal.MotionBlurModeParameter mode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::MotionBlurModeParameter*& dyn_mode();
    // Get instance field reference: public UnityEngine.Rendering.Universal.MotionBlurQualityParameter quality
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::MotionBlurQualityParameter*& dyn_quality();
    // Get instance field reference: public UnityEngine.Rendering.ClampedFloatParameter intensity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ClampedFloatParameter*& dyn_intensity();
    // Get instance field reference: public UnityEngine.Rendering.ClampedFloatParameter clamp
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ClampedFloatParameter*& dyn_clamp();
    // public System.Boolean IsActive()
    // Offset: 0x52C266C
    bool IsActive();
    // public System.Boolean IsTileCompatible()
    // Offset: 0x52C26C8
    bool IsTileCompatible();
    // public System.Void .ctor()
    // Offset: 0x52C26D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MotionBlur* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::MotionBlur::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MotionBlur*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.MotionBlur
  #pragma pack(pop)
  static check_size<sizeof(MotionBlur), 80 + sizeof(::UnityEngine::Rendering::ClampedFloatParameter*)> __UnityEngine_Rendering_Universal_MotionBlurSizeCheck;
  static_assert(sizeof(MotionBlur) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionBlur::IsActive
// Il2CppName: IsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::MotionBlur::*)()>(&UnityEngine::Rendering::Universal::MotionBlur::IsActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionBlur*), "IsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionBlur::IsTileCompatible
// Il2CppName: IsTileCompatible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::MotionBlur::*)()>(&UnityEngine::Rendering::Universal::MotionBlur::IsTileCompatible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionBlur*), "IsTileCompatible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionBlur::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
