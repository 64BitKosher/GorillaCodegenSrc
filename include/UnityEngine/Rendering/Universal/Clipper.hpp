// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ClipperBase
#include "UnityEngine/Rendering/Universal/ClipperBase.hpp"
// Including type: UnityEngine.Rendering.Universal.ClipType
#include "UnityEngine/Rendering/Universal/ClipType.hpp"
// Including type: UnityEngine.Rendering.Universal.PolyFillType
#include "UnityEngine/Rendering/Universal/PolyFillType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: Maxima
  class Maxima;
  // Forward declaring type: TEdge
  class TEdge;
  // Forward declaring type: IntersectNode
  class IntersectNode;
  // Forward declaring type: Join
  class Join;
  // Forward declaring type: PolyTree
  class PolyTree;
  // Forward declaring type: OutRec
  class OutRec;
  // Forward declaring type: OutPt
  class OutPt;
  // Forward declaring type: Direction
  struct Direction;
  // Forward declaring type: PolyNode
  class PolyNode;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IComparer`1<T>
  template<typename T>
  class IComparer_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: Clipper
  class Clipper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::Clipper);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Clipper*, "UnityEngine.Rendering.Universal", "Clipper");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x92
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.Clipper
  // [TokenAttribute] Offset: FFFFFFFF
  class Clipper : public ::UnityEngine::Rendering::Universal::ClipperBase {
    public:
    // Writing base type padding for base size: 0x43 to desired offset: 0x44
    char ___base_padding[0x1] = {};
    // Nested type: ::UnityEngine::Rendering::Universal::Clipper::NodeType
    struct NodeType;
    public:
    // private UnityEngine.Rendering.Universal.ClipType m_ClipType
    // Size: 0x4
    // Offset: 0x44
    ::UnityEngine::Rendering::Universal::ClipType m_ClipType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ClipType) == 0x4);
    // private UnityEngine.Rendering.Universal.Maxima m_Maxima
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Rendering::Universal::Maxima* m_Maxima;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Maxima*) == 0x8);
    // private UnityEngine.Rendering.Universal.TEdge m_SortedEdges
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Rendering::Universal::TEdge* m_SortedEdges;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::TEdge*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntersectNode> m_IntersectList
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntersectNode*>* m_IntersectList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntersectNode*>*) == 0x8);
    // private System.Collections.Generic.IComparer`1<UnityEngine.Rendering.Universal.IntersectNode> m_IntersectNodeComparer
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::IComparer_1<::UnityEngine::Rendering::Universal::IntersectNode*>* m_IntersectNodeComparer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IComparer_1<::UnityEngine::Rendering::Universal::IntersectNode*>*) == 0x8);
    // private System.Boolean m_ExecuteLocked
    // Size: 0x1
    // Offset: 0x68
    bool m_ExecuteLocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ExecuteLocked and: m_ClipFillType
    char __padding5[0x3] = {};
    // private UnityEngine.Rendering.Universal.PolyFillType m_ClipFillType
    // Size: 0x4
    // Offset: 0x6C
    ::UnityEngine::Rendering::Universal::PolyFillType m_ClipFillType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::PolyFillType) == 0x4);
    // private UnityEngine.Rendering.Universal.PolyFillType m_SubjFillType
    // Size: 0x4
    // Offset: 0x70
    ::UnityEngine::Rendering::Universal::PolyFillType m_SubjFillType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::PolyFillType) == 0x4);
    // Padding between fields: m_SubjFillType and: m_Joins
    char __padding7[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.Join> m_Joins
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::Join*>* m_Joins;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::Join*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.Join> m_GhostJoins
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::Join*>* m_GhostJoins;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::Join*>*) == 0x8);
    // private System.Boolean m_UsingPolyTree
    // Size: 0x1
    // Offset: 0x88
    bool m_UsingPolyTree;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UsingPolyTree and: LastIndex
    char __padding10[0x3] = {};
    // private System.Int32 <LastIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x8C
    int LastIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <ReverseSolution>k__BackingField
    // Size: 0x1
    // Offset: 0x90
    bool ReverseSolution;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <StrictlySimple>k__BackingField
    // Size: 0x1
    // Offset: 0x91
    bool StrictlySimple;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static public System.Int32 ioReverseSolution
    static constexpr const int ioReverseSolution = 1;
    // Get static field: static public System.Int32 ioReverseSolution
    static int _get_ioReverseSolution();
    // Set static field: static public System.Int32 ioReverseSolution
    static void _set_ioReverseSolution(int value);
    // static field const value: static public System.Int32 ioStrictlySimple
    static constexpr const int ioStrictlySimple = 2;
    // Get static field: static public System.Int32 ioStrictlySimple
    static int _get_ioStrictlySimple();
    // Set static field: static public System.Int32 ioStrictlySimple
    static void _set_ioStrictlySimple(int value);
    // static field const value: static public System.Int32 ioPreserveCollinear
    static constexpr const int ioPreserveCollinear = 4;
    // Get static field: static public System.Int32 ioPreserveCollinear
    static int _get_ioPreserveCollinear();
    // Set static field: static public System.Int32 ioPreserveCollinear
    static void _set_ioPreserveCollinear(int value);
    // Get instance field reference: private UnityEngine.Rendering.Universal.ClipType m_ClipType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ClipType& dyn_m_ClipType();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Maxima m_Maxima
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Maxima*& dyn_m_Maxima();
    // Get instance field reference: private UnityEngine.Rendering.Universal.TEdge m_SortedEdges
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::TEdge*& dyn_m_SortedEdges();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntersectNode> m_IntersectList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntersectNode*>*& dyn_m_IntersectList();
    // Get instance field reference: private System.Collections.Generic.IComparer`1<UnityEngine.Rendering.Universal.IntersectNode> m_IntersectNodeComparer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IComparer_1<::UnityEngine::Rendering::Universal::IntersectNode*>*& dyn_m_IntersectNodeComparer();
    // Get instance field reference: private System.Boolean m_ExecuteLocked
    [[deprecated("Use field access instead!")]] bool& dyn_m_ExecuteLocked();
    // Get instance field reference: private UnityEngine.Rendering.Universal.PolyFillType m_ClipFillType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::PolyFillType& dyn_m_ClipFillType();
    // Get instance field reference: private UnityEngine.Rendering.Universal.PolyFillType m_SubjFillType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::PolyFillType& dyn_m_SubjFillType();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.Join> m_Joins
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::Join*>*& dyn_m_Joins();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.Join> m_GhostJoins
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::Join*>*& dyn_m_GhostJoins();
    // Get instance field reference: private System.Boolean m_UsingPolyTree
    [[deprecated("Use field access instead!")]] bool& dyn_m_UsingPolyTree();
    // Get instance field reference: private System.Int32 <LastIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$LastIndex$k__BackingField();
    // Get instance field reference: private System.Boolean <ReverseSolution>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ReverseSolution$k__BackingField();
    // Get instance field reference: private System.Boolean <StrictlySimple>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$StrictlySimple$k__BackingField();
    // public System.Void .ctor(System.Int32 InitOptions)
    // Offset: 0x526F6DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Clipper* New_ctor(int InitOptions) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Clipper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Clipper*, creationType>(InitOptions)));
    }
    // private System.Void InsertMaxima(System.Int64 X)
    // Offset: 0x526F8D8
    void InsertMaxima(int64_t X);
    // public System.Int32 get_LastIndex()
    // Offset: 0x526FA2C
    int get_LastIndex();
    // public System.Void set_LastIndex(System.Int32 value)
    // Offset: 0x526FA34
    void set_LastIndex(int value);
    // public System.Boolean get_ReverseSolution()
    // Offset: 0x526FA3C
    bool get_ReverseSolution();
    // public System.Void set_ReverseSolution(System.Boolean value)
    // Offset: 0x526FA44
    void set_ReverseSolution(bool value);
    // public System.Boolean get_StrictlySimple()
    // Offset: 0x526FA50
    bool get_StrictlySimple();
    // public System.Void set_StrictlySimple(System.Boolean value)
    // Offset: 0x526FA58
    void set_StrictlySimple(bool value);
    // public System.Boolean Execute(UnityEngine.Rendering.Universal.ClipType clipType, System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> solution, UnityEngine.Rendering.Universal.PolyFillType FillType)
    // Offset: 0x526FA64
    bool Execute(::UnityEngine::Rendering::Universal::ClipType clipType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* solution, ::UnityEngine::Rendering::Universal::PolyFillType FillType);
    // public System.Boolean Execute(UnityEngine.Rendering.Universal.ClipType clipType, UnityEngine.Rendering.Universal.PolyTree polytree, UnityEngine.Rendering.Universal.PolyFillType FillType)
    // Offset: 0x526FC04
    bool Execute(::UnityEngine::Rendering::Universal::ClipType clipType, ::UnityEngine::Rendering::Universal::PolyTree* polytree, ::UnityEngine::Rendering::Universal::PolyFillType FillType);
    // public System.Boolean Execute(UnityEngine.Rendering.Universal.ClipType clipType, System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> solution, UnityEngine.Rendering.Universal.PolyFillType subjFillType, UnityEngine.Rendering.Universal.PolyFillType clipFillType)
    // Offset: 0x526FA6C
    bool Execute(::UnityEngine::Rendering::Universal::ClipType clipType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* solution, ::UnityEngine::Rendering::Universal::PolyFillType subjFillType, ::UnityEngine::Rendering::Universal::PolyFillType clipFillType);
    // public System.Boolean Execute(UnityEngine.Rendering.Universal.ClipType clipType, UnityEngine.Rendering.Universal.PolyTree polytree, UnityEngine.Rendering.Universal.PolyFillType subjFillType, UnityEngine.Rendering.Universal.PolyFillType clipFillType)
    // Offset: 0x526FC0C
    bool Execute(::UnityEngine::Rendering::Universal::ClipType clipType, ::UnityEngine::Rendering::Universal::PolyTree* polytree, ::UnityEngine::Rendering::Universal::PolyFillType subjFillType, ::UnityEngine::Rendering::Universal::PolyFillType clipFillType);
    // System.Void FixHoleLinkage(UnityEngine.Rendering.Universal.OutRec outRec)
    // Offset: 0x5270850
    void FixHoleLinkage(::UnityEngine::Rendering::Universal::OutRec* outRec);
    // private System.Boolean ExecuteInternal()
    // Offset: 0x526FCF0
    bool ExecuteInternal();
    // private System.Void DisposeAllPolyPts()
    // Offset: 0x5271D98
    void DisposeAllPolyPts();
    // private System.Void AddJoin(UnityEngine.Rendering.Universal.OutPt Op1, UnityEngine.Rendering.Universal.OutPt Op2, UnityEngine.Rendering.Universal.IntPoint OffPt)
    // Offset: 0x5271E3C
    void AddJoin(::UnityEngine::Rendering::Universal::OutPt* Op1, ::UnityEngine::Rendering::Universal::OutPt* Op2, ::UnityEngine::Rendering::Universal::IntPoint OffPt);
    // private System.Void AddGhostJoin(UnityEngine.Rendering.Universal.OutPt Op, UnityEngine.Rendering.Universal.IntPoint OffPt)
    // Offset: 0x5271F6C
    void AddGhostJoin(::UnityEngine::Rendering::Universal::OutPt* Op, ::UnityEngine::Rendering::Universal::IntPoint OffPt);
    // private System.Void InsertLocalMinimaIntoAEL(System.Int64 botY)
    // Offset: 0x52708B8
    void InsertLocalMinimaIntoAEL(int64_t botY);
    // private System.Void InsertEdgeIntoAEL(UnityEngine.Rendering.Universal.TEdge edge, UnityEngine.Rendering.Universal.TEdge startEdge)
    // Offset: 0x5272078
    void InsertEdgeIntoAEL(::UnityEngine::Rendering::Universal::TEdge* edge, ::UnityEngine::Rendering::Universal::TEdge* startEdge);
    // private System.Boolean E2InsertsBeforeE1(UnityEngine.Rendering.Universal.TEdge e1, UnityEngine.Rendering.Universal.TEdge e2)
    // Offset: 0x52730AC
    bool E2InsertsBeforeE1(::UnityEngine::Rendering::Universal::TEdge* e1, ::UnityEngine::Rendering::Universal::TEdge* e2);
    // private System.Boolean IsEvenOddFillType(UnityEngine.Rendering.Universal.TEdge edge)
    // Offset: 0x5273188
    bool IsEvenOddFillType(::UnityEngine::Rendering::Universal::TEdge* edge);
    // private System.Boolean IsEvenOddAltFillType(UnityEngine.Rendering.Universal.TEdge edge)
    // Offset: 0x52731BC
    bool IsEvenOddAltFillType(::UnityEngine::Rendering::Universal::TEdge* edge);
    // private System.Boolean IsContributing(UnityEngine.Rendering.Universal.TEdge edge)
    // Offset: 0x52723D0
    bool IsContributing(::UnityEngine::Rendering::Universal::TEdge* edge);
    // private System.Void SetWindingCount(UnityEngine.Rendering.Universal.TEdge edge)
    // Offset: 0x5272180
    void SetWindingCount(::UnityEngine::Rendering::Universal::TEdge* edge);
    // private System.Void AddEdgeToSEL(UnityEngine.Rendering.Universal.TEdge edge)
    // Offset: 0x5272970
    void AddEdgeToSEL(::UnityEngine::Rendering::Universal::TEdge* edge);
    // System.Boolean PopEdgeFromSEL(out UnityEngine.Rendering.Universal.TEdge e)
    // Offset: 0x52731F0
    bool PopEdgeFromSEL(ByRef<::UnityEngine::Rendering::Universal::TEdge*> e);
    // private System.Void CopyAELToSEL()
    // Offset: 0x527327C
    void CopyAELToSEL();
    // private System.Void SwapPositionsInSEL(UnityEngine.Rendering.Universal.TEdge edge1, UnityEngine.Rendering.Universal.TEdge edge2)
    // Offset: 0x52732C4
    void SwapPositionsInSEL(::UnityEngine::Rendering::Universal::TEdge* edge1, ::UnityEngine::Rendering::Universal::TEdge* edge2);
    // private System.Void AddLocalMaxPoly(UnityEngine.Rendering.Universal.TEdge e1, UnityEngine.Rendering.Universal.TEdge e2, UnityEngine.Rendering.Universal.IntPoint pt)
    // Offset: 0x5273518
    void AddLocalMaxPoly(::UnityEngine::Rendering::Universal::TEdge* e1, ::UnityEngine::Rendering::Universal::TEdge* e2, ::UnityEngine::Rendering::Universal::IntPoint pt);
    // private UnityEngine.Rendering.Universal.OutPt AddLocalMinPoly(UnityEngine.Rendering.Universal.TEdge e1, UnityEngine.Rendering.Universal.TEdge e2, UnityEngine.Rendering.Universal.IntPoint pt)
    // Offset: 0x5272780
    ::UnityEngine::Rendering::Universal::OutPt* AddLocalMinPoly(::UnityEngine::Rendering::Universal::TEdge* e1, ::UnityEngine::Rendering::Universal::TEdge* e2, ::UnityEngine::Rendering::Universal::IntPoint pt);
    // private UnityEngine.Rendering.Universal.OutPt AddOutPt(UnityEngine.Rendering.Universal.TEdge e, UnityEngine.Rendering.Universal.IntPoint pt)
    // Offset: 0x527253C
    ::UnityEngine::Rendering::Universal::OutPt* AddOutPt(::UnityEngine::Rendering::Universal::TEdge* e, ::UnityEngine::Rendering::Universal::IntPoint pt);
    // private UnityEngine.Rendering.Universal.OutPt GetLastOutPt(UnityEngine.Rendering.Universal.TEdge e)
    // Offset: 0x5273A4C
    ::UnityEngine::Rendering::Universal::OutPt* GetLastOutPt(::UnityEngine::Rendering::Universal::TEdge* e);
    // System.Void SwapPoints(ref UnityEngine.Rendering.Universal.IntPoint pt1, ref UnityEngine.Rendering.Universal.IntPoint pt2)
    // Offset: 0x5273AC4
    void SwapPoints(ByRef<::UnityEngine::Rendering::Universal::IntPoint> pt1, ByRef<::UnityEngine::Rendering::Universal::IntPoint> pt2);
    // private System.Boolean HorzSegmentsOverlap(System.Int64 seg1a, System.Int64 seg1b, System.Int64 seg2a, System.Int64 seg2b)
    // Offset: 0x5272A14
    bool HorzSegmentsOverlap(int64_t seg1a, int64_t seg1b, int64_t seg2a, int64_t seg2b);
    // private System.Void SetHoleState(UnityEngine.Rendering.Universal.TEdge e, UnityEngine.Rendering.Universal.OutRec outRec)
    // Offset: 0x5273950
    void SetHoleState(::UnityEngine::Rendering::Universal::TEdge* e, ::UnityEngine::Rendering::Universal::OutRec* outRec);
    // private System.Double GetDx(UnityEngine.Rendering.Universal.IntPoint pt1, UnityEngine.Rendering.Universal.IntPoint pt2)
    // Offset: 0x5273AF0
    double GetDx(::UnityEngine::Rendering::Universal::IntPoint pt1, ::UnityEngine::Rendering::Universal::IntPoint pt2);
    // private System.Boolean FirstIsBottomPt(UnityEngine.Rendering.Universal.OutPt btmPt1, UnityEngine.Rendering.Universal.OutPt btmPt2)
    // Offset: 0x5273B28
    bool FirstIsBottomPt(::UnityEngine::Rendering::Universal::OutPt* btmPt1, ::UnityEngine::Rendering::Universal::OutPt* btmPt2);
    // private UnityEngine.Rendering.Universal.OutPt GetBottomPt(UnityEngine.Rendering.Universal.OutPt pp)
    // Offset: 0x5273E20
    ::UnityEngine::Rendering::Universal::OutPt* GetBottomPt(::UnityEngine::Rendering::Universal::OutPt* pp);
    // private UnityEngine.Rendering.Universal.OutRec GetLowermostRec(UnityEngine.Rendering.Universal.OutRec outRec1, UnityEngine.Rendering.Universal.OutRec outRec2)
    // Offset: 0x5273F28
    ::UnityEngine::Rendering::Universal::OutRec* GetLowermostRec(::UnityEngine::Rendering::Universal::OutRec* outRec1, ::UnityEngine::Rendering::Universal::OutRec* outRec2);
    // private System.Boolean OutRec1RightOfOutRec2(UnityEngine.Rendering.Universal.OutRec outRec1, UnityEngine.Rendering.Universal.OutRec outRec2)
    // Offset: 0x527401C
    bool OutRec1RightOfOutRec2(::UnityEngine::Rendering::Universal::OutRec* outRec1, ::UnityEngine::Rendering::Universal::OutRec* outRec2);
    // private UnityEngine.Rendering.Universal.OutRec GetOutRec(System.Int32 idx)
    // Offset: 0x5274048
    ::UnityEngine::Rendering::Universal::OutRec* GetOutRec(int idx);
    // private System.Void AppendPolygon(UnityEngine.Rendering.Universal.TEdge e1, UnityEngine.Rendering.Universal.TEdge e2)
    // Offset: 0x52735E4
    void AppendPolygon(::UnityEngine::Rendering::Universal::TEdge* e1, ::UnityEngine::Rendering::Universal::TEdge* e2);
    // private System.Void ReversePolyPtLinks(UnityEngine.Rendering.Universal.OutPt pp)
    // Offset: 0x5271444
    void ReversePolyPtLinks(::UnityEngine::Rendering::Universal::OutPt* pp);
    // static private System.Void SwapSides(UnityEngine.Rendering.Universal.TEdge edge1, UnityEngine.Rendering.Universal.TEdge edge2)
    // Offset: 0x52740E8
    static void SwapSides(::UnityEngine::Rendering::Universal::TEdge* edge1, ::UnityEngine::Rendering::Universal::TEdge* edge2);
    // static private System.Void SwapPolyIndexes(UnityEngine.Rendering.Universal.TEdge edge1, UnityEngine.Rendering.Universal.TEdge edge2)
    // Offset: 0x5274110
    static void SwapPolyIndexes(::UnityEngine::Rendering::Universal::TEdge* edge1, ::UnityEngine::Rendering::Universal::TEdge* edge2);
    // private System.Void IntersectEdges(UnityEngine.Rendering.Universal.TEdge e1, UnityEngine.Rendering.Universal.TEdge e2, UnityEngine.Rendering.Universal.IntPoint pt)
    // Offset: 0x5272A44
    void IntersectEdges(::UnityEngine::Rendering::Universal::TEdge* e1, ::UnityEngine::Rendering::Universal::TEdge* e2, ::UnityEngine::Rendering::Universal::IntPoint pt);
    // private System.Void DeleteFromSEL(UnityEngine.Rendering.Universal.TEdge e)
    // Offset: 0x5274138
    void DeleteFromSEL(::UnityEngine::Rendering::Universal::TEdge* e);
    // private System.Void ProcessHorizontals()
    // Offset: 0x5270D90
    void ProcessHorizontals();
    // private System.Void GetHorzDirection(UnityEngine.Rendering.Universal.TEdge HorzEdge, out UnityEngine.Rendering.Universal.Direction Dir, out System.Int64 Left, out System.Int64 Right)
    // Offset: 0x5274928
    void GetHorzDirection(::UnityEngine::Rendering::Universal::TEdge* HorzEdge, ByRef<::UnityEngine::Rendering::Universal::Direction> Dir, ByRef<int64_t> Left, ByRef<int64_t> Right);
    // private System.Void ProcessHorizontal(UnityEngine.Rendering.Universal.TEdge horzEdge)
    // Offset: 0x52741D8
    void ProcessHorizontal(::UnityEngine::Rendering::Universal::TEdge* horzEdge);
    // private UnityEngine.Rendering.Universal.TEdge GetNextInAEL(UnityEngine.Rendering.Universal.TEdge e, UnityEngine.Rendering.Universal.Direction Direction)
    // Offset: 0x52749DC
    ::UnityEngine::Rendering::Universal::TEdge* GetNextInAEL(::UnityEngine::Rendering::Universal::TEdge* e, ::UnityEngine::Rendering::Universal::Direction Direction);
    // private System.Boolean IsMinima(UnityEngine.Rendering.Universal.TEdge e)
    // Offset: 0x5274A04
    bool IsMinima(::UnityEngine::Rendering::Universal::TEdge* e);
    // private System.Boolean IsMaxima(UnityEngine.Rendering.Universal.TEdge e, System.Double Y)
    // Offset: 0x5274A48
    bool IsMaxima(::UnityEngine::Rendering::Universal::TEdge* e, double Y);
    // private System.Boolean IsIntermediate(UnityEngine.Rendering.Universal.TEdge e, System.Double Y)
    // Offset: 0x5274A74
    bool IsIntermediate(::UnityEngine::Rendering::Universal::TEdge* e, double Y);
    // UnityEngine.Rendering.Universal.TEdge GetMaximaPair(UnityEngine.Rendering.Universal.TEdge e)
    // Offset: 0x5274968
    ::UnityEngine::Rendering::Universal::TEdge* GetMaximaPair(::UnityEngine::Rendering::Universal::TEdge* e);
    // UnityEngine.Rendering.Universal.TEdge GetMaximaPairEx(UnityEngine.Rendering.Universal.TEdge e)
    // Offset: 0x5274AAC
    ::UnityEngine::Rendering::Universal::TEdge* GetMaximaPairEx(::UnityEngine::Rendering::Universal::TEdge* e);
    // private System.Boolean ProcessIntersections(System.Int64 topY)
    // Offset: 0x5270DD0
    bool ProcessIntersections(int64_t topY);
    // private System.Void BuildIntersectList(System.Int64 topY)
    // Offset: 0x5274AE8
    void BuildIntersectList(int64_t topY);
    // private System.Boolean EdgesAdjacent(UnityEngine.Rendering.Universal.IntersectNode inode)
    // Offset: 0x52753F8
    bool EdgesAdjacent(::UnityEngine::Rendering::Universal::IntersectNode* inode);
    // static private System.Int32 IntersectNodeSort(UnityEngine.Rendering.Universal.IntersectNode node1, UnityEngine.Rendering.Universal.IntersectNode node2)
    // Offset: 0x5275438
    static int IntersectNodeSort(::UnityEngine::Rendering::Universal::IntersectNode* node1, ::UnityEngine::Rendering::Universal::IntersectNode* node2);
    // private System.Boolean FixupIntersectionOrder()
    // Offset: 0x5274D38
    bool FixupIntersectionOrder();
    // private System.Void ProcessIntersectList()
    // Offset: 0x5274F24
    void ProcessIntersectList();
    // static System.Int64 Round(System.Double value)
    // Offset: 0x527545C
    static int64_t Round(double value);
    // static private System.Int64 TopX(UnityEngine.Rendering.Universal.TEdge edge, System.Int64 currentY)
    // Offset: 0x5273118
    static int64_t TopX(::UnityEngine::Rendering::Universal::TEdge* edge, int64_t currentY);
    // private System.Void IntersectPoint(UnityEngine.Rendering.Universal.TEdge edge1, UnityEngine.Rendering.Universal.TEdge edge2, out UnityEngine.Rendering.Universal.IntPoint ip)
    // Offset: 0x5275028
    void IntersectPoint(::UnityEngine::Rendering::Universal::TEdge* edge1, ::UnityEngine::Rendering::Universal::TEdge* edge2, ByRef<::UnityEngine::Rendering::Universal::IntPoint> ip);
    // private System.Void ProcessEdgesAtTopOfScanbeam(System.Int64 topY)
    // Offset: 0x5270F60
    void ProcessEdgesAtTopOfScanbeam(int64_t topY);
    // private System.Void DoMaxima(UnityEngine.Rendering.Universal.TEdge e)
    // Offset: 0x5275490
    void DoMaxima(::UnityEngine::Rendering::Universal::TEdge* e);
    // static public System.Void ReversePaths(System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> polys)
    // Offset: 0x5275684
    static void ReversePaths(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* polys);
    // static public System.Boolean Orientation(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> poly)
    // Offset: 0x52757EC
    static bool Orientation(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* poly);
    // private System.Int32 PointCount(UnityEngine.Rendering.Universal.OutPt pts)
    // Offset: 0x5275930
    int PointCount(::UnityEngine::Rendering::Universal::OutPt* pts);
    // private System.Void BuildResult(System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> polyg)
    // Offset: 0x5270210
    void BuildResult(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* polyg);
    // private System.Void BuildResult2(UnityEngine.Rendering.Universal.PolyTree polytree)
    // Offset: 0x52704D8
    void BuildResult2(::UnityEngine::Rendering::Universal::PolyTree* polytree);
    // private System.Void FixupOutPolyline(UnityEngine.Rendering.Universal.OutRec outrec)
    // Offset: 0x5271820
    void FixupOutPolyline(::UnityEngine::Rendering::Universal::OutRec* outrec);
    // private System.Void FixupOutPolygon(UnityEngine.Rendering.Universal.OutRec outRec)
    // Offset: 0x52718F8
    void FixupOutPolygon(::UnityEngine::Rendering::Universal::OutRec* outRec);
    // private UnityEngine.Rendering.Universal.OutPt DupOutPt(UnityEngine.Rendering.Universal.OutPt outPt, System.Boolean InsertAfter)
    // Offset: 0x5275960
    ::UnityEngine::Rendering::Universal::OutPt* DupOutPt(::UnityEngine::Rendering::Universal::OutPt* outPt, bool InsertAfter);
    // private System.Boolean GetOverlap(System.Int64 a1, System.Int64 a2, System.Int64 b1, System.Int64 b2, out System.Int64 Left, out System.Int64 Right)
    // Offset: 0x5275A8C
    bool GetOverlap(int64_t a1, int64_t a2, int64_t b1, int64_t b2, ByRef<int64_t> Left, ByRef<int64_t> Right);
    // private System.Boolean JoinHorz(UnityEngine.Rendering.Universal.OutPt op1, UnityEngine.Rendering.Universal.OutPt op1b, UnityEngine.Rendering.Universal.OutPt op2, UnityEngine.Rendering.Universal.OutPt op2b, UnityEngine.Rendering.Universal.IntPoint Pt, System.Boolean DiscardLeft)
    // Offset: 0x5275BA4
    bool JoinHorz(::UnityEngine::Rendering::Universal::OutPt* op1, ::UnityEngine::Rendering::Universal::OutPt* op1b, ::UnityEngine::Rendering::Universal::OutPt* op2, ::UnityEngine::Rendering::Universal::OutPt* op2b, ::UnityEngine::Rendering::Universal::IntPoint Pt, bool DiscardLeft);
    // private System.Boolean JoinPoints(UnityEngine.Rendering.Universal.Join j, UnityEngine.Rendering.Universal.OutRec outRec1, UnityEngine.Rendering.Universal.OutRec outRec2)
    // Offset: 0x5275F5C
    bool JoinPoints(::UnityEngine::Rendering::Universal::Join* j, ::UnityEngine::Rendering::Universal::OutRec* outRec1, ::UnityEngine::Rendering::Universal::OutRec* outRec2);
    // static public System.Int32 PointInPolygon(UnityEngine.Rendering.Universal.IntPoint pt, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> path)
    // Offset: 0x5276700
    static int PointInPolygon(::UnityEngine::Rendering::Universal::IntPoint pt, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* path);
    // static private System.Int32 PointInPolygon(UnityEngine.Rendering.Universal.IntPoint pt, UnityEngine.Rendering.Universal.OutPt op)
    // Offset: 0x52768BC
    static int PointInPolygon(::UnityEngine::Rendering::Universal::IntPoint pt, ::UnityEngine::Rendering::Universal::OutPt* op);
    // static private System.Boolean Poly2ContainsPoly1(UnityEngine.Rendering.Universal.OutPt outPt1, UnityEngine.Rendering.Universal.OutPt outPt2)
    // Offset: 0x52769B8
    static bool Poly2ContainsPoly1(::UnityEngine::Rendering::Universal::OutPt* outPt1, ::UnityEngine::Rendering::Universal::OutPt* outPt2);
    // private System.Void FixupFirstLefts1(UnityEngine.Rendering.Universal.OutRec OldOutRec, UnityEngine.Rendering.Universal.OutRec NewOutRec)
    // Offset: 0x5276A28
    void FixupFirstLefts1(::UnityEngine::Rendering::Universal::OutRec* OldOutRec, ::UnityEngine::Rendering::Universal::OutRec* NewOutRec);
    // private System.Void FixupFirstLefts2(UnityEngine.Rendering.Universal.OutRec innerOutRec, UnityEngine.Rendering.Universal.OutRec outerOutRec)
    // Offset: 0x5276BEC
    void FixupFirstLefts2(::UnityEngine::Rendering::Universal::OutRec* innerOutRec, ::UnityEngine::Rendering::Universal::OutRec* outerOutRec);
    // private System.Void FixupFirstLefts3(UnityEngine.Rendering.Universal.OutRec OldOutRec, UnityEngine.Rendering.Universal.OutRec NewOutRec)
    // Offset: 0x5276E20
    void FixupFirstLefts3(::UnityEngine::Rendering::Universal::OutRec* OldOutRec, ::UnityEngine::Rendering::Universal::OutRec* NewOutRec);
    // static private UnityEngine.Rendering.Universal.OutRec ParseFirstLeft(UnityEngine.Rendering.Universal.OutRec FirstLeft)
    // Offset: 0x5276BD4
    static ::UnityEngine::Rendering::Universal::OutRec* ParseFirstLeft(::UnityEngine::Rendering::Universal::OutRec* FirstLeft);
    // private System.Void JoinCommonEdges()
    // Offset: 0x527149C
    void JoinCommonEdges();
    // private System.Void UpdateOutPtIdxs(UnityEngine.Rendering.Universal.OutRec outrec)
    // Offset: 0x5276FA0
    void UpdateOutPtIdxs(::UnityEngine::Rendering::Universal::OutRec* outrec);
    // private System.Void DoSimplePolygons()
    // Offset: 0x5271B00
    void DoSimplePolygons();
    // static public System.Double Area(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> poly)
    // Offset: 0x5275804
    static double Area(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* poly);
    // System.Double Area(UnityEngine.Rendering.Universal.OutRec outRec)
    // Offset: 0x527142C
    double Area(::UnityEngine::Rendering::Universal::OutRec* outRec);
    // System.Double Area(UnityEngine.Rendering.Universal.OutPt op)
    // Offset: 0x5273DC4
    double Area(::UnityEngine::Rendering::Universal::OutPt* op);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> SimplifyPolygon(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> poly, UnityEngine.Rendering.Universal.PolyFillType fillType)
    // Offset: 0x5276FD4
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* SimplifyPolygon(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* poly, ::UnityEngine::Rendering::Universal::PolyFillType fillType);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> SimplifyPolygons(System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> polys, UnityEngine.Rendering.Universal.PolyFillType fillType)
    // Offset: 0x52770B8
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* SimplifyPolygons(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* polys, ::UnityEngine::Rendering::Universal::PolyFillType fillType);
    // static private System.Double DistanceSqrd(UnityEngine.Rendering.Universal.IntPoint pt1, UnityEngine.Rendering.Universal.IntPoint pt2)
    // Offset: 0x527719C
    static double DistanceSqrd(::UnityEngine::Rendering::Universal::IntPoint pt1, ::UnityEngine::Rendering::Universal::IntPoint pt2);
    // static private System.Double DistanceFromLineSqrd(UnityEngine.Rendering.Universal.IntPoint pt, UnityEngine.Rendering.Universal.IntPoint ln1, UnityEngine.Rendering.Universal.IntPoint ln2)
    // Offset: 0x52771BC
    static double DistanceFromLineSqrd(::UnityEngine::Rendering::Universal::IntPoint pt, ::UnityEngine::Rendering::Universal::IntPoint ln1, ::UnityEngine::Rendering::Universal::IntPoint ln2);
    // static private System.Boolean SlopesNearCollinear(UnityEngine.Rendering.Universal.IntPoint pt1, UnityEngine.Rendering.Universal.IntPoint pt2, UnityEngine.Rendering.Universal.IntPoint pt3, System.Double distSqrd)
    // Offset: 0x527721C
    static bool SlopesNearCollinear(::UnityEngine::Rendering::Universal::IntPoint pt1, ::UnityEngine::Rendering::Universal::IntPoint pt2, ::UnityEngine::Rendering::Universal::IntPoint pt3, double distSqrd);
    // static private System.Boolean PointsAreClose(UnityEngine.Rendering.Universal.IntPoint pt1, UnityEngine.Rendering.Universal.IntPoint pt2, System.Double distSqrd)
    // Offset: 0x52774E4
    static bool PointsAreClose(::UnityEngine::Rendering::Universal::IntPoint pt1, ::UnityEngine::Rendering::Universal::IntPoint pt2, double distSqrd);
    // static private UnityEngine.Rendering.Universal.OutPt ExcludeOp(UnityEngine.Rendering.Universal.OutPt op)
    // Offset: 0x527750C
    static ::UnityEngine::Rendering::Universal::OutPt* ExcludeOp(::UnityEngine::Rendering::Universal::OutPt* op);
    // static public System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> CleanPolygon(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> path, System.Double distance)
    // Offset: 0x5277560
    static ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* CleanPolygon(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* path, double distance);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> CleanPolygons(System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> polys, System.Double distance)
    // Offset: 0x52779CC
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* CleanPolygons(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* polys, double distance);
    // static System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> Minkowski(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> pattern, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> path, System.Boolean IsSum, System.Boolean IsClosed)
    // Offset: 0x5277B24
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* Minkowski(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* pattern, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* path, bool IsSum, bool IsClosed);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> MinkowskiSum(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> pattern, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> path, System.Boolean pathIsClosed)
    // Offset: 0x52785E4
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* MinkowskiSum(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* pattern, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* path, bool pathIsClosed);
    // static private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> TranslatePath(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> path, UnityEngine.Rendering.Universal.IntPoint delta)
    // Offset: 0x527869C
    static ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* TranslatePath(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* path, ::UnityEngine::Rendering::Universal::IntPoint delta);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> MinkowskiSum(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> pattern, System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> paths, System.Boolean pathIsClosed)
    // Offset: 0x5278868
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* MinkowskiSum(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* pattern, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* paths, bool pathIsClosed);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> MinkowskiDiff(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> poly1, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> poly2)
    // Offset: 0x5278A38
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* MinkowskiDiff(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* poly1, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* poly2);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> PolyTreeToPaths(UnityEngine.Rendering.Universal.PolyTree polytree)
    // Offset: 0x5278AEC
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* PolyTreeToPaths(::UnityEngine::Rendering::Universal::PolyTree* polytree);
    // static System.Void AddPolyNodeToPaths(UnityEngine.Rendering.Universal.PolyNode polynode, UnityEngine.Rendering.Universal.Clipper/NodeType nt, System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> paths)
    // Offset: 0x5278BA8
    static void AddPolyNodeToPaths(::UnityEngine::Rendering::Universal::PolyNode* polynode, ::UnityEngine::Rendering::Universal::Clipper::NodeType nt, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* paths);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> OpenPathsFromPolyTree(UnityEngine.Rendering.Universal.PolyTree polytree)
    // Offset: 0x5278DA8
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* OpenPathsFromPolyTree(::UnityEngine::Rendering::Universal::PolyTree* polytree);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> ClosedPathsFromPolyTree(UnityEngine.Rendering.Universal.PolyTree polytree)
    // Offset: 0x5278F34
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* ClosedPathsFromPolyTree(::UnityEngine::Rendering::Universal::PolyTree* polytree);
  }; // UnityEngine.Rendering.Universal.Clipper
  #pragma pack(pop)
  static check_size<sizeof(Clipper), 145 + sizeof(bool)> __UnityEngine_Rendering_Universal_ClipperSizeCheck;
  static_assert(sizeof(Clipper) == 0x92);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::InsertMaxima
// Il2CppName: InsertMaxima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(int64_t)>(&UnityEngine::Rendering::Universal::Clipper::InsertMaxima)> {
  static const MethodInfo* get() {
    static auto* X = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "InsertMaxima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{X});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::get_LastIndex
// Il2CppName: get_LastIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Clipper::*)()>(&UnityEngine::Rendering::Universal::Clipper::get_LastIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "get_LastIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::set_LastIndex
// Il2CppName: set_LastIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(int)>(&UnityEngine::Rendering::Universal::Clipper::set_LastIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "set_LastIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::get_ReverseSolution
// Il2CppName: get_ReverseSolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)()>(&UnityEngine::Rendering::Universal::Clipper::get_ReverseSolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "get_ReverseSolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::set_ReverseSolution
// Il2CppName: set_ReverseSolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(bool)>(&UnityEngine::Rendering::Universal::Clipper::set_ReverseSolution)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "set_ReverseSolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::get_StrictlySimple
// Il2CppName: get_StrictlySimple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)()>(&UnityEngine::Rendering::Universal::Clipper::get_StrictlySimple)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "get_StrictlySimple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::set_StrictlySimple
// Il2CppName: set_StrictlySimple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(bool)>(&UnityEngine::Rendering::Universal::Clipper::set_StrictlySimple)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "set_StrictlySimple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::ClipType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>*, ::UnityEngine::Rendering::Universal::PolyFillType)>(&UnityEngine::Rendering::Universal::Clipper::Execute)> {
  static const MethodInfo* get() {
    static auto* clipType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ClipType")->byval_arg;
    static auto* solution = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})})->byval_arg;
    static auto* FillType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyFillType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipType, solution, FillType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::ClipType, ::UnityEngine::Rendering::Universal::PolyTree*, ::UnityEngine::Rendering::Universal::PolyFillType)>(&UnityEngine::Rendering::Universal::Clipper::Execute)> {
  static const MethodInfo* get() {
    static auto* clipType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ClipType")->byval_arg;
    static auto* polytree = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyTree")->byval_arg;
    static auto* FillType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyFillType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipType, polytree, FillType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::ClipType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>*, ::UnityEngine::Rendering::Universal::PolyFillType, ::UnityEngine::Rendering::Universal::PolyFillType)>(&UnityEngine::Rendering::Universal::Clipper::Execute)> {
  static const MethodInfo* get() {
    static auto* clipType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ClipType")->byval_arg;
    static auto* solution = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})})->byval_arg;
    static auto* subjFillType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyFillType")->byval_arg;
    static auto* clipFillType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyFillType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipType, solution, subjFillType, clipFillType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::ClipType, ::UnityEngine::Rendering::Universal::PolyTree*, ::UnityEngine::Rendering::Universal::PolyFillType, ::UnityEngine::Rendering::Universal::PolyFillType)>(&UnityEngine::Rendering::Universal::Clipper::Execute)> {
  static const MethodInfo* get() {
    static auto* clipType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ClipType")->byval_arg;
    static auto* polytree = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyTree")->byval_arg;
    static auto* subjFillType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyFillType")->byval_arg;
    static auto* clipFillType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyFillType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipType, polytree, subjFillType, clipFillType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::FixHoleLinkage
// Il2CppName: FixHoleLinkage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutRec*)>(&UnityEngine::Rendering::Universal::Clipper::FixHoleLinkage)> {
  static const MethodInfo* get() {
    static auto* outRec = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "FixHoleLinkage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::ExecuteInternal
// Il2CppName: ExecuteInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)()>(&UnityEngine::Rendering::Universal::Clipper::ExecuteInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "ExecuteInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::DisposeAllPolyPts
// Il2CppName: DisposeAllPolyPts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)()>(&UnityEngine::Rendering::Universal::Clipper::DisposeAllPolyPts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "DisposeAllPolyPts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::AddJoin
// Il2CppName: AddJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutPt*, ::UnityEngine::Rendering::Universal::OutPt*, ::UnityEngine::Rendering::Universal::IntPoint)>(&UnityEngine::Rendering::Universal::Clipper::AddJoin)> {
  static const MethodInfo* get() {
    static auto* Op1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    static auto* Op2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    static auto* OffPt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "AddJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Op1, Op2, OffPt});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::AddGhostJoin
// Il2CppName: AddGhostJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutPt*, ::UnityEngine::Rendering::Universal::IntPoint)>(&UnityEngine::Rendering::Universal::Clipper::AddGhostJoin)> {
  static const MethodInfo* get() {
    static auto* Op = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    static auto* OffPt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "AddGhostJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Op, OffPt});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::InsertLocalMinimaIntoAEL
// Il2CppName: InsertLocalMinimaIntoAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(int64_t)>(&UnityEngine::Rendering::Universal::Clipper::InsertLocalMinimaIntoAEL)> {
  static const MethodInfo* get() {
    static auto* botY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "InsertLocalMinimaIntoAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{botY});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::InsertEdgeIntoAEL
// Il2CppName: InsertEdgeIntoAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::InsertEdgeIntoAEL)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* startEdge = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "InsertEdgeIntoAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge, startEdge});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::E2InsertsBeforeE1
// Il2CppName: E2InsertsBeforeE1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::E2InsertsBeforeE1)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "E2InsertsBeforeE1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::IsEvenOddFillType
// Il2CppName: IsEvenOddFillType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::IsEvenOddFillType)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "IsEvenOddFillType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::IsEvenOddAltFillType
// Il2CppName: IsEvenOddAltFillType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::IsEvenOddAltFillType)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "IsEvenOddAltFillType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::IsContributing
// Il2CppName: IsContributing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::IsContributing)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "IsContributing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::SetWindingCount
// Il2CppName: SetWindingCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::SetWindingCount)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "SetWindingCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::AddEdgeToSEL
// Il2CppName: AddEdgeToSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::AddEdgeToSEL)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "AddEdgeToSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::PopEdgeFromSEL
// Il2CppName: PopEdgeFromSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(ByRef<::UnityEngine::Rendering::Universal::TEdge*>)>(&UnityEngine::Rendering::Universal::Clipper::PopEdgeFromSEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "PopEdgeFromSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::CopyAELToSEL
// Il2CppName: CopyAELToSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)()>(&UnityEngine::Rendering::Universal::Clipper::CopyAELToSEL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "CopyAELToSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::SwapPositionsInSEL
// Il2CppName: SwapPositionsInSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::SwapPositionsInSEL)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "SwapPositionsInSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::AddLocalMaxPoly
// Il2CppName: AddLocalMaxPoly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::IntPoint)>(&UnityEngine::Rendering::Universal::Clipper::AddLocalMaxPoly)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "AddLocalMaxPoly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, pt});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::AddLocalMinPoly
// Il2CppName: AddLocalMinPoly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::OutPt* (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::IntPoint)>(&UnityEngine::Rendering::Universal::Clipper::AddLocalMinPoly)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "AddLocalMinPoly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, pt});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::AddOutPt
// Il2CppName: AddOutPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::OutPt* (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::IntPoint)>(&UnityEngine::Rendering::Universal::Clipper::AddOutPt)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "AddOutPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, pt});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::GetLastOutPt
// Il2CppName: GetLastOutPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::OutPt* (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::GetLastOutPt)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "GetLastOutPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::SwapPoints
// Il2CppName: SwapPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(ByRef<::UnityEngine::Rendering::Universal::IntPoint>, ByRef<::UnityEngine::Rendering::Universal::IntPoint>)>(&UnityEngine::Rendering::Universal::Clipper::SwapPoints)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->this_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "SwapPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::HorzSegmentsOverlap
// Il2CppName: HorzSegmentsOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(int64_t, int64_t, int64_t, int64_t)>(&UnityEngine::Rendering::Universal::Clipper::HorzSegmentsOverlap)> {
  static const MethodInfo* get() {
    static auto* seg1a = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* seg1b = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* seg2a = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* seg2b = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "HorzSegmentsOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seg1a, seg1b, seg2a, seg2b});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::SetHoleState
// Il2CppName: SetHoleState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::OutRec*)>(&UnityEngine::Rendering::Universal::Clipper::SetHoleState)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* outRec = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "SetHoleState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, outRec});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::GetDx
// Il2CppName: GetDx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint)>(&UnityEngine::Rendering::Universal::Clipper::GetDx)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "GetDx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::FirstIsBottomPt
// Il2CppName: FirstIsBottomPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutPt*, ::UnityEngine::Rendering::Universal::OutPt*)>(&UnityEngine::Rendering::Universal::Clipper::FirstIsBottomPt)> {
  static const MethodInfo* get() {
    static auto* btmPt1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    static auto* btmPt2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "FirstIsBottomPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{btmPt1, btmPt2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::GetBottomPt
// Il2CppName: GetBottomPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::OutPt* (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutPt*)>(&UnityEngine::Rendering::Universal::Clipper::GetBottomPt)> {
  static const MethodInfo* get() {
    static auto* pp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "GetBottomPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pp});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::GetLowermostRec
// Il2CppName: GetLowermostRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::OutRec* (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutRec*, ::UnityEngine::Rendering::Universal::OutRec*)>(&UnityEngine::Rendering::Universal::Clipper::GetLowermostRec)> {
  static const MethodInfo* get() {
    static auto* outRec1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    static auto* outRec2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "GetLowermostRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec1, outRec2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::OutRec1RightOfOutRec2
// Il2CppName: OutRec1RightOfOutRec2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutRec*, ::UnityEngine::Rendering::Universal::OutRec*)>(&UnityEngine::Rendering::Universal::Clipper::OutRec1RightOfOutRec2)> {
  static const MethodInfo* get() {
    static auto* outRec1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    static auto* outRec2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "OutRec1RightOfOutRec2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec1, outRec2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::GetOutRec
// Il2CppName: GetOutRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::OutRec* (UnityEngine::Rendering::Universal::Clipper::*)(int)>(&UnityEngine::Rendering::Universal::Clipper::GetOutRec)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "GetOutRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::AppendPolygon
// Il2CppName: AppendPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::AppendPolygon)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "AppendPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::ReversePolyPtLinks
// Il2CppName: ReversePolyPtLinks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutPt*)>(&UnityEngine::Rendering::Universal::Clipper::ReversePolyPtLinks)> {
  static const MethodInfo* get() {
    static auto* pp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "ReversePolyPtLinks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pp});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::SwapSides
// Il2CppName: SwapSides
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::SwapSides)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "SwapSides", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::SwapPolyIndexes
// Il2CppName: SwapPolyIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::SwapPolyIndexes)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "SwapPolyIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::IntersectEdges
// Il2CppName: IntersectEdges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::IntPoint)>(&UnityEngine::Rendering::Universal::Clipper::IntersectEdges)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "IntersectEdges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, pt});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::DeleteFromSEL
// Il2CppName: DeleteFromSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::DeleteFromSEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "DeleteFromSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::ProcessHorizontals
// Il2CppName: ProcessHorizontals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)()>(&UnityEngine::Rendering::Universal::Clipper::ProcessHorizontals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "ProcessHorizontals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::GetHorzDirection
// Il2CppName: GetHorzDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*, ByRef<::UnityEngine::Rendering::Universal::Direction>, ByRef<int64_t>, ByRef<int64_t>)>(&UnityEngine::Rendering::Universal::Clipper::GetHorzDirection)> {
  static const MethodInfo* get() {
    static auto* HorzEdge = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* Dir = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Direction")->this_arg;
    static auto* Left = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* Right = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "GetHorzDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HorzEdge, Dir, Left, Right});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::ProcessHorizontal
// Il2CppName: ProcessHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::ProcessHorizontal)> {
  static const MethodInfo* get() {
    static auto* horzEdge = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "ProcessHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{horzEdge});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::GetNextInAEL
// Il2CppName: GetNextInAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::TEdge* (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::Direction)>(&UnityEngine::Rendering::Universal::Clipper::GetNextInAEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* Direction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Direction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "GetNextInAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, Direction});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::IsMinima
// Il2CppName: IsMinima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::IsMinima)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "IsMinima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::IsMaxima
// Il2CppName: IsMaxima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*, double)>(&UnityEngine::Rendering::Universal::Clipper::IsMaxima)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "IsMaxima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, Y});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::IsIntermediate
// Il2CppName: IsIntermediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*, double)>(&UnityEngine::Rendering::Universal::Clipper::IsIntermediate)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "IsIntermediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, Y});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::GetMaximaPair
// Il2CppName: GetMaximaPair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::TEdge* (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::GetMaximaPair)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "GetMaximaPair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::GetMaximaPairEx
// Il2CppName: GetMaximaPairEx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::TEdge* (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::GetMaximaPairEx)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "GetMaximaPairEx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::ProcessIntersections
// Il2CppName: ProcessIntersections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(int64_t)>(&UnityEngine::Rendering::Universal::Clipper::ProcessIntersections)> {
  static const MethodInfo* get() {
    static auto* topY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "ProcessIntersections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topY});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::BuildIntersectList
// Il2CppName: BuildIntersectList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(int64_t)>(&UnityEngine::Rendering::Universal::Clipper::BuildIntersectList)> {
  static const MethodInfo* get() {
    static auto* topY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "BuildIntersectList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topY});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::EdgesAdjacent
// Il2CppName: EdgesAdjacent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::IntersectNode*)>(&UnityEngine::Rendering::Universal::Clipper::EdgesAdjacent)> {
  static const MethodInfo* get() {
    static auto* inode = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntersectNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "EdgesAdjacent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::IntersectNodeSort
// Il2CppName: IntersectNodeSort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Rendering::Universal::IntersectNode*, ::UnityEngine::Rendering::Universal::IntersectNode*)>(&UnityEngine::Rendering::Universal::Clipper::IntersectNodeSort)> {
  static const MethodInfo* get() {
    static auto* node1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntersectNode")->byval_arg;
    static auto* node2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntersectNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "IntersectNodeSort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node1, node2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::FixupIntersectionOrder
// Il2CppName: FixupIntersectionOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)()>(&UnityEngine::Rendering::Universal::Clipper::FixupIntersectionOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "FixupIntersectionOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::ProcessIntersectList
// Il2CppName: ProcessIntersectList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)()>(&UnityEngine::Rendering::Universal::Clipper::ProcessIntersectList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "ProcessIntersectList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::Round
// Il2CppName: Round
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(double)>(&UnityEngine::Rendering::Universal::Clipper::Round)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "Round", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::TopX
// Il2CppName: TopX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::UnityEngine::Rendering::Universal::TEdge*, int64_t)>(&UnityEngine::Rendering::Universal::Clipper::TopX)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* currentY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "TopX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge, currentY});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::IntersectPoint
// Il2CppName: IntersectPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*, ::UnityEngine::Rendering::Universal::TEdge*, ByRef<::UnityEngine::Rendering::Universal::IntPoint>)>(&UnityEngine::Rendering::Universal::Clipper::IntersectPoint)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    static auto* ip = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "IntersectPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2, ip});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::ProcessEdgesAtTopOfScanbeam
// Il2CppName: ProcessEdgesAtTopOfScanbeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(int64_t)>(&UnityEngine::Rendering::Universal::Clipper::ProcessEdgesAtTopOfScanbeam)> {
  static const MethodInfo* get() {
    static auto* topY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "ProcessEdgesAtTopOfScanbeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topY});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::DoMaxima
// Il2CppName: DoMaxima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::TEdge*)>(&UnityEngine::Rendering::Universal::Clipper::DoMaxima)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "DoMaxima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::ReversePaths
// Il2CppName: ReversePaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>*)>(&UnityEngine::Rendering::Universal::Clipper::ReversePaths)> {
  static const MethodInfo* get() {
    static auto* polys = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "ReversePaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polys});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::Orientation
// Il2CppName: Orientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*)>(&UnityEngine::Rendering::Universal::Clipper::Orientation)> {
  static const MethodInfo* get() {
    static auto* poly = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "Orientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poly});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::PointCount
// Il2CppName: PointCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutPt*)>(&UnityEngine::Rendering::Universal::Clipper::PointCount)> {
  static const MethodInfo* get() {
    static auto* pts = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "PointCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pts});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::BuildResult
// Il2CppName: BuildResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>*)>(&UnityEngine::Rendering::Universal::Clipper::BuildResult)> {
  static const MethodInfo* get() {
    static auto* polyg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "BuildResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polyg});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::BuildResult2
// Il2CppName: BuildResult2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::PolyTree*)>(&UnityEngine::Rendering::Universal::Clipper::BuildResult2)> {
  static const MethodInfo* get() {
    static auto* polytree = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "BuildResult2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polytree});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::FixupOutPolyline
// Il2CppName: FixupOutPolyline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutRec*)>(&UnityEngine::Rendering::Universal::Clipper::FixupOutPolyline)> {
  static const MethodInfo* get() {
    static auto* outrec = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "FixupOutPolyline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outrec});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::FixupOutPolygon
// Il2CppName: FixupOutPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutRec*)>(&UnityEngine::Rendering::Universal::Clipper::FixupOutPolygon)> {
  static const MethodInfo* get() {
    static auto* outRec = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "FixupOutPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::DupOutPt
// Il2CppName: DupOutPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::OutPt* (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutPt*, bool)>(&UnityEngine::Rendering::Universal::Clipper::DupOutPt)> {
  static const MethodInfo* get() {
    static auto* outPt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    static auto* InsertAfter = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "DupOutPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outPt, InsertAfter});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::GetOverlap
// Il2CppName: GetOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(int64_t, int64_t, int64_t, int64_t, ByRef<int64_t>, ByRef<int64_t>)>(&UnityEngine::Rendering::Universal::Clipper::GetOverlap)> {
  static const MethodInfo* get() {
    static auto* a1 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* a2 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* b1 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* b2 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* Left = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* Right = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "GetOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a1, a2, b1, b2, Left, Right});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::JoinHorz
// Il2CppName: JoinHorz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutPt*, ::UnityEngine::Rendering::Universal::OutPt*, ::UnityEngine::Rendering::Universal::OutPt*, ::UnityEngine::Rendering::Universal::OutPt*, ::UnityEngine::Rendering::Universal::IntPoint, bool)>(&UnityEngine::Rendering::Universal::Clipper::JoinHorz)> {
  static const MethodInfo* get() {
    static auto* op1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    static auto* op1b = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    static auto* op2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    static auto* op2b = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    static auto* Pt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* DiscardLeft = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "JoinHorz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op1, op1b, op2, op2b, Pt, DiscardLeft});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::JoinPoints
// Il2CppName: JoinPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::Join*, ::UnityEngine::Rendering::Universal::OutRec*, ::UnityEngine::Rendering::Universal::OutRec*)>(&UnityEngine::Rendering::Universal::Clipper::JoinPoints)> {
  static const MethodInfo* get() {
    static auto* j = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Join")->byval_arg;
    static auto* outRec1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    static auto* outRec2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "JoinPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{j, outRec1, outRec2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::PointInPolygon
// Il2CppName: PointInPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Rendering::Universal::IntPoint, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*)>(&UnityEngine::Rendering::Universal::Clipper::PointInPolygon)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "PointInPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, path});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::PointInPolygon
// Il2CppName: PointInPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::OutPt*)>(&UnityEngine::Rendering::Universal::Clipper::PointInPolygon)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* op = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "PointInPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, op});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::Poly2ContainsPoly1
// Il2CppName: Poly2ContainsPoly1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::Universal::OutPt*, ::UnityEngine::Rendering::Universal::OutPt*)>(&UnityEngine::Rendering::Universal::Clipper::Poly2ContainsPoly1)> {
  static const MethodInfo* get() {
    static auto* outPt1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    static auto* outPt2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "Poly2ContainsPoly1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outPt1, outPt2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::FixupFirstLefts1
// Il2CppName: FixupFirstLefts1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutRec*, ::UnityEngine::Rendering::Universal::OutRec*)>(&UnityEngine::Rendering::Universal::Clipper::FixupFirstLefts1)> {
  static const MethodInfo* get() {
    static auto* OldOutRec = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    static auto* NewOutRec = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "FixupFirstLefts1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OldOutRec, NewOutRec});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::FixupFirstLefts2
// Il2CppName: FixupFirstLefts2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutRec*, ::UnityEngine::Rendering::Universal::OutRec*)>(&UnityEngine::Rendering::Universal::Clipper::FixupFirstLefts2)> {
  static const MethodInfo* get() {
    static auto* innerOutRec = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    static auto* outerOutRec = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "FixupFirstLefts2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{innerOutRec, outerOutRec});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::FixupFirstLefts3
// Il2CppName: FixupFirstLefts3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutRec*, ::UnityEngine::Rendering::Universal::OutRec*)>(&UnityEngine::Rendering::Universal::Clipper::FixupFirstLefts3)> {
  static const MethodInfo* get() {
    static auto* OldOutRec = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    static auto* NewOutRec = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "FixupFirstLefts3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OldOutRec, NewOutRec});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::ParseFirstLeft
// Il2CppName: ParseFirstLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::OutRec* (*)(::UnityEngine::Rendering::Universal::OutRec*)>(&UnityEngine::Rendering::Universal::Clipper::ParseFirstLeft)> {
  static const MethodInfo* get() {
    static auto* FirstLeft = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "ParseFirstLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FirstLeft});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::JoinCommonEdges
// Il2CppName: JoinCommonEdges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)()>(&UnityEngine::Rendering::Universal::Clipper::JoinCommonEdges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "JoinCommonEdges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::UpdateOutPtIdxs
// Il2CppName: UpdateOutPtIdxs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutRec*)>(&UnityEngine::Rendering::Universal::Clipper::UpdateOutPtIdxs)> {
  static const MethodInfo* get() {
    static auto* outrec = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "UpdateOutPtIdxs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outrec});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::DoSimplePolygons
// Il2CppName: DoSimplePolygons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Clipper::*)()>(&UnityEngine::Rendering::Universal::Clipper::DoSimplePolygons)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "DoSimplePolygons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::Area
// Il2CppName: Area
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*)>(&UnityEngine::Rendering::Universal::Clipper::Area)> {
  static const MethodInfo* get() {
    static auto* poly = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "Area", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poly});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::Area
// Il2CppName: Area
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutRec*)>(&UnityEngine::Rendering::Universal::Clipper::Area)> {
  static const MethodInfo* get() {
    static auto* outRec = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "Area", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::Area
// Il2CppName: Area
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Rendering::Universal::Clipper::*)(::UnityEngine::Rendering::Universal::OutPt*)>(&UnityEngine::Rendering::Universal::Clipper::Area)> {
  static const MethodInfo* get() {
    static auto* op = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "Area", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::SimplifyPolygon
// Il2CppName: SimplifyPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, ::UnityEngine::Rendering::Universal::PolyFillType)>(&UnityEngine::Rendering::Universal::Clipper::SimplifyPolygon)> {
  static const MethodInfo* get() {
    static auto* poly = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* fillType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyFillType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "SimplifyPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poly, fillType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::SimplifyPolygons
// Il2CppName: SimplifyPolygons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* (*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>*, ::UnityEngine::Rendering::Universal::PolyFillType)>(&UnityEngine::Rendering::Universal::Clipper::SimplifyPolygons)> {
  static const MethodInfo* get() {
    static auto* polys = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})})->byval_arg;
    static auto* fillType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyFillType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "SimplifyPolygons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polys, fillType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::DistanceSqrd
// Il2CppName: DistanceSqrd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint)>(&UnityEngine::Rendering::Universal::Clipper::DistanceSqrd)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "DistanceSqrd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::DistanceFromLineSqrd
// Il2CppName: DistanceFromLineSqrd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint)>(&UnityEngine::Rendering::Universal::Clipper::DistanceFromLineSqrd)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* ln1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* ln2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "DistanceFromLineSqrd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, ln1, ln2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::SlopesNearCollinear
// Il2CppName: SlopesNearCollinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint, double)>(&UnityEngine::Rendering::Universal::Clipper::SlopesNearCollinear)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* pt3 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* distSqrd = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "SlopesNearCollinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2, pt3, distSqrd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::PointsAreClose
// Il2CppName: PointsAreClose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::Universal::IntPoint, ::UnityEngine::Rendering::Universal::IntPoint, double)>(&UnityEngine::Rendering::Universal::Clipper::PointsAreClose)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    static auto* distSqrd = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "PointsAreClose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2, distSqrd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::ExcludeOp
// Il2CppName: ExcludeOp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::OutPt* (*)(::UnityEngine::Rendering::Universal::OutPt*)>(&UnityEngine::Rendering::Universal::Clipper::ExcludeOp)> {
  static const MethodInfo* get() {
    static auto* op = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "ExcludeOp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::CleanPolygon
// Il2CppName: CleanPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, double)>(&UnityEngine::Rendering::Universal::Clipper::CleanPolygon)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "CleanPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, distance});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::CleanPolygons
// Il2CppName: CleanPolygons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* (*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>*, double)>(&UnityEngine::Rendering::Universal::Clipper::CleanPolygons)> {
  static const MethodInfo* get() {
    static auto* polys = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})})->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "CleanPolygons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polys, distance});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::Minkowski
// Il2CppName: Minkowski
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, bool, bool)>(&UnityEngine::Rendering::Universal::Clipper::Minkowski)> {
  static const MethodInfo* get() {
    static auto* pattern = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* IsSum = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* IsClosed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "Minkowski", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pattern, path, IsSum, IsClosed});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::MinkowskiSum
// Il2CppName: MinkowskiSum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, bool)>(&UnityEngine::Rendering::Universal::Clipper::MinkowskiSum)> {
  static const MethodInfo* get() {
    static auto* pattern = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* pathIsClosed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "MinkowskiSum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pattern, path, pathIsClosed});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::TranslatePath
// Il2CppName: TranslatePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>* (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, ::UnityEngine::Rendering::Universal::IntPoint)>(&UnityEngine::Rendering::Universal::Clipper::TranslatePath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* delta = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "TranslatePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, delta});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::MinkowskiSum
// Il2CppName: MinkowskiSum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>*, bool)>(&UnityEngine::Rendering::Universal::Clipper::MinkowskiSum)> {
  static const MethodInfo* get() {
    static auto* pattern = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* paths = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})})->byval_arg;
    static auto* pathIsClosed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "MinkowskiSum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pattern, paths, pathIsClosed});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::MinkowskiDiff
// Il2CppName: MinkowskiDiff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* (*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*, ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*)>(&UnityEngine::Rendering::Universal::Clipper::MinkowskiDiff)> {
  static const MethodInfo* get() {
    static auto* poly1 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    static auto* poly2 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "MinkowskiDiff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poly1, poly2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::PolyTreeToPaths
// Il2CppName: PolyTreeToPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* (*)(::UnityEngine::Rendering::Universal::PolyTree*)>(&UnityEngine::Rendering::Universal::Clipper::PolyTreeToPaths)> {
  static const MethodInfo* get() {
    static auto* polytree = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "PolyTreeToPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polytree});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::AddPolyNodeToPaths
// Il2CppName: AddPolyNodeToPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::PolyNode*, ::UnityEngine::Rendering::Universal::Clipper::NodeType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>*)>(&UnityEngine::Rendering::Universal::Clipper::AddPolyNodeToPaths)> {
  static const MethodInfo* get() {
    static auto* polynode = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyNode")->byval_arg;
    static auto* nt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Clipper/NodeType")->byval_arg;
    static auto* paths = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "IntPoint")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "AddPolyNodeToPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polynode, nt, paths});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::OpenPathsFromPolyTree
// Il2CppName: OpenPathsFromPolyTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* (*)(::UnityEngine::Rendering::Universal::PolyTree*)>(&UnityEngine::Rendering::Universal::Clipper::OpenPathsFromPolyTree)> {
  static const MethodInfo* get() {
    static auto* polytree = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "OpenPathsFromPolyTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polytree});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Clipper::ClosedPathsFromPolyTree
// Il2CppName: ClosedPathsFromPolyTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::IntPoint>*>* (*)(::UnityEngine::Rendering::Universal::PolyTree*)>(&UnityEngine::Rendering::Universal::Clipper::ClosedPathsFromPolyTree)> {
  static const MethodInfo* get() {
    static auto* polytree = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "PolyTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Clipper*), "ClosedPathsFromPolyTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polytree});
  }
};
