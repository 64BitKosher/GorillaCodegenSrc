// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.IJobFor
#include "Unity/Jobs/IJobFor.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Rendering.VisibleLight
#include "UnityEngine/Rendering/VisibleLight.hpp"
// Including type: UnityEngine.Rendering.VisibleReflectionProbe
#include "UnityEngine/Rendering/VisibleReflectionProbe.hpp"
// Including type: UnityEngine.Rendering.Universal.InclusiveRange
#include "UnityEngine/Rendering/Universal/InclusiveRange.hpp"
// Including type: UnityEngine.Rendering.Universal.Fixed2`1
#include "UnityEngine/Rendering/Universal/Fixed2_1.hpp"
// Including type: Unity.Mathematics.float4x4
#include "Unity/Mathematics/float4x4.hpp"
// Including type: Unity.Mathematics.float2
#include "Unity/Mathematics/float2.hpp"
// Including type: Unity.Mathematics.int2
#include "Unity/Mathematics/int2.hpp"
// Including type: Unity.Mathematics.float3
#include "Unity/Mathematics/float3.hpp"
// Including type: Unity.Mathematics.int4
#include "Unity/Mathematics/int4.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: TilingJob
  struct TilingJob;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::TilingJob, "UnityEngine.Rendering.Universal", "TilingJob");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.TilingJob
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct TilingJob/*, public ::System::ValueType, public ::Unity::Jobs::IJobFor*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::TilingJob::$$c__DisplayClass19_0
    struct $$c__DisplayClass19_0;
    // Nested type: ::UnityEngine::Rendering::Universal::TilingJob::$$c__DisplayClass20_0
    struct $$c__DisplayClass20_0;
    public:
    // public Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleLight> lights
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight> lights;
    // public Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleReflectionProbe> reflectionProbes
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleReflectionProbe> reflectionProbes;
    // public Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.InclusiveRange> tileRanges
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::InclusiveRange> tileRanges;
    // public System.Int32 itemsPerTile
    // Size: 0x4
    // Offset: 0x30
    int itemsPerTile;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 rangesPerItem
    // Size: 0x4
    // Offset: 0x34
    int rangesPerItem;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Rendering.Universal.Fixed2`1<Unity.Mathematics.float4x4> worldToViews
    // Size: 0xFFFFFFFF
    // Offset: 0x38
    ::UnityEngine::Rendering::Universal::Fixed2_1<::Unity::Mathematics::float4x4> worldToViews;
    // public Unity.Mathematics.float4 centerOffset
    // Size: 0x10
    // Offset: 0xB8
    ::Unity::Mathematics::float4 centerOffset;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float4) == 0x10);
    // public Unity.Mathematics.float2 tileScale
    // Size: 0x8
    // Offset: 0xC8
    ::Unity::Mathematics::float2 tileScale;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float2) == 0x8);
    // public Unity.Mathematics.float2 tileScaleInv
    // Size: 0x8
    // Offset: 0xD0
    ::Unity::Mathematics::float2 tileScaleInv;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float2) == 0x8);
    // public UnityEngine.Rendering.Universal.Fixed2`1<Unity.Mathematics.float2> viewPlaneHalfSizes
    // Size: 0xFFFFFFFF
    // Offset: 0xD8
    ::UnityEngine::Rendering::Universal::Fixed2_1<::Unity::Mathematics::float2> viewPlaneHalfSizes;
    // public UnityEngine.Rendering.Universal.Fixed2`1<Unity.Mathematics.float2> viewPlaneHalfSizeInvs
    // Size: 0xFFFFFFFF
    // Offset: 0xE8
    ::UnityEngine::Rendering::Universal::Fixed2_1<::Unity::Mathematics::float2> viewPlaneHalfSizeInvs;
    // public Unity.Mathematics.int2 tileCount
    // Size: 0x8
    // Offset: 0xF8
    ::Unity::Mathematics::int2 tileCount;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::int2) == 0x8);
    // public System.Single near
    // Size: 0x4
    // Offset: 0x100
    float near;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isOrthographic
    // Size: 0x1
    // Offset: 0x104
    bool isOrthographic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Rendering.Universal.InclusiveRange m_TileYRange
    // Size: 0x4
    // Offset: 0x106
    ::UnityEngine::Rendering::Universal::InclusiveRange m_TileYRange;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::InclusiveRange) == 0x4);
    // private System.Int32 m_Offset
    // Size: 0x4
    // Offset: 0x10C
    int m_Offset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_ViewIndex
    // Size: 0x4
    // Offset: 0x110
    int m_ViewIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Unity.Mathematics.float2 m_CenterOffset
    // Size: 0x8
    // Offset: 0x114
    ::Unity::Mathematics::float2 m_CenterOffset;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float2) == 0x8);
    public:
    // Creating value type constructor for type: TilingJob
    constexpr TilingJob(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight> lights_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleReflectionProbe> reflectionProbes_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::InclusiveRange> tileRanges_ = {}, int itemsPerTile_ = {}, int rangesPerItem_ = {}, ::UnityEngine::Rendering::Universal::Fixed2_1<::Unity::Mathematics::float4x4> worldToViews_ = {}, ::Unity::Mathematics::float4 centerOffset_ = {}, ::Unity::Mathematics::float2 tileScale_ = {}, ::Unity::Mathematics::float2 tileScaleInv_ = {}, ::UnityEngine::Rendering::Universal::Fixed2_1<::Unity::Mathematics::float2> viewPlaneHalfSizes_ = {}, ::UnityEngine::Rendering::Universal::Fixed2_1<::Unity::Mathematics::float2> viewPlaneHalfSizeInvs_ = {}, ::Unity::Mathematics::int2 tileCount_ = {}, float near_ = {}, bool isOrthographic_ = {}, ::UnityEngine::Rendering::Universal::InclusiveRange m_TileYRange_ = {}, int m_Offset_ = {}, int m_ViewIndex_ = {}, ::Unity::Mathematics::float2 m_CenterOffset_ = {}) noexcept : lights{lights_}, reflectionProbes{reflectionProbes_}, tileRanges{tileRanges_}, itemsPerTile{itemsPerTile_}, rangesPerItem{rangesPerItem_}, worldToViews{worldToViews_}, centerOffset{centerOffset_}, tileScale{tileScale_}, tileScaleInv{tileScaleInv_}, viewPlaneHalfSizes{viewPlaneHalfSizes_}, viewPlaneHalfSizeInvs{viewPlaneHalfSizeInvs_}, tileCount{tileCount_}, near{near_}, isOrthographic{isOrthographic_}, m_TileYRange{m_TileYRange_}, m_Offset{m_Offset_}, m_ViewIndex{m_ViewIndex_}, m_CenterOffset{m_CenterOffset_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Jobs::IJobFor
    operator ::Unity::Jobs::IJobFor() noexcept {
      return *reinterpret_cast<::Unity::Jobs::IJobFor*>(this);
    }
    // Get static field: static private readonly Unity.Mathematics.float3[] k_CubePoints
    static ::ArrayW<::Unity::Mathematics::float3> _get_k_CubePoints();
    // Set static field: static private readonly Unity.Mathematics.float3[] k_CubePoints
    static void _set_k_CubePoints(::ArrayW<::Unity::Mathematics::float3> value);
    // Get static field: static private readonly Unity.Mathematics.int4[] k_CubeLineIndices
    static ::ArrayW<::Unity::Mathematics::int4> _get_k_CubeLineIndices();
    // Set static field: static private readonly Unity.Mathematics.int4[] k_CubeLineIndices
    static void _set_k_CubeLineIndices(::ArrayW<::Unity::Mathematics::int4> value);
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleLight> lights
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight>& dyn_lights();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleReflectionProbe> reflectionProbes
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleReflectionProbe>& dyn_reflectionProbes();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.InclusiveRange> tileRanges
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::InclusiveRange>& dyn_tileRanges();
    // Get instance field reference: public System.Int32 itemsPerTile
    [[deprecated("Use field access instead!")]] int& dyn_itemsPerTile();
    // Get instance field reference: public System.Int32 rangesPerItem
    [[deprecated("Use field access instead!")]] int& dyn_rangesPerItem();
    // Get instance field reference: public UnityEngine.Rendering.Universal.Fixed2`1<Unity.Mathematics.float4x4> worldToViews
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Fixed2_1<::Unity::Mathematics::float4x4>& dyn_worldToViews();
    // Get instance field reference: public Unity.Mathematics.float4 centerOffset
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float4& dyn_centerOffset();
    // Get instance field reference: public Unity.Mathematics.float2 tileScale
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float2& dyn_tileScale();
    // Get instance field reference: public Unity.Mathematics.float2 tileScaleInv
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float2& dyn_tileScaleInv();
    // Get instance field reference: public UnityEngine.Rendering.Universal.Fixed2`1<Unity.Mathematics.float2> viewPlaneHalfSizes
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Fixed2_1<::Unity::Mathematics::float2>& dyn_viewPlaneHalfSizes();
    // Get instance field reference: public UnityEngine.Rendering.Universal.Fixed2`1<Unity.Mathematics.float2> viewPlaneHalfSizeInvs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Fixed2_1<::Unity::Mathematics::float2>& dyn_viewPlaneHalfSizeInvs();
    // Get instance field reference: public Unity.Mathematics.int2 tileCount
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::int2& dyn_tileCount();
    // Get instance field reference: public System.Single near
    [[deprecated("Use field access instead!")]] float& dyn_near();
    // Get instance field reference: public System.Boolean isOrthographic
    [[deprecated("Use field access instead!")]] bool& dyn_isOrthographic();
    // Get instance field reference: private UnityEngine.Rendering.Universal.InclusiveRange m_TileYRange
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::InclusiveRange& dyn_m_TileYRange();
    // Get instance field reference: private System.Int32 m_Offset
    [[deprecated("Use field access instead!")]] int& dyn_m_Offset();
    // Get instance field reference: private System.Int32 m_ViewIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_ViewIndex();
    // Get instance field reference: private Unity.Mathematics.float2 m_CenterOffset
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float2& dyn_m_CenterOffset();
    // public System.Void Execute(System.Int32 jobIndex)
    // Offset: 0x52E0D2C
    void Execute(int jobIndex);
    // private System.Void TileLight(System.Int32 lightIndex)
    // Offset: 0x52E1A04
    void TileLight(int lightIndex);
    // private System.Void TileLightOrthographic(System.Int32 lightIndex)
    // Offset: 0x52E0DE4
    void TileLightOrthographic(int lightIndex);
    // private System.Void TileReflectionProbe(System.Int32 index)
    // Offset: 0x52E3430
    void TileReflectionProbe(int index);
    // private Unity.Mathematics.float2 ViewToTileSpace(Unity.Mathematics.float3 positionVS)
    // Offset: 0x52E4E7C
    ::Unity::Mathematics::float2 ViewToTileSpace(::Unity::Mathematics::float3 positionVS);
    // private Unity.Mathematics.float2 ViewToTileSpaceOrthographic(Unity.Mathematics.float3 positionVS)
    // Offset: 0x52E5C3C
    ::Unity::Mathematics::float2 ViewToTileSpaceOrthographic(::Unity::Mathematics::float3 positionVS);
    // private System.Void ExpandY(Unity.Mathematics.float3 positionVS)
    // Offset: 0x52E3C0C
    void ExpandY(::Unity::Mathematics::float3 positionVS);
    // private System.Void ExpandOrthographic(Unity.Mathematics.float3 positionVS)
    // Offset: 0x52E5A0C
    void ExpandOrthographic(::Unity::Mathematics::float3 positionVS);
    // private System.Void ExpandRangeOrthographic(ref UnityEngine.Rendering.Universal.InclusiveRange range, System.Single xVS)
    // Offset: 0x52E5BB8
    void ExpandRangeOrthographic(ByRef<::UnityEngine::Rendering::Universal::InclusiveRange> range, float xVS);
    // static private System.Single square(System.Single x)
    // Offset: 0x52E3CC8
    static float square(float x);
    // static private System.Void GetSphereHorizon(Unity.Mathematics.float2 center, System.Single radius, System.Single near, System.Single clipRadius, out Unity.Mathematics.float2 p0, out Unity.Mathematics.float2 p1)
    // Offset: 0x52E3CD0
    static void GetSphereHorizon(::Unity::Mathematics::float2 center, float radius, float near, float clipRadius, ByRef<::Unity::Mathematics::float2> p0, ByRef<::Unity::Mathematics::float2> p1);
    // static private System.Void GetSphereYPlaneHorizon(Unity.Mathematics.float3 center, System.Single sphereRadius, System.Single near, System.Single clipRadius, System.Single y, out Unity.Mathematics.float3 left, out Unity.Mathematics.float3 right)
    // Offset: 0x52E5630
    static void GetSphereYPlaneHorizon(::Unity::Mathematics::float3 center, float sphereRadius, float near, float clipRadius, float y, ByRef<::Unity::Mathematics::float3> left, ByRef<::Unity::Mathematics::float3> right);
    // static private System.Boolean GetCircleClipPoints(Unity.Mathematics.float3 circleCenter, Unity.Mathematics.float3 circleNormal, System.Single circleRadius, System.Single near, out Unity.Mathematics.float3 p0, out Unity.Mathematics.float3 p1)
    // Offset: 0x52E423C
    static bool GetCircleClipPoints(::Unity::Mathematics::float3 circleCenter, ::Unity::Mathematics::float3 circleNormal, float circleRadius, float near, ByRef<::Unity::Mathematics::float3> p0, ByRef<::Unity::Mathematics::float3> p1);
    // static private System.ValueTuple`2<System.Single,System.Single> IntersectEllipseLine(System.Single a, System.Single b, Unity.Mathematics.float3 line)
    // Offset: 0x52E5CD8
    static ::System::ValueTuple_2<float, float> IntersectEllipseLine(float a, float b, ::Unity::Mathematics::float3 line);
    // static private System.Void GetProjectedCircleHorizon(Unity.Mathematics.float2 center, System.Single radius, Unity.Mathematics.float2 U, Unity.Mathematics.float2 V, out Unity.Mathematics.float2 uv1, out Unity.Mathematics.float2 uv2)
    // Offset: 0x52E4044
    static void GetProjectedCircleHorizon(::Unity::Mathematics::float2 center, float radius, ::Unity::Mathematics::float2 U, ::Unity::Mathematics::float2 V, ByRef<::Unity::Mathematics::float2> uv1, ByRef<::Unity::Mathematics::float2> uv2);
    // static private System.Boolean IntersectCircleYPlane(System.Single y, Unity.Mathematics.float3 circleCenter, Unity.Mathematics.float3 circleNormal, Unity.Mathematics.float3 circleU, Unity.Mathematics.float3 circleV, System.Single circleRadius, out Unity.Mathematics.float3 p1, out Unity.Mathematics.float3 p2)
    // Offset: 0x52E4F24
    static bool IntersectCircleYPlane(float y, ::Unity::Mathematics::float3 circleCenter, ::Unity::Mathematics::float3 circleNormal, ::Unity::Mathematics::float3 circleU, ::Unity::Mathematics::float3 circleV, float circleRadius, ByRef<::Unity::Mathematics::float3> p1, ByRef<::Unity::Mathematics::float3> p2);
    // static private System.Void GetConeSideTangentPoints(Unity.Mathematics.float3 vertex, Unity.Mathematics.float3 axis, System.Single cosHalfAngle, System.Single circleRadius, System.Single coneHeight, System.Single range, Unity.Mathematics.float3 circleU, Unity.Mathematics.float3 circleV, out Unity.Mathematics.float3 l1, out Unity.Mathematics.float3 l2)
    // Offset: 0x52E49A8
    static void GetConeSideTangentPoints(::Unity::Mathematics::float3 vertex, ::Unity::Mathematics::float3 axis, float cosHalfAngle, float circleRadius, float coneHeight, float range, ::Unity::Mathematics::float3 circleU, ::Unity::Mathematics::float3 circleV, ByRef<::Unity::Mathematics::float3> l1, ByRef<::Unity::Mathematics::float3> l2);
    // static private Unity.Mathematics.float3 EvaluateNearConic(System.Single near, Unity.Mathematics.float3 o, Unity.Mathematics.float3 d, System.Single r, Unity.Mathematics.float3 u, Unity.Mathematics.float3 v, System.Single theta)
    // Offset: 0x52E46C8
    static ::Unity::Mathematics::float3 EvaluateNearConic(float near, ::Unity::Mathematics::float3 o, ::Unity::Mathematics::float3 d, float r, ::Unity::Mathematics::float3 u, ::Unity::Mathematics::float3 v, float theta);
    // static private Unity.Mathematics.float2 FindNearConicTangentTheta(Unity.Mathematics.float2 o, Unity.Mathematics.float2 d, System.Single r, Unity.Mathematics.float2 u, Unity.Mathematics.float2 v)
    // Offset: 0x52E443C
    static ::Unity::Mathematics::float2 FindNearConicTangentTheta(::Unity::Mathematics::float2 o, ::Unity::Mathematics::float2 d, float r, ::Unity::Mathematics::float2 u, ::Unity::Mathematics::float2 v);
    // static private Unity.Mathematics.float2 FindNearConicYTheta(System.Single near, Unity.Mathematics.float3 o, Unity.Mathematics.float3 d, System.Single r, Unity.Mathematics.float3 u, Unity.Mathematics.float3 v, System.Single y)
    // Offset: 0x52E51CC
    static ::Unity::Mathematics::float2 FindNearConicYTheta(float near, ::Unity::Mathematics::float3 o, ::Unity::Mathematics::float3 d, float r, ::Unity::Mathematics::float3 u, ::Unity::Mathematics::float3 v, float y);
    // static private System.Void .cctor()
    // Offset: 0x52E5E40
    static void _cctor();
    // static System.Boolean <TileLight>g__SpherePointIsValid|19_0(Unity.Mathematics.float3 p, ref UnityEngine.Rendering.Universal.TilingJob/<>c__DisplayClass19_0 )
    // Offset: 0x52E3F54
    static bool $TileLight$g__SpherePointIsValid_19_0(::Unity::Mathematics::float3 p, ByRef<::UnityEngine::Rendering::Universal::TilingJob::$$c__DisplayClass19_0> param_1);
    // static System.Boolean <TileLight>g__ConicPointIsValid|19_1(Unity.Mathematics.float3 p, ref UnityEngine.Rendering.Universal.TilingJob/<>c__DisplayClass19_0 )
    // Offset: 0x52E4894
    static bool $TileLight$g__ConicPointIsValid_19_1(::Unity::Mathematics::float3 p, ByRef<::UnityEngine::Rendering::Universal::TilingJob::$$c__DisplayClass19_0> param_1);
    // static System.Boolean <TileLightOrthographic>g__SpherePointIsValid|20_0(Unity.Mathematics.float3 p, ref UnityEngine.Rendering.Universal.TilingJob/<>c__DisplayClass20_0 )
    // Offset: 0x52E5AC8
    static bool $TileLightOrthographic$g__SpherePointIsValid_20_0(::Unity::Mathematics::float3 p, ByRef<::UnityEngine::Rendering::Universal::TilingJob::$$c__DisplayClass20_0> param_1);
  }; // UnityEngine.Rendering.Universal.TilingJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::TilingJob::*)(int)>(&UnityEngine::Rendering::Universal::TilingJob::Execute)> {
  static const MethodInfo* get() {
    static auto* jobIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jobIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::TileLight
// Il2CppName: TileLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::TilingJob::*)(int)>(&UnityEngine::Rendering::Universal::TilingJob::TileLight)> {
  static const MethodInfo* get() {
    static auto* lightIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "TileLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lightIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::TileLightOrthographic
// Il2CppName: TileLightOrthographic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::TilingJob::*)(int)>(&UnityEngine::Rendering::Universal::TilingJob::TileLightOrthographic)> {
  static const MethodInfo* get() {
    static auto* lightIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "TileLightOrthographic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lightIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::TileReflectionProbe
// Il2CppName: TileReflectionProbe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::TilingJob::*)(int)>(&UnityEngine::Rendering::Universal::TilingJob::TileReflectionProbe)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "TileReflectionProbe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::ViewToTileSpace
// Il2CppName: ViewToTileSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (UnityEngine::Rendering::Universal::TilingJob::*)(::Unity::Mathematics::float3)>(&UnityEngine::Rendering::Universal::TilingJob::ViewToTileSpace)> {
  static const MethodInfo* get() {
    static auto* positionVS = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "ViewToTileSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positionVS});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::ViewToTileSpaceOrthographic
// Il2CppName: ViewToTileSpaceOrthographic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (UnityEngine::Rendering::Universal::TilingJob::*)(::Unity::Mathematics::float3)>(&UnityEngine::Rendering::Universal::TilingJob::ViewToTileSpaceOrthographic)> {
  static const MethodInfo* get() {
    static auto* positionVS = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "ViewToTileSpaceOrthographic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positionVS});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::ExpandY
// Il2CppName: ExpandY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::TilingJob::*)(::Unity::Mathematics::float3)>(&UnityEngine::Rendering::Universal::TilingJob::ExpandY)> {
  static const MethodInfo* get() {
    static auto* positionVS = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "ExpandY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positionVS});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::ExpandOrthographic
// Il2CppName: ExpandOrthographic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::TilingJob::*)(::Unity::Mathematics::float3)>(&UnityEngine::Rendering::Universal::TilingJob::ExpandOrthographic)> {
  static const MethodInfo* get() {
    static auto* positionVS = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "ExpandOrthographic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positionVS});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::ExpandRangeOrthographic
// Il2CppName: ExpandRangeOrthographic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::TilingJob::*)(ByRef<::UnityEngine::Rendering::Universal::InclusiveRange>, float)>(&UnityEngine::Rendering::Universal::TilingJob::ExpandRangeOrthographic)> {
  static const MethodInfo* get() {
    static auto* range = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "InclusiveRange")->this_arg;
    static auto* xVS = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "ExpandRangeOrthographic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{range, xVS});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::square
// Il2CppName: square
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&UnityEngine::Rendering::Universal::TilingJob::square)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "square", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::GetSphereHorizon
// Il2CppName: GetSphereHorizon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Mathematics::float2, float, float, float, ByRef<::Unity::Mathematics::float2>, ByRef<::Unity::Mathematics::float2>)>(&UnityEngine::Rendering::Universal::TilingJob::GetSphereHorizon)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* near = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* clipRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p0 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->this_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "GetSphereHorizon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, radius, near, clipRadius, p0, p1});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::GetSphereYPlaneHorizon
// Il2CppName: GetSphereYPlaneHorizon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Mathematics::float3, float, float, float, float, ByRef<::Unity::Mathematics::float3>, ByRef<::Unity::Mathematics::float3>)>(&UnityEngine::Rendering::Universal::TilingJob::GetSphereYPlaneHorizon)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* sphereRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* near = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* clipRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* left = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->this_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "GetSphereYPlaneHorizon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, sphereRadius, near, clipRadius, y, left, right});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::GetCircleClipPoints
// Il2CppName: GetCircleClipPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Unity::Mathematics::float3, ::Unity::Mathematics::float3, float, float, ByRef<::Unity::Mathematics::float3>, ByRef<::Unity::Mathematics::float3>)>(&UnityEngine::Rendering::Universal::TilingJob::GetCircleClipPoints)> {
  static const MethodInfo* get() {
    static auto* circleCenter = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* circleNormal = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* circleRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* near = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p0 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->this_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "GetCircleClipPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{circleCenter, circleNormal, circleRadius, near, p0, p1});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::IntersectEllipseLine
// Il2CppName: IntersectEllipseLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<float, float> (*)(float, float, ::Unity::Mathematics::float3)>(&UnityEngine::Rendering::Universal::TilingJob::IntersectEllipseLine)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* line = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "IntersectEllipseLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, line});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::GetProjectedCircleHorizon
// Il2CppName: GetProjectedCircleHorizon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Mathematics::float2, float, ::Unity::Mathematics::float2, ::Unity::Mathematics::float2, ByRef<::Unity::Mathematics::float2>, ByRef<::Unity::Mathematics::float2>)>(&UnityEngine::Rendering::Universal::TilingJob::GetProjectedCircleHorizon)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* U = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* V = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* uv1 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->this_arg;
    static auto* uv2 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "GetProjectedCircleHorizon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, radius, U, V, uv1, uv2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::IntersectCircleYPlane
// Il2CppName: IntersectCircleYPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, ::Unity::Mathematics::float3, ::Unity::Mathematics::float3, ::Unity::Mathematics::float3, ::Unity::Mathematics::float3, float, ByRef<::Unity::Mathematics::float3>, ByRef<::Unity::Mathematics::float3>)>(&UnityEngine::Rendering::Universal::TilingJob::IntersectCircleYPlane)> {
  static const MethodInfo* get() {
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* circleCenter = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* circleNormal = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* circleU = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* circleV = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* circleRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->this_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "IntersectCircleYPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{y, circleCenter, circleNormal, circleU, circleV, circleRadius, p1, p2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::GetConeSideTangentPoints
// Il2CppName: GetConeSideTangentPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Mathematics::float3, ::Unity::Mathematics::float3, float, float, float, float, ::Unity::Mathematics::float3, ::Unity::Mathematics::float3, ByRef<::Unity::Mathematics::float3>, ByRef<::Unity::Mathematics::float3>)>(&UnityEngine::Rendering::Universal::TilingJob::GetConeSideTangentPoints)> {
  static const MethodInfo* get() {
    static auto* vertex = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* cosHalfAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* circleRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* coneHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* range = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* circleU = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* circleV = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* l1 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->this_arg;
    static auto* l2 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "GetConeSideTangentPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertex, axis, cosHalfAngle, circleRadius, coneHeight, range, circleU, circleV, l1, l2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::EvaluateNearConic
// Il2CppName: EvaluateNearConic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (*)(float, ::Unity::Mathematics::float3, ::Unity::Mathematics::float3, float, ::Unity::Mathematics::float3, ::Unity::Mathematics::float3, float)>(&UnityEngine::Rendering::Universal::TilingJob::EvaluateNearConic)> {
  static const MethodInfo* get() {
    static auto* near = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* d = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* u = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* theta = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "EvaluateNearConic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{near, o, d, r, u, v, theta});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::FindNearConicTangentTheta
// Il2CppName: FindNearConicTangentTheta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (*)(::Unity::Mathematics::float2, ::Unity::Mathematics::float2, float, ::Unity::Mathematics::float2, ::Unity::Mathematics::float2)>(&UnityEngine::Rendering::Universal::TilingJob::FindNearConicTangentTheta)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* d = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* u = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "FindNearConicTangentTheta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o, d, r, u, v});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::FindNearConicYTheta
// Il2CppName: FindNearConicYTheta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (*)(float, ::Unity::Mathematics::float3, ::Unity::Mathematics::float3, float, ::Unity::Mathematics::float3, ::Unity::Mathematics::float3, float)>(&UnityEngine::Rendering::Universal::TilingJob::FindNearConicYTheta)> {
  static const MethodInfo* get() {
    static auto* near = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* d = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* u = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "FindNearConicYTheta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{near, o, d, r, u, v, y});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::TilingJob::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::$TileLight$g__SpherePointIsValid_19_0
// Il2CppName: <TileLight>g__SpherePointIsValid|19_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Unity::Mathematics::float3, ByRef<::UnityEngine::Rendering::Universal::TilingJob::$$c__DisplayClass19_0>)>(&UnityEngine::Rendering::Universal::TilingJob::$TileLight$g__SpherePointIsValid_19_0)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* param_1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TilingJob/<>c__DisplayClass19_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "<TileLight>g__SpherePointIsValid|19_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, param_1});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::$TileLight$g__ConicPointIsValid_19_1
// Il2CppName: <TileLight>g__ConicPointIsValid|19_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Unity::Mathematics::float3, ByRef<::UnityEngine::Rendering::Universal::TilingJob::$$c__DisplayClass19_0>)>(&UnityEngine::Rendering::Universal::TilingJob::$TileLight$g__ConicPointIsValid_19_1)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* param_1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TilingJob/<>c__DisplayClass19_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "<TileLight>g__ConicPointIsValid|19_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, param_1});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TilingJob::$TileLightOrthographic$g__SpherePointIsValid_20_0
// Il2CppName: <TileLightOrthographic>g__SpherePointIsValid|20_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Unity::Mathematics::float3, ByRef<::UnityEngine::Rendering::Universal::TilingJob::$$c__DisplayClass20_0>)>(&UnityEngine::Rendering::Universal::TilingJob::$TileLightOrthographic$g__SpherePointIsValid_20_0)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* param_1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "TilingJob/<>c__DisplayClass20_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TilingJob), "<TileLightOrthographic>g__SpherePointIsValid|20_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, param_1});
  }
};
