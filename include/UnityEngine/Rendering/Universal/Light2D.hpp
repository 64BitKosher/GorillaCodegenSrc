// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.U2D.Light2DBase
#include "UnityEngine/U2D/Light2DBase.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Rendering.Universal.LightUtility/LightMeshVertex
#include "UnityEngine/Rendering/Universal/LightUtility.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: UnityEngine.BoundingSphere
#include "UnityEngine/BoundingSphere.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Skipping declaration: LightType because it is already included!
  // Skipping declaration: OverlapOperation because it is already included!
  // Skipping declaration: NormalMapQuality because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
  // Forward declaring type: Mesh
  class Mesh;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: Light2D
  class Light2D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::Light2D);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Light2D*, "UnityEngine.Rendering.Universal", "Light2D");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x130
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.Light2D
  // [TokenAttribute] Offset: FFFFFFFF
  // [MovedFromAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class Light2D : public ::UnityEngine::U2D::Light2DBase/*, public ::UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::Light2D::DeprecatedLightType
    struct DeprecatedLightType;
    // Nested type: ::UnityEngine::Rendering::Universal::Light2D::LightType
    struct LightType;
    // Nested type: ::UnityEngine::Rendering::Universal::Light2D::NormalMapQuality
    struct NormalMapQuality;
    // Nested type: ::UnityEngine::Rendering::Universal::Light2D::OverlapOperation
    struct OverlapOperation;
    // Nested type: ::UnityEngine::Rendering::Universal::Light2D::ComponentVersions
    struct ComponentVersions;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Rendering.Universal.Light2D/LightType
    // [TokenAttribute] Offset: FFFFFFFF
    struct LightType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: LightType
      constexpr LightType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Rendering.Universal.Light2D/LightType Parametric
      static constexpr const int Parametric = 0;
      // Get static field: static public UnityEngine.Rendering.Universal.Light2D/LightType Parametric
      static ::UnityEngine::Rendering::Universal::Light2D::LightType _get_Parametric();
      // Set static field: static public UnityEngine.Rendering.Universal.Light2D/LightType Parametric
      static void _set_Parametric(::UnityEngine::Rendering::Universal::Light2D::LightType value);
      // static field const value: static public UnityEngine.Rendering.Universal.Light2D/LightType Freeform
      static constexpr const int Freeform = 1;
      // Get static field: static public UnityEngine.Rendering.Universal.Light2D/LightType Freeform
      static ::UnityEngine::Rendering::Universal::Light2D::LightType _get_Freeform();
      // Set static field: static public UnityEngine.Rendering.Universal.Light2D/LightType Freeform
      static void _set_Freeform(::UnityEngine::Rendering::Universal::Light2D::LightType value);
      // static field const value: static public UnityEngine.Rendering.Universal.Light2D/LightType Sprite
      static constexpr const int Sprite = 2;
      // Get static field: static public UnityEngine.Rendering.Universal.Light2D/LightType Sprite
      static ::UnityEngine::Rendering::Universal::Light2D::LightType _get_Sprite();
      // Set static field: static public UnityEngine.Rendering.Universal.Light2D/LightType Sprite
      static void _set_Sprite(::UnityEngine::Rendering::Universal::Light2D::LightType value);
      // static field const value: static public UnityEngine.Rendering.Universal.Light2D/LightType Point
      static constexpr const int Point = 3;
      // Get static field: static public UnityEngine.Rendering.Universal.Light2D/LightType Point
      static ::UnityEngine::Rendering::Universal::Light2D::LightType _get_Point();
      // Set static field: static public UnityEngine.Rendering.Universal.Light2D/LightType Point
      static void _set_Point(::UnityEngine::Rendering::Universal::Light2D::LightType value);
      // static field const value: static public UnityEngine.Rendering.Universal.Light2D/LightType Global
      static constexpr const int Global = 4;
      // Get static field: static public UnityEngine.Rendering.Universal.Light2D/LightType Global
      static ::UnityEngine::Rendering::Universal::Light2D::LightType _get_Global();
      // Set static field: static public UnityEngine.Rendering.Universal.Light2D/LightType Global
      static void _set_Global(::UnityEngine::Rendering::Universal::Light2D::LightType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.Rendering.Universal.Light2D/LightType
    #pragma pack(pop)
    static check_size<sizeof(Light2D::LightType), 0 + sizeof(int)> __UnityEngine_Rendering_Universal_Light2D_LightTypeSizeCheck;
    static_assert(sizeof(Light2D::LightType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Rendering.Universal.Light2D/NormalMapQuality
    // [TokenAttribute] Offset: FFFFFFFF
    struct NormalMapQuality/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: NormalMapQuality
      constexpr NormalMapQuality(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Rendering.Universal.Light2D/NormalMapQuality Disabled
      static constexpr const int Disabled = 2;
      // Get static field: static public UnityEngine.Rendering.Universal.Light2D/NormalMapQuality Disabled
      static ::UnityEngine::Rendering::Universal::Light2D::NormalMapQuality _get_Disabled();
      // Set static field: static public UnityEngine.Rendering.Universal.Light2D/NormalMapQuality Disabled
      static void _set_Disabled(::UnityEngine::Rendering::Universal::Light2D::NormalMapQuality value);
      // static field const value: static public UnityEngine.Rendering.Universal.Light2D/NormalMapQuality Fast
      static constexpr const int Fast = 0;
      // Get static field: static public UnityEngine.Rendering.Universal.Light2D/NormalMapQuality Fast
      static ::UnityEngine::Rendering::Universal::Light2D::NormalMapQuality _get_Fast();
      // Set static field: static public UnityEngine.Rendering.Universal.Light2D/NormalMapQuality Fast
      static void _set_Fast(::UnityEngine::Rendering::Universal::Light2D::NormalMapQuality value);
      // static field const value: static public UnityEngine.Rendering.Universal.Light2D/NormalMapQuality Accurate
      static constexpr const int Accurate = 1;
      // Get static field: static public UnityEngine.Rendering.Universal.Light2D/NormalMapQuality Accurate
      static ::UnityEngine::Rendering::Universal::Light2D::NormalMapQuality _get_Accurate();
      // Set static field: static public UnityEngine.Rendering.Universal.Light2D/NormalMapQuality Accurate
      static void _set_Accurate(::UnityEngine::Rendering::Universal::Light2D::NormalMapQuality value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.Rendering.Universal.Light2D/NormalMapQuality
    #pragma pack(pop)
    static check_size<sizeof(Light2D::NormalMapQuality), 0 + sizeof(int)> __UnityEngine_Rendering_Universal_Light2D_NormalMapQualitySizeCheck;
    static_assert(sizeof(Light2D::NormalMapQuality) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Rendering.Universal.Light2D/OverlapOperation
    // [TokenAttribute] Offset: FFFFFFFF
    struct OverlapOperation/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: OverlapOperation
      constexpr OverlapOperation(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Rendering.Universal.Light2D/OverlapOperation Additive
      static constexpr const int Additive = 0;
      // Get static field: static public UnityEngine.Rendering.Universal.Light2D/OverlapOperation Additive
      static ::UnityEngine::Rendering::Universal::Light2D::OverlapOperation _get_Additive();
      // Set static field: static public UnityEngine.Rendering.Universal.Light2D/OverlapOperation Additive
      static void _set_Additive(::UnityEngine::Rendering::Universal::Light2D::OverlapOperation value);
      // static field const value: static public UnityEngine.Rendering.Universal.Light2D/OverlapOperation AlphaBlend
      static constexpr const int AlphaBlend = 1;
      // Get static field: static public UnityEngine.Rendering.Universal.Light2D/OverlapOperation AlphaBlend
      static ::UnityEngine::Rendering::Universal::Light2D::OverlapOperation _get_AlphaBlend();
      // Set static field: static public UnityEngine.Rendering.Universal.Light2D/OverlapOperation AlphaBlend
      static void _set_AlphaBlend(::UnityEngine::Rendering::Universal::Light2D::OverlapOperation value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.Rendering.Universal.Light2D/OverlapOperation
    #pragma pack(pop)
    static check_size<sizeof(Light2D::OverlapOperation), 0 + sizeof(int)> __UnityEngine_Rendering_Universal_Light2D_OverlapOperationSizeCheck;
    static_assert(sizeof(Light2D::OverlapOperation) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Rendering.Universal.Light2D/ComponentVersions
    // [TokenAttribute] Offset: FFFFFFFF
    struct ComponentVersions/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ComponentVersions
      constexpr ComponentVersions(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Rendering.Universal.Light2D/ComponentVersions Version_Unserialized
      static constexpr const int Version_Unserialized = 0;
      // Get static field: static public UnityEngine.Rendering.Universal.Light2D/ComponentVersions Version_Unserialized
      static ::UnityEngine::Rendering::Universal::Light2D::ComponentVersions _get_Version_Unserialized();
      // Set static field: static public UnityEngine.Rendering.Universal.Light2D/ComponentVersions Version_Unserialized
      static void _set_Version_Unserialized(::UnityEngine::Rendering::Universal::Light2D::ComponentVersions value);
      // static field const value: static public UnityEngine.Rendering.Universal.Light2D/ComponentVersions Version_1
      static constexpr const int Version_1 = 1;
      // Get static field: static public UnityEngine.Rendering.Universal.Light2D/ComponentVersions Version_1
      static ::UnityEngine::Rendering::Universal::Light2D::ComponentVersions _get_Version_1();
      // Set static field: static public UnityEngine.Rendering.Universal.Light2D/ComponentVersions Version_1
      static void _set_Version_1(::UnityEngine::Rendering::Universal::Light2D::ComponentVersions value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.Rendering.Universal.Light2D/ComponentVersions
    #pragma pack(pop)
    static check_size<sizeof(Light2D::ComponentVersions), 0 + sizeof(int)> __UnityEngine_Rendering_Universal_Light2D_ComponentVersionsSizeCheck;
    static_assert(sizeof(Light2D::ComponentVersions) == 0x4);
    public:
    // private UnityEngine.Rendering.Universal.Light2D/ComponentVersions m_ComponentVersion
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::Rendering::Universal::Light2D::ComponentVersions m_ComponentVersion;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Light2D::ComponentVersions) == 0x4);
    // private UnityEngine.Rendering.Universal.Light2D/LightType m_LightType
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::Rendering::Universal::Light2D::LightType m_LightType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Light2D::LightType) == 0x4);
    // private System.Int32 m_BlendStyleIndex
    // Size: 0x4
    // Offset: 0x28
    int m_BlendStyleIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_FalloffIntensity
    // Size: 0x4
    // Offset: 0x2C
    float m_FalloffIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color m_Color
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color m_Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single m_Intensity
    // Size: 0x4
    // Offset: 0x40
    float m_Intensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_LightVolumeIntensity
    // Size: 0x4
    // Offset: 0x44
    float m_LightVolumeIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_LightVolumeIntensityEnabled
    // Size: 0x1
    // Offset: 0x48
    bool m_LightVolumeIntensityEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_LightVolumeIntensityEnabled and: m_ApplyToSortingLayers
    char __padding7[0x7] = {};
    // private System.Int32[] m_ApplyToSortingLayers
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<int> m_ApplyToSortingLayers;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private UnityEngine.Sprite m_LightCookieSprite
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Sprite* m_LightCookieSprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private UnityEngine.Sprite m_DeprecatedPointLightCookieSprite
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Sprite* m_DeprecatedPointLightCookieSprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private System.Int32 m_LightOrder
    // Size: 0x4
    // Offset: 0x68
    int m_LightOrder;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_AlphaBlendOnOverlap
    // Size: 0x1
    // Offset: 0x6C
    bool m_AlphaBlendOnOverlap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AlphaBlendOnOverlap and: m_OverlapOperation
    char __padding12[0x3] = {};
    // private UnityEngine.Rendering.Universal.Light2D/OverlapOperation m_OverlapOperation
    // Size: 0x4
    // Offset: 0x70
    ::UnityEngine::Rendering::Universal::Light2D::OverlapOperation m_OverlapOperation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Light2D::OverlapOperation) == 0x4);
    // private System.Single m_NormalMapDistance
    // Size: 0x4
    // Offset: 0x74
    float m_NormalMapDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Rendering.Universal.Light2D/NormalMapQuality m_NormalMapQuality
    // Size: 0x4
    // Offset: 0x78
    ::UnityEngine::Rendering::Universal::Light2D::NormalMapQuality m_NormalMapQuality;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Light2D::NormalMapQuality) == 0x4);
    // private System.Boolean m_UseNormalMap
    // Size: 0x1
    // Offset: 0x7C
    bool m_UseNormalMap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ShadowIntensityEnabled
    // Size: 0x1
    // Offset: 0x7D
    bool m_ShadowIntensityEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ShadowIntensityEnabled and: m_ShadowIntensity
    char __padding17[0x2] = {};
    // private System.Single m_ShadowIntensity
    // Size: 0x4
    // Offset: 0x80
    float m_ShadowIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_ShadowVolumeIntensityEnabled
    // Size: 0x1
    // Offset: 0x84
    bool m_ShadowVolumeIntensityEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ShadowVolumeIntensityEnabled and: m_ShadowVolumeIntensity
    char __padding19[0x3] = {};
    // private System.Single m_ShadowVolumeIntensity
    // Size: 0x4
    // Offset: 0x88
    float m_ShadowVolumeIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_ShadowVolumeIntensity and: m_Mesh
    char __padding20[0x4] = {};
    // private UnityEngine.Mesh m_Mesh
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Mesh* m_Mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Rendering.Universal.LightUtility/LightMeshVertex[] m_Vertices
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::UnityEngine::Rendering::Universal::LightUtility::LightMeshVertex> m_Vertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::Universal::LightUtility::LightMeshVertex>) == 0x8);
    // private System.UInt16[] m_Triangles
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<uint16_t> m_Triangles;
    // Field size check
    static_assert(sizeof(::ArrayW<uint16_t>) == 0x8);
    // private System.Int32 m_PreviousLightCookieSprite
    // Size: 0x4
    // Offset: 0xA8
    int m_PreviousLightCookieSprite;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.Vector3 m_CachedPosition
    // Size: 0xC
    // Offset: 0xAC
    ::UnityEngine::Vector3 m_CachedPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Bounds m_LocalBounds
    // Size: 0x18
    // Offset: 0xB8
    ::UnityEngine::Bounds m_LocalBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // private UnityEngine.BoundingSphere <boundingSphere>k__BackingField
    // Size: 0x10
    // Offset: 0xD0
    ::UnityEngine::BoundingSphere boundingSphere;
    // Field size check
    static_assert(sizeof(::UnityEngine::BoundingSphere) == 0x10);
    // System.Boolean forceUpdate
    // Size: 0x1
    // Offset: 0xE0
    bool forceUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forceUpdate and: m_PointLightInnerAngle
    char __padding28[0x3] = {};
    // private System.Single m_PointLightInnerAngle
    // Size: 0x4
    // Offset: 0xE4
    float m_PointLightInnerAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_PointLightOuterAngle
    // Size: 0x4
    // Offset: 0xE8
    float m_PointLightOuterAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_PointLightInnerRadius
    // Size: 0x4
    // Offset: 0xEC
    float m_PointLightInnerRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_PointLightOuterRadius
    // Size: 0x4
    // Offset: 0xF0
    float m_PointLightOuterRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_ShapeLightParametricSides
    // Size: 0x4
    // Offset: 0xF4
    int m_ShapeLightParametricSides;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_ShapeLightParametricAngleOffset
    // Size: 0x4
    // Offset: 0xF8
    float m_ShapeLightParametricAngleOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ShapeLightParametricRadius
    // Size: 0x4
    // Offset: 0xFC
    float m_ShapeLightParametricRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ShapeLightFalloffSize
    // Size: 0x4
    // Offset: 0x100
    float m_ShapeLightFalloffSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 m_ShapeLightFalloffOffset
    // Size: 0x8
    // Offset: 0x104
    ::UnityEngine::Vector2 m_ShapeLightFalloffOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // Padding between fields: m_ShapeLightFalloffOffset and: m_ShapePath
    char __padding37[0x4] = {};
    // private UnityEngine.Vector3[] m_ShapePath
    // Size: 0x8
    // Offset: 0x110
    ::ArrayW<::UnityEngine::Vector3> m_ShapePath;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Single m_PreviousShapeLightFalloffSize
    // Size: 0x4
    // Offset: 0x118
    float m_PreviousShapeLightFalloffSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_PreviousShapeLightParametricSides
    // Size: 0x4
    // Offset: 0x11C
    int m_PreviousShapeLightParametricSides;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_PreviousShapeLightParametricAngleOffset
    // Size: 0x4
    // Offset: 0x120
    float m_PreviousShapeLightParametricAngleOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_PreviousShapeLightParametricRadius
    // Size: 0x4
    // Offset: 0x124
    float m_PreviousShapeLightParametricRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_PreviousShapePathHash
    // Size: 0x4
    // Offset: 0x128
    int m_PreviousShapePathHash;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.Universal.Light2D/LightType m_PreviousLightType
    // Size: 0x4
    // Offset: 0x12C
    ::UnityEngine::Rendering::Universal::Light2D::LightType m_PreviousLightType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Light2D::LightType) == 0x4);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // static field const value: static private UnityEngine.Rendering.Universal.Light2D/ComponentVersions k_CurrentComponentVersion
    static constexpr const int k_CurrentComponentVersion = 1;
    // Get static field: static private UnityEngine.Rendering.Universal.Light2D/ComponentVersions k_CurrentComponentVersion
    static ::UnityEngine::Rendering::Universal::Light2D::ComponentVersions _get_k_CurrentComponentVersion();
    // Set static field: static private UnityEngine.Rendering.Universal.Light2D/ComponentVersions k_CurrentComponentVersion
    static void _set_k_CurrentComponentVersion(::UnityEngine::Rendering::Universal::Light2D::ComponentVersions value);
    // Get instance field reference: private UnityEngine.Rendering.Universal.Light2D/ComponentVersions m_ComponentVersion
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Light2D::ComponentVersions& dyn_m_ComponentVersion();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Light2D/LightType m_LightType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Light2D::LightType& dyn_m_LightType();
    // Get instance field reference: private System.Int32 m_BlendStyleIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_BlendStyleIndex();
    // Get instance field reference: private System.Single m_FalloffIntensity
    [[deprecated("Use field access instead!")]] float& dyn_m_FalloffIntensity();
    // Get instance field reference: private UnityEngine.Color m_Color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_Color();
    // Get instance field reference: private System.Single m_Intensity
    [[deprecated("Use field access instead!")]] float& dyn_m_Intensity();
    // Get instance field reference: private System.Single m_LightVolumeIntensity
    [[deprecated("Use field access instead!")]] float& dyn_m_LightVolumeIntensity();
    // Get instance field reference: private System.Boolean m_LightVolumeIntensityEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_m_LightVolumeIntensityEnabled();
    // Get instance field reference: private System.Int32[] m_ApplyToSortingLayers
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_m_ApplyToSortingLayers();
    // Get instance field reference: private UnityEngine.Sprite m_LightCookieSprite
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn_m_LightCookieSprite();
    // Get instance field reference: private UnityEngine.Sprite m_DeprecatedPointLightCookieSprite
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn_m_DeprecatedPointLightCookieSprite();
    // Get instance field reference: private System.Int32 m_LightOrder
    [[deprecated("Use field access instead!")]] int& dyn_m_LightOrder();
    // Get instance field reference: private System.Boolean m_AlphaBlendOnOverlap
    [[deprecated("Use field access instead!")]] bool& dyn_m_AlphaBlendOnOverlap();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Light2D/OverlapOperation m_OverlapOperation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Light2D::OverlapOperation& dyn_m_OverlapOperation();
    // Get instance field reference: private System.Single m_NormalMapDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_NormalMapDistance();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Light2D/NormalMapQuality m_NormalMapQuality
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Light2D::NormalMapQuality& dyn_m_NormalMapQuality();
    // Get instance field reference: private System.Boolean m_UseNormalMap
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseNormalMap();
    // Get instance field reference: private System.Boolean m_ShadowIntensityEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_m_ShadowIntensityEnabled();
    // Get instance field reference: private System.Single m_ShadowIntensity
    [[deprecated("Use field access instead!")]] float& dyn_m_ShadowIntensity();
    // Get instance field reference: private System.Boolean m_ShadowVolumeIntensityEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_m_ShadowVolumeIntensityEnabled();
    // Get instance field reference: private System.Single m_ShadowVolumeIntensity
    [[deprecated("Use field access instead!")]] float& dyn_m_ShadowVolumeIntensity();
    // Get instance field reference: private UnityEngine.Mesh m_Mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_m_Mesh();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LightUtility/LightMeshVertex[] m_Vertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::Universal::LightUtility::LightMeshVertex>& dyn_m_Vertices();
    // Get instance field reference: private System.UInt16[] m_Triangles
    [[deprecated("Use field access instead!")]] ::ArrayW<uint16_t>& dyn_m_Triangles();
    // Get instance field reference: private System.Int32 m_PreviousLightCookieSprite
    [[deprecated("Use field access instead!")]] int& dyn_m_PreviousLightCookieSprite();
    // Get instance field reference: UnityEngine.Vector3 m_CachedPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_CachedPosition();
    // Get instance field reference: private UnityEngine.Bounds m_LocalBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_m_LocalBounds();
    // Get instance field reference: private UnityEngine.BoundingSphere <boundingSphere>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::BoundingSphere& dyn_$boundingSphere$k__BackingField();
    // Get instance field reference: System.Boolean forceUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_forceUpdate();
    // Get instance field reference: private System.Single m_PointLightInnerAngle
    [[deprecated("Use field access instead!")]] float& dyn_m_PointLightInnerAngle();
    // Get instance field reference: private System.Single m_PointLightOuterAngle
    [[deprecated("Use field access instead!")]] float& dyn_m_PointLightOuterAngle();
    // Get instance field reference: private System.Single m_PointLightInnerRadius
    [[deprecated("Use field access instead!")]] float& dyn_m_PointLightInnerRadius();
    // Get instance field reference: private System.Single m_PointLightOuterRadius
    [[deprecated("Use field access instead!")]] float& dyn_m_PointLightOuterRadius();
    // Get instance field reference: private System.Int32 m_ShapeLightParametricSides
    [[deprecated("Use field access instead!")]] int& dyn_m_ShapeLightParametricSides();
    // Get instance field reference: private System.Single m_ShapeLightParametricAngleOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_ShapeLightParametricAngleOffset();
    // Get instance field reference: private System.Single m_ShapeLightParametricRadius
    [[deprecated("Use field access instead!")]] float& dyn_m_ShapeLightParametricRadius();
    // Get instance field reference: private System.Single m_ShapeLightFalloffSize
    [[deprecated("Use field access instead!")]] float& dyn_m_ShapeLightFalloffSize();
    // Get instance field reference: private UnityEngine.Vector2 m_ShapeLightFalloffOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_ShapeLightFalloffOffset();
    // Get instance field reference: private UnityEngine.Vector3[] m_ShapePath
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_ShapePath();
    // Get instance field reference: private System.Single m_PreviousShapeLightFalloffSize
    [[deprecated("Use field access instead!")]] float& dyn_m_PreviousShapeLightFalloffSize();
    // Get instance field reference: private System.Int32 m_PreviousShapeLightParametricSides
    [[deprecated("Use field access instead!")]] int& dyn_m_PreviousShapeLightParametricSides();
    // Get instance field reference: private System.Single m_PreviousShapeLightParametricAngleOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_PreviousShapeLightParametricAngleOffset();
    // Get instance field reference: private System.Single m_PreviousShapeLightParametricRadius
    [[deprecated("Use field access instead!")]] float& dyn_m_PreviousShapeLightParametricRadius();
    // Get instance field reference: private System.Int32 m_PreviousShapePathHash
    [[deprecated("Use field access instead!")]] int& dyn_m_PreviousShapePathHash();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Light2D/LightType m_PreviousLightType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Light2D::LightType& dyn_m_PreviousLightType();
    // UnityEngine.Rendering.Universal.LightUtility/LightMeshVertex[] get_vertices()
    // Offset: 0x527CA84
    ::ArrayW<::UnityEngine::Rendering::Universal::LightUtility::LightMeshVertex> get_vertices();
    // System.Void set_vertices(UnityEngine.Rendering.Universal.LightUtility/LightMeshVertex[] value)
    // Offset: 0x527CA8C
    void set_vertices(::ArrayW<::UnityEngine::Rendering::Universal::LightUtility::LightMeshVertex> value);
    // System.UInt16[] get_indices()
    // Offset: 0x527CA94
    ::ArrayW<uint16_t> get_indices();
    // System.Void set_indices(System.UInt16[] value)
    // Offset: 0x527CA9C
    void set_indices(::ArrayW<uint16_t> value);
    // System.Int32[] get_affectedSortingLayers()
    // Offset: 0x527CAA4
    ::ArrayW<int> get_affectedSortingLayers();
    // private System.Int32 get_lightCookieSpriteInstanceID()
    // Offset: 0x527CAAC
    int get_lightCookieSpriteInstanceID();
    // UnityEngine.BoundingSphere get_boundingSphere()
    // Offset: 0x527CAC0
    ::UnityEngine::BoundingSphere get_boundingSphere();
    // private System.Void set_boundingSphere(UnityEngine.BoundingSphere value)
    // Offset: 0x527CACC
    void set_boundingSphere(::UnityEngine::BoundingSphere value);
    // UnityEngine.Mesh get_lightMesh()
    // Offset: 0x527CAD8
    ::UnityEngine::Mesh* get_lightMesh();
    // System.Boolean get_hasCachedMesh()
    // Offset: 0x527CB7C
    bool get_hasCachedMesh();
    // public UnityEngine.Rendering.Universal.Light2D/LightType get_lightType()
    // Offset: 0x527CBBC
    ::UnityEngine::Rendering::Universal::Light2D::LightType get_lightType();
    // public System.Void set_lightType(UnityEngine.Rendering.Universal.Light2D/LightType value)
    // Offset: 0x527CBC4
    void set_lightType(::UnityEngine::Rendering::Universal::Light2D::LightType value);
    // public System.Int32 get_blendStyleIndex()
    // Offset: 0x527CF28
    int get_blendStyleIndex();
    // public System.Void set_blendStyleIndex(System.Int32 value)
    // Offset: 0x527CF30
    void set_blendStyleIndex(int value);
    // public System.Single get_shadowIntensity()
    // Offset: 0x527CF38
    float get_shadowIntensity();
    // public System.Void set_shadowIntensity(System.Single value)
    // Offset: 0x527CF40
    void set_shadowIntensity(float value);
    // public System.Boolean get_shadowsEnabled()
    // Offset: 0x527CF5C
    bool get_shadowsEnabled();
    // public System.Void set_shadowsEnabled(System.Boolean value)
    // Offset: 0x527CF64
    void set_shadowsEnabled(bool value);
    // public System.Single get_shadowVolumeIntensity()
    // Offset: 0x527CF70
    float get_shadowVolumeIntensity();
    // public System.Void set_shadowVolumeIntensity(System.Single value)
    // Offset: 0x527CF78
    void set_shadowVolumeIntensity(float value);
    // public System.Boolean get_volumetricShadowsEnabled()
    // Offset: 0x527CF94
    bool get_volumetricShadowsEnabled();
    // public System.Void set_volumetricShadowsEnabled(System.Boolean value)
    // Offset: 0x527CF9C
    void set_volumetricShadowsEnabled(bool value);
    // public UnityEngine.Color get_color()
    // Offset: 0x527CFA8
    ::UnityEngine::Color get_color();
    // public System.Void set_color(UnityEngine.Color value)
    // Offset: 0x527CFB4
    void set_color(::UnityEngine::Color value);
    // public System.Single get_intensity()
    // Offset: 0x527CFC0
    float get_intensity();
    // public System.Void set_intensity(System.Single value)
    // Offset: 0x527CFC8
    void set_intensity(float value);
    // public System.Single get_volumeOpacity()
    // Offset: 0x527CFD0
    float get_volumeOpacity();
    // public System.Single get_volumeIntensity()
    // Offset: 0x527CFD8
    float get_volumeIntensity();
    // public System.Void set_volumeIntensity(System.Single value)
    // Offset: 0x527CFE0
    void set_volumeIntensity(float value);
    // public System.Boolean get_volumeIntensityEnabled()
    // Offset: 0x527CFE8
    bool get_volumeIntensityEnabled();
    // public System.Void set_volumeIntensityEnabled(System.Boolean value)
    // Offset: 0x527CFF0
    void set_volumeIntensityEnabled(bool value);
    // public UnityEngine.Sprite get_lightCookieSprite()
    // Offset: 0x527CFFC
    ::UnityEngine::Sprite* get_lightCookieSprite();
    // public System.Void set_lightCookieSprite(UnityEngine.Sprite value)
    // Offset: 0x527D018
    void set_lightCookieSprite(::UnityEngine::Sprite* value);
    // public System.Single get_falloffIntensity()
    // Offset: 0x527D020
    float get_falloffIntensity();
    // public System.Void set_falloffIntensity(System.Single value)
    // Offset: 0x527D028
    void set_falloffIntensity(float value);
    // public System.Boolean get_alphaBlendOnOverlap()
    // Offset: 0x527D044
    bool get_alphaBlendOnOverlap();
    // public UnityEngine.Rendering.Universal.Light2D/OverlapOperation get_overlapOperation()
    // Offset: 0x527D054
    ::UnityEngine::Rendering::Universal::Light2D::OverlapOperation get_overlapOperation();
    // public System.Void set_overlapOperation(UnityEngine.Rendering.Universal.Light2D/OverlapOperation value)
    // Offset: 0x527D05C
    void set_overlapOperation(::UnityEngine::Rendering::Universal::Light2D::OverlapOperation value);
    // public System.Int32 get_lightOrder()
    // Offset: 0x527D064
    int get_lightOrder();
    // public System.Void set_lightOrder(System.Int32 value)
    // Offset: 0x527D06C
    void set_lightOrder(int value);
    // public System.Single get_normalMapDistance()
    // Offset: 0x527D074
    float get_normalMapDistance();
    // public UnityEngine.Rendering.Universal.Light2D/NormalMapQuality get_normalMapQuality()
    // Offset: 0x527D07C
    ::UnityEngine::Rendering::Universal::Light2D::NormalMapQuality get_normalMapQuality();
    // public System.Boolean get_renderVolumetricShadows()
    // Offset: 0x527D084
    bool get_renderVolumetricShadows();
    // System.Void MarkForUpdate()
    // Offset: 0x527D0A4
    void MarkForUpdate();
    // System.Void CacheValues()
    // Offset: 0x527D0B0
    void CacheValues();
    // System.Int32 GetTopMostLitLayer()
    // Offset: 0x527D0E0
    int GetTopMostLitLayer();
    // UnityEngine.Bounds UpdateSpriteMesh()
    // Offset: 0x527D2C4
    ::UnityEngine::Bounds UpdateSpriteMesh();
    // System.Void UpdateMesh(System.Boolean forceUpdate)
    // Offset: 0x527CC38
    void UpdateMesh(bool forceUpdate);
    // System.Void UpdateBoundingSphere()
    // Offset: 0x527EBA0
    void UpdateBoundingSphere();
    // System.Boolean IsLitLayer(System.Int32 layer)
    // Offset: 0x527ED68
    bool IsLitLayer(int layer);
    // private System.Void Awake()
    // Offset: 0x527EDC4
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x527EDC8
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x527EF38
    void OnDisable();
    // private System.Void LateUpdate()
    // Offset: 0x527F03C
    void LateUpdate();
    // public System.Void OnBeforeSerialize()
    // Offset: 0x527F06C
    void OnBeforeSerialize();
    // public System.Void OnAfterDeserialize()
    // Offset: 0x527F078
    void OnAfterDeserialize();
    // public System.Single get_pointLightInnerAngle()
    // Offset: 0x527F0EC
    float get_pointLightInnerAngle();
    // public System.Void set_pointLightInnerAngle(System.Single value)
    // Offset: 0x527F0F4
    void set_pointLightInnerAngle(float value);
    // public System.Single get_pointLightOuterAngle()
    // Offset: 0x527F0FC
    float get_pointLightOuterAngle();
    // public System.Void set_pointLightOuterAngle(System.Single value)
    // Offset: 0x527F104
    void set_pointLightOuterAngle(float value);
    // public System.Single get_pointLightInnerRadius()
    // Offset: 0x527F10C
    float get_pointLightInnerRadius();
    // public System.Void set_pointLightInnerRadius(System.Single value)
    // Offset: 0x527F114
    void set_pointLightInnerRadius(float value);
    // public System.Single get_pointLightOuterRadius()
    // Offset: 0x527F11C
    float get_pointLightOuterRadius();
    // public System.Void set_pointLightOuterRadius(System.Single value)
    // Offset: 0x527F124
    void set_pointLightOuterRadius(float value);
    // public System.Single get_pointLightDistance()
    // Offset: 0x527F12C
    float get_pointLightDistance();
    // public UnityEngine.Rendering.Universal.Light2D/NormalMapQuality get_pointLightQuality()
    // Offset: 0x527F134
    ::UnityEngine::Rendering::Universal::Light2D::NormalMapQuality get_pointLightQuality();
    // System.Boolean get_isPointLight()
    // Offset: 0x527ED58
    bool get_isPointLight();
    // public System.Int32 get_shapeLightParametricSides()
    // Offset: 0x527F13C
    int get_shapeLightParametricSides();
    // public System.Single get_shapeLightParametricAngleOffset()
    // Offset: 0x527F144
    float get_shapeLightParametricAngleOffset();
    // public System.Single get_shapeLightParametricRadius()
    // Offset: 0x527F14C
    float get_shapeLightParametricRadius();
    // System.Void set_shapeLightParametricRadius(System.Single value)
    // Offset: 0x527F154
    void set_shapeLightParametricRadius(float value);
    // public System.Single get_shapeLightFalloffSize()
    // Offset: 0x527F15C
    float get_shapeLightFalloffSize();
    // public System.Void set_shapeLightFalloffSize(System.Single value)
    // Offset: 0x527F164
    void set_shapeLightFalloffSize(float value);
    // public UnityEngine.Vector3[] get_shapePath()
    // Offset: 0x527F174
    ::ArrayW<::UnityEngine::Vector3> get_shapePath();
    // System.Void set_shapePath(UnityEngine.Vector3[] value)
    // Offset: 0x527F17C
    void set_shapePath(::ArrayW<::UnityEngine::Vector3> value);
    // public System.Void SetShapePath(UnityEngine.Vector3[] path)
    // Offset: 0x527F18C
    void SetShapePath(::ArrayW<::UnityEngine::Vector3> path);
    // public System.Void .ctor()
    // Offset: 0x527F19C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Light2D* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Light2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Light2D*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.Light2D
  #pragma pack(pop)
  static check_size<sizeof(Light2D), 300 + sizeof(::UnityEngine::Rendering::Universal::Light2D::LightType)> __UnityEngine_Rendering_Universal_Light2DSizeCheck;
  static_assert(sizeof(Light2D) == 0x130);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Light2D::ComponentVersions, "UnityEngine.Rendering.Universal", "Light2D/ComponentVersions");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Light2D::OverlapOperation, "UnityEngine.Rendering.Universal", "Light2D/OverlapOperation");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Light2D::NormalMapQuality, "UnityEngine.Rendering.Universal", "Light2D/NormalMapQuality");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Light2D::LightType, "UnityEngine.Rendering.Universal", "Light2D/LightType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_vertices
// Il2CppName: get_vertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rendering::Universal::LightUtility::LightMeshVertex> (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_vertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_vertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_vertices
// Il2CppName: set_vertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(::ArrayW<::UnityEngine::Rendering::Universal::LightUtility::LightMeshVertex>)>(&UnityEngine::Rendering::Universal::Light2D::set_vertices)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightUtility/LightMeshVertex"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_vertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_indices
// Il2CppName: get_indices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint16_t> (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_indices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_indices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_indices
// Il2CppName: set_indices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(::ArrayW<uint16_t>)>(&UnityEngine::Rendering::Universal::Light2D::set_indices)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_indices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_affectedSortingLayers
// Il2CppName: get_affectedSortingLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_affectedSortingLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_affectedSortingLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_lightCookieSpriteInstanceID
// Il2CppName: get_lightCookieSpriteInstanceID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_lightCookieSpriteInstanceID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_lightCookieSpriteInstanceID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_boundingSphere
// Il2CppName: get_boundingSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::BoundingSphere (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_boundingSphere)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_boundingSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_boundingSphere
// Il2CppName: set_boundingSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(::UnityEngine::BoundingSphere)>(&UnityEngine::Rendering::Universal::Light2D::set_boundingSphere)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "BoundingSphere")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_boundingSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_lightMesh
// Il2CppName: get_lightMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_lightMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_lightMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_hasCachedMesh
// Il2CppName: get_hasCachedMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_hasCachedMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_hasCachedMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_lightType
// Il2CppName: get_lightType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::Light2D::LightType (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_lightType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_lightType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_lightType
// Il2CppName: set_lightType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(::UnityEngine::Rendering::Universal::Light2D::LightType)>(&UnityEngine::Rendering::Universal::Light2D::set_lightType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D/LightType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_lightType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_blendStyleIndex
// Il2CppName: get_blendStyleIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_blendStyleIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_blendStyleIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_blendStyleIndex
// Il2CppName: set_blendStyleIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(int)>(&UnityEngine::Rendering::Universal::Light2D::set_blendStyleIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_blendStyleIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_shadowIntensity
// Il2CppName: get_shadowIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_shadowIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_shadowIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_shadowIntensity
// Il2CppName: set_shadowIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(float)>(&UnityEngine::Rendering::Universal::Light2D::set_shadowIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_shadowIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_shadowsEnabled
// Il2CppName: get_shadowsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_shadowsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_shadowsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_shadowsEnabled
// Il2CppName: set_shadowsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(bool)>(&UnityEngine::Rendering::Universal::Light2D::set_shadowsEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_shadowsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_shadowVolumeIntensity
// Il2CppName: get_shadowVolumeIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_shadowVolumeIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_shadowVolumeIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_shadowVolumeIntensity
// Il2CppName: set_shadowVolumeIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(float)>(&UnityEngine::Rendering::Universal::Light2D::set_shadowVolumeIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_shadowVolumeIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_volumetricShadowsEnabled
// Il2CppName: get_volumetricShadowsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_volumetricShadowsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_volumetricShadowsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_volumetricShadowsEnabled
// Il2CppName: set_volumetricShadowsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(bool)>(&UnityEngine::Rendering::Universal::Light2D::set_volumetricShadowsEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_volumetricShadowsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_color)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(::UnityEngine::Color)>(&UnityEngine::Rendering::Universal::Light2D::set_color)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_intensity
// Il2CppName: get_intensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_intensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_intensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_intensity
// Il2CppName: set_intensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(float)>(&UnityEngine::Rendering::Universal::Light2D::set_intensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_intensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_volumeOpacity
// Il2CppName: get_volumeOpacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_volumeOpacity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_volumeOpacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_volumeIntensity
// Il2CppName: get_volumeIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_volumeIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_volumeIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_volumeIntensity
// Il2CppName: set_volumeIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(float)>(&UnityEngine::Rendering::Universal::Light2D::set_volumeIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_volumeIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_volumeIntensityEnabled
// Il2CppName: get_volumeIntensityEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_volumeIntensityEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_volumeIntensityEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_volumeIntensityEnabled
// Il2CppName: set_volumeIntensityEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(bool)>(&UnityEngine::Rendering::Universal::Light2D::set_volumeIntensityEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_volumeIntensityEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_lightCookieSprite
// Il2CppName: get_lightCookieSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_lightCookieSprite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_lightCookieSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_lightCookieSprite
// Il2CppName: set_lightCookieSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(::UnityEngine::Sprite*)>(&UnityEngine::Rendering::Universal::Light2D::set_lightCookieSprite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_lightCookieSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_falloffIntensity
// Il2CppName: get_falloffIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_falloffIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_falloffIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_falloffIntensity
// Il2CppName: set_falloffIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(float)>(&UnityEngine::Rendering::Universal::Light2D::set_falloffIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_falloffIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_alphaBlendOnOverlap
// Il2CppName: get_alphaBlendOnOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_alphaBlendOnOverlap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_alphaBlendOnOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_overlapOperation
// Il2CppName: get_overlapOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::Light2D::OverlapOperation (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_overlapOperation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_overlapOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_overlapOperation
// Il2CppName: set_overlapOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(::UnityEngine::Rendering::Universal::Light2D::OverlapOperation)>(&UnityEngine::Rendering::Universal::Light2D::set_overlapOperation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Light2D/OverlapOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_overlapOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_lightOrder
// Il2CppName: get_lightOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_lightOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_lightOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_lightOrder
// Il2CppName: set_lightOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(int)>(&UnityEngine::Rendering::Universal::Light2D::set_lightOrder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_lightOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_normalMapDistance
// Il2CppName: get_normalMapDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_normalMapDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_normalMapDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_normalMapQuality
// Il2CppName: get_normalMapQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::Light2D::NormalMapQuality (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_normalMapQuality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_normalMapQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_renderVolumetricShadows
// Il2CppName: get_renderVolumetricShadows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_renderVolumetricShadows)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_renderVolumetricShadows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::MarkForUpdate
// Il2CppName: MarkForUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::MarkForUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "MarkForUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::CacheValues
// Il2CppName: CacheValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::CacheValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "CacheValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::GetTopMostLitLayer
// Il2CppName: GetTopMostLitLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::GetTopMostLitLayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "GetTopMostLitLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::UpdateSpriteMesh
// Il2CppName: UpdateSpriteMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::UpdateSpriteMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "UpdateSpriteMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::UpdateMesh
// Il2CppName: UpdateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(bool)>(&UnityEngine::Rendering::Universal::Light2D::UpdateMesh)> {
  static const MethodInfo* get() {
    static auto* forceUpdate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "UpdateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forceUpdate});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::UpdateBoundingSphere
// Il2CppName: UpdateBoundingSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::UpdateBoundingSphere)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "UpdateBoundingSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::IsLitLayer
// Il2CppName: IsLitLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Light2D::*)(int)>(&UnityEngine::Rendering::Universal::Light2D::IsLitLayer)> {
  static const MethodInfo* get() {
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "IsLitLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layer});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::OnBeforeSerialize
// Il2CppName: OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::OnAfterDeserialize
// Il2CppName: OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_pointLightInnerAngle
// Il2CppName: get_pointLightInnerAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_pointLightInnerAngle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_pointLightInnerAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_pointLightInnerAngle
// Il2CppName: set_pointLightInnerAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(float)>(&UnityEngine::Rendering::Universal::Light2D::set_pointLightInnerAngle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_pointLightInnerAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_pointLightOuterAngle
// Il2CppName: get_pointLightOuterAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_pointLightOuterAngle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_pointLightOuterAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_pointLightOuterAngle
// Il2CppName: set_pointLightOuterAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(float)>(&UnityEngine::Rendering::Universal::Light2D::set_pointLightOuterAngle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_pointLightOuterAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_pointLightInnerRadius
// Il2CppName: get_pointLightInnerRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_pointLightInnerRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_pointLightInnerRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_pointLightInnerRadius
// Il2CppName: set_pointLightInnerRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(float)>(&UnityEngine::Rendering::Universal::Light2D::set_pointLightInnerRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_pointLightInnerRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_pointLightOuterRadius
// Il2CppName: get_pointLightOuterRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_pointLightOuterRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_pointLightOuterRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_pointLightOuterRadius
// Il2CppName: set_pointLightOuterRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(float)>(&UnityEngine::Rendering::Universal::Light2D::set_pointLightOuterRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_pointLightOuterRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_pointLightDistance
// Il2CppName: get_pointLightDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_pointLightDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_pointLightDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_pointLightQuality
// Il2CppName: get_pointLightQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::Light2D::NormalMapQuality (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_pointLightQuality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_pointLightQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_isPointLight
// Il2CppName: get_isPointLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_isPointLight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_isPointLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_shapeLightParametricSides
// Il2CppName: get_shapeLightParametricSides
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_shapeLightParametricSides)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_shapeLightParametricSides", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_shapeLightParametricAngleOffset
// Il2CppName: get_shapeLightParametricAngleOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_shapeLightParametricAngleOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_shapeLightParametricAngleOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_shapeLightParametricRadius
// Il2CppName: get_shapeLightParametricRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_shapeLightParametricRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_shapeLightParametricRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_shapeLightParametricRadius
// Il2CppName: set_shapeLightParametricRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(float)>(&UnityEngine::Rendering::Universal::Light2D::set_shapeLightParametricRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_shapeLightParametricRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_shapeLightFalloffSize
// Il2CppName: get_shapeLightFalloffSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_shapeLightFalloffSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_shapeLightFalloffSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_shapeLightFalloffSize
// Il2CppName: set_shapeLightFalloffSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(float)>(&UnityEngine::Rendering::Universal::Light2D::set_shapeLightFalloffSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_shapeLightFalloffSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::get_shapePath
// Il2CppName: get_shapePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (UnityEngine::Rendering::Universal::Light2D::*)()>(&UnityEngine::Rendering::Universal::Light2D::get_shapePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "get_shapePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::set_shapePath
// Il2CppName: set_shapePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::Rendering::Universal::Light2D::set_shapePath)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "set_shapePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::SetShapePath
// Il2CppName: SetShapePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Light2D::*)(::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::Rendering::Universal::Light2D::SetShapePath)> {
  static const MethodInfo* get() {
    static auto* path = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Light2D*), "SetShapePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Light2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
