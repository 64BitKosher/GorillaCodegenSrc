// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderer
#include "UnityEngine/Rendering/Universal/ScriptableRenderer.hpp"
// Including type: UnityEngine.Rendering.Universal.RenderingMode
#include "UnityEngine/Rendering/Universal/RenderingMode.hpp"
// Including type: UnityEngine.Rendering.Universal.DepthPrimingMode
#include "UnityEngine/Rendering/Universal/DepthPrimingMode.hpp"
// Including type: UnityEngine.Rendering.Universal.CopyDepthMode
#include "UnityEngine/Rendering/Universal/CopyDepthMode.hpp"
// Including type: UnityEngine.Rendering.StencilState
#include "UnityEngine/Rendering/StencilState.hpp"
// Including type: UnityEngine.Rendering.Universal.IntermediateTextureMode
#include "UnityEngine/Rendering/Universal/IntermediateTextureMode.hpp"
// Including type: UnityEngine.Rendering.Universal.PostProcessPasses
#include "UnityEngine/Rendering/Universal/PostProcessPasses.hpp"
// Including type: UnityEngine.Rendering.ShaderTagId
#include "UnityEngine/Rendering/ShaderTagId.hpp"
// Including type: UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle
#include "UnityEngine/Experimental/Rendering/RenderGraphModule/TextureHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: MotionVectorRenderPass
  class MotionVectorRenderPass;
  // Forward declaring type: DrawSkyboxPass
  class DrawSkyboxPass;
  // Forward declaring type: TransparentSettingsPass
  class TransparentSettingsPass;
  // Forward declaring type: InvokeOnRenderObjectCallbackPass
  class InvokeOnRenderObjectCallbackPass;
  // Forward declaring type: CapturePass
  class CapturePass;
  // Forward declaring type: XROcclusionMeshPass
  class XROcclusionMeshPass;
  // Forward declaring type: DrawScreenSpaceUIPass
  class DrawScreenSpaceUIPass;
  // Forward declaring type: LightCookieManager
  class LightCookieManager;
  // Forward declaring type: PostProcessPass
  class PostProcessPass;
  // Forward declaring type: UniversalRendererData
  class UniversalRendererData;
  // Forward declaring type: CameraData
  struct CameraData;
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal::Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // Forward declaring type: DepthOnlyPass
  class DepthOnlyPass;
  // Forward declaring type: DepthNormalOnlyPass
  class DepthNormalOnlyPass;
  // Forward declaring type: CopyDepthPass
  class CopyDepthPass;
  // Forward declaring type: MainLightShadowCasterPass
  class MainLightShadowCasterPass;
  // Forward declaring type: AdditionalLightsShadowCasterPass
  class AdditionalLightsShadowCasterPass;
  // Forward declaring type: GBufferPass
  class GBufferPass;
  // Forward declaring type: DeferredPass
  class DeferredPass;
  // Forward declaring type: DrawObjectsPass
  class DrawObjectsPass;
  // Forward declaring type: DrawObjectsWithRenderingLayersPass
  class DrawObjectsWithRenderingLayersPass;
  // Forward declaring type: CopyColorPass
  class CopyColorPass;
  // Forward declaring type: FinalBlitPass
  class FinalBlitPass;
  // Forward declaring type: RenderTargetBufferSystem
  class RenderTargetBufferSystem;
  // Forward declaring type: ForwardLights
  class ForwardLights;
  // Forward declaring type: DeferredLights
  class DeferredLights;
  // Forward declaring type: ColorGradingLutPass
  class ColorGradingLutPass;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: ScriptableCullingParameters
  struct ScriptableCullingParameters;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: RenderTextureDescriptor
  struct RenderTextureDescriptor;
  // Forward declaring type: FilterMode
  struct FilterMode;
  // Forward declaring type: TextureWrapMode
  struct TextureWrapMode;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraph
  class RenderGraph;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: UniversalRenderer
  class UniversalRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::UniversalRenderer);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UniversalRenderer*, "UnityEngine.Rendering.Universal", "UniversalRenderer");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x398
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.UniversalRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  class UniversalRenderer : public ::UnityEngine::Rendering::Universal::ScriptableRenderer {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::UniversalRenderer::Profiling
    class Profiling;
    // Nested type: ::UnityEngine::Rendering::Universal::UniversalRenderer::RenderPassInputSummary
    struct RenderPassInputSummary;
    // Nested type: ::UnityEngine::Rendering::Universal::UniversalRenderer::RenderGraphFrameResources
    class RenderGraphFrameResources;
    // Nested type: ::UnityEngine::Rendering::Universal::UniversalRenderer::$$c
    class $$c;
    public:
    // private System.Boolean m_Clustering
    // Size: 0x1
    // Offset: 0x1A8
    bool m_Clustering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Clustering and: m_DepthPrepass
    char __padding0[0x7] = {};
    // private UnityEngine.Rendering.Universal.Internal.DepthOnlyPass m_DepthPrepass
    // Size: 0x8
    // Offset: 0x1B0
    ::UnityEngine::Rendering::Universal::Internal::DepthOnlyPass* m_DepthPrepass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::DepthOnlyPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.DepthNormalOnlyPass m_DepthNormalPrepass
    // Size: 0x8
    // Offset: 0x1B8
    ::UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass* m_DepthNormalPrepass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.CopyDepthPass m_PrimedDepthCopyPass
    // Size: 0x8
    // Offset: 0x1C0
    ::UnityEngine::Rendering::Universal::Internal::CopyDepthPass* m_PrimedDepthCopyPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::CopyDepthPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.MotionVectorRenderPass m_MotionVectorPass
    // Size: 0x8
    // Offset: 0x1C8
    ::UnityEngine::Rendering::Universal::MotionVectorRenderPass* m_MotionVectorPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::MotionVectorRenderPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.MainLightShadowCasterPass m_MainLightShadowCasterPass
    // Size: 0x8
    // Offset: 0x1D0
    ::UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass* m_MainLightShadowCasterPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass m_AdditionalLightsShadowCasterPass
    // Size: 0x8
    // Offset: 0x1D8
    ::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass* m_AdditionalLightsShadowCasterPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.GBufferPass m_GBufferPass
    // Size: 0x8
    // Offset: 0x1E0
    ::UnityEngine::Rendering::Universal::Internal::GBufferPass* m_GBufferPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::GBufferPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.CopyDepthPass m_GBufferCopyDepthPass
    // Size: 0x8
    // Offset: 0x1E8
    ::UnityEngine::Rendering::Universal::Internal::CopyDepthPass* m_GBufferCopyDepthPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::CopyDepthPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.DeferredPass m_DeferredPass
    // Size: 0x8
    // Offset: 0x1F0
    ::UnityEngine::Rendering::Universal::Internal::DeferredPass* m_DeferredPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::DeferredPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.DrawObjectsPass m_RenderOpaqueForwardOnlyPass
    // Size: 0x8
    // Offset: 0x1F8
    ::UnityEngine::Rendering::Universal::Internal::DrawObjectsPass* m_RenderOpaqueForwardOnlyPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::DrawObjectsPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.DrawObjectsPass m_RenderOpaqueForwardPass
    // Size: 0x8
    // Offset: 0x200
    ::UnityEngine::Rendering::Universal::Internal::DrawObjectsPass* m_RenderOpaqueForwardPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::DrawObjectsPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.DrawObjectsWithRenderingLayersPass m_RenderOpaqueForwardWithRenderingLayersPass
    // Size: 0x8
    // Offset: 0x208
    ::UnityEngine::Rendering::Universal::Internal::DrawObjectsWithRenderingLayersPass* m_RenderOpaqueForwardWithRenderingLayersPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::DrawObjectsWithRenderingLayersPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.DrawSkyboxPass m_DrawSkyboxPass
    // Size: 0x8
    // Offset: 0x210
    ::UnityEngine::Rendering::Universal::DrawSkyboxPass* m_DrawSkyboxPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DrawSkyboxPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.CopyDepthPass m_CopyDepthPass
    // Size: 0x8
    // Offset: 0x218
    ::UnityEngine::Rendering::Universal::Internal::CopyDepthPass* m_CopyDepthPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::CopyDepthPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.CopyColorPass m_CopyColorPass
    // Size: 0x8
    // Offset: 0x220
    ::UnityEngine::Rendering::Universal::Internal::CopyColorPass* m_CopyColorPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::CopyColorPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.TransparentSettingsPass m_TransparentSettingsPass
    // Size: 0x8
    // Offset: 0x228
    ::UnityEngine::Rendering::Universal::TransparentSettingsPass* m_TransparentSettingsPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::TransparentSettingsPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.DrawObjectsPass m_RenderTransparentForwardPass
    // Size: 0x8
    // Offset: 0x230
    ::UnityEngine::Rendering::Universal::Internal::DrawObjectsPass* m_RenderTransparentForwardPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::DrawObjectsPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.InvokeOnRenderObjectCallbackPass m_OnRenderObjectCallbackPass
    // Size: 0x8
    // Offset: 0x238
    ::UnityEngine::Rendering::Universal::InvokeOnRenderObjectCallbackPass* m_OnRenderObjectCallbackPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::InvokeOnRenderObjectCallbackPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.FinalBlitPass m_FinalBlitPass
    // Size: 0x8
    // Offset: 0x240
    ::UnityEngine::Rendering::Universal::Internal::FinalBlitPass* m_FinalBlitPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::FinalBlitPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.CapturePass m_CapturePass
    // Size: 0x8
    // Offset: 0x248
    ::UnityEngine::Rendering::Universal::CapturePass* m_CapturePass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::CapturePass*) == 0x8);
    // private UnityEngine.Rendering.Universal.XROcclusionMeshPass m_XROcclusionMeshPass
    // Size: 0x8
    // Offset: 0x250
    ::UnityEngine::Rendering::Universal::XROcclusionMeshPass* m_XROcclusionMeshPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::XROcclusionMeshPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.CopyDepthPass m_XRCopyDepthPass
    // Size: 0x8
    // Offset: 0x258
    ::UnityEngine::Rendering::Universal::Internal::CopyDepthPass* m_XRCopyDepthPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::CopyDepthPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.DrawScreenSpaceUIPass m_DrawOffscreenUIPass
    // Size: 0x8
    // Offset: 0x260
    ::UnityEngine::Rendering::Universal::DrawScreenSpaceUIPass* m_DrawOffscreenUIPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DrawScreenSpaceUIPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.DrawScreenSpaceUIPass m_DrawOverlayUIPass
    // Size: 0x8
    // Offset: 0x268
    ::UnityEngine::Rendering::Universal::DrawScreenSpaceUIPass* m_DrawOverlayUIPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DrawScreenSpaceUIPass*) == 0x8);
    // UnityEngine.Rendering.Universal.Internal.RenderTargetBufferSystem m_ColorBufferSystem
    // Size: 0x8
    // Offset: 0x270
    ::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem* m_ColorBufferSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*) == 0x8);
    // UnityEngine.Rendering.RTHandle m_ActiveCameraColorAttachment
    // Size: 0x8
    // Offset: 0x278
    ::UnityEngine::Rendering::RTHandle* m_ActiveCameraColorAttachment;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_ColorFrontBuffer
    // Size: 0x8
    // Offset: 0x280
    ::UnityEngine::Rendering::RTHandle* m_ColorFrontBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // UnityEngine.Rendering.RTHandle m_ActiveCameraDepthAttachment
    // Size: 0x8
    // Offset: 0x288
    ::UnityEngine::Rendering::RTHandle* m_ActiveCameraDepthAttachment;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // UnityEngine.Rendering.RTHandle m_CameraDepthAttachment
    // Size: 0x8
    // Offset: 0x290
    ::UnityEngine::Rendering::RTHandle* m_CameraDepthAttachment;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_XRTargetHandleAlias
    // Size: 0x8
    // Offset: 0x298
    ::UnityEngine::Rendering::RTHandle* m_XRTargetHandleAlias;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // UnityEngine.Rendering.RTHandle m_DepthTexture
    // Size: 0x8
    // Offset: 0x2A0
    ::UnityEngine::Rendering::RTHandle* m_DepthTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_NormalsTexture
    // Size: 0x8
    // Offset: 0x2A8
    ::UnityEngine::Rendering::RTHandle* m_NormalsTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_DecalLayersTexture
    // Size: 0x8
    // Offset: 0x2B0
    ::UnityEngine::Rendering::RTHandle* m_DecalLayersTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_OpaqueColor
    // Size: 0x8
    // Offset: 0x2B8
    ::UnityEngine::Rendering::RTHandle* m_OpaqueColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_MotionVectorColor
    // Size: 0x8
    // Offset: 0x2C0
    ::UnityEngine::Rendering::RTHandle* m_MotionVectorColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_MotionVectorDepth
    // Size: 0x8
    // Offset: 0x2C8
    ::UnityEngine::Rendering::RTHandle* m_MotionVectorDepth;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.ForwardLights m_ForwardLights
    // Size: 0x8
    // Offset: 0x2D0
    ::UnityEngine::Rendering::Universal::Internal::ForwardLights* m_ForwardLights;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::ForwardLights*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.DeferredLights m_DeferredLights
    // Size: 0x8
    // Offset: 0x2D8
    ::UnityEngine::Rendering::Universal::Internal::DeferredLights* m_DeferredLights;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::DeferredLights*) == 0x8);
    // private UnityEngine.Rendering.Universal.RenderingMode m_RenderingMode
    // Size: 0x4
    // Offset: 0x2E0
    ::UnityEngine::Rendering::Universal::RenderingMode m_RenderingMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::RenderingMode) == 0x4);
    // private UnityEngine.Rendering.Universal.DepthPrimingMode m_DepthPrimingMode
    // Size: 0x4
    // Offset: 0x2E4
    ::UnityEngine::Rendering::Universal::DepthPrimingMode m_DepthPrimingMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DepthPrimingMode) == 0x4);
    // private UnityEngine.Rendering.Universal.CopyDepthMode m_CopyDepthMode
    // Size: 0x4
    // Offset: 0x2E8
    ::UnityEngine::Rendering::Universal::CopyDepthMode m_CopyDepthMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::CopyDepthMode) == 0x4);
    // private System.Boolean m_DepthPrimingRecommended
    // Size: 0x1
    // Offset: 0x2EC
    bool m_DepthPrimingRecommended;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Rendering.StencilState m_DefaultStencilState
    // Size: 0xC
    // Offset: 0x2ED
    ::UnityEngine::Rendering::StencilState m_DefaultStencilState;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::StencilState) == 0xC);
    // Padding between fields: m_DefaultStencilState and: m_LightCookieManager
    char __padding43[0x7] = {};
    // private UnityEngine.Rendering.Universal.LightCookieManager m_LightCookieManager
    // Size: 0x8
    // Offset: 0x300
    ::UnityEngine::Rendering::Universal::LightCookieManager* m_LightCookieManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LightCookieManager*) == 0x8);
    // private UnityEngine.Rendering.Universal.IntermediateTextureMode m_IntermediateTextureMode
    // Size: 0x4
    // Offset: 0x308
    ::UnityEngine::Rendering::Universal::IntermediateTextureMode m_IntermediateTextureMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::IntermediateTextureMode) == 0x4);
    // Padding between fields: m_IntermediateTextureMode and: m_BlitMaterial
    char __padding45[0x4] = {};
    // private UnityEngine.Material m_BlitMaterial
    // Size: 0x8
    // Offset: 0x310
    ::UnityEngine::Material* m_BlitMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material m_BlitHDRMaterial
    // Size: 0x8
    // Offset: 0x318
    ::UnityEngine::Material* m_BlitHDRMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material m_CopyDepthMaterial
    // Size: 0x8
    // Offset: 0x320
    ::UnityEngine::Material* m_CopyDepthMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material m_SamplingMaterial
    // Size: 0x8
    // Offset: 0x328
    ::UnityEngine::Material* m_SamplingMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material m_StencilDeferredMaterial
    // Size: 0x8
    // Offset: 0x330
    ::UnityEngine::Material* m_StencilDeferredMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material m_CameraMotionVecMaterial
    // Size: 0x8
    // Offset: 0x338
    ::UnityEngine::Material* m_CameraMotionVecMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material m_ObjectMotionVecMaterial
    // Size: 0x8
    // Offset: 0x340
    ::UnityEngine::Material* m_ObjectMotionVecMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Rendering.Universal.PostProcessPasses m_PostProcessPasses
    // Size: 0x40
    // Offset: 0x348
    ::UnityEngine::Rendering::Universal::PostProcessPasses m_PostProcessPasses;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::PostProcessPasses) == 0x40);
    // System.Boolean m_TargetIsBackbuffer
    // Size: 0x1
    // Offset: 0x388
    bool m_TargetIsBackbuffer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_TargetIsBackbuffer and: frameResources
    char __padding54[0x7] = {};
    // UnityEngine.Rendering.Universal.UniversalRenderer/RenderGraphFrameResources frameResources
    // Size: 0x8
    // Offset: 0x390
    ::UnityEngine::Rendering::Universal::UniversalRenderer::RenderGraphFrameResources* frameResources;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::UniversalRenderer::RenderGraphFrameResources*) == 0x8);
    public:
    // static field const value: static private UnityEngine.Experimental.Rendering.GraphicsFormat k_DepthStencilFormat
    static constexpr const int k_DepthStencilFormat = 92;
    // Get static field: static private UnityEngine.Experimental.Rendering.GraphicsFormat k_DepthStencilFormat
    static ::UnityEngine::Experimental::Rendering::GraphicsFormat _get_k_DepthStencilFormat();
    // Set static field: static private UnityEngine.Experimental.Rendering.GraphicsFormat k_DepthStencilFormat
    static void _set_k_DepthStencilFormat(::UnityEngine::Experimental::Rendering::GraphicsFormat value);
    // static field const value: static private System.Int32 k_DepthBufferBits
    static constexpr const int k_DepthBufferBits = 24;
    // Get static field: static private System.Int32 k_DepthBufferBits
    static int _get_k_DepthBufferBits();
    // Set static field: static private System.Int32 k_DepthBufferBits
    static void _set_k_DepthBufferBits(int value);
    // static field const value: static private System.Int32 k_FinalBlitPassQueueOffset
    static constexpr const int k_FinalBlitPassQueueOffset = 1;
    // Get static field: static private System.Int32 k_FinalBlitPassQueueOffset
    static int _get_k_FinalBlitPassQueueOffset();
    // Set static field: static private System.Int32 k_FinalBlitPassQueueOffset
    static void _set_k_FinalBlitPassQueueOffset(int value);
    // static field const value: static private System.Int32 k_AfterFinalBlitPassQueueOffset
    static constexpr const int k_AfterFinalBlitPassQueueOffset = 2;
    // Get static field: static private System.Int32 k_AfterFinalBlitPassQueueOffset
    static int _get_k_AfterFinalBlitPassQueueOffset();
    // Set static field: static private System.Int32 k_AfterFinalBlitPassQueueOffset
    static void _set_k_AfterFinalBlitPassQueueOffset(int value);
    // Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> k_DepthNormalsOnly
    static ::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* _get_k_DepthNormalsOnly();
    // Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> k_DepthNormalsOnly
    static void _set_k_DepthNormalsOnly(::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* value);
    // Get static field: static private UnityEngine.Rendering.RTHandle m_RenderGraphCameraColorHandle
    static ::UnityEngine::Rendering::RTHandle* _get_m_RenderGraphCameraColorHandle();
    // Set static field: static private UnityEngine.Rendering.RTHandle m_RenderGraphCameraColorHandle
    static void _set_m_RenderGraphCameraColorHandle(::UnityEngine::Rendering::RTHandle* value);
    // Get static field: static private UnityEngine.Rendering.RTHandle m_RenderGraphCameraDepthHandle
    static ::UnityEngine::Rendering::RTHandle* _get_m_RenderGraphCameraDepthHandle();
    // Set static field: static private UnityEngine.Rendering.RTHandle m_RenderGraphCameraDepthHandle
    static void _set_m_RenderGraphCameraDepthHandle(::UnityEngine::Rendering::RTHandle* value);
    // Get static field: static UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle m_ActiveRenderGraphColor
    static ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle _get_m_ActiveRenderGraphColor();
    // Set static field: static UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle m_ActiveRenderGraphColor
    static void _set_m_ActiveRenderGraphColor(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle value);
    // Get static field: static UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle m_ActiveRenderGraphDepth
    static ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle _get_m_ActiveRenderGraphDepth();
    // Set static field: static UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle m_ActiveRenderGraphDepth
    static void _set_m_ActiveRenderGraphDepth(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle value);
    // Get static field: static private System.Boolean m_UseIntermediateTexture
    static bool _get_m_UseIntermediateTexture();
    // Set static field: static private System.Boolean m_UseIntermediateTexture
    static void _set_m_UseIntermediateTexture(bool value);
    // Get instance field reference: private System.Boolean m_Clustering
    [[deprecated("Use field access instead!")]] bool& dyn_m_Clustering();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.DepthOnlyPass m_DepthPrepass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::DepthOnlyPass*& dyn_m_DepthPrepass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.DepthNormalOnlyPass m_DepthNormalPrepass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*& dyn_m_DepthNormalPrepass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.CopyDepthPass m_PrimedDepthCopyPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::CopyDepthPass*& dyn_m_PrimedDepthCopyPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.MotionVectorRenderPass m_MotionVectorPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::MotionVectorRenderPass*& dyn_m_MotionVectorPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.MainLightShadowCasterPass m_MainLightShadowCasterPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass*& dyn_m_MainLightShadowCasterPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass m_AdditionalLightsShadowCasterPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*& dyn_m_AdditionalLightsShadowCasterPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.GBufferPass m_GBufferPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::GBufferPass*& dyn_m_GBufferPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.CopyDepthPass m_GBufferCopyDepthPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::CopyDepthPass*& dyn_m_GBufferCopyDepthPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.DeferredPass m_DeferredPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::DeferredPass*& dyn_m_DeferredPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.DrawObjectsPass m_RenderOpaqueForwardOnlyPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::DrawObjectsPass*& dyn_m_RenderOpaqueForwardOnlyPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.DrawObjectsPass m_RenderOpaqueForwardPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::DrawObjectsPass*& dyn_m_RenderOpaqueForwardPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.DrawObjectsWithRenderingLayersPass m_RenderOpaqueForwardWithRenderingLayersPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::DrawObjectsWithRenderingLayersPass*& dyn_m_RenderOpaqueForwardWithRenderingLayersPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DrawSkyboxPass m_DrawSkyboxPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DrawSkyboxPass*& dyn_m_DrawSkyboxPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.CopyDepthPass m_CopyDepthPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::CopyDepthPass*& dyn_m_CopyDepthPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.CopyColorPass m_CopyColorPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::CopyColorPass*& dyn_m_CopyColorPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.TransparentSettingsPass m_TransparentSettingsPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::TransparentSettingsPass*& dyn_m_TransparentSettingsPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.DrawObjectsPass m_RenderTransparentForwardPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::DrawObjectsPass*& dyn_m_RenderTransparentForwardPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.InvokeOnRenderObjectCallbackPass m_OnRenderObjectCallbackPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::InvokeOnRenderObjectCallbackPass*& dyn_m_OnRenderObjectCallbackPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.FinalBlitPass m_FinalBlitPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::FinalBlitPass*& dyn_m_FinalBlitPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.CapturePass m_CapturePass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::CapturePass*& dyn_m_CapturePass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.XROcclusionMeshPass m_XROcclusionMeshPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::XROcclusionMeshPass*& dyn_m_XROcclusionMeshPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.CopyDepthPass m_XRCopyDepthPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::CopyDepthPass*& dyn_m_XRCopyDepthPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DrawScreenSpaceUIPass m_DrawOffscreenUIPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DrawScreenSpaceUIPass*& dyn_m_DrawOffscreenUIPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DrawScreenSpaceUIPass m_DrawOverlayUIPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DrawScreenSpaceUIPass*& dyn_m_DrawOverlayUIPass();
    // Get instance field reference: UnityEngine.Rendering.Universal.Internal.RenderTargetBufferSystem m_ColorBufferSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*& dyn_m_ColorBufferSystem();
    // Get instance field reference: UnityEngine.Rendering.RTHandle m_ActiveCameraColorAttachment
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_ActiveCameraColorAttachment();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_ColorFrontBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_ColorFrontBuffer();
    // Get instance field reference: UnityEngine.Rendering.RTHandle m_ActiveCameraDepthAttachment
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_ActiveCameraDepthAttachment();
    // Get instance field reference: UnityEngine.Rendering.RTHandle m_CameraDepthAttachment
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_CameraDepthAttachment();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_XRTargetHandleAlias
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_XRTargetHandleAlias();
    // Get instance field reference: UnityEngine.Rendering.RTHandle m_DepthTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_DepthTexture();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_NormalsTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_NormalsTexture();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_DecalLayersTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_DecalLayersTexture();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_OpaqueColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_OpaqueColor();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_MotionVectorColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_MotionVectorColor();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_MotionVectorDepth
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_MotionVectorDepth();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.ForwardLights m_ForwardLights
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::ForwardLights*& dyn_m_ForwardLights();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.DeferredLights m_DeferredLights
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::DeferredLights*& dyn_m_DeferredLights();
    // Get instance field reference: private UnityEngine.Rendering.Universal.RenderingMode m_RenderingMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::RenderingMode& dyn_m_RenderingMode();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DepthPrimingMode m_DepthPrimingMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DepthPrimingMode& dyn_m_DepthPrimingMode();
    // Get instance field reference: private UnityEngine.Rendering.Universal.CopyDepthMode m_CopyDepthMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::CopyDepthMode& dyn_m_CopyDepthMode();
    // Get instance field reference: private System.Boolean m_DepthPrimingRecommended
    [[deprecated("Use field access instead!")]] bool& dyn_m_DepthPrimingRecommended();
    // Get instance field reference: private UnityEngine.Rendering.StencilState m_DefaultStencilState
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::StencilState& dyn_m_DefaultStencilState();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LightCookieManager m_LightCookieManager
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LightCookieManager*& dyn_m_LightCookieManager();
    // Get instance field reference: private UnityEngine.Rendering.Universal.IntermediateTextureMode m_IntermediateTextureMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::IntermediateTextureMode& dyn_m_IntermediateTextureMode();
    // Get instance field reference: private UnityEngine.Material m_BlitMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_BlitMaterial();
    // Get instance field reference: private UnityEngine.Material m_BlitHDRMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_BlitHDRMaterial();
    // Get instance field reference: private UnityEngine.Material m_CopyDepthMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_CopyDepthMaterial();
    // Get instance field reference: private UnityEngine.Material m_SamplingMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_SamplingMaterial();
    // Get instance field reference: private UnityEngine.Material m_StencilDeferredMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_StencilDeferredMaterial();
    // Get instance field reference: private UnityEngine.Material m_CameraMotionVecMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_CameraMotionVecMaterial();
    // Get instance field reference: private UnityEngine.Material m_ObjectMotionVecMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_ObjectMotionVecMaterial();
    // Get instance field reference: private UnityEngine.Rendering.Universal.PostProcessPasses m_PostProcessPasses
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::PostProcessPasses& dyn_m_PostProcessPasses();
    // Get instance field reference: System.Boolean m_TargetIsBackbuffer
    [[deprecated("Use field access instead!")]] bool& dyn_m_TargetIsBackbuffer();
    // Get instance field reference: UnityEngine.Rendering.Universal.UniversalRenderer/RenderGraphFrameResources frameResources
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::UniversalRenderer::RenderGraphFrameResources*& dyn_frameResources();
    // UnityEngine.Rendering.Universal.RenderingMode get_renderingModeRequested()
    // Offset: 0x52E8000
    ::UnityEngine::Rendering::Universal::RenderingMode get_renderingModeRequested();
    // UnityEngine.Rendering.Universal.RenderingMode get_renderingModeActual()
    // Offset: 0x52E8008
    ::UnityEngine::Rendering::Universal::RenderingMode get_renderingModeActual();
    // System.Boolean get_accurateGbufferNormals()
    // Offset: 0x52E8078
    bool get_accurateGbufferNormals();
    // public UnityEngine.Rendering.Universal.DepthPrimingMode get_depthPrimingMode()
    // Offset: 0x52E8098
    ::UnityEngine::Rendering::Universal::DepthPrimingMode get_depthPrimingMode();
    // public System.Void set_depthPrimingMode(UnityEngine.Rendering.Universal.DepthPrimingMode value)
    // Offset: 0x52E80A0
    void set_depthPrimingMode(::UnityEngine::Rendering::Universal::DepthPrimingMode value);
    // UnityEngine.Rendering.Universal.Internal.ColorGradingLutPass get_colorGradingLutPass()
    // Offset: 0x52E80A8
    ::UnityEngine::Rendering::Universal::Internal::ColorGradingLutPass* get_colorGradingLutPass();
    // UnityEngine.Rendering.Universal.PostProcessPass get_postProcessPass()
    // Offset: 0x52E80B0
    ::UnityEngine::Rendering::Universal::PostProcessPass* get_postProcessPass();
    // UnityEngine.Rendering.Universal.PostProcessPass get_finalPostProcessPass()
    // Offset: 0x52E80B8
    ::UnityEngine::Rendering::Universal::PostProcessPass* get_finalPostProcessPass();
    // UnityEngine.Rendering.RTHandle get_colorGradingLut()
    // Offset: 0x52E80C0
    ::UnityEngine::Rendering::RTHandle* get_colorGradingLut();
    // UnityEngine.Rendering.Universal.Internal.DeferredLights get_deferredLights()
    // Offset: 0x52E80C8
    ::UnityEngine::Rendering::Universal::Internal::DeferredLights* get_deferredLights();
    // public System.Void .ctor(UnityEngine.Rendering.Universal.UniversalRendererData data)
    // Offset: 0x52E80D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UniversalRenderer* New_ctor(::UnityEngine::Rendering::Universal::UniversalRendererData* data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UniversalRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UniversalRenderer*, creationType>(data)));
    }
    // private System.Void SetupFinalPassDebug(ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52E95F0
    void SetupFinalPassDebug(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // private System.Boolean IsDepthPrimingEnabled(ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52E9900
    bool IsDepthPrimingEnabled(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // private System.Boolean IsGLESDevice()
    // Offset: 0x52E9A88
    bool IsGLESDevice();
    // private System.Boolean IsGLDevice()
    // Offset: 0x52E9ABC
    bool IsGLDevice();
    // private System.Void EnqueueDeferred(ref UnityEngine.Rendering.Universal.RenderingData renderingData, System.Boolean hasDepthPrepass, System.Boolean hasNormalPrepass, System.Boolean hasRenderingLayerPrepass, System.Boolean applyMainShadow, System.Boolean applyAdditionalShadow)
    // Offset: 0x52EC750
    void EnqueueDeferred(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, bool hasDepthPrepass, bool hasNormalPrepass, bool hasRenderingLayerPrepass, bool applyMainShadow, bool applyAdditionalShadow);
    // private UnityEngine.Rendering.Universal.UniversalRenderer/RenderPassInputSummary GetRenderPassInputs(ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52EBE70
    ::UnityEngine::Rendering::Universal::UniversalRenderer::RenderPassInputSummary GetRenderPassInputs(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void CreateCameraRenderTarget(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.RenderTextureDescriptor descriptor, System.Boolean primedDepth, UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52EC228
    void CreateCameraRenderTarget(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::RenderTextureDescriptor> descriptor, bool primedDepth, ::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // private System.Boolean PlatformRequiresExplicitMsaaResolve()
    // Offset: 0x52ECE0C
    bool PlatformRequiresExplicitMsaaResolve();
    // private System.Boolean RequiresIntermediateColorTexture(ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52EC07C
    bool RequiresIntermediateColorTexture(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // private System.Boolean CanCopyDepth(ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52E9994
    bool CanCopyDepth(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // private System.Void CleanupRenderGraphResources()
    // Offset: 0x52E9470
    void CleanupRenderGraphResources();
    // static UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle CreateRenderGraphTexture(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.RenderTextureDescriptor desc, System.String name, System.Boolean clear, UnityEngine.FilterMode filterMode, UnityEngine.TextureWrapMode wrapMode)
    // Offset: 0x52ED1C0
    static ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle CreateRenderGraphTexture(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ::UnityEngine::RenderTextureDescriptor desc, ::StringW name, bool clear, ::UnityEngine::FilterMode filterMode, ::UnityEngine::TextureWrapMode wrapMode);
    // private System.Boolean RequiresColorAndDepthTextures(out System.Boolean createColorTexture, out System.Boolean createDepthTexture, ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.Universal.UniversalRenderer/RenderPassInputSummary renderPassInputs)
    // Offset: 0x52ED2C0
    bool RequiresColorAndDepthTextures(ByRef<bool> createColorTexture, ByRef<bool> createDepthTexture, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::UnityEngine::Rendering::Universal::UniversalRenderer::RenderPassInputSummary renderPassInputs);
    // private System.Void CreateRenderGraphCameraRenderTargets(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52ED564
    void CreateRenderGraphCameraRenderTargets(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void OnBeforeRendering(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52EDD58
    void OnBeforeRendering(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void OnMainRendering(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52EDE2C
    void OnMainRendering(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void OnAfterRendering(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52EE2BC
    void OnAfterRendering(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public override System.Int32 SupportedCameraStackingTypes()
    // Offset: 0x52E7FDC
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Int32 ScriptableRenderer::SupportedCameraStackingTypes()
    int SupportedCameraStackingTypes();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x52E9300
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Void ScriptableRenderer::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // override System.Void ReleaseRenderTargets()
    // Offset: 0x52E9508
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Void ScriptableRenderer::ReleaseRenderTargets()
    void ReleaseRenderTargets();
    // public override System.Void Setup(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52E9B00
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Void ScriptableRenderer::Setup(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void Setup(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public override System.Void SetupLights(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52ECAB4
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Void ScriptableRenderer::SetupLights(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void SetupLights(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public override System.Void SetupCullingParameters(ref UnityEngine.Rendering.ScriptableCullingParameters cullingParameters, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52ECB18
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Void ScriptableRenderer::SetupCullingParameters(ref UnityEngine.Rendering.ScriptableCullingParameters cullingParameters, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    void SetupCullingParameters(ByRef<::UnityEngine::Rendering::ScriptableCullingParameters> cullingParameters, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // public override System.Void FinishRendering(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52ECDCC
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Void ScriptableRenderer::FinishRendering(UnityEngine.Rendering.CommandBuffer cmd)
    void FinishRendering(::UnityEngine::Rendering::CommandBuffer* cmd);
    // override System.Void SwapColorBuffer(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52ECF94
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Void ScriptableRenderer::SwapColorBuffer(UnityEngine.Rendering.CommandBuffer cmd)
    void SwapColorBuffer(::UnityEngine::Rendering::CommandBuffer* cmd);
    // override UnityEngine.Rendering.RTHandle GetCameraColorFrontBuffer(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52ED168
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: UnityEngine.Rendering.RTHandle ScriptableRenderer::GetCameraColorFrontBuffer(UnityEngine.Rendering.CommandBuffer cmd)
    ::UnityEngine::Rendering::RTHandle* GetCameraColorFrontBuffer(::UnityEngine::Rendering::CommandBuffer* cmd);
    // override UnityEngine.Rendering.RTHandle GetCameraColorBackBuffer(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52ED184
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: UnityEngine.Rendering.RTHandle ScriptableRenderer::GetCameraColorBackBuffer(UnityEngine.Rendering.CommandBuffer cmd)
    ::UnityEngine::Rendering::RTHandle* GetCameraColorBackBuffer(::UnityEngine::Rendering::CommandBuffer* cmd);
    // override System.Void EnableSwapBufferMSAA(System.Boolean enable)
    // Offset: 0x52ED1A0
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Void ScriptableRenderer::EnableSwapBufferMSAA(System.Boolean enable)
    void EnableSwapBufferMSAA(bool enable);
    // override System.Void OnRecordRenderGraph(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52EDCDC
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Void ScriptableRenderer::OnRecordRenderGraph(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void OnRecordRenderGraph(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // override System.Void OnFinishRenderGraphRendering(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52EE410
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Void ScriptableRenderer::OnFinishRenderGraphRendering(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void OnFinishRenderGraphRendering(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // static private System.Void .cctor()
    // Offset: 0x52EE75C
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Void ScriptableRenderer::.cctor()
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.UniversalRenderer
  #pragma pack(pop)
  static check_size<sizeof(UniversalRenderer), 912 + sizeof(::UnityEngine::Rendering::Universal::UniversalRenderer::RenderGraphFrameResources*)> __UnityEngine_Rendering_Universal_UniversalRendererSizeCheck;
  static_assert(sizeof(UniversalRenderer) == 0x398);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::get_renderingModeRequested
// Il2CppName: get_renderingModeRequested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::RenderingMode (UnityEngine::Rendering::Universal::UniversalRenderer::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::get_renderingModeRequested)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "get_renderingModeRequested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::get_renderingModeActual
// Il2CppName: get_renderingModeActual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::RenderingMode (UnityEngine::Rendering::Universal::UniversalRenderer::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::get_renderingModeActual)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "get_renderingModeActual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::get_accurateGbufferNormals
// Il2CppName: get_accurateGbufferNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderer::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::get_accurateGbufferNormals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "get_accurateGbufferNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::get_depthPrimingMode
// Il2CppName: get_depthPrimingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DepthPrimingMode (UnityEngine::Rendering::Universal::UniversalRenderer::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::get_depthPrimingMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "get_depthPrimingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::set_depthPrimingMode
// Il2CppName: set_depthPrimingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(::UnityEngine::Rendering::Universal::DepthPrimingMode)>(&UnityEngine::Rendering::Universal::UniversalRenderer::set_depthPrimingMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DepthPrimingMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "set_depthPrimingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::get_colorGradingLutPass
// Il2CppName: get_colorGradingLutPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::Internal::ColorGradingLutPass* (UnityEngine::Rendering::Universal::UniversalRenderer::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::get_colorGradingLutPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "get_colorGradingLutPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::get_postProcessPass
// Il2CppName: get_postProcessPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::PostProcessPass* (UnityEngine::Rendering::Universal::UniversalRenderer::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::get_postProcessPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "get_postProcessPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::get_finalPostProcessPass
// Il2CppName: get_finalPostProcessPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::PostProcessPass* (UnityEngine::Rendering::Universal::UniversalRenderer::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::get_finalPostProcessPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "get_finalPostProcessPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::get_colorGradingLut
// Il2CppName: get_colorGradingLut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::UniversalRenderer::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::get_colorGradingLut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "get_colorGradingLut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::get_deferredLights
// Il2CppName: get_deferredLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::Internal::DeferredLights* (UnityEngine::Rendering::Universal::UniversalRenderer::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::get_deferredLights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "get_deferredLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::SetupFinalPassDebug
// Il2CppName: SetupFinalPassDebug
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::UniversalRenderer::SetupFinalPassDebug)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "SetupFinalPassDebug", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::IsDepthPrimingEnabled
// Il2CppName: IsDepthPrimingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderer::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::UniversalRenderer::IsDepthPrimingEnabled)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "IsDepthPrimingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::IsGLESDevice
// Il2CppName: IsGLESDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderer::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::IsGLESDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "IsGLESDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::IsGLDevice
// Il2CppName: IsGLDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderer::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::IsGLDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "IsGLDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::EnqueueDeferred
// Il2CppName: EnqueueDeferred
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>, bool, bool, bool, bool, bool)>(&UnityEngine::Rendering::Universal::UniversalRenderer::EnqueueDeferred)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* hasDepthPrepass = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasNormalPrepass = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasRenderingLayerPrepass = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* applyMainShadow = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* applyAdditionalShadow = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "EnqueueDeferred", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData, hasDepthPrepass, hasNormalPrepass, hasRenderingLayerPrepass, applyMainShadow, applyAdditionalShadow});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::GetRenderPassInputs
// Il2CppName: GetRenderPassInputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::UniversalRenderer::RenderPassInputSummary (UnityEngine::Rendering::Universal::UniversalRenderer::*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::UniversalRenderer::GetRenderPassInputs)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "GetRenderPassInputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::CreateCameraRenderTarget
// Il2CppName: CreateCameraRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::RenderTextureDescriptor>, bool, ::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::UniversalRenderer::CreateCameraRenderTarget)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* descriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->this_arg;
    static auto* primedDepth = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "CreateCameraRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, descriptor, primedDepth, cmd, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::PlatformRequiresExplicitMsaaResolve
// Il2CppName: PlatformRequiresExplicitMsaaResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderer::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::PlatformRequiresExplicitMsaaResolve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "PlatformRequiresExplicitMsaaResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::RequiresIntermediateColorTexture
// Il2CppName: RequiresIntermediateColorTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderer::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::UniversalRenderer::RequiresIntermediateColorTexture)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "RequiresIntermediateColorTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::CanCopyDepth
// Il2CppName: CanCopyDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderer::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::UniversalRenderer::CanCopyDepth)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "CanCopyDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::CleanupRenderGraphResources
// Il2CppName: CleanupRenderGraphResources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::CleanupRenderGraphResources)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "CleanupRenderGraphResources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::CreateRenderGraphTexture
// Il2CppName: CreateRenderGraphTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle (*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ::UnityEngine::RenderTextureDescriptor, ::StringW, bool, ::UnityEngine::FilterMode, ::UnityEngine::TextureWrapMode)>(&UnityEngine::Rendering::Universal::UniversalRenderer::CreateRenderGraphTexture)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* desc = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* clear = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* filterMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    static auto* wrapMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureWrapMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "CreateRenderGraphTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, desc, name, clear, filterMode, wrapMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::RequiresColorAndDepthTextures
// Il2CppName: RequiresColorAndDepthTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderer::*)(ByRef<bool>, ByRef<bool>, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Rendering::Universal::UniversalRenderer::RenderPassInputSummary)>(&UnityEngine::Rendering::Universal::UniversalRenderer::RequiresColorAndDepthTextures)> {
  static const MethodInfo* get() {
    static auto* createColorTexture = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* createDepthTexture = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* renderPassInputs = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalRenderer/RenderPassInputSummary")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "RequiresColorAndDepthTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{createColorTexture, createDepthTexture, renderingData, renderPassInputs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::CreateRenderGraphCameraRenderTargets
// Il2CppName: CreateRenderGraphCameraRenderTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::UniversalRenderer::CreateRenderGraphCameraRenderTargets)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "CreateRenderGraphCameraRenderTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::OnBeforeRendering
// Il2CppName: OnBeforeRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::UniversalRenderer::OnBeforeRendering)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "OnBeforeRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::OnMainRendering
// Il2CppName: OnMainRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::UniversalRenderer::OnMainRendering)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "OnMainRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::OnAfterRendering
// Il2CppName: OnAfterRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::UniversalRenderer::OnAfterRendering)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "OnAfterRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::SupportedCameraStackingTypes
// Il2CppName: SupportedCameraStackingTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UniversalRenderer::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::SupportedCameraStackingTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "SupportedCameraStackingTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderer::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::ReleaseRenderTargets
// Il2CppName: ReleaseRenderTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::ReleaseRenderTargets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "ReleaseRenderTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::UniversalRenderer::Setup)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::SetupLights
// Il2CppName: SetupLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::UniversalRenderer::SetupLights)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "SetupLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::SetupCullingParameters
// Il2CppName: SetupCullingParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(ByRef<::UnityEngine::Rendering::ScriptableCullingParameters>, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::UniversalRenderer::SetupCullingParameters)> {
  static const MethodInfo* get() {
    static auto* cullingParameters = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableCullingParameters")->this_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "SetupCullingParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cullingParameters, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::FinishRendering
// Il2CppName: FinishRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::UniversalRenderer::FinishRendering)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "FinishRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::SwapColorBuffer
// Il2CppName: SwapColorBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::UniversalRenderer::SwapColorBuffer)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "SwapColorBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::GetCameraColorFrontBuffer
// Il2CppName: GetCameraColorFrontBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::UniversalRenderer::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::UniversalRenderer::GetCameraColorFrontBuffer)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "GetCameraColorFrontBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::GetCameraColorBackBuffer
// Il2CppName: GetCameraColorBackBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::UniversalRenderer::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::UniversalRenderer::GetCameraColorBackBuffer)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "GetCameraColorBackBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::EnableSwapBufferMSAA
// Il2CppName: EnableSwapBufferMSAA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderer::EnableSwapBufferMSAA)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "EnableSwapBufferMSAA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::OnRecordRenderGraph
// Il2CppName: OnRecordRenderGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::UniversalRenderer::OnRecordRenderGraph)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "OnRecordRenderGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::OnFinishRenderGraphRendering
// Il2CppName: OnFinishRenderGraphRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderer::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::UniversalRenderer::OnFinishRenderGraphRendering)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), "OnFinishRenderGraphRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
