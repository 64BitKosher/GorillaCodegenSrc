// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.DecalChunk
#include "UnityEngine/Rendering/Universal/DecalChunk.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CullingGroup
  class CullingGroup;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalCulledChunk
  class DecalCulledChunk;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::DecalCulledChunk);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DecalCulledChunk*, "UnityEngine.Rendering.Universal", "DecalCulledChunk");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.DecalCulledChunk
  // [TokenAttribute] Offset: FFFFFFFF
  class DecalCulledChunk : public ::UnityEngine::Rendering::Universal::DecalChunk {
    public:
    // Writing base type padding for base size: 0x24 to desired offset: 0x28
    char ___base_padding[0x4] = {};
    public:
    // public UnityEngine.Vector3 cameraPosition
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 cameraPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.UInt64 sceneCullingMask
    // Size: 0x8
    // Offset: 0x38
    uint64_t sceneCullingMask;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.Int32 cullingMask
    // Size: 0x4
    // Offset: 0x40
    int cullingMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.CullingGroup cullingGroups
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::CullingGroup* cullingGroups;
    // Field size check
    static_assert(sizeof(::UnityEngine::CullingGroup*) == 0x8);
    // public System.Int32[] visibleDecalIndexArray
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<int> visibleDecalIndexArray;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public Unity.Collections.NativeArray`1<System.Int32> visibleDecalIndices
    // Size: 0xFFFFFFFF
    // Offset: 0x58
    ::Unity::Collections::NativeArray_1<int> visibleDecalIndices;
    // public System.Int32 visibleDecalCount
    // Size: 0x4
    // Offset: 0x68
    int visibleDecalCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Vector3 cameraPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_cameraPosition();
    // Get instance field reference: public System.UInt64 sceneCullingMask
    [[deprecated("Use field access instead!")]] uint64_t& dyn_sceneCullingMask();
    // Get instance field reference: public System.Int32 cullingMask
    [[deprecated("Use field access instead!")]] int& dyn_cullingMask();
    // Get instance field reference: public UnityEngine.CullingGroup cullingGroups
    [[deprecated("Use field access instead!")]] ::UnityEngine::CullingGroup*& dyn_cullingGroups();
    // Get instance field reference: public System.Int32[] visibleDecalIndexArray
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_visibleDecalIndexArray();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Int32> visibleDecalIndices
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_visibleDecalIndices();
    // Get instance field reference: public System.Int32 visibleDecalCount
    [[deprecated("Use field access instead!")]] int& dyn_visibleDecalCount();
    // public override System.Void RemoveAtSwapBack(System.Int32 entityIndex)
    // Offset: 0x52A9690
    // Implemented from: UnityEngine.Rendering.Universal.DecalChunk
    // Base method: System.Void DecalChunk::RemoveAtSwapBack(System.Int32 entityIndex)
    void RemoveAtSwapBack(int entityIndex);
    // public override System.Void SetCapacity(System.Int32 newCapacity)
    // Offset: 0x52A972C
    // Implemented from: UnityEngine.Rendering.Universal.DecalChunk
    // Base method: System.Void DecalChunk::SetCapacity(System.Int32 newCapacity)
    void SetCapacity(int newCapacity);
    // public override System.Void Dispose()
    // Offset: 0x52A97F4
    // Implemented from: UnityEngine.Rendering.Universal.DecalChunk
    // Base method: System.Void DecalChunk::Dispose()
    void Dispose();
    // public System.Void .ctor()
    // Offset: 0x52A6358
    // Implemented from: UnityEngine.Rendering.Universal.DecalChunk
    // Base method: System.Void DecalChunk::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DecalCulledChunk* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DecalCulledChunk::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DecalCulledChunk*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.DecalCulledChunk
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalCulledChunk::RemoveAtSwapBack
// Il2CppName: RemoveAtSwapBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalCulledChunk::*)(int)>(&UnityEngine::Rendering::Universal::DecalCulledChunk::RemoveAtSwapBack)> {
  static const MethodInfo* get() {
    static auto* entityIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalCulledChunk*), "RemoveAtSwapBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entityIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalCulledChunk::SetCapacity
// Il2CppName: SetCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalCulledChunk::*)(int)>(&UnityEngine::Rendering::Universal::DecalCulledChunk::SetCapacity)> {
  static const MethodInfo* get() {
    static auto* newCapacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalCulledChunk*), "SetCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newCapacity});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalCulledChunk::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalCulledChunk::*)()>(&UnityEngine::Rendering::Universal::DecalCulledChunk::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalCulledChunk*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalCulledChunk::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
