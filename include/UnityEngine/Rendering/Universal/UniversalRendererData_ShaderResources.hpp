// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.UniversalRendererData
#include "UnityEngine/Rendering/Universal/UniversalRendererData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::UniversalRendererData::ShaderResources);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UniversalRendererData::ShaderResources*, "UnityEngine.Rendering.Universal", "UniversalRendererData/ShaderResources");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.UniversalRendererData/ShaderResources
  // [TokenAttribute] Offset: FFFFFFFF
  // [ReloadGroupAttribute] Offset: FFFFFFFF
  class UniversalRendererData::ShaderResources : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Shader blitPS
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Shader* blitPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader copyDepthPS
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Shader* copyDepthPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader screenSpaceShadowPS
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Shader* screenSpaceShadowPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader samplingPS
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Shader* samplingPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader stencilDeferredPS
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Shader* stencilDeferredPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader fallbackErrorPS
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Shader* fallbackErrorPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader fallbackLoadingPS
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Shader* fallbackLoadingPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader materialErrorPS
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Shader* materialErrorPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // UnityEngine.Shader coreBlitPS
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Shader* coreBlitPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // UnityEngine.Shader coreBlitColorAndDepthPS
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Shader* coreBlitColorAndDepthPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // UnityEngine.Shader blitHDROverlay
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Shader* blitHDROverlay;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader cameraMotionVector
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Shader* cameraMotionVector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.Shader objectMotionVector
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Shader* objectMotionVector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Shader blitPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_blitPS();
    // Get instance field reference: public UnityEngine.Shader copyDepthPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_copyDepthPS();
    // Get instance field reference: public UnityEngine.Shader screenSpaceShadowPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_screenSpaceShadowPS();
    // Get instance field reference: public UnityEngine.Shader samplingPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_samplingPS();
    // Get instance field reference: public UnityEngine.Shader stencilDeferredPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_stencilDeferredPS();
    // Get instance field reference: public UnityEngine.Shader fallbackErrorPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_fallbackErrorPS();
    // Get instance field reference: public UnityEngine.Shader fallbackLoadingPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_fallbackLoadingPS();
    // Get instance field reference: public UnityEngine.Shader materialErrorPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_materialErrorPS();
    // Get instance field reference: UnityEngine.Shader coreBlitPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_coreBlitPS();
    // Get instance field reference: UnityEngine.Shader coreBlitColorAndDepthPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_coreBlitColorAndDepthPS();
    // Get instance field reference: UnityEngine.Shader blitHDROverlay
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_blitHDROverlay();
    // Get instance field reference: public UnityEngine.Shader cameraMotionVector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_cameraMotionVector();
    // Get instance field reference: public UnityEngine.Shader objectMotionVector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_objectMotionVector();
    // public System.Void .ctor()
    // Offset: 0x52EED18
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UniversalRendererData::ShaderResources* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UniversalRendererData::ShaderResources::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UniversalRendererData::ShaderResources*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.UniversalRendererData/ShaderResources
  #pragma pack(pop)
  static check_size<sizeof(UniversalRendererData::ShaderResources), 112 + sizeof(::UnityEngine::Shader*)> __UnityEngine_Rendering_Universal_UniversalRendererData_ShaderResourcesSizeCheck;
  static_assert(sizeof(UniversalRendererData::ShaderResources) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRendererData::ShaderResources::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
