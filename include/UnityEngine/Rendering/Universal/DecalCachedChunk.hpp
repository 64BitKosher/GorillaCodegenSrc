// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.DecalChunk
#include "UnityEngine/Rendering/Universal/DecalChunk.hpp"
// Including type: Unity.Mathematics.float4x4
#include "Unity/Mathematics/float4x4.hpp"
// Including type: Unity.Mathematics.float2
#include "Unity/Mathematics/float2.hpp"
// Including type: UnityEngine.BoundingSphere
#include "UnityEngine/BoundingSphere.hpp"
// Including type: UnityEngine.Rendering.Universal.DecalScaleMode
#include "UnityEngine/Rendering/Universal/DecalScaleMode.hpp"
// Including type: Unity.Mathematics.float3
#include "Unity/Mathematics/float3.hpp"
// Including type: Unity.Mathematics.quaternion
#include "Unity/Mathematics/quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalCachedChunk
  class DecalCachedChunk;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::DecalCachedChunk);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DecalCachedChunk*, "UnityEngine.Rendering.Universal", "DecalCachedChunk");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.DecalCachedChunk
  // [TokenAttribute] Offset: FFFFFFFF
  class DecalCachedChunk : public ::UnityEngine::Rendering::Universal::DecalChunk {
    public:
    // Writing base type padding for base size: 0x24 to desired offset: 0x28
    char ___base_padding[0x4] = {};
    public:
    // public UnityEngine.MaterialPropertyBlock propertyBlock
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MaterialPropertyBlock* propertyBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // public System.Int32 passIndexDBuffer
    // Size: 0x4
    // Offset: 0x30
    int passIndexDBuffer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 passIndexEmissive
    // Size: 0x4
    // Offset: 0x34
    int passIndexEmissive;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 passIndexScreenSpace
    // Size: 0x4
    // Offset: 0x38
    int passIndexScreenSpace;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 passIndexGBuffer
    // Size: 0x4
    // Offset: 0x3C
    int passIndexGBuffer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 drawOrder
    // Size: 0x4
    // Offset: 0x40
    int drawOrder;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean isCreated
    // Size: 0x1
    // Offset: 0x44
    bool isCreated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> decalToWorlds
    // Size: 0xFFFFFFFF
    // Offset: 0x48
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> decalToWorlds;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> normalToWorlds
    // Size: 0xFFFFFFFF
    // Offset: 0x58
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> normalToWorlds;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> sizeOffsets
    // Size: 0xFFFFFFFF
    // Offset: 0x68
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> sizeOffsets;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float2> drawDistances
    // Size: 0xFFFFFFFF
    // Offset: 0x78
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> drawDistances;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float2> angleFades
    // Size: 0xFFFFFFFF
    // Offset: 0x88
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> angleFades;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float4> uvScaleBias
    // Size: 0xFFFFFFFF
    // Offset: 0x98
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4> uvScaleBias;
    // public Unity.Collections.NativeArray`1<System.Int32> layerMasks
    // Size: 0xFFFFFFFF
    // Offset: 0xA8
    ::Unity::Collections::NativeArray_1<int> layerMasks;
    // public Unity.Collections.NativeArray`1<System.UInt64> sceneLayerMasks
    // Size: 0xFFFFFFFF
    // Offset: 0xB8
    ::Unity::Collections::NativeArray_1<uint64_t> sceneLayerMasks;
    // public Unity.Collections.NativeArray`1<System.Single> fadeFactors
    // Size: 0xFFFFFFFF
    // Offset: 0xC8
    ::Unity::Collections::NativeArray_1<float> fadeFactors;
    // public Unity.Collections.NativeArray`1<UnityEngine.BoundingSphere> boundingSpheres
    // Size: 0xFFFFFFFF
    // Offset: 0xD8
    ::Unity::Collections::NativeArray_1<::UnityEngine::BoundingSphere> boundingSpheres;
    // public Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.DecalScaleMode> scaleModes
    // Size: 0xFFFFFFFF
    // Offset: 0xE8
    ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::DecalScaleMode> scaleModes;
    // public Unity.Collections.NativeArray`1<System.UInt32> renderingLayerMasks
    // Size: 0xFFFFFFFF
    // Offset: 0xF8
    ::Unity::Collections::NativeArray_1<uint> renderingLayerMasks;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float3> positions
    // Size: 0xFFFFFFFF
    // Offset: 0x108
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float3> positions;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.quaternion> rotation
    // Size: 0xFFFFFFFF
    // Offset: 0x118
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::quaternion> rotation;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float3> scales
    // Size: 0xFFFFFFFF
    // Offset: 0x128
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float3> scales;
    // public Unity.Collections.NativeArray`1<System.Boolean> dirty
    // Size: 0xFFFFFFFF
    // Offset: 0x138
    ::Unity::Collections::NativeArray_1<bool> dirty;
    // public UnityEngine.BoundingSphere[] boundingSphereArray
    // Size: 0x8
    // Offset: 0x148
    ::ArrayW<::UnityEngine::BoundingSphere> boundingSphereArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::BoundingSphere>) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.MaterialPropertyBlock propertyBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_propertyBlock();
    // Get instance field reference: public System.Int32 passIndexDBuffer
    [[deprecated("Use field access instead!")]] int& dyn_passIndexDBuffer();
    // Get instance field reference: public System.Int32 passIndexEmissive
    [[deprecated("Use field access instead!")]] int& dyn_passIndexEmissive();
    // Get instance field reference: public System.Int32 passIndexScreenSpace
    [[deprecated("Use field access instead!")]] int& dyn_passIndexScreenSpace();
    // Get instance field reference: public System.Int32 passIndexGBuffer
    [[deprecated("Use field access instead!")]] int& dyn_passIndexGBuffer();
    // Get instance field reference: public System.Int32 drawOrder
    [[deprecated("Use field access instead!")]] int& dyn_drawOrder();
    // Get instance field reference: public System.Boolean isCreated
    [[deprecated("Use field access instead!")]] bool& dyn_isCreated();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> decalToWorlds
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4>& dyn_decalToWorlds();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> normalToWorlds
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4>& dyn_normalToWorlds();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> sizeOffsets
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4>& dyn_sizeOffsets();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float2> drawDistances
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>& dyn_drawDistances();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float2> angleFades
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>& dyn_angleFades();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float4> uvScaleBias
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4>& dyn_uvScaleBias();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Int32> layerMasks
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_layerMasks();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.UInt64> sceneLayerMasks
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<uint64_t>& dyn_sceneLayerMasks();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Single> fadeFactors
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<float>& dyn_fadeFactors();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.BoundingSphere> boundingSpheres
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::BoundingSphere>& dyn_boundingSpheres();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.DecalScaleMode> scaleModes
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::DecalScaleMode>& dyn_scaleModes();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.UInt32> renderingLayerMasks
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<uint>& dyn_renderingLayerMasks();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float3> positions
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float3>& dyn_positions();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.quaternion> rotation
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::quaternion>& dyn_rotation();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float3> scales
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float3>& dyn_scales();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Boolean> dirty
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<bool>& dyn_dirty();
    // Get instance field reference: public UnityEngine.BoundingSphere[] boundingSphereArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::BoundingSphere>& dyn_boundingSphereArray();
    // public override System.Void RemoveAtSwapBack(System.Int32 entityIndex)
    // Offset: 0x52A7EE8
    // Implemented from: UnityEngine.Rendering.Universal.DecalChunk
    // Base method: System.Void DecalChunk::RemoveAtSwapBack(System.Int32 entityIndex)
    void RemoveAtSwapBack(int entityIndex);
    // public override System.Void SetCapacity(System.Int32 newCapacity)
    // Offset: 0x52A81E0
    // Implemented from: UnityEngine.Rendering.Universal.DecalChunk
    // Base method: System.Void DecalChunk::SetCapacity(System.Int32 newCapacity)
    void SetCapacity(int newCapacity);
    // public override System.Void Dispose()
    // Offset: 0x52A8448
    // Implemented from: UnityEngine.Rendering.Universal.DecalChunk
    // Base method: System.Void DecalChunk::Dispose()
    void Dispose();
    // public System.Void .ctor()
    // Offset: 0x52A6350
    // Implemented from: UnityEngine.Rendering.Universal.DecalChunk
    // Base method: System.Void DecalChunk::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DecalCachedChunk* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DecalCachedChunk::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DecalCachedChunk*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.DecalCachedChunk
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalCachedChunk::RemoveAtSwapBack
// Il2CppName: RemoveAtSwapBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalCachedChunk::*)(int)>(&UnityEngine::Rendering::Universal::DecalCachedChunk::RemoveAtSwapBack)> {
  static const MethodInfo* get() {
    static auto* entityIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalCachedChunk*), "RemoveAtSwapBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entityIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalCachedChunk::SetCapacity
// Il2CppName: SetCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalCachedChunk::*)(int)>(&UnityEngine::Rendering::Universal::DecalCachedChunk::SetCapacity)> {
  static const MethodInfo* get() {
    static auto* newCapacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalCachedChunk*), "SetCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newCapacity});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalCachedChunk::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalCachedChunk::*)()>(&UnityEngine::Rendering::Universal::DecalCachedChunk::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalCachedChunk*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalCachedChunk::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
