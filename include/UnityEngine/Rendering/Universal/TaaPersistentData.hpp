// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.RenderTextureDescriptor
#include "UnityEngine/RenderTextureDescriptor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
  // Skipping declaration: TextureDimension because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: VRTextureUsage because it is already included!
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: FormatUsage
  struct FormatUsage;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: TaaPersistentData
  class TaaPersistentData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::TaaPersistentData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::TaaPersistentData*, "UnityEngine.Rendering.Universal", "TaaPersistentData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.TaaPersistentData
  // [TokenAttribute] Offset: FFFFFFFF
  class TaaPersistentData : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.RenderTextureDescriptor m_RtDesc
    // Size: 0x34
    // Offset: 0x10
    ::UnityEngine::RenderTextureDescriptor m_RtDesc;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTextureDescriptor) == 0x34);
    // Padding between fields: m_RtDesc and: m_AccumulationTexture
    char __padding0[0x4] = {};
    // private UnityEngine.Rendering.RTHandle m_AccumulationTexture
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Rendering::RTHandle* m_AccumulationTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_AccumulationTexture2
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Rendering::RTHandle* m_AccumulationTexture2;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private System.Int32 m_LastAccumUpdateFrameIndex
    // Size: 0x4
    // Offset: 0x58
    int m_LastAccumUpdateFrameIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_LastAccumUpdateFrameIndex2
    // Size: 0x4
    // Offset: 0x5C
    int m_LastAccumUpdateFrameIndex2;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private UnityEngine.Experimental.Rendering.GraphicsFormat[] formatList
    static ::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat> _get_formatList();
    // Set static field: static private UnityEngine.Experimental.Rendering.GraphicsFormat[] formatList
    static void _set_formatList(::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat> value);
    // Get instance field reference: private UnityEngine.RenderTextureDescriptor m_RtDesc
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTextureDescriptor& dyn_m_RtDesc();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_AccumulationTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_AccumulationTexture();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_AccumulationTexture2
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_AccumulationTexture2();
    // Get instance field reference: private System.Int32 m_LastAccumUpdateFrameIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_LastAccumUpdateFrameIndex();
    // Get instance field reference: private System.Int32 m_LastAccumUpdateFrameIndex2
    [[deprecated("Use field access instead!")]] int& dyn_m_LastAccumUpdateFrameIndex2();
    // public UnityEngine.RenderTextureDescriptor get_rtd()
    // Offset: 0x52DE644
    ::UnityEngine::RenderTextureDescriptor get_rtd();
    // public UnityEngine.Rendering.RTHandle accumulationTexture(System.Int32 index)
    // Offset: 0x52DE660
    ::UnityEngine::Rendering::RTHandle* accumulationTexture(int index);
    // public System.Int32 GetLastAccumFrameIndex(System.Int32 index)
    // Offset: 0x52DE678
    int GetLastAccumFrameIndex(int index);
    // public System.Void SetLastAccumFrameIndex(System.Int32 index, System.Int32 value)
    // Offset: 0x52DE690
    void SetLastAccumFrameIndex(int index, int value);
    // public System.Void .ctor()
    // Offset: 0x52DE6A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TaaPersistentData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::TaaPersistentData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TaaPersistentData*, creationType>()));
    }
    // public System.Void Init(System.Int32 sizeX, System.Int32 sizeY, System.Int32 volumeDepth, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.VRTextureUsage vrUsage, UnityEngine.Rendering.TextureDimension texDim)
    // Offset: 0x52DE6AC
    void Init(int sizeX, int sizeY, int volumeDepth, ::UnityEngine::Experimental::Rendering::GraphicsFormat format, ::UnityEngine::VRTextureUsage vrUsage, ::UnityEngine::Rendering::TextureDimension texDim);
    // public System.Boolean AllocateTargets(System.Boolean xrMultipassEnabled)
    // Offset: 0x52DE944
    bool AllocateTargets(bool xrMultipassEnabled);
    // public System.Void DeallocateTargets()
    // Offset: 0x52DE8DC
    void DeallocateTargets();
    // static private System.Void .cctor()
    // Offset: 0x52DEA84
    static void _cctor();
    // static UnityEngine.Experimental.Rendering.GraphicsFormat <Init>g__CheckFormat|12_0(UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.FormatUsage usage)
    // Offset: 0x52DE860
    static ::UnityEngine::Experimental::Rendering::GraphicsFormat $Init$g__CheckFormat_12_0(::UnityEngine::Experimental::Rendering::GraphicsFormat format, ::UnityEngine::Experimental::Rendering::FormatUsage usage);
    // static UnityEngine.Experimental.Rendering.GraphicsFormat <Init>g__FindFormat|12_1(UnityEngine.Experimental.Rendering.FormatUsage usage)
    // Offset: 0x52DEB24
    static ::UnityEngine::Experimental::Rendering::GraphicsFormat $Init$g__FindFormat_12_1(::UnityEngine::Experimental::Rendering::FormatUsage usage);
  }; // UnityEngine.Rendering.Universal.TaaPersistentData
  #pragma pack(pop)
  static check_size<sizeof(TaaPersistentData), 92 + sizeof(int)> __UnityEngine_Rendering_Universal_TaaPersistentDataSizeCheck;
  static_assert(sizeof(TaaPersistentData) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TaaPersistentData::get_rtd
// Il2CppName: get_rtd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTextureDescriptor (UnityEngine::Rendering::Universal::TaaPersistentData::*)()>(&UnityEngine::Rendering::Universal::TaaPersistentData::get_rtd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TaaPersistentData*), "get_rtd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TaaPersistentData::accumulationTexture
// Il2CppName: accumulationTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::TaaPersistentData::*)(int)>(&UnityEngine::Rendering::Universal::TaaPersistentData::accumulationTexture)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TaaPersistentData*), "accumulationTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TaaPersistentData::GetLastAccumFrameIndex
// Il2CppName: GetLastAccumFrameIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::TaaPersistentData::*)(int)>(&UnityEngine::Rendering::Universal::TaaPersistentData::GetLastAccumFrameIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TaaPersistentData*), "GetLastAccumFrameIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TaaPersistentData::SetLastAccumFrameIndex
// Il2CppName: SetLastAccumFrameIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::TaaPersistentData::*)(int, int)>(&UnityEngine::Rendering::Universal::TaaPersistentData::SetLastAccumFrameIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TaaPersistentData*), "SetLastAccumFrameIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TaaPersistentData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TaaPersistentData::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::TaaPersistentData::*)(int, int, int, ::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::VRTextureUsage, ::UnityEngine::Rendering::TextureDimension)>(&UnityEngine::Rendering::Universal::TaaPersistentData::Init)> {
  static const MethodInfo* get() {
    static auto* sizeX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sizeY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* volumeDepth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* vrUsage = &::il2cpp_utils::GetClassFromName("UnityEngine", "VRTextureUsage")->byval_arg;
    static auto* texDim = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "TextureDimension")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TaaPersistentData*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sizeX, sizeY, volumeDepth, format, vrUsage, texDim});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TaaPersistentData::AllocateTargets
// Il2CppName: AllocateTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::TaaPersistentData::*)(bool)>(&UnityEngine::Rendering::Universal::TaaPersistentData::AllocateTargets)> {
  static const MethodInfo* get() {
    static auto* xrMultipassEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TaaPersistentData*), "AllocateTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xrMultipassEnabled});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TaaPersistentData::DeallocateTargets
// Il2CppName: DeallocateTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::TaaPersistentData::*)()>(&UnityEngine::Rendering::Universal::TaaPersistentData::DeallocateTargets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TaaPersistentData*), "DeallocateTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TaaPersistentData::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::TaaPersistentData::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TaaPersistentData*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TaaPersistentData::$Init$g__CheckFormat_12_0
// Il2CppName: <Init>g__CheckFormat|12_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::GraphicsFormat (*)(::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::Experimental::Rendering::FormatUsage)>(&UnityEngine::Rendering::Universal::TaaPersistentData::$Init$g__CheckFormat_12_0)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* usage = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "FormatUsage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TaaPersistentData*), "<Init>g__CheckFormat|12_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, usage});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TaaPersistentData::$Init$g__FindFormat_12_1
// Il2CppName: <Init>g__FindFormat|12_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::GraphicsFormat (*)(::UnityEngine::Experimental::Rendering::FormatUsage)>(&UnityEngine::Rendering::Universal::TaaPersistentData::$Init$g__FindFormat_12_1)> {
  static const MethodInfo* get() {
    static auto* usage = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "FormatUsage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TaaPersistentData*), "<Init>g__FindFormat|12_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{usage});
  }
};
