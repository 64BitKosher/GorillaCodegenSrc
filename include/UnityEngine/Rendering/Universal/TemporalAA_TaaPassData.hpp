// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.TemporalAA
#include "UnityEngine/Rendering/Universal/TemporalAA.hpp"
// Including type: UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle
#include "UnityEngine/Experimental/Rendering/RenderGraphModule/TextureHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::TemporalAA::TaaPassData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::TemporalAA::TaaPassData*, "UnityEngine.Rendering.Universal", "TemporalAA/TaaPassData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.TemporalAA/TaaPassData
  // [TokenAttribute] Offset: FFFFFFFF
  class TemporalAA::TaaPassData : public ::Il2CppObject {
    public:
    public:
    // UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle dstTex
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle dstTex;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle) == 0x8);
    // UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle srcColorTex
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle srcColorTex;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle) == 0x8);
    // UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle srcDepthTex
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle srcDepthTex;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle) == 0x8);
    // UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle srcMotionVectorTex
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle srcMotionVectorTex;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle) == 0x8);
    // UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle srcTaaAccumTex
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle srcTaaAccumTex;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle) == 0x8);
    // UnityEngine.Material material
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // System.Int32 passIndex
    // Size: 0x4
    // Offset: 0x40
    int passIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Single taaFrameInfluence
    // Size: 0x4
    // Offset: 0x44
    float taaFrameInfluence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single taaVarianceClampScale
    // Size: 0x4
    // Offset: 0x48
    float taaVarianceClampScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: taaVarianceClampScale and: taaFilterWeights
    char __padding8[0x4] = {};
    // System.Single[] taaFilterWeights
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<float> taaFilterWeights;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Get instance field reference: UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle dstTex
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle& dyn_dstTex();
    // Get instance field reference: UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle srcColorTex
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle& dyn_srcColorTex();
    // Get instance field reference: UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle srcDepthTex
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle& dyn_srcDepthTex();
    // Get instance field reference: UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle srcMotionVectorTex
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle& dyn_srcMotionVectorTex();
    // Get instance field reference: UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle srcTaaAccumTex
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle& dyn_srcTaaAccumTex();
    // Get instance field reference: UnityEngine.Material material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
    // Get instance field reference: System.Int32 passIndex
    [[deprecated("Use field access instead!")]] int& dyn_passIndex();
    // Get instance field reference: System.Single taaFrameInfluence
    [[deprecated("Use field access instead!")]] float& dyn_taaFrameInfluence();
    // Get instance field reference: System.Single taaVarianceClampScale
    [[deprecated("Use field access instead!")]] float& dyn_taaVarianceClampScale();
    // Get instance field reference: System.Single[] taaFilterWeights
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_taaFilterWeights();
    // public System.Void .ctor()
    // Offset: 0x52DFDDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TemporalAA::TaaPassData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::TemporalAA::TaaPassData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TemporalAA::TaaPassData*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.TemporalAA/TaaPassData
  #pragma pack(pop)
  static check_size<sizeof(TemporalAA::TaaPassData), 80 + sizeof(::ArrayW<float>)> __UnityEngine_Rendering_Universal_TemporalAA_TaaPassDataSizeCheck;
  static_assert(sizeof(TemporalAA::TaaPassData) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TemporalAA::TaaPassData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
