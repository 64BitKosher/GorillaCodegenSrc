// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderPass
#include "UnityEngine/Rendering/Universal/ScriptableRenderPass.hpp"
// Including type: UnityEngine.Rendering.HDROutputUtils
#include "UnityEngine/Rendering/HDROutputUtils.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal::Internal
namespace UnityEngine::Rendering::Universal::Internal {
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: RenderTextureDescriptor
  struct RenderTextureDescriptor;
  // Forward declaring type: Vector4
  struct Vector4;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: RenderTargetHandle
  struct RenderTargetHandle;
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraph
  class RenderGraph;
  // Forward declaring type: TextureHandle
  struct TextureHandle;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // Forward declaring type: FinalBlitPass
  class FinalBlitPass;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::Internal::FinalBlitPass);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Internal::FinalBlitPass*, "UnityEngine.Rendering.Universal.Internal", "FinalBlitPass");
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.Internal.FinalBlitPass
  // [TokenAttribute] Offset: FFFFFFFF
  class FinalBlitPass : public ::UnityEngine::Rendering::Universal::ScriptableRenderPass {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::FinalBlitPass::PassData
    class PassData;
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::FinalBlitPass::$$c
    class $$c;
    public:
    // private UnityEngine.Rendering.RTHandle m_Source
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::Rendering::RTHandle* m_Source;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Material m_BlitMaterial
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Material* m_BlitMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material m_BlitHDRMaterial
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::Material* m_BlitHDRMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_CameraTargetHandle
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Rendering::RTHandle* m_CameraTargetHandle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_Source
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_Source();
    // Get instance field reference: private UnityEngine.Material m_BlitMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_BlitMaterial();
    // Get instance field reference: private UnityEngine.Material m_BlitHDRMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_BlitHDRMaterial();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_CameraTargetHandle
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_CameraTargetHandle();
    // public System.Void .ctor(UnityEngine.Rendering.Universal.RenderPassEvent evt, UnityEngine.Material blitMaterial, UnityEngine.Material blitHDRMaterial)
    // Offset: 0x5316668
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FinalBlitPass* New_ctor(::UnityEngine::Rendering::Universal::RenderPassEvent evt, ::UnityEngine::Material* blitMaterial, ::UnityEngine::Material* blitHDRMaterial) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Internal::FinalBlitPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FinalBlitPass*, creationType>(evt, blitMaterial, blitHDRMaterial)));
    }
    // public System.Void Dispose()
    // Offset: 0x5316758
    void Dispose();
    // public System.Void Setup(UnityEngine.RenderTextureDescriptor baseDescriptor, UnityEngine.Rendering.Universal.RenderTargetHandle colorHandle)
    // Offset: 0x531676C
    void Setup(::UnityEngine::RenderTextureDescriptor baseDescriptor, ::UnityEngine::Rendering::Universal::RenderTargetHandle colorHandle);
    // public System.Void Setup(UnityEngine.RenderTextureDescriptor baseDescriptor, UnityEngine.Rendering.RTHandle colorHandle)
    // Offset: 0x531697C
    void Setup(::UnityEngine::RenderTextureDescriptor baseDescriptor, ::UnityEngine::Rendering::RTHandle* colorHandle);
    // static private System.Void SetupHDROutput(UnityEngine.Material material, UnityEngine.Rendering.HDROutputUtils/Operation hdrOperation, UnityEngine.Vector4 hdrOutputParameters)
    // Offset: 0x5316988
    static void SetupHDROutput(::UnityEngine::Material* material, ::UnityEngine::Rendering::HDROutputUtils::Operation hdrOperation, ::UnityEngine::Vector4 hdrOutputParameters);
    // static private System.Void ExecutePass(ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Material blitMaterial, UnityEngine.Rendering.RTHandle cameraTarget, UnityEngine.Rendering.RTHandle source)
    // Offset: 0x531708C
    static void ExecutePass(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::UnityEngine::Material* blitMaterial, ::UnityEngine::Rendering::RTHandle* cameraTarget, ::UnityEngine::Rendering::RTHandle* source);
    // System.Void Render(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle src, UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle dest, UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle overlayUITexture)
    // Offset: 0x53171B8
    void Render(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle src, ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle dest, ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle overlayUITexture);
    // public override System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5316A7C
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void Execute(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
  }; // UnityEngine.Rendering.Universal.Internal.FinalBlitPass
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::FinalBlitPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::FinalBlitPass::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::FinalBlitPass::*)()>(&UnityEngine::Rendering::Universal::Internal::FinalBlitPass::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::FinalBlitPass*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::FinalBlitPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::FinalBlitPass::*)(::UnityEngine::RenderTextureDescriptor, ::UnityEngine::Rendering::Universal::RenderTargetHandle)>(&UnityEngine::Rendering::Universal::Internal::FinalBlitPass::Setup)> {
  static const MethodInfo* get() {
    static auto* baseDescriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->byval_arg;
    static auto* colorHandle = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderTargetHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::FinalBlitPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseDescriptor, colorHandle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::FinalBlitPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::FinalBlitPass::*)(::UnityEngine::RenderTextureDescriptor, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::Internal::FinalBlitPass::Setup)> {
  static const MethodInfo* get() {
    static auto* baseDescriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->byval_arg;
    static auto* colorHandle = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::FinalBlitPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseDescriptor, colorHandle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::FinalBlitPass::SetupHDROutput
// Il2CppName: SetupHDROutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Material*, ::UnityEngine::Rendering::HDROutputUtils::Operation, ::UnityEngine::Vector4)>(&UnityEngine::Rendering::Universal::Internal::FinalBlitPass::SetupHDROutput)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* hdrOperation = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "HDROutputUtils/Operation")->byval_arg;
    static auto* hdrOutputParameters = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::FinalBlitPass*), "SetupHDROutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material, hdrOperation, hdrOutputParameters});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::FinalBlitPass::ExecutePass
// Il2CppName: ExecutePass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Material*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::Internal::FinalBlitPass::ExecutePass)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* blitMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* cameraTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::FinalBlitPass*), "ExecutePass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData, blitMaterial, cameraTarget, source});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::FinalBlitPass::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::FinalBlitPass::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle, ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle, ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle)>(&UnityEngine::Rendering::Universal::Internal::FinalBlitPass::Render)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->byval_arg;
    static auto* overlayUITexture = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::FinalBlitPass*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, renderingData, src, dest, overlayUITexture});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::FinalBlitPass::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::FinalBlitPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::FinalBlitPass::Execute)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::FinalBlitPass*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
