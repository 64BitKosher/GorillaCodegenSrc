// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.RenderTextureDescriptor
#include "UnityEngine/RenderTextureDescriptor.hpp"
// Including type: UnityEngine.FilterMode
#include "UnityEngine/FilterMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal::Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // Skipping declaration: SwapBuffer because it is already included!
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // Forward declaring type: RenderTargetBufferSystem
  class RenderTargetBufferSystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*, "UnityEngine.Rendering.Universal.Internal", "RenderTargetBufferSystem");
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // Size: 0x55
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.Internal.RenderTargetBufferSystem
  // [TokenAttribute] Offset: FFFFFFFF
  class RenderTargetBufferSystem : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::SwapBuffer
    struct SwapBuffer;
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.Universal.Internal.RenderTargetBufferSystem/SwapBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    struct SwapBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Rendering.RTHandle rtMSAA
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Rendering::RTHandle* rtMSAA;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
      // public UnityEngine.Rendering.RTHandle rtResolve
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::Rendering::RTHandle* rtResolve;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
      // public System.String name
      // Size: 0x8
      // Offset: 0x10
      ::StringW name;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.Int32 msaa
      // Size: 0x4
      // Offset: 0x18
      int msaa;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SwapBuffer
      constexpr SwapBuffer(::UnityEngine::Rendering::RTHandle* rtMSAA_ = {}, ::UnityEngine::Rendering::RTHandle* rtResolve_ = {}, ::StringW name_ = {}, int msaa_ = {}) noexcept : rtMSAA{rtMSAA_}, rtResolve{rtResolve_}, name{name_}, msaa{msaa_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Rendering.RTHandle rtMSAA
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_rtMSAA();
      // Get instance field reference: public UnityEngine.Rendering.RTHandle rtResolve
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_rtResolve();
      // Get instance field reference: public System.String name
      [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
      // Get instance field reference: public System.Int32 msaa
      [[deprecated("Use field access instead!")]] int& dyn_msaa();
    }; // UnityEngine.Rendering.Universal.Internal.RenderTargetBufferSystem/SwapBuffer
    #pragma pack(pop)
    static check_size<sizeof(RenderTargetBufferSystem::SwapBuffer), 24 + sizeof(int)> __UnityEngine_Rendering_Universal_Internal_RenderTargetBufferSystem_SwapBufferSizeCheck;
    static_assert(sizeof(RenderTargetBufferSystem::SwapBuffer) == 0x1C);
    public:
    // private UnityEngine.Rendering.Universal.Internal.RenderTargetBufferSystem/SwapBuffer m_A
    // Size: 0x1C
    // Offset: 0x10
    ::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::SwapBuffer m_A;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::SwapBuffer) == 0x1C);
    // Padding between fields: m_A and: m_B
    char __padding0[0x4] = {};
    // private UnityEngine.Rendering.Universal.Internal.RenderTargetBufferSystem/SwapBuffer m_B
    // Size: 0x1C
    // Offset: 0x30
    ::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::SwapBuffer m_B;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::SwapBuffer) == 0x1C);
    // Padding between fields: m_B and: m_FilterMode
    char __padding1[0x4] = {};
    // private UnityEngine.FilterMode m_FilterMode
    // Size: 0x4
    // Offset: 0x50
    ::UnityEngine::FilterMode m_FilterMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::FilterMode) == 0x4);
    // private System.Boolean m_AllowMSAA
    // Size: 0x1
    // Offset: 0x54
    bool m_AllowMSAA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private System.Boolean m_AisBackBuffer
    static bool _get_m_AisBackBuffer();
    // Set static field: static private System.Boolean m_AisBackBuffer
    static void _set_m_AisBackBuffer(bool value);
    // Get static field: static private UnityEngine.RenderTextureDescriptor m_Desc
    static ::UnityEngine::RenderTextureDescriptor _get_m_Desc();
    // Set static field: static private UnityEngine.RenderTextureDescriptor m_Desc
    static void _set_m_Desc(::UnityEngine::RenderTextureDescriptor value);
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.RenderTargetBufferSystem/SwapBuffer m_A
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::SwapBuffer& dyn_m_A();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.RenderTargetBufferSystem/SwapBuffer m_B
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::SwapBuffer& dyn_m_B();
    // Get instance field reference: private UnityEngine.FilterMode m_FilterMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::FilterMode& dyn_m_FilterMode();
    // Get instance field reference: private System.Boolean m_AllowMSAA
    [[deprecated("Use field access instead!")]] bool& dyn_m_AllowMSAA();
    // private UnityEngine.Rendering.Universal.Internal.RenderTargetBufferSystem/SwapBuffer get_backBuffer()
    // Offset: 0x531B23C
    ::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::SwapBuffer get_backBuffer();
    // private UnityEngine.Rendering.Universal.Internal.RenderTargetBufferSystem/SwapBuffer get_frontBuffer()
    // Offset: 0x531B2A8
    ::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::SwapBuffer get_frontBuffer();
    // public System.Void .ctor(System.String name)
    // Offset: 0x531B314
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RenderTargetBufferSystem* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RenderTargetBufferSystem*, creationType>(name)));
    }
    // public System.Void Dispose()
    // Offset: 0x531B3C4
    void Dispose();
    // public UnityEngine.Rendering.RTHandle PeekBackBuffer()
    // Offset: 0x531B418
    ::UnityEngine::Rendering::RTHandle* PeekBackBuffer();
    // public UnityEngine.Rendering.RTHandle GetBackBuffer(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x531B460
    ::UnityEngine::Rendering::RTHandle* GetBackBuffer(::UnityEngine::Rendering::CommandBuffer* cmd);
    // public UnityEngine.Rendering.RTHandle GetFrontBuffer(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x531B6D0
    ::UnityEngine::Rendering::RTHandle* GetFrontBuffer(::UnityEngine::Rendering::CommandBuffer* cmd);
    // public System.Void Swap()
    // Offset: 0x531B75C
    void Swap();
    // private System.Void ReAllocate(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x531B478
    void ReAllocate(::UnityEngine::Rendering::CommandBuffer* cmd);
    // public System.Void Clear()
    // Offset: 0x531B7BC
    void Clear();
    // public System.Void SetCameraSettings(UnityEngine.RenderTextureDescriptor desc, UnityEngine.FilterMode filterMode)
    // Offset: 0x531B838
    void SetCameraSettings(::UnityEngine::RenderTextureDescriptor desc, ::UnityEngine::FilterMode filterMode);
    // public UnityEngine.Rendering.RTHandle GetBufferA()
    // Offset: 0x531B9A4
    ::UnityEngine::Rendering::RTHandle* GetBufferA();
    // public System.Void EnableMSAA(System.Boolean enable)
    // Offset: 0x531B928
    void EnableMSAA(bool enable);
    // static private System.Void .cctor()
    // Offset: 0x531B9CC
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.Internal.RenderTargetBufferSystem
  #pragma pack(pop)
  static check_size<sizeof(RenderTargetBufferSystem), 84 + sizeof(bool)> __UnityEngine_Rendering_Universal_Internal_RenderTargetBufferSystemSizeCheck;
  static_assert(sizeof(RenderTargetBufferSystem) == 0x55);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::SwapBuffer, "UnityEngine.Rendering.Universal.Internal", "RenderTargetBufferSystem/SwapBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::get_backBuffer
// Il2CppName: get_backBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::SwapBuffer (UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::*)()>(&UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::get_backBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*), "get_backBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::get_frontBuffer
// Il2CppName: get_frontBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::SwapBuffer (UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::*)()>(&UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::get_frontBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*), "get_frontBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::*)()>(&UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::PeekBackBuffer
// Il2CppName: PeekBackBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::*)()>(&UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::PeekBackBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*), "PeekBackBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::GetBackBuffer
// Il2CppName: GetBackBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::GetBackBuffer)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*), "GetBackBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::GetFrontBuffer
// Il2CppName: GetFrontBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::GetFrontBuffer)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*), "GetFrontBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::Swap
// Il2CppName: Swap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::*)()>(&UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::Swap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*), "Swap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::ReAllocate
// Il2CppName: ReAllocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::ReAllocate)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*), "ReAllocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::*)()>(&UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::SetCameraSettings
// Il2CppName: SetCameraSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::*)(::UnityEngine::RenderTextureDescriptor, ::UnityEngine::FilterMode)>(&UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::SetCameraSettings)> {
  static const MethodInfo* get() {
    static auto* desc = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->byval_arg;
    static auto* filterMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*), "SetCameraSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desc, filterMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::GetBufferA
// Il2CppName: GetBufferA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::*)()>(&UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::GetBufferA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*), "GetBufferA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::EnableMSAA
// Il2CppName: EnableMSAA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::*)(bool)>(&UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::EnableMSAA)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*), "EnableMSAA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::RenderTargetBufferSystem*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
