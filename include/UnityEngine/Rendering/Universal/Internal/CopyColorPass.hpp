// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderPass
#include "UnityEngine/Rendering/Universal/ScriptableRenderPass.hpp"
// Including type: UnityEngine.Rendering.Universal.Downsampling
#include "UnityEngine/Rendering/Universal/Downsampling.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal::Internal
namespace UnityEngine::Rendering::Universal::Internal {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: RenderTextureDescriptor
  struct RenderTextureDescriptor;
  // Forward declaring type: FilterMode
  struct FilterMode;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
  // Skipping declaration: RenderTargetIdentifier because it is already included!
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: RenderTargetHandle
  struct RenderTargetHandle;
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: TextureHandle
  struct TextureHandle;
  // Forward declaring type: RenderGraph
  class RenderGraph;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // Forward declaring type: CopyColorPass
  class CopyColorPass;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::Internal::CopyColorPass);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Internal::CopyColorPass*, "UnityEngine.Rendering.Universal.Internal", "CopyColorPass");
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.Internal.CopyColorPass
  // [TokenAttribute] Offset: FFFFFFFF
  class CopyColorPass : public ::UnityEngine::Rendering::Universal::ScriptableRenderPass {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::CopyColorPass::PassData
    class PassData;
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::CopyColorPass::$$c
    class $$c;
    public:
    // private System.Int32 m_SampleOffsetShaderHandle
    // Size: 0x4
    // Offset: 0xE0
    int m_SampleOffsetShaderHandle;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Material m_SamplingMaterial
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Material* m_SamplingMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Rendering.Universal.Downsampling m_DownsamplingMethod
    // Size: 0x4
    // Offset: 0xF0
    ::UnityEngine::Rendering::Universal::Downsampling m_DownsamplingMethod;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Downsampling) == 0x4);
    // private UnityEngine.Material m_CopyColorMaterial
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Material* m_CopyColorMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Rendering.RTHandle <source>k__BackingField
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::Rendering::RTHandle* source;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle <destination>k__BackingField
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::Rendering::RTHandle* destination;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private System.Int32 <destinationID>k__BackingField
    // Size: 0x4
    // Offset: 0x110
    int destinationID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.Universal.Internal.CopyColorPass/PassData m_PassData
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Rendering::Universal::Internal::CopyColorPass::PassData* m_PassData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::CopyColorPass::PassData*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 m_SampleOffsetShaderHandle
    [[deprecated("Use field access instead!")]] int& dyn_m_SampleOffsetShaderHandle();
    // Get instance field reference: private UnityEngine.Material m_SamplingMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_SamplingMaterial();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Downsampling m_DownsamplingMethod
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Downsampling& dyn_m_DownsamplingMethod();
    // Get instance field reference: private UnityEngine.Material m_CopyColorMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_CopyColorMaterial();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle <source>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_$source$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle <destination>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_$destination$k__BackingField();
    // Get instance field reference: private System.Int32 <destinationID>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$destinationID$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.CopyColorPass/PassData m_PassData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::CopyColorPass::PassData*& dyn_m_PassData();
    // private UnityEngine.Rendering.RTHandle get_source()
    // Offset: 0x531056C
    ::UnityEngine::Rendering::RTHandle* get_source();
    // private System.Void set_source(UnityEngine.Rendering.RTHandle value)
    // Offset: 0x5310574
    void set_source(::UnityEngine::Rendering::RTHandle* value);
    // private UnityEngine.Rendering.RTHandle get_destination()
    // Offset: 0x5310584
    ::UnityEngine::Rendering::RTHandle* get_destination();
    // private System.Void set_destination(UnityEngine.Rendering.RTHandle value)
    // Offset: 0x531058C
    void set_destination(::UnityEngine::Rendering::RTHandle* value);
    // private System.Int32 get_destinationID()
    // Offset: 0x531059C
    int get_destinationID();
    // private System.Void set_destinationID(System.Int32 value)
    // Offset: 0x53105A4
    void set_destinationID(int value);
    // public System.Void .ctor(UnityEngine.Rendering.Universal.RenderPassEvent evt, UnityEngine.Material samplingMaterial, UnityEngine.Material copyColorMaterial)
    // Offset: 0x53105AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CopyColorPass* New_ctor(::UnityEngine::Rendering::Universal::RenderPassEvent evt, ::UnityEngine::Material* samplingMaterial, ::UnityEngine::Material* copyColorMaterial) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Internal::CopyColorPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CopyColorPass*, creationType>(evt, samplingMaterial, copyColorMaterial)));
    }
    // static public System.Void ConfigureDescriptor(UnityEngine.Rendering.Universal.Downsampling downsamplingMethod, ref UnityEngine.RenderTextureDescriptor descriptor, out UnityEngine.FilterMode filterMode)
    // Offset: 0x531070C
    static void ConfigureDescriptor(::UnityEngine::Rendering::Universal::Downsampling downsamplingMethod, ByRef<::UnityEngine::RenderTextureDescriptor> descriptor, ByRef<::UnityEngine::FilterMode> filterMode);
    // public System.Void Setup(UnityEngine.Rendering.RenderTargetIdentifier source, UnityEngine.Rendering.Universal.RenderTargetHandle destination, UnityEngine.Rendering.Universal.Downsampling downsampling)
    // Offset: 0x5310778
    void Setup(::UnityEngine::Rendering::RenderTargetIdentifier source, ::UnityEngine::Rendering::Universal::RenderTargetHandle destination, ::UnityEngine::Rendering::Universal::Downsampling downsampling);
    // public System.Void Setup(UnityEngine.Rendering.RTHandle source, UnityEngine.Rendering.RTHandle destination, UnityEngine.Rendering.Universal.Downsampling downsampling)
    // Offset: 0x5310874
    void Setup(::UnityEngine::Rendering::RTHandle* source, ::UnityEngine::Rendering::RTHandle* destination, ::UnityEngine::Rendering::Universal::Downsampling downsampling);
    // static private System.Void ExecutePass(UnityEngine.Rendering.Universal.Internal.CopyColorPass/PassData passData, UnityEngine.Rendering.RTHandle source, UnityEngine.Rendering.RTHandle destination, ref UnityEngine.Rendering.CommandBuffer cmd, System.Boolean useDrawProceduralBlit, System.Boolean disableFoveatedRenderingForPass)
    // Offset: 0x5310CAC
    static void ExecutePass(::UnityEngine::Rendering::Universal::Internal::CopyColorPass::PassData* passData, ::UnityEngine::Rendering::RTHandle* source, ::UnityEngine::Rendering::RTHandle* destination, ByRef<::UnityEngine::Rendering::CommandBuffer*> cmd, bool useDrawProceduralBlit, bool disableFoveatedRenderingForPass);
    // UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle Render(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, out UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle destination, in UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle source, UnityEngine.Rendering.Universal.Downsampling downsampling, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x53110D8
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle Render(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> destination, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> source, ::UnityEngine::Rendering::Universal::Downsampling downsampling, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public override System.Void OnCameraSetup(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x53108B4
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::OnCameraSetup(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void OnCameraSetup(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public override System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5310AE4
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void Execute(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public override System.Void OnCameraCleanup(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x5311718
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::OnCameraCleanup(UnityEngine.Rendering.CommandBuffer cmd)
    void OnCameraCleanup(::UnityEngine::Rendering::CommandBuffer* cmd);
  }; // UnityEngine.Rendering.Universal.Internal.CopyColorPass
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::CopyColorPass::get_source
// Il2CppName: get_source
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::Internal::CopyColorPass::*)()>(&UnityEngine::Rendering::Universal::Internal::CopyColorPass::get_source)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::CopyColorPass*), "get_source", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::CopyColorPass::set_source
// Il2CppName: set_source
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::CopyColorPass::*)(::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::Internal::CopyColorPass::set_source)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::CopyColorPass*), "set_source", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::CopyColorPass::get_destination
// Il2CppName: get_destination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::Internal::CopyColorPass::*)()>(&UnityEngine::Rendering::Universal::Internal::CopyColorPass::get_destination)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::CopyColorPass*), "get_destination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::CopyColorPass::set_destination
// Il2CppName: set_destination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::CopyColorPass::*)(::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::Internal::CopyColorPass::set_destination)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::CopyColorPass*), "set_destination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::CopyColorPass::get_destinationID
// Il2CppName: get_destinationID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::CopyColorPass::*)()>(&UnityEngine::Rendering::Universal::Internal::CopyColorPass::get_destinationID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::CopyColorPass*), "get_destinationID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::CopyColorPass::set_destinationID
// Il2CppName: set_destinationID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::CopyColorPass::*)(int)>(&UnityEngine::Rendering::Universal::Internal::CopyColorPass::set_destinationID)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::CopyColorPass*), "set_destinationID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::CopyColorPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::CopyColorPass::ConfigureDescriptor
// Il2CppName: ConfigureDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::Downsampling, ByRef<::UnityEngine::RenderTextureDescriptor>, ByRef<::UnityEngine::FilterMode>)>(&UnityEngine::Rendering::Universal::Internal::CopyColorPass::ConfigureDescriptor)> {
  static const MethodInfo* get() {
    static auto* downsamplingMethod = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Downsampling")->byval_arg;
    static auto* descriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->this_arg;
    static auto* filterMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::CopyColorPass*), "ConfigureDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{downsamplingMethod, descriptor, filterMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::CopyColorPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::CopyColorPass::*)(::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::Universal::RenderTargetHandle, ::UnityEngine::Rendering::Universal::Downsampling)>(&UnityEngine::Rendering::Universal::Internal::CopyColorPass::Setup)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderTargetHandle")->byval_arg;
    static auto* downsampling = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Downsampling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::CopyColorPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destination, downsampling});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::CopyColorPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::CopyColorPass::*)(::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::Universal::Downsampling)>(&UnityEngine::Rendering::Universal::Internal::CopyColorPass::Setup)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* downsampling = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Downsampling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::CopyColorPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destination, downsampling});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::CopyColorPass::ExecutePass
// Il2CppName: ExecutePass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::Internal::CopyColorPass::PassData*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*, ByRef<::UnityEngine::Rendering::CommandBuffer*>, bool, bool)>(&UnityEngine::Rendering::Universal::Internal::CopyColorPass::ExecutePass)> {
  static const MethodInfo* get() {
    static auto* passData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.Internal", "CopyColorPass/PassData")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->this_arg;
    static auto* useDrawProceduralBlit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* disableFoveatedRenderingForPass = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::CopyColorPass*), "ExecutePass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passData, source, destination, cmd, useDrawProceduralBlit, disableFoveatedRenderingForPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::CopyColorPass::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle (UnityEngine::Rendering::Universal::Internal::CopyColorPass::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>, ::UnityEngine::Rendering::Universal::Downsampling, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::CopyColorPass::Render)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->this_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->this_arg;
    static auto* downsampling = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "Downsampling")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::CopyColorPass*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, destination, source, downsampling, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::CopyColorPass::OnCameraSetup
// Il2CppName: OnCameraSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::CopyColorPass::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::CopyColorPass::OnCameraSetup)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::CopyColorPass*), "OnCameraSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::CopyColorPass::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::CopyColorPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::CopyColorPass::Execute)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::CopyColorPass*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::CopyColorPass::OnCameraCleanup
// Il2CppName: OnCameraCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::CopyColorPass::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::Internal::CopyColorPass::OnCameraCleanup)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::CopyColorPass*), "OnCameraCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
