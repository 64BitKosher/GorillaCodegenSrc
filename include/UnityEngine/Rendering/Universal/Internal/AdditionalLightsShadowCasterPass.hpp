// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderPass
#include "UnityEngine/Rendering/Universal/ScriptableRenderPass.hpp"
// Including type: UnityEngine.Rendering.Universal.ShadowSliceData
#include "UnityEngine/Rendering/Universal/ShadowSliceData.hpp"
// Including type: UnityEngine.RectInt
#include "UnityEngine/RectInt.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal::Internal
namespace UnityEngine::Rendering::Universal::Internal {
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LightType
  struct LightType;
  // Forward declaring type: RenderTextureDescriptor
  struct RenderTextureDescriptor;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: RenderingData
  struct RenderingData;
  // Forward declaring type: LightData
  struct LightData;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: TextureHandle
  struct TextureHandle;
  // Forward declaring type: RenderGraph
  class RenderGraph;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // Forward declaring type: AdditionalLightsShadowCasterPass
  class AdditionalLightsShadowCasterPass;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*, "UnityEngine.Rendering.Universal.Internal", "AdditionalLightsShadowCasterPass");
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass
  // [TokenAttribute] Offset: FFFFFFFF
  class AdditionalLightsShadowCasterPass : public ::UnityEngine::Rendering::Universal::ScriptableRenderPass {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::AdditionalShadowsConstantBuffer
    class AdditionalShadowsConstantBuffer;
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ShadowResolutionRequest
    struct ShadowResolutionRequest;
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::PassData
    class PassData;
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::$$c
    class $$c;
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass/ShadowResolutionRequest
    // [TokenAttribute] Offset: FFFFFFFF
    struct ShadowResolutionRequest/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 visibleLightIndex
      // Size: 0x4
      // Offset: 0x0
      int visibleLightIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 perLightShadowSliceIndex
      // Size: 0x4
      // Offset: 0x4
      int perLightShadowSliceIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 requestedResolution
      // Size: 0x4
      // Offset: 0x8
      int requestedResolution;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Boolean softShadow
      // Size: 0x1
      // Offset: 0xC
      bool softShadow;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean pointLightShadow
      // Size: 0x1
      // Offset: 0xD
      bool pointLightShadow;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: pointLightShadow and: offsetX
      char __padding4[0x2] = {};
      // public System.Int32 offsetX
      // Size: 0x4
      // Offset: 0x10
      int offsetX;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 offsetY
      // Size: 0x4
      // Offset: 0x14
      int offsetY;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 allocatedResolution
      // Size: 0x4
      // Offset: 0x18
      int allocatedResolution;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ShadowResolutionRequest
      constexpr ShadowResolutionRequest(int visibleLightIndex_ = {}, int perLightShadowSliceIndex_ = {}, int requestedResolution_ = {}, bool softShadow_ = {}, bool pointLightShadow_ = {}, int offsetX_ = {}, int offsetY_ = {}, int allocatedResolution_ = {}) noexcept : visibleLightIndex{visibleLightIndex_}, perLightShadowSliceIndex{perLightShadowSliceIndex_}, requestedResolution{requestedResolution_}, softShadow{softShadow_}, pointLightShadow{pointLightShadow_}, offsetX{offsetX_}, offsetY{offsetY_}, allocatedResolution{allocatedResolution_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 visibleLightIndex
      [[deprecated("Use field access instead!")]] int& dyn_visibleLightIndex();
      // Get instance field reference: public System.Int32 perLightShadowSliceIndex
      [[deprecated("Use field access instead!")]] int& dyn_perLightShadowSliceIndex();
      // Get instance field reference: public System.Int32 requestedResolution
      [[deprecated("Use field access instead!")]] int& dyn_requestedResolution();
      // Get instance field reference: public System.Boolean softShadow
      [[deprecated("Use field access instead!")]] bool& dyn_softShadow();
      // Get instance field reference: public System.Boolean pointLightShadow
      [[deprecated("Use field access instead!")]] bool& dyn_pointLightShadow();
      // Get instance field reference: public System.Int32 offsetX
      [[deprecated("Use field access instead!")]] int& dyn_offsetX();
      // Get instance field reference: public System.Int32 offsetY
      [[deprecated("Use field access instead!")]] int& dyn_offsetY();
      // Get instance field reference: public System.Int32 allocatedResolution
      [[deprecated("Use field access instead!")]] int& dyn_allocatedResolution();
      // public System.Void .ctor(System.Int32 _visibleLightIndex, System.Int32 _perLightShadowSliceIndex, System.Int32 _requestedResolution, System.Boolean _softShadow, System.Boolean _pointLightShadow)
      // Offset: 0x530ACE0
      ShadowResolutionRequest(int _visibleLightIndex, int _perLightShadowSliceIndex, int _requestedResolution, bool _softShadow, bool _pointLightShadow);
    }; // UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass/ShadowResolutionRequest
    #pragma pack(pop)
    static check_size<sizeof(AdditionalLightsShadowCasterPass::ShadowResolutionRequest), 24 + sizeof(int)> __UnityEngine_Rendering_Universal_Internal_AdditionalLightsShadowCasterPass_ShadowResolutionRequestSizeCheck;
    static_assert(sizeof(AdditionalLightsShadowCasterPass::ShadowResolutionRequest) == 0x1C);
    public:
    // private System.Boolean m_UseStructuredBuffer
    // Size: 0x1
    // Offset: 0xE0
    bool m_UseStructuredBuffer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 m_AdditionalLightsShadowmapID
    // Size: 0x4
    // Offset: 0xE4
    int m_AdditionalLightsShadowmapID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.Rendering.RTHandle m_AdditionalLightsShadowmapHandle
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Rendering::RTHandle* m_AdditionalLightsShadowmapHandle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private System.Single m_MaxShadowDistanceSq
    // Size: 0x4
    // Offset: 0xF0
    float m_MaxShadowDistanceSq;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_CascadeBorder
    // Size: 0x4
    // Offset: 0xF4
    float m_CascadeBorder;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Rendering.Universal.ShadowSliceData[] m_AdditionalLightsShadowSlices
    // Size: 0x8
    // Offset: 0xF8
    ::ArrayW<::UnityEngine::Rendering::Universal::ShadowSliceData> m_AdditionalLightsShadowSlices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::Universal::ShadowSliceData>) == 0x8);
    // private System.Int32[] m_VisibleLightIndexToAdditionalLightIndex
    // Size: 0x8
    // Offset: 0x100
    ::ArrayW<int> m_VisibleLightIndexToAdditionalLightIndex;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32[] m_AdditionalLightIndexToVisibleLightIndex
    // Size: 0x8
    // Offset: 0x108
    ::ArrayW<int> m_AdditionalLightIndexToVisibleLightIndex;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> m_ShadowSliceToAdditionalLightIndex
    // Size: 0x8
    // Offset: 0x110
    ::System::Collections::Generic::List_1<int>* m_ShadowSliceToAdditionalLightIndex;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> m_GlobalShadowSliceIndexToPerLightShadowSliceIndex
    // Size: 0x8
    // Offset: 0x118
    ::System::Collections::Generic::List_1<int>* m_GlobalShadowSliceIndexToPerLightShadowSliceIndex;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private UnityEngine.Vector4[] m_AdditionalLightIndexToShadowParams
    // Size: 0x8
    // Offset: 0x120
    ::ArrayW<::UnityEngine::Vector4> m_AdditionalLightIndexToShadowParams;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private UnityEngine.Matrix4x4[] m_AdditionalLightShadowSliceIndexTo_WorldShadowMatrix
    // Size: 0x8
    // Offset: 0x128
    ::ArrayW<::UnityEngine::Matrix4x4> m_AdditionalLightShadowSliceIndexTo_WorldShadowMatrix;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass/ShadowResolutionRequest> m_ShadowResolutionRequests
    // Size: 0x8
    // Offset: 0x130
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ShadowResolutionRequest>* m_ShadowResolutionRequests;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ShadowResolutionRequest>*) == 0x8);
    // private System.Single[] m_VisibleLightIndexToCameraSquareDistance
    // Size: 0x8
    // Offset: 0x138
    ::ArrayW<float> m_VisibleLightIndexToCameraSquareDistance;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass/ShadowResolutionRequest[] m_SortedShadowResolutionRequests
    // Size: 0x8
    // Offset: 0x140
    ::ArrayW<::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ShadowResolutionRequest> m_SortedShadowResolutionRequests;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ShadowResolutionRequest>) == 0x8);
    // private System.Int32[] m_VisibleLightIndexToSortedShadowResolutionRequestsFirstSliceIndex
    // Size: 0x8
    // Offset: 0x148
    ::ArrayW<int> m_VisibleLightIndexToSortedShadowResolutionRequestsFirstSliceIndex;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.RectInt> m_UnusedAtlasSquareAreas
    // Size: 0x8
    // Offset: 0x150
    ::System::Collections::Generic::List_1<::UnityEngine::RectInt>* m_UnusedAtlasSquareAreas;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::RectInt>*) == 0x8);
    // private System.Boolean m_CreateEmptyShadowmap
    // Size: 0x1
    // Offset: 0x158
    bool m_CreateEmptyShadowmap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 renderTargetWidth
    // Size: 0x4
    // Offset: 0x15C
    int renderTargetWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 renderTargetHeight
    // Size: 0x4
    // Offset: 0x160
    int renderTargetHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.ProfilingSampler m_ProfilingSetupSampler
    // Size: 0x8
    // Offset: 0x168
    ::UnityEngine::Rendering::ProfilingSampler* m_ProfilingSetupSampler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.UInt64> m_ShadowRequestsHashes
    // Size: 0x8
    // Offset: 0x170
    ::System::Collections::Generic::Dictionary_2<int, uint64_t>* m_ShadowRequestsHashes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, uint64_t>*) == 0x8);
    public:
    // Get static field: static public System.Int32 m_AdditionalShadowsBufferId
    static int _get_m_AdditionalShadowsBufferId();
    // Set static field: static public System.Int32 m_AdditionalShadowsBufferId
    static void _set_m_AdditionalShadowsBufferId(int value);
    // Get static field: static public System.Int32 m_AdditionalShadowsIndicesId
    static int _get_m_AdditionalShadowsIndicesId();
    // Set static field: static public System.Int32 m_AdditionalShadowsIndicesId
    static void _set_m_AdditionalShadowsIndicesId(int value);
    // Get static field: static private readonly UnityEngine.Vector4 c_DefaultShadowParams
    static ::UnityEngine::Vector4 _get_c_DefaultShadowParams();
    // Set static field: static private readonly UnityEngine.Vector4 c_DefaultShadowParams
    static void _set_c_DefaultShadowParams(::UnityEngine::Vector4 value);
    // Get static field: static private System.Int32 m_AdditionalLightsWorldToShadow_SSBO
    static int _get_m_AdditionalLightsWorldToShadow_SSBO();
    // Set static field: static private System.Int32 m_AdditionalLightsWorldToShadow_SSBO
    static void _set_m_AdditionalLightsWorldToShadow_SSBO(int value);
    // Get static field: static private System.Int32 m_AdditionalShadowParams_SSBO
    static int _get_m_AdditionalShadowParams_SSBO();
    // Set static field: static private System.Int32 m_AdditionalShadowParams_SSBO
    static void _set_m_AdditionalShadowParams_SSBO(int value);
    // static field const value: static private System.Int32 k_ShadowmapBufferBits
    static constexpr const int k_ShadowmapBufferBits = 16;
    // Get static field: static private System.Int32 k_ShadowmapBufferBits
    static int _get_k_ShadowmapBufferBits();
    // Set static field: static private System.Int32 k_ShadowmapBufferBits
    static void _set_k_ShadowmapBufferBits(int value);
    // static field const value: static private System.Single LightTypeIdentifierInShadowParams_Spot
    static constexpr const float LightTypeIdentifierInShadowParams_Spot = 0;
    // Get static field: static private System.Single LightTypeIdentifierInShadowParams_Spot
    static float _get_LightTypeIdentifierInShadowParams_Spot();
    // Set static field: static private System.Single LightTypeIdentifierInShadowParams_Spot
    static void _set_LightTypeIdentifierInShadowParams_Spot(float value);
    // static field const value: static private System.Single LightTypeIdentifierInShadowParams_Point
    static constexpr const float LightTypeIdentifierInShadowParams_Point = 1;
    // Get static field: static private System.Single LightTypeIdentifierInShadowParams_Point
    static float _get_LightTypeIdentifierInShadowParams_Point();
    // Set static field: static private System.Single LightTypeIdentifierInShadowParams_Point
    static void _set_LightTypeIdentifierInShadowParams_Point(float value);
    // static field const value: static private System.Int32 kMinimumPunctualLightHardShadowResolution
    static constexpr const int kMinimumPunctualLightHardShadowResolution = 8;
    // Get static field: static private System.Int32 kMinimumPunctualLightHardShadowResolution
    static int _get_kMinimumPunctualLightHardShadowResolution();
    // Set static field: static private System.Int32 kMinimumPunctualLightHardShadowResolution
    static void _set_kMinimumPunctualLightHardShadowResolution(int value);
    // static field const value: static private System.Int32 kMinimumPunctualLightSoftShadowResolution
    static constexpr const int kMinimumPunctualLightSoftShadowResolution = 16;
    // Get static field: static private System.Int32 kMinimumPunctualLightSoftShadowResolution
    static int _get_kMinimumPunctualLightSoftShadowResolution();
    // Set static field: static private System.Int32 kMinimumPunctualLightSoftShadowResolution
    static void _set_kMinimumPunctualLightSoftShadowResolution(int value);
    // Get instance field reference: private System.Boolean m_UseStructuredBuffer
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseStructuredBuffer();
    // Get instance field reference: private System.Int32 m_AdditionalLightsShadowmapID
    [[deprecated("Use field access instead!")]] int& dyn_m_AdditionalLightsShadowmapID();
    // Get instance field reference: UnityEngine.Rendering.RTHandle m_AdditionalLightsShadowmapHandle
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_AdditionalLightsShadowmapHandle();
    // Get instance field reference: private System.Single m_MaxShadowDistanceSq
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxShadowDistanceSq();
    // Get instance field reference: private System.Single m_CascadeBorder
    [[deprecated("Use field access instead!")]] float& dyn_m_CascadeBorder();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ShadowSliceData[] m_AdditionalLightsShadowSlices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::Universal::ShadowSliceData>& dyn_m_AdditionalLightsShadowSlices();
    // Get instance field reference: private System.Int32[] m_VisibleLightIndexToAdditionalLightIndex
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_m_VisibleLightIndexToAdditionalLightIndex();
    // Get instance field reference: private System.Int32[] m_AdditionalLightIndexToVisibleLightIndex
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_m_AdditionalLightIndexToVisibleLightIndex();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> m_ShadowSliceToAdditionalLightIndex
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_m_ShadowSliceToAdditionalLightIndex();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> m_GlobalShadowSliceIndexToPerLightShadowSliceIndex
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_m_GlobalShadowSliceIndexToPerLightShadowSliceIndex();
    // Get instance field reference: private UnityEngine.Vector4[] m_AdditionalLightIndexToShadowParams
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_AdditionalLightIndexToShadowParams();
    // Get instance field reference: private UnityEngine.Matrix4x4[] m_AdditionalLightShadowSliceIndexTo_WorldShadowMatrix
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn_m_AdditionalLightShadowSliceIndexTo_WorldShadowMatrix();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass/ShadowResolutionRequest> m_ShadowResolutionRequests
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ShadowResolutionRequest>*& dyn_m_ShadowResolutionRequests();
    // Get instance field reference: private System.Single[] m_VisibleLightIndexToCameraSquareDistance
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_VisibleLightIndexToCameraSquareDistance();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass/ShadowResolutionRequest[] m_SortedShadowResolutionRequests
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ShadowResolutionRequest>& dyn_m_SortedShadowResolutionRequests();
    // Get instance field reference: private System.Int32[] m_VisibleLightIndexToSortedShadowResolutionRequestsFirstSliceIndex
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_m_VisibleLightIndexToSortedShadowResolutionRequestsFirstSliceIndex();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.RectInt> m_UnusedAtlasSquareAreas
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::RectInt>*& dyn_m_UnusedAtlasSquareAreas();
    // Get instance field reference: private System.Boolean m_CreateEmptyShadowmap
    [[deprecated("Use field access instead!")]] bool& dyn_m_CreateEmptyShadowmap();
    // Get instance field reference: private System.Int32 renderTargetWidth
    [[deprecated("Use field access instead!")]] int& dyn_renderTargetWidth();
    // Get instance field reference: private System.Int32 renderTargetHeight
    [[deprecated("Use field access instead!")]] int& dyn_renderTargetHeight();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler m_ProfilingSetupSampler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_m_ProfilingSetupSampler();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.UInt64> m_ShadowRequestsHashes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, uint64_t>*& dyn_m_ShadowRequestsHashes();
    // public System.Void .ctor(UnityEngine.Rendering.Universal.RenderPassEvent evt)
    // Offset: 0x5306C44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdditionalLightsShadowCasterPass* New_ctor(::UnityEngine::Rendering::Universal::RenderPassEvent evt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdditionalLightsShadowCasterPass*, creationType>(evt)));
    }
    // public System.Void Dispose()
    // Offset: 0x53072D4
    void Dispose();
    // private System.Int32 GetPunctualLightShadowSlicesCount(in UnityEngine.LightType lightType)
    // Offset: 0x53072E8
    int GetPunctualLightShadowSlicesCount(ByRef<::UnityEngine::LightType> lightType);
    // static System.Single CalcGuardAngle(System.Single frustumAngleInDegrees, System.Single guardBandSizeInTexels, System.Single sliceResolutionInTexels)
    // Offset: 0x5307308
    static float CalcGuardAngle(float frustumAngleInDegrees, float guardBandSizeInTexels, float sliceResolutionInTexels);
    // private System.Int32 MinimalPunctualLightShadowResolution(System.Boolean softShadow)
    // Offset: 0x5307378
    int MinimalPunctualLightShadowResolution(bool softShadow);
    // static System.Single GetPointLightShadowFrustumFovBiasInDegrees(System.Int32 shadowSliceResolution, System.Boolean shadowFiltering)
    // Offset: 0x530738C
    static float GetPointLightShadowFrustumFovBiasInDegrees(int shadowSliceResolution, bool shadowFiltering);
    // System.Void InsertionSort(UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass/ShadowResolutionRequest[] array, System.Int32 startIndex, System.Int32 lastIndex)
    // Offset: 0x53074B0
    void InsertionSort(::ArrayW<::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ShadowResolutionRequest> array, int startIndex, int lastIndex);
    // private System.Int32 EstimateScaleFactorNeededToFitAllShadowsInAtlas(in UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass/ShadowResolutionRequest[] shadowResolutionRequests, System.Int32 endIndex, System.Int32 atlasWidth)
    // Offset: 0x5307758
    int EstimateScaleFactorNeededToFitAllShadowsInAtlas(ByRef<::ArrayW<::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ShadowResolutionRequest>> shadowResolutionRequests, int endIndex, int atlasWidth);
    // private System.Void AtlasLayout(System.Int32 atlasSize, System.Int32 totalShadowSlicesCount, System.Int32 estimatedScaleFactor)
    // Offset: 0x53077E0
    void AtlasLayout(int atlasSize, int totalShadowSlicesCount, int estimatedScaleFactor);
    // private System.UInt64 ResolutionLog2ForHash(System.Int32 resolution)
    // Offset: 0x5307AB4
    uint64_t ResolutionLog2ForHash(int resolution);
    // private System.UInt64 ComputeShadowRequestHash(ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5307B00
    uint64_t ComputeShadowRequestHash(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public System.Boolean Setup(ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5307F00
    bool Setup(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Boolean SetupForEmptyRendering(ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x53098B8
    bool SetupForEmptyRendering(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public System.Int32 GetShadowLightIndexFromLightIndex(System.Int32 visibleLightIndex)
    // Offset: 0x53053BC
    int GetShadowLightIndexFromLightIndex(int visibleLightIndex);
    // private System.Void Clear()
    // Offset: 0x5309854
    void Clear();
    // private System.Void SetEmptyAdditionalShadowmapAtlas(ref UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5309AFC
    void SetEmptyAdditionalShadowmapAtlas(ByRef<::UnityEngine::Rendering::ScriptableRenderContext> context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void RenderAdditionalShadowmapAtlas(ref UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5309C84
    void RenderAdditionalShadowmapAtlas(ByRef<::UnityEngine::Rendering::ScriptableRenderContext> context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void SetupAdditionalLightsShadowReceiverConstants(UnityEngine.Rendering.CommandBuffer cmd, System.Boolean softShadows)
    // Offset: 0x530A358
    void SetupAdditionalLightsShadowReceiverConstants(::UnityEngine::Rendering::CommandBuffer* cmd, bool softShadows);
    // private System.Boolean IsValidShadowCastingLight(ref UnityEngine.Rendering.Universal.LightData lightData, System.Int32 i)
    // Offset: 0x5307DA0
    bool IsValidShadowCastingLight(ByRef<::UnityEngine::Rendering::Universal::LightData> lightData, int i);
    // UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle Render(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph graph, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x530A630
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle Render(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* graph, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void InitPassData(ref UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass/PassData passData, ref UnityEngine.Rendering.Universal.RenderingData renderingData, ref UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph graph)
    // Offset: 0x530AC00
    void InitPassData(ByRef<::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::PassData*> passData, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*> graph);
    // public override System.Void Configure(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.RenderTextureDescriptor cameraTextureDescriptor)
    // Offset: 0x53099E8
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Configure(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.RenderTextureDescriptor cameraTextureDescriptor)
    void Configure(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::RenderTextureDescriptor cameraTextureDescriptor);
    // public override System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5309A20
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void Execute(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // static private System.Void .cctor()
    // Offset: 0x530AC90
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::.cctor()
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ShadowResolutionRequest, "UnityEngine.Rendering.Universal.Internal", "AdditionalLightsShadowCasterPass/ShadowResolutionRequest");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)()>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::GetPunctualLightShadowSlicesCount
// Il2CppName: GetPunctualLightShadowSlicesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(ByRef<::UnityEngine::LightType>)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::GetPunctualLightShadowSlicesCount)> {
  static const MethodInfo* get() {
    static auto* lightType = &::il2cpp_utils::GetClassFromName("UnityEngine", "LightType")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "GetPunctualLightShadowSlicesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lightType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::CalcGuardAngle
// Il2CppName: CalcGuardAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::CalcGuardAngle)> {
  static const MethodInfo* get() {
    static auto* frustumAngleInDegrees = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* guardBandSizeInTexels = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* sliceResolutionInTexels = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "CalcGuardAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frustumAngleInDegrees, guardBandSizeInTexels, sliceResolutionInTexels});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::MinimalPunctualLightShadowResolution
// Il2CppName: MinimalPunctualLightShadowResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(bool)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::MinimalPunctualLightShadowResolution)> {
  static const MethodInfo* get() {
    static auto* softShadow = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "MinimalPunctualLightShadowResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{softShadow});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::GetPointLightShadowFrustumFovBiasInDegrees
// Il2CppName: GetPointLightShadowFrustumFovBiasInDegrees
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int, bool)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::GetPointLightShadowFrustumFovBiasInDegrees)> {
  static const MethodInfo* get() {
    static auto* shadowSliceResolution = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* shadowFiltering = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "GetPointLightShadowFrustumFovBiasInDegrees", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shadowSliceResolution, shadowFiltering});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::InsertionSort
// Il2CppName: InsertionSort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(::ArrayW<::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ShadowResolutionRequest>, int, int)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::InsertionSort)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.Internal", "AdditionalLightsShadowCasterPass/ShadowResolutionRequest"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lastIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "InsertionSort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, startIndex, lastIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::EstimateScaleFactorNeededToFitAllShadowsInAtlas
// Il2CppName: EstimateScaleFactorNeededToFitAllShadowsInAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(ByRef<::ArrayW<::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ShadowResolutionRequest>>, int, int)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::EstimateScaleFactorNeededToFitAllShadowsInAtlas)> {
  static const MethodInfo* get() {
    static auto* shadowResolutionRequests = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.Internal", "AdditionalLightsShadowCasterPass/ShadowResolutionRequest"), 1)->this_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* atlasWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "EstimateScaleFactorNeededToFitAllShadowsInAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shadowResolutionRequests, endIndex, atlasWidth});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::AtlasLayout
// Il2CppName: AtlasLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(int, int, int)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::AtlasLayout)> {
  static const MethodInfo* get() {
    static auto* atlasSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* totalShadowSlicesCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* estimatedScaleFactor = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "AtlasLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{atlasSize, totalShadowSlicesCount, estimatedScaleFactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ResolutionLog2ForHash
// Il2CppName: ResolutionLog2ForHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(int)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ResolutionLog2ForHash)> {
  static const MethodInfo* get() {
    static auto* resolution = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "ResolutionLog2ForHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resolution});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ComputeShadowRequestHash
// Il2CppName: ComputeShadowRequestHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::ComputeShadowRequestHash)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "ComputeShadowRequestHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::Setup)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::SetupForEmptyRendering
// Il2CppName: SetupForEmptyRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::SetupForEmptyRendering)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "SetupForEmptyRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::GetShadowLightIndexFromLightIndex
// Il2CppName: GetShadowLightIndexFromLightIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(int)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::GetShadowLightIndexFromLightIndex)> {
  static const MethodInfo* get() {
    static auto* visibleLightIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "GetShadowLightIndexFromLightIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{visibleLightIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)()>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::SetEmptyAdditionalShadowmapAtlas
// Il2CppName: SetEmptyAdditionalShadowmapAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(ByRef<::UnityEngine::Rendering::ScriptableRenderContext>, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::SetEmptyAdditionalShadowmapAtlas)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->this_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "SetEmptyAdditionalShadowmapAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::RenderAdditionalShadowmapAtlas
// Il2CppName: RenderAdditionalShadowmapAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(ByRef<::UnityEngine::Rendering::ScriptableRenderContext>, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::RenderAdditionalShadowmapAtlas)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->this_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "RenderAdditionalShadowmapAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::SetupAdditionalLightsShadowReceiverConstants
// Il2CppName: SetupAdditionalLightsShadowReceiverConstants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(::UnityEngine::Rendering::CommandBuffer*, bool)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::SetupAdditionalLightsShadowReceiverConstants)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* softShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "SetupAdditionalLightsShadowReceiverConstants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, softShadows});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::IsValidShadowCastingLight
// Il2CppName: IsValidShadowCastingLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(ByRef<::UnityEngine::Rendering::Universal::LightData>, int)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::IsValidShadowCastingLight)> {
  static const MethodInfo* get() {
    static auto* lightData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightData")->this_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "IsValidShadowCastingLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lightData, i});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::Render)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::InitPassData
// Il2CppName: InitPassData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(ByRef<::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::PassData*>, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*>)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::InitPassData)> {
  static const MethodInfo* get() {
    static auto* passData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.Internal", "AdditionalLightsShadowCasterPass/PassData")->this_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "InitPassData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passData, renderingData, graph});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::Configure
// Il2CppName: Configure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::RenderTextureDescriptor)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::Configure)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cameraTextureDescriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "Configure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cameraTextureDescriptor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::Execute)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
