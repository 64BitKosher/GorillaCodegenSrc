// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass
#include "UnityEngine/Rendering/Universal/Internal/AdditionalLightsShadowCasterPass.hpp"
// Including type: UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle
#include "UnityEngine/Experimental/Rendering/RenderGraphModule/TextureHandle.hpp"
// Including type: UnityEngine.Rendering.Universal.RenderingData
#include "UnityEngine/Rendering/Universal/RenderingData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraph
  class RenderGraph;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::PassData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::PassData*, "UnityEngine.Rendering.Universal.Internal", "AdditionalLightsShadowCasterPass/PassData");
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass/PassData
  // [TokenAttribute] Offset: FFFFFFFF
  class AdditionalLightsShadowCasterPass::PassData : public ::Il2CppObject {
    public:
    public:
    // UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass pass
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass* pass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*) == 0x8);
    // UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph graph
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* graph;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*) == 0x8);
    // UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle shadowmapTexture
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle shadowmapTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle) == 0x8);
    // UnityEngine.Rendering.Universal.RenderingData renderingData
    // Size: 0xFFFFFFFF
    // Offset: 0x28
    ::UnityEngine::Rendering::Universal::RenderingData renderingData;
    // System.Int32 shadowmapID
    // Size: 0x4
    // Offset: 0x2E0
    int shadowmapID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean emptyShadowmap
    // Size: 0x1
    // Offset: 0x2E4
    bool emptyShadowmap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass pass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*& dyn_pass();
    // Get instance field reference: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph graph
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*& dyn_graph();
    // Get instance field reference: UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle shadowmapTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle& dyn_shadowmapTexture();
    // Get instance field reference: UnityEngine.Rendering.Universal.RenderingData renderingData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::RenderingData& dyn_renderingData();
    // Get instance field reference: System.Int32 shadowmapID
    [[deprecated("Use field access instead!")]] int& dyn_shadowmapID();
    // Get instance field reference: System.Boolean emptyShadowmap
    [[deprecated("Use field access instead!")]] bool& dyn_emptyShadowmap();
    // public System.Void .ctor()
    // Offset: 0x530AD04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdditionalLightsShadowCasterPass::PassData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::PassData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdditionalLightsShadowCasterPass::PassData*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass/PassData
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass::PassData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
