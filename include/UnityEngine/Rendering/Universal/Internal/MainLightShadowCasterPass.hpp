// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderPass
#include "UnityEngine/Rendering/Universal/ScriptableRenderPass.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Rendering.Universal.ShadowSliceData
#include "UnityEngine/Rendering/Universal/ShadowSliceData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal::Internal
namespace UnityEngine::Rendering::Universal::Internal {
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: VisibleLight
  struct VisibleLight;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: RenderingData
  struct RenderingData;
  // Forward declaring type: ShadowData
  struct ShadowData;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: TextureHandle
  struct TextureHandle;
  // Forward declaring type: RenderGraph
  class RenderGraph;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTextureDescriptor
  struct RenderTextureDescriptor;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // Forward declaring type: MainLightShadowCasterPass
  class MainLightShadowCasterPass;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass*, "UnityEngine.Rendering.Universal.Internal", "MainLightShadowCasterPass");
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.Internal.MainLightShadowCasterPass
  // [TokenAttribute] Offset: FFFFFFFF
  class MainLightShadowCasterPass : public ::UnityEngine::Rendering::Universal::ScriptableRenderPass {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::MainLightShadowConstantBuffer
    class MainLightShadowConstantBuffer;
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::PassData
    class PassData;
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::$$c
    class $$c;
    public:
    // private System.Single m_CascadeBorder
    // Size: 0x4
    // Offset: 0xE0
    float m_CascadeBorder;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MaxShadowDistanceSq
    // Size: 0x4
    // Offset: 0xE4
    float m_MaxShadowDistanceSq;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_ShadowCasterCascadesCount
    // Size: 0x4
    // Offset: 0xE8
    int m_ShadowCasterCascadesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_MainLightShadowmapID
    // Size: 0x4
    // Offset: 0xEC
    int m_MainLightShadowmapID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.Rendering.RTHandle m_MainLightShadowmapTexture
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::Rendering::RTHandle* m_MainLightShadowmapTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // UnityEngine.Rendering.RTHandle m_EmptyLightShadowmapTexture
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Rendering::RTHandle* m_EmptyLightShadowmapTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Matrix4x4[] m_MainLightShadowMatrices
    // Size: 0x8
    // Offset: 0x100
    ::ArrayW<::UnityEngine::Matrix4x4> m_MainLightShadowMatrices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // private UnityEngine.Rendering.Universal.ShadowSliceData[] m_CascadeSlices
    // Size: 0x8
    // Offset: 0x108
    ::ArrayW<::UnityEngine::Rendering::Universal::ShadowSliceData> m_CascadeSlices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::Universal::ShadowSliceData>) == 0x8);
    // private UnityEngine.Vector4[] m_CascadeSplitDistances
    // Size: 0x8
    // Offset: 0x110
    ::ArrayW<::UnityEngine::Vector4> m_CascadeSplitDistances;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private System.Boolean m_CreateEmptyShadowmap
    // Size: 0x1
    // Offset: 0x118
    bool m_CreateEmptyShadowmap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 renderTargetWidth
    // Size: 0x4
    // Offset: 0x11C
    int renderTargetWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 renderTargetHeight
    // Size: 0x4
    // Offset: 0x120
    int renderTargetHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.ProfilingSampler m_ProfilingSetupSampler
    // Size: 0x8
    // Offset: 0x128
    ::UnityEngine::Rendering::ProfilingSampler* m_ProfilingSetupSampler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    public:
    // static field const value: static private System.Int32 k_MaxCascades
    static constexpr const int k_MaxCascades = 4;
    // Get static field: static private System.Int32 k_MaxCascades
    static int _get_k_MaxCascades();
    // Set static field: static private System.Int32 k_MaxCascades
    static void _set_k_MaxCascades(int value);
    // static field const value: static private System.Int32 k_ShadowmapBufferBits
    static constexpr const int k_ShadowmapBufferBits = 16;
    // Get static field: static private System.Int32 k_ShadowmapBufferBits
    static int _get_k_ShadowmapBufferBits();
    // Set static field: static private System.Int32 k_ShadowmapBufferBits
    static void _set_k_ShadowmapBufferBits(int value);
    // Get instance field reference: private System.Single m_CascadeBorder
    [[deprecated("Use field access instead!")]] float& dyn_m_CascadeBorder();
    // Get instance field reference: private System.Single m_MaxShadowDistanceSq
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxShadowDistanceSq();
    // Get instance field reference: private System.Int32 m_ShadowCasterCascadesCount
    [[deprecated("Use field access instead!")]] int& dyn_m_ShadowCasterCascadesCount();
    // Get instance field reference: private System.Int32 m_MainLightShadowmapID
    [[deprecated("Use field access instead!")]] int& dyn_m_MainLightShadowmapID();
    // Get instance field reference: UnityEngine.Rendering.RTHandle m_MainLightShadowmapTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_MainLightShadowmapTexture();
    // Get instance field reference: UnityEngine.Rendering.RTHandle m_EmptyLightShadowmapTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_EmptyLightShadowmapTexture();
    // Get instance field reference: private UnityEngine.Matrix4x4[] m_MainLightShadowMatrices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn_m_MainLightShadowMatrices();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ShadowSliceData[] m_CascadeSlices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::Universal::ShadowSliceData>& dyn_m_CascadeSlices();
    // Get instance field reference: private UnityEngine.Vector4[] m_CascadeSplitDistances
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_CascadeSplitDistances();
    // Get instance field reference: private System.Boolean m_CreateEmptyShadowmap
    [[deprecated("Use field access instead!")]] bool& dyn_m_CreateEmptyShadowmap();
    // Get instance field reference: private System.Int32 renderTargetWidth
    [[deprecated("Use field access instead!")]] int& dyn_renderTargetWidth();
    // Get instance field reference: private System.Int32 renderTargetHeight
    [[deprecated("Use field access instead!")]] int& dyn_renderTargetHeight();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler m_ProfilingSetupSampler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_m_ProfilingSetupSampler();
    // public System.Void .ctor(UnityEngine.Rendering.Universal.RenderPassEvent evt)
    // Offset: 0x5319330
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MainLightShadowCasterPass* New_ctor(::UnityEngine::Rendering::Universal::RenderPassEvent evt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MainLightShadowCasterPass*, creationType>(evt)));
    }
    // public System.Void Dispose()
    // Offset: 0x5319728
    void Dispose();
    // public System.Boolean Setup(ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x531975C
    bool Setup(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Boolean SetupForEmptyRendering(ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5319BC4
    bool SetupForEmptyRendering(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void Clear()
    // Offset: 0x5319C7C
    void Clear();
    // private System.Void SetEmptyMainLightCascadeShadowmap(ref UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5319ED0
    void SetEmptyMainLightCascadeShadowmap(ByRef<::UnityEngine::Rendering::ScriptableRenderContext> context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void RenderMainLightCascadeShadowmap(ref UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x531A074
    void RenderMainLightCascadeShadowmap(ByRef<::UnityEngine::Rendering::ScriptableRenderContext> context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void SetupMainLightShadowReceiverConstants(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.VisibleLight shadowLight, ref UnityEngine.Rendering.Universal.ShadowData shadowData)
    // Offset: 0x531A598
    void SetupMainLightShadowReceiverConstants(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::VisibleLight> shadowLight, ByRef<::UnityEngine::Rendering::Universal::ShadowData> shadowData);
    // UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle Render(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph graph, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x531AA6C
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle Render(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* graph, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void InitPassData(ref UnityEngine.Rendering.Universal.Internal.MainLightShadowCasterPass/PassData passData, ref UnityEngine.Rendering.Universal.RenderingData renderingData, ref UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph graph)
    // Offset: 0x531B03C
    void InitPassData(ByRef<::UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::PassData*> passData, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*> graph);
    // public override System.Void Configure(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.RenderTextureDescriptor cameraTextureDescriptor)
    // Offset: 0x5319DC4
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Configure(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.RenderTextureDescriptor cameraTextureDescriptor)
    void Configure(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::RenderTextureDescriptor cameraTextureDescriptor);
    // public override System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5319E10
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void Execute(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
  }; // UnityEngine.Rendering.Universal.Internal.MainLightShadowCasterPass
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::*)()>(&UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::Setup)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::SetupForEmptyRendering
// Il2CppName: SetupForEmptyRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::SetupForEmptyRendering)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass*), "SetupForEmptyRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::*)()>(&UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::SetEmptyMainLightCascadeShadowmap
// Il2CppName: SetEmptyMainLightCascadeShadowmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::*)(ByRef<::UnityEngine::Rendering::ScriptableRenderContext>, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::SetEmptyMainLightCascadeShadowmap)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->this_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass*), "SetEmptyMainLightCascadeShadowmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::RenderMainLightCascadeShadowmap
// Il2CppName: RenderMainLightCascadeShadowmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::*)(ByRef<::UnityEngine::Rendering::ScriptableRenderContext>, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::RenderMainLightCascadeShadowmap)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->this_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass*), "RenderMainLightCascadeShadowmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::SetupMainLightShadowReceiverConstants
// Il2CppName: SetupMainLightShadowReceiverConstants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::VisibleLight>, ByRef<::UnityEngine::Rendering::Universal::ShadowData>)>(&UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::SetupMainLightShadowReceiverConstants)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* shadowLight = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VisibleLight")->this_arg;
    static auto* shadowData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ShadowData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass*), "SetupMainLightShadowReceiverConstants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, shadowLight, shadowData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle (UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::Render)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::InitPassData
// Il2CppName: InitPassData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::*)(ByRef<::UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::PassData*>, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*>)>(&UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::InitPassData)> {
  static const MethodInfo* get() {
    static auto* passData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.Internal", "MainLightShadowCasterPass/PassData")->this_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass*), "InitPassData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passData, renderingData, graph});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::Configure
// Il2CppName: Configure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::RenderTextureDescriptor)>(&UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::Configure)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cameraTextureDescriptor = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass*), "Configure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cameraTextureDescriptor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass::Execute)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::MainLightShadowCasterPass*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
