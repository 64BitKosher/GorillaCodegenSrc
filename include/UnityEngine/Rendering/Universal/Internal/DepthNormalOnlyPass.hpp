// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderPass
#include "UnityEngine/Rendering/Universal/ScriptableRenderPass.hpp"
// Including type: UnityEngine.Rendering.FilteringSettings
#include "UnityEngine/Rendering/FilteringSettings.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal::Internal
namespace UnityEngine::Rendering::Universal::Internal {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Skipping declaration: GraphicsFormat because it is already included!
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraph
  class RenderGraph;
  // Forward declaring type: TextureHandle
  struct TextureHandle;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // Forward declaring type: DepthNormalOnlyPass
  class DepthNormalOnlyPass;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*, "UnityEngine.Rendering.Universal.Internal", "DepthNormalOnlyPass");
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.Internal.DepthNormalOnlyPass
  // [TokenAttribute] Offset: FFFFFFFF
  class DepthNormalOnlyPass : public ::UnityEngine::Rendering::Universal::ScriptableRenderPass {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::PassData
    class PassData;
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::$$c
    class $$c;
    public:
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> <shaderTagIds>k__BackingField
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* shaderTagIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>*) == 0x8);
    // private UnityEngine.Rendering.RTHandle <depthHandle>k__BackingField
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Rendering::RTHandle* depthHandle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle <normalHandle>k__BackingField
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::Rendering::RTHandle* normalHandle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle <renderingLayersHandle>k__BackingField
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Rendering::RTHandle* renderingLayersHandle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private System.Boolean <enableRenderingLayers>k__BackingField
    // Size: 0x1
    // Offset: 0x100
    bool enableRenderingLayers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Rendering.FilteringSettings m_FilteringSettings
    // Size: 0x18
    // Offset: 0x104
    ::UnityEngine::Rendering::FilteringSettings m_FilteringSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::FilteringSettings) == 0x18);
    // private UnityEngine.Rendering.Universal.Internal.DepthNormalOnlyPass/PassData m_PassData
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::PassData* m_PassData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::PassData*) == 0x8);
    public:
    // Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> k_DepthNormals
    static ::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* _get_k_DepthNormals();
    // Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> k_DepthNormals
    static void _set_k_DepthNormals(::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* value);
    // Get static field: static private readonly UnityEngine.Rendering.RTHandle[] k_ColorAttachment1
    static ::ArrayW<::UnityEngine::Rendering::RTHandle*> _get_k_ColorAttachment1();
    // Set static field: static private readonly UnityEngine.Rendering.RTHandle[] k_ColorAttachment1
    static void _set_k_ColorAttachment1(::ArrayW<::UnityEngine::Rendering::RTHandle*> value);
    // Get static field: static private readonly UnityEngine.Rendering.RTHandle[] k_ColorAttachment2
    static ::ArrayW<::UnityEngine::Rendering::RTHandle*> _get_k_ColorAttachment2();
    // Set static field: static private readonly UnityEngine.Rendering.RTHandle[] k_ColorAttachment2
    static void _set_k_ColorAttachment2(::ArrayW<::UnityEngine::Rendering::RTHandle*> value);
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> <shaderTagIds>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>*& dyn_$shaderTagIds$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle <depthHandle>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_$depthHandle$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle <normalHandle>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_$normalHandle$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle <renderingLayersHandle>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_$renderingLayersHandle$k__BackingField();
    // Get instance field reference: private System.Boolean <enableRenderingLayers>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$enableRenderingLayers$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.FilteringSettings m_FilteringSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::FilteringSettings& dyn_m_FilteringSettings();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.DepthNormalOnlyPass/PassData m_PassData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::PassData*& dyn_m_PassData();
    // System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> get_shaderTagIds()
    // Offset: 0x5313470
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* get_shaderTagIds();
    // System.Void set_shaderTagIds(System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> value)
    // Offset: 0x5313478
    void set_shaderTagIds(::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* value);
    // private UnityEngine.Rendering.RTHandle get_depthHandle()
    // Offset: 0x5313480
    ::UnityEngine::Rendering::RTHandle* get_depthHandle();
    // private System.Void set_depthHandle(UnityEngine.Rendering.RTHandle value)
    // Offset: 0x5313488
    void set_depthHandle(::UnityEngine::Rendering::RTHandle* value);
    // private UnityEngine.Rendering.RTHandle get_normalHandle()
    // Offset: 0x5313490
    ::UnityEngine::Rendering::RTHandle* get_normalHandle();
    // private System.Void set_normalHandle(UnityEngine.Rendering.RTHandle value)
    // Offset: 0x5313498
    void set_normalHandle(::UnityEngine::Rendering::RTHandle* value);
    // private UnityEngine.Rendering.RTHandle get_renderingLayersHandle()
    // Offset: 0x53134A0
    ::UnityEngine::Rendering::RTHandle* get_renderingLayersHandle();
    // private System.Void set_renderingLayersHandle(UnityEngine.Rendering.RTHandle value)
    // Offset: 0x53134A8
    void set_renderingLayersHandle(::UnityEngine::Rendering::RTHandle* value);
    // System.Boolean get_enableRenderingLayers()
    // Offset: 0x53134B0
    bool get_enableRenderingLayers();
    // System.Void set_enableRenderingLayers(System.Boolean value)
    // Offset: 0x53134B8
    void set_enableRenderingLayers(bool value);
    // public System.Void .ctor(UnityEngine.Rendering.Universal.RenderPassEvent evt, UnityEngine.Rendering.RenderQueueRange renderQueueRange, UnityEngine.LayerMask layerMask)
    // Offset: 0x53134C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DepthNormalOnlyPass* New_ctor(::UnityEngine::Rendering::Universal::RenderPassEvent evt, ::UnityEngine::Rendering::RenderQueueRange renderQueueRange, ::UnityEngine::LayerMask layerMask) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DepthNormalOnlyPass*, creationType>(evt, renderQueueRange, layerMask)));
    }
    // static public UnityEngine.Experimental.Rendering.GraphicsFormat GetGraphicsFormat()
    // Offset: 0x5313694
    static ::UnityEngine::Experimental::Rendering::GraphicsFormat GetGraphicsFormat();
    // public System.Void Setup(UnityEngine.Rendering.RTHandle depthHandle, UnityEngine.Rendering.RTHandle normalHandle)
    // Offset: 0x531372C
    void Setup(::UnityEngine::Rendering::RTHandle* depthHandle, ::UnityEngine::Rendering::RTHandle* normalHandle);
    // public System.Void Setup(UnityEngine.Rendering.RTHandle depthHandle, UnityEngine.Rendering.RTHandle normalHandle, UnityEngine.Rendering.RTHandle decalLayerHandle)
    // Offset: 0x5313764
    void Setup(::UnityEngine::Rendering::RTHandle* depthHandle, ::UnityEngine::Rendering::RTHandle* normalHandle, ::UnityEngine::Rendering::RTHandle* decalLayerHandle);
    // static private System.Void ExecutePass(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Rendering.Universal.Internal.DepthNormalOnlyPass/PassData passData, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x531396C
    static void ExecutePass(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::PassData* passData, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // System.Void Render(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, out UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle cameraNormalsTexture, out UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle cameraDepthTexture, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5313D88
    void Render(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> cameraNormalsTexture, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> cameraDepthTexture, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public override System.Void OnCameraSetup(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x53137B8
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::OnCameraSetup(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void OnCameraSetup(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public override System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5313C38
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void Execute(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public override System.Void OnCameraCleanup(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x5313D04
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::OnCameraCleanup(UnityEngine.Rendering.CommandBuffer cmd)
    void OnCameraCleanup(::UnityEngine::Rendering::CommandBuffer* cmd);
    // static private System.Void .cctor()
    // Offset: 0x5314258
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::.cctor()
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.Internal.DepthNormalOnlyPass
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::get_shaderTagIds
// Il2CppName: get_shaderTagIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)()>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::get_shaderTagIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "get_shaderTagIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::set_shaderTagIds
// Il2CppName: set_shaderTagIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>*)>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::set_shaderTagIds)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShaderTagId")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "set_shaderTagIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::get_depthHandle
// Il2CppName: get_depthHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)()>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::get_depthHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "get_depthHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::set_depthHandle
// Il2CppName: set_depthHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)(::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::set_depthHandle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "set_depthHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::get_normalHandle
// Il2CppName: get_normalHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)()>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::get_normalHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "get_normalHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::set_normalHandle
// Il2CppName: set_normalHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)(::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::set_normalHandle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "set_normalHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::get_renderingLayersHandle
// Il2CppName: get_renderingLayersHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)()>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::get_renderingLayersHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "get_renderingLayersHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::set_renderingLayersHandle
// Il2CppName: set_renderingLayersHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)(::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::set_renderingLayersHandle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "set_renderingLayersHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::get_enableRenderingLayers
// Il2CppName: get_enableRenderingLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)()>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::get_enableRenderingLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "get_enableRenderingLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::set_enableRenderingLayers
// Il2CppName: set_enableRenderingLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)(bool)>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::set_enableRenderingLayers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "set_enableRenderingLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::GetGraphicsFormat
// Il2CppName: GetGraphicsFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::GraphicsFormat (*)()>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::GetGraphicsFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "GetGraphicsFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)(::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::Setup)> {
  static const MethodInfo* get() {
    static auto* depthHandle = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* normalHandle = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{depthHandle, normalHandle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)(::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::Setup)> {
  static const MethodInfo* get() {
    static auto* depthHandle = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* normalHandle = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* decalLayerHandle = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{depthHandle, normalHandle, decalLayerHandle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::ExecutePass
// Il2CppName: ExecutePass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::PassData*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::ExecutePass)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* passData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.Internal", "DepthNormalOnlyPass/PassData")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "ExecutePass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, passData, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::Render)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* cameraNormalsTexture = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->this_arg;
    static auto* cameraDepthTexture = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->this_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, cameraNormalsTexture, cameraDepthTexture, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::OnCameraSetup
// Il2CppName: OnCameraSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::OnCameraSetup)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "OnCameraSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::Execute)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::OnCameraCleanup
// Il2CppName: OnCameraCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::OnCameraCleanup)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), "OnCameraCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DepthNormalOnlyPass*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
