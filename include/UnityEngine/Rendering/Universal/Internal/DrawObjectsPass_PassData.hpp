// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.Internal.DrawObjectsPass
#include "UnityEngine/Rendering/Universal/Internal/DrawObjectsPass.hpp"
// Including type: UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle
#include "UnityEngine/Experimental/Rendering/RenderGraphModule/TextureHandle.hpp"
// Including type: UnityEngine.Rendering.Universal.RenderingData
#include "UnityEngine/Rendering/Universal/RenderingData.hpp"
// Including type: UnityEngine.Rendering.RenderStateBlock
#include "UnityEngine/Rendering/RenderStateBlock.hpp"
// Including type: UnityEngine.Rendering.FilteringSettings
#include "UnityEngine/Rendering/FilteringSettings.hpp"
// Including type: UnityEngine.Rendering.ShaderTagId
#include "UnityEngine/Rendering/ShaderTagId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::Internal::DrawObjectsPass::PassData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Internal::DrawObjectsPass::PassData*, "UnityEngine.Rendering.Universal.Internal", "DrawObjectsPass/PassData");
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.Internal.DrawObjectsPass/PassData
  // [TokenAttribute] Offset: FFFFFFFF
  class DrawObjectsPass::PassData : public ::Il2CppObject {
    public:
    public:
    // UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle m_Albedo
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle m_Albedo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle) == 0x8);
    // UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle m_Depth
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle m_Depth;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle) == 0x8);
    // UnityEngine.Rendering.Universal.RenderingData m_RenderingData
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::UnityEngine::Rendering::Universal::RenderingData m_RenderingData;
    // System.Boolean m_IsOpaque
    // Size: 0x1
    // Offset: 0x2D8
    bool m_IsOpaque;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // UnityEngine.Rendering.RenderStateBlock m_RenderStateBlock
    // Size: 0x6C
    // Offset: 0x2DC
    ::UnityEngine::Rendering::RenderStateBlock m_RenderStateBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderStateBlock) == 0x6C);
    // UnityEngine.Rendering.FilteringSettings m_FilteringSettings
    // Size: 0x18
    // Offset: 0x348
    ::UnityEngine::Rendering::FilteringSettings m_FilteringSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::FilteringSettings) == 0x18);
    // System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> m_ShaderTagIdList
    // Size: 0x8
    // Offset: 0x360
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* m_ShaderTagIdList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>*) == 0x8);
    // UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    // Size: 0x8
    // Offset: 0x368
    ::UnityEngine::Rendering::ProfilingSampler* m_ProfilingSampler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // System.Boolean m_ShouldTransparentsReceiveShadows
    // Size: 0x1
    // Offset: 0x370
    bool m_ShouldTransparentsReceiveShadows;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // UnityEngine.Rendering.Universal.Internal.DrawObjectsPass pass
    // Size: 0x8
    // Offset: 0x378
    ::UnityEngine::Rendering::Universal::Internal::DrawObjectsPass* pass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::DrawObjectsPass*) == 0x8);
    public:
    // Get instance field reference: UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle m_Albedo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle& dyn_m_Albedo();
    // Get instance field reference: UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle m_Depth
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle& dyn_m_Depth();
    // Get instance field reference: UnityEngine.Rendering.Universal.RenderingData m_RenderingData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::RenderingData& dyn_m_RenderingData();
    // Get instance field reference: System.Boolean m_IsOpaque
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsOpaque();
    // Get instance field reference: UnityEngine.Rendering.RenderStateBlock m_RenderStateBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderStateBlock& dyn_m_RenderStateBlock();
    // Get instance field reference: UnityEngine.Rendering.FilteringSettings m_FilteringSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::FilteringSettings& dyn_m_FilteringSettings();
    // Get instance field reference: System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> m_ShaderTagIdList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>*& dyn_m_ShaderTagIdList();
    // Get instance field reference: UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_m_ProfilingSampler();
    // Get instance field reference: System.Boolean m_ShouldTransparentsReceiveShadows
    [[deprecated("Use field access instead!")]] bool& dyn_m_ShouldTransparentsReceiveShadows();
    // Get instance field reference: UnityEngine.Rendering.Universal.Internal.DrawObjectsPass pass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::DrawObjectsPass*& dyn_pass();
    // public System.Void .ctor()
    // Offset: 0x5315730
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DrawObjectsPass::PassData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Internal::DrawObjectsPass::PassData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DrawObjectsPass::PassData*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.Internal.DrawObjectsPass/PassData
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DrawObjectsPass::PassData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
