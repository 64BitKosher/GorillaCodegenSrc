// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.MixedLightingSetup
#include "UnityEngine/Rendering/Universal/MixedLightingSetup.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: Unity.Mathematics.int2
#include "Unity/Mathematics/int2.hpp"
// Including type: Unity.Jobs.JobHandle
#include "Unity/Jobs/JobHandle.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Rendering.Universal.ReflectionProbeManager
#include "UnityEngine/Rendering/Universal/ReflectionProbeManager.hpp"
// Including type: UnityEngine.Rendering.VisibleLight
#include "UnityEngine/Rendering/VisibleLight.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal::Internal
namespace UnityEngine::Rendering::Universal::Internal {
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: RenderingData
  struct RenderingData;
  // Forward declaring type: LightCookieManager
  class LightCookieManager;
  // Forward declaring type: LightData
  struct LightData;
  // Forward declaring type: ShEvalMode
  struct ShEvalMode;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GraphicsBuffer
  class GraphicsBuffer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: CullingResults
  struct CullingResults;
  // Forward declaring type: VisibleReflectionProbe
  struct VisibleReflectionProbe;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // Forward declaring type: ForwardLights
  class ForwardLights;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::Internal::ForwardLights);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Internal::ForwardLights*, "UnityEngine.Rendering.Universal.Internal", "ForwardLights");
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.Internal.ForwardLights
  // [TokenAttribute] Offset: FFFFFFFF
  class ForwardLights : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::ForwardLights::LightConstantBuffer
    class LightConstantBuffer;
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::ForwardLights::InitParams
    struct InitParams;
    // Size: 0x9
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.Universal.Internal.ForwardLights/InitParams
    // [TokenAttribute] Offset: FFFFFFFF
    struct InitParams/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Rendering.Universal.LightCookieManager lightCookieManager
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Rendering::Universal::LightCookieManager* lightCookieManager;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rendering::Universal::LightCookieManager*) == 0x8);
      // public System.Boolean forwardPlus
      // Size: 0x1
      // Offset: 0x8
      bool forwardPlus;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: InitParams
      constexpr InitParams(::UnityEngine::Rendering::Universal::LightCookieManager* lightCookieManager_ = {}, bool forwardPlus_ = {}) noexcept : lightCookieManager{lightCookieManager_}, forwardPlus{forwardPlus_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Rendering.Universal.LightCookieManager lightCookieManager
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LightCookieManager*& dyn_lightCookieManager();
      // Get instance field reference: public System.Boolean forwardPlus
      [[deprecated("Use field access instead!")]] bool& dyn_forwardPlus();
      // static UnityEngine.Rendering.Universal.Internal.ForwardLights/InitParams Create()
      // Offset: 0x530AEA4
      static ::UnityEngine::Rendering::Universal::Internal::ForwardLights::InitParams Create();
    }; // UnityEngine.Rendering.Universal.Internal.ForwardLights/InitParams
    #pragma pack(pop)
    static check_size<sizeof(ForwardLights::InitParams), 8 + sizeof(bool)> __UnityEngine_Rendering_Universal_Internal_ForwardLights_InitParamsSizeCheck;
    static_assert(sizeof(ForwardLights::InitParams) == 0x9);
    public:
    // private System.Int32 m_AdditionalLightsBufferId
    // Size: 0x4
    // Offset: 0x10
    int m_AdditionalLightsBufferId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_AdditionalLightsIndicesId
    // Size: 0x4
    // Offset: 0x14
    int m_AdditionalLightsIndicesId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.Universal.MixedLightingSetup m_MixedLightingSetup
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::Rendering::Universal::MixedLightingSetup m_MixedLightingSetup;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::MixedLightingSetup) == 0x4);
    // private UnityEngine.Vector4[] m_AdditionalLightPositions
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Vector4> m_AdditionalLightPositions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private UnityEngine.Vector4[] m_AdditionalLightColors
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Vector4> m_AdditionalLightColors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private UnityEngine.Vector4[] m_AdditionalLightAttenuations
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Vector4> m_AdditionalLightAttenuations;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private UnityEngine.Vector4[] m_AdditionalLightSpotDirections
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Vector4> m_AdditionalLightSpotDirections;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private UnityEngine.Vector4[] m_AdditionalLightOcclusionProbeChannels
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Vector4> m_AdditionalLightOcclusionProbeChannels;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private System.Single[] m_AdditionalLightsLayerMasks
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<float> m_AdditionalLightsLayerMasks;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Boolean m_UseStructuredBuffer
    // Size: 0x1
    // Offset: 0x50
    bool m_UseStructuredBuffer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_UseForwardPlus
    // Size: 0x1
    // Offset: 0x51
    bool m_UseForwardPlus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 m_DirectionalLightCount
    // Size: 0x4
    // Offset: 0x54
    int m_DirectionalLightCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_ActualTileWidth
    // Size: 0x4
    // Offset: 0x58
    int m_ActualTileWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Unity.Mathematics.int2 m_TileResolution
    // Size: 0x8
    // Offset: 0x5C
    ::Unity::Mathematics::int2 m_TileResolution;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::int2) == 0x8);
    // private Unity.Jobs.JobHandle m_CullingHandle
    // Size: 0xC
    // Offset: 0x68
    ::Unity::Jobs::JobHandle m_CullingHandle;
    // Field size check
    static_assert(sizeof(::Unity::Jobs::JobHandle) == 0xC);
    // private Unity.Collections.NativeArray`1<System.UInt32> m_ZBins
    // Size: 0xFFFFFFFF
    // Offset: 0x78
    ::Unity::Collections::NativeArray_1<uint> m_ZBins;
    // private UnityEngine.GraphicsBuffer m_ZBinsBuffer
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::GraphicsBuffer* m_ZBinsBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::GraphicsBuffer*) == 0x8);
    // private Unity.Collections.NativeArray`1<System.UInt32> m_TileMasks
    // Size: 0xFFFFFFFF
    // Offset: 0x90
    ::Unity::Collections::NativeArray_1<uint> m_TileMasks;
    // private UnityEngine.GraphicsBuffer m_TileMasksBuffer
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::GraphicsBuffer* m_TileMasksBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::GraphicsBuffer*) == 0x8);
    // private UnityEngine.Rendering.Universal.LightCookieManager m_LightCookieManager
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Rendering::Universal::LightCookieManager* m_LightCookieManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LightCookieManager*) == 0x8);
    // private UnityEngine.Rendering.Universal.ReflectionProbeManager m_ReflectionProbeManager
    // Size: 0xFFFFFFFF
    // Offset: 0xB0
    ::UnityEngine::Rendering::Universal::ReflectionProbeManager m_ReflectionProbeManager;
    // private System.Int32 m_WordsPerTile
    // Size: 0x4
    // Offset: 0x130
    int m_WordsPerTile;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_ZBinScale
    // Size: 0x4
    // Offset: 0x134
    float m_ZBinScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ZBinOffset
    // Size: 0x4
    // Offset: 0x138
    float m_ZBinOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_LightCount
    // Size: 0x4
    // Offset: 0x13C
    int m_LightCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_BinCount
    // Size: 0x4
    // Offset: 0x140
    int m_BinCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // static field const value: static private System.String k_SetupLightConstants
    static constexpr const char* k_SetupLightConstants = "Setup Light Constants";
    // Get static field: static private System.String k_SetupLightConstants
    static ::StringW _get_k_SetupLightConstants();
    // Set static field: static private System.String k_SetupLightConstants
    static void _set_k_SetupLightConstants(::StringW value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingSampler();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    static void _set_m_ProfilingSampler(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSamplerFPSetup
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingSamplerFPSetup();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSamplerFPSetup
    static void _set_m_ProfilingSamplerFPSetup(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSamplerFPComplete
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingSamplerFPComplete();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSamplerFPComplete
    static void _set_m_ProfilingSamplerFPComplete(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSamplerFPUpload
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingSamplerFPUpload();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSamplerFPUpload
    static void _set_m_ProfilingSamplerFPUpload(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get instance field reference: private System.Int32 m_AdditionalLightsBufferId
    [[deprecated("Use field access instead!")]] int& dyn_m_AdditionalLightsBufferId();
    // Get instance field reference: private System.Int32 m_AdditionalLightsIndicesId
    [[deprecated("Use field access instead!")]] int& dyn_m_AdditionalLightsIndicesId();
    // Get instance field reference: private UnityEngine.Rendering.Universal.MixedLightingSetup m_MixedLightingSetup
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::MixedLightingSetup& dyn_m_MixedLightingSetup();
    // Get instance field reference: private UnityEngine.Vector4[] m_AdditionalLightPositions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_AdditionalLightPositions();
    // Get instance field reference: private UnityEngine.Vector4[] m_AdditionalLightColors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_AdditionalLightColors();
    // Get instance field reference: private UnityEngine.Vector4[] m_AdditionalLightAttenuations
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_AdditionalLightAttenuations();
    // Get instance field reference: private UnityEngine.Vector4[] m_AdditionalLightSpotDirections
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_AdditionalLightSpotDirections();
    // Get instance field reference: private UnityEngine.Vector4[] m_AdditionalLightOcclusionProbeChannels
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_AdditionalLightOcclusionProbeChannels();
    // Get instance field reference: private System.Single[] m_AdditionalLightsLayerMasks
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_AdditionalLightsLayerMasks();
    // Get instance field reference: private System.Boolean m_UseStructuredBuffer
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseStructuredBuffer();
    // Get instance field reference: private System.Boolean m_UseForwardPlus
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseForwardPlus();
    // Get instance field reference: private System.Int32 m_DirectionalLightCount
    [[deprecated("Use field access instead!")]] int& dyn_m_DirectionalLightCount();
    // Get instance field reference: private System.Int32 m_ActualTileWidth
    [[deprecated("Use field access instead!")]] int& dyn_m_ActualTileWidth();
    // Get instance field reference: private Unity.Mathematics.int2 m_TileResolution
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::int2& dyn_m_TileResolution();
    // Get instance field reference: private Unity.Jobs.JobHandle m_CullingHandle
    [[deprecated("Use field access instead!")]] ::Unity::Jobs::JobHandle& dyn_m_CullingHandle();
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.UInt32> m_ZBins
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<uint>& dyn_m_ZBins();
    // Get instance field reference: private UnityEngine.GraphicsBuffer m_ZBinsBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::GraphicsBuffer*& dyn_m_ZBinsBuffer();
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.UInt32> m_TileMasks
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<uint>& dyn_m_TileMasks();
    // Get instance field reference: private UnityEngine.GraphicsBuffer m_TileMasksBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::GraphicsBuffer*& dyn_m_TileMasksBuffer();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LightCookieManager m_LightCookieManager
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LightCookieManager*& dyn_m_LightCookieManager();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ReflectionProbeManager m_ReflectionProbeManager
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ReflectionProbeManager& dyn_m_ReflectionProbeManager();
    // Get instance field reference: private System.Int32 m_WordsPerTile
    [[deprecated("Use field access instead!")]] int& dyn_m_WordsPerTile();
    // Get instance field reference: private System.Single m_ZBinScale
    [[deprecated("Use field access instead!")]] float& dyn_m_ZBinScale();
    // Get instance field reference: private System.Single m_ZBinOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_ZBinOffset();
    // Get instance field reference: private System.Int32 m_LightCount
    [[deprecated("Use field access instead!")]] int& dyn_m_LightCount();
    // Get instance field reference: private System.Int32 m_BinCount
    [[deprecated("Use field access instead!")]] int& dyn_m_BinCount();
    // public System.Void .ctor()
    // Offset: 0x530AE7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ForwardLights* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Internal::ForwardLights::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ForwardLights*, creationType>()));
    }
    // System.Void .ctor(UnityEngine.Rendering.Universal.Internal.ForwardLights/InitParams initParams)
    // Offset: 0x530AFD4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ForwardLights* New_ctor(::UnityEngine::Rendering::Universal::Internal::ForwardLights::InitParams initParams) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Internal::ForwardLights::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ForwardLights*, creationType>(initParams)));
    }
    // private System.Void CreateForwardPlusBuffers()
    // Offset: 0x530B420
    void CreateForwardPlusBuffers();
    // UnityEngine.Rendering.Universal.ReflectionProbeManager get_reflectionProbeManager()
    // Offset: 0x530B5FC
    ::UnityEngine::Rendering::Universal::ReflectionProbeManager get_reflectionProbeManager();
    // static private System.Int32 AlignByteCount(System.Int32 count, System.Int32 align)
    // Offset: 0x530B60C
    static int AlignByteCount(int count, int align);
    // System.Void PreSetup(ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x530B620
    void PreSetup(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public System.Void Setup(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x530CABC
    void Setup(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // System.Void Cleanup()
    // Offset: 0x530D4BC
    void Cleanup();
    // private System.Void InitializeLightConstants(Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleLight> lights, System.Int32 lightIndex, out UnityEngine.Vector4 lightPos, out UnityEngine.Vector4 lightColor, out UnityEngine.Vector4 lightAttenuation, out UnityEngine.Vector4 lightSpotDir, out UnityEngine.Vector4 lightOcclusionProbeChannel, out System.UInt32 lightLayerMask, out System.Boolean isSubtractive)
    // Offset: 0x530D588
    void InitializeLightConstants(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight> lights, int lightIndex, ByRef<::UnityEngine::Vector4> lightPos, ByRef<::UnityEngine::Vector4> lightColor, ByRef<::UnityEngine::Vector4> lightAttenuation, ByRef<::UnityEngine::Vector4> lightSpotDir, ByRef<::UnityEngine::Vector4> lightOcclusionProbeChannel, ByRef<uint> lightLayerMask, ByRef<bool> isSubtractive);
    // private System.Void SetupShaderLightConstants(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x530D3E0
    void SetupShaderLightConstants(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void SetupMainLightConstants(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.LightData lightData)
    // Offset: 0x530D77C
    void SetupMainLightConstants(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::LightData> lightData);
    // private System.Void SetupAdditionalLightConstants(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x530D8C0
    void SetupAdditionalLightConstants(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Int32 SetupPerObjectLightIndices(UnityEngine.Rendering.CullingResults cullResults, ref UnityEngine.Rendering.Universal.LightData lightData)
    // Offset: 0x530DDE4
    int SetupPerObjectLightIndices(::UnityEngine::Rendering::CullingResults cullResults, ByRef<::UnityEngine::Rendering::Universal::LightData> lightData);
    // static private System.Void .cctor()
    // Offset: 0x530DF9C
    static void _cctor();
    // static System.Boolean <PreSetup>g__IsProbeGreater|39_0(UnityEngine.Rendering.VisibleReflectionProbe probe, UnityEngine.Rendering.VisibleReflectionProbe otherProbe)
    // Offset: 0x530CA08
    static bool $PreSetup$g__IsProbeGreater_39_0(::UnityEngine::Rendering::VisibleReflectionProbe probe, ::UnityEngine::Rendering::VisibleReflectionProbe otherProbe);
    // static UnityEngine.Rendering.Universal.ShEvalMode <Setup>g__ShAutoDetect|40_0(UnityEngine.Rendering.Universal.ShEvalMode mode)
    // Offset: 0x530D418
    static ::UnityEngine::Rendering::Universal::ShEvalMode $Setup$g__ShAutoDetect_40_0(::UnityEngine::Rendering::Universal::ShEvalMode mode);
  }; // UnityEngine.Rendering.Universal.Internal.ForwardLights
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Internal::ForwardLights::InitParams, "UnityEngine.Rendering.Universal.Internal", "ForwardLights/InitParams");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::CreateForwardPlusBuffers
// Il2CppName: CreateForwardPlusBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::ForwardLights::*)()>(&UnityEngine::Rendering::Universal::Internal::ForwardLights::CreateForwardPlusBuffers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::ForwardLights*), "CreateForwardPlusBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::get_reflectionProbeManager
// Il2CppName: get_reflectionProbeManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ReflectionProbeManager (UnityEngine::Rendering::Universal::Internal::ForwardLights::*)()>(&UnityEngine::Rendering::Universal::Internal::ForwardLights::get_reflectionProbeManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::ForwardLights*), "get_reflectionProbeManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::AlignByteCount
// Il2CppName: AlignByteCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&UnityEngine::Rendering::Universal::Internal::ForwardLights::AlignByteCount)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* align = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::ForwardLights*), "AlignByteCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count, align});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::PreSetup
// Il2CppName: PreSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::ForwardLights::*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::ForwardLights::PreSetup)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::ForwardLights*), "PreSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::ForwardLights::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::ForwardLights::Setup)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::ForwardLights*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::ForwardLights::*)()>(&UnityEngine::Rendering::Universal::Internal::ForwardLights::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::ForwardLights*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::InitializeLightConstants
// Il2CppName: InitializeLightConstants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::ForwardLights::*)(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight>, int, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, ByRef<uint>, ByRef<bool>)>(&UnityEngine::Rendering::Universal::Internal::ForwardLights::InitializeLightConstants)> {
  static const MethodInfo* get() {
    static auto* lights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VisibleLight")})->byval_arg;
    static auto* lightIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lightPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* lightColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* lightAttenuation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* lightSpotDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* lightOcclusionProbeChannel = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* lightLayerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* isSubtractive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::ForwardLights*), "InitializeLightConstants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lights, lightIndex, lightPos, lightColor, lightAttenuation, lightSpotDir, lightOcclusionProbeChannel, lightLayerMask, isSubtractive});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::SetupShaderLightConstants
// Il2CppName: SetupShaderLightConstants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::ForwardLights::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::ForwardLights::SetupShaderLightConstants)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::ForwardLights*), "SetupShaderLightConstants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::SetupMainLightConstants
// Il2CppName: SetupMainLightConstants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::ForwardLights::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::LightData>)>(&UnityEngine::Rendering::Universal::Internal::ForwardLights::SetupMainLightConstants)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* lightData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::ForwardLights*), "SetupMainLightConstants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, lightData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::SetupAdditionalLightConstants
// Il2CppName: SetupAdditionalLightConstants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::ForwardLights::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::ForwardLights::SetupAdditionalLightConstants)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::ForwardLights*), "SetupAdditionalLightConstants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::SetupPerObjectLightIndices
// Il2CppName: SetupPerObjectLightIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::ForwardLights::*)(::UnityEngine::Rendering::CullingResults, ByRef<::UnityEngine::Rendering::Universal::LightData>)>(&UnityEngine::Rendering::Universal::Internal::ForwardLights::SetupPerObjectLightIndices)> {
  static const MethodInfo* get() {
    static auto* cullResults = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CullingResults")->byval_arg;
    static auto* lightData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::ForwardLights*), "SetupPerObjectLightIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cullResults, lightData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::Internal::ForwardLights::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::ForwardLights*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::$PreSetup$g__IsProbeGreater_39_0
// Il2CppName: <PreSetup>g__IsProbeGreater|39_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::VisibleReflectionProbe, ::UnityEngine::Rendering::VisibleReflectionProbe)>(&UnityEngine::Rendering::Universal::Internal::ForwardLights::$PreSetup$g__IsProbeGreater_39_0)> {
  static const MethodInfo* get() {
    static auto* probe = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VisibleReflectionProbe")->byval_arg;
    static auto* otherProbe = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VisibleReflectionProbe")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::ForwardLights*), "<PreSetup>g__IsProbeGreater|39_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{probe, otherProbe});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::ForwardLights::$Setup$g__ShAutoDetect_40_0
// Il2CppName: <Setup>g__ShAutoDetect|40_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ShEvalMode (*)(::UnityEngine::Rendering::Universal::ShEvalMode)>(&UnityEngine::Rendering::Universal::Internal::ForwardLights::$Setup$g__ShAutoDetect_40_0)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ShEvalMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::ForwardLights*), "<Setup>g__ShAutoDetect|40_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
