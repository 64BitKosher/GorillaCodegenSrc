// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize
#include "UnityEngine/Rendering/Universal/RenderingLayerUtils_MaskSize.hpp"
// Including type: UnityEngine.Rendering.Universal.MixedLightingSetup
#include "UnityEngine/Rendering/Universal/MixedLightingSetup.hpp"
// Including type: UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle
#include "UnityEngine/Experimental/Rendering/RenderGraphModule/TextureHandle.hpp"
// Including type: UnityEngine.Experimental.Rendering.GraphicsFormat
#include "UnityEngine/Experimental/Rendering/GraphicsFormat.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Rendering.VisibleLight
#include "UnityEngine/Rendering/VisibleLight.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal::Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // Forward declaring type: AdditionalLightsShadowCasterPass
  class AdditionalLightsShadowCasterPass;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: StencilState
  struct StencilState;
  // Forward declaring type: RenderStateBlock
  struct RenderStateBlock;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: RenderTextureDescriptor
  struct RenderTextureDescriptor;
  // Skipping declaration: LightType because it is already included!
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: LightCookieManager
  class LightCookieManager;
  // Forward declaring type: RenderingData
  struct RenderingData;
  // Forward declaring type: LightData
  struct LightData;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // Forward declaring type: DeferredLights
  class DeferredLights;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::Internal::DeferredLights);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Internal::DeferredLights*, "UnityEngine.Rendering.Universal.Internal", "DeferredLights");
// Type namespace: UnityEngine.Rendering.Universal.Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.Internal.DeferredLights
  // [TokenAttribute] Offset: FFFFFFFF
  class DeferredLights : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::DeferredLights::ShaderConstants
    class ShaderConstants;
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::DeferredLights::StencilDeferredPasses
    struct StencilDeferredPasses;
    // Nested type: ::UnityEngine::Rendering::Universal::Internal::DeferredLights::InitParams
    struct InitParams;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.Universal.Internal.DeferredLights/InitParams
    // [TokenAttribute] Offset: FFFFFFFF
    struct InitParams/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Material stencilDeferredMaterial
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Material* stencilDeferredMaterial;
      // Field size check
      static_assert(sizeof(::UnityEngine::Material*) == 0x8);
      // public UnityEngine.Rendering.Universal.LightCookieManager lightCookieManager
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::Rendering::Universal::LightCookieManager* lightCookieManager;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rendering::Universal::LightCookieManager*) == 0x8);
      public:
      // Creating value type constructor for type: InitParams
      constexpr InitParams(::UnityEngine::Material* stencilDeferredMaterial_ = {}, ::UnityEngine::Rendering::Universal::LightCookieManager* lightCookieManager_ = {}) noexcept : stencilDeferredMaterial{stencilDeferredMaterial_}, lightCookieManager{lightCookieManager_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Material stencilDeferredMaterial
      [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_stencilDeferredMaterial();
      // Get instance field reference: public UnityEngine.Rendering.Universal.LightCookieManager lightCookieManager
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LightCookieManager*& dyn_lightCookieManager();
    }; // UnityEngine.Rendering.Universal.Internal.DeferredLights/InitParams
    #pragma pack(pop)
    static check_size<sizeof(DeferredLights::InitParams), 8 + sizeof(::UnityEngine::Rendering::Universal::LightCookieManager*)> __UnityEngine_Rendering_Universal_Internal_DeferredLights_InitParamsSizeCheck;
    static_assert(sizeof(DeferredLights::InitParams) == 0x10);
    public:
    // private UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize <RenderingLayerMaskSize>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize RenderingLayerMaskSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize) == 0x4);
    // private System.Boolean <UseDecalLayers>k__BackingField
    // Size: 0x1
    // Offset: 0x14
    bool UseDecalLayers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <UseRenderPass>k__BackingField
    // Size: 0x1
    // Offset: 0x15
    bool UseRenderPass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <HasDepthPrepass>k__BackingField
    // Size: 0x1
    // Offset: 0x16
    bool HasDepthPrepass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <HasNormalPrepass>k__BackingField
    // Size: 0x1
    // Offset: 0x17
    bool HasNormalPrepass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <HasRenderingLayerPrepass>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool HasRenderingLayerPrepass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsOverlay>k__BackingField
    // Size: 0x1
    // Offset: 0x19
    bool IsOverlay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_AccurateGbufferNormals
    // Size: 0x1
    // Offset: 0x1A
    bool m_AccurateGbufferNormals;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Rendering.Universal.MixedLightingSetup <MixedLightingSetup>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    ::UnityEngine::Rendering::Universal::MixedLightingSetup MixedLightingSetup;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::MixedLightingSetup) == 0x4);
    // private System.Boolean <UseJobSystem>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool UseJobSystem;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 <RenderWidth>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    int RenderWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <RenderHeight>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    int RenderHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.RTHandle[] <GbufferAttachments>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Rendering::RTHandle*> GbufferAttachments;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::RTHandle*>) == 0x8);
    // private UnityEngine.Rendering.RTHandle[] GbufferRTHandles
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Rendering::RTHandle*> GbufferRTHandles;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::RTHandle*>) == 0x8);
    // private UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle[] <GbufferTextureHandles>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> GbufferTextureHandles;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>) == 0x8);
    // private UnityEngine.Rendering.RTHandle[] <DeferredInputAttachments>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Rendering::RTHandle*> DeferredInputAttachments;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::RTHandle*>) == 0x8);
    // private System.Boolean[] <DeferredInputIsTransient>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<bool> DeferredInputIsTransient;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    // private UnityEngine.Rendering.RTHandle <DepthAttachment>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Rendering::RTHandle* DepthAttachment;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle <DepthCopyTexture>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Rendering::RTHandle* DepthCopyTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Experimental.Rendering.GraphicsFormat[] <GbufferFormats>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat> GbufferFormats;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat>) == 0x8);
    // private UnityEngine.Rendering.RTHandle <DepthAttachmentHandle>k__BackingField
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Rendering::RTHandle* DepthAttachmentHandle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private Unity.Collections.NativeArray`1<System.UInt16> m_stencilVisLights
    // Size: 0xFFFFFFFF
    // Offset: 0x78
    ::Unity::Collections::NativeArray_1<uint16_t> m_stencilVisLights;
    // private Unity.Collections.NativeArray`1<System.UInt16> m_stencilVisLightOffsets
    // Size: 0xFFFFFFFF
    // Offset: 0x88
    ::Unity::Collections::NativeArray_1<uint16_t> m_stencilVisLightOffsets;
    // private UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass m_AdditionalLightsShadowCasterPass
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass* m_AdditionalLightsShadowCasterPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*) == 0x8);
    // private UnityEngine.Mesh m_SphereMesh
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Mesh* m_SphereMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Mesh m_HemisphereMesh
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Mesh* m_HemisphereMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Mesh m_FullscreenMesh
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Mesh* m_FullscreenMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Material m_StencilDeferredMaterial
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Material* m_StencilDeferredMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Int32[] m_StencilDeferredPasses
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<int> m_StencilDeferredPasses;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private UnityEngine.Matrix4x4[] m_ScreenToWorld
    // Size: 0x8
    // Offset: 0xC8
    ::ArrayW<::UnityEngine::Matrix4x4> m_ScreenToWorld;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // private UnityEngine.Rendering.ProfilingSampler m_ProfilingSamplerDeferredStencilPass
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::Rendering::ProfilingSampler* m_ProfilingSamplerDeferredStencilPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // private UnityEngine.Rendering.ProfilingSampler m_ProfilingSamplerDeferredFogPass
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::Rendering::ProfilingSampler* m_ProfilingSamplerDeferredFogPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // private UnityEngine.Rendering.ProfilingSampler m_ProfilingSamplerClearStencilPartialPass
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::Rendering::ProfilingSampler* m_ProfilingSamplerClearStencilPartialPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // private UnityEngine.Rendering.Universal.LightCookieManager m_LightCookieManager
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Rendering::Universal::LightCookieManager* m_LightCookieManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LightCookieManager*) == 0x8);
    public:
    // Get static field: static readonly System.String[] k_GBufferNames
    static ::ArrayW<::StringW> _get_k_GBufferNames();
    // Set static field: static readonly System.String[] k_GBufferNames
    static void _set_k_GBufferNames(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.String[] k_StencilDeferredPassNames
    static ::ArrayW<::StringW> _get_k_StencilDeferredPassNames();
    // Set static field: static private readonly System.String[] k_StencilDeferredPassNames
    static void _set_k_StencilDeferredPassNames(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.UInt16 k_InvalidLightOffset
    static uint16_t _get_k_InvalidLightOffset();
    // Set static field: static private readonly System.UInt16 k_InvalidLightOffset
    static void _set_k_InvalidLightOffset(uint16_t value);
    // Get static field: static private readonly System.String k_SetupLights
    static ::StringW _get_k_SetupLights();
    // Set static field: static private readonly System.String k_SetupLights
    static void _set_k_SetupLights(::StringW value);
    // Get static field: static private readonly System.String k_DeferredPass
    static ::StringW _get_k_DeferredPass();
    // Set static field: static private readonly System.String k_DeferredPass
    static void _set_k_DeferredPass(::StringW value);
    // Get static field: static private readonly System.String k_DeferredStencilPass
    static ::StringW _get_k_DeferredStencilPass();
    // Set static field: static private readonly System.String k_DeferredStencilPass
    static void _set_k_DeferredStencilPass(::StringW value);
    // Get static field: static private readonly System.String k_DeferredFogPass
    static ::StringW _get_k_DeferredFogPass();
    // Set static field: static private readonly System.String k_DeferredFogPass
    static void _set_k_DeferredFogPass(::StringW value);
    // Get static field: static private readonly System.String k_ClearStencilPartial
    static ::StringW _get_k_ClearStencilPartial();
    // Set static field: static private readonly System.String k_ClearStencilPartial
    static void _set_k_ClearStencilPartial(::StringW value);
    // Get static field: static private readonly System.String k_SetupLightConstants
    static ::StringW _get_k_SetupLightConstants();
    // Set static field: static private readonly System.String k_SetupLightConstants
    static void _set_k_SetupLightConstants(::StringW value);
    // Get static field: static private readonly System.Single kStencilShapeGuard
    static float _get_kStencilShapeGuard();
    // Set static field: static private readonly System.Single kStencilShapeGuard
    static void _set_kStencilShapeGuard(float value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSetupLights
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingSetupLights();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSetupLights
    static void _set_m_ProfilingSetupLights(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingDeferredPass
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingDeferredPass();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingDeferredPass
    static void _set_m_ProfilingDeferredPass(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSetupLightConstants
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingSetupLightConstants();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSetupLightConstants
    static void _set_m_ProfilingSetupLightConstants(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get instance field reference: private UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize <RenderingLayerMaskSize>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize& dyn_$RenderingLayerMaskSize$k__BackingField();
    // Get instance field reference: private System.Boolean <UseDecalLayers>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$UseDecalLayers$k__BackingField();
    // Get instance field reference: private System.Boolean <UseRenderPass>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$UseRenderPass$k__BackingField();
    // Get instance field reference: private System.Boolean <HasDepthPrepass>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$HasDepthPrepass$k__BackingField();
    // Get instance field reference: private System.Boolean <HasNormalPrepass>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$HasNormalPrepass$k__BackingField();
    // Get instance field reference: private System.Boolean <HasRenderingLayerPrepass>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$HasRenderingLayerPrepass$k__BackingField();
    // Get instance field reference: private System.Boolean <IsOverlay>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsOverlay$k__BackingField();
    // Get instance field reference: private System.Boolean m_AccurateGbufferNormals
    [[deprecated("Use field access instead!")]] bool& dyn_m_AccurateGbufferNormals();
    // Get instance field reference: private UnityEngine.Rendering.Universal.MixedLightingSetup <MixedLightingSetup>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::MixedLightingSetup& dyn_$MixedLightingSetup$k__BackingField();
    // Get instance field reference: private System.Boolean <UseJobSystem>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$UseJobSystem$k__BackingField();
    // Get instance field reference: private System.Int32 <RenderWidth>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$RenderWidth$k__BackingField();
    // Get instance field reference: private System.Int32 <RenderHeight>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$RenderHeight$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle[] <GbufferAttachments>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::RTHandle*>& dyn_$GbufferAttachments$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle[] GbufferRTHandles
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::RTHandle*>& dyn_GbufferRTHandles();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle[] <GbufferTextureHandles>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>& dyn_$GbufferTextureHandles$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle[] <DeferredInputAttachments>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::RTHandle*>& dyn_$DeferredInputAttachments$k__BackingField();
    // Get instance field reference: private System.Boolean[] <DeferredInputIsTransient>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_$DeferredInputIsTransient$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle <DepthAttachment>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_$DepthAttachment$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle <DepthCopyTexture>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_$DepthCopyTexture$k__BackingField();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.GraphicsFormat[] <GbufferFormats>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat>& dyn_$GbufferFormats$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle <DepthAttachmentHandle>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_$DepthAttachmentHandle$k__BackingField();
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.UInt16> m_stencilVisLights
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<uint16_t>& dyn_m_stencilVisLights();
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.UInt16> m_stencilVisLightOffsets
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<uint16_t>& dyn_m_stencilVisLightOffsets();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass m_AdditionalLightsShadowCasterPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*& dyn_m_AdditionalLightsShadowCasterPass();
    // Get instance field reference: private UnityEngine.Mesh m_SphereMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_m_SphereMesh();
    // Get instance field reference: private UnityEngine.Mesh m_HemisphereMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_m_HemisphereMesh();
    // Get instance field reference: private UnityEngine.Mesh m_FullscreenMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_m_FullscreenMesh();
    // Get instance field reference: private UnityEngine.Material m_StencilDeferredMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_StencilDeferredMaterial();
    // Get instance field reference: private System.Int32[] m_StencilDeferredPasses
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_m_StencilDeferredPasses();
    // Get instance field reference: private UnityEngine.Matrix4x4[] m_ScreenToWorld
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn_m_ScreenToWorld();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler m_ProfilingSamplerDeferredStencilPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_m_ProfilingSamplerDeferredStencilPass();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler m_ProfilingSamplerDeferredFogPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_m_ProfilingSamplerDeferredFogPass();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler m_ProfilingSamplerClearStencilPartialPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_m_ProfilingSamplerClearStencilPartialPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LightCookieManager m_LightCookieManager
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LightCookieManager*& dyn_m_LightCookieManager();
    // System.Int32 get_GBufferAlbedoIndex()
    // Offset: 0x530090C
    int get_GBufferAlbedoIndex();
    // System.Int32 get_GBufferSpecularMetallicIndex()
    // Offset: 0x5300914
    int get_GBufferSpecularMetallicIndex();
    // System.Int32 get_GBufferNormalSmoothnessIndex()
    // Offset: 0x530091C
    int get_GBufferNormalSmoothnessIndex();
    // System.Int32 get_GBufferLightingIndex()
    // Offset: 0x5300924
    int get_GBufferLightingIndex();
    // System.Int32 get_GbufferDepthIndex()
    // Offset: 0x530092C
    int get_GbufferDepthIndex();
    // System.Int32 get_GBufferRenderingLayers()
    // Offset: 0x5300940
    int get_GBufferRenderingLayers();
    // System.Int32 get_GBufferShadowMask()
    // Offset: 0x53009A4
    int get_GBufferShadowMask();
    // System.Int32 get_GBufferSliceCount()
    // Offset: 0x5300A0C
    int get_GBufferSliceCount();
    // UnityEngine.Experimental.Rendering.GraphicsFormat GetGBufferFormat(System.Int32 index)
    // Offset: 0x5300A58
    ::UnityEngine::Experimental::Rendering::GraphicsFormat GetGBufferFormat(int index);
    // System.Boolean get_UseShadowMask()
    // Offset: 0x53009FC
    bool get_UseShadowMask();
    // System.Boolean get_UseRenderingLayers()
    // Offset: 0x5300978
    bool get_UseRenderingLayers();
    // UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize get_RenderingLayerMaskSize()
    // Offset: 0x5300BB0
    ::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize get_RenderingLayerMaskSize();
    // System.Void set_RenderingLayerMaskSize(UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize value)
    // Offset: 0x5300BB8
    void set_RenderingLayerMaskSize(::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize value);
    // System.Boolean get_UseDecalLayers()
    // Offset: 0x5300BC0
    bool get_UseDecalLayers();
    // System.Void set_UseDecalLayers(System.Boolean value)
    // Offset: 0x5300BC8
    void set_UseDecalLayers(bool value);
    // System.Boolean get_UseLightLayers()
    // Offset: 0x5300B50
    bool get_UseLightLayers();
    // System.Boolean get_UseRenderPass()
    // Offset: 0x5300BD4
    bool get_UseRenderPass();
    // System.Void set_UseRenderPass(System.Boolean value)
    // Offset: 0x5300BDC
    void set_UseRenderPass(bool value);
    // System.Boolean get_HasDepthPrepass()
    // Offset: 0x5300BE8
    bool get_HasDepthPrepass();
    // System.Void set_HasDepthPrepass(System.Boolean value)
    // Offset: 0x5300BF0
    void set_HasDepthPrepass(bool value);
    // System.Boolean get_HasNormalPrepass()
    // Offset: 0x5300BFC
    bool get_HasNormalPrepass();
    // System.Void set_HasNormalPrepass(System.Boolean value)
    // Offset: 0x5300C04
    void set_HasNormalPrepass(bool value);
    // System.Boolean get_HasRenderingLayerPrepass()
    // Offset: 0x5300C10
    bool get_HasRenderingLayerPrepass();
    // System.Void set_HasRenderingLayerPrepass(System.Boolean value)
    // Offset: 0x5300C18
    void set_HasRenderingLayerPrepass(bool value);
    // System.Boolean get_IsOverlay()
    // Offset: 0x5300C24
    bool get_IsOverlay();
    // System.Void set_IsOverlay(System.Boolean value)
    // Offset: 0x5300C2C
    void set_IsOverlay(bool value);
    // System.Boolean get_AccurateGbufferNormals()
    // Offset: 0x5300C38
    bool get_AccurateGbufferNormals();
    // System.Void set_AccurateGbufferNormals(System.Boolean value)
    // Offset: 0x5300C40
    void set_AccurateGbufferNormals(bool value);
    // UnityEngine.Rendering.Universal.MixedLightingSetup get_MixedLightingSetup()
    // Offset: 0x5300CC4
    ::UnityEngine::Rendering::Universal::MixedLightingSetup get_MixedLightingSetup();
    // System.Void set_MixedLightingSetup(UnityEngine.Rendering.Universal.MixedLightingSetup value)
    // Offset: 0x5300CCC
    void set_MixedLightingSetup(::UnityEngine::Rendering::Universal::MixedLightingSetup value);
    // System.Boolean get_UseJobSystem()
    // Offset: 0x5300CD4
    bool get_UseJobSystem();
    // System.Void set_UseJobSystem(System.Boolean value)
    // Offset: 0x5300CDC
    void set_UseJobSystem(bool value);
    // System.Int32 get_RenderWidth()
    // Offset: 0x5300CE8
    int get_RenderWidth();
    // System.Void set_RenderWidth(System.Int32 value)
    // Offset: 0x5300CF0
    void set_RenderWidth(int value);
    // System.Int32 get_RenderHeight()
    // Offset: 0x5300CF8
    int get_RenderHeight();
    // System.Void set_RenderHeight(System.Int32 value)
    // Offset: 0x5300D00
    void set_RenderHeight(int value);
    // UnityEngine.Rendering.RTHandle[] get_GbufferAttachments()
    // Offset: 0x5300D08
    ::ArrayW<::UnityEngine::Rendering::RTHandle*> get_GbufferAttachments();
    // System.Void set_GbufferAttachments(UnityEngine.Rendering.RTHandle[] value)
    // Offset: 0x5300D10
    void set_GbufferAttachments(::ArrayW<::UnityEngine::Rendering::RTHandle*> value);
    // UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle[] get_GbufferTextureHandles()
    // Offset: 0x5300D18
    ::ArrayW<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> get_GbufferTextureHandles();
    // System.Void set_GbufferTextureHandles(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle[] value)
    // Offset: 0x5300D20
    void set_GbufferTextureHandles(::ArrayW<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> value);
    // UnityEngine.Rendering.RTHandle[] get_DeferredInputAttachments()
    // Offset: 0x5300D28
    ::ArrayW<::UnityEngine::Rendering::RTHandle*> get_DeferredInputAttachments();
    // System.Void set_DeferredInputAttachments(UnityEngine.Rendering.RTHandle[] value)
    // Offset: 0x5300D30
    void set_DeferredInputAttachments(::ArrayW<::UnityEngine::Rendering::RTHandle*> value);
    // System.Boolean[] get_DeferredInputIsTransient()
    // Offset: 0x5300D38
    ::ArrayW<bool> get_DeferredInputIsTransient();
    // System.Void set_DeferredInputIsTransient(System.Boolean[] value)
    // Offset: 0x5300D40
    void set_DeferredInputIsTransient(::ArrayW<bool> value);
    // UnityEngine.Rendering.RTHandle get_DepthAttachment()
    // Offset: 0x5300D48
    ::UnityEngine::Rendering::RTHandle* get_DepthAttachment();
    // System.Void set_DepthAttachment(UnityEngine.Rendering.RTHandle value)
    // Offset: 0x5300D50
    void set_DepthAttachment(::UnityEngine::Rendering::RTHandle* value);
    // UnityEngine.Rendering.RTHandle get_DepthCopyTexture()
    // Offset: 0x5300D58
    ::UnityEngine::Rendering::RTHandle* get_DepthCopyTexture();
    // System.Void set_DepthCopyTexture(UnityEngine.Rendering.RTHandle value)
    // Offset: 0x5300D60
    void set_DepthCopyTexture(::UnityEngine::Rendering::RTHandle* value);
    // UnityEngine.Experimental.Rendering.GraphicsFormat[] get_GbufferFormats()
    // Offset: 0x5300D68
    ::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat> get_GbufferFormats();
    // System.Void set_GbufferFormats(UnityEngine.Experimental.Rendering.GraphicsFormat[] value)
    // Offset: 0x5300D70
    void set_GbufferFormats(::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat> value);
    // UnityEngine.Rendering.RTHandle get_DepthAttachmentHandle()
    // Offset: 0x5300D78
    ::UnityEngine::Rendering::RTHandle* get_DepthAttachmentHandle();
    // System.Void set_DepthAttachmentHandle(UnityEngine.Rendering.RTHandle value)
    // Offset: 0x5300D80
    void set_DepthAttachmentHandle(::UnityEngine::Rendering::RTHandle* value);
    // System.Void .ctor(UnityEngine.Rendering.Universal.Internal.DeferredLights/InitParams initParams, System.Boolean useNativeRenderPass)
    // Offset: 0x5300D88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DeferredLights* New_ctor(::UnityEngine::Rendering::Universal::Internal::DeferredLights::InitParams initParams, bool useNativeRenderPass) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Internal::DeferredLights::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DeferredLights*, creationType>(initParams, useNativeRenderPass)));
    }
    // System.Void SetupLights(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x53013FC
    void SetupLights(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // System.Void ResolveMixedLightingMode(ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5301B88
    void ResolveMixedLightingMode(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // System.Void DisableFramebufferFetchInput()
    // Offset: 0x5302000
    void DisableFramebufferFetchInput();
    // System.Void ReleaseGbufferResources()
    // Offset: 0x5302008
    void ReleaseGbufferResources();
    // System.Void ReAllocateGBufferIfNeeded(UnityEngine.RenderTextureDescriptor gbufferSlice, System.Int32 gbufferIndex)
    // Offset: 0x53020A8
    void ReAllocateGBufferIfNeeded(::UnityEngine::RenderTextureDescriptor gbufferSlice, int gbufferIndex);
    // System.Void CreateGbufferResources()
    // Offset: 0x5301D00
    void CreateGbufferResources();
    // System.Void UpdateDeferredInputAttachments()
    // Offset: 0x53022A4
    void UpdateDeferredInputAttachments();
    // System.Boolean IsRuntimeSupportedThisFrame()
    // Offset: 0x5302488
    bool IsRuntimeSupportedThisFrame();
    // public System.Void Setup(ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass additionalLightsShadowCasterPass, System.Boolean hasDepthPrepass, System.Boolean hasNormalPrepass, System.Boolean hasRenderingLayerPrepass, UnityEngine.Rendering.RTHandle depthCopyTexture, UnityEngine.Rendering.RTHandle depthAttachment, UnityEngine.Rendering.RTHandle colorAttachment)
    // Offset: 0x5302524
    void Setup(ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass* additionalLightsShadowCasterPass, bool hasDepthPrepass, bool hasNormalPrepass, bool hasRenderingLayerPrepass, ::UnityEngine::Rendering::RTHandle* depthCopyTexture, ::UnityEngine::Rendering::RTHandle* depthAttachment, ::UnityEngine::Rendering::RTHandle* colorAttachment);
    // System.Void Setup(UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass additionalLightsShadowCasterPass)
    // Offset: 0x530277C
    void Setup(::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass* additionalLightsShadowCasterPass);
    // public System.Void OnCameraCleanup(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x5302784
    void OnCameraCleanup(::UnityEngine::Rendering::CommandBuffer* cmd);
    // static UnityEngine.Rendering.StencilState OverwriteStencil(UnityEngine.Rendering.StencilState s, System.Int32 stencilWriteMask)
    // Offset: 0x530285C
    static ::UnityEngine::Rendering::StencilState OverwriteStencil(::UnityEngine::Rendering::StencilState s, int stencilWriteMask);
    // static UnityEngine.Rendering.RenderStateBlock OverwriteStencil(UnityEngine.Rendering.RenderStateBlock block, System.Int32 stencilWriteMask, System.Int32 stencilRef)
    // Offset: 0x5302A10
    static ::UnityEngine::Rendering::RenderStateBlock OverwriteStencil(::UnityEngine::Rendering::RenderStateBlock block, int stencilWriteMask, int stencilRef);
    // System.Void ClearStencilPartial(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x5302C70
    void ClearStencilPartial(::UnityEngine::Rendering::CommandBuffer* cmd);
    // System.Void ExecuteDeferredPass(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5302F9C
    void ExecuteDeferredPass(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void SetupShaderLightConstants(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5301B80
    void SetupShaderLightConstants(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void SetupMainLightConstants(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.LightData lightData)
    // Offset: 0x5303C80
    void SetupMainLightConstants(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::LightData> lightData);
    // private System.Void SetupMatrixConstants(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5303260
    void SetupMatrixConstants(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void PrecomputeLights(out Unity.Collections.NativeArray`1<System.UInt16> stencilVisLights, out Unity.Collections.NativeArray`1<System.UInt16> stencilVisLightOffsets, ref Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleLight> visibleLights, System.Boolean hasAdditionalLights, UnityEngine.Matrix4x4 view, System.Boolean isOrthographic, System.Single zNear)
    // Offset: 0x53018A0
    void PrecomputeLights(ByRef<::Unity::Collections::NativeArray_1<uint16_t>> stencilVisLights, ByRef<::Unity::Collections::NativeArray_1<uint16_t>> stencilVisLightOffsets, ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight>> visibleLights, bool hasAdditionalLights, ::UnityEngine::Matrix4x4 view, bool isOrthographic, float zNear);
    // private System.Boolean HasStencilLightsOfType(UnityEngine.LightType type)
    // Offset: 0x53035FC
    bool HasStencilLightsOfType(::UnityEngine::LightType type);
    // private System.Void RenderStencilLights(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x53037C0
    void RenderStencilLights(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void SetAdditionalLightsShadowsKeyword(ref UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData, System.Boolean hasDeferredShadows)
    // Offset: 0x5305318
    void SetAdditionalLightsShadowsKeyword(ByRef<::UnityEngine::Rendering::CommandBuffer*> cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, bool hasDeferredShadows);
    // private System.Void RenderStencilDirectionalLights(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData, Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleLight> visibleLights, System.Int32 mainLightIndex)
    // Offset: 0x5303E1C
    void RenderStencilDirectionalLights(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight> visibleLights, int mainLightIndex);
    // private System.Void RenderStencilPointLights(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData, Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleLight> visibleLights)
    // Offset: 0x5304434
    void RenderStencilPointLights(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight> visibleLights);
    // private System.Void RenderStencilSpotLights(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData, Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleLight> visibleLights)
    // Offset: 0x5304B2C
    void RenderStencilSpotLights(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight> visibleLights);
    // private System.Void RenderSSAOBeforeShading(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5303674
    void RenderSSAOBeforeShading(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void RenderFog(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5303A78
    void RenderFog(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // private System.Void InitStencilDeferredMaterial()
    // Offset: 0x530103C
    void InitStencilDeferredMaterial();
    // static private UnityEngine.Mesh CreateSphereMesh()
    // Offset: 0x53053FC
    static ::UnityEngine::Mesh* CreateSphereMesh();
    // static private UnityEngine.Mesh CreateHemisphereMesh()
    // Offset: 0x53059E0
    static ::UnityEngine::Mesh* CreateHemisphereMesh();
    // static private UnityEngine.Mesh CreateFullscreenMesh()
    // Offset: 0x5302E50
    static ::UnityEngine::Mesh* CreateFullscreenMesh();
    // static private System.Void .cctor()
    // Offset: 0x5305F88
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.Internal.DeferredLights
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Internal::DeferredLights::InitParams, "UnityEngine.Rendering.Universal.Internal", "DeferredLights/InitParams");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GBufferAlbedoIndex
// Il2CppName: get_GBufferAlbedoIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GBufferAlbedoIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_GBufferAlbedoIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GBufferSpecularMetallicIndex
// Il2CppName: get_GBufferSpecularMetallicIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GBufferSpecularMetallicIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_GBufferSpecularMetallicIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GBufferNormalSmoothnessIndex
// Il2CppName: get_GBufferNormalSmoothnessIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GBufferNormalSmoothnessIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_GBufferNormalSmoothnessIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GBufferLightingIndex
// Il2CppName: get_GBufferLightingIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GBufferLightingIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_GBufferLightingIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GbufferDepthIndex
// Il2CppName: get_GbufferDepthIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GbufferDepthIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_GbufferDepthIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GBufferRenderingLayers
// Il2CppName: get_GBufferRenderingLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GBufferRenderingLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_GBufferRenderingLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GBufferShadowMask
// Il2CppName: get_GBufferShadowMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GBufferShadowMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_GBufferShadowMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GBufferSliceCount
// Il2CppName: get_GBufferSliceCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GBufferSliceCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_GBufferSliceCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::GetGBufferFormat
// Il2CppName: GetGBufferFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::GraphicsFormat (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(int)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::GetGBufferFormat)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "GetGBufferFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_UseShadowMask
// Il2CppName: get_UseShadowMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_UseShadowMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_UseShadowMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_UseRenderingLayers
// Il2CppName: get_UseRenderingLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_UseRenderingLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_UseRenderingLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_RenderingLayerMaskSize
// Il2CppName: get_RenderingLayerMaskSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_RenderingLayerMaskSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_RenderingLayerMaskSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_RenderingLayerMaskSize
// Il2CppName: set_RenderingLayerMaskSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_RenderingLayerMaskSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingLayerUtils/MaskSize")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_RenderingLayerMaskSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_UseDecalLayers
// Il2CppName: get_UseDecalLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_UseDecalLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_UseDecalLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_UseDecalLayers
// Il2CppName: set_UseDecalLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(bool)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_UseDecalLayers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_UseDecalLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_UseLightLayers
// Il2CppName: get_UseLightLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_UseLightLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_UseLightLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_UseRenderPass
// Il2CppName: get_UseRenderPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_UseRenderPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_UseRenderPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_UseRenderPass
// Il2CppName: set_UseRenderPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(bool)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_UseRenderPass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_UseRenderPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_HasDepthPrepass
// Il2CppName: get_HasDepthPrepass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_HasDepthPrepass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_HasDepthPrepass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_HasDepthPrepass
// Il2CppName: set_HasDepthPrepass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(bool)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_HasDepthPrepass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_HasDepthPrepass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_HasNormalPrepass
// Il2CppName: get_HasNormalPrepass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_HasNormalPrepass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_HasNormalPrepass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_HasNormalPrepass
// Il2CppName: set_HasNormalPrepass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(bool)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_HasNormalPrepass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_HasNormalPrepass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_HasRenderingLayerPrepass
// Il2CppName: get_HasRenderingLayerPrepass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_HasRenderingLayerPrepass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_HasRenderingLayerPrepass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_HasRenderingLayerPrepass
// Il2CppName: set_HasRenderingLayerPrepass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(bool)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_HasRenderingLayerPrepass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_HasRenderingLayerPrepass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_IsOverlay
// Il2CppName: get_IsOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_IsOverlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_IsOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_IsOverlay
// Il2CppName: set_IsOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(bool)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_IsOverlay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_IsOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_AccurateGbufferNormals
// Il2CppName: get_AccurateGbufferNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_AccurateGbufferNormals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_AccurateGbufferNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_AccurateGbufferNormals
// Il2CppName: set_AccurateGbufferNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(bool)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_AccurateGbufferNormals)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_AccurateGbufferNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_MixedLightingSetup
// Il2CppName: get_MixedLightingSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::MixedLightingSetup (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_MixedLightingSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_MixedLightingSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_MixedLightingSetup
// Il2CppName: set_MixedLightingSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::Universal::MixedLightingSetup)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_MixedLightingSetup)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "MixedLightingSetup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_MixedLightingSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_UseJobSystem
// Il2CppName: get_UseJobSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_UseJobSystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_UseJobSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_UseJobSystem
// Il2CppName: set_UseJobSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(bool)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_UseJobSystem)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_UseJobSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_RenderWidth
// Il2CppName: get_RenderWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_RenderWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_RenderWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_RenderWidth
// Il2CppName: set_RenderWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(int)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_RenderWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_RenderWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_RenderHeight
// Il2CppName: get_RenderHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_RenderHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_RenderHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_RenderHeight
// Il2CppName: set_RenderHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(int)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_RenderHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_RenderHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GbufferAttachments
// Il2CppName: get_GbufferAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rendering::RTHandle*> (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GbufferAttachments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_GbufferAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_GbufferAttachments
// Il2CppName: set_GbufferAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::ArrayW<::UnityEngine::Rendering::RTHandle*>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_GbufferAttachments)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_GbufferAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GbufferTextureHandles
// Il2CppName: get_GbufferTextureHandles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GbufferTextureHandles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_GbufferTextureHandles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_GbufferTextureHandles
// Il2CppName: set_GbufferTextureHandles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::ArrayW<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_GbufferTextureHandles)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_GbufferTextureHandles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_DeferredInputAttachments
// Il2CppName: get_DeferredInputAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rendering::RTHandle*> (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_DeferredInputAttachments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_DeferredInputAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_DeferredInputAttachments
// Il2CppName: set_DeferredInputAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::ArrayW<::UnityEngine::Rendering::RTHandle*>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_DeferredInputAttachments)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_DeferredInputAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_DeferredInputIsTransient
// Il2CppName: get_DeferredInputIsTransient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<bool> (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_DeferredInputIsTransient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_DeferredInputIsTransient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_DeferredInputIsTransient
// Il2CppName: set_DeferredInputIsTransient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::ArrayW<bool>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_DeferredInputIsTransient)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Boolean"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_DeferredInputIsTransient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_DepthAttachment
// Il2CppName: get_DepthAttachment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_DepthAttachment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_DepthAttachment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_DepthAttachment
// Il2CppName: set_DepthAttachment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_DepthAttachment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_DepthAttachment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_DepthCopyTexture
// Il2CppName: get_DepthCopyTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_DepthCopyTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_DepthCopyTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_DepthCopyTexture
// Il2CppName: set_DepthCopyTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_DepthCopyTexture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_DepthCopyTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GbufferFormats
// Il2CppName: get_GbufferFormats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat> (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_GbufferFormats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_GbufferFormats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_GbufferFormats
// Il2CppName: set_GbufferFormats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_GbufferFormats)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_GbufferFormats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::get_DepthAttachmentHandle
// Il2CppName: get_DepthAttachmentHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::get_DepthAttachmentHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "get_DepthAttachmentHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::set_DepthAttachmentHandle
// Il2CppName: set_DepthAttachmentHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::set_DepthAttachmentHandle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "set_DepthAttachmentHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::SetupLights
// Il2CppName: SetupLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::SetupLights)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "SetupLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::ResolveMixedLightingMode
// Il2CppName: ResolveMixedLightingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::ResolveMixedLightingMode)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "ResolveMixedLightingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::DisableFramebufferFetchInput
// Il2CppName: DisableFramebufferFetchInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::DisableFramebufferFetchInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "DisableFramebufferFetchInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::ReleaseGbufferResources
// Il2CppName: ReleaseGbufferResources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::ReleaseGbufferResources)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "ReleaseGbufferResources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::ReAllocateGBufferIfNeeded
// Il2CppName: ReAllocateGBufferIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::RenderTextureDescriptor, int)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::ReAllocateGBufferIfNeeded)> {
  static const MethodInfo* get() {
    static auto* gbufferSlice = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->byval_arg;
    static auto* gbufferIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "ReAllocateGBufferIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gbufferSlice, gbufferIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::CreateGbufferResources
// Il2CppName: CreateGbufferResources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::CreateGbufferResources)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "CreateGbufferResources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::UpdateDeferredInputAttachments
// Il2CppName: UpdateDeferredInputAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::UpdateDeferredInputAttachments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "UpdateDeferredInputAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::IsRuntimeSupportedThisFrame
// Il2CppName: IsRuntimeSupportedThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::IsRuntimeSupportedThisFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "IsRuntimeSupportedThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*, bool, bool, bool, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::Setup)> {
  static const MethodInfo* get() {
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* additionalLightsShadowCasterPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.Internal", "AdditionalLightsShadowCasterPass")->byval_arg;
    static auto* hasDepthPrepass = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasNormalPrepass = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasRenderingLayerPrepass = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* depthCopyTexture = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* depthAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* colorAttachment = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingData, additionalLightsShadowCasterPass, hasDepthPrepass, hasNormalPrepass, hasRenderingLayerPrepass, depthCopyTexture, depthAttachment, colorAttachment});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::Universal::Internal::AdditionalLightsShadowCasterPass*)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::Setup)> {
  static const MethodInfo* get() {
    static auto* additionalLightsShadowCasterPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.Internal", "AdditionalLightsShadowCasterPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{additionalLightsShadowCasterPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::OnCameraCleanup
// Il2CppName: OnCameraCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::OnCameraCleanup)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "OnCameraCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::OverwriteStencil
// Il2CppName: OverwriteStencil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::StencilState (*)(::UnityEngine::Rendering::StencilState, int)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::OverwriteStencil)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "StencilState")->byval_arg;
    static auto* stencilWriteMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "OverwriteStencil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, stencilWriteMask});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::OverwriteStencil
// Il2CppName: OverwriteStencil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderStateBlock (*)(::UnityEngine::Rendering::RenderStateBlock, int, int)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::OverwriteStencil)> {
  static const MethodInfo* get() {
    static auto* block = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderStateBlock")->byval_arg;
    static auto* stencilWriteMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* stencilRef = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "OverwriteStencil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block, stencilWriteMask, stencilRef});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::ClearStencilPartial
// Il2CppName: ClearStencilPartial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::ClearStencilPartial)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "ClearStencilPartial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::ExecuteDeferredPass
// Il2CppName: ExecuteDeferredPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::ExecuteDeferredPass)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "ExecuteDeferredPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::SetupShaderLightConstants
// Il2CppName: SetupShaderLightConstants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::SetupShaderLightConstants)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "SetupShaderLightConstants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::SetupMainLightConstants
// Il2CppName: SetupMainLightConstants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::LightData>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::SetupMainLightConstants)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* lightData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "SetupMainLightConstants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, lightData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::SetupMatrixConstants
// Il2CppName: SetupMatrixConstants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::SetupMatrixConstants)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "SetupMatrixConstants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::PrecomputeLights
// Il2CppName: PrecomputeLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(ByRef<::Unity::Collections::NativeArray_1<uint16_t>>, ByRef<::Unity::Collections::NativeArray_1<uint16_t>>, ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight>>, bool, ::UnityEngine::Matrix4x4, bool, float)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::PrecomputeLights)> {
  static const MethodInfo* get() {
    static auto* stencilVisLights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->this_arg;
    static auto* stencilVisLightOffsets = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->this_arg;
    static auto* visibleLights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VisibleLight")})->this_arg;
    static auto* hasAdditionalLights = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* view = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* isOrthographic = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* zNear = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "PrecomputeLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stencilVisLights, stencilVisLightOffsets, visibleLights, hasAdditionalLights, view, isOrthographic, zNear});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::HasStencilLightsOfType
// Il2CppName: HasStencilLightsOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::LightType)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::HasStencilLightsOfType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine", "LightType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "HasStencilLightsOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::RenderStencilLights
// Il2CppName: RenderStencilLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::RenderStencilLights)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "RenderStencilLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::SetAdditionalLightsShadowsKeyword
// Il2CppName: SetAdditionalLightsShadowsKeyword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(ByRef<::UnityEngine::Rendering::CommandBuffer*>, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, bool)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::SetAdditionalLightsShadowsKeyword)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->this_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* hasDeferredShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "SetAdditionalLightsShadowsKeyword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData, hasDeferredShadows});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::RenderStencilDirectionalLights
// Il2CppName: RenderStencilDirectionalLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight>, int)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::RenderStencilDirectionalLights)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* visibleLights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VisibleLight")})->byval_arg;
    static auto* mainLightIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "RenderStencilDirectionalLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData, visibleLights, mainLightIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::RenderStencilPointLights
// Il2CppName: RenderStencilPointLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::RenderStencilPointLights)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* visibleLights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VisibleLight")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "RenderStencilPointLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData, visibleLights});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::RenderStencilSpotLights
// Il2CppName: RenderStencilSpotLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VisibleLight>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::RenderStencilSpotLights)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* visibleLights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VisibleLight")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "RenderStencilSpotLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData, visibleLights});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::RenderSSAOBeforeShading
// Il2CppName: RenderSSAOBeforeShading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::RenderSSAOBeforeShading)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "RenderSSAOBeforeShading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::RenderFog
// Il2CppName: RenderFog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::RenderFog)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "RenderFog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::InitStencilDeferredMaterial
// Il2CppName: InitStencilDeferredMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Internal::DeferredLights::*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::InitStencilDeferredMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "InitStencilDeferredMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::CreateSphereMesh
// Il2CppName: CreateSphereMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::CreateSphereMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "CreateSphereMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::CreateHemisphereMesh
// Il2CppName: CreateHemisphereMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::CreateHemisphereMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "CreateHemisphereMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::CreateFullscreenMesh
// Il2CppName: CreateFullscreenMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::CreateFullscreenMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), "CreateFullscreenMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Internal::DeferredLights::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::Internal::DeferredLights::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Internal::DeferredLights*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
