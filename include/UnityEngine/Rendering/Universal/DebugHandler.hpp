// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.IDebugDisplaySettingsQuery
#include "UnityEngine/Rendering/IDebugDisplaySettingsQuery.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Rendering.RenderTargetIdentifier
#include "UnityEngine/Rendering/RenderTargetIdentifier.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: HDRDebugViewPass
  class HDRDebugViewPass;
  // Forward declaring type: UniversalRenderPipelineDebugDisplaySettings
  class UniversalRenderPipelineDebugDisplaySettings;
  // Forward declaring type: DebugDisplaySettingsLighting
  class DebugDisplaySettingsLighting;
  // Forward declaring type: DebugDisplaySettingsMaterial
  class DebugDisplaySettingsMaterial;
  // Forward declaring type: DebugDisplaySettingsRendering
  class DebugDisplaySettingsRendering;
  // Forward declaring type: CameraData
  struct CameraData;
  // Forward declaring type: ScriptableRendererData
  class ScriptableRendererData;
  // Forward declaring type: DebugFullScreenMode
  struct DebugFullScreenMode;
  // Forward declaring type: RenderingData
  struct RenderingData;
  // Forward declaring type: DebugRenderSetup
  class DebugRenderSetup;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Rect
  struct Rect;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
  // Forward declaring type: FilteringSettings
  struct FilteringSettings;
  // Forward declaring type: DrawingSettings
  struct DrawingSettings;
  // Forward declaring type: RenderStateBlock
  struct RenderStateBlock;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DebugHandler
  class DebugHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::DebugHandler);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DebugHandler*, "UnityEngine.Rendering.Universal", "DebugHandler");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.DebugHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugHandler : public ::Il2CppObject/*, public ::UnityEngine::Rendering::IDebugDisplaySettingsQuery*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable
    class DebugRenderPassEnumerable;
    // Nested type: ::UnityEngine::Rendering::Universal::DebugHandler::DrawFunction
    class DrawFunction;
    public:
    // private readonly UnityEngine.Material m_ReplacementMaterial
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Material* m_ReplacementMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private readonly UnityEngine.Material m_HDRDebugViewMaterial
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* m_HDRDebugViewMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Rendering.Universal.HDRDebugViewPass m_HDRDebugViewPass
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rendering::Universal::HDRDebugViewPass* m_HDRDebugViewPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::HDRDebugViewPass*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_DebugScreenTextureHandle
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Rendering::RTHandle* m_DebugScreenTextureHandle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private System.Boolean m_HasDebugRenderTarget
    // Size: 0x1
    // Offset: 0x30
    bool m_HasDebugRenderTarget;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_DebugRenderTargetSupportsStereo
    // Size: 0x1
    // Offset: 0x31
    bool m_DebugRenderTargetSupportsStereo;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_DebugRenderTargetSupportsStereo and: m_DebugRenderTargetPixelRect
    char __padding5[0x2] = {};
    // private UnityEngine.Vector4 m_DebugRenderTargetPixelRect
    // Size: 0x10
    // Offset: 0x34
    ::UnityEngine::Vector4 m_DebugRenderTargetPixelRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // Padding between fields: m_DebugRenderTargetPixelRect and: m_DebugRenderTargetIdentifier
    char __padding6[0x4] = {};
    // private UnityEngine.Rendering.RenderTargetIdentifier m_DebugRenderTargetIdentifier
    // Size: 0x24
    // Offset: 0x48
    ::UnityEngine::Rendering::RenderTargetIdentifier m_DebugRenderTargetIdentifier;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetIdentifier) == 0x24);
    // Padding between fields: m_DebugRenderTargetIdentifier and: m_DebugDisplaySettings
    char __padding7[0x4] = {};
    // private readonly UnityEngine.Rendering.Universal.UniversalRenderPipelineDebugDisplaySettings m_DebugDisplaySettings
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Rendering::Universal::UniversalRenderPipelineDebugDisplaySettings* m_DebugDisplaySettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::UniversalRenderPipelineDebugDisplaySettings*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::Rendering::IDebugDisplaySettingsQuery
    operator ::UnityEngine::Rendering::IDebugDisplaySettingsQuery() noexcept {
      return *reinterpret_cast<::UnityEngine::Rendering::IDebugDisplaySettingsQuery*>(this);
    }
    // Get static field: static private readonly System.Int32 k_DebugColorInvalidModePropertyId
    static int _get_k_DebugColorInvalidModePropertyId();
    // Set static field: static private readonly System.Int32 k_DebugColorInvalidModePropertyId
    static void _set_k_DebugColorInvalidModePropertyId(int value);
    // Get static field: static private readonly System.Int32 k_DebugColorPropertyId
    static int _get_k_DebugColorPropertyId();
    // Set static field: static private readonly System.Int32 k_DebugColorPropertyId
    static void _set_k_DebugColorPropertyId(int value);
    // Get static field: static private readonly System.Int32 k_DebugTexturePropertyId
    static int _get_k_DebugTexturePropertyId();
    // Set static field: static private readonly System.Int32 k_DebugTexturePropertyId
    static void _set_k_DebugTexturePropertyId(int value);
    // Get static field: static private readonly System.Int32 k_DebugTextureNoStereoPropertyId
    static int _get_k_DebugTextureNoStereoPropertyId();
    // Set static field: static private readonly System.Int32 k_DebugTextureNoStereoPropertyId
    static void _set_k_DebugTextureNoStereoPropertyId(int value);
    // Get static field: static private readonly System.Int32 k_DebugTextureDisplayRect
    static int _get_k_DebugTextureDisplayRect();
    // Set static field: static private readonly System.Int32 k_DebugTextureDisplayRect
    static void _set_k_DebugTextureDisplayRect(int value);
    // Get static field: static private readonly System.Int32 k_DebugRenderTargetSupportsStereo
    static int _get_k_DebugRenderTargetSupportsStereo();
    // Set static field: static private readonly System.Int32 k_DebugRenderTargetSupportsStereo
    static void _set_k_DebugRenderTargetSupportsStereo(int value);
    // Get static field: static private readonly System.Int32 k_DebugScreenTexturePropertyId
    static int _get_k_DebugScreenTexturePropertyId();
    // Set static field: static private readonly System.Int32 k_DebugScreenTexturePropertyId
    static void _set_k_DebugScreenTexturePropertyId(int value);
    // Get static field: static private readonly System.Int32 k_DebugMaterialModeId
    static int _get_k_DebugMaterialModeId();
    // Set static field: static private readonly System.Int32 k_DebugMaterialModeId
    static void _set_k_DebugMaterialModeId(int value);
    // Get static field: static private readonly System.Int32 k_DebugVertexAttributeModeId
    static int _get_k_DebugVertexAttributeModeId();
    // Set static field: static private readonly System.Int32 k_DebugVertexAttributeModeId
    static void _set_k_DebugVertexAttributeModeId(int value);
    // Get static field: static private readonly System.Int32 k_DebugMaterialValidationModeId
    static int _get_k_DebugMaterialValidationModeId();
    // Set static field: static private readonly System.Int32 k_DebugMaterialValidationModeId
    static void _set_k_DebugMaterialValidationModeId(int value);
    // Get static field: static private readonly System.Int32 k_DebugMipInfoModeId
    static int _get_k_DebugMipInfoModeId();
    // Set static field: static private readonly System.Int32 k_DebugMipInfoModeId
    static void _set_k_DebugMipInfoModeId(int value);
    // Get static field: static private readonly System.Int32 k_DebugSceneOverrideModeId
    static int _get_k_DebugSceneOverrideModeId();
    // Set static field: static private readonly System.Int32 k_DebugSceneOverrideModeId
    static void _set_k_DebugSceneOverrideModeId(int value);
    // Get static field: static private readonly System.Int32 k_DebugFullScreenModeId
    static int _get_k_DebugFullScreenModeId();
    // Set static field: static private readonly System.Int32 k_DebugFullScreenModeId
    static void _set_k_DebugFullScreenModeId(int value);
    // Get static field: static private readonly System.Int32 k_DebugValidationModeId
    static int _get_k_DebugValidationModeId();
    // Set static field: static private readonly System.Int32 k_DebugValidationModeId
    static void _set_k_DebugValidationModeId(int value);
    // Get static field: static private readonly System.Int32 k_DebugValidateBelowMinThresholdColorPropertyId
    static int _get_k_DebugValidateBelowMinThresholdColorPropertyId();
    // Set static field: static private readonly System.Int32 k_DebugValidateBelowMinThresholdColorPropertyId
    static void _set_k_DebugValidateBelowMinThresholdColorPropertyId(int value);
    // Get static field: static private readonly System.Int32 k_DebugValidateAboveMaxThresholdColorPropertyId
    static int _get_k_DebugValidateAboveMaxThresholdColorPropertyId();
    // Set static field: static private readonly System.Int32 k_DebugValidateAboveMaxThresholdColorPropertyId
    static void _set_k_DebugValidateAboveMaxThresholdColorPropertyId(int value);
    // Get static field: static private readonly System.Int32 k_DebugMaxPixelCost
    static int _get_k_DebugMaxPixelCost();
    // Set static field: static private readonly System.Int32 k_DebugMaxPixelCost
    static void _set_k_DebugMaxPixelCost(int value);
    // Get static field: static private readonly System.Int32 k_DebugLightingModeId
    static int _get_k_DebugLightingModeId();
    // Set static field: static private readonly System.Int32 k_DebugLightingModeId
    static void _set_k_DebugLightingModeId(int value);
    // Get static field: static private readonly System.Int32 k_DebugLightingFeatureFlagsId
    static int _get_k_DebugLightingFeatureFlagsId();
    // Set static field: static private readonly System.Int32 k_DebugLightingFeatureFlagsId
    static void _set_k_DebugLightingFeatureFlagsId(int value);
    // Get static field: static private readonly System.Int32 k_DebugValidateAlbedoMinLuminanceId
    static int _get_k_DebugValidateAlbedoMinLuminanceId();
    // Set static field: static private readonly System.Int32 k_DebugValidateAlbedoMinLuminanceId
    static void _set_k_DebugValidateAlbedoMinLuminanceId(int value);
    // Get static field: static private readonly System.Int32 k_DebugValidateAlbedoMaxLuminanceId
    static int _get_k_DebugValidateAlbedoMaxLuminanceId();
    // Set static field: static private readonly System.Int32 k_DebugValidateAlbedoMaxLuminanceId
    static void _set_k_DebugValidateAlbedoMaxLuminanceId(int value);
    // Get static field: static private readonly System.Int32 k_DebugValidateAlbedoSaturationToleranceId
    static int _get_k_DebugValidateAlbedoSaturationToleranceId();
    // Set static field: static private readonly System.Int32 k_DebugValidateAlbedoSaturationToleranceId
    static void _set_k_DebugValidateAlbedoSaturationToleranceId(int value);
    // Get static field: static private readonly System.Int32 k_DebugValidateAlbedoHueToleranceId
    static int _get_k_DebugValidateAlbedoHueToleranceId();
    // Set static field: static private readonly System.Int32 k_DebugValidateAlbedoHueToleranceId
    static void _set_k_DebugValidateAlbedoHueToleranceId(int value);
    // Get static field: static private readonly System.Int32 k_DebugValidateAlbedoCompareColorId
    static int _get_k_DebugValidateAlbedoCompareColorId();
    // Set static field: static private readonly System.Int32 k_DebugValidateAlbedoCompareColorId
    static void _set_k_DebugValidateAlbedoCompareColorId(int value);
    // Get static field: static private readonly System.Int32 k_DebugValidateMetallicMinValueId
    static int _get_k_DebugValidateMetallicMinValueId();
    // Set static field: static private readonly System.Int32 k_DebugValidateMetallicMinValueId
    static void _set_k_DebugValidateMetallicMinValueId(int value);
    // Get static field: static private readonly System.Int32 k_DebugValidateMetallicMaxValueId
    static int _get_k_DebugValidateMetallicMaxValueId();
    // Set static field: static private readonly System.Int32 k_DebugValidateMetallicMaxValueId
    static void _set_k_DebugValidateMetallicMaxValueId(int value);
    // Get static field: static private readonly System.Int32 k_ValidationChannelsId
    static int _get_k_ValidationChannelsId();
    // Set static field: static private readonly System.Int32 k_ValidationChannelsId
    static void _set_k_ValidationChannelsId(int value);
    // Get static field: static private readonly System.Int32 k_RangeMinimumId
    static int _get_k_RangeMinimumId();
    // Set static field: static private readonly System.Int32 k_RangeMinimumId
    static void _set_k_RangeMinimumId(int value);
    // Get static field: static private readonly System.Int32 k_RangeMaximumId
    static int _get_k_RangeMaximumId();
    // Set static field: static private readonly System.Int32 k_RangeMaximumId
    static void _set_k_RangeMaximumId(int value);
    // Get instance field reference: private readonly UnityEngine.Material m_ReplacementMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_ReplacementMaterial();
    // Get instance field reference: private readonly UnityEngine.Material m_HDRDebugViewMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_HDRDebugViewMaterial();
    // Get instance field reference: private UnityEngine.Rendering.Universal.HDRDebugViewPass m_HDRDebugViewPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::HDRDebugViewPass*& dyn_m_HDRDebugViewPass();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_DebugScreenTextureHandle
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_DebugScreenTextureHandle();
    // Get instance field reference: private System.Boolean m_HasDebugRenderTarget
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasDebugRenderTarget();
    // Get instance field reference: private System.Boolean m_DebugRenderTargetSupportsStereo
    [[deprecated("Use field access instead!")]] bool& dyn_m_DebugRenderTargetSupportsStereo();
    // Get instance field reference: private UnityEngine.Vector4 m_DebugRenderTargetPixelRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_m_DebugRenderTargetPixelRect();
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetIdentifier m_DebugRenderTargetIdentifier
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetIdentifier& dyn_m_DebugRenderTargetIdentifier();
    // Get instance field reference: private readonly UnityEngine.Rendering.Universal.UniversalRenderPipelineDebugDisplaySettings m_DebugDisplaySettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::UniversalRenderPipelineDebugDisplaySettings*& dyn_m_DebugDisplaySettings();
    // private UnityEngine.Rendering.Universal.DebugDisplaySettingsLighting get_LightingSettings()
    // Offset: 0x529D118
    ::UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting* get_LightingSettings();
    // private UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial get_MaterialSettings()
    // Offset: 0x529D134
    ::UnityEngine::Rendering::Universal::DebugDisplaySettingsMaterial* get_MaterialSettings();
    // private UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering get_RenderingSettings()
    // Offset: 0x529D150
    ::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering* get_RenderingSettings();
    // public System.Boolean get_AreAnySettingsActive()
    // Offset: 0x529D16C
    bool get_AreAnySettingsActive();
    // public System.Boolean get_IsPostProcessingAllowed()
    // Offset: 0x529D18C
    bool get_IsPostProcessingAllowed();
    // public System.Boolean get_IsLightingActive()
    // Offset: 0x529D1AC
    bool get_IsLightingActive();
    // System.Boolean get_IsActiveModeUnsupportedForDeferred()
    // Offset: 0x529D1CC
    bool get_IsActiveModeUnsupportedForDeferred();
    // public System.Boolean TryGetScreenClearColor(ref UnityEngine.Color color)
    // Offset: 0x529D238
    bool TryGetScreenClearColor(ByRef<::UnityEngine::Color> color);
    // UnityEngine.Material get_ReplacementMaterial()
    // Offset: 0x529D25C
    ::UnityEngine::Material* get_ReplacementMaterial();
    // UnityEngine.Rendering.Universal.UniversalRenderPipelineDebugDisplaySettings get_DebugDisplaySettings()
    // Offset: 0x529D264
    ::UnityEngine::Rendering::Universal::UniversalRenderPipelineDebugDisplaySettings* get_DebugDisplaySettings();
    // UnityEngine.Rendering.RTHandle get_DebugScreenTextureHandle()
    // Offset: 0x529D26C
    ::UnityEngine::Rendering::RTHandle* get_DebugScreenTextureHandle();
    // System.Boolean HDRDebugViewIsActive(ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x529D274
    bool HDRDebugViewIsActive(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // System.Boolean WriteToDebugScreenTexture(ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x529D2B0
    bool WriteToDebugScreenTexture(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // System.Boolean get_IsScreenClearNeeded()
    // Offset: 0x529D2B4
    bool get_IsScreenClearNeeded();
    // System.Boolean get_IsRenderPassSupported()
    // Offset: 0x529D2F0
    bool get_IsRenderPassSupported();
    // System.Void .ctor(UnityEngine.Rendering.Universal.ScriptableRendererData scriptableRendererData)
    // Offset: 0x529D31C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugHandler* New_ctor(::UnityEngine::Rendering::Universal::ScriptableRendererData* scriptableRendererData) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DebugHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugHandler*, creationType>(scriptableRendererData)));
    }
    // public System.Void Dispose()
    // Offset: 0x529D4DC
    void Dispose();
    // System.Boolean IsActiveForCamera(ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x529D568
    bool IsActiveForCamera(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // System.Boolean TryGetFullscreenDebugMode(out UnityEngine.Rendering.Universal.DebugFullScreenMode debugFullScreenMode)
    // Offset: 0x529D5A8
    bool TryGetFullscreenDebugMode(ByRef<::UnityEngine::Rendering::Universal::DebugFullScreenMode> debugFullScreenMode);
    // System.Boolean TryGetFullscreenDebugMode(out UnityEngine.Rendering.Universal.DebugFullScreenMode debugFullScreenMode, out System.Int32 textureHeightPercent)
    // Offset: 0x529D5C4
    bool TryGetFullscreenDebugMode(ByRef<::UnityEngine::Rendering::Universal::DebugFullScreenMode> debugFullScreenMode, ByRef<int> textureHeightPercent);
    // System.Void BlitTextureToDebugScreenTexture(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle sourceTexture, UnityEngine.Material material, System.Int32 passId)
    // Offset: 0x529D600
    void BlitTextureToDebugScreenTexture(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::RTHandle* sourceTexture, ::UnityEngine::Material* material, int passId);
    // System.Void SetupShaderProperties(UnityEngine.Rendering.CommandBuffer cmd, System.Int32 passIndex)
    // Offset: 0x529D814
    void SetupShaderProperties(::UnityEngine::Rendering::CommandBuffer* cmd, int passIndex);
    // System.Void SetDebugRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier renderTargetIdentifier, UnityEngine.Rect displayRect, System.Boolean supportsStereo)
    // Offset: 0x529DC6C
    void SetDebugRenderTarget(::UnityEngine::Rendering::RenderTargetIdentifier renderTargetIdentifier, ::UnityEngine::Rect displayRect, bool supportsStereo);
    // System.Void ResetDebugRenderTarget()
    // Offset: 0x529DC9C
    void ResetDebugRenderTarget();
    // System.Void UpdateShaderGlobalPropertiesForFinalValidationPass(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.CameraData cameraData, System.Boolean isFinalPass)
    // Offset: 0x529DCA4
    void UpdateShaderGlobalPropertiesForFinalValidationPass(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, bool isFinalPass);
    // System.Void Setup(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x529DEAC
    void Setup(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // System.Collections.Generic.IEnumerable`1<UnityEngine.Rendering.Universal.DebugRenderSetup> CreateDebugRenderSetupEnumerable(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Rendering.CommandBuffer commandBuffer, UnityEngine.Rendering.FilteringSettings filteringSettings)
    // Offset: 0x529E32C
    ::System::Collections::Generic::IEnumerable_1<::UnityEngine::Rendering::Universal::DebugRenderSetup*>* CreateDebugRenderSetupEnumerable(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Rendering::CommandBuffer* commandBuffer, ::UnityEngine::Rendering::FilteringSettings filteringSettings);
    // System.Void DrawWithDebugRenderState(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData, ref UnityEngine.Rendering.DrawingSettings drawingSettings, ref UnityEngine.Rendering.FilteringSettings filteringSettings, ref UnityEngine.Rendering.RenderStateBlock renderStateBlock, UnityEngine.Rendering.Universal.DebugHandler/DrawFunction func)
    // Offset: 0x529E430
    void DrawWithDebugRenderState(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ByRef<::UnityEngine::Rendering::DrawingSettings> drawingSettings, ByRef<::UnityEngine::Rendering::FilteringSettings> filteringSettings, ByRef<::UnityEngine::Rendering::RenderStateBlock> renderStateBlock, ::UnityEngine::Rendering::Universal::DebugHandler::DrawFunction* func);
    // static private System.Void .cctor()
    // Offset: 0x529EC54
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.DebugHandler
  #pragma pack(pop)
  static check_size<sizeof(DebugHandler), 112 + sizeof(::UnityEngine::Rendering::Universal::UniversalRenderPipelineDebugDisplaySettings*)> __UnityEngine_Rendering_Universal_DebugHandlerSizeCheck;
  static_assert(sizeof(DebugHandler) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::get_LightingSettings
// Il2CppName: get_LightingSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting* (UnityEngine::Rendering::Universal::DebugHandler::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::get_LightingSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "get_LightingSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::get_MaterialSettings
// Il2CppName: get_MaterialSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugDisplaySettingsMaterial* (UnityEngine::Rendering::Universal::DebugHandler::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::get_MaterialSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "get_MaterialSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::get_RenderingSettings
// Il2CppName: get_RenderingSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugDisplaySettingsRendering* (UnityEngine::Rendering::Universal::DebugHandler::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::get_RenderingSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "get_RenderingSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::get_AreAnySettingsActive
// Il2CppName: get_AreAnySettingsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugHandler::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::get_AreAnySettingsActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "get_AreAnySettingsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::get_IsPostProcessingAllowed
// Il2CppName: get_IsPostProcessingAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugHandler::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::get_IsPostProcessingAllowed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "get_IsPostProcessingAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::get_IsLightingActive
// Il2CppName: get_IsLightingActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugHandler::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::get_IsLightingActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "get_IsLightingActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::get_IsActiveModeUnsupportedForDeferred
// Il2CppName: get_IsActiveModeUnsupportedForDeferred
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugHandler::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::get_IsActiveModeUnsupportedForDeferred)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "get_IsActiveModeUnsupportedForDeferred", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::TryGetScreenClearColor
// Il2CppName: TryGetScreenClearColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugHandler::*)(ByRef<::UnityEngine::Color>)>(&UnityEngine::Rendering::Universal::DebugHandler::TryGetScreenClearColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "TryGetScreenClearColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::get_ReplacementMaterial
// Il2CppName: get_ReplacementMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::DebugHandler::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::get_ReplacementMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "get_ReplacementMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::get_DebugDisplaySettings
// Il2CppName: get_DebugDisplaySettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::UniversalRenderPipelineDebugDisplaySettings* (UnityEngine::Rendering::Universal::DebugHandler::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::get_DebugDisplaySettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "get_DebugDisplaySettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::get_DebugScreenTextureHandle
// Il2CppName: get_DebugScreenTextureHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::DebugHandler::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::get_DebugScreenTextureHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "get_DebugScreenTextureHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::HDRDebugViewIsActive
// Il2CppName: HDRDebugViewIsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugHandler::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::DebugHandler::HDRDebugViewIsActive)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "HDRDebugViewIsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::WriteToDebugScreenTexture
// Il2CppName: WriteToDebugScreenTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugHandler::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::DebugHandler::WriteToDebugScreenTexture)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "WriteToDebugScreenTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::get_IsScreenClearNeeded
// Il2CppName: get_IsScreenClearNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugHandler::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::get_IsScreenClearNeeded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "get_IsScreenClearNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::get_IsRenderPassSupported
// Il2CppName: get_IsRenderPassSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugHandler::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::get_IsRenderPassSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "get_IsRenderPassSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugHandler::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::IsActiveForCamera
// Il2CppName: IsActiveForCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugHandler::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::DebugHandler::IsActiveForCamera)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "IsActiveForCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::TryGetFullscreenDebugMode
// Il2CppName: TryGetFullscreenDebugMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugHandler::*)(ByRef<::UnityEngine::Rendering::Universal::DebugFullScreenMode>)>(&UnityEngine::Rendering::Universal::DebugHandler::TryGetFullscreenDebugMode)> {
  static const MethodInfo* get() {
    static auto* debugFullScreenMode = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DebugFullScreenMode")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "TryGetFullscreenDebugMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{debugFullScreenMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::TryGetFullscreenDebugMode
// Il2CppName: TryGetFullscreenDebugMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugHandler::*)(ByRef<::UnityEngine::Rendering::Universal::DebugFullScreenMode>, ByRef<int>)>(&UnityEngine::Rendering::Universal::DebugHandler::TryGetFullscreenDebugMode)> {
  static const MethodInfo* get() {
    static auto* debugFullScreenMode = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DebugFullScreenMode")->this_arg;
    static auto* textureHeightPercent = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "TryGetFullscreenDebugMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{debugFullScreenMode, textureHeightPercent});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::BlitTextureToDebugScreenTexture
// Il2CppName: BlitTextureToDebugScreenTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugHandler::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Material*, int)>(&UnityEngine::Rendering::Universal::DebugHandler::BlitTextureToDebugScreenTexture)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* sourceTexture = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* passId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "BlitTextureToDebugScreenTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, sourceTexture, material, passId});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::SetupShaderProperties
// Il2CppName: SetupShaderProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugHandler::*)(::UnityEngine::Rendering::CommandBuffer*, int)>(&UnityEngine::Rendering::Universal::DebugHandler::SetupShaderProperties)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* passIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "SetupShaderProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, passIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::SetDebugRenderTarget
// Il2CppName: SetDebugRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugHandler::*)(::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rect, bool)>(&UnityEngine::Rendering::Universal::DebugHandler::SetDebugRenderTarget)> {
  static const MethodInfo* get() {
    static auto* renderTargetIdentifier = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* displayRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* supportsStereo = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "SetDebugRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderTargetIdentifier, displayRect, supportsStereo});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::ResetDebugRenderTarget
// Il2CppName: ResetDebugRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugHandler::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::ResetDebugRenderTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "ResetDebugRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::UpdateShaderGlobalPropertiesForFinalValidationPass
// Il2CppName: UpdateShaderGlobalPropertiesForFinalValidationPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugHandler::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::CameraData>, bool)>(&UnityEngine::Rendering::Universal::DebugHandler::UpdateShaderGlobalPropertiesForFinalValidationPass)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* isFinalPass = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "UpdateShaderGlobalPropertiesForFinalValidationPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, cameraData, isFinalPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugHandler::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::DebugHandler::Setup)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::CreateDebugRenderSetupEnumerable
// Il2CppName: CreateDebugRenderSetupEnumerable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Rendering::Universal::DebugRenderSetup*>* (UnityEngine::Rendering::Universal::DebugHandler::*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::FilteringSettings)>(&UnityEngine::Rendering::Universal::DebugHandler::CreateDebugRenderSetupEnumerable)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* commandBuffer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* filteringSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "FilteringSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "CreateDebugRenderSetupEnumerable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, commandBuffer, filteringSettings});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::DrawWithDebugRenderState
// Il2CppName: DrawWithDebugRenderState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugHandler::*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ByRef<::UnityEngine::Rendering::DrawingSettings>, ByRef<::UnityEngine::Rendering::FilteringSettings>, ByRef<::UnityEngine::Rendering::RenderStateBlock>, ::UnityEngine::Rendering::Universal::DebugHandler::DrawFunction*)>(&UnityEngine::Rendering::Universal::DebugHandler::DrawWithDebugRenderState)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* drawingSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DrawingSettings")->this_arg;
    static auto* filteringSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "FilteringSettings")->this_arg;
    static auto* renderStateBlock = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderStateBlock")->this_arg;
    static auto* func = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DebugHandler/DrawFunction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), "DrawWithDebugRenderState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, cmd, renderingData, drawingSettings, filteringSettings, renderStateBlock, func});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::DebugHandler::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
