// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderPass
#include "UnityEngine/Rendering/Universal/ScriptableRenderPass.hpp"
// Including type: UnityEngine.Rendering.Universal.IRenderPass2D
#include "UnityEngine/Rendering/Universal/IRenderPass2D.hpp"
// Including type: UnityEngine.Rendering.Universal.LayerBatch
#include "UnityEngine/Rendering/Universal/LayerBatch.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: Renderer2DData
  class Renderer2DData;
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: RenderTextureDescriptor
  struct RenderTextureDescriptor;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: SortingSettings
  struct SortingSettings;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
  // Skipping declaration: RenderBufferStoreAction because it is already included!
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: FilteringSettings
  struct FilteringSettings;
  // Forward declaring type: DrawingSettings
  struct DrawingSettings;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: Render2DLightingPass
  class Render2DLightingPass;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::Render2DLightingPass);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Render2DLightingPass*, "UnityEngine.Rendering.Universal", "Render2DLightingPass");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.Render2DLightingPass
  // [TokenAttribute] Offset: FFFFFFFF
  class Render2DLightingPass : public ::UnityEngine::Rendering::Universal::ScriptableRenderPass/*, public ::UnityEngine::Rendering::Universal::IRenderPass2D*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::Render2DLightingPass::$$c
    class $$c;
    public:
    // private UnityEngine.Material m_BlitMaterial
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::Material* m_BlitMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material m_SamplingMaterial
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Material* m_SamplingMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private readonly UnityEngine.Rendering.Universal.Renderer2DData m_Renderer2DData
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::Rendering::Universal::Renderer2DData* m_Renderer2DData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Renderer2DData*) == 0x8);
    // private System.Boolean m_NeedsDepth
    // Size: 0x1
    // Offset: 0xF8
    bool m_NeedsDepth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int16 m_CameraSortingLayerBoundsIndex
    // Size: 0x2
    // Offset: 0xFA
    int16_t m_CameraSortingLayerBoundsIndex;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::Rendering::Universal::IRenderPass2D
    operator ::UnityEngine::Rendering::Universal::IRenderPass2D() noexcept {
      return *reinterpret_cast<::UnityEngine::Rendering::Universal::IRenderPass2D*>(this);
    }
    // Get static field: static private readonly System.Int32 k_HDREmulationScaleID
    static int _get_k_HDREmulationScaleID();
    // Set static field: static private readonly System.Int32 k_HDREmulationScaleID
    static void _set_k_HDREmulationScaleID(int value);
    // Get static field: static private readonly System.Int32 k_InverseHDREmulationScaleID
    static int _get_k_InverseHDREmulationScaleID();
    // Set static field: static private readonly System.Int32 k_InverseHDREmulationScaleID
    static void _set_k_InverseHDREmulationScaleID(int value);
    // Get static field: static private readonly System.Int32 k_UseSceneLightingID
    static int _get_k_UseSceneLightingID();
    // Set static field: static private readonly System.Int32 k_UseSceneLightingID
    static void _set_k_UseSceneLightingID(int value);
    // Get static field: static private readonly System.Int32 k_RendererColorID
    static int _get_k_RendererColorID();
    // Set static field: static private readonly System.Int32 k_RendererColorID
    static void _set_k_RendererColorID(int value);
    // Get static field: static private readonly System.Int32[] k_ShapeLightTextureIDs
    static ::ArrayW<int> _get_k_ShapeLightTextureIDs();
    // Set static field: static private readonly System.Int32[] k_ShapeLightTextureIDs
    static void _set_k_ShapeLightTextureIDs(::ArrayW<int> value);
    // Get static field: static private readonly UnityEngine.Rendering.ShaderTagId k_CombinedRenderingPassName
    static ::UnityEngine::Rendering::ShaderTagId _get_k_CombinedRenderingPassName();
    // Set static field: static private readonly UnityEngine.Rendering.ShaderTagId k_CombinedRenderingPassName
    static void _set_k_CombinedRenderingPassName(::UnityEngine::Rendering::ShaderTagId value);
    // Get static field: static private readonly UnityEngine.Rendering.ShaderTagId k_NormalsRenderingPassName
    static ::UnityEngine::Rendering::ShaderTagId _get_k_NormalsRenderingPassName();
    // Set static field: static private readonly UnityEngine.Rendering.ShaderTagId k_NormalsRenderingPassName
    static void _set_k_NormalsRenderingPassName(::UnityEngine::Rendering::ShaderTagId value);
    // Get static field: static private readonly UnityEngine.Rendering.ShaderTagId k_LegacyPassName
    static ::UnityEngine::Rendering::ShaderTagId _get_k_LegacyPassName();
    // Set static field: static private readonly UnityEngine.Rendering.ShaderTagId k_LegacyPassName
    static void _set_k_LegacyPassName(::UnityEngine::Rendering::ShaderTagId value);
    // Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> k_ShaderTags
    static ::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* _get_k_ShaderTags();
    // Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> k_ShaderTags
    static void _set_k_ShaderTags(::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingDrawLights
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingDrawLights();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingDrawLights
    static void _set_m_ProfilingDrawLights(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingDrawLightTextures
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingDrawLightTextures();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingDrawLightTextures
    static void _set_m_ProfilingDrawLightTextures(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingDrawRenderers
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingDrawRenderers();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingDrawRenderers
    static void _set_m_ProfilingDrawRenderers(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingDrawLayerBatch
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingDrawLayerBatch();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingDrawLayerBatch
    static void _set_m_ProfilingDrawLayerBatch(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSamplerUnlit
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingSamplerUnlit();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSamplerUnlit
    static void _set_m_ProfilingSamplerUnlit(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get instance field reference: private UnityEngine.Material m_BlitMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_BlitMaterial();
    // Get instance field reference: private UnityEngine.Material m_SamplingMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_SamplingMaterial();
    // Get instance field reference: private readonly UnityEngine.Rendering.Universal.Renderer2DData m_Renderer2DData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Renderer2DData*& dyn_m_Renderer2DData();
    // Get instance field reference: private System.Boolean m_NeedsDepth
    [[deprecated("Use field access instead!")]] bool& dyn_m_NeedsDepth();
    // Get instance field reference: private System.Int16 m_CameraSortingLayerBoundsIndex
    [[deprecated("Use field access instead!")]] int16_t& dyn_m_CameraSortingLayerBoundsIndex();
    // public System.Void .ctor(UnityEngine.Rendering.Universal.Renderer2DData rendererData, UnityEngine.Material blitMaterial, UnityEngine.Material samplingMaterial)
    // Offset: 0x5281B24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Render2DLightingPass* New_ctor(::UnityEngine::Rendering::Universal::Renderer2DData* rendererData, ::UnityEngine::Material* blitMaterial, ::UnityEngine::Material* samplingMaterial) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Render2DLightingPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Render2DLightingPass*, creationType>(rendererData, blitMaterial, samplingMaterial)));
    }
    // System.Void Setup(System.Boolean useDepth)
    // Offset: 0x5281CB8
    void Setup(bool useDepth);
    // private System.Void GetTransparencySortingMode(UnityEngine.Camera camera, ref UnityEngine.Rendering.SortingSettings sortingSettings)
    // Offset: 0x5281CC4
    void GetTransparencySortingMode(::UnityEngine::Camera* camera, ByRef<::UnityEngine::Rendering::SortingSettings> sortingSettings);
    // private System.Void CopyCameraSortingLayerRenderTexture(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.RenderBufferStoreAction mainTargetStoreAction)
    // Offset: 0x5281D64
    void CopyCameraSortingLayerRenderTexture(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Rendering::Universal::RenderingData renderingData, ::UnityEngine::Rendering::RenderBufferStoreAction mainTargetStoreAction);
    // private System.Int16 GetCameraSortingLayerBoundsIndex()
    // Offset: 0x5281BD8
    int16_t GetCameraSortingLayerBoundsIndex();
    // private System.Void DetermineWhenToResolve(System.Int32 startIndex, System.Int32 batchesDrawn, System.Int32 batchCount, UnityEngine.Rendering.Universal.LayerBatch[] layerBatches, out System.Int32 resolveDuringBatch, out System.Boolean resolveIsAfterCopy)
    // Offset: 0x52821A0
    void DetermineWhenToResolve(int startIndex, int batchesDrawn, int batchCount, ::ArrayW<::UnityEngine::Rendering::Universal::LayerBatch> layerBatches, ByRef<int> resolveDuringBatch, ByRef<bool> resolveIsAfterCopy);
    // private System.Void Render(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData, ref UnityEngine.Rendering.FilteringSettings filterSettings, UnityEngine.Rendering.DrawingSettings drawSettings)
    // Offset: 0x5282430
    void Render(::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ByRef<::UnityEngine::Rendering::FilteringSettings> filterSettings, ::UnityEngine::Rendering::DrawingSettings drawSettings);
    // private System.Int32 DrawLayerBatches(UnityEngine.Rendering.Universal.LayerBatch[] layerBatches, System.Int32 batchCount, System.Int32 startIndex, UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData, ref UnityEngine.Rendering.FilteringSettings filterSettings, ref UnityEngine.Rendering.DrawingSettings normalsDrawSettings, ref UnityEngine.Rendering.DrawingSettings drawSettings, ref UnityEngine.RenderTextureDescriptor desc)
    // Offset: 0x52825D8
    int DrawLayerBatches(::ArrayW<::UnityEngine::Rendering::Universal::LayerBatch> layerBatches, int batchCount, int startIndex, ::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ByRef<::UnityEngine::Rendering::FilteringSettings> filterSettings, ByRef<::UnityEngine::Rendering::DrawingSettings> normalsDrawSettings, ByRef<::UnityEngine::Rendering::DrawingSettings> drawSettings, ByRef<::UnityEngine::RenderTextureDescriptor> desc);
    // private UnityEngine.Rendering.Universal.Renderer2DData UnityEngine.Rendering.Universal.IRenderPass2D.get_rendererData()
    // Offset: 0x5286110
    ::UnityEngine::Rendering::Universal::Renderer2DData* UnityEngine_Rendering_Universal_IRenderPass2D_get_rendererData();
    // public override System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x5284C60
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void Execute(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // static private System.Void .cctor()
    // Offset: 0x5286118
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::.cctor()
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.Render2DLightingPass
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Render2DLightingPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Render2DLightingPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Render2DLightingPass::*)(bool)>(&UnityEngine::Rendering::Universal::Render2DLightingPass::Setup)> {
  static const MethodInfo* get() {
    static auto* useDepth = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Render2DLightingPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useDepth});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Render2DLightingPass::GetTransparencySortingMode
// Il2CppName: GetTransparencySortingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Render2DLightingPass::*)(::UnityEngine::Camera*, ByRef<::UnityEngine::Rendering::SortingSettings>)>(&UnityEngine::Rendering::Universal::Render2DLightingPass::GetTransparencySortingMode)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* sortingSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SortingSettings")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Render2DLightingPass*), "GetTransparencySortingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, sortingSettings});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Render2DLightingPass::CopyCameraSortingLayerRenderTexture
// Il2CppName: CopyCameraSortingLayerRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Render2DLightingPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Rendering::Universal::RenderingData, ::UnityEngine::Rendering::RenderBufferStoreAction)>(&UnityEngine::Rendering::Universal::Render2DLightingPass::CopyCameraSortingLayerRenderTexture)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->byval_arg;
    static auto* mainTargetStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Render2DLightingPass*), "CopyCameraSortingLayerRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData, mainTargetStoreAction});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Render2DLightingPass::GetCameraSortingLayerBoundsIndex
// Il2CppName: GetCameraSortingLayerBoundsIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (UnityEngine::Rendering::Universal::Render2DLightingPass::*)()>(&UnityEngine::Rendering::Universal::Render2DLightingPass::GetCameraSortingLayerBoundsIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Render2DLightingPass*), "GetCameraSortingLayerBoundsIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Render2DLightingPass::DetermineWhenToResolve
// Il2CppName: DetermineWhenToResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Render2DLightingPass::*)(int, int, int, ::ArrayW<::UnityEngine::Rendering::Universal::LayerBatch>, ByRef<int>, ByRef<bool>)>(&UnityEngine::Rendering::Universal::Render2DLightingPass::DetermineWhenToResolve)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* batchesDrawn = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* batchCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* layerBatches = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LayerBatch"), 1)->byval_arg;
    static auto* resolveDuringBatch = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* resolveIsAfterCopy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Render2DLightingPass*), "DetermineWhenToResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex, batchesDrawn, batchCount, layerBatches, resolveDuringBatch, resolveIsAfterCopy});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Render2DLightingPass::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Render2DLightingPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ByRef<::UnityEngine::Rendering::FilteringSettings>, ::UnityEngine::Rendering::DrawingSettings)>(&UnityEngine::Rendering::Universal::Render2DLightingPass::Render)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* filterSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "FilteringSettings")->this_arg;
    static auto* drawSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DrawingSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Render2DLightingPass*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, cmd, renderingData, filterSettings, drawSettings});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Render2DLightingPass::DrawLayerBatches
// Il2CppName: DrawLayerBatches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Render2DLightingPass::*)(::ArrayW<::UnityEngine::Rendering::Universal::LayerBatch>, int, int, ::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ByRef<::UnityEngine::Rendering::FilteringSettings>, ByRef<::UnityEngine::Rendering::DrawingSettings>, ByRef<::UnityEngine::Rendering::DrawingSettings>, ByRef<::UnityEngine::RenderTextureDescriptor>)>(&UnityEngine::Rendering::Universal::Render2DLightingPass::DrawLayerBatches)> {
  static const MethodInfo* get() {
    static auto* layerBatches = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LayerBatch"), 1)->byval_arg;
    static auto* batchCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* filterSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "FilteringSettings")->this_arg;
    static auto* normalsDrawSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DrawingSettings")->this_arg;
    static auto* drawSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DrawingSettings")->this_arg;
    static auto* desc = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Render2DLightingPass*), "DrawLayerBatches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerBatches, batchCount, startIndex, cmd, context, renderingData, filterSettings, normalsDrawSettings, drawSettings, desc});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Render2DLightingPass::UnityEngine_Rendering_Universal_IRenderPass2D_get_rendererData
// Il2CppName: UnityEngine.Rendering.Universal.IRenderPass2D.get_rendererData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::Renderer2DData* (UnityEngine::Rendering::Universal::Render2DLightingPass::*)()>(&UnityEngine::Rendering::Universal::Render2DLightingPass::UnityEngine_Rendering_Universal_IRenderPass2D_get_rendererData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Render2DLightingPass*), "UnityEngine.Rendering.Universal.IRenderPass2D.get_rendererData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Render2DLightingPass::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Render2DLightingPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Render2DLightingPass::Execute)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Render2DLightingPass*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Render2DLightingPass::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::Render2DLightingPass::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Render2DLightingPass*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
