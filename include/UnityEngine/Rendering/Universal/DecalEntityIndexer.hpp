// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalEntity
  struct DecalEntity;
  // Skipping declaration: DecalEntityItem because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalEntityIndexer
  class DecalEntityIndexer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::DecalEntityIndexer);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DecalEntityIndexer*, "UnityEngine.Rendering.Universal", "DecalEntityIndexer");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.DecalEntityIndexer
  // [TokenAttribute] Offset: FFFFFFFF
  class DecalEntityIndexer : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::DecalEntityIndexer::DecalEntityItem
    struct DecalEntityItem;
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.Universal.DecalEntityIndexer/DecalEntityItem
    // [TokenAttribute] Offset: FFFFFFFF
    struct DecalEntityItem/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 chunkIndex
      // Size: 0x4
      // Offset: 0x0
      int chunkIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 arrayIndex
      // Size: 0x4
      // Offset: 0x4
      int arrayIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 version
      // Size: 0x4
      // Offset: 0x8
      int version;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DecalEntityItem
      constexpr DecalEntityItem(int chunkIndex_ = {}, int arrayIndex_ = {}, int version_ = {}) noexcept : chunkIndex{chunkIndex_}, arrayIndex{arrayIndex_}, version{version_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 chunkIndex
      [[deprecated("Use field access instead!")]] int& dyn_chunkIndex();
      // Get instance field reference: public System.Int32 arrayIndex
      [[deprecated("Use field access instead!")]] int& dyn_arrayIndex();
      // Get instance field reference: public System.Int32 version
      [[deprecated("Use field access instead!")]] int& dyn_version();
    }; // UnityEngine.Rendering.Universal.DecalEntityIndexer/DecalEntityItem
    #pragma pack(pop)
    static check_size<sizeof(DecalEntityIndexer::DecalEntityItem), 8 + sizeof(int)> __UnityEngine_Rendering_Universal_DecalEntityIndexer_DecalEntityItemSizeCheck;
    static_assert(sizeof(DecalEntityIndexer::DecalEntityItem) == 0xC);
    public:
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.DecalEntityIndexer/DecalEntityItem> m_Entities
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalEntityIndexer::DecalEntityItem>* m_Entities;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalEntityIndexer::DecalEntityItem>*) == 0x8);
    // private System.Collections.Generic.Queue`1<System.Int32> m_FreeIndices
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Queue_1<int>* m_FreeIndices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<int>*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.DecalEntityIndexer/DecalEntityItem> m_Entities
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::DecalEntityIndexer::DecalEntityItem>*& dyn_m_Entities();
    // Get instance field reference: private System.Collections.Generic.Queue`1<System.Int32> m_FreeIndices
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<int>*& dyn_m_FreeIndices();
    // public System.Boolean IsValid(UnityEngine.Rendering.Universal.DecalEntity decalEntity)
    // Offset: 0x52A4900
    bool IsValid(::UnityEngine::Rendering::Universal::DecalEntity decalEntity);
    // public UnityEngine.Rendering.Universal.DecalEntity CreateDecalEntity(System.Int32 arrayIndex, System.Int32 chunkIndex)
    // Offset: 0x52A4988
    ::UnityEngine::Rendering::Universal::DecalEntity CreateDecalEntity(int arrayIndex, int chunkIndex);
    // public System.Void DestroyDecalEntity(UnityEngine.Rendering.Universal.DecalEntity decalEntity)
    // Offset: 0x52A4B0C
    void DestroyDecalEntity(::UnityEngine::Rendering::Universal::DecalEntity decalEntity);
    // public UnityEngine.Rendering.Universal.DecalEntityIndexer/DecalEntityItem GetItem(UnityEngine.Rendering.Universal.DecalEntity decalEntity)
    // Offset: 0x52A4BBC
    ::UnityEngine::Rendering::Universal::DecalEntityIndexer::DecalEntityItem GetItem(::UnityEngine::Rendering::Universal::DecalEntity decalEntity);
    // public System.Void UpdateIndex(UnityEngine.Rendering.Universal.DecalEntity decalEntity, System.Int32 newArrayIndex)
    // Offset: 0x52A4C1C
    void UpdateIndex(::UnityEngine::Rendering::Universal::DecalEntity decalEntity, int newArrayIndex);
    // public System.Void RemapChunkIndices(System.Collections.Generic.List`1<System.Int32> remaper)
    // Offset: 0x52A4CB8
    void RemapChunkIndices(::System::Collections::Generic::List_1<int>* remaper);
    // public System.Void Clear()
    // Offset: 0x52A4DCC
    void Clear();
    // public System.Void .ctor()
    // Offset: 0x52A4E3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DecalEntityIndexer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DecalEntityIndexer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DecalEntityIndexer*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.DecalEntityIndexer
  #pragma pack(pop)
  static check_size<sizeof(DecalEntityIndexer), 24 + sizeof(::System::Collections::Generic::Queue_1<int>*)> __UnityEngine_Rendering_Universal_DecalEntityIndexerSizeCheck;
  static_assert(sizeof(DecalEntityIndexer) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DecalEntityIndexer::DecalEntityItem, "UnityEngine.Rendering.Universal", "DecalEntityIndexer/DecalEntityItem");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityIndexer::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DecalEntityIndexer::*)(::UnityEngine::Rendering::Universal::DecalEntity)>(&UnityEngine::Rendering::Universal::DecalEntityIndexer::IsValid)> {
  static const MethodInfo* get() {
    static auto* decalEntity = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityIndexer*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{decalEntity});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityIndexer::CreateDecalEntity
// Il2CppName: CreateDecalEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DecalEntity (UnityEngine::Rendering::Universal::DecalEntityIndexer::*)(int, int)>(&UnityEngine::Rendering::Universal::DecalEntityIndexer::CreateDecalEntity)> {
  static const MethodInfo* get() {
    static auto* arrayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* chunkIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityIndexer*), "CreateDecalEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arrayIndex, chunkIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityIndexer::DestroyDecalEntity
// Il2CppName: DestroyDecalEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalEntityIndexer::*)(::UnityEngine::Rendering::Universal::DecalEntity)>(&UnityEngine::Rendering::Universal::DecalEntityIndexer::DestroyDecalEntity)> {
  static const MethodInfo* get() {
    static auto* decalEntity = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityIndexer*), "DestroyDecalEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{decalEntity});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityIndexer::GetItem
// Il2CppName: GetItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DecalEntityIndexer::DecalEntityItem (UnityEngine::Rendering::Universal::DecalEntityIndexer::*)(::UnityEngine::Rendering::Universal::DecalEntity)>(&UnityEngine::Rendering::Universal::DecalEntityIndexer::GetItem)> {
  static const MethodInfo* get() {
    static auto* decalEntity = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityIndexer*), "GetItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{decalEntity});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityIndexer::UpdateIndex
// Il2CppName: UpdateIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalEntityIndexer::*)(::UnityEngine::Rendering::Universal::DecalEntity, int)>(&UnityEngine::Rendering::Universal::DecalEntityIndexer::UpdateIndex)> {
  static const MethodInfo* get() {
    static auto* decalEntity = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalEntity")->byval_arg;
    static auto* newArrayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityIndexer*), "UpdateIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{decalEntity, newArrayIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityIndexer::RemapChunkIndices
// Il2CppName: RemapChunkIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalEntityIndexer::*)(::System::Collections::Generic::List_1<int>*)>(&UnityEngine::Rendering::Universal::DecalEntityIndexer::RemapChunkIndices)> {
  static const MethodInfo* get() {
    static auto* remaper = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityIndexer*), "RemapChunkIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remaper});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityIndexer::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalEntityIndexer::*)()>(&UnityEngine::Rendering::Universal::DecalEntityIndexer::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalEntityIndexer*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalEntityIndexer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
