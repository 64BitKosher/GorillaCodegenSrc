// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.IJobFor
#include "Unity/Jobs/IJobFor.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Rendering.Universal.InclusiveRange
#include "UnityEngine/Rendering/Universal/InclusiveRange.hpp"
// Including type: Unity.Mathematics.int2
#include "Unity/Mathematics/int2.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: TileRangeExpansionJob
  struct TileRangeExpansionJob;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::TileRangeExpansionJob, "UnityEngine.Rendering.Universal", "TileRangeExpansionJob");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.TileRangeExpansionJob
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct TileRangeExpansionJob/*, public ::System::ValueType, public ::Unity::Jobs::IJobFor*/ {
    public:
    public:
    // public Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.InclusiveRange> tileRanges
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::InclusiveRange> tileRanges;
    // public Unity.Collections.NativeArray`1<System.UInt32> tileMasks
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Collections::NativeArray_1<uint> tileMasks;
    // public System.Int32 rangesPerItem
    // Size: 0x4
    // Offset: 0x20
    int rangesPerItem;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 itemsPerTile
    // Size: 0x4
    // Offset: 0x24
    int itemsPerTile;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 wordsPerTile
    // Size: 0x4
    // Offset: 0x28
    int wordsPerTile;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Unity.Mathematics.int2 tileResolution
    // Size: 0x8
    // Offset: 0x2C
    ::Unity::Mathematics::int2 tileResolution;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::int2) == 0x8);
    public:
    // Creating value type constructor for type: TileRangeExpansionJob
    constexpr TileRangeExpansionJob(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::InclusiveRange> tileRanges_ = {}, ::Unity::Collections::NativeArray_1<uint> tileMasks_ = {}, int rangesPerItem_ = {}, int itemsPerTile_ = {}, int wordsPerTile_ = {}, ::Unity::Mathematics::int2 tileResolution_ = {}) noexcept : tileRanges{tileRanges_}, tileMasks{tileMasks_}, rangesPerItem{rangesPerItem_}, itemsPerTile{itemsPerTile_}, wordsPerTile{wordsPerTile_}, tileResolution{tileResolution_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Jobs::IJobFor
    operator ::Unity::Jobs::IJobFor() noexcept {
      return *reinterpret_cast<::Unity::Jobs::IJobFor*>(this);
    }
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.InclusiveRange> tileRanges
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::InclusiveRange>& dyn_tileRanges();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.UInt32> tileMasks
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<uint>& dyn_tileMasks();
    // Get instance field reference: public System.Int32 rangesPerItem
    [[deprecated("Use field access instead!")]] int& dyn_rangesPerItem();
    // Get instance field reference: public System.Int32 itemsPerTile
    [[deprecated("Use field access instead!")]] int& dyn_itemsPerTile();
    // Get instance field reference: public System.Int32 wordsPerTile
    [[deprecated("Use field access instead!")]] int& dyn_wordsPerTile();
    // Get instance field reference: public Unity.Mathematics.int2 tileResolution
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::int2& dyn_tileResolution();
    // public System.Void Execute(System.Int32 jobIndex)
    // Offset: 0x52E0AF4
    void Execute(int jobIndex);
  }; // UnityEngine.Rendering.Universal.TileRangeExpansionJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TileRangeExpansionJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::TileRangeExpansionJob::*)(int)>(&UnityEngine::Rendering::Universal::TileRangeExpansionJob::Execute)> {
  static const MethodInfo* get() {
    static auto* jobIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TileRangeExpansionJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jobIndex});
  }
};
