// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Mathematics
namespace Unity::Mathematics {
  // Forward declaring type: uint2
  struct uint2;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: BuddyAllocation
  struct BuddyAllocation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::BuddyAllocation, "UnityEngine.Rendering.Universal", "BuddyAllocation");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.BuddyAllocation
  // [TokenAttribute] Offset: FFFFFFFF
  struct BuddyAllocation/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 level
    // Size: 0x4
    // Offset: 0x0
    int level;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 index
    // Size: 0x4
    // Offset: 0x4
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: BuddyAllocation
    constexpr BuddyAllocation(int level_ = {}, int index_ = {}) noexcept : level{level_}, index{index_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 level
    [[deprecated("Use field access instead!")]] int& dyn_level();
    // Get instance field reference: public System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // public System.Void .ctor(System.Int32 level, System.Int32 index)
    // Offset: 0x52BF904
    // ABORTED: conflicts with another method.  BuddyAllocation(int level, int index);
    // public Unity.Mathematics.uint2 get_index2D()
    // Offset: 0x52BF90C
    ::Unity::Mathematics::uint2 get_index2D();
  }; // UnityEngine.Rendering.Universal.BuddyAllocation
  #pragma pack(pop)
  static check_size<sizeof(BuddyAllocation), 4 + sizeof(int)> __UnityEngine_Rendering_Universal_BuddyAllocationSizeCheck;
  static_assert(sizeof(BuddyAllocation) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocation::BuddyAllocation
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::BuddyAllocation::get_index2D
// Il2CppName: get_index2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::uint2 (UnityEngine::Rendering::Universal::BuddyAllocation::*)()>(&UnityEngine::Rendering::Universal::BuddyAllocation::get_index2D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::BuddyAllocation), "get_index2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
