// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.RenderTextureDescriptor
#include "UnityEngine/RenderTextureDescriptor.hpp"
// Including type: UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion
#include "UnityEngine/Rendering/Universal/ScreenSpaceAmbientOcclusion.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderPass
#include "UnityEngine/Rendering/Universal/ScriptableRenderPass.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ScriptableRenderer
  class ScriptableRenderer;
  // Forward declaring type: ScreenSpaceAmbientOcclusionSettings
  class ScreenSpaceAmbientOcclusionSettings;
  // Forward declaring type: RenderingData
  struct RenderingData;
  // Skipping declaration: ShaderPasses because it is already included!
  // Skipping declaration: BlurTypes because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass*, "UnityEngine.Rendering.Universal", "ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass
  // [TokenAttribute] Offset: FFFFFFFF
  class ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass : public ::UnityEngine::Rendering::Universal::ScriptableRenderPass {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::BlurTypes
    struct BlurTypes;
    // Nested type: ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses
    struct ShaderPasses;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes
    // [TokenAttribute] Offset: FFFFFFFF
    struct BlurTypes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BlurTypes
      constexpr BlurTypes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes Bilateral
      static constexpr const int Bilateral = 0;
      // Get static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes Bilateral
      static ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::BlurTypes _get_Bilateral();
      // Set static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes Bilateral
      static void _set_Bilateral(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::BlurTypes value);
      // static field const value: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes Gaussian
      static constexpr const int Gaussian = 1;
      // Get static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes Gaussian
      static ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::BlurTypes _get_Gaussian();
      // Set static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes Gaussian
      static void _set_Gaussian(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::BlurTypes value);
      // static field const value: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes Kawase
      static constexpr const int Kawase = 2;
      // Get static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes Kawase
      static ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::BlurTypes _get_Kawase();
      // Set static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes Kawase
      static void _set_Kawase(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::BlurTypes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes
    #pragma pack(pop)
    static check_size<sizeof(ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::BlurTypes), 0 + sizeof(int)> __UnityEngine_Rendering_Universal_ScreenSpaceAmbientOcclusion_ScreenSpaceAmbientOcclusionPass_BlurTypesSizeCheck;
    static_assert(sizeof(ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::BlurTypes) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses
    // [TokenAttribute] Offset: FFFFFFFF
    struct ShaderPasses/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ShaderPasses
      constexpr ShaderPasses(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses AmbientOcclusion
      static constexpr const int AmbientOcclusion = 0;
      // Get static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses AmbientOcclusion
      static ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses _get_AmbientOcclusion();
      // Set static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses AmbientOcclusion
      static void _set_AmbientOcclusion(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses value);
      // static field const value: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses BilateralBlurHorizontal
      static constexpr const int BilateralBlurHorizontal = 1;
      // Get static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses BilateralBlurHorizontal
      static ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses _get_BilateralBlurHorizontal();
      // Set static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses BilateralBlurHorizontal
      static void _set_BilateralBlurHorizontal(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses value);
      // static field const value: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses BilateralBlurVertical
      static constexpr const int BilateralBlurVertical = 2;
      // Get static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses BilateralBlurVertical
      static ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses _get_BilateralBlurVertical();
      // Set static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses BilateralBlurVertical
      static void _set_BilateralBlurVertical(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses value);
      // static field const value: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses BilateralBlurFinal
      static constexpr const int BilateralBlurFinal = 3;
      // Get static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses BilateralBlurFinal
      static ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses _get_BilateralBlurFinal();
      // Set static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses BilateralBlurFinal
      static void _set_BilateralBlurFinal(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses value);
      // static field const value: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses BilateralAfterOpaque
      static constexpr const int BilateralAfterOpaque = 4;
      // Get static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses BilateralAfterOpaque
      static ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses _get_BilateralAfterOpaque();
      // Set static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses BilateralAfterOpaque
      static void _set_BilateralAfterOpaque(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses value);
      // static field const value: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses GaussianBlurHorizontal
      static constexpr const int GaussianBlurHorizontal = 5;
      // Get static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses GaussianBlurHorizontal
      static ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses _get_GaussianBlurHorizontal();
      // Set static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses GaussianBlurHorizontal
      static void _set_GaussianBlurHorizontal(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses value);
      // static field const value: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses GaussianBlurVertical
      static constexpr const int GaussianBlurVertical = 6;
      // Get static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses GaussianBlurVertical
      static ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses _get_GaussianBlurVertical();
      // Set static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses GaussianBlurVertical
      static void _set_GaussianBlurVertical(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses value);
      // static field const value: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses GaussianAfterOpaque
      static constexpr const int GaussianAfterOpaque = 7;
      // Get static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses GaussianAfterOpaque
      static ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses _get_GaussianAfterOpaque();
      // Set static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses GaussianAfterOpaque
      static void _set_GaussianAfterOpaque(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses value);
      // static field const value: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses KawaseBlur
      static constexpr const int KawaseBlur = 8;
      // Get static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses KawaseBlur
      static ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses _get_KawaseBlur();
      // Set static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses KawaseBlur
      static void _set_KawaseBlur(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses value);
      // static field const value: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses KawaseAfterOpaque
      static constexpr const int KawaseAfterOpaque = 9;
      // Get static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses KawaseAfterOpaque
      static ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses _get_KawaseAfterOpaque();
      // Set static field: static public UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses KawaseAfterOpaque
      static void _set_KawaseAfterOpaque(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses
    #pragma pack(pop)
    static check_size<sizeof(ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses), 0 + sizeof(int)> __UnityEngine_Rendering_Universal_ScreenSpaceAmbientOcclusion_ScreenSpaceAmbientOcclusionPass_ShaderPassesSizeCheck;
    static_assert(sizeof(ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses) == 0x4);
    public:
    // System.String profilerTag
    // Size: 0x8
    // Offset: 0xE0
    ::StringW profilerTag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean m_SupportsR8RenderTextureFormat
    // Size: 0x1
    // Offset: 0xE8
    bool m_SupportsR8RenderTextureFormat;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 m_BlueNoiseTextureIndex
    // Size: 0x4
    // Offset: 0xEC
    int m_BlueNoiseTextureIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_BlurRandomOffsetX
    // Size: 0x4
    // Offset: 0xF0
    float m_BlurRandomOffsetX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_BlurRandomOffsetY
    // Size: 0x4
    // Offset: 0xF4
    float m_BlurRandomOffsetY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Material m_Material
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Material* m_Material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Texture2D[] m_BlueNoiseTextures
    // Size: 0x8
    // Offset: 0x100
    ::ArrayW<::UnityEngine::Texture2D*> m_BlueNoiseTextures;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Texture2D*>) == 0x8);
    // private UnityEngine.Vector4[] m_CameraTopLeftCorner
    // Size: 0x8
    // Offset: 0x108
    ::ArrayW<::UnityEngine::Vector4> m_CameraTopLeftCorner;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private UnityEngine.Vector4[] m_CameraXExtent
    // Size: 0x8
    // Offset: 0x110
    ::ArrayW<::UnityEngine::Vector4> m_CameraXExtent;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private UnityEngine.Vector4[] m_CameraYExtent
    // Size: 0x8
    // Offset: 0x118
    ::ArrayW<::UnityEngine::Vector4> m_CameraYExtent;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private UnityEngine.Vector4[] m_CameraZExtent
    // Size: 0x8
    // Offset: 0x120
    ::ArrayW<::UnityEngine::Vector4> m_CameraZExtent;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private UnityEngine.Rendering.RTHandle[] m_SSAOTextures
    // Size: 0x8
    // Offset: 0x128
    ::ArrayW<::UnityEngine::Rendering::RTHandle*> m_SSAOTextures;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::RTHandle*>) == 0x8);
    // private UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes m_BlurType
    // Size: 0x4
    // Offset: 0x130
    ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::BlurTypes m_BlurType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::BlurTypes) == 0x4);
    // private UnityEngine.Matrix4x4[] m_CameraViewProjections
    // Size: 0x8
    // Offset: 0x138
    ::ArrayW<::UnityEngine::Matrix4x4> m_CameraViewProjections;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // private UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    // Size: 0x8
    // Offset: 0x140
    ::UnityEngine::Rendering::ProfilingSampler* m_ProfilingSampler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // private UnityEngine.Rendering.Universal.ScriptableRenderer m_Renderer
    // Size: 0x8
    // Offset: 0x148
    ::UnityEngine::Rendering::Universal::ScriptableRenderer* m_Renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ScriptableRenderer*) == 0x8);
    // private UnityEngine.RenderTextureDescriptor m_AOPassDescriptor
    // Size: 0x34
    // Offset: 0x150
    ::UnityEngine::RenderTextureDescriptor m_AOPassDescriptor;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTextureDescriptor) == 0x34);
    // private UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusionSettings m_CurrentSettings
    // Size: 0x8
    // Offset: 0x188
    ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusionSettings* m_CurrentSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusionSettings*) == 0x8);
    public:
    // static field const value: static private System.Int32 k_FinalTexID
    static constexpr const int k_FinalTexID = 3;
    // Get static field: static private System.Int32 k_FinalTexID
    static int _get_k_FinalTexID();
    // Set static field: static private System.Int32 k_FinalTexID
    static void _set_k_FinalTexID(int value);
    // static field const value: static private System.String k_SSAOTextureName
    static constexpr const char* k_SSAOTextureName = "_ScreenSpaceOcclusionTexture";
    // Get static field: static private System.String k_SSAOTextureName
    static ::StringW _get_k_SSAOTextureName();
    // Set static field: static private System.String k_SSAOTextureName
    static void _set_k_SSAOTextureName(::StringW value);
    // static field const value: static private System.String k_SSAOAmbientOcclusionParamName
    static constexpr const char* k_SSAOAmbientOcclusionParamName = "_AmbientOcclusionParam";
    // Get static field: static private System.String k_SSAOAmbientOcclusionParamName
    static ::StringW _get_k_SSAOAmbientOcclusionParamName();
    // Set static field: static private System.String k_SSAOAmbientOcclusionParamName
    static void _set_k_SSAOAmbientOcclusionParamName(::StringW value);
    // Get static field: static private readonly System.Int32 s_SSAOParamsID
    static int _get_s_SSAOParamsID();
    // Set static field: static private readonly System.Int32 s_SSAOParamsID
    static void _set_s_SSAOParamsID(int value);
    // Get static field: static private readonly System.Int32 s_SSAOBlueNoiseParamsID
    static int _get_s_SSAOBlueNoiseParamsID();
    // Set static field: static private readonly System.Int32 s_SSAOBlueNoiseParamsID
    static void _set_s_SSAOBlueNoiseParamsID(int value);
    // Get static field: static private readonly System.Int32 s_LastKawasePass
    static int _get_s_LastKawasePass();
    // Set static field: static private readonly System.Int32 s_LastKawasePass
    static void _set_s_LastKawasePass(int value);
    // Get static field: static private readonly System.Int32 s_BlueNoiseTextureID
    static int _get_s_BlueNoiseTextureID();
    // Set static field: static private readonly System.Int32 s_BlueNoiseTextureID
    static void _set_s_BlueNoiseTextureID(int value);
    // Get static field: static private readonly System.Int32 s_CameraViewXExtentID
    static int _get_s_CameraViewXExtentID();
    // Set static field: static private readonly System.Int32 s_CameraViewXExtentID
    static void _set_s_CameraViewXExtentID(int value);
    // Get static field: static private readonly System.Int32 s_CameraViewYExtentID
    static int _get_s_CameraViewYExtentID();
    // Set static field: static private readonly System.Int32 s_CameraViewYExtentID
    static void _set_s_CameraViewYExtentID(int value);
    // Get static field: static private readonly System.Int32 s_CameraViewZExtentID
    static int _get_s_CameraViewZExtentID();
    // Set static field: static private readonly System.Int32 s_CameraViewZExtentID
    static void _set_s_CameraViewZExtentID(int value);
    // Get static field: static private readonly System.Int32 s_ProjectionParams2ID
    static int _get_s_ProjectionParams2ID();
    // Set static field: static private readonly System.Int32 s_ProjectionParams2ID
    static void _set_s_ProjectionParams2ID(int value);
    // Get static field: static private readonly System.Int32 s_KawaseBlurIterationID
    static int _get_s_KawaseBlurIterationID();
    // Set static field: static private readonly System.Int32 s_KawaseBlurIterationID
    static void _set_s_KawaseBlurIterationID(int value);
    // Get static field: static private readonly System.Int32 s_CameraViewProjectionsID
    static int _get_s_CameraViewProjectionsID();
    // Set static field: static private readonly System.Int32 s_CameraViewProjectionsID
    static void _set_s_CameraViewProjectionsID(int value);
    // Get static field: static private readonly System.Int32 s_CameraViewTopLeftCornerID
    static int _get_s_CameraViewTopLeftCornerID();
    // Set static field: static private readonly System.Int32 s_CameraViewTopLeftCornerID
    static void _set_s_CameraViewTopLeftCornerID(int value);
    // Get static field: static private readonly System.Int32[] m_BilateralTexturesIndices
    static ::ArrayW<int> _get_m_BilateralTexturesIndices();
    // Set static field: static private readonly System.Int32[] m_BilateralTexturesIndices
    static void _set_m_BilateralTexturesIndices(::ArrayW<int> value);
    // Get static field: static private readonly UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses[] m_BilateralPasses
    static ::ArrayW<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses> _get_m_BilateralPasses();
    // Set static field: static private readonly UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses[] m_BilateralPasses
    static void _set_m_BilateralPasses(::ArrayW<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses> value);
    // Get static field: static private readonly UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses[] m_BilateralAfterOpaquePasses
    static ::ArrayW<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses> _get_m_BilateralAfterOpaquePasses();
    // Set static field: static private readonly UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses[] m_BilateralAfterOpaquePasses
    static void _set_m_BilateralAfterOpaquePasses(::ArrayW<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses> value);
    // Get static field: static private readonly System.Int32[] m_GaussianTexturesIndices
    static ::ArrayW<int> _get_m_GaussianTexturesIndices();
    // Set static field: static private readonly System.Int32[] m_GaussianTexturesIndices
    static void _set_m_GaussianTexturesIndices(::ArrayW<int> value);
    // Get static field: static private readonly UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses[] m_GaussianPasses
    static ::ArrayW<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses> _get_m_GaussianPasses();
    // Set static field: static private readonly UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses[] m_GaussianPasses
    static void _set_m_GaussianPasses(::ArrayW<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses> value);
    // Get static field: static private readonly UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses[] m_GaussianAfterOpaquePasses
    static ::ArrayW<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses> _get_m_GaussianAfterOpaquePasses();
    // Set static field: static private readonly UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses[] m_GaussianAfterOpaquePasses
    static void _set_m_GaussianAfterOpaquePasses(::ArrayW<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses> value);
    // Get static field: static private readonly System.Int32[] m_KawaseTexturesIndices
    static ::ArrayW<int> _get_m_KawaseTexturesIndices();
    // Set static field: static private readonly System.Int32[] m_KawaseTexturesIndices
    static void _set_m_KawaseTexturesIndices(::ArrayW<int> value);
    // Get static field: static private readonly UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses[] m_KawasePasses
    static ::ArrayW<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses> _get_m_KawasePasses();
    // Set static field: static private readonly UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses[] m_KawasePasses
    static void _set_m_KawasePasses(::ArrayW<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses> value);
    // Get static field: static private readonly UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses[] m_KawaseAfterOpaquePasses
    static ::ArrayW<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses> _get_m_KawaseAfterOpaquePasses();
    // Set static field: static private readonly UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses[] m_KawaseAfterOpaquePasses
    static void _set_m_KawaseAfterOpaquePasses(::ArrayW<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses> value);
    // Get instance field reference: System.String profilerTag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_profilerTag();
    // Get instance field reference: private System.Boolean m_SupportsR8RenderTextureFormat
    [[deprecated("Use field access instead!")]] bool& dyn_m_SupportsR8RenderTextureFormat();
    // Get instance field reference: private System.Int32 m_BlueNoiseTextureIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_BlueNoiseTextureIndex();
    // Get instance field reference: private System.Single m_BlurRandomOffsetX
    [[deprecated("Use field access instead!")]] float& dyn_m_BlurRandomOffsetX();
    // Get instance field reference: private System.Single m_BlurRandomOffsetY
    [[deprecated("Use field access instead!")]] float& dyn_m_BlurRandomOffsetY();
    // Get instance field reference: private UnityEngine.Material m_Material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_Material();
    // Get instance field reference: private UnityEngine.Texture2D[] m_BlueNoiseTextures
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Texture2D*>& dyn_m_BlueNoiseTextures();
    // Get instance field reference: private UnityEngine.Vector4[] m_CameraTopLeftCorner
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_CameraTopLeftCorner();
    // Get instance field reference: private UnityEngine.Vector4[] m_CameraXExtent
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_CameraXExtent();
    // Get instance field reference: private UnityEngine.Vector4[] m_CameraYExtent
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_CameraYExtent();
    // Get instance field reference: private UnityEngine.Vector4[] m_CameraZExtent
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_CameraZExtent();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle[] m_SSAOTextures
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::RTHandle*>& dyn_m_SSAOTextures();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes m_BlurType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::BlurTypes& dyn_m_BlurType();
    // Get instance field reference: private UnityEngine.Matrix4x4[] m_CameraViewProjections
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn_m_CameraViewProjections();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_m_ProfilingSampler();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ScriptableRenderer m_Renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ScriptableRenderer*& dyn_m_Renderer();
    // Get instance field reference: private UnityEngine.RenderTextureDescriptor m_AOPassDescriptor
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTextureDescriptor& dyn_m_AOPassDescriptor();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusionSettings m_CurrentSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusionSettings*& dyn_m_CurrentSettings();
    // private System.Boolean get_isRendererDeferred()
    // Offset: 0x52D525C
    bool get_isRendererDeferred();
    // System.Boolean Setup(ref UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusionSettings featureSettings, ref UnityEngine.Rendering.Universal.ScriptableRenderer renderer, ref UnityEngine.Material material, ref UnityEngine.Texture2D[] blueNoiseTextures)
    // Offset: 0x52D4EEC
    bool Setup(ByRef<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusionSettings*> featureSettings, ByRef<::UnityEngine::Rendering::Universal::ScriptableRenderer*> renderer, ByRef<::UnityEngine::Material*> material, ByRef<::ArrayW<::UnityEngine::Texture2D*>> blueNoiseTextures);
    // static private System.Void RenderAndSetBaseMap(ref UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData, ref UnityEngine.Rendering.Universal.ScriptableRenderer renderer, ref UnityEngine.Material mat, ref UnityEngine.Rendering.RTHandle baseMap, ref UnityEngine.Rendering.RTHandle target, UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses pass)
    // Offset: 0x52D6928
    static void RenderAndSetBaseMap(ByRef<::UnityEngine::Rendering::CommandBuffer*> cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData, ByRef<::UnityEngine::Rendering::Universal::ScriptableRenderer*> renderer, ByRef<::UnityEngine::Material*> mat, ByRef<::UnityEngine::Rendering::RTHandle*> baseMap, ByRef<::UnityEngine::Rendering::RTHandle*> target, ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses pass);
    // static private System.Void GetPassOrder(UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes blurType, System.Boolean isAfterOpaque, out System.Int32[] textureIndices, out UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses[] shaderPasses)
    // Offset: 0x52D677C
    static void GetPassOrder(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::BlurTypes blurType, bool isAfterOpaque, ByRef<::ArrayW<int>> textureIndices, ByRef<::ArrayW<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses>> shaderPasses);
    // static private System.Boolean IsAfterOpaquePass(ref UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses pass)
    // Offset: 0x52D6C20
    static bool IsAfterOpaquePass(ByRef<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses> pass);
    // public System.Void Dispose()
    // Offset: 0x52D5114
    void Dispose();
    // System.Void .ctor()
    // Offset: 0x52D4A4C
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass*, creationType>()));
    }
    // public override System.Void OnCameraSetup(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52D52C8
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::OnCameraSetup(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void OnCameraSetup(::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public override System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52D6148
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void Execute(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public override System.Void OnCameraCleanup(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52D6C48
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::OnCameraCleanup(UnityEngine.Rendering.CommandBuffer cmd)
    void OnCameraCleanup(::UnityEngine::Rendering::CommandBuffer* cmd);
    // static private System.Void .cctor()
    // Offset: 0x52D6D2C
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::.cctor()
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses, "UnityEngine.Rendering.Universal", "ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::BlurTypes, "UnityEngine.Rendering.Universal", "ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::get_isRendererDeferred
// Il2CppName: get_isRendererDeferred
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::*)()>(&UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::get_isRendererDeferred)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass*), "get_isRendererDeferred", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::*)(ByRef<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusionSettings*>, ByRef<::UnityEngine::Rendering::Universal::ScriptableRenderer*>, ByRef<::UnityEngine::Material*>, ByRef<::ArrayW<::UnityEngine::Texture2D*>>)>(&UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::Setup)> {
  static const MethodInfo* get() {
    static auto* featureSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScreenSpaceAmbientOcclusionSettings")->this_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer")->this_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->this_arg;
    static auto* blueNoiseTextures = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{featureSettings, renderer, material, blueNoiseTextures});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::RenderAndSetBaseMap
// Il2CppName: RenderAndSetBaseMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Rendering::CommandBuffer*>, ByRef<::UnityEngine::Rendering::Universal::RenderingData>, ByRef<::UnityEngine::Rendering::Universal::ScriptableRenderer*>, ByRef<::UnityEngine::Material*>, ByRef<::UnityEngine::Rendering::RTHandle*>, ByRef<::UnityEngine::Rendering::RTHandle*>, ::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses)>(&UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::RenderAndSetBaseMap)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->this_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer")->this_arg;
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->this_arg;
    static auto* baseMap = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->this_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->this_arg;
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass*), "RenderAndSetBaseMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData, renderer, mat, baseMap, target, pass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::GetPassOrder
// Il2CppName: GetPassOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::BlurTypes, bool, ByRef<::ArrayW<int>>, ByRef<::ArrayW<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses>>)>(&UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::GetPassOrder)> {
  static const MethodInfo* get() {
    static auto* blurType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/BlurTypes")->byval_arg;
    static auto* isAfterOpaque = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* textureIndices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* shaderPasses = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass*), "GetPassOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blurType, isAfterOpaque, textureIndices, shaderPasses});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::IsAfterOpaquePass
// Il2CppName: IsAfterOpaquePass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::ShaderPasses>)>(&UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::IsAfterOpaquePass)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScreenSpaceAmbientOcclusion/ScreenSpaceAmbientOcclusionPass/ShaderPasses")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass*), "IsAfterOpaquePass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::*)()>(&UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::OnCameraSetup
// Il2CppName: OnCameraSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::*)(::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::OnCameraSetup)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass*), "OnCameraSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::Execute)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::OnCameraCleanup
// Il2CppName: OnCameraCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::OnCameraCleanup)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass*), "OnCameraCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScreenSpaceAmbientOcclusion::ScreenSpaceAmbientOcclusionPass*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
