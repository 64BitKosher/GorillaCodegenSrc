// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.RenderPipelineAsset
#include "UnityEngine/Rendering/RenderPipelineAsset.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: UnityEngine.Rendering.Universal.RendererType
#include "UnityEngine/Rendering/Universal/RendererType.hpp"
// Including type: UnityEngine.Rendering.Universal.Downsampling
#include "UnityEngine/Rendering/Universal/Downsampling.hpp"
// Including type: UnityEngine.Rendering.Universal.HDRColorBufferPrecision
#include "UnityEngine/Rendering/Universal/HDRColorBufferPrecision.hpp"
// Including type: UnityEngine.Rendering.Universal.MsaaQuality
#include "UnityEngine/Rendering/Universal/MsaaQuality.hpp"
// Including type: UnityEngine.Rendering.Universal.UpscalingFilterSelection
#include "UnityEngine/Rendering/Universal/UpscalingFilterSelection.hpp"
// Including type: UnityEngine.Rendering.Universal.LODCrossFadeDitheringType
#include "UnityEngine/Rendering/Universal/LODCrossFadeDitheringType.hpp"
// Including type: UnityEngine.Rendering.Universal.ShEvalMode
#include "UnityEngine/Rendering/Universal/ShEvalMode.hpp"
// Including type: UnityEngine.Rendering.Universal.LightRenderingMode
#include "UnityEngine/Rendering/Universal/LightRenderingMode.hpp"
// Including type: UnityEngine.Rendering.Universal.ShadowResolution
#include "UnityEngine/Rendering/Universal/ShadowResolution.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Rendering.Universal.SoftShadowQuality
#include "UnityEngine/Rendering/Universal/SoftShadowQuality.hpp"
// Including type: UnityEngine.Rendering.Universal.LightCookieResolution
#include "UnityEngine/Rendering/Universal/LightCookieResolution.hpp"
// Including type: UnityEngine.Rendering.Universal.LightCookieFormat
#include "UnityEngine/Rendering/Universal/LightCookieFormat.hpp"
// Including type: UnityEngine.Rendering.Universal.PipelineDebugLevel
#include "UnityEngine/Rendering/Universal/PipelineDebugLevel.hpp"
// Including type: UnityEngine.Rendering.Universal.StoreActionsOptimization
#include "UnityEngine/Rendering/Universal/StoreActionsOptimization.hpp"
// Including type: UnityEngine.Rendering.Universal.ColorGradingMode
#include "UnityEngine/Rendering/Universal/ColorGradingMode.hpp"
// Including type: UnityEngine.Rendering.Universal.ShadowQuality
#include "UnityEngine/Rendering/Universal/ShadowQuality.hpp"
// Including type: UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode
#include "UnityEngine/Rendering/Universal/VolumeFrameworkUpdateMode.hpp"
// Including type: UnityEngine.Rendering.Universal.ShadowCascadesOption
#include "UnityEngine/Rendering/Universal/ShadowCascadesOption.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Experimental.Rendering.GraphicsFormat
#include "UnityEngine/Experimental/Rendering/GraphicsFormat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ScriptableRenderer
  class ScriptableRenderer;
  // Forward declaring type: ScriptableRendererData
  class ScriptableRendererData;
  // Forward declaring type: DefaultMaterialType
  struct DefaultMaterialType;
  // Forward declaring type: ShaderVariantLogLevel
  struct ShaderVariantLogLevel;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Vector2Int
  struct Vector2Int;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RenderPipeline
  class RenderPipeline;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: UniversalRenderPipelineAsset
  class UniversalRenderPipelineAsset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*, "UnityEngine.Rendering.Universal", "UniversalRenderPipelineAsset");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x130
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExcludeFromPresetAttribute] Offset: FFFFFFFF
  class UniversalRenderPipelineAsset : public ::UnityEngine::Rendering::RenderPipelineAsset/*, public ::UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::TextureResources
    class TextureResources;
    public:
    // private UnityEngine.Shader m_DefaultShader
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Shader* m_DefaultShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Rendering.Universal.ScriptableRenderer[] m_Renderers
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Rendering::Universal::ScriptableRenderer*> m_Renderers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::Universal::ScriptableRenderer*>) == 0x8);
    // private System.Int32 k_AssetVersion
    // Size: 0x4
    // Offset: 0x28
    int k_AssetVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 k_AssetPreviousVersion
    // Size: 0x4
    // Offset: 0x2C
    int k_AssetPreviousVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.Universal.RendererType m_RendererType
    // Size: 0x4
    // Offset: 0x30
    ::UnityEngine::Rendering::Universal::RendererType m_RendererType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::RendererType) == 0x4);
    // Padding between fields: m_RendererType and: m_RendererData
    char __padding4[0x4] = {};
    // UnityEngine.Rendering.Universal.ScriptableRendererData m_RendererData
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Rendering::Universal::ScriptableRendererData* m_RendererData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ScriptableRendererData*) == 0x8);
    // UnityEngine.Rendering.Universal.ScriptableRendererData[] m_RendererDataList
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Rendering::Universal::ScriptableRendererData*> m_RendererDataList;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::Universal::ScriptableRendererData*>) == 0x8);
    // System.Int32 m_DefaultRendererIndex
    // Size: 0x4
    // Offset: 0x48
    int m_DefaultRendererIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_RequireDepthTexture
    // Size: 0x1
    // Offset: 0x4C
    bool m_RequireDepthTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_RequireOpaqueTexture
    // Size: 0x1
    // Offset: 0x4D
    bool m_RequireOpaqueTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RequireOpaqueTexture and: m_OpaqueDownsampling
    char __padding9[0x2] = {};
    // private UnityEngine.Rendering.Universal.Downsampling m_OpaqueDownsampling
    // Size: 0x4
    // Offset: 0x50
    ::UnityEngine::Rendering::Universal::Downsampling m_OpaqueDownsampling;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Downsampling) == 0x4);
    // private System.Boolean m_SupportsTerrainHoles
    // Size: 0x1
    // Offset: 0x54
    bool m_SupportsTerrainHoles;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_SupportsHDR
    // Size: 0x1
    // Offset: 0x55
    bool m_SupportsHDR;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_SupportsHDR and: m_HDRColorBufferPrecision
    char __padding12[0x2] = {};
    // private UnityEngine.Rendering.Universal.HDRColorBufferPrecision m_HDRColorBufferPrecision
    // Size: 0x4
    // Offset: 0x58
    ::UnityEngine::Rendering::Universal::HDRColorBufferPrecision m_HDRColorBufferPrecision;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::HDRColorBufferPrecision) == 0x4);
    // private UnityEngine.Rendering.Universal.MsaaQuality m_MSAA
    // Size: 0x4
    // Offset: 0x5C
    ::UnityEngine::Rendering::Universal::MsaaQuality m_MSAA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::MsaaQuality) == 0x4);
    // private System.Single m_RenderScale
    // Size: 0x4
    // Offset: 0x60
    float m_RenderScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Rendering.Universal.UpscalingFilterSelection m_UpscalingFilter
    // Size: 0x4
    // Offset: 0x64
    ::UnityEngine::Rendering::Universal::UpscalingFilterSelection m_UpscalingFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::UpscalingFilterSelection) == 0x4);
    // private System.Boolean m_FsrOverrideSharpness
    // Size: 0x1
    // Offset: 0x68
    bool m_FsrOverrideSharpness;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_FsrOverrideSharpness and: m_FsrSharpness
    char __padding17[0x3] = {};
    // private System.Single m_FsrSharpness
    // Size: 0x4
    // Offset: 0x6C
    float m_FsrSharpness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_EnableLODCrossFade
    // Size: 0x1
    // Offset: 0x70
    bool m_EnableLODCrossFade;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_EnableLODCrossFade and: m_LODCrossFadeDitheringType
    char __padding19[0x3] = {};
    // private UnityEngine.Rendering.Universal.LODCrossFadeDitheringType m_LODCrossFadeDitheringType
    // Size: 0x4
    // Offset: 0x74
    ::UnityEngine::Rendering::Universal::LODCrossFadeDitheringType m_LODCrossFadeDitheringType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LODCrossFadeDitheringType) == 0x4);
    // private UnityEngine.Rendering.Universal.ShEvalMode m_ShEvalMode
    // Size: 0x4
    // Offset: 0x78
    ::UnityEngine::Rendering::Universal::ShEvalMode m_ShEvalMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ShEvalMode) == 0x4);
    // private UnityEngine.Rendering.Universal.LightRenderingMode m_MainLightRenderingMode
    // Size: 0x4
    // Offset: 0x7C
    ::UnityEngine::Rendering::Universal::LightRenderingMode m_MainLightRenderingMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LightRenderingMode) == 0x4);
    // private System.Boolean m_MainLightShadowsSupported
    // Size: 0x1
    // Offset: 0x80
    bool m_MainLightShadowsSupported;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_MainLightShadowsSupported and: m_MainLightShadowmapResolution
    char __padding23[0x3] = {};
    // private UnityEngine.Rendering.Universal.ShadowResolution m_MainLightShadowmapResolution
    // Size: 0x4
    // Offset: 0x84
    ::UnityEngine::Rendering::Universal::ShadowResolution m_MainLightShadowmapResolution;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ShadowResolution) == 0x4);
    // private UnityEngine.Rendering.Universal.LightRenderingMode m_AdditionalLightsRenderingMode
    // Size: 0x4
    // Offset: 0x88
    ::UnityEngine::Rendering::Universal::LightRenderingMode m_AdditionalLightsRenderingMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LightRenderingMode) == 0x4);
    // private System.Int32 m_AdditionalLightsPerObjectLimit
    // Size: 0x4
    // Offset: 0x8C
    int m_AdditionalLightsPerObjectLimit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_AdditionalLightShadowsSupported
    // Size: 0x1
    // Offset: 0x90
    bool m_AdditionalLightShadowsSupported;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AdditionalLightShadowsSupported and: m_AdditionalLightsShadowmapResolution
    char __padding27[0x3] = {};
    // private UnityEngine.Rendering.Universal.ShadowResolution m_AdditionalLightsShadowmapResolution
    // Size: 0x4
    // Offset: 0x94
    ::UnityEngine::Rendering::Universal::ShadowResolution m_AdditionalLightsShadowmapResolution;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ShadowResolution) == 0x4);
    // private System.Int32 m_AdditionalLightsShadowResolutionTierLow
    // Size: 0x4
    // Offset: 0x98
    int m_AdditionalLightsShadowResolutionTierLow;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_AdditionalLightsShadowResolutionTierMedium
    // Size: 0x4
    // Offset: 0x9C
    int m_AdditionalLightsShadowResolutionTierMedium;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_AdditionalLightsShadowResolutionTierHigh
    // Size: 0x4
    // Offset: 0xA0
    int m_AdditionalLightsShadowResolutionTierHigh;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_ReflectionProbeBlending
    // Size: 0x1
    // Offset: 0xA4
    bool m_ReflectionProbeBlending;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ReflectionProbeBoxProjection
    // Size: 0x1
    // Offset: 0xA5
    bool m_ReflectionProbeBoxProjection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ReflectionProbeBoxProjection and: m_ShadowDistance
    char __padding33[0x2] = {};
    // private System.Single m_ShadowDistance
    // Size: 0x4
    // Offset: 0xA8
    float m_ShadowDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_ShadowCascadeCount
    // Size: 0x4
    // Offset: 0xAC
    int m_ShadowCascadeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_Cascade2Split
    // Size: 0x4
    // Offset: 0xB0
    float m_Cascade2Split;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 m_Cascade3Split
    // Size: 0x8
    // Offset: 0xB4
    ::UnityEngine::Vector2 m_Cascade3Split;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector3 m_Cascade4Split
    // Size: 0xC
    // Offset: 0xBC
    ::UnityEngine::Vector3 m_Cascade4Split;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_CascadeBorder
    // Size: 0x4
    // Offset: 0xC8
    float m_CascadeBorder;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ShadowDepthBias
    // Size: 0x4
    // Offset: 0xCC
    float m_ShadowDepthBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ShadowNormalBias
    // Size: 0x4
    // Offset: 0xD0
    float m_ShadowNormalBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_SoftShadowsSupported
    // Size: 0x1
    // Offset: 0xD4
    bool m_SoftShadowsSupported;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ConservativeEnclosingSphere
    // Size: 0x1
    // Offset: 0xD5
    bool m_ConservativeEnclosingSphere;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ConservativeEnclosingSphere and: m_NumIterationsEnclosingSphere
    char __padding43[0x2] = {};
    // private System.Int32 m_NumIterationsEnclosingSphere
    // Size: 0x4
    // Offset: 0xD8
    int m_NumIterationsEnclosingSphere;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.Universal.SoftShadowQuality m_SoftShadowQuality
    // Size: 0x4
    // Offset: 0xDC
    ::UnityEngine::Rendering::Universal::SoftShadowQuality m_SoftShadowQuality;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::SoftShadowQuality) == 0x4);
    // private UnityEngine.Rendering.Universal.LightCookieResolution m_AdditionalLightsCookieResolution
    // Size: 0x4
    // Offset: 0xE0
    ::UnityEngine::Rendering::Universal::LightCookieResolution m_AdditionalLightsCookieResolution;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LightCookieResolution) == 0x4);
    // private UnityEngine.Rendering.Universal.LightCookieFormat m_AdditionalLightsCookieFormat
    // Size: 0x4
    // Offset: 0xE4
    ::UnityEngine::Rendering::Universal::LightCookieFormat m_AdditionalLightsCookieFormat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::LightCookieFormat) == 0x4);
    // private System.Boolean m_UseSRPBatcher
    // Size: 0x1
    // Offset: 0xE8
    bool m_UseSRPBatcher;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_SupportsDynamicBatching
    // Size: 0x1
    // Offset: 0xE9
    bool m_SupportsDynamicBatching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_MixedLightingSupported
    // Size: 0x1
    // Offset: 0xEA
    bool m_MixedLightingSupported;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_SupportsLightCookies
    // Size: 0x1
    // Offset: 0xEB
    bool m_SupportsLightCookies;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_SupportsLightLayers
    // Size: 0x1
    // Offset: 0xEC
    bool m_SupportsLightLayers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_SupportsLightLayers and: m_DebugLevel
    char __padding52[0x3] = {};
    // private UnityEngine.Rendering.Universal.PipelineDebugLevel m_DebugLevel
    // Size: 0x4
    // Offset: 0xF0
    ::UnityEngine::Rendering::Universal::PipelineDebugLevel m_DebugLevel;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::PipelineDebugLevel) == 0x4);
    // private UnityEngine.Rendering.Universal.StoreActionsOptimization m_StoreActionsOptimization
    // Size: 0x4
    // Offset: 0xF4
    ::UnityEngine::Rendering::Universal::StoreActionsOptimization m_StoreActionsOptimization;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::StoreActionsOptimization) == 0x4);
    // private System.Boolean m_EnableRenderGraph
    // Size: 0x1
    // Offset: 0xF8
    bool m_EnableRenderGraph;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_UseAdaptivePerformance
    // Size: 0x1
    // Offset: 0xF9
    bool m_UseAdaptivePerformance;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UseAdaptivePerformance and: m_ColorGradingMode
    char __padding56[0x2] = {};
    // private UnityEngine.Rendering.Universal.ColorGradingMode m_ColorGradingMode
    // Size: 0x4
    // Offset: 0xFC
    ::UnityEngine::Rendering::Universal::ColorGradingMode m_ColorGradingMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ColorGradingMode) == 0x4);
    // private System.Int32 m_ColorGradingLutSize
    // Size: 0x4
    // Offset: 0x100
    int m_ColorGradingLutSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_UseFastSRGBLinearConversion
    // Size: 0x1
    // Offset: 0x104
    bool m_UseFastSRGBLinearConversion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UseFastSRGBLinearConversion and: m_ShadowType
    char __padding59[0x3] = {};
    // private UnityEngine.Rendering.Universal.ShadowQuality m_ShadowType
    // Size: 0x4
    // Offset: 0x108
    ::UnityEngine::Rendering::Universal::ShadowQuality m_ShadowType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ShadowQuality) == 0x4);
    // private System.Boolean m_LocalShadowsSupported
    // Size: 0x1
    // Offset: 0x10C
    bool m_LocalShadowsSupported;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_LocalShadowsSupported and: m_LocalShadowsAtlasResolution
    char __padding61[0x3] = {};
    // private UnityEngine.Rendering.Universal.ShadowResolution m_LocalShadowsAtlasResolution
    // Size: 0x4
    // Offset: 0x110
    ::UnityEngine::Rendering::Universal::ShadowResolution m_LocalShadowsAtlasResolution;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ShadowResolution) == 0x4);
    // private System.Int32 m_MaxPixelLights
    // Size: 0x4
    // Offset: 0x114
    int m_MaxPixelLights;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.Universal.ShadowResolution m_ShadowAtlasResolution
    // Size: 0x4
    // Offset: 0x118
    ::UnityEngine::Rendering::Universal::ShadowResolution m_ShadowAtlasResolution;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ShadowResolution) == 0x4);
    // private UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode m_VolumeFrameworkUpdateMode
    // Size: 0x4
    // Offset: 0x11C
    ::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode m_VolumeFrameworkUpdateMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode) == 0x4);
    // private UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset/TextureResources m_Textures
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::TextureResources* m_Textures;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::TextureResources*) == 0x8);
    // private System.Int32 m_ShaderVariantLogLevel
    // Size: 0x4
    // Offset: 0x128
    int m_ShaderVariantLogLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.Universal.ShadowCascadesOption m_ShadowCascades
    // Size: 0x4
    // Offset: 0x12C
    ::UnityEngine::Rendering::Universal::ShadowCascadesOption m_ShadowCascades;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ShadowCascadesOption) == 0x4);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Int32 k_MinLutSize
    static constexpr const int k_MinLutSize = 16;
    // Get static field: static public System.Int32 k_MinLutSize
    static int _get_k_MinLutSize();
    // Set static field: static public System.Int32 k_MinLutSize
    static void _set_k_MinLutSize(int value);
    // static field const value: static public System.Int32 k_MaxLutSize
    static constexpr const int k_MaxLutSize = 65;
    // Get static field: static public System.Int32 k_MaxLutSize
    static int _get_k_MaxLutSize();
    // Set static field: static public System.Int32 k_MaxLutSize
    static void _set_k_MaxLutSize(int value);
    // static field const value: static System.Int32 k_ShadowCascadeMinCount
    static constexpr const int k_ShadowCascadeMinCount = 1;
    // Get static field: static System.Int32 k_ShadowCascadeMinCount
    static int _get_k_ShadowCascadeMinCount();
    // Set static field: static System.Int32 k_ShadowCascadeMinCount
    static void _set_k_ShadowCascadeMinCount(int value);
    // static field const value: static System.Int32 k_ShadowCascadeMaxCount
    static constexpr const int k_ShadowCascadeMaxCount = 4;
    // Get static field: static System.Int32 k_ShadowCascadeMaxCount
    static int _get_k_ShadowCascadeMaxCount();
    // Set static field: static System.Int32 k_ShadowCascadeMaxCount
    static void _set_k_ShadowCascadeMaxCount(int value);
    // Get static field: static public readonly System.Int32 AdditionalLightsDefaultShadowResolutionTierLow
    static int _get_AdditionalLightsDefaultShadowResolutionTierLow();
    // Set static field: static public readonly System.Int32 AdditionalLightsDefaultShadowResolutionTierLow
    static void _set_AdditionalLightsDefaultShadowResolutionTierLow(int value);
    // Get static field: static public readonly System.Int32 AdditionalLightsDefaultShadowResolutionTierMedium
    static int _get_AdditionalLightsDefaultShadowResolutionTierMedium();
    // Set static field: static public readonly System.Int32 AdditionalLightsDefaultShadowResolutionTierMedium
    static void _set_AdditionalLightsDefaultShadowResolutionTierMedium(int value);
    // Get static field: static public readonly System.Int32 AdditionalLightsDefaultShadowResolutionTierHigh
    static int _get_AdditionalLightsDefaultShadowResolutionTierHigh();
    // Set static field: static public readonly System.Int32 AdditionalLightsDefaultShadowResolutionTierHigh
    static void _set_AdditionalLightsDefaultShadowResolutionTierHigh(int value);
    // Get static field: static private UnityEngine.Experimental.Rendering.GraphicsFormat[][] s_LightCookieFormatList
    static ::ArrayW<::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat>> _get_s_LightCookieFormatList();
    // Set static field: static private UnityEngine.Experimental.Rendering.GraphicsFormat[][] s_LightCookieFormatList
    static void _set_s_LightCookieFormatList(::ArrayW<::ArrayW<::UnityEngine::Experimental::Rendering::GraphicsFormat>> value);
    // Get instance field reference: private UnityEngine.Shader m_DefaultShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_DefaultShader();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ScriptableRenderer[] m_Renderers
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::Universal::ScriptableRenderer*>& dyn_m_Renderers();
    // Get instance field reference: private System.Int32 k_AssetVersion
    [[deprecated("Use field access instead!")]] int& dyn_k_AssetVersion();
    // Get instance field reference: private System.Int32 k_AssetPreviousVersion
    [[deprecated("Use field access instead!")]] int& dyn_k_AssetPreviousVersion();
    // Get instance field reference: private UnityEngine.Rendering.Universal.RendererType m_RendererType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::RendererType& dyn_m_RendererType();
    // Get instance field reference: UnityEngine.Rendering.Universal.ScriptableRendererData m_RendererData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ScriptableRendererData*& dyn_m_RendererData();
    // Get instance field reference: UnityEngine.Rendering.Universal.ScriptableRendererData[] m_RendererDataList
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::Universal::ScriptableRendererData*>& dyn_m_RendererDataList();
    // Get instance field reference: System.Int32 m_DefaultRendererIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_DefaultRendererIndex();
    // Get instance field reference: private System.Boolean m_RequireDepthTexture
    [[deprecated("Use field access instead!")]] bool& dyn_m_RequireDepthTexture();
    // Get instance field reference: private System.Boolean m_RequireOpaqueTexture
    [[deprecated("Use field access instead!")]] bool& dyn_m_RequireOpaqueTexture();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Downsampling m_OpaqueDownsampling
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Downsampling& dyn_m_OpaqueDownsampling();
    // Get instance field reference: private System.Boolean m_SupportsTerrainHoles
    [[deprecated("Use field access instead!")]] bool& dyn_m_SupportsTerrainHoles();
    // Get instance field reference: private System.Boolean m_SupportsHDR
    [[deprecated("Use field access instead!")]] bool& dyn_m_SupportsHDR();
    // Get instance field reference: private UnityEngine.Rendering.Universal.HDRColorBufferPrecision m_HDRColorBufferPrecision
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::HDRColorBufferPrecision& dyn_m_HDRColorBufferPrecision();
    // Get instance field reference: private UnityEngine.Rendering.Universal.MsaaQuality m_MSAA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::MsaaQuality& dyn_m_MSAA();
    // Get instance field reference: private System.Single m_RenderScale
    [[deprecated("Use field access instead!")]] float& dyn_m_RenderScale();
    // Get instance field reference: private UnityEngine.Rendering.Universal.UpscalingFilterSelection m_UpscalingFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::UpscalingFilterSelection& dyn_m_UpscalingFilter();
    // Get instance field reference: private System.Boolean m_FsrOverrideSharpness
    [[deprecated("Use field access instead!")]] bool& dyn_m_FsrOverrideSharpness();
    // Get instance field reference: private System.Single m_FsrSharpness
    [[deprecated("Use field access instead!")]] float& dyn_m_FsrSharpness();
    // Get instance field reference: private System.Boolean m_EnableLODCrossFade
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableLODCrossFade();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LODCrossFadeDitheringType m_LODCrossFadeDitheringType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LODCrossFadeDitheringType& dyn_m_LODCrossFadeDitheringType();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ShEvalMode m_ShEvalMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ShEvalMode& dyn_m_ShEvalMode();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LightRenderingMode m_MainLightRenderingMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LightRenderingMode& dyn_m_MainLightRenderingMode();
    // Get instance field reference: private System.Boolean m_MainLightShadowsSupported
    [[deprecated("Use field access instead!")]] bool& dyn_m_MainLightShadowsSupported();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ShadowResolution m_MainLightShadowmapResolution
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ShadowResolution& dyn_m_MainLightShadowmapResolution();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LightRenderingMode m_AdditionalLightsRenderingMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LightRenderingMode& dyn_m_AdditionalLightsRenderingMode();
    // Get instance field reference: private System.Int32 m_AdditionalLightsPerObjectLimit
    [[deprecated("Use field access instead!")]] int& dyn_m_AdditionalLightsPerObjectLimit();
    // Get instance field reference: private System.Boolean m_AdditionalLightShadowsSupported
    [[deprecated("Use field access instead!")]] bool& dyn_m_AdditionalLightShadowsSupported();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ShadowResolution m_AdditionalLightsShadowmapResolution
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ShadowResolution& dyn_m_AdditionalLightsShadowmapResolution();
    // Get instance field reference: private System.Int32 m_AdditionalLightsShadowResolutionTierLow
    [[deprecated("Use field access instead!")]] int& dyn_m_AdditionalLightsShadowResolutionTierLow();
    // Get instance field reference: private System.Int32 m_AdditionalLightsShadowResolutionTierMedium
    [[deprecated("Use field access instead!")]] int& dyn_m_AdditionalLightsShadowResolutionTierMedium();
    // Get instance field reference: private System.Int32 m_AdditionalLightsShadowResolutionTierHigh
    [[deprecated("Use field access instead!")]] int& dyn_m_AdditionalLightsShadowResolutionTierHigh();
    // Get instance field reference: private System.Boolean m_ReflectionProbeBlending
    [[deprecated("Use field access instead!")]] bool& dyn_m_ReflectionProbeBlending();
    // Get instance field reference: private System.Boolean m_ReflectionProbeBoxProjection
    [[deprecated("Use field access instead!")]] bool& dyn_m_ReflectionProbeBoxProjection();
    // Get instance field reference: private System.Single m_ShadowDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_ShadowDistance();
    // Get instance field reference: private System.Int32 m_ShadowCascadeCount
    [[deprecated("Use field access instead!")]] int& dyn_m_ShadowCascadeCount();
    // Get instance field reference: private System.Single m_Cascade2Split
    [[deprecated("Use field access instead!")]] float& dyn_m_Cascade2Split();
    // Get instance field reference: private UnityEngine.Vector2 m_Cascade3Split
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_Cascade3Split();
    // Get instance field reference: private UnityEngine.Vector3 m_Cascade4Split
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Cascade4Split();
    // Get instance field reference: private System.Single m_CascadeBorder
    [[deprecated("Use field access instead!")]] float& dyn_m_CascadeBorder();
    // Get instance field reference: private System.Single m_ShadowDepthBias
    [[deprecated("Use field access instead!")]] float& dyn_m_ShadowDepthBias();
    // Get instance field reference: private System.Single m_ShadowNormalBias
    [[deprecated("Use field access instead!")]] float& dyn_m_ShadowNormalBias();
    // Get instance field reference: private System.Boolean m_SoftShadowsSupported
    [[deprecated("Use field access instead!")]] bool& dyn_m_SoftShadowsSupported();
    // Get instance field reference: private System.Boolean m_ConservativeEnclosingSphere
    [[deprecated("Use field access instead!")]] bool& dyn_m_ConservativeEnclosingSphere();
    // Get instance field reference: private System.Int32 m_NumIterationsEnclosingSphere
    [[deprecated("Use field access instead!")]] int& dyn_m_NumIterationsEnclosingSphere();
    // Get instance field reference: private UnityEngine.Rendering.Universal.SoftShadowQuality m_SoftShadowQuality
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::SoftShadowQuality& dyn_m_SoftShadowQuality();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LightCookieResolution m_AdditionalLightsCookieResolution
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LightCookieResolution& dyn_m_AdditionalLightsCookieResolution();
    // Get instance field reference: private UnityEngine.Rendering.Universal.LightCookieFormat m_AdditionalLightsCookieFormat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::LightCookieFormat& dyn_m_AdditionalLightsCookieFormat();
    // Get instance field reference: private System.Boolean m_UseSRPBatcher
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseSRPBatcher();
    // Get instance field reference: private System.Boolean m_SupportsDynamicBatching
    [[deprecated("Use field access instead!")]] bool& dyn_m_SupportsDynamicBatching();
    // Get instance field reference: private System.Boolean m_MixedLightingSupported
    [[deprecated("Use field access instead!")]] bool& dyn_m_MixedLightingSupported();
    // Get instance field reference: private System.Boolean m_SupportsLightCookies
    [[deprecated("Use field access instead!")]] bool& dyn_m_SupportsLightCookies();
    // Get instance field reference: private System.Boolean m_SupportsLightLayers
    [[deprecated("Use field access instead!")]] bool& dyn_m_SupportsLightLayers();
    // Get instance field reference: private UnityEngine.Rendering.Universal.PipelineDebugLevel m_DebugLevel
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::PipelineDebugLevel& dyn_m_DebugLevel();
    // Get instance field reference: private UnityEngine.Rendering.Universal.StoreActionsOptimization m_StoreActionsOptimization
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::StoreActionsOptimization& dyn_m_StoreActionsOptimization();
    // Get instance field reference: private System.Boolean m_EnableRenderGraph
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableRenderGraph();
    // Get instance field reference: private System.Boolean m_UseAdaptivePerformance
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseAdaptivePerformance();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ColorGradingMode m_ColorGradingMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ColorGradingMode& dyn_m_ColorGradingMode();
    // Get instance field reference: private System.Int32 m_ColorGradingLutSize
    [[deprecated("Use field access instead!")]] int& dyn_m_ColorGradingLutSize();
    // Get instance field reference: private System.Boolean m_UseFastSRGBLinearConversion
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseFastSRGBLinearConversion();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ShadowQuality m_ShadowType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ShadowQuality& dyn_m_ShadowType();
    // Get instance field reference: private System.Boolean m_LocalShadowsSupported
    [[deprecated("Use field access instead!")]] bool& dyn_m_LocalShadowsSupported();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ShadowResolution m_LocalShadowsAtlasResolution
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ShadowResolution& dyn_m_LocalShadowsAtlasResolution();
    // Get instance field reference: private System.Int32 m_MaxPixelLights
    [[deprecated("Use field access instead!")]] int& dyn_m_MaxPixelLights();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ShadowResolution m_ShadowAtlasResolution
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ShadowResolution& dyn_m_ShadowAtlasResolution();
    // Get instance field reference: private UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode m_VolumeFrameworkUpdateMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode& dyn_m_VolumeFrameworkUpdateMode();
    // Get instance field reference: private UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset/TextureResources m_Textures
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::TextureResources*& dyn_m_Textures();
    // Get instance field reference: private System.Int32 m_ShaderVariantLogLevel
    [[deprecated("Use field access instead!")]] int& dyn_m_ShaderVariantLogLevel();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ShadowCascadesOption m_ShadowCascades
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ShadowCascadesOption& dyn_m_ShadowCascades();
    // public UnityEngine.Rendering.Universal.ScriptableRendererData LoadBuiltinRendererData(UnityEngine.Rendering.Universal.RendererType type)
    // Offset: 0x5291D0C
    ::UnityEngine::Rendering::Universal::ScriptableRendererData* LoadBuiltinRendererData(::UnityEngine::Rendering::Universal::RendererType type);
    // System.Void DestroyRenderers()
    // Offset: 0x5292024
    void DestroyRenderers();
    // private System.Void DestroyRenderer(ref UnityEngine.Rendering.Universal.ScriptableRenderer renderer)
    // Offset: 0x52922C4
    void DestroyRenderer(ByRef<::UnityEngine::Rendering::Universal::ScriptableRenderer*> renderer);
    // private System.Void CreateRenderers()
    // Offset: 0x5292084
    void CreateRenderers();
    // private UnityEngine.Material GetMaterial(UnityEngine.Rendering.Universal.DefaultMaterialType materialType)
    // Offset: 0x5292330
    ::UnityEngine::Material* GetMaterial(::UnityEngine::Rendering::Universal::DefaultMaterialType materialType);
    // public UnityEngine.Rendering.Universal.ScriptableRenderer get_scriptableRenderer()
    // Offset: 0x5292338
    ::UnityEngine::Rendering::Universal::ScriptableRenderer* get_scriptableRenderer();
    // public UnityEngine.Rendering.Universal.ScriptableRenderer GetRenderer(System.Int32 index)
    // Offset: 0x5292620
    ::UnityEngine::Rendering::Universal::ScriptableRenderer* GetRenderer(int index);
    // UnityEngine.Rendering.Universal.ScriptableRendererData get_scriptableRendererData()
    // Offset: 0x5292560
    ::UnityEngine::Rendering::Universal::ScriptableRendererData* get_scriptableRendererData();
    // UnityEngine.Experimental.Rendering.GraphicsFormat get_additionalLightsCookieFormat()
    // Offset: 0x52928D4
    ::UnityEngine::Experimental::Rendering::GraphicsFormat get_additionalLightsCookieFormat();
    // UnityEngine.Vector2Int get_additionalLightsCookieResolution()
    // Offset: 0x5292B0C
    ::UnityEngine::Vector2Int get_additionalLightsCookieResolution();
    // System.Int32[] get_rendererIndexList()
    // Offset: 0x5292B18
    ::ArrayW<int> get_rendererIndexList();
    // public System.Boolean get_supportsCameraDepthTexture()
    // Offset: 0x5292BB4
    bool get_supportsCameraDepthTexture();
    // public System.Void set_supportsCameraDepthTexture(System.Boolean value)
    // Offset: 0x5292BBC
    void set_supportsCameraDepthTexture(bool value);
    // public System.Boolean get_supportsCameraOpaqueTexture()
    // Offset: 0x5292BC8
    bool get_supportsCameraOpaqueTexture();
    // public System.Void set_supportsCameraOpaqueTexture(System.Boolean value)
    // Offset: 0x5292BD0
    void set_supportsCameraOpaqueTexture(bool value);
    // public UnityEngine.Rendering.Universal.Downsampling get_opaqueDownsampling()
    // Offset: 0x5292BDC
    ::UnityEngine::Rendering::Universal::Downsampling get_opaqueDownsampling();
    // public System.Boolean get_supportsTerrainHoles()
    // Offset: 0x5292BE4
    bool get_supportsTerrainHoles();
    // public UnityEngine.Rendering.Universal.StoreActionsOptimization get_storeActionsOptimization()
    // Offset: 0x5292BEC
    ::UnityEngine::Rendering::Universal::StoreActionsOptimization get_storeActionsOptimization();
    // public System.Void set_storeActionsOptimization(UnityEngine.Rendering.Universal.StoreActionsOptimization value)
    // Offset: 0x5292BF4
    void set_storeActionsOptimization(::UnityEngine::Rendering::Universal::StoreActionsOptimization value);
    // public System.Boolean get_supportsHDR()
    // Offset: 0x5292BFC
    bool get_supportsHDR();
    // public System.Void set_supportsHDR(System.Boolean value)
    // Offset: 0x5292C04
    void set_supportsHDR(bool value);
    // public UnityEngine.Rendering.Universal.HDRColorBufferPrecision get_hdrColorBufferPrecision()
    // Offset: 0x5292C10
    ::UnityEngine::Rendering::Universal::HDRColorBufferPrecision get_hdrColorBufferPrecision();
    // public System.Void set_hdrColorBufferPrecision(UnityEngine.Rendering.Universal.HDRColorBufferPrecision value)
    // Offset: 0x5292C18
    void set_hdrColorBufferPrecision(::UnityEngine::Rendering::Universal::HDRColorBufferPrecision value);
    // public System.Int32 get_msaaSampleCount()
    // Offset: 0x5292C20
    int get_msaaSampleCount();
    // public System.Void set_msaaSampleCount(System.Int32 value)
    // Offset: 0x5292C28
    void set_msaaSampleCount(int value);
    // public System.Single get_renderScale()
    // Offset: 0x5292C30
    float get_renderScale();
    // public System.Void set_renderScale(System.Single value)
    // Offset: 0x5292C38
    void set_renderScale(float value);
    // public System.Boolean get_enableLODCrossFade()
    // Offset: 0x5292CCC
    bool get_enableLODCrossFade();
    // public UnityEngine.Rendering.Universal.LODCrossFadeDitheringType get_lodCrossFadeDitheringType()
    // Offset: 0x5292CD4
    ::UnityEngine::Rendering::Universal::LODCrossFadeDitheringType get_lodCrossFadeDitheringType();
    // public UnityEngine.Rendering.Universal.UpscalingFilterSelection get_upscalingFilter()
    // Offset: 0x5292CDC
    ::UnityEngine::Rendering::Universal::UpscalingFilterSelection get_upscalingFilter();
    // public System.Void set_upscalingFilter(UnityEngine.Rendering.Universal.UpscalingFilterSelection value)
    // Offset: 0x5292CE4
    void set_upscalingFilter(::UnityEngine::Rendering::Universal::UpscalingFilterSelection value);
    // public System.Boolean get_fsrOverrideSharpness()
    // Offset: 0x5292CEC
    bool get_fsrOverrideSharpness();
    // public System.Void set_fsrOverrideSharpness(System.Boolean value)
    // Offset: 0x5292CF4
    void set_fsrOverrideSharpness(bool value);
    // public System.Single get_fsrSharpness()
    // Offset: 0x5292D00
    float get_fsrSharpness();
    // public System.Void set_fsrSharpness(System.Single value)
    // Offset: 0x5292D08
    void set_fsrSharpness(float value);
    // public UnityEngine.Rendering.Universal.ShEvalMode get_shEvalMode()
    // Offset: 0x5292D10
    ::UnityEngine::Rendering::Universal::ShEvalMode get_shEvalMode();
    // System.Void set_shEvalMode(UnityEngine.Rendering.Universal.ShEvalMode value)
    // Offset: 0x5292D18
    void set_shEvalMode(::UnityEngine::Rendering::Universal::ShEvalMode value);
    // public UnityEngine.Rendering.Universal.LightRenderingMode get_mainLightRenderingMode()
    // Offset: 0x5292D20
    ::UnityEngine::Rendering::Universal::LightRenderingMode get_mainLightRenderingMode();
    // System.Void set_mainLightRenderingMode(UnityEngine.Rendering.Universal.LightRenderingMode value)
    // Offset: 0x5292D28
    void set_mainLightRenderingMode(::UnityEngine::Rendering::Universal::LightRenderingMode value);
    // public System.Boolean get_supportsMainLightShadows()
    // Offset: 0x5292D30
    bool get_supportsMainLightShadows();
    // System.Void set_supportsMainLightShadows(System.Boolean value)
    // Offset: 0x5292D38
    void set_supportsMainLightShadows(bool value);
    // public System.Int32 get_mainLightShadowmapResolution()
    // Offset: 0x5292D44
    int get_mainLightShadowmapResolution();
    // System.Void set_mainLightShadowmapResolution(System.Int32 value)
    // Offset: 0x5292D4C
    void set_mainLightShadowmapResolution(int value);
    // public UnityEngine.Rendering.Universal.LightRenderingMode get_additionalLightsRenderingMode()
    // Offset: 0x5292D54
    ::UnityEngine::Rendering::Universal::LightRenderingMode get_additionalLightsRenderingMode();
    // System.Void set_additionalLightsRenderingMode(UnityEngine.Rendering.Universal.LightRenderingMode value)
    // Offset: 0x5292D5C
    void set_additionalLightsRenderingMode(::UnityEngine::Rendering::Universal::LightRenderingMode value);
    // public System.Int32 get_maxAdditionalLightsCount()
    // Offset: 0x5292D64
    int get_maxAdditionalLightsCount();
    // public System.Void set_maxAdditionalLightsCount(System.Int32 value)
    // Offset: 0x5292D6C
    void set_maxAdditionalLightsCount(int value);
    // public System.Boolean get_supportsAdditionalLightShadows()
    // Offset: 0x5292E24
    bool get_supportsAdditionalLightShadows();
    // System.Void set_supportsAdditionalLightShadows(System.Boolean value)
    // Offset: 0x5292E2C
    void set_supportsAdditionalLightShadows(bool value);
    // public System.Int32 get_additionalLightsShadowmapResolution()
    // Offset: 0x5292E38
    int get_additionalLightsShadowmapResolution();
    // System.Void set_additionalLightsShadowmapResolution(System.Int32 value)
    // Offset: 0x5292E40
    void set_additionalLightsShadowmapResolution(int value);
    // public System.Int32 get_additionalLightsShadowResolutionTierLow()
    // Offset: 0x5292E48
    int get_additionalLightsShadowResolutionTierLow();
    // System.Void set_additionalLightsShadowResolutionTierLow(System.Int32 value)
    // Offset: 0x5292E50
    void set_additionalLightsShadowResolutionTierLow(int value);
    // public System.Int32 get_additionalLightsShadowResolutionTierMedium()
    // Offset: 0x5292E58
    int get_additionalLightsShadowResolutionTierMedium();
    // System.Void set_additionalLightsShadowResolutionTierMedium(System.Int32 value)
    // Offset: 0x5292E60
    void set_additionalLightsShadowResolutionTierMedium(int value);
    // public System.Int32 get_additionalLightsShadowResolutionTierHigh()
    // Offset: 0x5292E68
    int get_additionalLightsShadowResolutionTierHigh();
    // System.Void set_additionalLightsShadowResolutionTierHigh(System.Int32 value)
    // Offset: 0x5292E70
    void set_additionalLightsShadowResolutionTierHigh(int value);
    // System.Int32 GetAdditionalLightsShadowResolution(System.Int32 additionalLightsShadowResolutionTier)
    // Offset: 0x5292E78
    int GetAdditionalLightsShadowResolution(int additionalLightsShadowResolutionTier);
    // public System.Boolean get_reflectionProbeBlending()
    // Offset: 0x5292F40
    bool get_reflectionProbeBlending();
    // System.Void set_reflectionProbeBlending(System.Boolean value)
    // Offset: 0x5292F48
    void set_reflectionProbeBlending(bool value);
    // public System.Boolean get_reflectionProbeBoxProjection()
    // Offset: 0x5292F54
    bool get_reflectionProbeBoxProjection();
    // System.Void set_reflectionProbeBoxProjection(System.Boolean value)
    // Offset: 0x5292F5C
    void set_reflectionProbeBoxProjection(bool value);
    // public System.Single get_shadowDistance()
    // Offset: 0x5292F68
    float get_shadowDistance();
    // public System.Void set_shadowDistance(System.Single value)
    // Offset: 0x5292F70
    void set_shadowDistance(float value);
    // public System.Int32 get_shadowCascadeCount()
    // Offset: 0x5292F80
    int get_shadowCascadeCount();
    // public System.Void set_shadowCascadeCount(System.Int32 value)
    // Offset: 0x5292F88
    void set_shadowCascadeCount(int value);
    // public System.Single get_cascade2Split()
    // Offset: 0x5293068
    float get_cascade2Split();
    // System.Void set_cascade2Split(System.Single value)
    // Offset: 0x5293070
    void set_cascade2Split(float value);
    // public UnityEngine.Vector2 get_cascade3Split()
    // Offset: 0x5293078
    ::UnityEngine::Vector2 get_cascade3Split();
    // System.Void set_cascade3Split(UnityEngine.Vector2 value)
    // Offset: 0x5293080
    void set_cascade3Split(::UnityEngine::Vector2 value);
    // public UnityEngine.Vector3 get_cascade4Split()
    // Offset: 0x5293088
    ::UnityEngine::Vector3 get_cascade4Split();
    // System.Void set_cascade4Split(UnityEngine.Vector3 value)
    // Offset: 0x5293094
    void set_cascade4Split(::UnityEngine::Vector3 value);
    // public System.Single get_cascadeBorder()
    // Offset: 0x52930A0
    float get_cascadeBorder();
    // public System.Void set_cascadeBorder(System.Single value)
    // Offset: 0x52930A8
    void set_cascadeBorder(float value);
    // public System.Single get_shadowDepthBias()
    // Offset: 0x52930B0
    float get_shadowDepthBias();
    // public System.Void set_shadowDepthBias(System.Single value)
    // Offset: 0x52930B8
    void set_shadowDepthBias(float value);
    // public System.Single get_shadowNormalBias()
    // Offset: 0x5293140
    float get_shadowNormalBias();
    // public System.Void set_shadowNormalBias(System.Single value)
    // Offset: 0x5293148
    void set_shadowNormalBias(float value);
    // public System.Boolean get_supportsSoftShadows()
    // Offset: 0x5293160
    bool get_supportsSoftShadows();
    // System.Void set_supportsSoftShadows(System.Boolean value)
    // Offset: 0x5293168
    void set_supportsSoftShadows(bool value);
    // UnityEngine.Rendering.Universal.SoftShadowQuality get_softShadowQuality()
    // Offset: 0x5293174
    ::UnityEngine::Rendering::Universal::SoftShadowQuality get_softShadowQuality();
    // System.Void set_softShadowQuality(UnityEngine.Rendering.Universal.SoftShadowQuality value)
    // Offset: 0x529317C
    void set_softShadowQuality(::UnityEngine::Rendering::Universal::SoftShadowQuality value);
    // public System.Boolean get_supportsDynamicBatching()
    // Offset: 0x5293184
    bool get_supportsDynamicBatching();
    // public System.Void set_supportsDynamicBatching(System.Boolean value)
    // Offset: 0x529318C
    void set_supportsDynamicBatching(bool value);
    // public System.Boolean get_supportsMixedLighting()
    // Offset: 0x5293198
    bool get_supportsMixedLighting();
    // public System.Boolean get_supportsLightCookies()
    // Offset: 0x52931A0
    bool get_supportsLightCookies();
    // public System.Boolean get_supportsLightLayers()
    // Offset: 0x52931A8
    bool get_supportsLightLayers();
    // public System.Boolean get_useRenderingLayers()
    // Offset: 0x52931B0
    bool get_useRenderingLayers();
    // public UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode get_volumeFrameworkUpdateMode()
    // Offset: 0x52931B8
    ::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode get_volumeFrameworkUpdateMode();
    // public UnityEngine.Rendering.Universal.PipelineDebugLevel get_debugLevel()
    // Offset: 0x52931C0
    ::UnityEngine::Rendering::Universal::PipelineDebugLevel get_debugLevel();
    // public System.Boolean get_useSRPBatcher()
    // Offset: 0x52931C8
    bool get_useSRPBatcher();
    // public System.Void set_useSRPBatcher(System.Boolean value)
    // Offset: 0x52931D0
    void set_useSRPBatcher(bool value);
    // System.Boolean get_enableRenderGraph()
    // Offset: 0x52931DC
    bool get_enableRenderGraph();
    // System.Void set_enableRenderGraph(System.Boolean value)
    // Offset: 0x52931E4
    void set_enableRenderGraph(bool value);
    // public UnityEngine.Rendering.Universal.ColorGradingMode get_colorGradingMode()
    // Offset: 0x52931F0
    ::UnityEngine::Rendering::Universal::ColorGradingMode get_colorGradingMode();
    // public System.Void set_colorGradingMode(UnityEngine.Rendering.Universal.ColorGradingMode value)
    // Offset: 0x52931F8
    void set_colorGradingMode(::UnityEngine::Rendering::Universal::ColorGradingMode value);
    // public System.Int32 get_colorGradingLutSize()
    // Offset: 0x5293200
    int get_colorGradingLutSize();
    // public System.Void set_colorGradingLutSize(System.Int32 value)
    // Offset: 0x5293208
    void set_colorGradingLutSize(int value);
    // public System.Boolean get_useFastSRGBLinearConversion()
    // Offset: 0x5293228
    bool get_useFastSRGBLinearConversion();
    // public System.Boolean get_useAdaptivePerformance()
    // Offset: 0x5293230
    bool get_useAdaptivePerformance();
    // public System.Void set_useAdaptivePerformance(System.Boolean value)
    // Offset: 0x5293238
    void set_useAdaptivePerformance(bool value);
    // public System.Boolean get_conservativeEnclosingSphere()
    // Offset: 0x5293244
    bool get_conservativeEnclosingSphere();
    // public System.Void set_conservativeEnclosingSphere(System.Boolean value)
    // Offset: 0x529324C
    void set_conservativeEnclosingSphere(bool value);
    // public System.Int32 get_numIterationsEnclosingSphere()
    // Offset: 0x5293258
    int get_numIterationsEnclosingSphere();
    // public System.Void set_numIterationsEnclosingSphere(System.Int32 value)
    // Offset: 0x5293260
    void set_numIterationsEnclosingSphere(int value);
    // public UnityEngine.Material get_decalMaterial()
    // Offset: 0x52932B0
    ::UnityEngine::Material* get_decalMaterial();
    // public System.String[] get_lightLayerMaskNames()
    // Offset: 0x529342C
    ::ArrayW<::StringW> get_lightLayerMaskNames();
    // public UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset/TextureResources get_textures()
    // Offset: 0x5293470
    ::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::TextureResources* get_textures();
    // public System.Void OnBeforeSerialize()
    // Offset: 0x52934EC
    void OnBeforeSerialize();
    // public System.Void OnAfterDeserialize()
    // Offset: 0x52934F0
    void OnAfterDeserialize();
    // private System.Single ValidateShadowBias(System.Single value)
    // Offset: 0x52930D0
    float ValidateShadowBias(float value);
    // private System.Int32 ValidatePerObjectLights(System.Int32 value)
    // Offset: 0x5292D84
    int ValidatePerObjectLights(int value);
    // private System.Single ValidateRenderScale(System.Single value)
    // Offset: 0x5292C50
    float ValidateRenderScale(float value);
    // System.Boolean ValidateRendererDataList(System.Boolean partial)
    // Offset: 0x5293720
    bool ValidateRendererDataList(bool partial);
    // System.Boolean ValidateRendererData(System.Int32 index)
    // Offset: 0x52937A0
    bool ValidateRendererData(int index);
    // public UnityEngine.Rendering.Universal.ShaderVariantLogLevel get_shaderVariantLogLevel()
    // Offset: 0x5293844
    ::UnityEngine::Rendering::Universal::ShaderVariantLogLevel get_shaderVariantLogLevel();
    // public System.Void set_shaderVariantLogLevel(UnityEngine.Rendering.Universal.ShaderVariantLogLevel value)
    // Offset: 0x52938A4
    void set_shaderVariantLogLevel(::UnityEngine::Rendering::Universal::ShaderVariantLogLevel value);
    // public UnityEngine.Rendering.Universal.ShadowCascadesOption get_shadowCascadeOption()
    // Offset: 0x5293908
    ::UnityEngine::Rendering::Universal::ShadowCascadesOption get_shadowCascadeOption();
    // public System.Void set_shadowCascadeOption(UnityEngine.Rendering.Universal.ShadowCascadesOption value)
    // Offset: 0x529398C
    void set_shadowCascadeOption(::UnityEngine::Rendering::Universal::ShadowCascadesOption value);
    // public System.Void .ctor()
    // Offset: 0x52939F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UniversalRenderPipelineAsset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UniversalRenderPipelineAsset*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x5293B98
    static void _cctor();
    // protected override UnityEngine.Rendering.RenderPipeline CreatePipeline()
    // Offset: 0x5291D54
    // Implemented from: UnityEngine.Rendering.RenderPipelineAsset
    // Base method: UnityEngine.Rendering.RenderPipeline RenderPipelineAsset::CreatePipeline()
    ::UnityEngine::Rendering::RenderPipeline* CreatePipeline();
    // protected override System.Void OnValidate()
    // Offset: 0x52922F8
    // Implemented from: UnityEngine.Rendering.RenderPipelineAsset
    // Base method: System.Void RenderPipelineAsset::OnValidate()
    void OnValidate();
    // protected override System.Void OnDisable()
    // Offset: 0x5292314
    // Implemented from: UnityEngine.Rendering.RenderPipelineAsset
    // Base method: System.Void RenderPipelineAsset::OnDisable()
    void OnDisable();
    // public override UnityEngine.Material get_defaultMaterial()
    // Offset: 0x5293268
    // Implemented from: UnityEngine.Rendering.RenderPipelineAsset
    // Base method: UnityEngine.Material RenderPipelineAsset::get_defaultMaterial()
    ::UnityEngine::Material* get_defaultMaterial();
    // public override UnityEngine.Material get_defaultParticleMaterial()
    // Offset: 0x5293270
    // Implemented from: UnityEngine.Rendering.RenderPipelineAsset
    // Base method: UnityEngine.Material RenderPipelineAsset::get_defaultParticleMaterial()
    ::UnityEngine::Material* get_defaultParticleMaterial();
    // public override UnityEngine.Material get_defaultLineMaterial()
    // Offset: 0x5293278
    // Implemented from: UnityEngine.Rendering.RenderPipelineAsset
    // Base method: UnityEngine.Material RenderPipelineAsset::get_defaultLineMaterial()
    ::UnityEngine::Material* get_defaultLineMaterial();
    // public override UnityEngine.Material get_defaultTerrainMaterial()
    // Offset: 0x5293280
    // Implemented from: UnityEngine.Rendering.RenderPipelineAsset
    // Base method: UnityEngine.Material RenderPipelineAsset::get_defaultTerrainMaterial()
    ::UnityEngine::Material* get_defaultTerrainMaterial();
    // public override UnityEngine.Material get_defaultUIMaterial()
    // Offset: 0x5293288
    // Implemented from: UnityEngine.Rendering.RenderPipelineAsset
    // Base method: UnityEngine.Material RenderPipelineAsset::get_defaultUIMaterial()
    ::UnityEngine::Material* get_defaultUIMaterial();
    // public override UnityEngine.Material get_defaultUIOverdrawMaterial()
    // Offset: 0x5293290
    // Implemented from: UnityEngine.Rendering.RenderPipelineAsset
    // Base method: UnityEngine.Material RenderPipelineAsset::get_defaultUIOverdrawMaterial()
    ::UnityEngine::Material* get_defaultUIOverdrawMaterial();
    // public override UnityEngine.Material get_defaultUIETC1SupportedMaterial()
    // Offset: 0x5293298
    // Implemented from: UnityEngine.Rendering.RenderPipelineAsset
    // Base method: UnityEngine.Material RenderPipelineAsset::get_defaultUIETC1SupportedMaterial()
    ::UnityEngine::Material* get_defaultUIETC1SupportedMaterial();
    // public override UnityEngine.Material get_default2DMaterial()
    // Offset: 0x52932A0
    // Implemented from: UnityEngine.Rendering.RenderPipelineAsset
    // Base method: UnityEngine.Material RenderPipelineAsset::get_default2DMaterial()
    ::UnityEngine::Material* get_default2DMaterial();
    // public override UnityEngine.Material get_default2DMaskMaterial()
    // Offset: 0x52932A8
    // Implemented from: UnityEngine.Rendering.RenderPipelineAsset
    // Base method: UnityEngine.Material RenderPipelineAsset::get_default2DMaskMaterial()
    ::UnityEngine::Material* get_default2DMaskMaterial();
    // public override UnityEngine.Shader get_defaultShader()
    // Offset: 0x52932B8
    // Implemented from: UnityEngine.Rendering.RenderPipelineAsset
    // Base method: UnityEngine.Shader RenderPipelineAsset::get_defaultShader()
    ::UnityEngine::Shader* get_defaultShader();
    // public override System.String[] get_renderingLayerMaskNames()
    // Offset: 0x529336C
    // Implemented from: UnityEngine.Rendering.RenderPipelineAsset
    // Base method: System.String[] RenderPipelineAsset::get_renderingLayerMaskNames()
    ::ArrayW<::StringW> get_renderingLayerMaskNames();
    // public override System.String[] get_prefixedRenderingLayerMaskNames()
    // Offset: 0x52933CC
    // Implemented from: UnityEngine.Rendering.RenderPipelineAsset
    // Base method: System.String[] RenderPipelineAsset::get_prefixedRenderingLayerMaskNames()
    ::ArrayW<::StringW> get_prefixedRenderingLayerMaskNames();
  }; // UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset
  #pragma pack(pop)
  static check_size<sizeof(UniversalRenderPipelineAsset), 300 + sizeof(::UnityEngine::Rendering::Universal::ShadowCascadesOption)> __UnityEngine_Rendering_Universal_UniversalRenderPipelineAssetSizeCheck;
  static_assert(sizeof(UniversalRenderPipelineAsset) == 0x130);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::LoadBuiltinRendererData
// Il2CppName: LoadBuiltinRendererData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ScriptableRendererData* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(::UnityEngine::Rendering::Universal::RendererType)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::LoadBuiltinRendererData)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RendererType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "LoadBuiltinRendererData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::DestroyRenderers
// Il2CppName: DestroyRenderers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::DestroyRenderers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "DestroyRenderers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::DestroyRenderer
// Il2CppName: DestroyRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(ByRef<::UnityEngine::Rendering::Universal::ScriptableRenderer*>)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::DestroyRenderer)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "DestroyRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::CreateRenderers
// Il2CppName: CreateRenderers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::CreateRenderers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "CreateRenderers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::GetMaterial
// Il2CppName: GetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(::UnityEngine::Rendering::Universal::DefaultMaterialType)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::GetMaterial)> {
  static const MethodInfo* get() {
    static auto* materialType = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DefaultMaterialType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "GetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_scriptableRenderer
// Il2CppName: get_scriptableRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ScriptableRenderer* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_scriptableRenderer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_scriptableRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::GetRenderer
// Il2CppName: GetRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ScriptableRenderer* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(int)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::GetRenderer)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "GetRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_scriptableRendererData
// Il2CppName: get_scriptableRendererData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ScriptableRendererData* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_scriptableRendererData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_scriptableRendererData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_additionalLightsCookieFormat
// Il2CppName: get_additionalLightsCookieFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::GraphicsFormat (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_additionalLightsCookieFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_additionalLightsCookieFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_additionalLightsCookieResolution
// Il2CppName: get_additionalLightsCookieResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2Int (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_additionalLightsCookieResolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_additionalLightsCookieResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_rendererIndexList
// Il2CppName: get_rendererIndexList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_rendererIndexList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_rendererIndexList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsCameraDepthTexture
// Il2CppName: get_supportsCameraDepthTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsCameraDepthTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_supportsCameraDepthTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_supportsCameraDepthTexture
// Il2CppName: set_supportsCameraDepthTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_supportsCameraDepthTexture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_supportsCameraDepthTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsCameraOpaqueTexture
// Il2CppName: get_supportsCameraOpaqueTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsCameraOpaqueTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_supportsCameraOpaqueTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_supportsCameraOpaqueTexture
// Il2CppName: set_supportsCameraOpaqueTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_supportsCameraOpaqueTexture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_supportsCameraOpaqueTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_opaqueDownsampling
// Il2CppName: get_opaqueDownsampling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::Downsampling (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_opaqueDownsampling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_opaqueDownsampling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsTerrainHoles
// Il2CppName: get_supportsTerrainHoles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsTerrainHoles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_supportsTerrainHoles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_storeActionsOptimization
// Il2CppName: get_storeActionsOptimization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::StoreActionsOptimization (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_storeActionsOptimization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_storeActionsOptimization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_storeActionsOptimization
// Il2CppName: set_storeActionsOptimization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(::UnityEngine::Rendering::Universal::StoreActionsOptimization)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_storeActionsOptimization)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "StoreActionsOptimization")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_storeActionsOptimization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsHDR
// Il2CppName: get_supportsHDR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsHDR)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_supportsHDR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_supportsHDR
// Il2CppName: set_supportsHDR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_supportsHDR)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_supportsHDR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_hdrColorBufferPrecision
// Il2CppName: get_hdrColorBufferPrecision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::HDRColorBufferPrecision (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_hdrColorBufferPrecision)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_hdrColorBufferPrecision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_hdrColorBufferPrecision
// Il2CppName: set_hdrColorBufferPrecision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(::UnityEngine::Rendering::Universal::HDRColorBufferPrecision)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_hdrColorBufferPrecision)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "HDRColorBufferPrecision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_hdrColorBufferPrecision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_msaaSampleCount
// Il2CppName: get_msaaSampleCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_msaaSampleCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_msaaSampleCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_msaaSampleCount
// Il2CppName: set_msaaSampleCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(int)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_msaaSampleCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_msaaSampleCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_renderScale
// Il2CppName: get_renderScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_renderScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_renderScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_renderScale
// Il2CppName: set_renderScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(float)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_renderScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_renderScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_enableLODCrossFade
// Il2CppName: get_enableLODCrossFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_enableLODCrossFade)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_enableLODCrossFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_lodCrossFadeDitheringType
// Il2CppName: get_lodCrossFadeDitheringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LODCrossFadeDitheringType (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_lodCrossFadeDitheringType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_lodCrossFadeDitheringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_upscalingFilter
// Il2CppName: get_upscalingFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::UpscalingFilterSelection (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_upscalingFilter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_upscalingFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_upscalingFilter
// Il2CppName: set_upscalingFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(::UnityEngine::Rendering::Universal::UpscalingFilterSelection)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_upscalingFilter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UpscalingFilterSelection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_upscalingFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_fsrOverrideSharpness
// Il2CppName: get_fsrOverrideSharpness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_fsrOverrideSharpness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_fsrOverrideSharpness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_fsrOverrideSharpness
// Il2CppName: set_fsrOverrideSharpness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_fsrOverrideSharpness)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_fsrOverrideSharpness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_fsrSharpness
// Il2CppName: get_fsrSharpness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_fsrSharpness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_fsrSharpness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_fsrSharpness
// Il2CppName: set_fsrSharpness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(float)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_fsrSharpness)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_fsrSharpness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_shEvalMode
// Il2CppName: get_shEvalMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ShEvalMode (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_shEvalMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_shEvalMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_shEvalMode
// Il2CppName: set_shEvalMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(::UnityEngine::Rendering::Universal::ShEvalMode)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_shEvalMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ShEvalMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_shEvalMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_mainLightRenderingMode
// Il2CppName: get_mainLightRenderingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LightRenderingMode (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_mainLightRenderingMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_mainLightRenderingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_mainLightRenderingMode
// Il2CppName: set_mainLightRenderingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(::UnityEngine::Rendering::Universal::LightRenderingMode)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_mainLightRenderingMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightRenderingMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_mainLightRenderingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsMainLightShadows
// Il2CppName: get_supportsMainLightShadows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsMainLightShadows)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_supportsMainLightShadows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_supportsMainLightShadows
// Il2CppName: set_supportsMainLightShadows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_supportsMainLightShadows)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_supportsMainLightShadows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_mainLightShadowmapResolution
// Il2CppName: get_mainLightShadowmapResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_mainLightShadowmapResolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_mainLightShadowmapResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_mainLightShadowmapResolution
// Il2CppName: set_mainLightShadowmapResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(int)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_mainLightShadowmapResolution)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_mainLightShadowmapResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_additionalLightsRenderingMode
// Il2CppName: get_additionalLightsRenderingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::LightRenderingMode (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_additionalLightsRenderingMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_additionalLightsRenderingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_additionalLightsRenderingMode
// Il2CppName: set_additionalLightsRenderingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(::UnityEngine::Rendering::Universal::LightRenderingMode)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_additionalLightsRenderingMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "LightRenderingMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_additionalLightsRenderingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_maxAdditionalLightsCount
// Il2CppName: get_maxAdditionalLightsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_maxAdditionalLightsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_maxAdditionalLightsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_maxAdditionalLightsCount
// Il2CppName: set_maxAdditionalLightsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(int)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_maxAdditionalLightsCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_maxAdditionalLightsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsAdditionalLightShadows
// Il2CppName: get_supportsAdditionalLightShadows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsAdditionalLightShadows)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_supportsAdditionalLightShadows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_supportsAdditionalLightShadows
// Il2CppName: set_supportsAdditionalLightShadows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_supportsAdditionalLightShadows)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_supportsAdditionalLightShadows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_additionalLightsShadowmapResolution
// Il2CppName: get_additionalLightsShadowmapResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_additionalLightsShadowmapResolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_additionalLightsShadowmapResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_additionalLightsShadowmapResolution
// Il2CppName: set_additionalLightsShadowmapResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(int)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_additionalLightsShadowmapResolution)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_additionalLightsShadowmapResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_additionalLightsShadowResolutionTierLow
// Il2CppName: get_additionalLightsShadowResolutionTierLow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_additionalLightsShadowResolutionTierLow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_additionalLightsShadowResolutionTierLow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_additionalLightsShadowResolutionTierLow
// Il2CppName: set_additionalLightsShadowResolutionTierLow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(int)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_additionalLightsShadowResolutionTierLow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_additionalLightsShadowResolutionTierLow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_additionalLightsShadowResolutionTierMedium
// Il2CppName: get_additionalLightsShadowResolutionTierMedium
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_additionalLightsShadowResolutionTierMedium)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_additionalLightsShadowResolutionTierMedium", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_additionalLightsShadowResolutionTierMedium
// Il2CppName: set_additionalLightsShadowResolutionTierMedium
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(int)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_additionalLightsShadowResolutionTierMedium)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_additionalLightsShadowResolutionTierMedium", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_additionalLightsShadowResolutionTierHigh
// Il2CppName: get_additionalLightsShadowResolutionTierHigh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_additionalLightsShadowResolutionTierHigh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_additionalLightsShadowResolutionTierHigh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_additionalLightsShadowResolutionTierHigh
// Il2CppName: set_additionalLightsShadowResolutionTierHigh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(int)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_additionalLightsShadowResolutionTierHigh)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_additionalLightsShadowResolutionTierHigh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::GetAdditionalLightsShadowResolution
// Il2CppName: GetAdditionalLightsShadowResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(int)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::GetAdditionalLightsShadowResolution)> {
  static const MethodInfo* get() {
    static auto* additionalLightsShadowResolutionTier = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "GetAdditionalLightsShadowResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{additionalLightsShadowResolutionTier});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_reflectionProbeBlending
// Il2CppName: get_reflectionProbeBlending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_reflectionProbeBlending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_reflectionProbeBlending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_reflectionProbeBlending
// Il2CppName: set_reflectionProbeBlending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_reflectionProbeBlending)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_reflectionProbeBlending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_reflectionProbeBoxProjection
// Il2CppName: get_reflectionProbeBoxProjection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_reflectionProbeBoxProjection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_reflectionProbeBoxProjection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_reflectionProbeBoxProjection
// Il2CppName: set_reflectionProbeBoxProjection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_reflectionProbeBoxProjection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_reflectionProbeBoxProjection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_shadowDistance
// Il2CppName: get_shadowDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_shadowDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_shadowDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_shadowDistance
// Il2CppName: set_shadowDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(float)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_shadowDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_shadowDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_shadowCascadeCount
// Il2CppName: get_shadowCascadeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_shadowCascadeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_shadowCascadeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_shadowCascadeCount
// Il2CppName: set_shadowCascadeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(int)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_shadowCascadeCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_shadowCascadeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_cascade2Split
// Il2CppName: get_cascade2Split
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_cascade2Split)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_cascade2Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_cascade2Split
// Il2CppName: set_cascade2Split
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(float)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_cascade2Split)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_cascade2Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_cascade3Split
// Il2CppName: get_cascade3Split
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_cascade3Split)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_cascade3Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_cascade3Split
// Il2CppName: set_cascade3Split
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(::UnityEngine::Vector2)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_cascade3Split)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_cascade3Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_cascade4Split
// Il2CppName: get_cascade4Split
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_cascade4Split)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_cascade4Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_cascade4Split
// Il2CppName: set_cascade4Split
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(::UnityEngine::Vector3)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_cascade4Split)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_cascade4Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_cascadeBorder
// Il2CppName: get_cascadeBorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_cascadeBorder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_cascadeBorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_cascadeBorder
// Il2CppName: set_cascadeBorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(float)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_cascadeBorder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_cascadeBorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_shadowDepthBias
// Il2CppName: get_shadowDepthBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_shadowDepthBias)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_shadowDepthBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_shadowDepthBias
// Il2CppName: set_shadowDepthBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(float)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_shadowDepthBias)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_shadowDepthBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_shadowNormalBias
// Il2CppName: get_shadowNormalBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_shadowNormalBias)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_shadowNormalBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_shadowNormalBias
// Il2CppName: set_shadowNormalBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(float)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_shadowNormalBias)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_shadowNormalBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsSoftShadows
// Il2CppName: get_supportsSoftShadows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsSoftShadows)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_supportsSoftShadows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_supportsSoftShadows
// Il2CppName: set_supportsSoftShadows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_supportsSoftShadows)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_supportsSoftShadows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_softShadowQuality
// Il2CppName: get_softShadowQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::SoftShadowQuality (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_softShadowQuality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_softShadowQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_softShadowQuality
// Il2CppName: set_softShadowQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(::UnityEngine::Rendering::Universal::SoftShadowQuality)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_softShadowQuality)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "SoftShadowQuality")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_softShadowQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsDynamicBatching
// Il2CppName: get_supportsDynamicBatching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsDynamicBatching)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_supportsDynamicBatching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_supportsDynamicBatching
// Il2CppName: set_supportsDynamicBatching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_supportsDynamicBatching)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_supportsDynamicBatching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsMixedLighting
// Il2CppName: get_supportsMixedLighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsMixedLighting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_supportsMixedLighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsLightCookies
// Il2CppName: get_supportsLightCookies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsLightCookies)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_supportsLightCookies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsLightLayers
// Il2CppName: get_supportsLightLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_supportsLightLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_supportsLightLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_useRenderingLayers
// Il2CppName: get_useRenderingLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_useRenderingLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_useRenderingLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_volumeFrameworkUpdateMode
// Il2CppName: get_volumeFrameworkUpdateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_volumeFrameworkUpdateMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_volumeFrameworkUpdateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_debugLevel
// Il2CppName: get_debugLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::PipelineDebugLevel (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_debugLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_debugLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_useSRPBatcher
// Il2CppName: get_useSRPBatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_useSRPBatcher)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_useSRPBatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_useSRPBatcher
// Il2CppName: set_useSRPBatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_useSRPBatcher)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_useSRPBatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_enableRenderGraph
// Il2CppName: get_enableRenderGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_enableRenderGraph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_enableRenderGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_enableRenderGraph
// Il2CppName: set_enableRenderGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_enableRenderGraph)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_enableRenderGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_colorGradingMode
// Il2CppName: get_colorGradingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ColorGradingMode (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_colorGradingMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_colorGradingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_colorGradingMode
// Il2CppName: set_colorGradingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(::UnityEngine::Rendering::Universal::ColorGradingMode)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_colorGradingMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ColorGradingMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_colorGradingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_colorGradingLutSize
// Il2CppName: get_colorGradingLutSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_colorGradingLutSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_colorGradingLutSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_colorGradingLutSize
// Il2CppName: set_colorGradingLutSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(int)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_colorGradingLutSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_colorGradingLutSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_useFastSRGBLinearConversion
// Il2CppName: get_useFastSRGBLinearConversion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_useFastSRGBLinearConversion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_useFastSRGBLinearConversion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_useAdaptivePerformance
// Il2CppName: get_useAdaptivePerformance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_useAdaptivePerformance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_useAdaptivePerformance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_useAdaptivePerformance
// Il2CppName: set_useAdaptivePerformance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_useAdaptivePerformance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_useAdaptivePerformance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_conservativeEnclosingSphere
// Il2CppName: get_conservativeEnclosingSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_conservativeEnclosingSphere)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_conservativeEnclosingSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_conservativeEnclosingSphere
// Il2CppName: set_conservativeEnclosingSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_conservativeEnclosingSphere)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_conservativeEnclosingSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_numIterationsEnclosingSphere
// Il2CppName: get_numIterationsEnclosingSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_numIterationsEnclosingSphere)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_numIterationsEnclosingSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_numIterationsEnclosingSphere
// Il2CppName: set_numIterationsEnclosingSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(int)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_numIterationsEnclosingSphere)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_numIterationsEnclosingSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_decalMaterial
// Il2CppName: get_decalMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_decalMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_decalMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_lightLayerMaskNames
// Il2CppName: get_lightLayerMaskNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_lightLayerMaskNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_lightLayerMaskNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_textures
// Il2CppName: get_textures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::TextureResources* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_textures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_textures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::OnBeforeSerialize
// Il2CppName: OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::OnAfterDeserialize
// Il2CppName: OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::ValidateShadowBias
// Il2CppName: ValidateShadowBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(float)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::ValidateShadowBias)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "ValidateShadowBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::ValidatePerObjectLights
// Il2CppName: ValidatePerObjectLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(int)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::ValidatePerObjectLights)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "ValidatePerObjectLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::ValidateRenderScale
// Il2CppName: ValidateRenderScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(float)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::ValidateRenderScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "ValidateRenderScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::ValidateRendererDataList
// Il2CppName: ValidateRendererDataList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::ValidateRendererDataList)> {
  static const MethodInfo* get() {
    static auto* partial = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "ValidateRendererDataList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partial});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::ValidateRendererData
// Il2CppName: ValidateRendererData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(int)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::ValidateRendererData)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "ValidateRendererData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_shaderVariantLogLevel
// Il2CppName: get_shaderVariantLogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ShaderVariantLogLevel (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_shaderVariantLogLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_shaderVariantLogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_shaderVariantLogLevel
// Il2CppName: set_shaderVariantLogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(::UnityEngine::Rendering::Universal::ShaderVariantLogLevel)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_shaderVariantLogLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ShaderVariantLogLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_shaderVariantLogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_shadowCascadeOption
// Il2CppName: get_shadowCascadeOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ShadowCascadesOption (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_shadowCascadeOption)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_shadowCascadeOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_shadowCascadeOption
// Il2CppName: set_shadowCascadeOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)(::UnityEngine::Rendering::Universal::ShadowCascadesOption)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::set_shadowCascadeOption)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ShadowCascadesOption")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "set_shadowCascadeOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::CreatePipeline
// Il2CppName: CreatePipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderPipeline* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::CreatePipeline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "CreatePipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultMaterial
// Il2CppName: get_defaultMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_defaultMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultParticleMaterial
// Il2CppName: get_defaultParticleMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultParticleMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_defaultParticleMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultLineMaterial
// Il2CppName: get_defaultLineMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultLineMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_defaultLineMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultTerrainMaterial
// Il2CppName: get_defaultTerrainMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultTerrainMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_defaultTerrainMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultUIMaterial
// Il2CppName: get_defaultUIMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultUIMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_defaultUIMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultUIOverdrawMaterial
// Il2CppName: get_defaultUIOverdrawMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultUIOverdrawMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_defaultUIOverdrawMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultUIETC1SupportedMaterial
// Il2CppName: get_defaultUIETC1SupportedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultUIETC1SupportedMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_defaultUIETC1SupportedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_default2DMaterial
// Il2CppName: get_default2DMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_default2DMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_default2DMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_default2DMaskMaterial
// Il2CppName: get_default2DMaskMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_default2DMaskMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_default2DMaskMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultShader
// Il2CppName: get_defaultShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_defaultShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_defaultShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_renderingLayerMaskNames
// Il2CppName: get_renderingLayerMaskNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_renderingLayerMaskNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_renderingLayerMaskNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_prefixedRenderingLayerMaskNames
// Il2CppName: get_prefixedRenderingLayerMaskNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset::get_prefixedRenderingLayerMaskNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineAsset*), "get_prefixedRenderingLayerMaskNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
