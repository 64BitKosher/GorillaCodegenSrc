// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.RenderTextureDescriptor
#include "UnityEngine/RenderTextureDescriptor.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Rendering.Universal.CameraRenderType
#include "UnityEngine/Rendering/Universal/CameraRenderType.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Rendering.Universal.ImageScalingMode
#include "UnityEngine/Rendering/Universal/ImageScalingMode.hpp"
// Including type: UnityEngine.Rendering.Universal.ImageUpscalingFilter
#include "UnityEngine/Rendering/Universal/ImageUpscalingFilter.hpp"
// Including type: UnityEngine.Rendering.Universal.HDRColorBufferPrecision
#include "UnityEngine/Rendering/Universal/HDRColorBufferPrecision.hpp"
// Including type: UnityEngine.CameraType
#include "UnityEngine/CameraType.hpp"
// Including type: UnityEngine.Rendering.SortingCriteria
#include "UnityEngine/Rendering/SortingCriteria.hpp"
// Including type: UnityEngine.Rendering.RenderTargetIdentifier
#include "UnityEngine/Rendering/RenderTargetIdentifier.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Rendering.Universal.AntialiasingMode
#include "UnityEngine/Rendering/Universal/AntialiasingMode.hpp"
// Including type: UnityEngine.Rendering.Universal.AntialiasingQuality
#include "UnityEngine/Rendering/Universal/AntialiasingQuality.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Rendering.Universal.TemporalAA/Settings
#include "UnityEngine/Rendering/Universal/TemporalAA_Settings.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: XRPass
  class XRPass;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: RTHandle
  class RTHandle;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ScriptableRenderer
  class ScriptableRenderer;
  // Forward declaring type: TaaPersistentData
  class TaaPersistentData;
  // Forward declaring type: XRPassUniversal
  class XRPassUniversal;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: CameraData
  struct CameraData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::CameraData, "UnityEngine.Rendering.Universal", "CameraData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x210
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.CameraData
  // [TokenAttribute] Offset: FFFFFFFF
  struct CameraData/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.Matrix4x4 m_ViewMatrix
    // Size: 0x40
    // Offset: 0x0
    ::UnityEngine::Matrix4x4 m_ViewMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private UnityEngine.Matrix4x4 m_ProjectionMatrix
    // Size: 0x40
    // Offset: 0x40
    ::UnityEngine::Matrix4x4 m_ProjectionMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private UnityEngine.Matrix4x4 m_JitterMatrix
    // Size: 0x40
    // Offset: 0x80
    ::UnityEngine::Matrix4x4 m_JitterMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // public UnityEngine.Camera camera
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Camera* camera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // public UnityEngine.Rendering.Universal.CameraRenderType renderType
    // Size: 0x4
    // Offset: 0xC8
    ::UnityEngine::Rendering::Universal::CameraRenderType renderType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::CameraRenderType) == 0x4);
    // Padding between fields: renderType and: targetTexture
    char __padding4[0x4] = {};
    // public UnityEngine.RenderTexture targetTexture
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::RenderTexture* targetTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // public UnityEngine.RenderTextureDescriptor cameraTargetDescriptor
    // Size: 0x34
    // Offset: 0xD8
    ::UnityEngine::RenderTextureDescriptor cameraTargetDescriptor;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTextureDescriptor) == 0x34);
    // UnityEngine.Rect pixelRect
    // Size: 0x10
    // Offset: 0x10C
    ::UnityEngine::Rect pixelRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // System.Boolean useScreenCoordOverride
    // Size: 0x1
    // Offset: 0x11C
    bool useScreenCoordOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useScreenCoordOverride and: screenSizeOverride
    char __padding8[0x3] = {};
    // UnityEngine.Vector4 screenSizeOverride
    // Size: 0x10
    // Offset: 0x120
    ::UnityEngine::Vector4 screenSizeOverride;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // UnityEngine.Vector4 screenCoordScaleBias
    // Size: 0x10
    // Offset: 0x130
    ::UnityEngine::Vector4 screenCoordScaleBias;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // System.Int32 pixelWidth
    // Size: 0x4
    // Offset: 0x140
    int pixelWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 pixelHeight
    // Size: 0x4
    // Offset: 0x144
    int pixelHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Single aspectRatio
    // Size: 0x4
    // Offset: 0x148
    float aspectRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single renderScale
    // Size: 0x4
    // Offset: 0x14C
    float renderScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // UnityEngine.Rendering.Universal.ImageScalingMode imageScalingMode
    // Size: 0x4
    // Offset: 0x150
    ::UnityEngine::Rendering::Universal::ImageScalingMode imageScalingMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ImageScalingMode) == 0x4);
    // UnityEngine.Rendering.Universal.ImageUpscalingFilter upscalingFilter
    // Size: 0x4
    // Offset: 0x154
    ::UnityEngine::Rendering::Universal::ImageUpscalingFilter upscalingFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ImageUpscalingFilter) == 0x4);
    // System.Boolean fsrOverrideSharpness
    // Size: 0x1
    // Offset: 0x158
    bool fsrOverrideSharpness;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fsrOverrideSharpness and: fsrSharpness
    char __padding17[0x3] = {};
    // System.Single fsrSharpness
    // Size: 0x4
    // Offset: 0x15C
    float fsrSharpness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // UnityEngine.Rendering.Universal.HDRColorBufferPrecision hdrColorBufferPrecision
    // Size: 0x4
    // Offset: 0x160
    ::UnityEngine::Rendering::Universal::HDRColorBufferPrecision hdrColorBufferPrecision;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::HDRColorBufferPrecision) == 0x4);
    // public System.Boolean clearDepth
    // Size: 0x1
    // Offset: 0x164
    bool clearDepth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: clearDepth and: cameraType
    char __padding20[0x3] = {};
    // public UnityEngine.CameraType cameraType
    // Size: 0x4
    // Offset: 0x168
    ::UnityEngine::CameraType cameraType;
    // Field size check
    static_assert(sizeof(::UnityEngine::CameraType) == 0x4);
    // public System.Boolean isDefaultViewport
    // Size: 0x1
    // Offset: 0x16C
    bool isDefaultViewport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isHdrEnabled
    // Size: 0x1
    // Offset: 0x16D
    bool isHdrEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean allowHDROutput
    // Size: 0x1
    // Offset: 0x16E
    bool allowHDROutput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean requiresDepthTexture
    // Size: 0x1
    // Offset: 0x16F
    bool requiresDepthTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean requiresOpaqueTexture
    // Size: 0x1
    // Offset: 0x170
    bool requiresOpaqueTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean postProcessingRequiresDepthTexture
    // Size: 0x1
    // Offset: 0x171
    bool postProcessingRequiresDepthTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean xrRendering
    // Size: 0x1
    // Offset: 0x172
    bool xrRendering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: xrRendering and: defaultOpaqueSortFlags
    char __padding28[0x1] = {};
    // public UnityEngine.Rendering.SortingCriteria defaultOpaqueSortFlags
    // Size: 0x4
    // Offset: 0x174
    ::UnityEngine::Rendering::SortingCriteria defaultOpaqueSortFlags;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::SortingCriteria) == 0x4);
    // private UnityEngine.Experimental.Rendering.XRPass <xr>k__BackingField
    // Size: 0x8
    // Offset: 0x178
    ::UnityEngine::Experimental::Rendering::XRPass* xr;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::XRPass*) == 0x8);
    // public System.Boolean isStereoEnabled
    // Size: 0x1
    // Offset: 0x180
    bool isStereoEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isStereoEnabled and: maxShadowDistance
    char __padding31[0x3] = {};
    // public System.Single maxShadowDistance
    // Size: 0x4
    // Offset: 0x184
    float maxShadowDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean postProcessEnabled
    // Size: 0x1
    // Offset: 0x188
    bool postProcessEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: postProcessEnabled and: captureActions
    char __padding33[0x7] = {};
    // public System.Collections.Generic.IEnumerator`1<System.Action`2<UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.CommandBuffer>> captureActions
    // Size: 0x8
    // Offset: 0x190
    ::System::Collections::Generic::IEnumerator_1<::System::Action_2<::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::CommandBuffer*>*>* captureActions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerator_1<::System::Action_2<::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::CommandBuffer*>*>*) == 0x8);
    // public UnityEngine.LayerMask volumeLayerMask
    // Size: 0x4
    // Offset: 0x198
    ::UnityEngine::LayerMask volumeLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: volumeLayerMask and: volumeTrigger
    char __padding35[0x4] = {};
    // public UnityEngine.Transform volumeTrigger
    // Size: 0x8
    // Offset: 0x1A0
    ::UnityEngine::Transform* volumeTrigger;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean isStopNaNEnabled
    // Size: 0x1
    // Offset: 0x1A8
    bool isStopNaNEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isDitheringEnabled
    // Size: 0x1
    // Offset: 0x1A9
    bool isDitheringEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isDitheringEnabled and: antialiasing
    char __padding38[0x2] = {};
    // public UnityEngine.Rendering.Universal.AntialiasingMode antialiasing
    // Size: 0x4
    // Offset: 0x1AC
    ::UnityEngine::Rendering::Universal::AntialiasingMode antialiasing;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::AntialiasingMode) == 0x4);
    // public UnityEngine.Rendering.Universal.AntialiasingQuality antialiasingQuality
    // Size: 0x4
    // Offset: 0x1B0
    ::UnityEngine::Rendering::Universal::AntialiasingQuality antialiasingQuality;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::AntialiasingQuality) == 0x4);
    // Padding between fields: antialiasingQuality and: renderer
    char __padding40[0x4] = {};
    // public UnityEngine.Rendering.Universal.ScriptableRenderer renderer
    // Size: 0x8
    // Offset: 0x1B8
    ::UnityEngine::Rendering::Universal::ScriptableRenderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ScriptableRenderer*) == 0x8);
    // public System.Boolean resolveFinalTarget
    // Size: 0x1
    // Offset: 0x1C0
    bool resolveFinalTarget;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: resolveFinalTarget and: worldSpaceCameraPos
    char __padding42[0x3] = {};
    // public UnityEngine.Vector3 worldSpaceCameraPos
    // Size: 0xC
    // Offset: 0x1C4
    ::UnityEngine::Vector3 worldSpaceCameraPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Color backgroundColor
    // Size: 0x10
    // Offset: 0x1D0
    ::UnityEngine::Color backgroundColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // UnityEngine.Rendering.Universal.TaaPersistentData taaPersistentData
    // Size: 0x8
    // Offset: 0x1E0
    ::UnityEngine::Rendering::Universal::TaaPersistentData* taaPersistentData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::TaaPersistentData*) == 0x8);
    // UnityEngine.Rendering.Universal.TemporalAA/Settings taaSettings
    // Size: 0x20
    // Offset: 0x1E8
    ::UnityEngine::Rendering::Universal::TemporalAA::Settings taaSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::TemporalAA::Settings) == 0x20);
    // public UnityEngine.Camera baseCamera
    // Size: 0x8
    // Offset: 0x208
    ::UnityEngine::Camera* baseCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    public:
    // Creating value type constructor for type: CameraData
    constexpr CameraData(::UnityEngine::Matrix4x4 m_ViewMatrix_ = {}, ::UnityEngine::Matrix4x4 m_ProjectionMatrix_ = {}, ::UnityEngine::Matrix4x4 m_JitterMatrix_ = {}, ::UnityEngine::Camera* camera_ = {}, ::UnityEngine::Rendering::Universal::CameraRenderType renderType_ = {}, ::UnityEngine::RenderTexture* targetTexture_ = {}, ::UnityEngine::RenderTextureDescriptor cameraTargetDescriptor_ = {}, ::UnityEngine::Rect pixelRect_ = {}, bool useScreenCoordOverride_ = {}, ::UnityEngine::Vector4 screenSizeOverride_ = {}, ::UnityEngine::Vector4 screenCoordScaleBias_ = {}, int pixelWidth_ = {}, int pixelHeight_ = {}, float aspectRatio_ = {}, float renderScale_ = {}, ::UnityEngine::Rendering::Universal::ImageScalingMode imageScalingMode_ = {}, ::UnityEngine::Rendering::Universal::ImageUpscalingFilter upscalingFilter_ = {}, bool fsrOverrideSharpness_ = {}, float fsrSharpness_ = {}, ::UnityEngine::Rendering::Universal::HDRColorBufferPrecision hdrColorBufferPrecision_ = {}, bool clearDepth_ = {}, ::UnityEngine::CameraType cameraType_ = {}, bool isDefaultViewport_ = {}, bool isHdrEnabled_ = {}, bool allowHDROutput_ = {}, bool requiresDepthTexture_ = {}, bool requiresOpaqueTexture_ = {}, bool postProcessingRequiresDepthTexture_ = {}, bool xrRendering_ = {}, ::UnityEngine::Rendering::SortingCriteria defaultOpaqueSortFlags_ = {}, ::UnityEngine::Experimental::Rendering::XRPass* xr_ = {}, bool isStereoEnabled_ = {}, float maxShadowDistance_ = {}, bool postProcessEnabled_ = {}, ::System::Collections::Generic::IEnumerator_1<::System::Action_2<::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::CommandBuffer*>*>* captureActions_ = {}, ::UnityEngine::LayerMask volumeLayerMask_ = {}, ::UnityEngine::Transform* volumeTrigger_ = {}, bool isStopNaNEnabled_ = {}, bool isDitheringEnabled_ = {}, ::UnityEngine::Rendering::Universal::AntialiasingMode antialiasing_ = {}, ::UnityEngine::Rendering::Universal::AntialiasingQuality antialiasingQuality_ = {}, ::UnityEngine::Rendering::Universal::ScriptableRenderer* renderer_ = {}, bool resolveFinalTarget_ = {}, ::UnityEngine::Vector3 worldSpaceCameraPos_ = {}, ::UnityEngine::Color backgroundColor_ = {}, ::UnityEngine::Rendering::Universal::TaaPersistentData* taaPersistentData_ = {}, ::UnityEngine::Rendering::Universal::TemporalAA::Settings taaSettings_ = {}, ::UnityEngine::Camera* baseCamera_ = {}) noexcept : m_ViewMatrix{m_ViewMatrix_}, m_ProjectionMatrix{m_ProjectionMatrix_}, m_JitterMatrix{m_JitterMatrix_}, camera{camera_}, renderType{renderType_}, targetTexture{targetTexture_}, cameraTargetDescriptor{cameraTargetDescriptor_}, pixelRect{pixelRect_}, useScreenCoordOverride{useScreenCoordOverride_}, screenSizeOverride{screenSizeOverride_}, screenCoordScaleBias{screenCoordScaleBias_}, pixelWidth{pixelWidth_}, pixelHeight{pixelHeight_}, aspectRatio{aspectRatio_}, renderScale{renderScale_}, imageScalingMode{imageScalingMode_}, upscalingFilter{upscalingFilter_}, fsrOverrideSharpness{fsrOverrideSharpness_}, fsrSharpness{fsrSharpness_}, hdrColorBufferPrecision{hdrColorBufferPrecision_}, clearDepth{clearDepth_}, cameraType{cameraType_}, isDefaultViewport{isDefaultViewport_}, isHdrEnabled{isHdrEnabled_}, allowHDROutput{allowHDROutput_}, requiresDepthTexture{requiresDepthTexture_}, requiresOpaqueTexture{requiresOpaqueTexture_}, postProcessingRequiresDepthTexture{postProcessingRequiresDepthTexture_}, xrRendering{xrRendering_}, defaultOpaqueSortFlags{defaultOpaqueSortFlags_}, xr{xr_}, isStereoEnabled{isStereoEnabled_}, maxShadowDistance{maxShadowDistance_}, postProcessEnabled{postProcessEnabled_}, captureActions{captureActions_}, volumeLayerMask{volumeLayerMask_}, volumeTrigger{volumeTrigger_}, isStopNaNEnabled{isStopNaNEnabled_}, isDitheringEnabled{isDitheringEnabled_}, antialiasing{antialiasing_}, antialiasingQuality{antialiasingQuality_}, renderer{renderer_}, resolveFinalTarget{resolveFinalTarget_}, worldSpaceCameraPos{worldSpaceCameraPos_}, backgroundColor{backgroundColor_}, taaPersistentData{taaPersistentData_}, taaSettings{taaSettings_}, baseCamera{baseCamera_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private UnityEngine.Matrix4x4 m_ViewMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_m_ViewMatrix();
    // Get instance field reference: private UnityEngine.Matrix4x4 m_ProjectionMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_m_ProjectionMatrix();
    // Get instance field reference: private UnityEngine.Matrix4x4 m_JitterMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_m_JitterMatrix();
    // Get instance field reference: public UnityEngine.Camera camera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_camera();
    // Get instance field reference: public UnityEngine.Rendering.Universal.CameraRenderType renderType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::CameraRenderType& dyn_renderType();
    // Get instance field reference: public UnityEngine.RenderTexture targetTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_targetTexture();
    // Get instance field reference: public UnityEngine.RenderTextureDescriptor cameraTargetDescriptor
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTextureDescriptor& dyn_cameraTargetDescriptor();
    // Get instance field reference: UnityEngine.Rect pixelRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_pixelRect();
    // Get instance field reference: System.Boolean useScreenCoordOverride
    [[deprecated("Use field access instead!")]] bool& dyn_useScreenCoordOverride();
    // Get instance field reference: UnityEngine.Vector4 screenSizeOverride
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_screenSizeOverride();
    // Get instance field reference: UnityEngine.Vector4 screenCoordScaleBias
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_screenCoordScaleBias();
    // Get instance field reference: System.Int32 pixelWidth
    [[deprecated("Use field access instead!")]] int& dyn_pixelWidth();
    // Get instance field reference: System.Int32 pixelHeight
    [[deprecated("Use field access instead!")]] int& dyn_pixelHeight();
    // Get instance field reference: System.Single aspectRatio
    [[deprecated("Use field access instead!")]] float& dyn_aspectRatio();
    // Get instance field reference: public System.Single renderScale
    [[deprecated("Use field access instead!")]] float& dyn_renderScale();
    // Get instance field reference: UnityEngine.Rendering.Universal.ImageScalingMode imageScalingMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ImageScalingMode& dyn_imageScalingMode();
    // Get instance field reference: UnityEngine.Rendering.Universal.ImageUpscalingFilter upscalingFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ImageUpscalingFilter& dyn_upscalingFilter();
    // Get instance field reference: System.Boolean fsrOverrideSharpness
    [[deprecated("Use field access instead!")]] bool& dyn_fsrOverrideSharpness();
    // Get instance field reference: System.Single fsrSharpness
    [[deprecated("Use field access instead!")]] float& dyn_fsrSharpness();
    // Get instance field reference: UnityEngine.Rendering.Universal.HDRColorBufferPrecision hdrColorBufferPrecision
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::HDRColorBufferPrecision& dyn_hdrColorBufferPrecision();
    // Get instance field reference: public System.Boolean clearDepth
    [[deprecated("Use field access instead!")]] bool& dyn_clearDepth();
    // Get instance field reference: public UnityEngine.CameraType cameraType
    [[deprecated("Use field access instead!")]] ::UnityEngine::CameraType& dyn_cameraType();
    // Get instance field reference: public System.Boolean isDefaultViewport
    [[deprecated("Use field access instead!")]] bool& dyn_isDefaultViewport();
    // Get instance field reference: public System.Boolean isHdrEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_isHdrEnabled();
    // Get instance field reference: public System.Boolean allowHDROutput
    [[deprecated("Use field access instead!")]] bool& dyn_allowHDROutput();
    // Get instance field reference: public System.Boolean requiresDepthTexture
    [[deprecated("Use field access instead!")]] bool& dyn_requiresDepthTexture();
    // Get instance field reference: public System.Boolean requiresOpaqueTexture
    [[deprecated("Use field access instead!")]] bool& dyn_requiresOpaqueTexture();
    // Get instance field reference: public System.Boolean postProcessingRequiresDepthTexture
    [[deprecated("Use field access instead!")]] bool& dyn_postProcessingRequiresDepthTexture();
    // Get instance field reference: public System.Boolean xrRendering
    [[deprecated("Use field access instead!")]] bool& dyn_xrRendering();
    // Get instance field reference: public UnityEngine.Rendering.SortingCriteria defaultOpaqueSortFlags
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::SortingCriteria& dyn_defaultOpaqueSortFlags();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.XRPass <xr>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::XRPass*& dyn_$xr$k__BackingField();
    // Get instance field reference: public System.Boolean isStereoEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_isStereoEnabled();
    // Get instance field reference: public System.Single maxShadowDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxShadowDistance();
    // Get instance field reference: public System.Boolean postProcessEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_postProcessEnabled();
    // Get instance field reference: public System.Collections.Generic.IEnumerator`1<System.Action`2<UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.CommandBuffer>> captureActions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::System::Action_2<::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::CommandBuffer*>*>*& dyn_captureActions();
    // Get instance field reference: public UnityEngine.LayerMask volumeLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_volumeLayerMask();
    // Get instance field reference: public UnityEngine.Transform volumeTrigger
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_volumeTrigger();
    // Get instance field reference: public System.Boolean isStopNaNEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_isStopNaNEnabled();
    // Get instance field reference: public System.Boolean isDitheringEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_isDitheringEnabled();
    // Get instance field reference: public UnityEngine.Rendering.Universal.AntialiasingMode antialiasing
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::AntialiasingMode& dyn_antialiasing();
    // Get instance field reference: public UnityEngine.Rendering.Universal.AntialiasingQuality antialiasingQuality
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::AntialiasingQuality& dyn_antialiasingQuality();
    // Get instance field reference: public UnityEngine.Rendering.Universal.ScriptableRenderer renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ScriptableRenderer*& dyn_renderer();
    // Get instance field reference: public System.Boolean resolveFinalTarget
    [[deprecated("Use field access instead!")]] bool& dyn_resolveFinalTarget();
    // Get instance field reference: public UnityEngine.Vector3 worldSpaceCameraPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_worldSpaceCameraPos();
    // Get instance field reference: public UnityEngine.Color backgroundColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_backgroundColor();
    // Get instance field reference: UnityEngine.Rendering.Universal.TaaPersistentData taaPersistentData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::TaaPersistentData*& dyn_taaPersistentData();
    // Get instance field reference: UnityEngine.Rendering.Universal.TemporalAA/Settings taaSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::TemporalAA::Settings& dyn_taaSettings();
    // Get instance field reference: public UnityEngine.Camera baseCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_baseCamera();
    // System.Void SetViewAndProjectionMatrix(UnityEngine.Matrix4x4 viewMatrix, UnityEngine.Matrix4x4 projectionMatrix)
    // Offset: 0x52F7E9C
    void SetViewAndProjectionMatrix(::UnityEngine::Matrix4x4 viewMatrix, ::UnityEngine::Matrix4x4 projectionMatrix);
    // System.Void SetViewProjectionAndJitterMatrix(UnityEngine.Matrix4x4 viewMatrix, UnityEngine.Matrix4x4 projectionMatrix, UnityEngine.Matrix4x4 jitterMatrix)
    // Offset: 0x52F56E8
    void SetViewProjectionAndJitterMatrix(::UnityEngine::Matrix4x4 viewMatrix, ::UnityEngine::Matrix4x4 projectionMatrix, ::UnityEngine::Matrix4x4 jitterMatrix);
    // System.Void PushBuiltinShaderConstantsXR(UnityEngine.Rendering.CommandBuffer cmd, System.Boolean renderIntoTexture)
    // Offset: 0x52F7F14
    void PushBuiltinShaderConstantsXR(::UnityEngine::Rendering::CommandBuffer* cmd, bool renderIntoTexture);
    // public UnityEngine.Matrix4x4 GetViewMatrix(System.Int32 viewIndex)
    // Offset: 0x52F80A8
    ::UnityEngine::Matrix4x4 GetViewMatrix(int viewIndex);
    // public UnityEngine.Matrix4x4 GetProjectionMatrix(System.Int32 viewIndex)
    // Offset: 0x52F811C
    ::UnityEngine::Matrix4x4 GetProjectionMatrix(int viewIndex);
    // UnityEngine.Matrix4x4 GetProjectionMatrixNoJitter(System.Int32 viewIndex)
    // Offset: 0x52F8210
    ::UnityEngine::Matrix4x4 GetProjectionMatrixNoJitter(int viewIndex);
    // public UnityEngine.Matrix4x4 GetGPUProjectionMatrix(System.Int32 viewIndex)
    // Offset: 0x52F8284
    ::UnityEngine::Matrix4x4 GetGPUProjectionMatrix(int viewIndex);
    // public UnityEngine.Matrix4x4 GetGPUProjectionMatrixNoJitter(System.Int32 viewIndex)
    // Offset: 0x52F8558
    ::UnityEngine::Matrix4x4 GetGPUProjectionMatrixNoJitter(int viewIndex);
    // UnityEngine.Matrix4x4 GetGPUProjectionMatrix(System.Boolean renderIntoTexture, System.Int32 viewIndex)
    // Offset: 0x52F85B0
    ::UnityEngine::Matrix4x4 GetGPUProjectionMatrix(bool renderIntoTexture, int viewIndex);
    // System.Boolean get_requireSrgbConversion()
    // Offset: 0x52ECE80
    bool get_requireSrgbConversion();
    // public System.Boolean get_isSceneViewCamera()
    // Offset: 0x52EC06C
    bool get_isSceneViewCamera();
    // public System.Boolean get_isPreviewCamera()
    // Offset: 0x52EBE60
    bool get_isPreviewCamera();
    // System.Boolean get_isRenderPassSupportedCamera()
    // Offset: 0x52F8648
    bool get_isRenderPassSupportedCamera();
    // System.Boolean get_resolveToScreen()
    // Offset: 0x52F8664
    bool get_resolveToScreen();
    // public System.Boolean get_isHDROutputActive()
    // Offset: 0x52EC968
    bool get_isHDROutputActive();
    // public System.Boolean get_rendersOverlayUI()
    // Offset: 0x52EC8EC
    bool get_rendersOverlayUI();
    // public System.Boolean IsHandleYFlipped(UnityEngine.Rendering.RTHandle handle)
    // Offset: 0x52F870C
    bool IsHandleYFlipped(::UnityEngine::Rendering::RTHandle* handle);
    // public System.Boolean IsCameraProjectionMatrixFlipped()
    // Offset: 0x52F8320
    bool IsCameraProjectionMatrixFlipped();
    // public System.Boolean IsRenderTargetProjectionMatrixFlipped(UnityEngine.Rendering.RTHandle color, UnityEngine.Rendering.RTHandle depth)
    // Offset: 0x52F8894
    bool IsRenderTargetProjectionMatrixFlipped(::UnityEngine::Rendering::RTHandle* color, ::UnityEngine::Rendering::RTHandle* depth);
    // System.Boolean IsTemporalAAEnabled()
    // Offset: 0x52EC9DC
    bool IsTemporalAAEnabled();
    // public UnityEngine.Experimental.Rendering.XRPass get_xr()
    // Offset: 0x52F8940
    ::UnityEngine::Experimental::Rendering::XRPass* get_xr();
    // System.Void set_xr(UnityEngine.Experimental.Rendering.XRPass value)
    // Offset: 0x52F8948
    void set_xr(::UnityEngine::Experimental::Rendering::XRPass* value);
    // UnityEngine.Rendering.Universal.XRPassUniversal get_xrUniversal()
    // Offset: 0x52F495C
    ::UnityEngine::Rendering::Universal::XRPassUniversal* get_xrUniversal();
    // System.Boolean get_resetHistory()
    // Offset: 0x52F8958
    bool get_resetHistory();
  }; // UnityEngine.Rendering.Universal.CameraData
  #pragma pack(pop)
  static check_size<sizeof(CameraData), 520 + sizeof(::UnityEngine::Camera*)> __UnityEngine_Rendering_Universal_CameraDataSizeCheck;
  static_assert(sizeof(CameraData) == 0x210);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::SetViewAndProjectionMatrix
// Il2CppName: SetViewAndProjectionMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::CameraData::*)(::UnityEngine::Matrix4x4, ::UnityEngine::Matrix4x4)>(&UnityEngine::Rendering::Universal::CameraData::SetViewAndProjectionMatrix)> {
  static const MethodInfo* get() {
    static auto* viewMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* projectionMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "SetViewAndProjectionMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewMatrix, projectionMatrix});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::SetViewProjectionAndJitterMatrix
// Il2CppName: SetViewProjectionAndJitterMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::CameraData::*)(::UnityEngine::Matrix4x4, ::UnityEngine::Matrix4x4, ::UnityEngine::Matrix4x4)>(&UnityEngine::Rendering::Universal::CameraData::SetViewProjectionAndJitterMatrix)> {
  static const MethodInfo* get() {
    static auto* viewMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* projectionMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* jitterMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "SetViewProjectionAndJitterMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewMatrix, projectionMatrix, jitterMatrix});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::PushBuiltinShaderConstantsXR
// Il2CppName: PushBuiltinShaderConstantsXR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::CameraData::*)(::UnityEngine::Rendering::CommandBuffer*, bool)>(&UnityEngine::Rendering::Universal::CameraData::PushBuiltinShaderConstantsXR)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* renderIntoTexture = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "PushBuiltinShaderConstantsXR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, renderIntoTexture});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::GetViewMatrix
// Il2CppName: GetViewMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (UnityEngine::Rendering::Universal::CameraData::*)(int)>(&UnityEngine::Rendering::Universal::CameraData::GetViewMatrix)> {
  static const MethodInfo* get() {
    static auto* viewIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "GetViewMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::GetProjectionMatrix
// Il2CppName: GetProjectionMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (UnityEngine::Rendering::Universal::CameraData::*)(int)>(&UnityEngine::Rendering::Universal::CameraData::GetProjectionMatrix)> {
  static const MethodInfo* get() {
    static auto* viewIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "GetProjectionMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::GetProjectionMatrixNoJitter
// Il2CppName: GetProjectionMatrixNoJitter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (UnityEngine::Rendering::Universal::CameraData::*)(int)>(&UnityEngine::Rendering::Universal::CameraData::GetProjectionMatrixNoJitter)> {
  static const MethodInfo* get() {
    static auto* viewIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "GetProjectionMatrixNoJitter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::GetGPUProjectionMatrix
// Il2CppName: GetGPUProjectionMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (UnityEngine::Rendering::Universal::CameraData::*)(int)>(&UnityEngine::Rendering::Universal::CameraData::GetGPUProjectionMatrix)> {
  static const MethodInfo* get() {
    static auto* viewIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "GetGPUProjectionMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::GetGPUProjectionMatrixNoJitter
// Il2CppName: GetGPUProjectionMatrixNoJitter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (UnityEngine::Rendering::Universal::CameraData::*)(int)>(&UnityEngine::Rendering::Universal::CameraData::GetGPUProjectionMatrixNoJitter)> {
  static const MethodInfo* get() {
    static auto* viewIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "GetGPUProjectionMatrixNoJitter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::GetGPUProjectionMatrix
// Il2CppName: GetGPUProjectionMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (UnityEngine::Rendering::Universal::CameraData::*)(bool, int)>(&UnityEngine::Rendering::Universal::CameraData::GetGPUProjectionMatrix)> {
  static const MethodInfo* get() {
    static auto* renderIntoTexture = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* viewIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "GetGPUProjectionMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderIntoTexture, viewIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::get_requireSrgbConversion
// Il2CppName: get_requireSrgbConversion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::CameraData::*)()>(&UnityEngine::Rendering::Universal::CameraData::get_requireSrgbConversion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "get_requireSrgbConversion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::get_isSceneViewCamera
// Il2CppName: get_isSceneViewCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::CameraData::*)()>(&UnityEngine::Rendering::Universal::CameraData::get_isSceneViewCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "get_isSceneViewCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::get_isPreviewCamera
// Il2CppName: get_isPreviewCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::CameraData::*)()>(&UnityEngine::Rendering::Universal::CameraData::get_isPreviewCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "get_isPreviewCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::get_isRenderPassSupportedCamera
// Il2CppName: get_isRenderPassSupportedCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::CameraData::*)()>(&UnityEngine::Rendering::Universal::CameraData::get_isRenderPassSupportedCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "get_isRenderPassSupportedCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::get_resolveToScreen
// Il2CppName: get_resolveToScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::CameraData::*)()>(&UnityEngine::Rendering::Universal::CameraData::get_resolveToScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "get_resolveToScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::get_isHDROutputActive
// Il2CppName: get_isHDROutputActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::CameraData::*)()>(&UnityEngine::Rendering::Universal::CameraData::get_isHDROutputActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "get_isHDROutputActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::get_rendersOverlayUI
// Il2CppName: get_rendersOverlayUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::CameraData::*)()>(&UnityEngine::Rendering::Universal::CameraData::get_rendersOverlayUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "get_rendersOverlayUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::IsHandleYFlipped
// Il2CppName: IsHandleYFlipped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::CameraData::*)(::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::CameraData::IsHandleYFlipped)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "IsHandleYFlipped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::IsCameraProjectionMatrixFlipped
// Il2CppName: IsCameraProjectionMatrixFlipped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::CameraData::*)()>(&UnityEngine::Rendering::Universal::CameraData::IsCameraProjectionMatrixFlipped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "IsCameraProjectionMatrixFlipped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::IsRenderTargetProjectionMatrixFlipped
// Il2CppName: IsRenderTargetProjectionMatrixFlipped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::CameraData::*)(::UnityEngine::Rendering::RTHandle*, ::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Rendering::Universal::CameraData::IsRenderTargetProjectionMatrixFlipped)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "IsRenderTargetProjectionMatrixFlipped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, depth});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::IsTemporalAAEnabled
// Il2CppName: IsTemporalAAEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::CameraData::*)()>(&UnityEngine::Rendering::Universal::CameraData::IsTemporalAAEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "IsTemporalAAEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::get_xr
// Il2CppName: get_xr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::XRPass* (UnityEngine::Rendering::Universal::CameraData::*)()>(&UnityEngine::Rendering::Universal::CameraData::get_xr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "get_xr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::set_xr
// Il2CppName: set_xr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::CameraData::*)(::UnityEngine::Experimental::Rendering::XRPass*)>(&UnityEngine::Rendering::Universal::CameraData::set_xr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "XRPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "set_xr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::get_xrUniversal
// Il2CppName: get_xrUniversal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::XRPassUniversal* (UnityEngine::Rendering::Universal::CameraData::*)()>(&UnityEngine::Rendering::Universal::CameraData::get_xrUniversal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "get_xrUniversal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::CameraData::get_resetHistory
// Il2CppName: get_resetHistory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::CameraData::*)()>(&UnityEngine::Rendering::Universal::CameraData::get_resetHistory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::CameraData), "get_resetHistory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
