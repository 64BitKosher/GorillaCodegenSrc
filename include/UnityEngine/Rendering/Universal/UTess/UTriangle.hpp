// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Mathematics.float2
#include "Unity/Mathematics/float2.hpp"
// Including type: UnityEngine.Rendering.Universal.UTess.UCircle
#include "UnityEngine/Rendering/Universal/UTess/UCircle.hpp"
// Including type: Unity.Mathematics.int3
#include "Unity/Mathematics/int3.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal.UTess
namespace UnityEngine::Rendering::Universal::UTess {
  // Forward declaring type: UTriangle
  struct UTriangle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UTess::UTriangle, "UnityEngine.Rendering.Universal.UTess", "UTriangle");
// Type namespace: UnityEngine.Rendering.Universal.UTess
namespace UnityEngine::Rendering::Universal::UTess {
  // Size: 0x34
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.UTess.UTriangle
  // [TokenAttribute] Offset: FFFFFFFF
  struct UTriangle/*, public ::System::ValueType*/ {
    public:
    public:
    // public Unity.Mathematics.float2 va
    // Size: 0x8
    // Offset: 0x0
    ::Unity::Mathematics::float2 va;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float2) == 0x8);
    // public Unity.Mathematics.float2 vb
    // Size: 0x8
    // Offset: 0x8
    ::Unity::Mathematics::float2 vb;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float2) == 0x8);
    // public Unity.Mathematics.float2 vc
    // Size: 0x8
    // Offset: 0x10
    ::Unity::Mathematics::float2 vc;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float2) == 0x8);
    // public UnityEngine.Rendering.Universal.UTess.UCircle c
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Rendering::Universal::UTess::UCircle c;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::UTess::UCircle) == 0xC);
    // public System.Single area
    // Size: 0x4
    // Offset: 0x24
    float area;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Unity.Mathematics.int3 indices
    // Size: 0xC
    // Offset: 0x28
    ::Unity::Mathematics::int3 indices;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::int3) == 0xC);
    public:
    // Creating value type constructor for type: UTriangle
    constexpr UTriangle(::Unity::Mathematics::float2 va_ = {}, ::Unity::Mathematics::float2 vb_ = {}, ::Unity::Mathematics::float2 vc_ = {}, ::UnityEngine::Rendering::Universal::UTess::UCircle c_ = {}, float area_ = {}, ::Unity::Mathematics::int3 indices_ = {}) noexcept : va{va_}, vb{vb_}, vc{vc_}, c{c_}, area{area_}, indices{indices_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Unity.Mathematics.float2 va
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float2& dyn_va();
    // Get instance field reference: public Unity.Mathematics.float2 vb
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float2& dyn_vb();
    // Get instance field reference: public Unity.Mathematics.float2 vc
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float2& dyn_vc();
    // Get instance field reference: public UnityEngine.Rendering.Universal.UTess.UCircle c
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::UTess::UCircle& dyn_c();
    // Get instance field reference: public System.Single area
    [[deprecated("Use field access instead!")]] float& dyn_area();
    // Get instance field reference: public Unity.Mathematics.int3 indices
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::int3& dyn_indices();
  }; // UnityEngine.Rendering.Universal.UTess.UTriangle
  #pragma pack(pop)
  static check_size<sizeof(UTriangle), 40 + sizeof(::Unity::Mathematics::int3)> __UnityEngine_Rendering_Universal_UTess_UTriangleSizeCheck;
  static_assert(sizeof(UTriangle) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
