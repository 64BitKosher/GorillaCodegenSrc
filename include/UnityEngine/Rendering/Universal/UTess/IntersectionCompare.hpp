// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IComparer`1
#include "System/Collections/Generic/IComparer_1.hpp"
// Including type: Unity.Mathematics.int2
#include "Unity/Mathematics/int2.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: Unity.Mathematics.double2
#include "Unity/Mathematics/double2.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal.UTess
namespace UnityEngine::Rendering::Universal::UTess {
  // Forward declaring type: IntersectionCompare
  struct IntersectionCompare;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UTess::IntersectionCompare, "UnityEngine.Rendering.Universal.UTess", "IntersectionCompare");
// Type namespace: UnityEngine.Rendering.Universal.UTess
namespace UnityEngine::Rendering::Universal::UTess {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.UTess.IntersectionCompare
  // [TokenAttribute] Offset: FFFFFFFF
  struct IntersectionCompare/*, public ::System::ValueType, public ::System::Collections::Generic::IComparer_1<::Unity::Mathematics::int2>*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::UTess::IntersectionCompare::$xvasort$e__FixedBuffer
    struct $xvasort$e__FixedBuffer;
    // Nested type: ::UnityEngine::Rendering::Universal::UTess::IntersectionCompare::$xvbsort$e__FixedBuffer
    struct $xvbsort$e__FixedBuffer;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.Universal.UTess.IntersectionCompare/<xvasort>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    struct $xvasort$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Double FixedElementField
      // Size: 0x8
      // Offset: 0x0
      double FixedElementField;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      public:
      // Creating value type constructor for type: $xvasort$e__FixedBuffer
      constexpr $xvasort$e__FixedBuffer(double FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator double
      constexpr operator double() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Double FixedElementField
      [[deprecated("Use field access instead!")]] double& dyn_FixedElementField();
    }; // UnityEngine.Rendering.Universal.UTess.IntersectionCompare/<xvasort>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(IntersectionCompare::$xvasort$e__FixedBuffer), 0 + sizeof(double)> __UnityEngine_Rendering_Universal_UTess_IntersectionCompare_$xvasort$e__FixedBufferSizeCheck;
    static_assert(sizeof(IntersectionCompare::$xvasort$e__FixedBuffer) == 0x8);
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.Universal.UTess.IntersectionCompare/<xvbsort>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    struct $xvbsort$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Double FixedElementField
      // Size: 0x8
      // Offset: 0x0
      double FixedElementField;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      public:
      // Creating value type constructor for type: $xvbsort$e__FixedBuffer
      constexpr $xvbsort$e__FixedBuffer(double FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator double
      constexpr operator double() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Double FixedElementField
      [[deprecated("Use field access instead!")]] double& dyn_FixedElementField();
    }; // UnityEngine.Rendering.Universal.UTess.IntersectionCompare/<xvbsort>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(IntersectionCompare::$xvbsort$e__FixedBuffer), 0 + sizeof(double)> __UnityEngine_Rendering_Universal_UTess_IntersectionCompare_$xvbsort$e__FixedBufferSizeCheck;
    static_assert(sizeof(IntersectionCompare::$xvbsort$e__FixedBuffer) == 0x8);
    public:
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.double2> points
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::double2> points;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.int2> edges
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2> edges;
    // public UnityEngine.Rendering.Universal.UTess.IntersectionCompare/<xvasort>e__FixedBuffer xvasort
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rendering::Universal::UTess::IntersectionCompare::$xvasort$e__FixedBuffer xvasort;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::UTess::IntersectionCompare::$xvasort$e__FixedBuffer) == 0x8);
    // public UnityEngine.Rendering.Universal.UTess.IntersectionCompare/<xvbsort>e__FixedBuffer xvbsort
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Rendering::Universal::UTess::IntersectionCompare::$xvbsort$e__FixedBuffer xvbsort;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::UTess::IntersectionCompare::$xvbsort$e__FixedBuffer) == 0x8);
    public:
    // Creating value type constructor for type: IntersectionCompare
    constexpr IntersectionCompare(::Unity::Collections::NativeArray_1<::Unity::Mathematics::double2> points_ = {}, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2> edges_ = {}, ::UnityEngine::Rendering::Universal::UTess::IntersectionCompare::$xvasort$e__FixedBuffer xvasort_ = {}, ::UnityEngine::Rendering::Universal::UTess::IntersectionCompare::$xvbsort$e__FixedBuffer xvbsort_ = {}) noexcept : points{points_}, edges{edges_}, xvasort{xvasort_}, xvbsort{xvbsort_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IComparer_1<::Unity::Mathematics::int2>
    operator ::System::Collections::Generic::IComparer_1<::Unity::Mathematics::int2>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IComparer_1<::Unity::Mathematics::int2>*>(this);
    }
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.double2> points
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::double2>& dyn_points();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.int2> edges
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>& dyn_edges();
    // Get instance field reference: public UnityEngine.Rendering.Universal.UTess.IntersectionCompare/<xvasort>e__FixedBuffer xvasort
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::UTess::IntersectionCompare::$xvasort$e__FixedBuffer& dyn_xvasort();
    // Get instance field reference: public UnityEngine.Rendering.Universal.UTess.IntersectionCompare/<xvbsort>e__FixedBuffer xvbsort
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::UTess::IntersectionCompare::$xvbsort$e__FixedBuffer& dyn_xvbsort();
    // public System.Int32 Compare(Unity.Mathematics.int2 a, Unity.Mathematics.int2 b)
    // Offset: 0x5321B50
    int Compare(::Unity::Mathematics::int2 a, ::Unity::Mathematics::int2 b);
  }; // UnityEngine.Rendering.Universal.UTess.IntersectionCompare
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UTess::IntersectionCompare::$xvbsort$e__FixedBuffer, "UnityEngine.Rendering.Universal.UTess", "IntersectionCompare/<xvbsort>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UTess::IntersectionCompare::$xvasort$e__FixedBuffer, "UnityEngine.Rendering.Universal.UTess", "IntersectionCompare/<xvasort>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::IntersectionCompare::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UTess::IntersectionCompare::*)(::Unity::Mathematics::int2, ::Unity::Mathematics::int2)>(&UnityEngine::Rendering::Universal::UTess::IntersectionCompare::Compare)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::IntersectionCompare), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
