// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: Unity.Mathematics.int2
#include "Unity/Mathematics/int2.hpp"
// Including type: UnityEngine.Rendering.Universal.UTess.UStar
#include "UnityEngine/Rendering/Universal/UTess/UStar.hpp"
// Including type: Unity.Mathematics.int3
#include "Unity/Mathematics/int3.hpp"
// Including type: UnityEngine.Rendering.Universal.UTess.UHull
#include "UnityEngine/Rendering/Universal/UTess/UHull.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal::UTess
namespace UnityEngine::Rendering::Universal::UTess {
  // Forward declaring type: UEvent
  struct UEvent;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal.UTess
namespace UnityEngine::Rendering::Universal::UTess {
  // Forward declaring type: Tessellator
  struct Tessellator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UTess::Tessellator, "UnityEngine.Rendering.Universal.UTess", "Tessellator");
// Type namespace: UnityEngine.Rendering.Universal.UTess
namespace UnityEngine::Rendering::Universal::UTess {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.UTess.Tessellator
  // [TokenAttribute] Offset: FFFFFFFF
  struct Tessellator/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::UTess::Tessellator::TestHullPointL
    struct TestHullPointL;
    // Nested type: ::UnityEngine::Rendering::Universal::UTess::Tessellator::TestHullPointU
    struct TestHullPointU;
    // Nested type: ::UnityEngine::Rendering::Universal::UTess::Tessellator::TestHullEventLe
    struct TestHullEventLe;
    // Nested type: ::UnityEngine::Rendering::Universal::UTess::Tessellator::TestHullEventE
    struct TestHullEventE;
    // Nested type: ::UnityEngine::Rendering::Universal::UTess::Tessellator::TestEdgePointE
    struct TestEdgePointE;
    // Nested type: ::UnityEngine::Rendering::Universal::UTess::Tessellator::TestCellE
    struct TestCellE;
    public:
    // private Unity.Collections.NativeArray`1<Unity.Mathematics.int2> m_Edges
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2> m_Edges;
    // private Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.UTess.UStar> m_Stars
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UStar> m_Stars;
    // private Unity.Collections.NativeArray`1<Unity.Mathematics.int3> m_Cells
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int3> m_Cells;
    // private System.Int32 m_CellCount
    // Size: 0x4
    // Offset: 0x30
    int m_CellCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Unity.Collections.NativeArray`1<System.Int32> m_ILArray
    // Size: 0xFFFFFFFF
    // Offset: 0x38
    ::Unity::Collections::NativeArray_1<int> m_ILArray;
    // private Unity.Collections.NativeArray`1<System.Int32> m_IUArray
    // Size: 0xFFFFFFFF
    // Offset: 0x48
    ::Unity::Collections::NativeArray_1<int> m_IUArray;
    // private Unity.Collections.NativeArray`1<System.Int32> m_SPArray
    // Size: 0xFFFFFFFF
    // Offset: 0x58
    ::Unity::Collections::NativeArray_1<int> m_SPArray;
    // private System.Int32 m_NumEdges
    // Size: 0x4
    // Offset: 0x68
    int m_NumEdges;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_NumHulls
    // Size: 0x4
    // Offset: 0x6C
    int m_NumHulls;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_NumPoints
    // Size: 0x4
    // Offset: 0x70
    int m_NumPoints;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_StarCount
    // Size: 0x4
    // Offset: 0x74
    int m_StarCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Unity.Collections.NativeArray`1<System.Int32> m_Flags
    // Size: 0xFFFFFFFF
    // Offset: 0x78
    ::Unity::Collections::NativeArray_1<int> m_Flags;
    // private Unity.Collections.NativeArray`1<System.Int32> m_Neighbors
    // Size: 0xFFFFFFFF
    // Offset: 0x88
    ::Unity::Collections::NativeArray_1<int> m_Neighbors;
    // private Unity.Collections.NativeArray`1<System.Int32> m_Constraints
    // Size: 0xFFFFFFFF
    // Offset: 0x98
    ::Unity::Collections::NativeArray_1<int> m_Constraints;
    // private Unity.Collections.Allocator m_Allocator
    // Size: 0x4
    // Offset: 0xA8
    ::Unity::Collections::Allocator m_Allocator;
    // Field size check
    static_assert(sizeof(::Unity::Collections::Allocator) == 0x4);
    public:
    // Creating value type constructor for type: Tessellator
    constexpr Tessellator(::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2> m_Edges_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UStar> m_Stars_ = {}, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int3> m_Cells_ = {}, int m_CellCount_ = {}, ::Unity::Collections::NativeArray_1<int> m_ILArray_ = {}, ::Unity::Collections::NativeArray_1<int> m_IUArray_ = {}, ::Unity::Collections::NativeArray_1<int> m_SPArray_ = {}, int m_NumEdges_ = {}, int m_NumHulls_ = {}, int m_NumPoints_ = {}, int m_StarCount_ = {}, ::Unity::Collections::NativeArray_1<int> m_Flags_ = {}, ::Unity::Collections::NativeArray_1<int> m_Neighbors_ = {}, ::Unity::Collections::NativeArray_1<int> m_Constraints_ = {}, ::Unity::Collections::Allocator m_Allocator_ = {}) noexcept : m_Edges{m_Edges_}, m_Stars{m_Stars_}, m_Cells{m_Cells_}, m_CellCount{m_CellCount_}, m_ILArray{m_ILArray_}, m_IUArray{m_IUArray_}, m_SPArray{m_SPArray_}, m_NumEdges{m_NumEdges_}, m_NumHulls{m_NumHulls_}, m_NumPoints{m_NumPoints_}, m_StarCount{m_StarCount_}, m_Flags{m_Flags_}, m_Neighbors{m_Neighbors_}, m_Constraints{m_Constraints_}, m_Allocator{m_Allocator_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private Unity.Collections.NativeArray`1<Unity.Mathematics.int2> m_Edges
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>& dyn_m_Edges();
    // Get instance field reference: private Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.UTess.UStar> m_Stars
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UStar>& dyn_m_Stars();
    // Get instance field reference: private Unity.Collections.NativeArray`1<Unity.Mathematics.int3> m_Cells
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int3>& dyn_m_Cells();
    // Get instance field reference: private System.Int32 m_CellCount
    [[deprecated("Use field access instead!")]] int& dyn_m_CellCount();
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.Int32> m_ILArray
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_m_ILArray();
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.Int32> m_IUArray
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_m_IUArray();
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.Int32> m_SPArray
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_m_SPArray();
    // Get instance field reference: private System.Int32 m_NumEdges
    [[deprecated("Use field access instead!")]] int& dyn_m_NumEdges();
    // Get instance field reference: private System.Int32 m_NumHulls
    [[deprecated("Use field access instead!")]] int& dyn_m_NumHulls();
    // Get instance field reference: private System.Int32 m_NumPoints
    [[deprecated("Use field access instead!")]] int& dyn_m_NumPoints();
    // Get instance field reference: private System.Int32 m_StarCount
    [[deprecated("Use field access instead!")]] int& dyn_m_StarCount();
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.Int32> m_Flags
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_m_Flags();
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.Int32> m_Neighbors
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_m_Neighbors();
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.Int32> m_Constraints
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_m_Constraints();
    // Get instance field reference: private Unity.Collections.Allocator m_Allocator
    [[deprecated("Use field access instead!")]] ::Unity::Collections::Allocator& dyn_m_Allocator();
    // static private System.Single FindSplit(UnityEngine.Rendering.Universal.UTess.UHull hull, UnityEngine.Rendering.Universal.UTess.UEvent edge)
    // Offset: 0x531E7DC
    static float FindSplit(::UnityEngine::Rendering::Universal::UTess::UHull hull, ::UnityEngine::Rendering::Universal::UTess::UEvent edge);
    // private System.Void SetAllocator(Unity.Collections.Allocator allocator)
    // Offset: 0x531E9A4
    void SetAllocator(::Unity::Collections::Allocator allocator);
    // private System.Boolean AddPoint(Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.UTess.UHull> hulls, System.Int32 hullCount, Unity.Collections.NativeArray`1<Unity.Mathematics.float2> points, Unity.Mathematics.float2 p, System.Int32 idx)
    // Offset: 0x531E9AC
    bool AddPoint(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UHull> hulls, int hullCount, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> points, ::Unity::Mathematics::float2 p, int idx);
    // static private System.Void InsertHull(Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.UTess.UHull> Hulls, System.Int32 Pos, ref System.Int32 Count, UnityEngine.Rendering.Universal.UTess.UHull Value)
    // Offset: 0x531EDC0
    static void InsertHull(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UHull> Hulls, int Pos, ByRef<int> Count, ::UnityEngine::Rendering::Universal::UTess::UHull Value);
    // static private System.Void EraseHull(Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.UTess.UHull> Hulls, System.Int32 Pos, ref System.Int32 Count)
    // Offset: 0x531EE5C
    static void EraseHull(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UHull> Hulls, int Pos, ByRef<int> Count);
    // private System.Boolean SplitHulls(Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.UTess.UHull> hulls, ref System.Int32 hullCount, Unity.Collections.NativeArray`1<Unity.Mathematics.float2> points, UnityEngine.Rendering.Universal.UTess.UEvent evt)
    // Offset: 0x531EEC4
    bool SplitHulls(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UHull> hulls, ByRef<int> hullCount, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> points, ::UnityEngine::Rendering::Universal::UTess::UEvent evt);
    // private System.Boolean MergeHulls(Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.UTess.UHull> hulls, ref System.Int32 hullCount, Unity.Collections.NativeArray`1<Unity.Mathematics.float2> points, UnityEngine.Rendering.Universal.UTess.UEvent evt)
    // Offset: 0x531F168
    bool MergeHulls(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UHull> hulls, ByRef<int> hullCount, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> points, ::UnityEngine::Rendering::Universal::UTess::UEvent evt);
    // static private System.Void InsertUniqueEdge(Unity.Collections.NativeArray`1<Unity.Mathematics.int2> edges, Unity.Mathematics.int2 e, ref System.Int32 edgeCount)
    // Offset: 0x531F384
    static void InsertUniqueEdge(::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2> edges, ::Unity::Mathematics::int2 e, ByRef<int> edgeCount);
    // private System.Void PrepareDelaunay(Unity.Collections.NativeArray`1<Unity.Mathematics.int2> edges, System.Int32 edgeCount)
    // Offset: 0x531F3E0
    void PrepareDelaunay(::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2> edges, int edgeCount);
    // private System.Int32 OppositeOf(System.Int32 a, System.Int32 b)
    // Offset: 0x531F890
    int OppositeOf(int a, int b);
    // private System.Int32 FindConstraint(System.Int32 a, System.Int32 b)
    // Offset: 0x531F950
    int FindConstraint(int a, int b);
    // private System.Void AddTriangle(System.Int32 i, System.Int32 j, System.Int32 k)
    // Offset: 0x531F9FC
    void AddTriangle(int i, int j, int k);
    // private System.Void RemovePair(System.Int32 r, System.Int32 j, System.Int32 k)
    // Offset: 0x531FBBC
    void RemovePair(int r, int j, int k);
    // private System.Void RemoveTriangle(System.Int32 i, System.Int32 j, System.Int32 k)
    // Offset: 0x531FD14
    void RemoveTriangle(int i, int j, int k);
    // private System.Void EdgeFlip(System.Int32 i, System.Int32 j)
    // Offset: 0x531FD68
    void EdgeFlip(int i, int j);
    // private System.Boolean Flip(Unity.Collections.NativeArray`1<Unity.Mathematics.float2> points, ref Unity.Collections.NativeArray`1<System.Int32> stack, ref System.Int32 stackCount, System.Int32 a, System.Int32 b, System.Int32 x)
    // Offset: 0x531FDF8
    bool Flip(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> points, ByRef<::Unity::Collections::NativeArray_1<int>> stack, ByRef<int> stackCount, int a, int b, int x);
    // private Unity.Collections.NativeArray`1<Unity.Mathematics.int3> GetCells(ref System.Int32 count)
    // Offset: 0x53200E4
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int3> GetCells(ByRef<int> count);
    // System.Boolean ApplyDelaunay(Unity.Collections.NativeArray`1<Unity.Mathematics.float2> points, Unity.Collections.NativeArray`1<Unity.Mathematics.int2> edges)
    // Offset: 0x5320240
    bool ApplyDelaunay(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> points, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2> edges);
    // private System.Int32 FindNeighbor(Unity.Collections.NativeArray`1<Unity.Mathematics.int3> cells, System.Int32 count, System.Int32 a, System.Int32 b, System.Int32 c)
    // Offset: 0x5320768
    int FindNeighbor(::Unity::Collections::NativeArray_1<::Unity::Mathematics::int3> cells, int count, int a, int b, int c);
    // private Unity.Collections.NativeArray`1<Unity.Mathematics.int3> Constrain(ref System.Int32 count)
    // Offset: 0x5320874
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int3> Constrain(ByRef<int> count);
    // Unity.Collections.NativeArray`1<Unity.Mathematics.int3> RemoveExterior(ref System.Int32 cellCount)
    // Offset: 0x5320D98
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int3> RemoveExterior(ByRef<int> cellCount);
    // Unity.Collections.NativeArray`1<Unity.Mathematics.int3> RemoveInterior(System.Int32 cellCount)
    // Offset: 0x5320EB4
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int3> RemoveInterior(int cellCount);
    // System.Boolean Triangulate(Unity.Collections.NativeArray`1<Unity.Mathematics.float2> points, System.Int32 pointCount, Unity.Collections.NativeArray`1<Unity.Mathematics.int2> edges, System.Int32 edgeCount)
    // Offset: 0x5320FC4
    bool Triangulate(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> points, int pointCount, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2> edges, int edgeCount);
    // static System.Boolean Tessellate(Unity.Collections.Allocator allocator, Unity.Collections.NativeArray`1<Unity.Mathematics.float2> pgPoints, System.Int32 pgPointCount, Unity.Collections.NativeArray`1<Unity.Mathematics.int2> pgEdges, System.Int32 pgEdgeCount, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float2> outputVertices, ref System.Int32 vertexCount, ref Unity.Collections.NativeArray`1<System.Int32> outputIndices, ref System.Int32 indexCount)
    // Offset: 0x5321530
    static bool Tessellate(::Unity::Collections::Allocator allocator, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> pgPoints, int pgPointCount, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2> pgEdges, int pgEdgeCount, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>> outputVertices, ByRef<int> vertexCount, ByRef<::Unity::Collections::NativeArray_1<int>> outputIndices, ByRef<int> indexCount);
    // System.Void Cleanup()
    // Offset: 0x5321724
    void Cleanup();
  }; // UnityEngine.Rendering.Universal.UTess.Tessellator
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::FindSplit
// Il2CppName: FindSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Rendering::Universal::UTess::UHull, ::UnityEngine::Rendering::Universal::UTess::UEvent)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::FindSplit)> {
  static const MethodInfo* get() {
    static auto* hull = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.UTess", "UHull")->byval_arg;
    static auto* edge = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.UTess", "UEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "FindSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hull, edge});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::SetAllocator
// Il2CppName: SetAllocator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(::Unity::Collections::Allocator)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::SetAllocator)> {
  static const MethodInfo* get() {
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "Allocator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "SetAllocator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allocator});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::AddPoint
// Il2CppName: AddPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UHull>, int, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, ::Unity::Mathematics::float2, int)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::AddPoint)> {
  static const MethodInfo* get() {
    static auto* hulls = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.UTess", "UHull")})->byval_arg;
    static auto* hullCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "AddPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hulls, hullCount, points, p, idx});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::InsertHull
// Il2CppName: InsertHull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UHull>, int, ByRef<int>, ::UnityEngine::Rendering::Universal::UTess::UHull)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::InsertHull)> {
  static const MethodInfo* get() {
    static auto* Hulls = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.UTess", "UHull")})->byval_arg;
    static auto* Pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* Count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* Value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.UTess", "UHull")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "InsertHull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Hulls, Pos, Count, Value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::EraseHull
// Il2CppName: EraseHull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UHull>, int, ByRef<int>)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::EraseHull)> {
  static const MethodInfo* get() {
    static auto* Hulls = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.UTess", "UHull")})->byval_arg;
    static auto* Pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* Count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "EraseHull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Hulls, Pos, Count});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::SplitHulls
// Il2CppName: SplitHulls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UHull>, ByRef<int>, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, ::UnityEngine::Rendering::Universal::UTess::UEvent)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::SplitHulls)> {
  static const MethodInfo* get() {
    static auto* hulls = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.UTess", "UHull")})->byval_arg;
    static auto* hullCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.UTess", "UEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "SplitHulls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hulls, hullCount, points, evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::MergeHulls
// Il2CppName: MergeHulls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UHull>, ByRef<int>, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, ::UnityEngine::Rendering::Universal::UTess::UEvent)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::MergeHulls)> {
  static const MethodInfo* get() {
    static auto* hulls = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.UTess", "UHull")})->byval_arg;
    static auto* hullCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.UTess", "UEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "MergeHulls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hulls, hullCount, points, evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::InsertUniqueEdge
// Il2CppName: InsertUniqueEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>, ::Unity::Mathematics::int2, ByRef<int>)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::InsertUniqueEdge)> {
  static const MethodInfo* get() {
    static auto* edges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")->byval_arg;
    static auto* edgeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "InsertUniqueEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edges, e, edgeCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::PrepareDelaunay
// Il2CppName: PrepareDelaunay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>, int)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::PrepareDelaunay)> {
  static const MethodInfo* get() {
    static auto* edges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->byval_arg;
    static auto* edgeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "PrepareDelaunay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edges, edgeCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::OppositeOf
// Il2CppName: OppositeOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(int, int)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::OppositeOf)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "OppositeOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::FindConstraint
// Il2CppName: FindConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(int, int)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::FindConstraint)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "FindConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::AddTriangle
// Il2CppName: AddTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(int, int, int)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::AddTriangle)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "AddTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, j, k});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::RemovePair
// Il2CppName: RemovePair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(int, int, int)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::RemovePair)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "RemovePair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r, j, k});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::RemoveTriangle
// Il2CppName: RemoveTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(int, int, int)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::RemoveTriangle)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "RemoveTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, j, k});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::EdgeFlip
// Il2CppName: EdgeFlip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(int, int)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::EdgeFlip)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "EdgeFlip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, j});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::Flip
// Il2CppName: Flip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, ByRef<::Unity::Collections::NativeArray_1<int>>, ByRef<int>, int, int, int)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::Flip)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* stack = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    static auto* stackCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "Flip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, stack, stackCount, a, b, x});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::GetCells
// Il2CppName: GetCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int3> (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(ByRef<int>)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::GetCells)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "GetCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::ApplyDelaunay
// Il2CppName: ApplyDelaunay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::ApplyDelaunay)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* edges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "ApplyDelaunay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, edges});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::FindNeighbor
// Il2CppName: FindNeighbor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(::Unity::Collections::NativeArray_1<::Unity::Mathematics::int3>, int, int, int, int)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::FindNeighbor)> {
  static const MethodInfo* get() {
    static auto* cells = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int3")})->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "FindNeighbor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cells, count, a, b, c});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::Constrain
// Il2CppName: Constrain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int3> (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(ByRef<int>)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::Constrain)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "Constrain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::RemoveExterior
// Il2CppName: RemoveExterior
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int3> (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(ByRef<int>)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::RemoveExterior)> {
  static const MethodInfo* get() {
    static auto* cellCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "RemoveExterior", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cellCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::RemoveInterior
// Il2CppName: RemoveInterior
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int3> (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(int)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::RemoveInterior)> {
  static const MethodInfo* get() {
    static auto* cellCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "RemoveInterior", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cellCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::Triangulate
// Il2CppName: Triangulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UTess::Tessellator::*)(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, int, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>, int)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::Triangulate)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* pointCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* edges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->byval_arg;
    static auto* edgeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "Triangulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, pointCount, edges, edgeCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::Tessellate
// Il2CppName: Tessellate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Unity::Collections::Allocator, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, int, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>, int, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>>, ByRef<int>, ByRef<::Unity::Collections::NativeArray_1<int>>, ByRef<int>)>(&UnityEngine::Rendering::Universal::UTess::Tessellator::Tessellate)> {
  static const MethodInfo* get() {
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "Allocator")->byval_arg;
    static auto* pgPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* pgPointCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pgEdges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->byval_arg;
    static auto* pgEdgeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* outputVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->this_arg;
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* outputIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    static auto* indexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "Tessellate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allocator, pgPoints, pgPointCount, pgEdges, pgEdgeCount, outputVertices, vertexCount, outputIndices, indexCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::Tessellator::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UTess::Tessellator::*)()>(&UnityEngine::Rendering::Universal::UTess::Tessellator::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::Tessellator), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
