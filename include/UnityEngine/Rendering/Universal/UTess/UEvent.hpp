// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Mathematics.float2
#include "Unity/Mathematics/float2.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal.UTess
namespace UnityEngine::Rendering::Universal::UTess {
  // Forward declaring type: UEvent
  struct UEvent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UTess::UEvent, "UnityEngine.Rendering.Universal.UTess", "UEvent");
// Type namespace: UnityEngine.Rendering.Universal.UTess
namespace UnityEngine::Rendering::Universal::UTess {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.UTess.UEvent
  // [TokenAttribute] Offset: FFFFFFFF
  struct UEvent/*, public ::System::ValueType*/ {
    public:
    public:
    // public Unity.Mathematics.float2 a
    // Size: 0x8
    // Offset: 0x0
    ::Unity::Mathematics::float2 a;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float2) == 0x8);
    // public Unity.Mathematics.float2 b
    // Size: 0x8
    // Offset: 0x8
    ::Unity::Mathematics::float2 b;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float2) == 0x8);
    // public System.Int32 idx
    // Size: 0x4
    // Offset: 0x10
    int idx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 type
    // Size: 0x4
    // Offset: 0x14
    int type;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: UEvent
    constexpr UEvent(::Unity::Mathematics::float2 a_ = {}, ::Unity::Mathematics::float2 b_ = {}, int idx_ = {}, int type_ = {}) noexcept : a{a_}, b{b_}, idx{idx_}, type{type_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Unity.Mathematics.float2 a
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float2& dyn_a();
    // Get instance field reference: public Unity.Mathematics.float2 b
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float2& dyn_b();
    // Get instance field reference: public System.Int32 idx
    [[deprecated("Use field access instead!")]] int& dyn_idx();
    // Get instance field reference: public System.Int32 type
    [[deprecated("Use field access instead!")]] int& dyn_type();
  }; // UnityEngine.Rendering.Universal.UTess.UEvent
  #pragma pack(pop)
  static check_size<sizeof(UEvent), 20 + sizeof(int)> __UnityEngine_Rendering_Universal_UTess_UEventSizeCheck;
  static_assert(sizeof(UEvent) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
