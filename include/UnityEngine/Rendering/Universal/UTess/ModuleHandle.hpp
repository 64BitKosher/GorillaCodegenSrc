// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: Unity.Mathematics.float2
#include "Unity/Mathematics/float2.hpp"
// Including type: UnityEngine.Rendering.Universal.UTess.UTriangle
#include "UnityEngine/Rendering/Universal/UTess/UTriangle.hpp"
// Including type: Unity.Mathematics.int4
#include "Unity/Mathematics/int4.hpp"
// Including type: Unity.Mathematics.int2
#include "Unity/Mathematics/int2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IComparer`1<T>
  template<typename T>
  class IComparer_1;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal::UTess
namespace UnityEngine::Rendering::Universal::UTess {
  // Forward declaring type: ICondition2`2<T, U>
  template<typename T, typename U>
  class ICondition2_2;
  // Skipping declaration: UCircle because it is already included!
}
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Skipping declaration: Allocator because it is already included!
}
// Forward declaring namespace: Unity::Mathematics
namespace Unity::Mathematics {
  // Forward declaring type: double2
  struct double2;
  // Forward declaring type: float4
  struct float4;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal.UTess
namespace UnityEngine::Rendering::Universal::UTess {
  // Forward declaring type: ModuleHandle
  struct ModuleHandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UTess::ModuleHandle, "UnityEngine.Rendering.Universal.UTess", "ModuleHandle");
// Type namespace: UnityEngine.Rendering.Universal.UTess
namespace UnityEngine::Rendering::Universal::UTess {
  // Size: 0x0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.UTess.ModuleHandle
  // [TokenAttribute] Offset: FFFFFFFF
  struct ModuleHandle/*, public ::System::ValueType*/ {
    public:
    // Creating value type constructor for type: ModuleHandle
    constexpr ModuleHandle() noexcept {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static readonly System.Int32 kMaxArea
    static int _get_kMaxArea();
    // Set static field: static readonly System.Int32 kMaxArea
    static void _set_kMaxArea(int value);
    // Get static field: static readonly System.Int32 kMaxEdgeCount
    static int _get_kMaxEdgeCount();
    // Set static field: static readonly System.Int32 kMaxEdgeCount
    static void _set_kMaxEdgeCount(int value);
    // Get static field: static readonly System.Int32 kMaxIndexCount
    static int _get_kMaxIndexCount();
    // Set static field: static readonly System.Int32 kMaxIndexCount
    static void _set_kMaxIndexCount(int value);
    // Get static field: static readonly System.Int32 kMaxVertexCount
    static int _get_kMaxVertexCount();
    // Set static field: static readonly System.Int32 kMaxVertexCount
    static void _set_kMaxVertexCount(int value);
    // Get static field: static readonly System.Int32 kMaxTriangleCount
    static int _get_kMaxTriangleCount();
    // Set static field: static readonly System.Int32 kMaxTriangleCount
    static void _set_kMaxTriangleCount(int value);
    // Get static field: static readonly System.Int32 kMaxRefineIterations
    static int _get_kMaxRefineIterations();
    // Set static field: static readonly System.Int32 kMaxRefineIterations
    static void _set_kMaxRefineIterations(int value);
    // Get static field: static readonly System.Int32 kMaxSmoothenIterations
    static int _get_kMaxSmoothenIterations();
    // Set static field: static readonly System.Int32 kMaxSmoothenIterations
    static void _set_kMaxSmoothenIterations(int value);
    // Get static field: static readonly System.Single kIncrementAreaFactor
    static float _get_kIncrementAreaFactor();
    // Set static field: static readonly System.Single kIncrementAreaFactor
    static void _set_kIncrementAreaFactor(float value);
    // static System.Void Copy(Unity.Collections.NativeArray`1<T> src, System.Int32 srcIndex, Unity.Collections.NativeArray`1<T> dst, System.Int32 dstIndex, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Copy(::Unity::Collections::NativeArray_1<T> src, int srcIndex, ::Unity::Collections::NativeArray_1<T> dst, int dstIndex, int length) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UTess::ModuleHandle::Copy");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering.Universal.UTess", "ModuleHandle", "Copy", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(srcIndex), ::il2cpp_utils::ExtractType(dst), ::il2cpp_utils::ExtractType(dstIndex), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, src, srcIndex, dst, dstIndex, length);
    }
    // static System.Void Copy(Unity.Collections.NativeArray`1<T> src, Unity.Collections.NativeArray`1<T> dst, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Copy(::Unity::Collections::NativeArray_1<T> src, ::Unity::Collections::NativeArray_1<T> dst, int length) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UTess::ModuleHandle::Copy");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering.Universal.UTess", "ModuleHandle", "Copy", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dst), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, src, dst, length);
    }
    // static System.Void InsertionSort(System.Void* array, System.Int32 lo, System.Int32 hi, U comp)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U>
    static void InsertionSort(void* array, int lo, int hi, U comp) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static_assert(std::is_convertible_v<std::remove_pointer_t<U>, ::System::Collections::Generic::IComparer_1<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UTess::ModuleHandle::InsertionSort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering.Universal.UTess", "ModuleHandle", "InsertionSort", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(lo), ::il2cpp_utils::ExtractType(hi), ::il2cpp_utils::ExtractType(comp)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, lo, hi, comp);
    }
    // static System.Int32 GetLower(Unity.Collections.NativeArray`1<T> values, System.Int32 count, U check, X condition)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U, class X>
    static int GetLower(::Unity::Collections::NativeArray_1<T> values, int count, U check, X condition) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static_assert(std::is_convertible_v<U, ::System::ValueType*>);
      static_assert(std::is_convertible_v<std::remove_pointer_t<X>, ::UnityEngine::Rendering::Universal::UTess::ICondition2_2<T, U>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UTess::ModuleHandle::GetLower");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering.Universal.UTess", "ModuleHandle", "GetLower", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<X>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(check), ::il2cpp_utils::ExtractType(condition)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<X>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, values, count, check, condition);
    }
    // static System.Int32 GetUpper(Unity.Collections.NativeArray`1<T> values, System.Int32 count, U check, X condition)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U, class X>
    static int GetUpper(::Unity::Collections::NativeArray_1<T> values, int count, U check, X condition) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static_assert(std::is_convertible_v<U, ::System::ValueType*>);
      static_assert(std::is_convertible_v<std::remove_pointer_t<X>, ::UnityEngine::Rendering::Universal::UTess::ICondition2_2<T, U>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UTess::ModuleHandle::GetUpper");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering.Universal.UTess", "ModuleHandle", "GetUpper", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<X>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(check), ::il2cpp_utils::ExtractType(condition)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<X>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, values, count, check, condition);
    }
    // static System.Int32 GetEqual(Unity.Collections.NativeArray`1<T> values, System.Int32 count, U check, X condition)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U, class X>
    static int GetEqual(::Unity::Collections::NativeArray_1<T> values, int count, U check, X condition) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static_assert(std::is_convertible_v<U, ::System::ValueType*>);
      static_assert(std::is_convertible_v<std::remove_pointer_t<X>, ::UnityEngine::Rendering::Universal::UTess::ICondition2_2<T, U>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UTess::ModuleHandle::GetEqual");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering.Universal.UTess", "ModuleHandle", "GetEqual", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<X>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(check), ::il2cpp_utils::ExtractType(condition)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<X>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, values, count, check, condition);
    }
    // static System.Single OrientFast(Unity.Mathematics.float2 a, Unity.Mathematics.float2 b, Unity.Mathematics.float2 c)
    // Offset: 0x531E96C
    static float OrientFast(::Unity::Mathematics::float2 a, ::Unity::Mathematics::float2 b, ::Unity::Mathematics::float2 c);
    // static System.Double OrientFastDouble(Unity.Mathematics.double2 a, Unity.Mathematics.double2 b, Unity.Mathematics.double2 c)
    // Offset: 0x5322020
    static double OrientFastDouble(::Unity::Mathematics::double2 a, ::Unity::Mathematics::double2 b, ::Unity::Mathematics::double2 c);
    // static UnityEngine.Rendering.Universal.UTess.UCircle CircumCircle(UnityEngine.Rendering.Universal.UTess.UTriangle tri)
    // Offset: 0x5322058
    static ::UnityEngine::Rendering::Universal::UTess::UCircle CircumCircle(::UnityEngine::Rendering::Universal::UTess::UTriangle tri);
    // static System.Boolean IsInsideCircle(UnityEngine.Rendering.Universal.UTess.UCircle c, Unity.Mathematics.float2 v)
    // Offset: 0x5322150
    static bool IsInsideCircle(::UnityEngine::Rendering::Universal::UTess::UCircle c, ::Unity::Mathematics::float2 v);
    // static System.Single TriangleArea(Unity.Mathematics.float2 va, Unity.Mathematics.float2 vb, Unity.Mathematics.float2 vc)
    // Offset: 0x53221E0
    static float TriangleArea(::Unity::Mathematics::float2 va, ::Unity::Mathematics::float2 vb, ::Unity::Mathematics::float2 vc);
    // static System.Single Sign(Unity.Mathematics.float2 p1, Unity.Mathematics.float2 p2, Unity.Mathematics.float2 p3)
    // Offset: 0x5322208
    static float Sign(::Unity::Mathematics::float2 p1, ::Unity::Mathematics::float2 p2, ::Unity::Mathematics::float2 p3);
    // static System.Boolean IsInsideTriangle(Unity.Mathematics.float2 pt, Unity.Mathematics.float2 v1, Unity.Mathematics.float2 v2, Unity.Mathematics.float2 v3)
    // Offset: 0x5322228
    static bool IsInsideTriangle(::Unity::Mathematics::float2 pt, ::Unity::Mathematics::float2 v1, ::Unity::Mathematics::float2 v2, ::Unity::Mathematics::float2 v3);
    // static System.Boolean IsInsideTriangleApproximate(Unity.Mathematics.float2 pt, Unity.Mathematics.float2 v1, Unity.Mathematics.float2 v2, Unity.Mathematics.float2 v3)
    // Offset: 0x5322344
    static bool IsInsideTriangleApproximate(::Unity::Mathematics::float2 pt, ::Unity::Mathematics::float2 v1, ::Unity::Mathematics::float2 v2, ::Unity::Mathematics::float2 v3);
    // static System.Boolean IsInsideCircle(Unity.Mathematics.float2 a, Unity.Mathematics.float2 b, Unity.Mathematics.float2 c, Unity.Mathematics.float2 p)
    // Offset: 0x531FF74
    static bool IsInsideCircle(::Unity::Mathematics::float2 a, ::Unity::Mathematics::float2 b, ::Unity::Mathematics::float2 c, ::Unity::Mathematics::float2 p);
    // static System.Void BuildTriangles(Unity.Collections.NativeArray`1<Unity.Mathematics.float2> vertices, System.Int32 vertexCount, Unity.Collections.NativeArray`1<System.Int32> indices, System.Int32 indexCount, ref Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.UTess.UTriangle> triangles, ref System.Int32 triangleCount, ref System.Single maxArea, ref System.Single avgArea, ref System.Single minArea)
    // Offset: 0x5322458
    static void BuildTriangles(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> vertices, int vertexCount, ::Unity::Collections::NativeArray_1<int> indices, int indexCount, ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UTriangle>> triangles, ByRef<int> triangleCount, ByRef<float> maxArea, ByRef<float> avgArea, ByRef<float> minArea);
    // static System.Void BuildTriangles(Unity.Collections.NativeArray`1<Unity.Mathematics.float2> vertices, System.Int32 vertexCount, Unity.Collections.NativeArray`1<System.Int32> indices, System.Int32 indexCount, ref Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.UTess.UTriangle> triangles, ref System.Int32 triangleCount, ref System.Single maxArea, ref System.Single avgArea, ref System.Single minArea, ref System.Single maxEdge, ref System.Single avgEdge, ref System.Single minEdge)
    // Offset: 0x5322658
    static void BuildTriangles(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> vertices, int vertexCount, ::Unity::Collections::NativeArray_1<int> indices, int indexCount, ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UTriangle>> triangles, ByRef<int> triangleCount, ByRef<float> maxArea, ByRef<float> avgArea, ByRef<float> minArea, ByRef<float> maxEdge, ByRef<float> avgEdge, ByRef<float> minEdge);
    // static System.Void BuildTrianglesAndEdges(Unity.Collections.NativeArray`1<Unity.Mathematics.float2> vertices, System.Int32 vertexCount, Unity.Collections.NativeArray`1<System.Int32> indices, System.Int32 indexCount, ref Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.UTess.UTriangle> triangles, ref System.Int32 triangleCount, ref Unity.Collections.NativeArray`1<Unity.Mathematics.int4> delaEdges, ref System.Int32 delaEdgeCount, ref System.Single maxArea, ref System.Single avgArea, ref System.Single minArea)
    // Offset: 0x5322A50
    static void BuildTrianglesAndEdges(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> vertices, int vertexCount, ::Unity::Collections::NativeArray_1<int> indices, int indexCount, ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UTriangle>> triangles, ByRef<int> triangleCount, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int4>> delaEdges, ByRef<int> delaEdgeCount, ByRef<float> maxArea, ByRef<float> avgArea, ByRef<float> minArea);
    // static private System.Void CopyGraph(Unity.Collections.NativeArray`1<Unity.Mathematics.float2> srcPoints, System.Int32 srcPointCount, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float2> dstPoints, ref System.Int32 dstPointCount, Unity.Collections.NativeArray`1<Unity.Mathematics.int2> srcEdges, System.Int32 srcEdgeCount, ref Unity.Collections.NativeArray`1<Unity.Mathematics.int2> dstEdges, ref System.Int32 dstEdgeCount)
    // Offset: 0x5322CD0
    static void CopyGraph(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> srcPoints, int srcPointCount, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>> dstPoints, ByRef<int> dstPointCount, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2> srcEdges, int srcEdgeCount, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>> dstEdges, ByRef<int> dstEdgeCount);
    // static private System.Void CopyGeometry(Unity.Collections.NativeArray`1<System.Int32> srcIndices, System.Int32 srcIndexCount, ref Unity.Collections.NativeArray`1<System.Int32> dstIndices, ref System.Int32 dstIndexCount, Unity.Collections.NativeArray`1<Unity.Mathematics.float2> srcVertices, System.Int32 srcVertexCount, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float2> dstVertices, ref System.Int32 dstVertexCount)
    // Offset: 0x5322DCC
    static void CopyGeometry(::Unity::Collections::NativeArray_1<int> srcIndices, int srcIndexCount, ByRef<::Unity::Collections::NativeArray_1<int>> dstIndices, ByRef<int> dstIndexCount, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> srcVertices, int srcVertexCount, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>> dstVertices, ByRef<int> dstVertexCount);
    // static private System.Void TransferOutput(Unity.Collections.NativeArray`1<Unity.Mathematics.int2> srcEdges, System.Int32 srcEdgeCount, ref Unity.Collections.NativeArray`1<Unity.Mathematics.int2> dstEdges, ref System.Int32 dstEdgeCount, Unity.Collections.NativeArray`1<System.Int32> srcIndices, System.Int32 srcIndexCount, ref Unity.Collections.NativeArray`1<System.Int32> dstIndices, ref System.Int32 dstIndexCount, Unity.Collections.NativeArray`1<Unity.Mathematics.float2> srcVertices, System.Int32 srcVertexCount, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float2> dstVertices, ref System.Int32 dstVertexCount)
    // Offset: 0x5322EC8
    static void TransferOutput(::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2> srcEdges, int srcEdgeCount, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>> dstEdges, ByRef<int> dstEdgeCount, ::Unity::Collections::NativeArray_1<int> srcIndices, int srcIndexCount, ByRef<::Unity::Collections::NativeArray_1<int>> dstIndices, ByRef<int> dstIndexCount, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> srcVertices, int srcVertexCount, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>> dstVertices, ByRef<int> dstVertexCount);
    // static private System.Void GraphConditioner(Unity.Collections.NativeArray`1<Unity.Mathematics.float2> points, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float2> pgPoints, ref System.Int32 pgPointCount, ref Unity.Collections.NativeArray`1<Unity.Mathematics.int2> pgEdges, ref System.Int32 pgEdgeCount, System.Boolean resetTopology)
    // Offset: 0x5323024
    static void GraphConditioner(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> points, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>> pgPoints, ByRef<int> pgPointCount, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>> pgEdges, ByRef<int> pgEdgeCount, bool resetTopology);
    // static private System.Void Reorder(System.Int32 startVertexCount, System.Int32 index, ref Unity.Collections.NativeArray`1<System.Int32> indices, ref System.Int32 indexCount, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float2> vertices, ref System.Int32 vertexCount)
    // Offset: 0x53232B8
    static void Reorder(int startVertexCount, int index, ByRef<::Unity::Collections::NativeArray_1<int>> indices, ByRef<int> indexCount, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>> vertices, ByRef<int> vertexCount);
    // static System.Void VertexCleanupConditioner(System.Int32 startVertexCount, ref Unity.Collections.NativeArray`1<System.Int32> indices, ref System.Int32 indexCount, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float2> vertices, ref System.Int32 vertexCount)
    // Offset: 0x5323338
    static void VertexCleanupConditioner(int startVertexCount, ByRef<::Unity::Collections::NativeArray_1<int>> indices, ByRef<int> indexCount, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>> vertices, ByRef<int> vertexCount);
    // static public Unity.Mathematics.float4 ConvexQuad(Unity.Collections.Allocator allocator, Unity.Collections.NativeArray`1<Unity.Mathematics.float2> points, Unity.Collections.NativeArray`1<Unity.Mathematics.int2> edges, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float2> outVertices, ref System.Int32 outVertexCount, ref Unity.Collections.NativeArray`1<System.Int32> outIndices, ref System.Int32 outIndexCount, ref Unity.Collections.NativeArray`1<Unity.Mathematics.int2> outEdges, ref System.Int32 outEdgeCount)
    // Offset: 0x53233DC
    static ::Unity::Mathematics::float4 ConvexQuad(::Unity::Collections::Allocator allocator, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> points, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2> edges, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>> outVertices, ByRef<int> outVertexCount, ByRef<::Unity::Collections::NativeArray_1<int>> outIndices, ByRef<int> outIndexCount, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>> outEdges, ByRef<int> outEdgeCount);
    // static public Unity.Mathematics.float4 Tessellate(Unity.Collections.Allocator allocator, Unity.Collections.NativeArray`1<Unity.Mathematics.float2> points, Unity.Collections.NativeArray`1<Unity.Mathematics.int2> edges, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float2> outVertices, ref System.Int32 outVertexCount, ref Unity.Collections.NativeArray`1<System.Int32> outIndices, ref System.Int32 outIndexCount, ref Unity.Collections.NativeArray`1<Unity.Mathematics.int2> outEdges, ref System.Int32 outEdgeCount)
    // Offset: 0x53235DC
    static ::Unity::Mathematics::float4 Tessellate(::Unity::Collections::Allocator allocator, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> points, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2> edges, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>> outVertices, ByRef<int> outVertexCount, ByRef<::Unity::Collections::NativeArray_1<int>> outIndices, ByRef<int> outIndexCount, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>> outEdges, ByRef<int> outEdgeCount);
    // static public Unity.Mathematics.float4 Subdivide(Unity.Collections.Allocator allocator, Unity.Collections.NativeArray`1<Unity.Mathematics.float2> points, Unity.Collections.NativeArray`1<Unity.Mathematics.int2> edges, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float2> outVertices, ref System.Int32 outVertexCount, ref Unity.Collections.NativeArray`1<System.Int32> outIndices, ref System.Int32 outIndexCount, ref Unity.Collections.NativeArray`1<Unity.Mathematics.int2> outEdges, ref System.Int32 outEdgeCount, System.Single areaFactor, System.Single targetArea, System.Int32 refineIterations, System.Int32 smoothenIterations)
    // Offset: 0x53239BC
    static ::Unity::Mathematics::float4 Subdivide(::Unity::Collections::Allocator allocator, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> points, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2> edges, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>> outVertices, ByRef<int> outVertexCount, ByRef<::Unity::Collections::NativeArray_1<int>> outIndices, ByRef<int> outIndexCount, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>> outEdges, ByRef<int> outEdgeCount, float areaFactor, float targetArea, int refineIterations, int smoothenIterations);
    // static private System.Void .cctor()
    // Offset: 0x53242DC
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.UTess.ModuleHandle
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::Copy
// Il2CppName: Copy
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::Copy
// Il2CppName: Copy
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::InsertionSort
// Il2CppName: InsertionSort
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::GetLower
// Il2CppName: GetLower
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::GetUpper
// Il2CppName: GetUpper
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::GetEqual
// Il2CppName: GetEqual
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::OrientFast
// Il2CppName: OrientFast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float2, ::Unity::Mathematics::float2, ::Unity::Mathematics::float2)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::OrientFast)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "OrientFast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::OrientFastDouble
// Il2CppName: OrientFastDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::Unity::Mathematics::double2, ::Unity::Mathematics::double2, ::Unity::Mathematics::double2)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::OrientFastDouble)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "double2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "double2")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "double2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "OrientFastDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::CircumCircle
// Il2CppName: CircumCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::UTess::UCircle (*)(::UnityEngine::Rendering::Universal::UTess::UTriangle)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::CircumCircle)> {
  static const MethodInfo* get() {
    static auto* tri = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.UTess", "UTriangle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "CircumCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tri});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::IsInsideCircle
// Il2CppName: IsInsideCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::Universal::UTess::UCircle, ::Unity::Mathematics::float2)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::IsInsideCircle)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.UTess", "UCircle")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "IsInsideCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, v});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::TriangleArea
// Il2CppName: TriangleArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float2, ::Unity::Mathematics::float2, ::Unity::Mathematics::float2)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::TriangleArea)> {
  static const MethodInfo* get() {
    static auto* va = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* vb = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* vc = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "TriangleArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{va, vb, vc});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::Sign
// Il2CppName: Sign
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float2, ::Unity::Mathematics::float2, ::Unity::Mathematics::float2)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::Sign)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "Sign", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2, p3});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::IsInsideTriangle
// Il2CppName: IsInsideTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Unity::Mathematics::float2, ::Unity::Mathematics::float2, ::Unity::Mathematics::float2, ::Unity::Mathematics::float2)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::IsInsideTriangle)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* v1 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* v3 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "IsInsideTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, v1, v2, v3});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::IsInsideTriangleApproximate
// Il2CppName: IsInsideTriangleApproximate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Unity::Mathematics::float2, ::Unity::Mathematics::float2, ::Unity::Mathematics::float2, ::Unity::Mathematics::float2)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::IsInsideTriangleApproximate)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* v1 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* v3 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "IsInsideTriangleApproximate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, v1, v2, v3});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::IsInsideCircle
// Il2CppName: IsInsideCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Unity::Mathematics::float2, ::Unity::Mathematics::float2, ::Unity::Mathematics::float2, ::Unity::Mathematics::float2)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::IsInsideCircle)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "IsInsideCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, p});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::BuildTriangles
// Il2CppName: BuildTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, int, ::Unity::Collections::NativeArray_1<int>, int, ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UTriangle>>, ByRef<int>, ByRef<float>, ByRef<float>, ByRef<float>)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::BuildTriangles)> {
  static const MethodInfo* get() {
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* indexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.UTess", "UTriangle")})->this_arg;
    static auto* triangleCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maxArea = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* avgArea = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* minArea = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "BuildTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, vertexCount, indices, indexCount, triangles, triangleCount, maxArea, avgArea, minArea});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::BuildTriangles
// Il2CppName: BuildTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, int, ::Unity::Collections::NativeArray_1<int>, int, ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UTriangle>>, ByRef<int>, ByRef<float>, ByRef<float>, ByRef<float>, ByRef<float>, ByRef<float>, ByRef<float>)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::BuildTriangles)> {
  static const MethodInfo* get() {
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* indexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.UTess", "UTriangle")})->this_arg;
    static auto* triangleCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maxArea = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* avgArea = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* minArea = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* maxEdge = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* avgEdge = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* minEdge = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "BuildTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, vertexCount, indices, indexCount, triangles, triangleCount, maxArea, avgArea, minArea, maxEdge, avgEdge, minEdge});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::BuildTrianglesAndEdges
// Il2CppName: BuildTrianglesAndEdges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, int, ::Unity::Collections::NativeArray_1<int>, int, ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::UTess::UTriangle>>, ByRef<int>, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int4>>, ByRef<int>, ByRef<float>, ByRef<float>, ByRef<float>)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::BuildTrianglesAndEdges)> {
  static const MethodInfo* get() {
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* indexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal.UTess", "UTriangle")})->this_arg;
    static auto* triangleCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* delaEdges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int4")})->this_arg;
    static auto* delaEdgeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maxArea = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* avgArea = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* minArea = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "BuildTrianglesAndEdges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, vertexCount, indices, indexCount, triangles, triangleCount, delaEdges, delaEdgeCount, maxArea, avgArea, minArea});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::CopyGraph
// Il2CppName: CopyGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, int, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>>, ByRef<int>, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>, int, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>>, ByRef<int>)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::CopyGraph)> {
  static const MethodInfo* get() {
    static auto* srcPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* srcPointCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dstPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->this_arg;
    static auto* dstPointCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* srcEdges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->byval_arg;
    static auto* srcEdgeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dstEdges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->this_arg;
    static auto* dstEdgeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "CopyGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{srcPoints, srcPointCount, dstPoints, dstPointCount, srcEdges, srcEdgeCount, dstEdges, dstEdgeCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::CopyGeometry
// Il2CppName: CopyGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::NativeArray_1<int>, int, ByRef<::Unity::Collections::NativeArray_1<int>>, ByRef<int>, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, int, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>>, ByRef<int>)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::CopyGeometry)> {
  static const MethodInfo* get() {
    static auto* srcIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* srcIndexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dstIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    static auto* dstIndexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* srcVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* srcVertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dstVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->this_arg;
    static auto* dstVertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "CopyGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{srcIndices, srcIndexCount, dstIndices, dstIndexCount, srcVertices, srcVertexCount, dstVertices, dstVertexCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::TransferOutput
// Il2CppName: TransferOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>, int, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>>, ByRef<int>, ::Unity::Collections::NativeArray_1<int>, int, ByRef<::Unity::Collections::NativeArray_1<int>>, ByRef<int>, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, int, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>>, ByRef<int>)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::TransferOutput)> {
  static const MethodInfo* get() {
    static auto* srcEdges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->byval_arg;
    static auto* srcEdgeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dstEdges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->this_arg;
    static auto* dstEdgeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* srcIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* srcIndexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dstIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    static auto* dstIndexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* srcVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* srcVertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dstVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->this_arg;
    static auto* dstVertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "TransferOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{srcEdges, srcEdgeCount, dstEdges, dstEdgeCount, srcIndices, srcIndexCount, dstIndices, dstIndexCount, srcVertices, srcVertexCount, dstVertices, dstVertexCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::GraphConditioner
// Il2CppName: GraphConditioner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>>, ByRef<int>, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>>, ByRef<int>, bool)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::GraphConditioner)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* pgPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->this_arg;
    static auto* pgPointCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* pgEdges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->this_arg;
    static auto* pgEdgeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* resetTopology = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "GraphConditioner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, pgPoints, pgPointCount, pgEdges, pgEdgeCount, resetTopology});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::Reorder
// Il2CppName: Reorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int, ByRef<::Unity::Collections::NativeArray_1<int>>, ByRef<int>, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>>, ByRef<int>)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::Reorder)> {
  static const MethodInfo* get() {
    static auto* startVertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    static auto* indexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->this_arg;
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "Reorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startVertexCount, index, indices, indexCount, vertices, vertexCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::VertexCleanupConditioner
// Il2CppName: VertexCleanupConditioner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ByRef<::Unity::Collections::NativeArray_1<int>>, ByRef<int>, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>>, ByRef<int>)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::VertexCleanupConditioner)> {
  static const MethodInfo* get() {
    static auto* startVertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    static auto* indexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->this_arg;
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "VertexCleanupConditioner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startVertexCount, indices, indexCount, vertices, vertexCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::ConvexQuad
// Il2CppName: ConvexQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (*)(::Unity::Collections::Allocator, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>>, ByRef<int>, ByRef<::Unity::Collections::NativeArray_1<int>>, ByRef<int>, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>>, ByRef<int>)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::ConvexQuad)> {
  static const MethodInfo* get() {
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "Allocator")->byval_arg;
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* edges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->byval_arg;
    static auto* outVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->this_arg;
    static auto* outVertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* outIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    static auto* outIndexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* outEdges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->this_arg;
    static auto* outEdgeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "ConvexQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allocator, points, edges, outVertices, outVertexCount, outIndices, outIndexCount, outEdges, outEdgeCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::Tessellate
// Il2CppName: Tessellate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (*)(::Unity::Collections::Allocator, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>>, ByRef<int>, ByRef<::Unity::Collections::NativeArray_1<int>>, ByRef<int>, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>>, ByRef<int>)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::Tessellate)> {
  static const MethodInfo* get() {
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "Allocator")->byval_arg;
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* edges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->byval_arg;
    static auto* outVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->this_arg;
    static auto* outVertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* outIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    static auto* outIndexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* outEdges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->this_arg;
    static auto* outEdgeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "Tessellate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allocator, points, edges, outVertices, outVertexCount, outIndices, outIndexCount, outEdges, outEdgeCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::Subdivide
// Il2CppName: Subdivide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (*)(::Unity::Collections::Allocator, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>>, ByRef<int>, ByRef<::Unity::Collections::NativeArray_1<int>>, ByRef<int>, ByRef<::Unity::Collections::NativeArray_1<::Unity::Mathematics::int2>>, ByRef<int>, float, float, int, int)>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::Subdivide)> {
  static const MethodInfo* get() {
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "Allocator")->byval_arg;
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->byval_arg;
    static auto* edges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->byval_arg;
    static auto* outVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")})->this_arg;
    static auto* outVertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* outIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    static auto* outIndexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* outEdges = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")})->this_arg;
    static auto* outEdgeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* areaFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetArea = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* refineIterations = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* smoothenIterations = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), "Subdivide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allocator, points, edges, outVertices, outVertexCount, outIndices, outIndexCount, outEdges, outEdgeCount, areaFactor, targetArea, refineIterations, smoothenIterations});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UTess::ModuleHandle::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::UTess::ModuleHandle::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UTess::ModuleHandle), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
