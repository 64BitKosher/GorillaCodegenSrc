// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.UniversalRenderer
#include "UnityEngine/Rendering/Universal/UniversalRenderer.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Rendering.Universal.RenderPassEvent
#include "UnityEngine/Rendering/Universal/RenderPassEvent.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UniversalRenderer::RenderPassInputSummary, "UnityEngine.Rendering.Universal", "UniversalRenderer/RenderPassInputSummary");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.UniversalRenderer/RenderPassInputSummary
  // [TokenAttribute] Offset: FFFFFFFF
  struct UniversalRenderer::RenderPassInputSummary/*, public ::System::ValueType*/ {
    public:
    public:
    // System.Boolean requiresDepthTexture
    // Size: 0x1
    // Offset: 0x0
    bool requiresDepthTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean requiresDepthPrepass
    // Size: 0x1
    // Offset: 0x1
    bool requiresDepthPrepass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean requiresNormalsTexture
    // Size: 0x1
    // Offset: 0x2
    bool requiresNormalsTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean requiresColorTexture
    // Size: 0x1
    // Offset: 0x3
    bool requiresColorTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean requiresColorTextureCreated
    // Size: 0x1
    // Offset: 0x4
    bool requiresColorTextureCreated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean requiresMotionVectors
    // Size: 0x1
    // Offset: 0x5
    bool requiresMotionVectors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: requiresMotionVectors and: requiresDepthNormalAtEvent
    char __padding5[0x2] = {};
    // UnityEngine.Rendering.Universal.RenderPassEvent requiresDepthNormalAtEvent
    // Size: 0x4
    // Offset: 0x8
    ::UnityEngine::Rendering::Universal::RenderPassEvent requiresDepthNormalAtEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::RenderPassEvent) == 0x4);
    // UnityEngine.Rendering.Universal.RenderPassEvent requiresDepthTextureEarliestEvent
    // Size: 0x4
    // Offset: 0xC
    ::UnityEngine::Rendering::Universal::RenderPassEvent requiresDepthTextureEarliestEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::RenderPassEvent) == 0x4);
    public:
    // Creating value type constructor for type: RenderPassInputSummary
    constexpr RenderPassInputSummary(bool requiresDepthTexture_ = {}, bool requiresDepthPrepass_ = {}, bool requiresNormalsTexture_ = {}, bool requiresColorTexture_ = {}, bool requiresColorTextureCreated_ = {}, bool requiresMotionVectors_ = {}, ::UnityEngine::Rendering::Universal::RenderPassEvent requiresDepthNormalAtEvent_ = {}, ::UnityEngine::Rendering::Universal::RenderPassEvent requiresDepthTextureEarliestEvent_ = {}) noexcept : requiresDepthTexture{requiresDepthTexture_}, requiresDepthPrepass{requiresDepthPrepass_}, requiresNormalsTexture{requiresNormalsTexture_}, requiresColorTexture{requiresColorTexture_}, requiresColorTextureCreated{requiresColorTextureCreated_}, requiresMotionVectors{requiresMotionVectors_}, requiresDepthNormalAtEvent{requiresDepthNormalAtEvent_}, requiresDepthTextureEarliestEvent{requiresDepthTextureEarliestEvent_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.Boolean requiresDepthTexture
    [[deprecated("Use field access instead!")]] bool& dyn_requiresDepthTexture();
    // Get instance field reference: System.Boolean requiresDepthPrepass
    [[deprecated("Use field access instead!")]] bool& dyn_requiresDepthPrepass();
    // Get instance field reference: System.Boolean requiresNormalsTexture
    [[deprecated("Use field access instead!")]] bool& dyn_requiresNormalsTexture();
    // Get instance field reference: System.Boolean requiresColorTexture
    [[deprecated("Use field access instead!")]] bool& dyn_requiresColorTexture();
    // Get instance field reference: System.Boolean requiresColorTextureCreated
    [[deprecated("Use field access instead!")]] bool& dyn_requiresColorTextureCreated();
    // Get instance field reference: System.Boolean requiresMotionVectors
    [[deprecated("Use field access instead!")]] bool& dyn_requiresMotionVectors();
    // Get instance field reference: UnityEngine.Rendering.Universal.RenderPassEvent requiresDepthNormalAtEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::RenderPassEvent& dyn_requiresDepthNormalAtEvent();
    // Get instance field reference: UnityEngine.Rendering.Universal.RenderPassEvent requiresDepthTextureEarliestEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::RenderPassEvent& dyn_requiresDepthTextureEarliestEvent();
  }; // UnityEngine.Rendering.Universal.UniversalRenderer/RenderPassInputSummary
  #pragma pack(pop)
  static check_size<sizeof(UniversalRenderer::RenderPassInputSummary), 12 + sizeof(::UnityEngine::Rendering::Universal::RenderPassEvent)> __UnityEngine_Rendering_Universal_UniversalRenderer_RenderPassInputSummarySizeCheck;
  static_assert(sizeof(UniversalRenderer::RenderPassInputSummary) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
