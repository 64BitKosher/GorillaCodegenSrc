// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalSubDrawCall
  struct DecalSubDrawCall;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DecalSubDrawCall, "UnityEngine.Rendering.Universal", "DecalSubDrawCall");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.DecalSubDrawCall
  // [TokenAttribute] Offset: FFFFFFFF
  struct DecalSubDrawCall/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 start
    // Size: 0x4
    // Offset: 0x0
    int start;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 end
    // Size: 0x4
    // Offset: 0x4
    int end;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: DecalSubDrawCall
    constexpr DecalSubDrawCall(int start_ = {}, int end_ = {}) noexcept : start{start_}, end{end_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 start
    [[deprecated("Use field access instead!")]] int& dyn_start();
    // Get instance field reference: public System.Int32 end
    [[deprecated("Use field access instead!")]] int& dyn_end();
    // public System.Int32 get_count()
    // Offset: 0x52A2C6C
    int get_count();
  }; // UnityEngine.Rendering.Universal.DecalSubDrawCall
  #pragma pack(pop)
  static check_size<sizeof(DecalSubDrawCall), 4 + sizeof(int)> __UnityEngine_Rendering_Universal_DecalSubDrawCallSizeCheck;
  static_assert(sizeof(DecalSubDrawCall) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalSubDrawCall::get_count
// Il2CppName: get_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::DecalSubDrawCall::*)()>(&UnityEngine::Rendering::Universal::DecalSubDrawCall::get_count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalSubDrawCall), "get_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
