// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.PolyNode
#include "UnityEngine/Rendering/Universal/PolyNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: PolyTree
  class PolyTree;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::PolyTree);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::PolyTree*, "UnityEngine.Rendering.Universal", "PolyTree");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.PolyTree
  // [TokenAttribute] Offset: FFFFFFFF
  class PolyTree : public ::UnityEngine::Rendering::Universal::PolyNode {
    public:
    // Writing base type padding for base size: 0x39 to desired offset: 0x40
    char ___base_padding[0x7] = {};
    public:
    // System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.PolyNode> m_AllPolys
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::PolyNode*>* m_AllPolys;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::PolyNode*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::PolyNode*>*
    constexpr operator ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::PolyNode*>*() const noexcept {
      return m_AllPolys;
    }
    // Get instance field reference: System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.PolyNode> m_AllPolys
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::PolyNode*>*& dyn_m_AllPolys();
    // public System.Void Clear()
    // Offset: 0x526C2F0
    void Clear();
    // public UnityEngine.Rendering.Universal.PolyNode GetFirst()
    // Offset: 0x526C3D8
    ::UnityEngine::Rendering::Universal::PolyNode* GetFirst();
    // public System.Int32 get_Total()
    // Offset: 0x526C454
    int get_Total();
    // public System.Void .ctor()
    // Offset: 0x526C4FC
    // Implemented from: UnityEngine.Rendering.Universal.PolyNode
    // Base method: System.Void PolyNode::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PolyTree* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::PolyTree::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PolyTree*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.PolyTree
  #pragma pack(pop)
  static check_size<sizeof(PolyTree), 64 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Universal::PolyNode*>*)> __UnityEngine_Rendering_Universal_PolyTreeSizeCheck;
  static_assert(sizeof(PolyTree) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PolyTree::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::PolyTree::*)()>(&UnityEngine::Rendering::Universal::PolyTree::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PolyTree*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PolyTree::GetFirst
// Il2CppName: GetFirst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::PolyNode* (UnityEngine::Rendering::Universal::PolyTree::*)()>(&UnityEngine::Rendering::Universal::PolyTree::GetFirst)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PolyTree*), "GetFirst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PolyTree::get_Total
// Il2CppName: get_Total
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::PolyTree::*)()>(&UnityEngine::Rendering::Universal::PolyTree::get_Total)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::PolyTree*), "get_Total", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::PolyTree::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
