// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.TemporalAA
#include "UnityEngine/Rendering/Universal/TemporalAA.hpp"
// Including type: UnityEngine.Rendering.Universal.TemporalAAQuality
#include "UnityEngine/Rendering/Universal/TemporalAAQuality.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::TemporalAA::Settings, "UnityEngine.Rendering.Universal", "TemporalAA/Settings");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.TemporalAA/Settings
  // [TokenAttribute] Offset: FFFFFFFF
  struct TemporalAA::Settings/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Rendering.Universal.TemporalAAQuality quality
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::Rendering::Universal::TemporalAAQuality quality;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::TemporalAAQuality) == 0x4);
    // public System.Single frameInfluence
    // Size: 0x4
    // Offset: 0x4
    float frameInfluence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single jitterScale
    // Size: 0x4
    // Offset: 0x8
    float jitterScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single mipBias
    // Size: 0x4
    // Offset: 0xC
    float mipBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single varianceClampScale
    // Size: 0x4
    // Offset: 0x10
    float varianceClampScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single contrastAdaptiveSharpening
    // Size: 0x4
    // Offset: 0x14
    float contrastAdaptiveSharpening;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 resetHistoryFrames
    // Size: 0x4
    // Offset: 0x18
    int resetHistoryFrames;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 jitterFrameCountOffset
    // Size: 0x4
    // Offset: 0x1C
    int jitterFrameCountOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Settings
    constexpr Settings(::UnityEngine::Rendering::Universal::TemporalAAQuality quality_ = {}, float frameInfluence_ = {}, float jitterScale_ = {}, float mipBias_ = {}, float varianceClampScale_ = {}, float contrastAdaptiveSharpening_ = {}, int resetHistoryFrames_ = {}, int jitterFrameCountOffset_ = {}) noexcept : quality{quality_}, frameInfluence{frameInfluence_}, jitterScale{jitterScale_}, mipBias{mipBias_}, varianceClampScale{varianceClampScale_}, contrastAdaptiveSharpening{contrastAdaptiveSharpening_}, resetHistoryFrames{resetHistoryFrames_}, jitterFrameCountOffset{jitterFrameCountOffset_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Rendering.Universal.TemporalAAQuality quality
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::TemporalAAQuality& dyn_quality();
    // Get instance field reference: public System.Single frameInfluence
    [[deprecated("Use field access instead!")]] float& dyn_frameInfluence();
    // Get instance field reference: public System.Single jitterScale
    [[deprecated("Use field access instead!")]] float& dyn_jitterScale();
    // Get instance field reference: public System.Single mipBias
    [[deprecated("Use field access instead!")]] float& dyn_mipBias();
    // Get instance field reference: public System.Single varianceClampScale
    [[deprecated("Use field access instead!")]] float& dyn_varianceClampScale();
    // Get instance field reference: public System.Single contrastAdaptiveSharpening
    [[deprecated("Use field access instead!")]] float& dyn_contrastAdaptiveSharpening();
    // Get instance field reference: public System.Int32 resetHistoryFrames
    [[deprecated("Use field access instead!")]] int& dyn_resetHistoryFrames();
    // Get instance field reference: public System.Int32 jitterFrameCountOffset
    [[deprecated("Use field access instead!")]] int& dyn_jitterFrameCountOffset();
    // static public UnityEngine.Rendering.Universal.TemporalAA/Settings Create()
    // Offset: 0x52DFDBC
    static ::UnityEngine::Rendering::Universal::TemporalAA::Settings Create();
  }; // UnityEngine.Rendering.Universal.TemporalAA/Settings
  #pragma pack(pop)
  static check_size<sizeof(TemporalAA::Settings), 28 + sizeof(int)> __UnityEngine_Rendering_Universal_TemporalAA_SettingsSizeCheck;
  static_assert(sizeof(TemporalAA::Settings) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::TemporalAA::Settings::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::TemporalAA::Settings (*)()>(&UnityEngine::Rendering::Universal::TemporalAA::Settings::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::TemporalAA::Settings), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
