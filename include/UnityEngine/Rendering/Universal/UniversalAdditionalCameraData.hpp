// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: UnityEngine.Rendering.IAdditionalData
#include "UnityEngine/Rendering/IAdditionalData.hpp"
// Including type: UnityEngine.Rendering.Universal.CameraOverrideOption
#include "UnityEngine/Rendering/Universal/CameraOverrideOption.hpp"
// Including type: UnityEngine.Rendering.Universal.CameraRenderType
#include "UnityEngine/Rendering/Universal/CameraRenderType.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode
#include "UnityEngine/Rendering/Universal/VolumeFrameworkUpdateMode.hpp"
// Including type: UnityEngine.Rendering.Universal.AntialiasingMode
#include "UnityEngine/Rendering/Universal/AntialiasingMode.hpp"
// Including type: UnityEngine.Rendering.Universal.AntialiasingQuality
#include "UnityEngine/Rendering/Universal/AntialiasingQuality.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Rendering.Universal.TemporalAA/Settings
#include "UnityEngine/Rendering/Universal/TemporalAA_Settings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: MotionVectorsPersistentData
  class MotionVectorsPersistentData;
  // Forward declaring type: TaaPersistentData
  class TaaPersistentData;
  // Forward declaring type: ScriptableRenderer
  class ScriptableRenderer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VolumeStack
  class VolumeStack;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: UniversalAdditionalCameraData
  class UniversalAdditionalCameraData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*, "UnityEngine.Rendering.Universal", "UniversalAdditionalCameraData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0xC8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.UniversalAdditionalCameraData
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [ImageEffectAllowedInSceneView] Offset: FFFFFFFF
  class UniversalAdditionalCameraData : public ::UnityEngine::MonoBehaviour/*, public ::UnityEngine::ISerializationCallbackReceiver, public ::UnityEngine::Rendering::IAdditionalData*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::$$c
    class $$c;
    public:
    // private System.Boolean m_RenderShadows
    // Size: 0x1
    // Offset: 0x20
    bool m_RenderShadows;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RenderShadows and: m_RequiresDepthTextureOption
    char __padding0[0x3] = {};
    // private UnityEngine.Rendering.Universal.CameraOverrideOption m_RequiresDepthTextureOption
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::Rendering::Universal::CameraOverrideOption m_RequiresDepthTextureOption;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::CameraOverrideOption) == 0x4);
    // private UnityEngine.Rendering.Universal.CameraOverrideOption m_RequiresOpaqueTextureOption
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::Rendering::Universal::CameraOverrideOption m_RequiresOpaqueTextureOption;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::CameraOverrideOption) == 0x4);
    // private UnityEngine.Rendering.Universal.CameraRenderType m_CameraType
    // Size: 0x4
    // Offset: 0x2C
    ::UnityEngine::Rendering::Universal::CameraRenderType m_CameraType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::CameraRenderType) == 0x4);
    // private System.Collections.Generic.List`1<UnityEngine.Camera> m_Cameras
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::Camera*>* m_Cameras;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Camera*>*) == 0x8);
    // private System.Int32 m_RendererIndex
    // Size: 0x4
    // Offset: 0x38
    int m_RendererIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.LayerMask m_VolumeLayerMask
    // Size: 0x4
    // Offset: 0x3C
    ::UnityEngine::LayerMask m_VolumeLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.Transform m_VolumeTrigger
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* m_VolumeTrigger;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode m_VolumeFrameworkUpdateModeOption
    // Size: 0x4
    // Offset: 0x48
    ::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode m_VolumeFrameworkUpdateModeOption;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode) == 0x4);
    // private System.Boolean m_RenderPostProcessing
    // Size: 0x1
    // Offset: 0x4C
    bool m_RenderPostProcessing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RenderPostProcessing and: m_Antialiasing
    char __padding9[0x3] = {};
    // private UnityEngine.Rendering.Universal.AntialiasingMode m_Antialiasing
    // Size: 0x4
    // Offset: 0x50
    ::UnityEngine::Rendering::Universal::AntialiasingMode m_Antialiasing;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::AntialiasingMode) == 0x4);
    // private UnityEngine.Rendering.Universal.AntialiasingQuality m_AntialiasingQuality
    // Size: 0x4
    // Offset: 0x54
    ::UnityEngine::Rendering::Universal::AntialiasingQuality m_AntialiasingQuality;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::AntialiasingQuality) == 0x4);
    // private System.Boolean m_StopNaN
    // Size: 0x1
    // Offset: 0x58
    bool m_StopNaN;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_Dithering
    // Size: 0x1
    // Offset: 0x59
    bool m_Dithering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ClearDepth
    // Size: 0x1
    // Offset: 0x5A
    bool m_ClearDepth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_AllowXRRendering
    // Size: 0x1
    // Offset: 0x5B
    bool m_AllowXRRendering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_AllowHDROutput
    // Size: 0x1
    // Offset: 0x5C
    bool m_AllowHDROutput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_UseScreenCoordOverride
    // Size: 0x1
    // Offset: 0x5D
    bool m_UseScreenCoordOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UseScreenCoordOverride and: m_ScreenSizeOverride
    char __padding17[0x2] = {};
    // private UnityEngine.Vector4 m_ScreenSizeOverride
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Vector4 m_ScreenSizeOverride;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private UnityEngine.Vector4 m_ScreenCoordScaleBias
    // Size: 0x10
    // Offset: 0x70
    ::UnityEngine::Vector4 m_ScreenCoordScaleBias;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private UnityEngine.Camera m_Camera
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Camera* m_Camera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private System.Boolean m_RequiresDepthTexture
    // Size: 0x1
    // Offset: 0x88
    bool m_RequiresDepthTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_RequiresColorTexture
    // Size: 0x1
    // Offset: 0x89
    bool m_RequiresColorTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RequiresColorTexture and: m_Version
    char __padding22[0x2] = {};
    // private System.Single m_Version
    // Size: 0x4
    // Offset: 0x8C
    float m_Version;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Rendering.Universal.MotionVectorsPersistentData m_MotionVectorsPersistentData
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Rendering::Universal::MotionVectorsPersistentData* m_MotionVectorsPersistentData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::MotionVectorsPersistentData*) == 0x8);
    // private UnityEngine.Rendering.Universal.TaaPersistentData m_TaaPersistentData
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Rendering::Universal::TaaPersistentData* m_TaaPersistentData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::TaaPersistentData*) == 0x8);
    // UnityEngine.Rendering.Universal.TemporalAA/Settings m_TaaSettings
    // Size: 0x20
    // Offset: 0xA0
    ::UnityEngine::Rendering::Universal::TemporalAA::Settings m_TaaSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::TemporalAA::Settings) == 0x20);
    // private UnityEngine.Rendering.VolumeStack m_VolumeStack
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Rendering::VolumeStack* m_VolumeStack;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::VolumeStack*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Rendering::IAdditionalData
    operator ::UnityEngine::Rendering::IAdditionalData() noexcept {
      return *reinterpret_cast<::UnityEngine::Rendering::IAdditionalData*>(this);
    }
    // static field const value: static private System.String k_GizmoPath
    static constexpr const char* k_GizmoPath = "Packages/com.unity.render-pipelines.universal/Editor/Gizmos/";
    // Get static field: static private System.String k_GizmoPath
    static ::StringW _get_k_GizmoPath();
    // Set static field: static private System.String k_GizmoPath
    static void _set_k_GizmoPath(::StringW value);
    // static field const value: static private System.String k_BaseCameraGizmoPath
    static constexpr const char* k_BaseCameraGizmoPath = "Packages/com.unity.render-pipelines.universal/Editor/Gizmos/Camera_Base.png";
    // Get static field: static private System.String k_BaseCameraGizmoPath
    static ::StringW _get_k_BaseCameraGizmoPath();
    // Set static field: static private System.String k_BaseCameraGizmoPath
    static void _set_k_BaseCameraGizmoPath(::StringW value);
    // static field const value: static private System.String k_OverlayCameraGizmoPath
    static constexpr const char* k_OverlayCameraGizmoPath = "Packages/com.unity.render-pipelines.universal/Editor/Gizmos/Camera_Base.png";
    // Get static field: static private System.String k_OverlayCameraGizmoPath
    static ::StringW _get_k_OverlayCameraGizmoPath();
    // Set static field: static private System.String k_OverlayCameraGizmoPath
    static void _set_k_OverlayCameraGizmoPath(::StringW value);
    // static field const value: static private System.String k_PostProcessingGizmoPath
    static constexpr const char* k_PostProcessingGizmoPath = "Packages/com.unity.render-pipelines.universal/Editor/Gizmos/Camera_PostProcessing.png";
    // Get static field: static private System.String k_PostProcessingGizmoPath
    static ::StringW _get_k_PostProcessingGizmoPath();
    // Set static field: static private System.String k_PostProcessingGizmoPath
    static void _set_k_PostProcessingGizmoPath(::StringW value);
    // Get static field: static private UnityEngine.Rendering.Universal.UniversalAdditionalCameraData s_DefaultAdditionalCameraData
    static ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData* _get_s_DefaultAdditionalCameraData();
    // Set static field: static private UnityEngine.Rendering.Universal.UniversalAdditionalCameraData s_DefaultAdditionalCameraData
    static void _set_s_DefaultAdditionalCameraData(::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData* value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Rendering.VolumeStack> s_CachedVolumeStacks
    static ::System::Collections::Generic::List_1<::UnityEngine::Rendering::VolumeStack*>* _get_s_CachedVolumeStacks();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Rendering.VolumeStack> s_CachedVolumeStacks
    static void _set_s_CachedVolumeStacks(::System::Collections::Generic::List_1<::UnityEngine::Rendering::VolumeStack*>* value);
    // Get instance field reference: private System.Boolean m_RenderShadows
    [[deprecated("Use field access instead!")]] bool& dyn_m_RenderShadows();
    // Get instance field reference: private UnityEngine.Rendering.Universal.CameraOverrideOption m_RequiresDepthTextureOption
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::CameraOverrideOption& dyn_m_RequiresDepthTextureOption();
    // Get instance field reference: private UnityEngine.Rendering.Universal.CameraOverrideOption m_RequiresOpaqueTextureOption
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::CameraOverrideOption& dyn_m_RequiresOpaqueTextureOption();
    // Get instance field reference: private UnityEngine.Rendering.Universal.CameraRenderType m_CameraType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::CameraRenderType& dyn_m_CameraType();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Camera> m_Cameras
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Camera*>*& dyn_m_Cameras();
    // Get instance field reference: private System.Int32 m_RendererIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_RendererIndex();
    // Get instance field reference: private UnityEngine.LayerMask m_VolumeLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_m_VolumeLayerMask();
    // Get instance field reference: private UnityEngine.Transform m_VolumeTrigger
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_VolumeTrigger();
    // Get instance field reference: private UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode m_VolumeFrameworkUpdateModeOption
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode& dyn_m_VolumeFrameworkUpdateModeOption();
    // Get instance field reference: private System.Boolean m_RenderPostProcessing
    [[deprecated("Use field access instead!")]] bool& dyn_m_RenderPostProcessing();
    // Get instance field reference: private UnityEngine.Rendering.Universal.AntialiasingMode m_Antialiasing
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::AntialiasingMode& dyn_m_Antialiasing();
    // Get instance field reference: private UnityEngine.Rendering.Universal.AntialiasingQuality m_AntialiasingQuality
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::AntialiasingQuality& dyn_m_AntialiasingQuality();
    // Get instance field reference: private System.Boolean m_StopNaN
    [[deprecated("Use field access instead!")]] bool& dyn_m_StopNaN();
    // Get instance field reference: private System.Boolean m_Dithering
    [[deprecated("Use field access instead!")]] bool& dyn_m_Dithering();
    // Get instance field reference: private System.Boolean m_ClearDepth
    [[deprecated("Use field access instead!")]] bool& dyn_m_ClearDepth();
    // Get instance field reference: private System.Boolean m_AllowXRRendering
    [[deprecated("Use field access instead!")]] bool& dyn_m_AllowXRRendering();
    // Get instance field reference: private System.Boolean m_AllowHDROutput
    [[deprecated("Use field access instead!")]] bool& dyn_m_AllowHDROutput();
    // Get instance field reference: private System.Boolean m_UseScreenCoordOverride
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseScreenCoordOverride();
    // Get instance field reference: private UnityEngine.Vector4 m_ScreenSizeOverride
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_m_ScreenSizeOverride();
    // Get instance field reference: private UnityEngine.Vector4 m_ScreenCoordScaleBias
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_m_ScreenCoordScaleBias();
    // Get instance field reference: private UnityEngine.Camera m_Camera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_m_Camera();
    // Get instance field reference: private System.Boolean m_RequiresDepthTexture
    [[deprecated("Use field access instead!")]] bool& dyn_m_RequiresDepthTexture();
    // Get instance field reference: private System.Boolean m_RequiresColorTexture
    [[deprecated("Use field access instead!")]] bool& dyn_m_RequiresColorTexture();
    // Get instance field reference: private System.Single m_Version
    [[deprecated("Use field access instead!")]] float& dyn_m_Version();
    // Get instance field reference: private UnityEngine.Rendering.Universal.MotionVectorsPersistentData m_MotionVectorsPersistentData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::MotionVectorsPersistentData*& dyn_m_MotionVectorsPersistentData();
    // Get instance field reference: private UnityEngine.Rendering.Universal.TaaPersistentData m_TaaPersistentData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::TaaPersistentData*& dyn_m_TaaPersistentData();
    // Get instance field reference: UnityEngine.Rendering.Universal.TemporalAA/Settings m_TaaSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::TemporalAA::Settings& dyn_m_TaaSettings();
    // Get instance field reference: private UnityEngine.Rendering.VolumeStack m_VolumeStack
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::VolumeStack*& dyn_m_VolumeStack();
    // public System.Single get_version()
    // Offset: 0x52E6CB8
    float get_version();
    // static UnityEngine.Rendering.Universal.UniversalAdditionalCameraData get_defaultAdditionalCameraData()
    // Offset: 0x52E6CC0
    static ::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData* get_defaultAdditionalCameraData();
    // UnityEngine.Camera get_camera()
    // Offset: 0x52E6EE4
    ::UnityEngine::Camera* get_camera();
    // public System.Boolean get_renderShadows()
    // Offset: 0x52E6F8C
    bool get_renderShadows();
    // public System.Void set_renderShadows(System.Boolean value)
    // Offset: 0x52E6F94
    void set_renderShadows(bool value);
    // public UnityEngine.Rendering.Universal.CameraOverrideOption get_requiresDepthOption()
    // Offset: 0x52E6FA0
    ::UnityEngine::Rendering::Universal::CameraOverrideOption get_requiresDepthOption();
    // public System.Void set_requiresDepthOption(UnityEngine.Rendering.Universal.CameraOverrideOption value)
    // Offset: 0x52E6FA8
    void set_requiresDepthOption(::UnityEngine::Rendering::Universal::CameraOverrideOption value);
    // public UnityEngine.Rendering.Universal.CameraOverrideOption get_requiresColorOption()
    // Offset: 0x52E6FB0
    ::UnityEngine::Rendering::Universal::CameraOverrideOption get_requiresColorOption();
    // public System.Void set_requiresColorOption(UnityEngine.Rendering.Universal.CameraOverrideOption value)
    // Offset: 0x52E6FB8
    void set_requiresColorOption(::UnityEngine::Rendering::Universal::CameraOverrideOption value);
    // public UnityEngine.Rendering.Universal.CameraRenderType get_renderType()
    // Offset: 0x52E6FC0
    ::UnityEngine::Rendering::Universal::CameraRenderType get_renderType();
    // public System.Void set_renderType(UnityEngine.Rendering.Universal.CameraRenderType value)
    // Offset: 0x52E6FC8
    void set_renderType(::UnityEngine::Rendering::Universal::CameraRenderType value);
    // public System.Collections.Generic.List`1<UnityEngine.Camera> get_cameraStack()
    // Offset: 0x52E6FD0
    ::System::Collections::Generic::List_1<::UnityEngine::Camera*>* get_cameraStack();
    // System.Void UpdateCameraStack()
    // Offset: 0x52E7420
    void UpdateCameraStack();
    // public System.Boolean get_clearDepth()
    // Offset: 0x52E7710
    bool get_clearDepth();
    // public System.Boolean get_requiresDepthTexture()
    // Offset: 0x52E7718
    bool get_requiresDepthTexture();
    // public System.Void set_requiresDepthTexture(System.Boolean value)
    // Offset: 0x52E780C
    void set_requiresDepthTexture(bool value);
    // public System.Boolean get_requiresColorTexture()
    // Offset: 0x52E7828
    bool get_requiresColorTexture();
    // public System.Void set_requiresColorTexture(System.Boolean value)
    // Offset: 0x52E78A8
    void set_requiresColorTexture(bool value);
    // public UnityEngine.Rendering.Universal.ScriptableRenderer get_scriptableRenderer()
    // Offset: 0x52E7154
    ::UnityEngine::Rendering::Universal::ScriptableRenderer* get_scriptableRenderer();
    // public System.Void SetRenderer(System.Int32 index)
    // Offset: 0x52E78C4
    void SetRenderer(int index);
    // public UnityEngine.LayerMask get_volumeLayerMask()
    // Offset: 0x52E78CC
    ::UnityEngine::LayerMask get_volumeLayerMask();
    // public System.Void set_volumeLayerMask(UnityEngine.LayerMask value)
    // Offset: 0x52E78D4
    void set_volumeLayerMask(::UnityEngine::LayerMask value);
    // public UnityEngine.Transform get_volumeTrigger()
    // Offset: 0x52E78DC
    ::UnityEngine::Transform* get_volumeTrigger();
    // public System.Void set_volumeTrigger(UnityEngine.Transform value)
    // Offset: 0x52E78E4
    void set_volumeTrigger(::UnityEngine::Transform* value);
    // UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode get_volumeFrameworkUpdateMode()
    // Offset: 0x52E78EC
    ::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode get_volumeFrameworkUpdateMode();
    // System.Void set_volumeFrameworkUpdateMode(UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode value)
    // Offset: 0x52E78F4
    void set_volumeFrameworkUpdateMode(::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode value);
    // public System.Boolean get_requiresVolumeFrameworkUpdate()
    // Offset: 0x52E64C0
    bool get_requiresVolumeFrameworkUpdate();
    // public UnityEngine.Rendering.VolumeStack get_volumeStack()
    // Offset: 0x52E78FC
    ::UnityEngine::Rendering::VolumeStack* get_volumeStack();
    // public System.Void set_volumeStack(UnityEngine.Rendering.VolumeStack value)
    // Offset: 0x52E69C8
    void set_volumeStack(::UnityEngine::Rendering::VolumeStack* value);
    // System.Void GetOrCreateVolumeStack()
    // Offset: 0x52E6614
    void GetOrCreateVolumeStack();
    // public System.Boolean get_renderPostProcessing()
    // Offset: 0x52E7904
    bool get_renderPostProcessing();
    // public System.Void set_renderPostProcessing(System.Boolean value)
    // Offset: 0x52E790C
    void set_renderPostProcessing(bool value);
    // public UnityEngine.Rendering.Universal.AntialiasingMode get_antialiasing()
    // Offset: 0x52E7918
    ::UnityEngine::Rendering::Universal::AntialiasingMode get_antialiasing();
    // public System.Void set_antialiasing(UnityEngine.Rendering.Universal.AntialiasingMode value)
    // Offset: 0x52E7920
    void set_antialiasing(::UnityEngine::Rendering::Universal::AntialiasingMode value);
    // public UnityEngine.Rendering.Universal.AntialiasingQuality get_antialiasingQuality()
    // Offset: 0x52E7928
    ::UnityEngine::Rendering::Universal::AntialiasingQuality get_antialiasingQuality();
    // public System.Void set_antialiasingQuality(UnityEngine.Rendering.Universal.AntialiasingQuality value)
    // Offset: 0x52E7930
    void set_antialiasingQuality(::UnityEngine::Rendering::Universal::AntialiasingQuality value);
    // UnityEngine.Rendering.Universal.TemporalAA/Settings get_taaSettings()
    // Offset: 0x52E7938
    ::UnityEngine::Rendering::Universal::TemporalAA::Settings get_taaSettings();
    // UnityEngine.Rendering.Universal.TaaPersistentData get_taaPersistentData()
    // Offset: 0x52E7940
    ::UnityEngine::Rendering::Universal::TaaPersistentData* get_taaPersistentData();
    // UnityEngine.Rendering.Universal.MotionVectorsPersistentData get_motionVectorsPersistentData()
    // Offset: 0x52E7948
    ::UnityEngine::Rendering::Universal::MotionVectorsPersistentData* get_motionVectorsPersistentData();
    // public System.Boolean get_resetHistory()
    // Offset: 0x52E7950
    bool get_resetHistory();
    // public System.Void set_resetHistory(System.Boolean value)
    // Offset: 0x52E7960
    void set_resetHistory(bool value);
    // public System.Boolean get_stopNaN()
    // Offset: 0x52E79A4
    bool get_stopNaN();
    // public System.Void set_stopNaN(System.Boolean value)
    // Offset: 0x52E79AC
    void set_stopNaN(bool value);
    // public System.Boolean get_dithering()
    // Offset: 0x52E79B8
    bool get_dithering();
    // public System.Void set_dithering(System.Boolean value)
    // Offset: 0x52E79C0
    void set_dithering(bool value);
    // public System.Boolean get_allowXRRendering()
    // Offset: 0x52E79CC
    bool get_allowXRRendering();
    // public System.Void set_allowXRRendering(System.Boolean value)
    // Offset: 0x52E79D4
    void set_allowXRRendering(bool value);
    // public System.Boolean get_useScreenCoordOverride()
    // Offset: 0x52E79E0
    bool get_useScreenCoordOverride();
    // public System.Void set_useScreenCoordOverride(System.Boolean value)
    // Offset: 0x52E79E8
    void set_useScreenCoordOverride(bool value);
    // public UnityEngine.Vector4 get_screenSizeOverride()
    // Offset: 0x52E79F4
    ::UnityEngine::Vector4 get_screenSizeOverride();
    // public System.Void set_screenSizeOverride(UnityEngine.Vector4 value)
    // Offset: 0x52E7A00
    void set_screenSizeOverride(::UnityEngine::Vector4 value);
    // public UnityEngine.Vector4 get_screenCoordScaleBias()
    // Offset: 0x52E7A0C
    ::UnityEngine::Vector4 get_screenCoordScaleBias();
    // public System.Void set_screenCoordScaleBias(UnityEngine.Vector4 value)
    // Offset: 0x52E7A18
    void set_screenCoordScaleBias(::UnityEngine::Vector4 value);
    // public System.Boolean get_allowHDROutput()
    // Offset: 0x52E7A24
    bool get_allowHDROutput();
    // public System.Void set_allowHDROutput(System.Boolean value)
    // Offset: 0x52E7A2C
    void set_allowHDROutput(bool value);
    // public System.Void OnBeforeSerialize()
    // Offset: 0x52E7A38
    void OnBeforeSerialize();
    // public System.Void OnAfterDeserialize()
    // Offset: 0x52E7A3C
    void OnAfterDeserialize();
    // public System.Void OnDrawGizmos()
    // Offset: 0x52E7A5C
    void OnDrawGizmos();
    // public System.Void OnDestroy()
    // Offset: 0x52E7B74
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x52E6D78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UniversalAdditionalCameraData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UniversalAdditionalCameraData*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.UniversalAdditionalCameraData
  #pragma pack(pop)
  static check_size<sizeof(UniversalAdditionalCameraData), 192 + sizeof(::UnityEngine::Rendering::VolumeStack*)> __UnityEngine_Rendering_Universal_UniversalAdditionalCameraDataSizeCheck;
  static_assert(sizeof(UniversalAdditionalCameraData) == 0xC8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_defaultAdditionalCameraData
// Il2CppName: get_defaultAdditionalCameraData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::UniversalAdditionalCameraData* (*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_defaultAdditionalCameraData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_defaultAdditionalCameraData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_camera
// Il2CppName: get_camera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_camera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_camera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_renderShadows
// Il2CppName: get_renderShadows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_renderShadows)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_renderShadows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_renderShadows
// Il2CppName: set_renderShadows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_renderShadows)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_renderShadows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_requiresDepthOption
// Il2CppName: get_requiresDepthOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::CameraOverrideOption (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_requiresDepthOption)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_requiresDepthOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_requiresDepthOption
// Il2CppName: set_requiresDepthOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(::UnityEngine::Rendering::Universal::CameraOverrideOption)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_requiresDepthOption)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraOverrideOption")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_requiresDepthOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_requiresColorOption
// Il2CppName: get_requiresColorOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::CameraOverrideOption (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_requiresColorOption)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_requiresColorOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_requiresColorOption
// Il2CppName: set_requiresColorOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(::UnityEngine::Rendering::Universal::CameraOverrideOption)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_requiresColorOption)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraOverrideOption")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_requiresColorOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_renderType
// Il2CppName: get_renderType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::CameraRenderType (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_renderType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_renderType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_renderType
// Il2CppName: set_renderType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(::UnityEngine::Rendering::Universal::CameraRenderType)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_renderType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraRenderType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_renderType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_cameraStack
// Il2CppName: get_cameraStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Camera*>* (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_cameraStack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_cameraStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::UpdateCameraStack
// Il2CppName: UpdateCameraStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::UpdateCameraStack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "UpdateCameraStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_clearDepth
// Il2CppName: get_clearDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_clearDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_clearDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_requiresDepthTexture
// Il2CppName: get_requiresDepthTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_requiresDepthTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_requiresDepthTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_requiresDepthTexture
// Il2CppName: set_requiresDepthTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_requiresDepthTexture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_requiresDepthTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_requiresColorTexture
// Il2CppName: get_requiresColorTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_requiresColorTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_requiresColorTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_requiresColorTexture
// Il2CppName: set_requiresColorTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_requiresColorTexture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_requiresColorTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_scriptableRenderer
// Il2CppName: get_scriptableRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ScriptableRenderer* (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_scriptableRenderer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_scriptableRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::SetRenderer
// Il2CppName: SetRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(int)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::SetRenderer)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "SetRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_volumeLayerMask
// Il2CppName: get_volumeLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_volumeLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_volumeLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_volumeLayerMask
// Il2CppName: set_volumeLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(::UnityEngine::LayerMask)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_volumeLayerMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_volumeLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_volumeTrigger
// Il2CppName: get_volumeTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_volumeTrigger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_volumeTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_volumeTrigger
// Il2CppName: set_volumeTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(::UnityEngine::Transform*)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_volumeTrigger)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_volumeTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_volumeFrameworkUpdateMode
// Il2CppName: get_volumeFrameworkUpdateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_volumeFrameworkUpdateMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_volumeFrameworkUpdateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_volumeFrameworkUpdateMode
// Il2CppName: set_volumeFrameworkUpdateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(::UnityEngine::Rendering::Universal::VolumeFrameworkUpdateMode)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_volumeFrameworkUpdateMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "VolumeFrameworkUpdateMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_volumeFrameworkUpdateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_requiresVolumeFrameworkUpdate
// Il2CppName: get_requiresVolumeFrameworkUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_requiresVolumeFrameworkUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_requiresVolumeFrameworkUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_volumeStack
// Il2CppName: get_volumeStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::VolumeStack* (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_volumeStack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_volumeStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_volumeStack
// Il2CppName: set_volumeStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(::UnityEngine::Rendering::VolumeStack*)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_volumeStack)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VolumeStack")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_volumeStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::GetOrCreateVolumeStack
// Il2CppName: GetOrCreateVolumeStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::GetOrCreateVolumeStack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "GetOrCreateVolumeStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_renderPostProcessing
// Il2CppName: get_renderPostProcessing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_renderPostProcessing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_renderPostProcessing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_renderPostProcessing
// Il2CppName: set_renderPostProcessing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_renderPostProcessing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_renderPostProcessing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_antialiasing
// Il2CppName: get_antialiasing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::AntialiasingMode (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_antialiasing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_antialiasing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_antialiasing
// Il2CppName: set_antialiasing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(::UnityEngine::Rendering::Universal::AntialiasingMode)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_antialiasing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "AntialiasingMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_antialiasing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_antialiasingQuality
// Il2CppName: get_antialiasingQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::AntialiasingQuality (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_antialiasingQuality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_antialiasingQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_antialiasingQuality
// Il2CppName: set_antialiasingQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(::UnityEngine::Rendering::Universal::AntialiasingQuality)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_antialiasingQuality)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "AntialiasingQuality")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_antialiasingQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_taaSettings
// Il2CppName: get_taaSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::TemporalAA::Settings (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_taaSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_taaSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_taaPersistentData
// Il2CppName: get_taaPersistentData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::TaaPersistentData* (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_taaPersistentData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_taaPersistentData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_motionVectorsPersistentData
// Il2CppName: get_motionVectorsPersistentData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::MotionVectorsPersistentData* (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_motionVectorsPersistentData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_motionVectorsPersistentData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_resetHistory
// Il2CppName: get_resetHistory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_resetHistory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_resetHistory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_resetHistory
// Il2CppName: set_resetHistory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_resetHistory)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_resetHistory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_stopNaN
// Il2CppName: get_stopNaN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_stopNaN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_stopNaN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_stopNaN
// Il2CppName: set_stopNaN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_stopNaN)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_stopNaN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_dithering
// Il2CppName: get_dithering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_dithering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_dithering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_dithering
// Il2CppName: set_dithering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_dithering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_dithering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_allowXRRendering
// Il2CppName: get_allowXRRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_allowXRRendering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_allowXRRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_allowXRRendering
// Il2CppName: set_allowXRRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_allowXRRendering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_allowXRRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_useScreenCoordOverride
// Il2CppName: get_useScreenCoordOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_useScreenCoordOverride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_useScreenCoordOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_useScreenCoordOverride
// Il2CppName: set_useScreenCoordOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_useScreenCoordOverride)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_useScreenCoordOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_screenSizeOverride
// Il2CppName: get_screenSizeOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_screenSizeOverride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_screenSizeOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_screenSizeOverride
// Il2CppName: set_screenSizeOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(::UnityEngine::Vector4)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_screenSizeOverride)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_screenSizeOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_screenCoordScaleBias
// Il2CppName: get_screenCoordScaleBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_screenCoordScaleBias)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_screenCoordScaleBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_screenCoordScaleBias
// Il2CppName: set_screenCoordScaleBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(::UnityEngine::Vector4)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_screenCoordScaleBias)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_screenCoordScaleBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_allowHDROutput
// Il2CppName: get_allowHDROutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::get_allowHDROutput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "get_allowHDROutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_allowHDROutput
// Il2CppName: set_allowHDROutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::set_allowHDROutput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "set_allowHDROutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::OnBeforeSerialize
// Il2CppName: OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::OnAfterDeserialize
// Il2CppName: OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::*)()>(&UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalAdditionalCameraData*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalAdditionalCameraData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
