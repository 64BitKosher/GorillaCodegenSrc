// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.DecalCreateDrawCallSystem
#include "UnityEngine/Rendering/Universal/DecalCreateDrawCallSystem.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.IJob
#include "Unity/Jobs/IJob.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: Unity.Mathematics.float4x4
#include "Unity/Mathematics/float4x4.hpp"
// Including type: Unity.Mathematics.float2
#include "Unity/Mathematics/float2.hpp"
// Including type: UnityEngine.BoundingSphere
#include "UnityEngine/BoundingSphere.hpp"
// Including type: UnityEngine.Rendering.Universal.DecalSubDrawCall
#include "UnityEngine/Rendering/Universal/DecalSubDrawCall.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DecalCreateDrawCallSystem::DrawCallJob, "UnityEngine.Rendering.Universal", "DecalCreateDrawCallSystem/DrawCallJob");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.DecalCreateDrawCallSystem/DrawCallJob
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct DecalCreateDrawCallSystem::DrawCallJob/*, public ::System::ValueType, public ::Unity::Jobs::IJob*/ {
    public:
    public:
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> decalToWorlds
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> decalToWorlds;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> normalToWorlds
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> normalToWorlds;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> sizeOffsets
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> sizeOffsets;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float2> drawDistances
    // Size: 0xFFFFFFFF
    // Offset: 0x30
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> drawDistances;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float2> angleFades
    // Size: 0xFFFFFFFF
    // Offset: 0x40
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> angleFades;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float4> uvScaleBiases
    // Size: 0xFFFFFFFF
    // Offset: 0x50
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4> uvScaleBiases;
    // public Unity.Collections.NativeArray`1<System.Int32> layerMasks
    // Size: 0xFFFFFFFF
    // Offset: 0x60
    ::Unity::Collections::NativeArray_1<int> layerMasks;
    // public Unity.Collections.NativeArray`1<System.UInt64> sceneLayerMasks
    // Size: 0xFFFFFFFF
    // Offset: 0x70
    ::Unity::Collections::NativeArray_1<uint64_t> sceneLayerMasks;
    // public Unity.Collections.NativeArray`1<System.Single> fadeFactors
    // Size: 0xFFFFFFFF
    // Offset: 0x80
    ::Unity::Collections::NativeArray_1<float> fadeFactors;
    // public Unity.Collections.NativeArray`1<UnityEngine.BoundingSphere> boundingSpheres
    // Size: 0xFFFFFFFF
    // Offset: 0x90
    ::Unity::Collections::NativeArray_1<::UnityEngine::BoundingSphere> boundingSpheres;
    // public Unity.Collections.NativeArray`1<System.UInt32> renderingLayerMasks
    // Size: 0xFFFFFFFF
    // Offset: 0xA0
    ::Unity::Collections::NativeArray_1<uint> renderingLayerMasks;
    // public UnityEngine.Vector3 cameraPosition
    // Size: 0xC
    // Offset: 0xB0
    ::UnityEngine::Vector3 cameraPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.UInt64 sceneCullingMask
    // Size: 0x8
    // Offset: 0xC0
    uint64_t sceneCullingMask;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.Int32 cullingMask
    // Size: 0x4
    // Offset: 0xC8
    int cullingMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Unity.Collections.NativeArray`1<System.Int32> visibleDecalIndices
    // Size: 0xFFFFFFFF
    // Offset: 0xD0
    ::Unity::Collections::NativeArray_1<int> visibleDecalIndices;
    // public System.Int32 visibleDecalCount
    // Size: 0x4
    // Offset: 0xE0
    int visibleDecalCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single maxDrawDistance
    // Size: 0x4
    // Offset: 0xE4
    float maxDrawDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> decalToWorldsDraw
    // Size: 0xFFFFFFFF
    // Offset: 0xE8
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> decalToWorldsDraw;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> normalToDecalsDraw
    // Size: 0xFFFFFFFF
    // Offset: 0xF8
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> normalToDecalsDraw;
    // public Unity.Collections.NativeArray`1<System.Single> renderingLayerMasksDraw
    // Size: 0xFFFFFFFF
    // Offset: 0x108
    ::Unity::Collections::NativeArray_1<float> renderingLayerMasksDraw;
    // public Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.DecalSubDrawCall> subCalls
    // Size: 0xFFFFFFFF
    // Offset: 0x118
    ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::DecalSubDrawCall> subCalls;
    // public Unity.Collections.NativeArray`1<System.Int32> subCallCount
    // Size: 0xFFFFFFFF
    // Offset: 0x128
    ::Unity::Collections::NativeArray_1<int> subCallCount;
    public:
    // Creating value type constructor for type: DrawCallJob
    constexpr DrawCallJob(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> decalToWorlds_ = {}, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> normalToWorlds_ = {}, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> sizeOffsets_ = {}, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> drawDistances_ = {}, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2> angleFades_ = {}, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4> uvScaleBiases_ = {}, ::Unity::Collections::NativeArray_1<int> layerMasks_ = {}, ::Unity::Collections::NativeArray_1<uint64_t> sceneLayerMasks_ = {}, ::Unity::Collections::NativeArray_1<float> fadeFactors_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::BoundingSphere> boundingSpheres_ = {}, ::Unity::Collections::NativeArray_1<uint> renderingLayerMasks_ = {}, ::UnityEngine::Vector3 cameraPosition_ = {}, uint64_t sceneCullingMask_ = {}, int cullingMask_ = {}, ::Unity::Collections::NativeArray_1<int> visibleDecalIndices_ = {}, int visibleDecalCount_ = {}, float maxDrawDistance_ = {}, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> decalToWorldsDraw_ = {}, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> normalToDecalsDraw_ = {}, ::Unity::Collections::NativeArray_1<float> renderingLayerMasksDraw_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::DecalSubDrawCall> subCalls_ = {}, ::Unity::Collections::NativeArray_1<int> subCallCount_ = {}) noexcept : decalToWorlds{decalToWorlds_}, normalToWorlds{normalToWorlds_}, sizeOffsets{sizeOffsets_}, drawDistances{drawDistances_}, angleFades{angleFades_}, uvScaleBiases{uvScaleBiases_}, layerMasks{layerMasks_}, sceneLayerMasks{sceneLayerMasks_}, fadeFactors{fadeFactors_}, boundingSpheres{boundingSpheres_}, renderingLayerMasks{renderingLayerMasks_}, cameraPosition{cameraPosition_}, sceneCullingMask{sceneCullingMask_}, cullingMask{cullingMask_}, visibleDecalIndices{visibleDecalIndices_}, visibleDecalCount{visibleDecalCount_}, maxDrawDistance{maxDrawDistance_}, decalToWorldsDraw{decalToWorldsDraw_}, normalToDecalsDraw{normalToDecalsDraw_}, renderingLayerMasksDraw{renderingLayerMasksDraw_}, subCalls{subCalls_}, subCallCount{subCallCount_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Jobs::IJob
    operator ::Unity::Jobs::IJob() noexcept {
      return *reinterpret_cast<::Unity::Jobs::IJob*>(this);
    }
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> decalToWorlds
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4>& dyn_decalToWorlds();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> normalToWorlds
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4>& dyn_normalToWorlds();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> sizeOffsets
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4>& dyn_sizeOffsets();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float2> drawDistances
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>& dyn_drawDistances();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float2> angleFades
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float2>& dyn_angleFades();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float4> uvScaleBiases
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4>& dyn_uvScaleBiases();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Int32> layerMasks
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_layerMasks();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.UInt64> sceneLayerMasks
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<uint64_t>& dyn_sceneLayerMasks();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Single> fadeFactors
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<float>& dyn_fadeFactors();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.BoundingSphere> boundingSpheres
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::BoundingSphere>& dyn_boundingSpheres();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.UInt32> renderingLayerMasks
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<uint>& dyn_renderingLayerMasks();
    // Get instance field reference: public UnityEngine.Vector3 cameraPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_cameraPosition();
    // Get instance field reference: public System.UInt64 sceneCullingMask
    [[deprecated("Use field access instead!")]] uint64_t& dyn_sceneCullingMask();
    // Get instance field reference: public System.Int32 cullingMask
    [[deprecated("Use field access instead!")]] int& dyn_cullingMask();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Int32> visibleDecalIndices
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_visibleDecalIndices();
    // Get instance field reference: public System.Int32 visibleDecalCount
    [[deprecated("Use field access instead!")]] int& dyn_visibleDecalCount();
    // Get instance field reference: public System.Single maxDrawDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxDrawDistance();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> decalToWorldsDraw
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4>& dyn_decalToWorldsDraw();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> normalToDecalsDraw
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4>& dyn_normalToDecalsDraw();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Single> renderingLayerMasksDraw
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<float>& dyn_renderingLayerMasksDraw();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.DecalSubDrawCall> subCalls
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::DecalSubDrawCall>& dyn_subCalls();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Int32> subCallCount
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_subCallCount();
    // public System.Void Execute()
    // Offset: 0x52A33C8
    void Execute();
  }; // UnityEngine.Rendering.Universal.DecalCreateDrawCallSystem/DrawCallJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalCreateDrawCallSystem::DrawCallJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalCreateDrawCallSystem::DrawCallJob::*)()>(&UnityEngine::Rendering::Universal::DecalCreateDrawCallSystem::DrawCallJob::Execute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalCreateDrawCallSystem::DrawCallJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
