// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.RenderPipelineGlobalSettings
#include "UnityEngine/Rendering/RenderPipelineGlobalSettings.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: UnityEngine.Rendering.IShaderVariantSettings
#include "UnityEngine/Rendering/IShaderVariantSettings.hpp"
// Including type: UnityEngine.Rendering.ShaderVariantLogLevel
#include "UnityEngine/Rendering/ShaderVariantLogLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: UniversalRenderPipelineGlobalSettings
  class UniversalRenderPipelineGlobalSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*, "UnityEngine.Rendering.Universal", "UniversalRenderPipelineGlobalSettings");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x85
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class UniversalRenderPipelineGlobalSettings : public ::UnityEngine::Rendering::RenderPipelineGlobalSettings/*, public ::UnityEngine::ISerializationCallbackReceiver, public ::UnityEngine::Rendering::IShaderVariantSettings*/ {
    public:
    public:
    // private System.Int32 k_AssetVersion
    // Size: 0x4
    // Offset: 0x18
    int k_AssetVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: k_AssetVersion and: m_RenderingLayerNames
    char __padding0[0x4] = {};
    // private System.String[] m_RenderingLayerNames
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::StringW> m_RenderingLayerNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.String[] m_PrefixedRenderingLayerNames
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::StringW> m_PrefixedRenderingLayerNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.UInt32 m_ValidRenderingLayers
    // Size: 0x4
    // Offset: 0x30
    uint m_ValidRenderingLayers;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: m_ValidRenderingLayers and: lightLayerName0
    char __padding3[0x4] = {};
    // public System.String lightLayerName0
    // Size: 0x8
    // Offset: 0x38
    ::StringW lightLayerName0;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String lightLayerName1
    // Size: 0x8
    // Offset: 0x40
    ::StringW lightLayerName1;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String lightLayerName2
    // Size: 0x8
    // Offset: 0x48
    ::StringW lightLayerName2;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String lightLayerName3
    // Size: 0x8
    // Offset: 0x50
    ::StringW lightLayerName3;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String lightLayerName4
    // Size: 0x8
    // Offset: 0x58
    ::StringW lightLayerName4;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String lightLayerName5
    // Size: 0x8
    // Offset: 0x60
    ::StringW lightLayerName5;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String lightLayerName6
    // Size: 0x8
    // Offset: 0x68
    ::StringW lightLayerName6;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String lightLayerName7
    // Size: 0x8
    // Offset: 0x70
    ::StringW lightLayerName7;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean m_StripDebugVariants
    // Size: 0x1
    // Offset: 0x78
    bool m_StripDebugVariants;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_StripUnusedPostProcessingVariants
    // Size: 0x1
    // Offset: 0x79
    bool m_StripUnusedPostProcessingVariants;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_StripUnusedVariants
    // Size: 0x1
    // Offset: 0x7A
    bool m_StripUnusedVariants;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_StripUnusedLODCrossFadeVariants
    // Size: 0x1
    // Offset: 0x7B
    bool m_StripUnusedLODCrossFadeVariants;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_StripScreenCoordOverrideVariants
    // Size: 0x1
    // Offset: 0x7C
    bool m_StripScreenCoordOverrideVariants;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean supportRuntimeDebugDisplay
    // Size: 0x1
    // Offset: 0x7D
    bool supportRuntimeDebugDisplay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: supportRuntimeDebugDisplay and: m_ShaderVariantLogLevel
    char __padding17[0x2] = {};
    // UnityEngine.Rendering.ShaderVariantLogLevel m_ShaderVariantLogLevel
    // Size: 0x4
    // Offset: 0x80
    ::UnityEngine::Rendering::ShaderVariantLogLevel m_ShaderVariantLogLevel;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ShaderVariantLogLevel) == 0x4);
    // System.Boolean m_ExportShaderVariants
    // Size: 0x1
    // Offset: 0x84
    bool m_ExportShaderVariants;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Rendering::IShaderVariantSettings
    operator ::UnityEngine::Rendering::IShaderVariantSettings() noexcept {
      return *reinterpret_cast<::UnityEngine::Rendering::IShaderVariantSettings*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings cachedInstance
    static ::UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings* _get_cachedInstance();
    // Set static field: static private UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings cachedInstance
    static void _set_cachedInstance(::UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings* value);
    // Get static field: static public readonly System.String defaultAssetName
    static ::StringW _get_defaultAssetName();
    // Set static field: static public readonly System.String defaultAssetName
    static void _set_defaultAssetName(::StringW value);
    // Get instance field reference: private System.Int32 k_AssetVersion
    [[deprecated("Use field access instead!")]] int& dyn_k_AssetVersion();
    // Get instance field reference: private System.String[] m_RenderingLayerNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_m_RenderingLayerNames();
    // Get instance field reference: private System.String[] m_PrefixedRenderingLayerNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_m_PrefixedRenderingLayerNames();
    // Get instance field reference: private System.UInt32 m_ValidRenderingLayers
    [[deprecated("Use field access instead!")]] uint& dyn_m_ValidRenderingLayers();
    // Get instance field reference: public System.String lightLayerName0
    [[deprecated("Use field access instead!")]] ::StringW& dyn_lightLayerName0();
    // Get instance field reference: public System.String lightLayerName1
    [[deprecated("Use field access instead!")]] ::StringW& dyn_lightLayerName1();
    // Get instance field reference: public System.String lightLayerName2
    [[deprecated("Use field access instead!")]] ::StringW& dyn_lightLayerName2();
    // Get instance field reference: public System.String lightLayerName3
    [[deprecated("Use field access instead!")]] ::StringW& dyn_lightLayerName3();
    // Get instance field reference: public System.String lightLayerName4
    [[deprecated("Use field access instead!")]] ::StringW& dyn_lightLayerName4();
    // Get instance field reference: public System.String lightLayerName5
    [[deprecated("Use field access instead!")]] ::StringW& dyn_lightLayerName5();
    // Get instance field reference: public System.String lightLayerName6
    [[deprecated("Use field access instead!")]] ::StringW& dyn_lightLayerName6();
    // Get instance field reference: public System.String lightLayerName7
    [[deprecated("Use field access instead!")]] ::StringW& dyn_lightLayerName7();
    // Get instance field reference: private System.Boolean m_StripDebugVariants
    [[deprecated("Use field access instead!")]] bool& dyn_m_StripDebugVariants();
    // Get instance field reference: private System.Boolean m_StripUnusedPostProcessingVariants
    [[deprecated("Use field access instead!")]] bool& dyn_m_StripUnusedPostProcessingVariants();
    // Get instance field reference: private System.Boolean m_StripUnusedVariants
    [[deprecated("Use field access instead!")]] bool& dyn_m_StripUnusedVariants();
    // Get instance field reference: private System.Boolean m_StripUnusedLODCrossFadeVariants
    [[deprecated("Use field access instead!")]] bool& dyn_m_StripUnusedLODCrossFadeVariants();
    // Get instance field reference: private System.Boolean m_StripScreenCoordOverrideVariants
    [[deprecated("Use field access instead!")]] bool& dyn_m_StripScreenCoordOverrideVariants();
    // Get instance field reference: public System.Boolean supportRuntimeDebugDisplay
    [[deprecated("Use field access instead!")]] bool& dyn_supportRuntimeDebugDisplay();
    // Get instance field reference: UnityEngine.Rendering.ShaderVariantLogLevel m_ShaderVariantLogLevel
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ShaderVariantLogLevel& dyn_m_ShaderVariantLogLevel();
    // Get instance field reference: System.Boolean m_ExportShaderVariants
    [[deprecated("Use field access instead!")]] bool& dyn_m_ExportShaderVariants();
    // public System.Void OnBeforeSerialize()
    // Offset: 0x52F95C0
    void OnBeforeSerialize();
    // public System.Void OnAfterDeserialize()
    // Offset: 0x52F95C4
    void OnAfterDeserialize();
    // static public UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings get_instance()
    // Offset: 0x52F95C8
    static ::UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings* get_instance();
    // static System.Void UpdateGraphicsSettings(UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings newSettings)
    // Offset: 0x52F9740
    static void UpdateGraphicsSettings(::UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings* newSettings);
    // private System.Void Reset()
    // Offset: 0x52F987C
    void Reset();
    // private System.String[] get_renderingLayerNames()
    // Offset: 0x52F99E8
    ::ArrayW<::StringW> get_renderingLayerNames();
    // private System.String[] get_prefixedRenderingLayerNames()
    // Offset: 0x52F9A0C
    ::ArrayW<::StringW> get_prefixedRenderingLayerNames();
    // public System.String[] get_renderingLayerMaskNames()
    // Offset: 0x52F9A30
    ::ArrayW<::StringW> get_renderingLayerMaskNames();
    // public System.String[] get_prefixedRenderingLayerMaskNames()
    // Offset: 0x52F9A54
    ::ArrayW<::StringW> get_prefixedRenderingLayerMaskNames();
    // public System.UInt32 get_validRenderingLayers()
    // Offset: 0x52F9A78
    uint get_validRenderingLayers();
    // System.Void UpdateRenderingLayerNames()
    // Offset: 0x52F9880
    void UpdateRenderingLayerNames();
    // public System.String[] get_prefixedLightLayerNames()
    // Offset: 0x52F9A80
    ::ArrayW<::StringW> get_prefixedLightLayerNames();
    // public System.String[] get_lightLayerNames()
    // Offset: 0x52F9AC4
    ::ArrayW<::StringW> get_lightLayerNames();
    // System.Void ResetRenderingLayerNames()
    // Offset: 0x52F9B08
    void ResetRenderingLayerNames();
    // public System.Boolean get_stripDebugVariants()
    // Offset: 0x52F9B9C
    bool get_stripDebugVariants();
    // public System.Void set_stripDebugVariants(System.Boolean value)
    // Offset: 0x52F9BA4
    void set_stripDebugVariants(bool value);
    // public System.Boolean get_stripUnusedPostProcessingVariants()
    // Offset: 0x52F9BB0
    bool get_stripUnusedPostProcessingVariants();
    // public System.Void set_stripUnusedPostProcessingVariants(System.Boolean value)
    // Offset: 0x52F9BB8
    void set_stripUnusedPostProcessingVariants(bool value);
    // public System.Boolean get_stripUnusedVariants()
    // Offset: 0x52F9BC4
    bool get_stripUnusedVariants();
    // public System.Void set_stripUnusedVariants(System.Boolean value)
    // Offset: 0x52F9BCC
    void set_stripUnusedVariants(bool value);
    // public System.Boolean get_stripUnusedLODCrossFadeVariants()
    // Offset: 0x52F9BD8
    bool get_stripUnusedLODCrossFadeVariants();
    // public System.Void set_stripUnusedLODCrossFadeVariants(System.Boolean value)
    // Offset: 0x52F9BE0
    void set_stripUnusedLODCrossFadeVariants(bool value);
    // public System.Boolean get_stripScreenCoordOverrideVariants()
    // Offset: 0x52F9BEC
    bool get_stripScreenCoordOverrideVariants();
    // public System.Void set_stripScreenCoordOverrideVariants(System.Boolean value)
    // Offset: 0x52F9BF4
    void set_stripScreenCoordOverrideVariants(bool value);
    // public UnityEngine.Rendering.ShaderVariantLogLevel get_shaderVariantLogLevel()
    // Offset: 0x52F9C00
    ::UnityEngine::Rendering::ShaderVariantLogLevel get_shaderVariantLogLevel();
    // public System.Void set_shaderVariantLogLevel(UnityEngine.Rendering.ShaderVariantLogLevel value)
    // Offset: 0x52F9C08
    void set_shaderVariantLogLevel(::UnityEngine::Rendering::ShaderVariantLogLevel value);
    // public System.Boolean get_exportShaderVariants()
    // Offset: 0x52F9C10
    bool get_exportShaderVariants();
    // public System.Void set_exportShaderVariants(System.Boolean value)
    // Offset: 0x52F9C18
    void set_exportShaderVariants(bool value);
    // public System.Void .ctor()
    // Offset: 0x52F9C24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UniversalRenderPipelineGlobalSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UniversalRenderPipelineGlobalSettings*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x52F9CE4
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings
  #pragma pack(pop)
  static check_size<sizeof(UniversalRenderPipelineGlobalSettings), 132 + sizeof(bool)> __UnityEngine_Rendering_Universal_UniversalRenderPipelineGlobalSettingsSizeCheck;
  static_assert(sizeof(UniversalRenderPipelineGlobalSettings) == 0x85);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::OnBeforeSerialize
// Il2CppName: OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::OnAfterDeserialize
// Il2CppName: OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings* (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::UpdateGraphicsSettings
// Il2CppName: UpdateGraphicsSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::UpdateGraphicsSettings)> {
  static const MethodInfo* get() {
    static auto* newSettings = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "UniversalRenderPipelineGlobalSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "UpdateGraphicsSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newSettings});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_renderingLayerNames
// Il2CppName: get_renderingLayerNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_renderingLayerNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "get_renderingLayerNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_prefixedRenderingLayerNames
// Il2CppName: get_prefixedRenderingLayerNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_prefixedRenderingLayerNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "get_prefixedRenderingLayerNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_renderingLayerMaskNames
// Il2CppName: get_renderingLayerMaskNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_renderingLayerMaskNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "get_renderingLayerMaskNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_prefixedRenderingLayerMaskNames
// Il2CppName: get_prefixedRenderingLayerMaskNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_prefixedRenderingLayerMaskNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "get_prefixedRenderingLayerMaskNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_validRenderingLayers
// Il2CppName: get_validRenderingLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_validRenderingLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "get_validRenderingLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::UpdateRenderingLayerNames
// Il2CppName: UpdateRenderingLayerNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::UpdateRenderingLayerNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "UpdateRenderingLayerNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_prefixedLightLayerNames
// Il2CppName: get_prefixedLightLayerNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_prefixedLightLayerNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "get_prefixedLightLayerNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_lightLayerNames
// Il2CppName: get_lightLayerNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_lightLayerNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "get_lightLayerNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::ResetRenderingLayerNames
// Il2CppName: ResetRenderingLayerNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::ResetRenderingLayerNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "ResetRenderingLayerNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_stripDebugVariants
// Il2CppName: get_stripDebugVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_stripDebugVariants)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "get_stripDebugVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::set_stripDebugVariants
// Il2CppName: set_stripDebugVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::set_stripDebugVariants)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "set_stripDebugVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_stripUnusedPostProcessingVariants
// Il2CppName: get_stripUnusedPostProcessingVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_stripUnusedPostProcessingVariants)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "get_stripUnusedPostProcessingVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::set_stripUnusedPostProcessingVariants
// Il2CppName: set_stripUnusedPostProcessingVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::set_stripUnusedPostProcessingVariants)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "set_stripUnusedPostProcessingVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_stripUnusedVariants
// Il2CppName: get_stripUnusedVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_stripUnusedVariants)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "get_stripUnusedVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::set_stripUnusedVariants
// Il2CppName: set_stripUnusedVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::set_stripUnusedVariants)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "set_stripUnusedVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_stripUnusedLODCrossFadeVariants
// Il2CppName: get_stripUnusedLODCrossFadeVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_stripUnusedLODCrossFadeVariants)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "get_stripUnusedLODCrossFadeVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::set_stripUnusedLODCrossFadeVariants
// Il2CppName: set_stripUnusedLODCrossFadeVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::set_stripUnusedLODCrossFadeVariants)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "set_stripUnusedLODCrossFadeVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_stripScreenCoordOverrideVariants
// Il2CppName: get_stripScreenCoordOverrideVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_stripScreenCoordOverrideVariants)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "get_stripScreenCoordOverrideVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::set_stripScreenCoordOverrideVariants
// Il2CppName: set_stripScreenCoordOverrideVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::set_stripScreenCoordOverrideVariants)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "set_stripScreenCoordOverrideVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_shaderVariantLogLevel
// Il2CppName: get_shaderVariantLogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::ShaderVariantLogLevel (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_shaderVariantLogLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "get_shaderVariantLogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::set_shaderVariantLogLevel
// Il2CppName: set_shaderVariantLogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)(::UnityEngine::Rendering::ShaderVariantLogLevel)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::set_shaderVariantLogLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShaderVariantLogLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "set_shaderVariantLogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_exportShaderVariants
// Il2CppName: get_exportShaderVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::get_exportShaderVariants)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "get_exportShaderVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::set_exportShaderVariants
// Il2CppName: set_exportShaderVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::*)(bool)>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::set_exportShaderVariants)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), "set_exportShaderVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::UniversalRenderPipelineGlobalSettings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
