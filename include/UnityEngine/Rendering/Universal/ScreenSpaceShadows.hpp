// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRendererFeature
#include "UnityEngine/Rendering/Universal/ScriptableRendererFeature.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ScreenSpaceShadowsSettings
  class ScreenSpaceShadowsSettings;
  // Forward declaring type: ScriptableRenderer
  class ScriptableRenderer;
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ScreenSpaceShadows
  class ScreenSpaceShadows;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::ScreenSpaceShadows);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ScreenSpaceShadows*, "UnityEngine.Rendering.Universal", "ScreenSpaceShadows");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.ScreenSpaceShadows
  // [TokenAttribute] Offset: FFFFFFFF
  // [TooltipAttribute] Offset: FFFFFFFF
  // [DisallowMultipleRendererFeature] Offset: FFFFFFFF
  class ScreenSpaceShadows : public ::UnityEngine::Rendering::Universal::ScriptableRendererFeature {
    public:
    // Writing base type padding for base size: 0x19 to desired offset: 0x20
    char ___base_padding[0x7] = {};
    // Nested type: ::UnityEngine::Rendering::Universal::ScreenSpaceShadows::ScreenSpaceShadowsPass
    class ScreenSpaceShadowsPass;
    // Nested type: ::UnityEngine::Rendering::Universal::ScreenSpaceShadows::ScreenSpaceShadowsPostPass
    class ScreenSpaceShadowsPostPass;
    public:
    // private UnityEngine.Shader m_Shader
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Shader* m_Shader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Rendering.Universal.ScreenSpaceShadowsSettings m_Settings
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Rendering::Universal::ScreenSpaceShadowsSettings* m_Settings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ScreenSpaceShadowsSettings*) == 0x8);
    // private UnityEngine.Material m_Material
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* m_Material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Rendering.Universal.ScreenSpaceShadows/ScreenSpaceShadowsPass m_SSShadowsPass
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Rendering::Universal::ScreenSpaceShadows::ScreenSpaceShadowsPass* m_SSShadowsPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ScreenSpaceShadows::ScreenSpaceShadowsPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.ScreenSpaceShadows/ScreenSpaceShadowsPostPass m_SSShadowsPostPass
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Rendering::Universal::ScreenSpaceShadows::ScreenSpaceShadowsPostPass* m_SSShadowsPostPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::ScreenSpaceShadows::ScreenSpaceShadowsPostPass*) == 0x8);
    public:
    // static field const value: static private System.String k_ShaderName
    static constexpr const char* k_ShaderName = "Hidden/Universal Render Pipeline/ScreenSpaceShadows";
    // Get static field: static private System.String k_ShaderName
    static ::StringW _get_k_ShaderName();
    // Set static field: static private System.String k_ShaderName
    static void _set_k_ShaderName(::StringW value);
    // Get instance field reference: private UnityEngine.Shader m_Shader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_Shader();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ScreenSpaceShadowsSettings m_Settings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ScreenSpaceShadowsSettings*& dyn_m_Settings();
    // Get instance field reference: private UnityEngine.Material m_Material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_Material();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ScreenSpaceShadows/ScreenSpaceShadowsPass m_SSShadowsPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ScreenSpaceShadows::ScreenSpaceShadowsPass*& dyn_m_SSShadowsPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.ScreenSpaceShadows/ScreenSpaceShadowsPostPass m_SSShadowsPostPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::ScreenSpaceShadows::ScreenSpaceShadowsPostPass*& dyn_m_SSShadowsPostPass();
    // private System.Boolean LoadMaterial()
    // Offset: 0x52D7398
    bool LoadMaterial();
    // public override System.Void Create()
    // Offset: 0x52D71D8
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Void ScriptableRendererFeature::Create()
    void Create();
    // public override System.Void AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52D750C
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Void ScriptableRendererFeature::AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void AddRenderPasses(::UnityEngine::Rendering::Universal::ScriptableRenderer* renderer, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x52D77CC
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Void ScriptableRendererFeature::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public System.Void .ctor()
    // Offset: 0x52D7868
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Void ScriptableRendererFeature::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScreenSpaceShadows* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::ScreenSpaceShadows::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScreenSpaceShadows*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.ScreenSpaceShadows
  #pragma pack(pop)
  static check_size<sizeof(ScreenSpaceShadows), 64 + sizeof(::UnityEngine::Rendering::Universal::ScreenSpaceShadows::ScreenSpaceShadowsPostPass*)> __UnityEngine_Rendering_Universal_ScreenSpaceShadowsSizeCheck;
  static_assert(sizeof(ScreenSpaceShadows) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceShadows::LoadMaterial
// Il2CppName: LoadMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScreenSpaceShadows::*)()>(&UnityEngine::Rendering::Universal::ScreenSpaceShadows::LoadMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScreenSpaceShadows*), "LoadMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceShadows::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScreenSpaceShadows::*)()>(&UnityEngine::Rendering::Universal::ScreenSpaceShadows::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScreenSpaceShadows*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceShadows::AddRenderPasses
// Il2CppName: AddRenderPasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScreenSpaceShadows::*)(::UnityEngine::Rendering::Universal::ScriptableRenderer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::ScreenSpaceShadows::AddRenderPasses)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScreenSpaceShadows*), "AddRenderPasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceShadows::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScreenSpaceShadows::*)(bool)>(&UnityEngine::Rendering::Universal::ScreenSpaceShadows::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScreenSpaceShadows*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScreenSpaceShadows::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
