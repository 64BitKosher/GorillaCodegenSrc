// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.DecalUpdateCachedSystem
#include "UnityEngine/Rendering/Universal/DecalUpdateCachedSystem.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Jobs.IJobParallelForTransform
#include "UnityEngine/Jobs/IJobParallelForTransform.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: Unity.Mathematics.float3
#include "Unity/Mathematics/float3.hpp"
// Including type: Unity.Mathematics.quaternion
#include "Unity/Mathematics/quaternion.hpp"
// Including type: UnityEngine.Rendering.Universal.DecalScaleMode
#include "UnityEngine/Rendering/Universal/DecalScaleMode.hpp"
// Including type: Unity.Mathematics.float4x4
#include "Unity/Mathematics/float4x4.hpp"
// Including type: UnityEngine.BoundingSphere
#include "UnityEngine/BoundingSphere.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Jobs
namespace UnityEngine::Jobs {
  // Forward declaring type: TransformAccess
  struct TransformAccess;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob, "UnityEngine.Rendering.Universal", "DecalUpdateCachedSystem/UpdateTransformsJob");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.DecalUpdateCachedSystem/UpdateTransformsJob
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct DecalUpdateCachedSystem::UpdateTransformsJob/*, public ::System::ValueType, public ::UnityEngine::Jobs::IJobParallelForTransform*/ {
    public:
    public:
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float3> positions
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float3> positions;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.quaternion> rotations
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::quaternion> rotations;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float3> scales
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float3> scales;
    // public Unity.Collections.NativeArray`1<System.Boolean> dirty
    // Size: 0xFFFFFFFF
    // Offset: 0x30
    ::Unity::Collections::NativeArray_1<bool> dirty;
    // public Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.DecalScaleMode> scaleModes
    // Size: 0xFFFFFFFF
    // Offset: 0x40
    ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::DecalScaleMode> scaleModes;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> sizeOffsets
    // Size: 0xFFFFFFFF
    // Offset: 0x50
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> sizeOffsets;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> decalToWorlds
    // Size: 0xFFFFFFFF
    // Offset: 0x60
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> decalToWorlds;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> normalToWorlds
    // Size: 0xFFFFFFFF
    // Offset: 0x70
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> normalToWorlds;
    // public Unity.Collections.NativeArray`1<UnityEngine.BoundingSphere> boundingSpheres
    // Size: 0xFFFFFFFF
    // Offset: 0x80
    ::Unity::Collections::NativeArray_1<::UnityEngine::BoundingSphere> boundingSpheres;
    // public System.Single minDistance
    // Size: 0x4
    // Offset: 0x90
    float minDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: UpdateTransformsJob
    constexpr UpdateTransformsJob(::Unity::Collections::NativeArray_1<::Unity::Mathematics::float3> positions_ = {}, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::quaternion> rotations_ = {}, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float3> scales_ = {}, ::Unity::Collections::NativeArray_1<bool> dirty_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::DecalScaleMode> scaleModes_ = {}, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> sizeOffsets_ = {}, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> decalToWorlds_ = {}, ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> normalToWorlds_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::BoundingSphere> boundingSpheres_ = {}, float minDistance_ = {}) noexcept : positions{positions_}, rotations{rotations_}, scales{scales_}, dirty{dirty_}, scaleModes{scaleModes_}, sizeOffsets{sizeOffsets_}, decalToWorlds{decalToWorlds_}, normalToWorlds{normalToWorlds_}, boundingSpheres{boundingSpheres_}, minDistance{minDistance_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Jobs::IJobParallelForTransform
    operator ::UnityEngine::Jobs::IJobParallelForTransform() noexcept {
      return *reinterpret_cast<::UnityEngine::Jobs::IJobParallelForTransform*>(this);
    }
    // Get static field: static private readonly Unity.Mathematics.quaternion k_MinusYtoZRotation
    static ::Unity::Mathematics::quaternion _get_k_MinusYtoZRotation();
    // Set static field: static private readonly Unity.Mathematics.quaternion k_MinusYtoZRotation
    static void _set_k_MinusYtoZRotation(::Unity::Mathematics::quaternion value);
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float3> positions
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float3>& dyn_positions();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.quaternion> rotations
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::quaternion>& dyn_rotations();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float3> scales
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float3>& dyn_scales();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Boolean> dirty
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<bool>& dyn_dirty();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.DecalScaleMode> scaleModes
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::DecalScaleMode>& dyn_scaleModes();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> sizeOffsets
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4>& dyn_sizeOffsets();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> decalToWorlds
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4>& dyn_decalToWorlds();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> normalToWorlds
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4>& dyn_normalToWorlds();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.BoundingSphere> boundingSpheres
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::BoundingSphere>& dyn_boundingSpheres();
    // Get instance field reference: public System.Single minDistance
    [[deprecated("Use field access instead!")]] float& dyn_minDistance();
    // private System.Single DistanceBetweenQuaternions(Unity.Mathematics.quaternion a, Unity.Mathematics.quaternion b)
    // Offset: 0x52A8B80
    float DistanceBetweenQuaternions(::Unity::Mathematics::quaternion a, ::Unity::Mathematics::quaternion b);
    // public System.Void Execute(System.Int32 index, UnityEngine.Jobs.TransformAccess transform)
    // Offset: 0x52A8BB0
    void Execute(int index, ::UnityEngine::Jobs::TransformAccess transform);
    // private UnityEngine.BoundingSphere GetDecalProjectBoundingSphere(UnityEngine.Matrix4x4 decalToWorld)
    // Offset: 0x52A90F8
    ::UnityEngine::BoundingSphere GetDecalProjectBoundingSphere(::UnityEngine::Matrix4x4 decalToWorld);
    // static private System.Void .cctor()
    // Offset: 0x52A9284
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.DecalUpdateCachedSystem/UpdateTransformsJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob::DistanceBetweenQuaternions
// Il2CppName: DistanceBetweenQuaternions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob::*)(::Unity::Mathematics::quaternion, ::Unity::Mathematics::quaternion)>(&UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob::DistanceBetweenQuaternions)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "quaternion")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob), "DistanceBetweenQuaternions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob::*)(int, ::UnityEngine::Jobs::TransformAccess)>(&UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob::Execute)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine.Jobs", "TransformAccess")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, transform});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob::GetDecalProjectBoundingSphere
// Il2CppName: GetDecalProjectBoundingSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::BoundingSphere (UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob::*)(::UnityEngine::Matrix4x4)>(&UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob::GetDecalProjectBoundingSphere)> {
  static const MethodInfo* get() {
    static auto* decalToWorld = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob), "GetDecalProjectBoundingSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{decalToWorld});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalUpdateCachedSystem::UpdateTransformsJob), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
