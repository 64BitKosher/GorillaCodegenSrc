// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalEntityManager
  class DecalEntityManager;
  // Forward declaring type: DecalEntityChunk
  class DecalEntityChunk;
  // Forward declaring type: DecalCachedChunk
  class DecalCachedChunk;
  // Forward declaring type: DecalDrawCallChunk
  class DecalDrawCallChunk;
  // Forward declaring type: CameraData
  struct CameraData;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalDrawSystem
  class DecalDrawSystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::DecalDrawSystem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DecalDrawSystem*, "UnityEngine.Rendering.Universal", "DecalDrawSystem");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.DecalDrawSystem
  // [TokenAttribute] Offset: FFFFFFFF
  class DecalDrawSystem : public ::Il2CppObject {
    public:
    public:
    // protected UnityEngine.Rendering.Universal.DecalEntityManager m_EntityManager
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Rendering::Universal::DecalEntityManager* m_EntityManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalEntityManager*) == 0x8);
    // private UnityEngine.Matrix4x4[] m_WorldToDecals
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Matrix4x4> m_WorldToDecals;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // private UnityEngine.Matrix4x4[] m_NormalToDecals
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Matrix4x4> m_NormalToDecals;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // private System.Single[] m_DecalLayerMasks
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<float> m_DecalLayerMasks;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private UnityEngine.Rendering.ProfilingSampler m_Sampler
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Rendering::ProfilingSampler* m_Sampler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // private UnityEngine.Material <overrideMaterial>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Material* overrideMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    public:
    // Get instance field reference: protected UnityEngine.Rendering.Universal.DecalEntityManager m_EntityManager
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalEntityManager*& dyn_m_EntityManager();
    // Get instance field reference: private UnityEngine.Matrix4x4[] m_WorldToDecals
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn_m_WorldToDecals();
    // Get instance field reference: private UnityEngine.Matrix4x4[] m_NormalToDecals
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn_m_NormalToDecals();
    // Get instance field reference: private System.Single[] m_DecalLayerMasks
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_DecalLayerMasks();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler m_Sampler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_m_Sampler();
    // Get instance field reference: private UnityEngine.Material <overrideMaterial>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_$overrideMaterial$k__BackingField();
    // public UnityEngine.Material get_overrideMaterial()
    // Offset: 0x52A369C
    ::UnityEngine::Material* get_overrideMaterial();
    // public System.Void set_overrideMaterial(UnityEngine.Material value)
    // Offset: 0x52A36A4
    void set_overrideMaterial(::UnityEngine::Material* value);
    // public System.Void .ctor(System.String sampler, UnityEngine.Rendering.Universal.DecalEntityManager entityManager)
    // Offset: 0x52A36AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DecalDrawSystem* New_ctor(::StringW sampler, ::UnityEngine::Rendering::Universal::DecalEntityManager* entityManager) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DecalDrawSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DecalDrawSystem*, creationType>(sampler, entityManager)));
    }
    // public System.Void Execute(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x52A37C0
    void Execute(::UnityEngine::Rendering::CommandBuffer* cmd);
    // protected UnityEngine.Material GetMaterial(UnityEngine.Rendering.Universal.DecalEntityChunk decalEntityChunk)
    // Offset: 0x52A3B48
    ::UnityEngine::Material* GetMaterial(::UnityEngine::Rendering::Universal::DecalEntityChunk* decalEntityChunk);
    // protected System.Int32 GetPassIndex(UnityEngine.Rendering.Universal.DecalCachedChunk decalCachedChunk)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetPassIndex(::UnityEngine::Rendering::Universal::DecalCachedChunk* decalCachedChunk);
    // private System.Void Execute(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.Universal.DecalEntityChunk decalEntityChunk, UnityEngine.Rendering.Universal.DecalCachedChunk decalCachedChunk, UnityEngine.Rendering.Universal.DecalDrawCallChunk decalDrawCallChunk, System.Int32 count)
    // Offset: 0x52A39E4
    void Execute(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::Universal::DecalEntityChunk* decalEntityChunk, ::UnityEngine::Rendering::Universal::DecalCachedChunk* decalCachedChunk, ::UnityEngine::Rendering::Universal::DecalDrawCallChunk* decalDrawCallChunk, int count);
    // private System.Void Draw(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.Universal.DecalEntityChunk decalEntityChunk, UnityEngine.Rendering.Universal.DecalCachedChunk decalCachedChunk, UnityEngine.Rendering.Universal.DecalDrawCallChunk decalDrawCallChunk, System.Int32 passIndex)
    // Offset: 0x52A3DBC
    void Draw(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::Universal::DecalEntityChunk* decalEntityChunk, ::UnityEngine::Rendering::Universal::DecalCachedChunk* decalCachedChunk, ::UnityEngine::Rendering::Universal::DecalDrawCallChunk* decalDrawCallChunk, int passIndex);
    // private System.Void DrawInstanced(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.Universal.DecalEntityChunk decalEntityChunk, UnityEngine.Rendering.Universal.DecalCachedChunk decalCachedChunk, UnityEngine.Rendering.Universal.DecalDrawCallChunk decalDrawCallChunk, System.Int32 passIndex)
    // Offset: 0x52A3B60
    void DrawInstanced(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Rendering::Universal::DecalEntityChunk* decalEntityChunk, ::UnityEngine::Rendering::Universal::DecalCachedChunk* decalCachedChunk, ::UnityEngine::Rendering::Universal::DecalDrawCallChunk* decalDrawCallChunk, int passIndex);
    // public System.Void Execute(in UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52A40C8
    void Execute(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // private System.Void Execute(in UnityEngine.Rendering.Universal.CameraData cameraData, UnityEngine.Rendering.Universal.DecalEntityChunk decalEntityChunk, UnityEngine.Rendering.Universal.DecalCachedChunk decalCachedChunk, UnityEngine.Rendering.Universal.DecalDrawCallChunk decalDrawCallChunk, System.Int32 count)
    // Offset: 0x52A42EC
    void Execute(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, ::UnityEngine::Rendering::Universal::DecalEntityChunk* decalEntityChunk, ::UnityEngine::Rendering::Universal::DecalCachedChunk* decalCachedChunk, ::UnityEngine::Rendering::Universal::DecalDrawCallChunk* decalDrawCallChunk, int count);
    // private System.Void Draw(in UnityEngine.Rendering.Universal.CameraData cameraData, UnityEngine.Rendering.Universal.DecalEntityChunk decalEntityChunk, UnityEngine.Rendering.Universal.DecalCachedChunk decalCachedChunk, UnityEngine.Rendering.Universal.DecalDrawCallChunk decalDrawCallChunk)
    // Offset: 0x52A46C0
    void Draw(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, ::UnityEngine::Rendering::Universal::DecalEntityChunk* decalEntityChunk, ::UnityEngine::Rendering::Universal::DecalCachedChunk* decalCachedChunk, ::UnityEngine::Rendering::Universal::DecalDrawCallChunk* decalDrawCallChunk);
    // private System.Void DrawInstanced(in UnityEngine.Rendering.Universal.CameraData cameraData, UnityEngine.Rendering.Universal.DecalEntityChunk decalEntityChunk, UnityEngine.Rendering.Universal.DecalCachedChunk decalCachedChunk, UnityEngine.Rendering.Universal.DecalDrawCallChunk decalDrawCallChunk)
    // Offset: 0x52A443C
    void DrawInstanced(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, ::UnityEngine::Rendering::Universal::DecalEntityChunk* decalEntityChunk, ::UnityEngine::Rendering::Universal::DecalCachedChunk* decalCachedChunk, ::UnityEngine::Rendering::Universal::DecalDrawCallChunk* decalDrawCallChunk);
  }; // UnityEngine.Rendering.Universal.DecalDrawSystem
  #pragma pack(pop)
  static check_size<sizeof(DecalDrawSystem), 56 + sizeof(::UnityEngine::Material*)> __UnityEngine_Rendering_Universal_DecalDrawSystemSizeCheck;
  static_assert(sizeof(DecalDrawSystem) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawSystem::get_overrideMaterial
// Il2CppName: get_overrideMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::DecalDrawSystem::*)()>(&UnityEngine::Rendering::Universal::DecalDrawSystem::get_overrideMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawSystem*), "get_overrideMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawSystem::set_overrideMaterial
// Il2CppName: set_overrideMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalDrawSystem::*)(::UnityEngine::Material*)>(&UnityEngine::Rendering::Universal::DecalDrawSystem::set_overrideMaterial)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawSystem*), "set_overrideMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawSystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawSystem::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalDrawSystem::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::DecalDrawSystem::Execute)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawSystem*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawSystem::GetMaterial
// Il2CppName: GetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Rendering::Universal::DecalDrawSystem::*)(::UnityEngine::Rendering::Universal::DecalEntityChunk*)>(&UnityEngine::Rendering::Universal::DecalDrawSystem::GetMaterial)> {
  static const MethodInfo* get() {
    static auto* decalEntityChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalEntityChunk")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawSystem*), "GetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{decalEntityChunk});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawSystem::GetPassIndex
// Il2CppName: GetPassIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::DecalDrawSystem::*)(::UnityEngine::Rendering::Universal::DecalCachedChunk*)>(&UnityEngine::Rendering::Universal::DecalDrawSystem::GetPassIndex)> {
  static const MethodInfo* get() {
    static auto* decalCachedChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalCachedChunk")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawSystem*), "GetPassIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{decalCachedChunk});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawSystem::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalDrawSystem::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::Universal::DecalEntityChunk*, ::UnityEngine::Rendering::Universal::DecalCachedChunk*, ::UnityEngine::Rendering::Universal::DecalDrawCallChunk*, int)>(&UnityEngine::Rendering::Universal::DecalDrawSystem::Execute)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* decalEntityChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalEntityChunk")->byval_arg;
    static auto* decalCachedChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalCachedChunk")->byval_arg;
    static auto* decalDrawCallChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalDrawCallChunk")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawSystem*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, decalEntityChunk, decalCachedChunk, decalDrawCallChunk, count});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawSystem::Draw
// Il2CppName: Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalDrawSystem::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::Universal::DecalEntityChunk*, ::UnityEngine::Rendering::Universal::DecalCachedChunk*, ::UnityEngine::Rendering::Universal::DecalDrawCallChunk*, int)>(&UnityEngine::Rendering::Universal::DecalDrawSystem::Draw)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* decalEntityChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalEntityChunk")->byval_arg;
    static auto* decalCachedChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalCachedChunk")->byval_arg;
    static auto* decalDrawCallChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalDrawCallChunk")->byval_arg;
    static auto* passIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawSystem*), "Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, decalEntityChunk, decalCachedChunk, decalDrawCallChunk, passIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawSystem::DrawInstanced
// Il2CppName: DrawInstanced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalDrawSystem::*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Rendering::Universal::DecalEntityChunk*, ::UnityEngine::Rendering::Universal::DecalCachedChunk*, ::UnityEngine::Rendering::Universal::DecalDrawCallChunk*, int)>(&UnityEngine::Rendering::Universal::DecalDrawSystem::DrawInstanced)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* decalEntityChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalEntityChunk")->byval_arg;
    static auto* decalCachedChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalCachedChunk")->byval_arg;
    static auto* decalDrawCallChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalDrawCallChunk")->byval_arg;
    static auto* passIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawSystem*), "DrawInstanced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, decalEntityChunk, decalCachedChunk, decalDrawCallChunk, passIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawSystem::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalDrawSystem::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::DecalDrawSystem::Execute)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawSystem*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawSystem::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalDrawSystem::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>, ::UnityEngine::Rendering::Universal::DecalEntityChunk*, ::UnityEngine::Rendering::Universal::DecalCachedChunk*, ::UnityEngine::Rendering::Universal::DecalDrawCallChunk*, int)>(&UnityEngine::Rendering::Universal::DecalDrawSystem::Execute)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* decalEntityChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalEntityChunk")->byval_arg;
    static auto* decalCachedChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalCachedChunk")->byval_arg;
    static auto* decalDrawCallChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalDrawCallChunk")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawSystem*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData, decalEntityChunk, decalCachedChunk, decalDrawCallChunk, count});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawSystem::Draw
// Il2CppName: Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalDrawSystem::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>, ::UnityEngine::Rendering::Universal::DecalEntityChunk*, ::UnityEngine::Rendering::Universal::DecalCachedChunk*, ::UnityEngine::Rendering::Universal::DecalDrawCallChunk*)>(&UnityEngine::Rendering::Universal::DecalDrawSystem::Draw)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* decalEntityChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalEntityChunk")->byval_arg;
    static auto* decalCachedChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalCachedChunk")->byval_arg;
    static auto* decalDrawCallChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalDrawCallChunk")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawSystem*), "Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData, decalEntityChunk, decalCachedChunk, decalDrawCallChunk});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawSystem::DrawInstanced
// Il2CppName: DrawInstanced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalDrawSystem::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>, ::UnityEngine::Rendering::Universal::DecalEntityChunk*, ::UnityEngine::Rendering::Universal::DecalCachedChunk*, ::UnityEngine::Rendering::Universal::DecalDrawCallChunk*)>(&UnityEngine::Rendering::Universal::DecalDrawSystem::DrawInstanced)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* decalEntityChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalEntityChunk")->byval_arg;
    static auto* decalCachedChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalCachedChunk")->byval_arg;
    static auto* decalDrawCallChunk = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DecalDrawCallChunk")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawSystem*), "DrawInstanced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData, decalEntityChunk, decalCachedChunk, decalDrawCallChunk});
  }
};
