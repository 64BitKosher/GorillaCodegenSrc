// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderer
#include "UnityEngine/Rendering/Universal/ScriptableRenderer.hpp"
// Including type: UnityEngine.Rendering.Universal.PostProcessPasses
#include "UnityEngine/Rendering/Universal/PostProcessPasses.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: Render2DLightingPass
  class Render2DLightingPass;
  // Forward declaring type: PixelPerfectBackgroundPass
  class PixelPerfectBackgroundPass;
  // Forward declaring type: UpscalePass
  class UpscalePass;
  // Forward declaring type: DrawScreenSpaceUIPass
  class DrawScreenSpaceUIPass;
  // Forward declaring type: Light2DCullResult
  class Light2DCullResult;
  // Forward declaring type: Renderer2DData
  class Renderer2DData;
  // Forward declaring type: PostProcessPass
  class PostProcessPass;
  // Forward declaring type: CameraData
  struct CameraData;
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal::Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // Forward declaring type: FinalBlitPass
  class FinalBlitPass;
  // Forward declaring type: ColorGradingLutPass
  class ColorGradingLutPass;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
  // Forward declaring type: ScriptableCullingParameters
  struct ScriptableCullingParameters;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: FilterMode
  struct FilterMode;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: Renderer2D
  class Renderer2D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::Renderer2D);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::Renderer2D*, "UnityEngine.Rendering.Universal", "Renderer2D");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x258
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.Renderer2D
  // [TokenAttribute] Offset: FFFFFFFF
  class Renderer2D : public ::UnityEngine::Rendering::Universal::ScriptableRenderer {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::Renderer2D::$$c
    class $$c;
    public:
    // private UnityEngine.Rendering.Universal.Render2DLightingPass m_Render2DLightingPass
    // Size: 0x8
    // Offset: 0x1A8
    ::UnityEngine::Rendering::Universal::Render2DLightingPass* m_Render2DLightingPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Render2DLightingPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.PixelPerfectBackgroundPass m_PixelPerfectBackgroundPass
    // Size: 0x8
    // Offset: 0x1B0
    ::UnityEngine::Rendering::Universal::PixelPerfectBackgroundPass* m_PixelPerfectBackgroundPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::PixelPerfectBackgroundPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.UpscalePass m_UpscalePass
    // Size: 0x8
    // Offset: 0x1B8
    ::UnityEngine::Rendering::Universal::UpscalePass* m_UpscalePass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::UpscalePass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.FinalBlitPass m_FinalBlitPass
    // Size: 0x8
    // Offset: 0x1C0
    ::UnityEngine::Rendering::Universal::Internal::FinalBlitPass* m_FinalBlitPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::FinalBlitPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.DrawScreenSpaceUIPass m_DrawOffscreenUIPass
    // Size: 0x8
    // Offset: 0x1C8
    ::UnityEngine::Rendering::Universal::DrawScreenSpaceUIPass* m_DrawOffscreenUIPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DrawScreenSpaceUIPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.DrawScreenSpaceUIPass m_DrawOverlayUIPass
    // Size: 0x8
    // Offset: 0x1D0
    ::UnityEngine::Rendering::Universal::DrawScreenSpaceUIPass* m_DrawOverlayUIPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DrawScreenSpaceUIPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.Light2DCullResult m_LightCullResult
    // Size: 0x8
    // Offset: 0x1D8
    ::UnityEngine::Rendering::Universal::Light2DCullResult* m_LightCullResult;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Light2DCullResult*) == 0x8);
    // private System.Boolean m_UseDepthStencilBuffer
    // Size: 0x1
    // Offset: 0x1E0
    bool m_UseDepthStencilBuffer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_CreateColorTexture
    // Size: 0x1
    // Offset: 0x1E1
    bool m_CreateColorTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_CreateDepthTexture
    // Size: 0x1
    // Offset: 0x1E2
    bool m_CreateDepthTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_CreateDepthTexture and: m_ColorTextureHandle
    char __padding9[0x5] = {};
    // private UnityEngine.Rendering.RTHandle m_ColorTextureHandle
    // Size: 0x8
    // Offset: 0x1E8
    ::UnityEngine::Rendering::RTHandle* m_ColorTextureHandle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Rendering.RTHandle m_DepthTextureHandle
    // Size: 0x8
    // Offset: 0x1F0
    ::UnityEngine::Rendering::RTHandle* m_DepthTextureHandle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RTHandle*) == 0x8);
    // private UnityEngine.Material m_BlitMaterial
    // Size: 0x8
    // Offset: 0x1F8
    ::UnityEngine::Material* m_BlitMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material m_BlitHDRMaterial
    // Size: 0x8
    // Offset: 0x200
    ::UnityEngine::Material* m_BlitHDRMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material m_SamplingMaterial
    // Size: 0x8
    // Offset: 0x208
    ::UnityEngine::Material* m_SamplingMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Rendering.Universal.Renderer2DData m_Renderer2DData
    // Size: 0x8
    // Offset: 0x210
    ::UnityEngine::Rendering::Universal::Renderer2DData* m_Renderer2DData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Renderer2DData*) == 0x8);
    // private UnityEngine.Rendering.Universal.PostProcessPasses m_PostProcessPasses
    // Size: 0x40
    // Offset: 0x218
    ::UnityEngine::Rendering::Universal::PostProcessPasses m_PostProcessPasses;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::PostProcessPasses) == 0x40);
    public:
    // static field const value: static System.Int32 k_DepthBufferBits
    static constexpr const int k_DepthBufferBits = 32;
    // Get static field: static System.Int32 k_DepthBufferBits
    static int _get_k_DepthBufferBits();
    // Set static field: static System.Int32 k_DepthBufferBits
    static void _set_k_DepthBufferBits(int value);
    // static field const value: static private System.Int32 k_FinalBlitPassQueueOffset
    static constexpr const int k_FinalBlitPassQueueOffset = 1;
    // Get static field: static private System.Int32 k_FinalBlitPassQueueOffset
    static int _get_k_FinalBlitPassQueueOffset();
    // Set static field: static private System.Int32 k_FinalBlitPassQueueOffset
    static void _set_k_FinalBlitPassQueueOffset(int value);
    // static field const value: static private System.Int32 k_AfterFinalBlitPassQueueOffset
    static constexpr const int k_AfterFinalBlitPassQueueOffset = 2;
    // Get static field: static private System.Int32 k_AfterFinalBlitPassQueueOffset
    static int _get_k_AfterFinalBlitPassQueueOffset();
    // Set static field: static private System.Int32 k_AfterFinalBlitPassQueueOffset
    static void _set_k_AfterFinalBlitPassQueueOffset(int value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    static ::UnityEngine::Rendering::ProfilingSampler* _get_m_ProfilingSampler();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    static void _set_m_ProfilingSampler(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get instance field reference: private UnityEngine.Rendering.Universal.Render2DLightingPass m_Render2DLightingPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Render2DLightingPass*& dyn_m_Render2DLightingPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.PixelPerfectBackgroundPass m_PixelPerfectBackgroundPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::PixelPerfectBackgroundPass*& dyn_m_PixelPerfectBackgroundPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.UpscalePass m_UpscalePass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::UpscalePass*& dyn_m_UpscalePass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.FinalBlitPass m_FinalBlitPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::FinalBlitPass*& dyn_m_FinalBlitPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DrawScreenSpaceUIPass m_DrawOffscreenUIPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DrawScreenSpaceUIPass*& dyn_m_DrawOffscreenUIPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DrawScreenSpaceUIPass m_DrawOverlayUIPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DrawScreenSpaceUIPass*& dyn_m_DrawOverlayUIPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Light2DCullResult m_LightCullResult
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Light2DCullResult*& dyn_m_LightCullResult();
    // Get instance field reference: private System.Boolean m_UseDepthStencilBuffer
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseDepthStencilBuffer();
    // Get instance field reference: private System.Boolean m_CreateColorTexture
    [[deprecated("Use field access instead!")]] bool& dyn_m_CreateColorTexture();
    // Get instance field reference: private System.Boolean m_CreateDepthTexture
    [[deprecated("Use field access instead!")]] bool& dyn_m_CreateDepthTexture();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_ColorTextureHandle
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_ColorTextureHandle();
    // Get instance field reference: private UnityEngine.Rendering.RTHandle m_DepthTextureHandle
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RTHandle*& dyn_m_DepthTextureHandle();
    // Get instance field reference: private UnityEngine.Material m_BlitMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_BlitMaterial();
    // Get instance field reference: private UnityEngine.Material m_BlitHDRMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_BlitHDRMaterial();
    // Get instance field reference: private UnityEngine.Material m_SamplingMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_SamplingMaterial();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Renderer2DData m_Renderer2DData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Renderer2DData*& dyn_m_Renderer2DData();
    // Get instance field reference: private UnityEngine.Rendering.Universal.PostProcessPasses m_PostProcessPasses
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::PostProcessPasses& dyn_m_PostProcessPasses();
    // System.Boolean get_createColorTexture()
    // Offset: 0x528ADC0
    bool get_createColorTexture();
    // System.Boolean get_createDepthTexture()
    // Offset: 0x528ADC8
    bool get_createDepthTexture();
    // UnityEngine.Rendering.Universal.Internal.ColorGradingLutPass get_colorGradingLutPass()
    // Offset: 0x528ADD0
    ::UnityEngine::Rendering::Universal::Internal::ColorGradingLutPass* get_colorGradingLutPass();
    // UnityEngine.Rendering.Universal.PostProcessPass get_postProcessPass()
    // Offset: 0x528ADD8
    ::UnityEngine::Rendering::Universal::PostProcessPass* get_postProcessPass();
    // UnityEngine.Rendering.Universal.PostProcessPass get_finalPostProcessPass()
    // Offset: 0x528ADE0
    ::UnityEngine::Rendering::Universal::PostProcessPass* get_finalPostProcessPass();
    // UnityEngine.Rendering.RTHandle get_afterPostProcessColorHandle()
    // Offset: 0x528ADE8
    ::UnityEngine::Rendering::RTHandle* get_afterPostProcessColorHandle();
    // UnityEngine.Rendering.RTHandle get_colorGradingLutHandle()
    // Offset: 0x528ADF0
    ::UnityEngine::Rendering::RTHandle* get_colorGradingLutHandle();
    // public System.Void .ctor(UnityEngine.Rendering.Universal.Renderer2DData data)
    // Offset: 0x528AE00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Renderer2D* New_ctor(::UnityEngine::Rendering::Universal::Renderer2DData* data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::Renderer2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Renderer2D*, creationType>(data)));
    }
    // public UnityEngine.Rendering.Universal.Renderer2DData GetRenderer2DData()
    // Offset: 0x528B2CC
    ::UnityEngine::Rendering::Universal::Renderer2DData* GetRenderer2DData();
    // private System.Void CreateRenderTextures(ref UnityEngine.Rendering.Universal.CameraData cameraData, System.Boolean forceCreateColorTexture, UnityEngine.FilterMode colorTextureFilterMode, UnityEngine.Rendering.CommandBuffer cmd, out UnityEngine.Rendering.RTHandle colorTargetHandle, out UnityEngine.Rendering.RTHandle depthTargetHandle)
    // Offset: 0x528B2D4
    void CreateRenderTextures(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData, bool forceCreateColorTexture, ::UnityEngine::FilterMode colorTextureFilterMode, ::UnityEngine::Rendering::CommandBuffer* cmd, ByRef<::UnityEngine::Rendering::RTHandle*> colorTargetHandle, ByRef<::UnityEngine::Rendering::RTHandle*> depthTargetHandle);
    // public override System.Int32 SupportedCameraStackingTypes()
    // Offset: 0x528ADF8
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Int32 ScriptableRenderer::SupportedCameraStackingTypes()
    int SupportedCameraStackingTypes();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x528B1CC
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Void ScriptableRenderer::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override System.Void Setup(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x528B7D0
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Void ScriptableRenderer::Setup(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void Setup(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // public override System.Void SetupCullingParameters(ref UnityEngine.Rendering.ScriptableCullingParameters cullingParameters, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x528C254
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Void ScriptableRenderer::SetupCullingParameters(ref UnityEngine.Rendering.ScriptableCullingParameters cullingParameters, ref UnityEngine.Rendering.Universal.CameraData cameraData)
    void SetupCullingParameters(ByRef<::UnityEngine::Rendering::ScriptableCullingParameters> cullingParameters, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // override UnityEngine.Rendering.RTHandle GetCameraColorBackBuffer(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x528C2C8
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: UnityEngine.Rendering.RTHandle ScriptableRenderer::GetCameraColorBackBuffer(UnityEngine.Rendering.CommandBuffer cmd)
    ::UnityEngine::Rendering::RTHandle* GetCameraColorBackBuffer(::UnityEngine::Rendering::CommandBuffer* cmd);
    // static private System.Void .cctor()
    // Offset: 0x528C2D0
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderer
    // Base method: System.Void ScriptableRenderer::.cctor()
    static void _cctor();
  }; // UnityEngine.Rendering.Universal.Renderer2D
  #pragma pack(pop)
  static check_size<sizeof(Renderer2D), 536 + sizeof(::UnityEngine::Rendering::Universal::PostProcessPasses)> __UnityEngine_Rendering_Universal_Renderer2DSizeCheck;
  static_assert(sizeof(Renderer2D) == 0x258);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::get_createColorTexture
// Il2CppName: get_createColorTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Renderer2D::*)()>(&UnityEngine::Rendering::Universal::Renderer2D::get_createColorTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2D*), "get_createColorTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::get_createDepthTexture
// Il2CppName: get_createDepthTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::Renderer2D::*)()>(&UnityEngine::Rendering::Universal::Renderer2D::get_createDepthTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2D*), "get_createDepthTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::get_colorGradingLutPass
// Il2CppName: get_colorGradingLutPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::Internal::ColorGradingLutPass* (UnityEngine::Rendering::Universal::Renderer2D::*)()>(&UnityEngine::Rendering::Universal::Renderer2D::get_colorGradingLutPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2D*), "get_colorGradingLutPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::get_postProcessPass
// Il2CppName: get_postProcessPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::PostProcessPass* (UnityEngine::Rendering::Universal::Renderer2D::*)()>(&UnityEngine::Rendering::Universal::Renderer2D::get_postProcessPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2D*), "get_postProcessPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::get_finalPostProcessPass
// Il2CppName: get_finalPostProcessPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::PostProcessPass* (UnityEngine::Rendering::Universal::Renderer2D::*)()>(&UnityEngine::Rendering::Universal::Renderer2D::get_finalPostProcessPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2D*), "get_finalPostProcessPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::get_afterPostProcessColorHandle
// Il2CppName: get_afterPostProcessColorHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::Renderer2D::*)()>(&UnityEngine::Rendering::Universal::Renderer2D::get_afterPostProcessColorHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2D*), "get_afterPostProcessColorHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::get_colorGradingLutHandle
// Il2CppName: get_colorGradingLutHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::Renderer2D::*)()>(&UnityEngine::Rendering::Universal::Renderer2D::get_colorGradingLutHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2D*), "get_colorGradingLutHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::GetRenderer2DData
// Il2CppName: GetRenderer2DData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::Renderer2DData* (UnityEngine::Rendering::Universal::Renderer2D::*)()>(&UnityEngine::Rendering::Universal::Renderer2D::GetRenderer2DData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2D*), "GetRenderer2DData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::CreateRenderTextures
// Il2CppName: CreateRenderTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Renderer2D::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>, bool, ::UnityEngine::FilterMode, ::UnityEngine::Rendering::CommandBuffer*, ByRef<::UnityEngine::Rendering::RTHandle*>, ByRef<::UnityEngine::Rendering::RTHandle*>)>(&UnityEngine::Rendering::Universal::Renderer2D::CreateRenderTextures)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    static auto* forceCreateColorTexture = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* colorTextureFilterMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* colorTargetHandle = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->this_arg;
    static auto* depthTargetHandle = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2D*), "CreateRenderTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData, forceCreateColorTexture, colorTextureFilterMode, cmd, colorTargetHandle, depthTargetHandle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::SupportedCameraStackingTypes
// Il2CppName: SupportedCameraStackingTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::Renderer2D::*)()>(&UnityEngine::Rendering::Universal::Renderer2D::SupportedCameraStackingTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2D*), "SupportedCameraStackingTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Renderer2D::*)(bool)>(&UnityEngine::Rendering::Universal::Renderer2D::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2D*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Renderer2D::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::Renderer2D::Setup)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2D*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::SetupCullingParameters
// Il2CppName: SetupCullingParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::Renderer2D::*)(ByRef<::UnityEngine::Rendering::ScriptableCullingParameters>, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::Renderer2D::SetupCullingParameters)> {
  static const MethodInfo* get() {
    static auto* cullingParameters = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableCullingParameters")->this_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2D*), "SetupCullingParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cullingParameters, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::GetCameraColorBackBuffer
// Il2CppName: GetCameraColorBackBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RTHandle* (UnityEngine::Rendering::Universal::Renderer2D::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Rendering::Universal::Renderer2D::GetCameraColorBackBuffer)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2D*), "GetCameraColorBackBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::Renderer2D::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::Renderer2D::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::Renderer2D*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
