// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.RenderingLayerUtils
#include "UnityEngine/Rendering/Universal/RenderingLayerUtils.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize, "UnityEngine.Rendering.Universal", "RenderingLayerUtils/MaskSize");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize
  // [TokenAttribute] Offset: FFFFFFFF
  struct RenderingLayerUtils::MaskSize/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: MaskSize
    constexpr MaskSize(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize Bits8
    static constexpr const int Bits8 = 0;
    // Get static field: static public UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize Bits8
    static ::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize _get_Bits8();
    // Set static field: static public UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize Bits8
    static void _set_Bits8(::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize value);
    // static field const value: static public UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize Bits16
    static constexpr const int Bits16 = 1;
    // Get static field: static public UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize Bits16
    static ::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize _get_Bits16();
    // Set static field: static public UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize Bits16
    static void _set_Bits16(::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize value);
    // static field const value: static public UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize Bits24
    static constexpr const int Bits24 = 2;
    // Get static field: static public UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize Bits24
    static ::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize _get_Bits24();
    // Set static field: static public UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize Bits24
    static void _set_Bits24(::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize value);
    // static field const value: static public UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize Bits32
    static constexpr const int Bits32 = 3;
    // Get static field: static public UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize Bits32
    static ::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize _get_Bits32();
    // Set static field: static public UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize Bits32
    static void _set_Bits32(::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize
  #pragma pack(pop)
  static check_size<sizeof(RenderingLayerUtils::MaskSize), 0 + sizeof(int)> __UnityEngine_Rendering_Universal_RenderingLayerUtils_MaskSizeSizeCheck;
  static_assert(sizeof(RenderingLayerUtils::MaskSize) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
