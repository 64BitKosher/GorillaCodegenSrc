// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: CameraData
  struct CameraData;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: MotionVectorsPersistentData
  class MotionVectorsPersistentData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::MotionVectorsPersistentData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::MotionVectorsPersistentData*, "UnityEngine.Rendering.Universal", "MotionVectorsPersistentData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.MotionVectorsPersistentData
  // [TokenAttribute] Offset: FFFFFFFF
  class MotionVectorsPersistentData : public ::Il2CppObject {
    public:
    public:
    // private readonly UnityEngine.Matrix4x4[] m_ViewProjection
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Matrix4x4> m_ViewProjection;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // private readonly UnityEngine.Matrix4x4[] m_PreviousViewProjection
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Matrix4x4> m_PreviousViewProjection;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // private readonly System.Int32[] m_LastFrameIndex
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<int> m_LastFrameIndex;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Single[] m_PrevAspectRatio
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<float> m_PrevAspectRatio;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // static field const value: static private System.Int32 k_EyeCount
    static constexpr const int k_EyeCount = 2;
    // Get static field: static private System.Int32 k_EyeCount
    static int _get_k_EyeCount();
    // Set static field: static private System.Int32 k_EyeCount
    static void _set_k_EyeCount(int value);
    // Get instance field reference: private readonly UnityEngine.Matrix4x4[] m_ViewProjection
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn_m_ViewProjection();
    // Get instance field reference: private readonly UnityEngine.Matrix4x4[] m_PreviousViewProjection
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn_m_PreviousViewProjection();
    // Get instance field reference: private readonly System.Int32[] m_LastFrameIndex
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_m_LastFrameIndex();
    // Get instance field reference: private readonly System.Single[] m_PrevAspectRatio
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_PrevAspectRatio();
    // System.Void .ctor()
    // Offset: 0x52C0248
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MotionVectorsPersistentData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::MotionVectorsPersistentData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MotionVectorsPersistentData*, creationType>()));
    }
    // System.Int32 get_lastFrameIndex()
    // Offset: 0x52C0494
    int get_lastFrameIndex();
    // UnityEngine.Matrix4x4 get_viewProjection()
    // Offset: 0x52C04BC
    ::UnityEngine::Matrix4x4 get_viewProjection();
    // UnityEngine.Matrix4x4 get_previousViewProjection()
    // Offset: 0x52C04F0
    ::UnityEngine::Matrix4x4 get_previousViewProjection();
    // UnityEngine.Matrix4x4[] get_viewProjectionStereo()
    // Offset: 0x52C0524
    ::ArrayW<::UnityEngine::Matrix4x4> get_viewProjectionStereo();
    // UnityEngine.Matrix4x4[] get_previousViewProjectionStereo()
    // Offset: 0x52C052C
    ::ArrayW<::UnityEngine::Matrix4x4> get_previousViewProjectionStereo();
    // public System.Void Reset()
    // Offset: 0x52C0338
    void Reset();
    // System.Int32 GetXRMultiPassId(ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52C0534
    int GetXRMultiPassId(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // public System.Void Update(ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52C0570
    void Update(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
  }; // UnityEngine.Rendering.Universal.MotionVectorsPersistentData
  #pragma pack(pop)
  static check_size<sizeof(MotionVectorsPersistentData), 40 + sizeof(::ArrayW<float>)> __UnityEngine_Rendering_Universal_MotionVectorsPersistentDataSizeCheck;
  static_assert(sizeof(MotionVectorsPersistentData) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorsPersistentData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorsPersistentData::get_lastFrameIndex
// Il2CppName: get_lastFrameIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::MotionVectorsPersistentData::*)()>(&UnityEngine::Rendering::Universal::MotionVectorsPersistentData::get_lastFrameIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorsPersistentData*), "get_lastFrameIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorsPersistentData::get_viewProjection
// Il2CppName: get_viewProjection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (UnityEngine::Rendering::Universal::MotionVectorsPersistentData::*)()>(&UnityEngine::Rendering::Universal::MotionVectorsPersistentData::get_viewProjection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorsPersistentData*), "get_viewProjection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorsPersistentData::get_previousViewProjection
// Il2CppName: get_previousViewProjection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (UnityEngine::Rendering::Universal::MotionVectorsPersistentData::*)()>(&UnityEngine::Rendering::Universal::MotionVectorsPersistentData::get_previousViewProjection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorsPersistentData*), "get_previousViewProjection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorsPersistentData::get_viewProjectionStereo
// Il2CppName: get_viewProjectionStereo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Matrix4x4> (UnityEngine::Rendering::Universal::MotionVectorsPersistentData::*)()>(&UnityEngine::Rendering::Universal::MotionVectorsPersistentData::get_viewProjectionStereo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorsPersistentData*), "get_viewProjectionStereo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorsPersistentData::get_previousViewProjectionStereo
// Il2CppName: get_previousViewProjectionStereo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Matrix4x4> (UnityEngine::Rendering::Universal::MotionVectorsPersistentData::*)()>(&UnityEngine::Rendering::Universal::MotionVectorsPersistentData::get_previousViewProjectionStereo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorsPersistentData*), "get_previousViewProjectionStereo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorsPersistentData::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::MotionVectorsPersistentData::*)()>(&UnityEngine::Rendering::Universal::MotionVectorsPersistentData::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorsPersistentData*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorsPersistentData::GetXRMultiPassId
// Il2CppName: GetXRMultiPassId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::MotionVectorsPersistentData::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::MotionVectorsPersistentData::GetXRMultiPassId)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorsPersistentData*), "GetXRMultiPassId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::MotionVectorsPersistentData::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::MotionVectorsPersistentData::*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::MotionVectorsPersistentData::Update)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::MotionVectorsPersistentData*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
