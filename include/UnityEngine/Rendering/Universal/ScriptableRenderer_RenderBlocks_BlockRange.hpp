// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderer/RenderBlocks
#include "UnityEngine/Rendering/Universal/ScriptableRenderer_RenderBlocks.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange, "UnityEngine.Rendering.Universal", "ScriptableRenderer/RenderBlocks/BlockRange");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.ScriptableRenderer/RenderBlocks/BlockRange
  // [TokenAttribute] Offset: FFFFFFFF
  struct ScriptableRenderer::RenderBlocks::BlockRange/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Int32 m_Current
    // Size: 0x4
    // Offset: 0x0
    int m_Current;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_End
    // Size: 0x4
    // Offset: 0x4
    int m_End;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: BlockRange
    constexpr BlockRange(int m_Current_ = {}, int m_End_ = {}) noexcept : m_Current{m_Current_}, m_End{m_End_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Int32 m_Current
    [[deprecated("Use field access instead!")]] int& dyn_m_Current();
    // Get instance field reference: private System.Int32 m_End
    [[deprecated("Use field access instead!")]] int& dyn_m_End();
    // public System.Void .ctor(System.Int32 begin, System.Int32 end)
    // Offset: 0x52BB868
    // ABORTED: conflicts with another method.  BlockRange(int begin, int end);
    // public UnityEngine.Rendering.Universal.ScriptableRenderer/RenderBlocks/BlockRange GetEnumerator()
    // Offset: 0x52BB884
    ::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange GetEnumerator();
    // public System.Boolean MoveNext()
    // Offset: 0x52BB88C
    bool MoveNext();
    // public System.Int32 get_Current()
    // Offset: 0x52BB8A8
    int get_Current();
    // public System.Void Dispose()
    // Offset: 0x52BB8B0
    void Dispose();
  }; // UnityEngine.Rendering.Universal.ScriptableRenderer/RenderBlocks/BlockRange
  #pragma pack(pop)
  static check_size<sizeof(ScriptableRenderer::RenderBlocks::BlockRange), 4 + sizeof(int)> __UnityEngine_Rendering_Universal_ScriptableRenderer_RenderBlocks_BlockRangeSizeCheck;
  static_assert(sizeof(ScriptableRenderer::RenderBlocks::BlockRange) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange::BlockRange
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange (UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange::*)()>(&UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ScriptableRenderer::RenderBlocks::BlockRange), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
