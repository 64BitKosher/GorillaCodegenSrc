// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: PunctualLightData
  struct PunctualLightData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::PunctualLightData, "UnityEngine.Rendering.Universal", "PunctualLightData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x54
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.PunctualLightData
  // [TokenAttribute] Offset: FFFFFFFF
  struct PunctualLightData/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 wsPos
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 wsPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single radius
    // Size: 0x4
    // Offset: 0xC
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector4 color
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Vector4 color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public UnityEngine.Vector4 attenuation
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Vector4 attenuation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public UnityEngine.Vector3 spotDirection
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 spotDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Int32 flags
    // Size: 0x4
    // Offset: 0x3C
    int flags;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Vector4 occlusionProbeInfo
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Vector4 occlusionProbeInfo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public System.UInt32 layerMask
    // Size: 0x4
    // Offset: 0x50
    uint layerMask;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: PunctualLightData
    constexpr PunctualLightData(::UnityEngine::Vector3 wsPos_ = {}, float radius_ = {}, ::UnityEngine::Vector4 color_ = {}, ::UnityEngine::Vector4 attenuation_ = {}, ::UnityEngine::Vector3 spotDirection_ = {}, int flags_ = {}, ::UnityEngine::Vector4 occlusionProbeInfo_ = {}, uint layerMask_ = {}) noexcept : wsPos{wsPos_}, radius{radius_}, color{color_}, attenuation{attenuation_}, spotDirection{spotDirection_}, flags{flags_}, occlusionProbeInfo{occlusionProbeInfo_}, layerMask{layerMask_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 wsPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_wsPos();
    // Get instance field reference: public System.Single radius
    [[deprecated("Use field access instead!")]] float& dyn_radius();
    // Get instance field reference: public UnityEngine.Vector4 color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_color();
    // Get instance field reference: public UnityEngine.Vector4 attenuation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_attenuation();
    // Get instance field reference: public UnityEngine.Vector3 spotDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_spotDirection();
    // Get instance field reference: public System.Int32 flags
    [[deprecated("Use field access instead!")]] int& dyn_flags();
    // Get instance field reference: public UnityEngine.Vector4 occlusionProbeInfo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_occlusionProbeInfo();
    // Get instance field reference: public System.UInt32 layerMask
    [[deprecated("Use field access instead!")]] uint& dyn_layerMask();
  }; // UnityEngine.Rendering.Universal.PunctualLightData
  #pragma pack(pop)
  static check_size<sizeof(PunctualLightData), 80 + sizeof(uint)> __UnityEngine_Rendering_Universal_PunctualLightDataSizeCheck;
  static_assert(sizeof(PunctualLightData) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
