// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.IDebugDisplaySettingsData
#include "UnityEngine/Rendering/IDebugDisplaySettingsData.hpp"
// Including type: UnityEngine.Rendering.Universal.DebugLightingMode
#include "UnityEngine/Rendering/Universal/DebugLightingMode.hpp"
// Including type: UnityEngine.Rendering.Universal.DebugLightingFeatureFlags
#include "UnityEngine/Rendering/Universal/DebugLightingFeatureFlags.hpp"
// Including type: UnityEngine.Rendering.Universal.HDRDebugMode
#include "UnityEngine/Rendering/Universal/HDRDebugMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: IDebugDisplaySettingsPanelDisposable
  class IDebugDisplaySettingsPanelDisposable;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DebugDisplaySettingsLighting
  class DebugDisplaySettingsLighting;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting*, "UnityEngine.Rendering.Universal", "DebugDisplaySettingsLighting");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.DebugDisplaySettingsLighting
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugDisplaySettingsLighting : public ::Il2CppObject/*, public ::UnityEngine::Rendering::IDebugDisplaySettingsData*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::Strings
    class Strings;
    // Nested type: ::UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::WidgetFactory
    class WidgetFactory;
    // Nested type: ::UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::SettingsPanel
    class SettingsPanel;
    public:
    // private UnityEngine.Rendering.Universal.DebugLightingMode <lightingDebugMode>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::UnityEngine::Rendering::Universal::DebugLightingMode lightingDebugMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DebugLightingMode) == 0x4);
    // private UnityEngine.Rendering.Universal.DebugLightingFeatureFlags <lightingFeatureFlags>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    ::UnityEngine::Rendering::Universal::DebugLightingFeatureFlags lightingFeatureFlags;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DebugLightingFeatureFlags) == 0x4);
    // private UnityEngine.Rendering.Universal.HDRDebugMode <hdrDebugMode>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::Rendering::Universal::HDRDebugMode hdrDebugMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::HDRDebugMode) == 0x4);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::Rendering::IDebugDisplaySettingsData
    operator ::UnityEngine::Rendering::IDebugDisplaySettingsData() noexcept {
      return *reinterpret_cast<::UnityEngine::Rendering::IDebugDisplaySettingsData*>(this);
    }
    // Get instance field reference: private UnityEngine.Rendering.Universal.DebugLightingMode <lightingDebugMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DebugLightingMode& dyn_$lightingDebugMode$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DebugLightingFeatureFlags <lightingFeatureFlags>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DebugLightingFeatureFlags& dyn_$lightingFeatureFlags$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.Universal.HDRDebugMode <hdrDebugMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::HDRDebugMode& dyn_$hdrDebugMode$k__BackingField();
    // public UnityEngine.Rendering.Universal.DebugLightingMode get_lightingDebugMode()
    // Offset: 0x529459C
    ::UnityEngine::Rendering::Universal::DebugLightingMode get_lightingDebugMode();
    // public System.Void set_lightingDebugMode(UnityEngine.Rendering.Universal.DebugLightingMode value)
    // Offset: 0x52945A4
    void set_lightingDebugMode(::UnityEngine::Rendering::Universal::DebugLightingMode value);
    // public UnityEngine.Rendering.Universal.DebugLightingFeatureFlags get_lightingFeatureFlags()
    // Offset: 0x52945AC
    ::UnityEngine::Rendering::Universal::DebugLightingFeatureFlags get_lightingFeatureFlags();
    // public System.Void set_lightingFeatureFlags(UnityEngine.Rendering.Universal.DebugLightingFeatureFlags value)
    // Offset: 0x52945B4
    void set_lightingFeatureFlags(::UnityEngine::Rendering::Universal::DebugLightingFeatureFlags value);
    // public UnityEngine.Rendering.Universal.HDRDebugMode get_hdrDebugMode()
    // Offset: 0x52945BC
    ::UnityEngine::Rendering::Universal::HDRDebugMode get_hdrDebugMode();
    // public System.Void set_hdrDebugMode(UnityEngine.Rendering.Universal.HDRDebugMode value)
    // Offset: 0x52945C4
    void set_hdrDebugMode(::UnityEngine::Rendering::Universal::HDRDebugMode value);
    // public System.Boolean get_AreAnySettingsActive()
    // Offset: 0x52945CC
    bool get_AreAnySettingsActive();
    // public System.Boolean get_IsPostProcessingAllowed()
    // Offset: 0x52945F4
    bool get_IsPostProcessingAllowed();
    // public System.Boolean get_IsLightingActive()
    // Offset: 0x5294608
    bool get_IsLightingActive();
    // public System.Boolean TryGetScreenClearColor(ref UnityEngine.Color color)
    // Offset: 0x5294610
    bool TryGetScreenClearColor(ByRef<::UnityEngine::Color> color);
    // private UnityEngine.Rendering.IDebugDisplaySettingsPanelDisposable UnityEngine.Rendering.IDebugDisplaySettingsData.CreatePanel()
    // Offset: 0x5294618
    ::UnityEngine::Rendering::IDebugDisplaySettingsPanelDisposable* UnityEngine_Rendering_IDebugDisplaySettingsData_CreatePanel();
    // public System.Void .ctor()
    // Offset: 0x52947C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugDisplaySettingsLighting* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugDisplaySettingsLighting*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.DebugDisplaySettingsLighting
  #pragma pack(pop)
  static check_size<sizeof(DebugDisplaySettingsLighting), 24 + sizeof(::UnityEngine::Rendering::Universal::HDRDebugMode)> __UnityEngine_Rendering_Universal_DebugDisplaySettingsLightingSizeCheck;
  static_assert(sizeof(DebugDisplaySettingsLighting) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::get_lightingDebugMode
// Il2CppName: get_lightingDebugMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugLightingMode (UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::get_lightingDebugMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting*), "get_lightingDebugMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::set_lightingDebugMode
// Il2CppName: set_lightingDebugMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::*)(::UnityEngine::Rendering::Universal::DebugLightingMode)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::set_lightingDebugMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DebugLightingMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting*), "set_lightingDebugMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::get_lightingFeatureFlags
// Il2CppName: get_lightingFeatureFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugLightingFeatureFlags (UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::get_lightingFeatureFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting*), "get_lightingFeatureFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::set_lightingFeatureFlags
// Il2CppName: set_lightingFeatureFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::*)(::UnityEngine::Rendering::Universal::DebugLightingFeatureFlags)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::set_lightingFeatureFlags)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DebugLightingFeatureFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting*), "set_lightingFeatureFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::get_hdrDebugMode
// Il2CppName: get_hdrDebugMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::HDRDebugMode (UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::get_hdrDebugMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting*), "get_hdrDebugMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::set_hdrDebugMode
// Il2CppName: set_hdrDebugMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::*)(::UnityEngine::Rendering::Universal::HDRDebugMode)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::set_hdrDebugMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "HDRDebugMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting*), "set_hdrDebugMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::get_AreAnySettingsActive
// Il2CppName: get_AreAnySettingsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::get_AreAnySettingsActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting*), "get_AreAnySettingsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::get_IsPostProcessingAllowed
// Il2CppName: get_IsPostProcessingAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::get_IsPostProcessingAllowed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting*), "get_IsPostProcessingAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::get_IsLightingActive
// Il2CppName: get_IsLightingActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::get_IsLightingActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting*), "get_IsLightingActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::TryGetScreenClearColor
// Il2CppName: TryGetScreenClearColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::*)(ByRef<::UnityEngine::Color>)>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::TryGetScreenClearColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting*), "TryGetScreenClearColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::UnityEngine_Rendering_IDebugDisplaySettingsData_CreatePanel
// Il2CppName: UnityEngine.Rendering.IDebugDisplaySettingsData.CreatePanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::IDebugDisplaySettingsPanelDisposable* (UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::*)()>(&UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::UnityEngine_Rendering_IDebugDisplaySettingsData_CreatePanel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting*), "UnityEngine.Rendering.IDebugDisplaySettingsData.CreatePanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugDisplaySettingsLighting::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
