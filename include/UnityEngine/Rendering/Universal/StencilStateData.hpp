// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.CompareFunction
#include "UnityEngine/Rendering/CompareFunction.hpp"
// Including type: UnityEngine.Rendering.StencilOp
#include "UnityEngine/Rendering/StencilOp.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: StencilStateData
  class StencilStateData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::StencilStateData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::StencilStateData*, "UnityEngine.Rendering.Universal", "StencilStateData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.StencilStateData
  // [TokenAttribute] Offset: FFFFFFFF
  class StencilStateData : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean overrideStencilState
    // Size: 0x1
    // Offset: 0x10
    bool overrideStencilState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideStencilState and: stencilReference
    char __padding0[0x3] = {};
    // public System.Int32 stencilReference
    // Size: 0x4
    // Offset: 0x14
    int stencilReference;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Rendering.CompareFunction stencilCompareFunction
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::Rendering::CompareFunction stencilCompareFunction;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CompareFunction) == 0x4);
    // public UnityEngine.Rendering.StencilOp passOperation
    // Size: 0x4
    // Offset: 0x1C
    ::UnityEngine::Rendering::StencilOp passOperation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::StencilOp) == 0x4);
    // public UnityEngine.Rendering.StencilOp failOperation
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::Rendering::StencilOp failOperation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::StencilOp) == 0x4);
    // public UnityEngine.Rendering.StencilOp zFailOperation
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::Rendering::StencilOp zFailOperation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::StencilOp) == 0x4);
    public:
    // Get instance field reference: public System.Boolean overrideStencilState
    [[deprecated("Use field access instead!")]] bool& dyn_overrideStencilState();
    // Get instance field reference: public System.Int32 stencilReference
    [[deprecated("Use field access instead!")]] int& dyn_stencilReference();
    // Get instance field reference: public UnityEngine.Rendering.CompareFunction stencilCompareFunction
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CompareFunction& dyn_stencilCompareFunction();
    // Get instance field reference: public UnityEngine.Rendering.StencilOp passOperation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::StencilOp& dyn_passOperation();
    // Get instance field reference: public UnityEngine.Rendering.StencilOp failOperation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::StencilOp& dyn_failOperation();
    // Get instance field reference: public UnityEngine.Rendering.StencilOp zFailOperation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::StencilOp& dyn_zFailOperation();
    // public System.Void .ctor()
    // Offset: 0x5291CFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StencilStateData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::StencilStateData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StencilStateData*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.StencilStateData
  #pragma pack(pop)
  static check_size<sizeof(StencilStateData), 36 + sizeof(::UnityEngine::Rendering::StencilOp)> __UnityEngine_Rendering_Universal_StencilStateDataSizeCheck;
  static_assert(sizeof(StencilStateData) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::StencilStateData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
