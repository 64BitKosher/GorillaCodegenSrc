// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRendererFeature
#include "UnityEngine/Rendering/Universal/ScriptableRendererFeature.hpp"
// Including type: UnityEngine.Rendering.Universal.DecalTechnique
#include "UnityEngine/Rendering/Universal/DecalTechnique.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalSettings
  class DecalSettings;
  // Forward declaring type: DBufferSettings
  class DBufferSettings;
  // Forward declaring type: DecalScreenSpaceSettings
  class DecalScreenSpaceSettings;
  // Forward declaring type: DecalPreviewPass
  class DecalPreviewPass;
  // Forward declaring type: DecalEntityManager
  class DecalEntityManager;
  // Forward declaring type: DecalUpdateCachedSystem
  class DecalUpdateCachedSystem;
  // Forward declaring type: DecalUpdateCullingGroupSystem
  class DecalUpdateCullingGroupSystem;
  // Forward declaring type: DecalUpdateCulledSystem
  class DecalUpdateCulledSystem;
  // Forward declaring type: DecalCreateDrawCallSystem
  class DecalCreateDrawCallSystem;
  // Forward declaring type: DecalDrawErrorSystem
  class DecalDrawErrorSystem;
  // Forward declaring type: DBufferRenderPass
  class DBufferRenderPass;
  // Forward declaring type: DecalForwardEmissivePass
  class DecalForwardEmissivePass;
  // Forward declaring type: DecalDrawDBufferSystem
  class DecalDrawDBufferSystem;
  // Forward declaring type: DecalDrawFowardEmissiveSystem
  class DecalDrawFowardEmissiveSystem;
  // Forward declaring type: DecalScreenSpaceRenderPass
  class DecalScreenSpaceRenderPass;
  // Forward declaring type: DecalDrawScreenSpaceSystem
  class DecalDrawScreenSpaceSystem;
  // Forward declaring type: DecalSkipCulledSystem
  class DecalSkipCulledSystem;
  // Forward declaring type: DecalGBufferRenderPass
  class DecalGBufferRenderPass;
  // Forward declaring type: DecalDrawGBufferSystem
  class DecalDrawGBufferSystem;
  // Forward declaring type: SharedDecalEntityManager
  class SharedDecalEntityManager;
  // Forward declaring type: ScriptableRendererData
  class ScriptableRendererData;
  // Forward declaring type: ScriptableRenderer
  class ScriptableRenderer;
  // Forward declaring type: CameraData
  struct CameraData;
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal::Internal
namespace UnityEngine::Rendering::Universal::Internal {
  // Forward declaring type: CopyDepthPass
  class CopyDepthPass;
  // Forward declaring type: DeferredLights
  class DeferredLights;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalRendererFeature
  class DecalRendererFeature;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::DecalRendererFeature);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DecalRendererFeature*, "UnityEngine.Rendering.Universal", "DecalRendererFeature");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0xF8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.DecalRendererFeature
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleRendererFeature] Offset: FFFFFFFF
  // [TooltipAttribute] Offset: FFFFFFFF
  class DecalRendererFeature : public ::UnityEngine::Rendering::Universal::ScriptableRendererFeature {
    public:
    // Writing base type padding for base size: 0x19 to desired offset: 0x20
    char ___base_padding[0x7] = {};
    public:
    // private UnityEngine.Rendering.Universal.DecalSettings m_Settings
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rendering::Universal::DecalSettings* m_Settings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalSettings*) == 0x8);
    // private UnityEngine.Shader m_CopyDepthPS
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Shader* m_CopyDepthPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_DBufferClear
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Shader* m_DBufferClear;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalTechnique m_Technique
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::Rendering::Universal::DecalTechnique m_Technique;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalTechnique) == 0x4);
    // Padding between fields: m_Technique and: m_DBufferSettings
    char __padding3[0x4] = {};
    // private UnityEngine.Rendering.Universal.DBufferSettings m_DBufferSettings
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Rendering::Universal::DBufferSettings* m_DBufferSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DBufferSettings*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalScreenSpaceSettings m_ScreenSpaceSettings
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Rendering::Universal::DecalScreenSpaceSettings* m_ScreenSpaceSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalScreenSpaceSettings*) == 0x8);
    // private System.Boolean m_RecreateSystems
    // Size: 0x1
    // Offset: 0x50
    bool m_RecreateSystems;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RecreateSystems and: m_CopyDepthPass
    char __padding6[0x7] = {};
    // private UnityEngine.Rendering.Universal.Internal.CopyDepthPass m_CopyDepthPass
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Rendering::Universal::Internal::CopyDepthPass* m_CopyDepthPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::CopyDepthPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalPreviewPass m_DecalPreviewPass
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Rendering::Universal::DecalPreviewPass* m_DecalPreviewPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalPreviewPass*) == 0x8);
    // private UnityEngine.Material m_CopyDepthMaterial
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Material* m_CopyDepthMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalEntityManager m_DecalEntityManager
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Rendering::Universal::DecalEntityManager* m_DecalEntityManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalEntityManager*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalUpdateCachedSystem m_DecalUpdateCachedSystem
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Rendering::Universal::DecalUpdateCachedSystem* m_DecalUpdateCachedSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalUpdateCachedSystem*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalUpdateCullingGroupSystem m_DecalUpdateCullingGroupSystem
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Rendering::Universal::DecalUpdateCullingGroupSystem* m_DecalUpdateCullingGroupSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalUpdateCullingGroupSystem*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalUpdateCulledSystem m_DecalUpdateCulledSystem
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Rendering::Universal::DecalUpdateCulledSystem* m_DecalUpdateCulledSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalUpdateCulledSystem*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalCreateDrawCallSystem m_DecalCreateDrawCallSystem
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Rendering::Universal::DecalCreateDrawCallSystem* m_DecalCreateDrawCallSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalCreateDrawCallSystem*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalDrawErrorSystem m_DrawErrorSystem
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Rendering::Universal::DecalDrawErrorSystem* m_DrawErrorSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalDrawErrorSystem*) == 0x8);
    // private UnityEngine.Rendering.Universal.DBufferRenderPass m_DBufferRenderPass
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Rendering::Universal::DBufferRenderPass* m_DBufferRenderPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DBufferRenderPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalForwardEmissivePass m_ForwardEmissivePass
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Rendering::Universal::DecalForwardEmissivePass* m_ForwardEmissivePass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalForwardEmissivePass*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalDrawDBufferSystem m_DecalDrawDBufferSystem
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Rendering::Universal::DecalDrawDBufferSystem* m_DecalDrawDBufferSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalDrawDBufferSystem*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalDrawFowardEmissiveSystem m_DecalDrawForwardEmissiveSystem
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Rendering::Universal::DecalDrawFowardEmissiveSystem* m_DecalDrawForwardEmissiveSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalDrawFowardEmissiveSystem*) == 0x8);
    // private UnityEngine.Material m_DBufferClearMaterial
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Material* m_DBufferClearMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalScreenSpaceRenderPass m_ScreenSpaceDecalRenderPass
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::Rendering::Universal::DecalScreenSpaceRenderPass* m_ScreenSpaceDecalRenderPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalScreenSpaceRenderPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalDrawScreenSpaceSystem m_DecalDrawScreenSpaceSystem
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::Rendering::Universal::DecalDrawScreenSpaceSystem* m_DecalDrawScreenSpaceSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalDrawScreenSpaceSystem*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalSkipCulledSystem m_DecalSkipCulledSystem
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::Rendering::Universal::DecalSkipCulledSystem* m_DecalSkipCulledSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalSkipCulledSystem*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalGBufferRenderPass m_GBufferRenderPass
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::Rendering::Universal::DecalGBufferRenderPass* m_GBufferRenderPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalGBufferRenderPass*) == 0x8);
    // private UnityEngine.Rendering.Universal.DecalDrawGBufferSystem m_DrawGBufferSystem
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Rendering::Universal::DecalDrawGBufferSystem* m_DrawGBufferSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DecalDrawGBufferSystem*) == 0x8);
    // private UnityEngine.Rendering.Universal.Internal.DeferredLights m_DeferredLights
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::Rendering::Universal::Internal::DeferredLights* m_DeferredLights;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::Internal::DeferredLights*) == 0x8);
    public:
    // Get static field: static private readonly UnityEngine.Rendering.Universal.SharedDecalEntityManager <sharedDecalEntityManager>k__BackingField
    static ::UnityEngine::Rendering::Universal::SharedDecalEntityManager* _get_$sharedDecalEntityManager$k__BackingField();
    // Set static field: static private readonly UnityEngine.Rendering.Universal.SharedDecalEntityManager <sharedDecalEntityManager>k__BackingField
    static void _set_$sharedDecalEntityManager$k__BackingField(::UnityEngine::Rendering::Universal::SharedDecalEntityManager* value);
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalSettings m_Settings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalSettings*& dyn_m_Settings();
    // Get instance field reference: private UnityEngine.Shader m_CopyDepthPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_CopyDepthPS();
    // Get instance field reference: private UnityEngine.Shader m_DBufferClear
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_DBufferClear();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalTechnique m_Technique
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalTechnique& dyn_m_Technique();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DBufferSettings m_DBufferSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DBufferSettings*& dyn_m_DBufferSettings();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalScreenSpaceSettings m_ScreenSpaceSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalScreenSpaceSettings*& dyn_m_ScreenSpaceSettings();
    // Get instance field reference: private System.Boolean m_RecreateSystems
    [[deprecated("Use field access instead!")]] bool& dyn_m_RecreateSystems();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.CopyDepthPass m_CopyDepthPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::CopyDepthPass*& dyn_m_CopyDepthPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalPreviewPass m_DecalPreviewPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalPreviewPass*& dyn_m_DecalPreviewPass();
    // Get instance field reference: private UnityEngine.Material m_CopyDepthMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_CopyDepthMaterial();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalEntityManager m_DecalEntityManager
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalEntityManager*& dyn_m_DecalEntityManager();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalUpdateCachedSystem m_DecalUpdateCachedSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalUpdateCachedSystem*& dyn_m_DecalUpdateCachedSystem();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalUpdateCullingGroupSystem m_DecalUpdateCullingGroupSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalUpdateCullingGroupSystem*& dyn_m_DecalUpdateCullingGroupSystem();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalUpdateCulledSystem m_DecalUpdateCulledSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalUpdateCulledSystem*& dyn_m_DecalUpdateCulledSystem();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalCreateDrawCallSystem m_DecalCreateDrawCallSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalCreateDrawCallSystem*& dyn_m_DecalCreateDrawCallSystem();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalDrawErrorSystem m_DrawErrorSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalDrawErrorSystem*& dyn_m_DrawErrorSystem();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DBufferRenderPass m_DBufferRenderPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DBufferRenderPass*& dyn_m_DBufferRenderPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalForwardEmissivePass m_ForwardEmissivePass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalForwardEmissivePass*& dyn_m_ForwardEmissivePass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalDrawDBufferSystem m_DecalDrawDBufferSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalDrawDBufferSystem*& dyn_m_DecalDrawDBufferSystem();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalDrawFowardEmissiveSystem m_DecalDrawForwardEmissiveSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalDrawFowardEmissiveSystem*& dyn_m_DecalDrawForwardEmissiveSystem();
    // Get instance field reference: private UnityEngine.Material m_DBufferClearMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_DBufferClearMaterial();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalScreenSpaceRenderPass m_ScreenSpaceDecalRenderPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalScreenSpaceRenderPass*& dyn_m_ScreenSpaceDecalRenderPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalDrawScreenSpaceSystem m_DecalDrawScreenSpaceSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalDrawScreenSpaceSystem*& dyn_m_DecalDrawScreenSpaceSystem();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalSkipCulledSystem m_DecalSkipCulledSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalSkipCulledSystem*& dyn_m_DecalSkipCulledSystem();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalGBufferRenderPass m_GBufferRenderPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalGBufferRenderPass*& dyn_m_GBufferRenderPass();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DecalDrawGBufferSystem m_DrawGBufferSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DecalDrawGBufferSystem*& dyn_m_DrawGBufferSystem();
    // Get instance field reference: private UnityEngine.Rendering.Universal.Internal.DeferredLights m_DeferredLights
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::Internal::DeferredLights*& dyn_m_DeferredLights();
    // static private UnityEngine.Rendering.Universal.SharedDecalEntityManager get_sharedDecalEntityManager()
    // Offset: 0x52D3594
    static ::UnityEngine::Rendering::Universal::SharedDecalEntityManager* get_sharedDecalEntityManager();
    // UnityEngine.Rendering.Universal.DecalSettings get_settings()
    // Offset: 0x52D35EC
    ::UnityEngine::Rendering::Universal::DecalSettings* get_settings();
    // System.Boolean get_intermediateRendering()
    // Offset: 0x52D35F4
    bool get_intermediateRendering();
    // System.Boolean get_requiresDecalLayers()
    // Offset: 0x52D3604
    bool get_requiresDecalLayers();
    // static System.Boolean get_isGLDevice()
    // Offset: 0x52D3620
    static bool get_isGLDevice();
    // UnityEngine.Rendering.Universal.DBufferSettings GetDBufferSettings()
    // Offset: 0x52D3970
    ::UnityEngine::Rendering::Universal::DBufferSettings* GetDBufferSettings();
    // UnityEngine.Rendering.Universal.DecalScreenSpaceSettings GetScreenSpaceSettings()
    // Offset: 0x52D39F0
    ::UnityEngine::Rendering::Universal::DecalScreenSpaceSettings* GetScreenSpaceSettings();
    // UnityEngine.Rendering.Universal.DecalTechnique GetTechnique(UnityEngine.Rendering.Universal.ScriptableRendererData renderer)
    // Offset: 0x52D3A6C
    ::UnityEngine::Rendering::Universal::DecalTechnique GetTechnique(::UnityEngine::Rendering::Universal::ScriptableRendererData* renderer);
    // UnityEngine.Rendering.Universal.DecalTechnique GetTechnique(UnityEngine.Rendering.Universal.ScriptableRenderer renderer)
    // Offset: 0x52D3B90
    ::UnityEngine::Rendering::Universal::DecalTechnique GetTechnique(::UnityEngine::Rendering::Universal::ScriptableRenderer* renderer);
    // UnityEngine.Rendering.Universal.DecalTechnique GetTechnique(System.Boolean isDeferred, System.Boolean checkForInvalidTechniques)
    // Offset: 0x52D3774
    ::UnityEngine::Rendering::Universal::DecalTechnique GetTechnique(bool isDeferred, bool checkForInvalidTechniques);
    // private System.Boolean IsAutomaticDBuffer()
    // Offset: 0x52D3C58
    bool IsAutomaticDBuffer();
    // private System.Boolean RecreateSystemsIfNeeded(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, in UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52D3CD0
    bool RecreateSystemsIfNeeded(::UnityEngine::Rendering::Universal::ScriptableRenderer* renderer, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // private System.Void ChangeAdaptivePerformanceDrawDistances()
    // Offset: 0x52D4808
    void ChangeAdaptivePerformanceDrawDistances();
    // static private System.Void .cctor()
    // Offset: 0x52D4898
    static void _cctor();
    // public override System.Void Create()
    // Offset: 0x52D3664
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Void ScriptableRendererFeature::Create()
    void Create();
    // override System.Boolean RequireRenderingLayers(System.Boolean isDeferred, out UnityEngine.Rendering.Universal.RenderingLayerUtils/Event atEvent, out UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize maskSize)
    // Offset: 0x52D36D0
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Boolean ScriptableRendererFeature::RequireRenderingLayers(System.Boolean isDeferred, out UnityEngine.Rendering.Universal.RenderingLayerUtils/Event atEvent, out UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize maskSize)
    bool RequireRenderingLayers(bool isDeferred, ByRef<::UnityEngine::Rendering::Universal::RenderingLayerUtils::Event> atEvent, ByRef<::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize> maskSize);
    // public override System.Void OnCameraPreCull(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, in UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52D4334
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Void ScriptableRendererFeature::OnCameraPreCull(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, in UnityEngine.Rendering.Universal.CameraData cameraData)
    void OnCameraPreCull(::UnityEngine::Rendering::Universal::ScriptableRenderer* renderer, ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // public override System.Void AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52D4420
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Void ScriptableRendererFeature::AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void AddRenderPasses(::UnityEngine::Rendering::Universal::ScriptableRenderer* renderer, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // override System.Boolean SupportsNativeRenderPass()
    // Offset: 0x52D451C
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Boolean ScriptableRendererFeature::SupportsNativeRenderPass()
    bool SupportsNativeRenderPass();
    // public override System.Void SetupRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, in UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x52D4530
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Void ScriptableRendererFeature::SetupRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, in UnityEngine.Rendering.Universal.RenderingData renderingData)
    void SetupRenderPasses(::UnityEngine::Rendering::Universal::ScriptableRenderer* renderer, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x52D46EC
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Void ScriptableRendererFeature::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public System.Void .ctor()
    // Offset: 0x52D480C
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRendererFeature
    // Base method: System.Void ScriptableRendererFeature::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DecalRendererFeature* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DecalRendererFeature::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DecalRendererFeature*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.DecalRendererFeature
  #pragma pack(pop)
  static check_size<sizeof(DecalRendererFeature), 240 + sizeof(::UnityEngine::Rendering::Universal::Internal::DeferredLights*)> __UnityEngine_Rendering_Universal_DecalRendererFeatureSizeCheck;
  static_assert(sizeof(DecalRendererFeature) == 0xF8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::get_sharedDecalEntityManager
// Il2CppName: get_sharedDecalEntityManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::SharedDecalEntityManager* (*)()>(&UnityEngine::Rendering::Universal::DecalRendererFeature::get_sharedDecalEntityManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "get_sharedDecalEntityManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::get_settings
// Il2CppName: get_settings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DecalSettings* (UnityEngine::Rendering::Universal::DecalRendererFeature::*)()>(&UnityEngine::Rendering::Universal::DecalRendererFeature::get_settings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "get_settings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::get_intermediateRendering
// Il2CppName: get_intermediateRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DecalRendererFeature::*)()>(&UnityEngine::Rendering::Universal::DecalRendererFeature::get_intermediateRendering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "get_intermediateRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::get_requiresDecalLayers
// Il2CppName: get_requiresDecalLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DecalRendererFeature::*)()>(&UnityEngine::Rendering::Universal::DecalRendererFeature::get_requiresDecalLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "get_requiresDecalLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::get_isGLDevice
// Il2CppName: get_isGLDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::Rendering::Universal::DecalRendererFeature::get_isGLDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "get_isGLDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::GetDBufferSettings
// Il2CppName: GetDBufferSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DBufferSettings* (UnityEngine::Rendering::Universal::DecalRendererFeature::*)()>(&UnityEngine::Rendering::Universal::DecalRendererFeature::GetDBufferSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "GetDBufferSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::GetScreenSpaceSettings
// Il2CppName: GetScreenSpaceSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DecalScreenSpaceSettings* (UnityEngine::Rendering::Universal::DecalRendererFeature::*)()>(&UnityEngine::Rendering::Universal::DecalRendererFeature::GetScreenSpaceSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "GetScreenSpaceSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::GetTechnique
// Il2CppName: GetTechnique
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DecalTechnique (UnityEngine::Rendering::Universal::DecalRendererFeature::*)(::UnityEngine::Rendering::Universal::ScriptableRendererData*)>(&UnityEngine::Rendering::Universal::DecalRendererFeature::GetTechnique)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRendererData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "GetTechnique", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::GetTechnique
// Il2CppName: GetTechnique
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DecalTechnique (UnityEngine::Rendering::Universal::DecalRendererFeature::*)(::UnityEngine::Rendering::Universal::ScriptableRenderer*)>(&UnityEngine::Rendering::Universal::DecalRendererFeature::GetTechnique)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "GetTechnique", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::GetTechnique
// Il2CppName: GetTechnique
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DecalTechnique (UnityEngine::Rendering::Universal::DecalRendererFeature::*)(bool, bool)>(&UnityEngine::Rendering::Universal::DecalRendererFeature::GetTechnique)> {
  static const MethodInfo* get() {
    static auto* isDeferred = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* checkForInvalidTechniques = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "GetTechnique", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isDeferred, checkForInvalidTechniques});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::IsAutomaticDBuffer
// Il2CppName: IsAutomaticDBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DecalRendererFeature::*)()>(&UnityEngine::Rendering::Universal::DecalRendererFeature::IsAutomaticDBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "IsAutomaticDBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::RecreateSystemsIfNeeded
// Il2CppName: RecreateSystemsIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DecalRendererFeature::*)(::UnityEngine::Rendering::Universal::ScriptableRenderer*, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::DecalRendererFeature::RecreateSystemsIfNeeded)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "RecreateSystemsIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::ChangeAdaptivePerformanceDrawDistances
// Il2CppName: ChangeAdaptivePerformanceDrawDistances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalRendererFeature::*)()>(&UnityEngine::Rendering::Universal::DecalRendererFeature::ChangeAdaptivePerformanceDrawDistances)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "ChangeAdaptivePerformanceDrawDistances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::DecalRendererFeature::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalRendererFeature::*)()>(&UnityEngine::Rendering::Universal::DecalRendererFeature::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::RequireRenderingLayers
// Il2CppName: RequireRenderingLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DecalRendererFeature::*)(bool, ByRef<::UnityEngine::Rendering::Universal::RenderingLayerUtils::Event>, ByRef<::UnityEngine::Rendering::Universal::RenderingLayerUtils::MaskSize>)>(&UnityEngine::Rendering::Universal::DecalRendererFeature::RequireRenderingLayers)> {
  static const MethodInfo* get() {
    static auto* isDeferred = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* atEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingLayerUtils/Event")->this_arg;
    static auto* maskSize = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingLayerUtils/MaskSize")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "RequireRenderingLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isDeferred, atEvent, maskSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::OnCameraPreCull
// Il2CppName: OnCameraPreCull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalRendererFeature::*)(::UnityEngine::Rendering::Universal::ScriptableRenderer*, ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::DecalRendererFeature::OnCameraPreCull)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer")->byval_arg;
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "OnCameraPreCull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::AddRenderPasses
// Il2CppName: AddRenderPasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalRendererFeature::*)(::UnityEngine::Rendering::Universal::ScriptableRenderer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::DecalRendererFeature::AddRenderPasses)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "AddRenderPasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::SupportsNativeRenderPass
// Il2CppName: SupportsNativeRenderPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DecalRendererFeature::*)()>(&UnityEngine::Rendering::Universal::DecalRendererFeature::SupportsNativeRenderPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "SupportsNativeRenderPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::SetupRenderPasses
// Il2CppName: SetupRenderPasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalRendererFeature::*)(::UnityEngine::Rendering::Universal::ScriptableRenderer*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Rendering::Universal::DecalRendererFeature::SetupRenderPasses)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "ScriptableRenderer")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "SetupRenderPasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalRendererFeature::*)(bool)>(&UnityEngine::Rendering::Universal::DecalRendererFeature::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalRendererFeature*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalRendererFeature::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
