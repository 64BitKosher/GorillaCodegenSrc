// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Rendering.ShadowSplitData
#include "UnityEngine/Rendering/ShadowSplitData.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: ShadowSliceData
  struct ShadowSliceData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::ShadowSliceData, "UnityEngine.Rendering.Universal", "ShadowSliceData");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x1C8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.ShadowSliceData
  // [TokenAttribute] Offset: FFFFFFFF
  struct ShadowSliceData/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Matrix4x4 viewMatrix
    // Size: 0x40
    // Offset: 0x0
    ::UnityEngine::Matrix4x4 viewMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // public UnityEngine.Matrix4x4 projectionMatrix
    // Size: 0x40
    // Offset: 0x40
    ::UnityEngine::Matrix4x4 projectionMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // public UnityEngine.Matrix4x4 shadowTransform
    // Size: 0x40
    // Offset: 0x80
    ::UnityEngine::Matrix4x4 shadowTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // public System.Int32 offsetX
    // Size: 0x4
    // Offset: 0xC0
    int offsetX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 offsetY
    // Size: 0x4
    // Offset: 0xC4
    int offsetY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 resolution
    // Size: 0x4
    // Offset: 0xC8
    int resolution;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Rendering.ShadowSplitData splitData
    // Size: 0xFC
    // Offset: 0xCC
    ::UnityEngine::Rendering::ShadowSplitData splitData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ShadowSplitData) == 0xFC);
    public:
    // Creating value type constructor for type: ShadowSliceData
    constexpr ShadowSliceData(::UnityEngine::Matrix4x4 viewMatrix_ = {}, ::UnityEngine::Matrix4x4 projectionMatrix_ = {}, ::UnityEngine::Matrix4x4 shadowTransform_ = {}, int offsetX_ = {}, int offsetY_ = {}, int resolution_ = {}, ::UnityEngine::Rendering::ShadowSplitData splitData_ = {}) noexcept : viewMatrix{viewMatrix_}, projectionMatrix{projectionMatrix_}, shadowTransform{shadowTransform_}, offsetX{offsetX_}, offsetY{offsetY_}, resolution{resolution_}, splitData{splitData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Matrix4x4 viewMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_viewMatrix();
    // Get instance field reference: public UnityEngine.Matrix4x4 projectionMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_projectionMatrix();
    // Get instance field reference: public UnityEngine.Matrix4x4 shadowTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_shadowTransform();
    // Get instance field reference: public System.Int32 offsetX
    [[deprecated("Use field access instead!")]] int& dyn_offsetX();
    // Get instance field reference: public System.Int32 offsetY
    [[deprecated("Use field access instead!")]] int& dyn_offsetY();
    // Get instance field reference: public System.Int32 resolution
    [[deprecated("Use field access instead!")]] int& dyn_resolution();
    // Get instance field reference: public UnityEngine.Rendering.ShadowSplitData splitData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ShadowSplitData& dyn_splitData();
    // public System.Void Clear()
    // Offset: 0x52DCE54
    void Clear();
  }; // UnityEngine.Rendering.Universal.ShadowSliceData
  #pragma pack(pop)
  static check_size<sizeof(ShadowSliceData), 204 + sizeof(::UnityEngine::Rendering::ShadowSplitData)> __UnityEngine_Rendering_Universal_ShadowSliceDataSizeCheck;
  static_assert(sizeof(ShadowSliceData) == 0x1C8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::ShadowSliceData::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::ShadowSliceData::*)()>(&UnityEngine::Rendering::Universal::ShadowSliceData::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::ShadowSliceData), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
