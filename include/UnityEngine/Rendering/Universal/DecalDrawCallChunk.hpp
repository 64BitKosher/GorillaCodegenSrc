// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.DecalChunk
#include "UnityEngine/Rendering/Universal/DecalChunk.hpp"
// Including type: Unity.Mathematics.float4x4
#include "Unity/Mathematics/float4x4.hpp"
// Including type: UnityEngine.Rendering.Universal.DecalSubDrawCall
#include "UnityEngine/Rendering/Universal/DecalSubDrawCall.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DecalDrawCallChunk
  class DecalDrawCallChunk;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::DecalDrawCallChunk);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DecalDrawCallChunk*, "UnityEngine.Rendering.Universal", "DecalDrawCallChunk");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.Universal.DecalDrawCallChunk
  // [TokenAttribute] Offset: FFFFFFFF
  class DecalDrawCallChunk : public ::UnityEngine::Rendering::Universal::DecalChunk {
    public:
    // Writing base type padding for base size: 0x24 to desired offset: 0x28
    char ___base_padding[0x4] = {};
    public:
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> decalToWorlds
    // Size: 0xFFFFFFFF
    // Offset: 0x28
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> decalToWorlds;
    // public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> normalToDecals
    // Size: 0xFFFFFFFF
    // Offset: 0x38
    ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4> normalToDecals;
    // public Unity.Collections.NativeArray`1<System.Single> renderingLayerMasks
    // Size: 0xFFFFFFFF
    // Offset: 0x48
    ::Unity::Collections::NativeArray_1<float> renderingLayerMasks;
    // public Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.DecalSubDrawCall> subCalls
    // Size: 0xFFFFFFFF
    // Offset: 0x58
    ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::DecalSubDrawCall> subCalls;
    // public Unity.Collections.NativeArray`1<System.Int32> subCallCounts
    // Size: 0xFFFFFFFF
    // Offset: 0x68
    ::Unity::Collections::NativeArray_1<int> subCallCounts;
    public:
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> decalToWorlds
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4>& dyn_decalToWorlds();
    // Get instance field reference: public Unity.Collections.NativeArray`1<Unity.Mathematics.float4x4> normalToDecals
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Unity::Mathematics::float4x4>& dyn_normalToDecals();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Single> renderingLayerMasks
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<float>& dyn_renderingLayerMasks();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Rendering.Universal.DecalSubDrawCall> subCalls
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::Universal::DecalSubDrawCall>& dyn_subCalls();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Int32> subCallCounts
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_subCallCounts();
    // public System.Void set_subCallCount(System.Int32 value)
    // Offset: 0x52A2C78
    void set_subCallCount(int value);
    // public System.Int32 get_subCallCount()
    // Offset: 0x52A2C84
    int get_subCallCount();
    // public override System.Void RemoveAtSwapBack(System.Int32 entityIndex)
    // Offset: 0x52A2C90
    // Implemented from: UnityEngine.Rendering.Universal.DecalChunk
    // Base method: System.Void DecalChunk::RemoveAtSwapBack(System.Int32 entityIndex)
    void RemoveAtSwapBack(int entityIndex);
    // public override System.Void SetCapacity(System.Int32 newCapacity)
    // Offset: 0x52A2D78
    // Implemented from: UnityEngine.Rendering.Universal.DecalChunk
    // Base method: System.Void DecalChunk::SetCapacity(System.Int32 newCapacity)
    void SetCapacity(int newCapacity);
    // public override System.Void Dispose()
    // Offset: 0x52A2E38
    // Implemented from: UnityEngine.Rendering.Universal.DecalChunk
    // Base method: System.Void DecalChunk::Dispose()
    void Dispose();
    // public System.Void .ctor()
    // Offset: 0x52A2F04
    // Implemented from: UnityEngine.Rendering.Universal.DecalChunk
    // Base method: System.Void DecalChunk::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DecalDrawCallChunk* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DecalDrawCallChunk::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DecalDrawCallChunk*, creationType>()));
    }
  }; // UnityEngine.Rendering.Universal.DecalDrawCallChunk
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawCallChunk::set_subCallCount
// Il2CppName: set_subCallCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalDrawCallChunk::*)(int)>(&UnityEngine::Rendering::Universal::DecalDrawCallChunk::set_subCallCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawCallChunk*), "set_subCallCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawCallChunk::get_subCallCount
// Il2CppName: get_subCallCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::DecalDrawCallChunk::*)()>(&UnityEngine::Rendering::Universal::DecalDrawCallChunk::get_subCallCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawCallChunk*), "get_subCallCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawCallChunk::RemoveAtSwapBack
// Il2CppName: RemoveAtSwapBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalDrawCallChunk::*)(int)>(&UnityEngine::Rendering::Universal::DecalDrawCallChunk::RemoveAtSwapBack)> {
  static const MethodInfo* get() {
    static auto* entityIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawCallChunk*), "RemoveAtSwapBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entityIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawCallChunk::SetCapacity
// Il2CppName: SetCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalDrawCallChunk::*)(int)>(&UnityEngine::Rendering::Universal::DecalDrawCallChunk::SetCapacity)> {
  static const MethodInfo* get() {
    static auto* newCapacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawCallChunk*), "SetCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newCapacity});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawCallChunk::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DecalDrawCallChunk::*)()>(&UnityEngine::Rendering::Universal::DecalDrawCallChunk::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DecalDrawCallChunk*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DecalDrawCallChunk::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
