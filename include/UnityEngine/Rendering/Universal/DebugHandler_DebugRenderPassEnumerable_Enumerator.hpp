// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.DebugHandler/DebugRenderPassEnumerable
#include "UnityEngine/Rendering/Universal/DebugHandler_DebugRenderPassEnumerable.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: UnityEngine.Rendering.ScriptableRenderContext
#include "UnityEngine/Rendering/ScriptableRenderContext.hpp"
// Including type: UnityEngine.Rendering.FilteringSettings
#include "UnityEngine/Rendering/FilteringSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: DebugRenderSetup
  class DebugRenderSetup;
  // Forward declaring type: DebugHandler
  class DebugHandler;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator*, "UnityEngine.Rendering.Universal", "DebugHandler/DebugRenderPassEnumerable/Enumerator");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Universal.DebugHandler/DebugRenderPassEnumerable/Enumerator
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugHandler::DebugRenderPassEnumerable::Enumerator : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::UnityEngine::Rendering::Universal::DebugRenderSetup*>*/ {
    public:
    public:
    // private readonly UnityEngine.Rendering.Universal.DebugHandler m_DebugHandler
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Rendering::Universal::DebugHandler* m_DebugHandler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DebugHandler*) == 0x8);
    // private readonly UnityEngine.Rendering.ScriptableRenderContext m_Context
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Rendering::ScriptableRenderContext m_Context;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ScriptableRenderContext) == 0x8);
    // private readonly UnityEngine.Rendering.CommandBuffer m_CommandBuffer
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rendering::CommandBuffer* m_CommandBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CommandBuffer*) == 0x8);
    // private readonly UnityEngine.Rendering.FilteringSettings m_FilteringSettings
    // Size: 0x18
    // Offset: 0x28
    ::UnityEngine::Rendering::FilteringSettings m_FilteringSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::FilteringSettings) == 0x18);
    // private readonly System.Int32 m_NumIterations
    // Size: 0x4
    // Offset: 0x40
    int m_NumIterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_Index
    // Size: 0x4
    // Offset: 0x44
    int m_Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.Universal.DebugRenderSetup <Current>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Rendering::Universal::DebugRenderSetup* Current;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::DebugRenderSetup*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::UnityEngine::Rendering::Universal::DebugRenderSetup*>
    operator ::System::Collections::Generic::IEnumerator_1<::UnityEngine::Rendering::Universal::DebugRenderSetup*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::Rendering::Universal::DebugRenderSetup*>*>(this);
    }
    // Get instance field reference: private readonly UnityEngine.Rendering.Universal.DebugHandler m_DebugHandler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DebugHandler*& dyn_m_DebugHandler();
    // Get instance field reference: private readonly UnityEngine.Rendering.ScriptableRenderContext m_Context
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ScriptableRenderContext& dyn_m_Context();
    // Get instance field reference: private readonly UnityEngine.Rendering.CommandBuffer m_CommandBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& dyn_m_CommandBuffer();
    // Get instance field reference: private readonly UnityEngine.Rendering.FilteringSettings m_FilteringSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::FilteringSettings& dyn_m_FilteringSettings();
    // Get instance field reference: private readonly System.Int32 m_NumIterations
    [[deprecated("Use field access instead!")]] int& dyn_m_NumIterations();
    // Get instance field reference: private System.Int32 m_Index
    [[deprecated("Use field access instead!")]] int& dyn_m_Index();
    // Get instance field reference: private UnityEngine.Rendering.Universal.DebugRenderSetup <Current>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::DebugRenderSetup*& dyn_$Current$k__BackingField();
    // public UnityEngine.Rendering.Universal.DebugRenderSetup get_Current()
    // Offset: 0x529F2E4
    ::UnityEngine::Rendering::Universal::DebugRenderSetup* get_Current();
    // private System.Void set_Current(UnityEngine.Rendering.Universal.DebugRenderSetup value)
    // Offset: 0x529F2EC
    void set_Current(::UnityEngine::Rendering::Universal::DebugRenderSetup* value);
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x529F2F4
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Void .ctor(UnityEngine.Rendering.Universal.DebugHandler debugHandler, UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Rendering.CommandBuffer commandBuffer, UnityEngine.Rendering.FilteringSettings filteringSettings)
    // Offset: 0x529F238
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugHandler::DebugRenderPassEnumerable::Enumerator* New_ctor(::UnityEngine::Rendering::Universal::DebugHandler* debugHandler, ::UnityEngine::Rendering::ScriptableRenderContext context, ::UnityEngine::Rendering::CommandBuffer* commandBuffer, ::UnityEngine::Rendering::FilteringSettings filteringSettings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugHandler::DebugRenderPassEnumerable::Enumerator*, creationType>(debugHandler, context, commandBuffer, filteringSettings)));
    }
    // public System.Boolean MoveNext()
    // Offset: 0x529F2FC
    bool MoveNext();
    // public System.Void Reset()
    // Offset: 0x529F458
    void Reset();
    // public System.Void Dispose()
    // Offset: 0x529F498
    void Dispose();
  }; // UnityEngine.Rendering.Universal.DebugHandler/DebugRenderPassEnumerable/Enumerator
  #pragma pack(pop)
  static check_size<sizeof(DebugHandler::DebugRenderPassEnumerable::Enumerator), 72 + sizeof(::UnityEngine::Rendering::Universal::DebugRenderSetup*)> __UnityEngine_Rendering_Universal_DebugHandler_DebugRenderPassEnumerable_EnumeratorSizeCheck;
  static_assert(sizeof(DebugHandler::DebugRenderPassEnumerable::Enumerator) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::DebugRenderSetup* (UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::set_Current
// Il2CppName: set_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::*)(::UnityEngine::Rendering::Universal::DebugRenderSetup*)>(&UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::set_Current)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "DebugRenderSetup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator*), "set_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::*)()>(&UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::DebugHandler::DebugRenderPassEnumerable::Enumerator*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
