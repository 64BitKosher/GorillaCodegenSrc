// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.BuddyAllocator
#include "UnityEngine/Rendering/Universal/BuddyAllocator.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::BuddyAllocator::Header, "UnityEngine.Rendering.Universal", "BuddyAllocator/Header");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.BuddyAllocator/Header
  // [TokenAttribute] Offset: FFFFFFFF
  struct BuddyAllocator::Header/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 branchingOrder
    // Size: 0x4
    // Offset: 0x0
    int branchingOrder;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 levelCount
    // Size: 0x4
    // Offset: 0x4
    int levelCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 allocationCount
    // Size: 0x4
    // Offset: 0x8
    int allocationCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 freeAllocationIdsCount
    // Size: 0x4
    // Offset: 0xC
    int freeAllocationIdsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Header
    constexpr Header(int branchingOrder_ = {}, int levelCount_ = {}, int allocationCount_ = {}, int freeAllocationIdsCount_ = {}) noexcept : branchingOrder{branchingOrder_}, levelCount{levelCount_}, allocationCount{allocationCount_}, freeAllocationIdsCount{freeAllocationIdsCount_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 branchingOrder
    [[deprecated("Use field access instead!")]] int& dyn_branchingOrder();
    // Get instance field reference: public System.Int32 levelCount
    [[deprecated("Use field access instead!")]] int& dyn_levelCount();
    // Get instance field reference: public System.Int32 allocationCount
    [[deprecated("Use field access instead!")]] int& dyn_allocationCount();
    // Get instance field reference: public System.Int32 freeAllocationIdsCount
    [[deprecated("Use field access instead!")]] int& dyn_freeAllocationIdsCount();
  }; // UnityEngine.Rendering.Universal.BuddyAllocator/Header
  #pragma pack(pop)
  static check_size<sizeof(BuddyAllocator::Header), 12 + sizeof(int)> __UnityEngine_Rendering_Universal_BuddyAllocator_HeaderSizeCheck;
  static_assert(sizeof(BuddyAllocator::Header) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
