// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Rendering.RenderTargetIdentifier
#include "UnityEngine/Rendering/RenderTargetIdentifier.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: CameraData
  struct CameraData;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: RenderTargetHandle
  struct RenderTargetHandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Universal::RenderTargetHandle, "UnityEngine.Rendering.Universal", "RenderTargetHandle");
// Type namespace: UnityEngine.Rendering.Universal
namespace UnityEngine::Rendering::Universal {
  // Size: 0x2C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.Universal.RenderTargetHandle
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  struct RenderTargetHandle/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 <id>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: id and: rtid
    char __padding0[0x4] = {};
    // private UnityEngine.Rendering.RenderTargetIdentifier <rtid>k__BackingField
    // Size: 0x24
    // Offset: 0x8
    ::UnityEngine::Rendering::RenderTargetIdentifier rtid;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetIdentifier) == 0x24);
    public:
    // Creating value type constructor for type: RenderTargetHandle
    constexpr RenderTargetHandle(int id_ = {}, ::UnityEngine::Rendering::RenderTargetIdentifier rtid_ = {}) noexcept : id{id_}, rtid{rtid_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly UnityEngine.Rendering.Universal.RenderTargetHandle CameraTarget
    static ::UnityEngine::Rendering::Universal::RenderTargetHandle _get_CameraTarget();
    // Set static field: static public readonly UnityEngine.Rendering.Universal.RenderTargetHandle CameraTarget
    static void _set_CameraTarget(::UnityEngine::Rendering::Universal::RenderTargetHandle value);
    // Get instance field reference: private System.Int32 <id>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$id$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetIdentifier <rtid>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetIdentifier& dyn_$rtid$k__BackingField();
    // public System.Void set_id(System.Int32 value)
    // Offset: 0x52DBDC4
    void set_id(int value);
    // public System.Int32 get_id()
    // Offset: 0x52DBDCC
    int get_id();
    // private System.Void set_rtid(UnityEngine.Rendering.RenderTargetIdentifier value)
    // Offset: 0x52DBDD4
    void set_rtid(::UnityEngine::Rendering::RenderTargetIdentifier value);
    // private UnityEngine.Rendering.RenderTargetIdentifier get_rtid()
    // Offset: 0x52DBDEC
    ::UnityEngine::Rendering::RenderTargetIdentifier get_rtid();
    // public System.Void .ctor(UnityEngine.Rendering.RenderTargetIdentifier renderTargetIdentifier)
    // Offset: 0x52DBE04
    RenderTargetHandle(::UnityEngine::Rendering::RenderTargetIdentifier renderTargetIdentifier);
    // public System.Void .ctor(UnityEngine.Rendering.RTHandle rtHandle)
    // Offset: 0x52DBE24
    RenderTargetHandle(::UnityEngine::Rendering::RTHandle* rtHandle);
    // static UnityEngine.Rendering.Universal.RenderTargetHandle GetCameraTarget(ref UnityEngine.Rendering.Universal.CameraData cameraData)
    // Offset: 0x52DBF98
    static ::UnityEngine::Rendering::Universal::RenderTargetHandle GetCameraTarget(ByRef<::UnityEngine::Rendering::Universal::CameraData> cameraData);
    // public System.Void Init(System.String shaderProperty)
    // Offset: 0x52DC048
    void Init(::StringW shaderProperty);
    // public System.Void Init(UnityEngine.Rendering.RenderTargetIdentifier renderTargetIdentifier)
    // Offset: 0x52DC068
    void Init(::UnityEngine::Rendering::RenderTargetIdentifier renderTargetIdentifier);
    // public UnityEngine.Rendering.RenderTargetIdentifier Identifier()
    // Offset: 0x52DC088
    ::UnityEngine::Rendering::RenderTargetIdentifier Identifier();
    // public System.Boolean HasInternalRenderTargetId()
    // Offset: 0x52DC114
    bool HasInternalRenderTargetId();
    // public System.Boolean Equals(UnityEngine.Rendering.Universal.RenderTargetHandle other)
    // Offset: 0x52DC124
    bool Equals(::UnityEngine::Rendering::Universal::RenderTargetHandle other);
    // static private System.Void .cctor()
    // Offset: 0x52DC2BC
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x52DC1C0
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x52DC250
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Rendering.Universal.RenderTargetHandle
  #pragma pack(pop)
  static check_size<sizeof(RenderTargetHandle), 8 + sizeof(::UnityEngine::Rendering::RenderTargetIdentifier)> __UnityEngine_Rendering_Universal_RenderTargetHandleSizeCheck;
  static_assert(sizeof(RenderTargetHandle) == 0x2C);
  // static public System.Boolean op_Equality(UnityEngine.Rendering.Universal.RenderTargetHandle c1, UnityEngine.Rendering.Universal.RenderTargetHandle c2)
  // Offset: 0x52DC258
  bool operator ==(const ::UnityEngine::Rendering::Universal::RenderTargetHandle& c1, const ::UnityEngine::Rendering::Universal::RenderTargetHandle& c2);
  // static public System.Boolean op_Inequality(UnityEngine.Rendering.Universal.RenderTargetHandle c1, UnityEngine.Rendering.Universal.RenderTargetHandle c2)
  // Offset: 0x52DC288
  bool operator !=(const ::UnityEngine::Rendering::Universal::RenderTargetHandle& c1, const ::UnityEngine::Rendering::Universal::RenderTargetHandle& c2);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::set_id
// Il2CppName: set_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::RenderTargetHandle::*)(int)>(&UnityEngine::Rendering::Universal::RenderTargetHandle::set_id)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderTargetHandle), "set_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::RenderTargetHandle::*)()>(&UnityEngine::Rendering::Universal::RenderTargetHandle::get_id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderTargetHandle), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::set_rtid
// Il2CppName: set_rtid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::RenderTargetHandle::*)(::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Rendering::Universal::RenderTargetHandle::set_rtid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderTargetHandle), "set_rtid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::get_rtid
// Il2CppName: get_rtid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderTargetIdentifier (UnityEngine::Rendering::Universal::RenderTargetHandle::*)()>(&UnityEngine::Rendering::Universal::RenderTargetHandle::get_rtid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderTargetHandle), "get_rtid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::RenderTargetHandle
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::RenderTargetHandle
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::GetCameraTarget
// Il2CppName: GetCameraTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::Universal::RenderTargetHandle (*)(ByRef<::UnityEngine::Rendering::Universal::CameraData>)>(&UnityEngine::Rendering::Universal::RenderTargetHandle::GetCameraTarget)> {
  static const MethodInfo* get() {
    static auto* cameraData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "CameraData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderTargetHandle), "GetCameraTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::RenderTargetHandle::*)(::StringW)>(&UnityEngine::Rendering::Universal::RenderTargetHandle::Init)> {
  static const MethodInfo* get() {
    static auto* shaderProperty = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderTargetHandle), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderProperty});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Universal::RenderTargetHandle::*)(::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Rendering::Universal::RenderTargetHandle::Init)> {
  static const MethodInfo* get() {
    static auto* renderTargetIdentifier = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderTargetHandle), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderTargetIdentifier});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::Identifier
// Il2CppName: Identifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderTargetIdentifier (UnityEngine::Rendering::Universal::RenderTargetHandle::*)()>(&UnityEngine::Rendering::Universal::RenderTargetHandle::Identifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderTargetHandle), "Identifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::HasInternalRenderTargetId
// Il2CppName: HasInternalRenderTargetId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::RenderTargetHandle::*)()>(&UnityEngine::Rendering::Universal::RenderTargetHandle::HasInternalRenderTargetId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderTargetHandle), "HasInternalRenderTargetId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::RenderTargetHandle::*)(::UnityEngine::Rendering::Universal::RenderTargetHandle)>(&UnityEngine::Rendering::Universal::RenderTargetHandle::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderTargetHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderTargetHandle), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::Universal::RenderTargetHandle::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderTargetHandle), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Universal::RenderTargetHandle::*)(::Il2CppObject*)>(&UnityEngine::Rendering::Universal::RenderTargetHandle::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderTargetHandle), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::Universal::RenderTargetHandle::*)()>(&UnityEngine::Rendering::Universal::RenderTargetHandle::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Universal::RenderTargetHandle), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Rendering::Universal::RenderTargetHandle::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
