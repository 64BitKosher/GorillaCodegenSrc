// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.DebugUI
#include "UnityEngine/Rendering/DebugUI.hpp"
// Including type: UnityEngine.Rendering.DebugUI/Flags
#include "UnityEngine/Rendering/DebugUI_Flags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::DebugUI::Widget);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::DebugUI::Widget*, "UnityEngine.Rendering", "DebugUI/Widget");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.DebugUI/Widget
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugUI::Widget : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Rendering::DebugUI::Widget::NameAndTooltip
    struct NameAndTooltip;
    public:
    // protected UnityEngine.Rendering.DebugUI/Panel m_Panel
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Rendering::DebugUI::Panel* m_Panel;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::DebugUI::Panel*) == 0x8);
    // protected UnityEngine.Rendering.DebugUI/IContainer m_Parent
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Rendering::DebugUI::IContainer* m_Parent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::DebugUI::IContainer*) == 0x8);
    // private UnityEngine.Rendering.DebugUI/Flags <flags>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::Rendering::DebugUI::Flags flags;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::DebugUI::Flags) == 0x4);
    // Padding between fields: flags and: displayName
    char __padding2[0x4] = {};
    // private System.String <displayName>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <tooltip>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::StringW tooltip;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <queryPath>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::StringW queryPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Func`1<System.Boolean> isHiddenCallback
    // Size: 0x8
    // Offset: 0x40
    ::System::Func_1<bool>* isHiddenCallback;
    // Field size check
    static_assert(sizeof(::System::Func_1<bool>*) == 0x8);
    public:
    // Get instance field reference: protected UnityEngine.Rendering.DebugUI/Panel m_Panel
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::DebugUI::Panel*& dyn_m_Panel();
    // Get instance field reference: protected UnityEngine.Rendering.DebugUI/IContainer m_Parent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::DebugUI::IContainer*& dyn_m_Parent();
    // Get instance field reference: private UnityEngine.Rendering.DebugUI/Flags <flags>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::DebugUI::Flags& dyn_$flags$k__BackingField();
    // Get instance field reference: private System.String <displayName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$displayName$k__BackingField();
    // Get instance field reference: private System.String <tooltip>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$tooltip$k__BackingField();
    // Get instance field reference: private System.String <queryPath>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$queryPath$k__BackingField();
    // Get instance field reference: public System.Func`1<System.Boolean> isHiddenCallback
    [[deprecated("Use field access instead!")]] ::System::Func_1<bool>*& dyn_isHiddenCallback();
    // public UnityEngine.Rendering.DebugUI/Panel get_panel()
    // Offset: 0x5249F40
    ::UnityEngine::Rendering::DebugUI::Panel* get_panel();
    // System.Void set_panel(UnityEngine.Rendering.DebugUI/Panel value)
    // Offset: 0x5249F48
    void set_panel(::UnityEngine::Rendering::DebugUI::Panel* value);
    // public UnityEngine.Rendering.DebugUI/IContainer get_parent()
    // Offset: 0x5249F50
    ::UnityEngine::Rendering::DebugUI::IContainer* get_parent();
    // System.Void set_parent(UnityEngine.Rendering.DebugUI/IContainer value)
    // Offset: 0x5249F58
    void set_parent(::UnityEngine::Rendering::DebugUI::IContainer* value);
    // public UnityEngine.Rendering.DebugUI/Flags get_flags()
    // Offset: 0x5249F60
    ::UnityEngine::Rendering::DebugUI::Flags get_flags();
    // public System.Void set_flags(UnityEngine.Rendering.DebugUI/Flags value)
    // Offset: 0x5249F68
    void set_flags(::UnityEngine::Rendering::DebugUI::Flags value);
    // public System.String get_displayName()
    // Offset: 0x5249F70
    ::StringW get_displayName();
    // public System.Void set_displayName(System.String value)
    // Offset: 0x5249F78
    void set_displayName(::StringW value);
    // public System.Void set_tooltip(System.String value)
    // Offset: 0x5249F80
    void set_tooltip(::StringW value);
    // public System.String get_queryPath()
    // Offset: 0x5249F88
    ::StringW get_queryPath();
    // private System.Void set_queryPath(System.String value)
    // Offset: 0x5249F90
    void set_queryPath(::StringW value);
    // public System.Boolean get_isEditorOnly()
    // Offset: 0x5249F98
    bool get_isEditorOnly();
    // public System.Boolean get_isHidden()
    // Offset: 0x5249B9C
    bool get_isHidden();
    // System.Void GenerateQueryPath()
    // Offset: 0x52497E0
    void GenerateQueryPath();
    // public System.Void set_nameAndTooltip(UnityEngine.Rendering.DebugUI/Widget/NameAndTooltip value)
    // Offset: 0x524A010
    void set_nameAndTooltip(::UnityEngine::Rendering::DebugUI::Widget::NameAndTooltip value);
    // protected System.Void .ctor()
    // Offset: 0x5249720
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugUI::Widget* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::Widget::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugUI::Widget*, creationType>()));
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0x5249FA4
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Rendering.DebugUI/Widget
  #pragma pack(pop)
  static check_size<sizeof(DebugUI::Widget), 64 + sizeof(::System::Func_1<bool>*)> __UnityEngine_Rendering_DebugUI_WidgetSizeCheck;
  static_assert(sizeof(DebugUI::Widget) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::get_panel
// Il2CppName: get_panel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::DebugUI::Panel* (UnityEngine::Rendering::DebugUI::Widget::*)()>(&UnityEngine::Rendering::DebugUI::Widget::get_panel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "get_panel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::set_panel
// Il2CppName: set_panel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugUI::Widget::*)(::UnityEngine::Rendering::DebugUI::Panel*)>(&UnityEngine::Rendering::DebugUI::Widget::set_panel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/Panel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "set_panel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::get_parent
// Il2CppName: get_parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::DebugUI::IContainer* (UnityEngine::Rendering::DebugUI::Widget::*)()>(&UnityEngine::Rendering::DebugUI::Widget::get_parent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "get_parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::set_parent
// Il2CppName: set_parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugUI::Widget::*)(::UnityEngine::Rendering::DebugUI::IContainer*)>(&UnityEngine::Rendering::DebugUI::Widget::set_parent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/IContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "set_parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::get_flags
// Il2CppName: get_flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::DebugUI::Flags (UnityEngine::Rendering::DebugUI::Widget::*)()>(&UnityEngine::Rendering::DebugUI::Widget::get_flags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "get_flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::set_flags
// Il2CppName: set_flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugUI::Widget::*)(::UnityEngine::Rendering::DebugUI::Flags)>(&UnityEngine::Rendering::DebugUI::Widget::set_flags)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/Flags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "set_flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::get_displayName
// Il2CppName: get_displayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Rendering::DebugUI::Widget::*)()>(&UnityEngine::Rendering::DebugUI::Widget::get_displayName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "get_displayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::set_displayName
// Il2CppName: set_displayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugUI::Widget::*)(::StringW)>(&UnityEngine::Rendering::DebugUI::Widget::set_displayName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "set_displayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::set_tooltip
// Il2CppName: set_tooltip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugUI::Widget::*)(::StringW)>(&UnityEngine::Rendering::DebugUI::Widget::set_tooltip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "set_tooltip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::get_queryPath
// Il2CppName: get_queryPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Rendering::DebugUI::Widget::*)()>(&UnityEngine::Rendering::DebugUI::Widget::get_queryPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "get_queryPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::set_queryPath
// Il2CppName: set_queryPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugUI::Widget::*)(::StringW)>(&UnityEngine::Rendering::DebugUI::Widget::set_queryPath)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "set_queryPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::get_isEditorOnly
// Il2CppName: get_isEditorOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::DebugUI::Widget::*)()>(&UnityEngine::Rendering::DebugUI::Widget::get_isEditorOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "get_isEditorOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::get_isHidden
// Il2CppName: get_isHidden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::DebugUI::Widget::*)()>(&UnityEngine::Rendering::DebugUI::Widget::get_isHidden)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "get_isHidden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::GenerateQueryPath
// Il2CppName: GenerateQueryPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugUI::Widget::*)()>(&UnityEngine::Rendering::DebugUI::Widget::GenerateQueryPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "GenerateQueryPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::set_nameAndTooltip
// Il2CppName: set_nameAndTooltip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugUI::Widget::*)(::UnityEngine::Rendering::DebugUI::Widget::NameAndTooltip)>(&UnityEngine::Rendering::DebugUI::Widget::set_nameAndTooltip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/Widget/NameAndTooltip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "set_nameAndTooltip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Widget::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::DebugUI::Widget::*)()>(&UnityEngine::Rendering::DebugUI::Widget::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Widget*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
