// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: AsyncGPUReadbackRequest
  struct AsyncGPUReadbackRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::AsyncGPUReadbackRequest, "UnityEngine.Rendering", "AsyncGPUReadbackRequest");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.AsyncGPUReadbackRequest
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  struct AsyncGPUReadbackRequest/*, public ::System::ValueType*/ {
    public:
    public:
    // System.IntPtr m_Ptr
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr m_Ptr;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // System.Int32 m_Version
    // Size: 0x4
    // Offset: 0x8
    int m_Version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: AsyncGPUReadbackRequest
    constexpr AsyncGPUReadbackRequest(::System::IntPtr m_Ptr_ = {}, int m_Version_ = {}) noexcept : m_Ptr{m_Ptr_}, m_Version{m_Version_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.IntPtr m_Ptr
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_Ptr();
    // Get instance field reference: System.Int32 m_Version
    [[deprecated("Use field access instead!")]] int& dyn_m_Version();
    // public System.Void WaitForCompletion()
    // Offset: 0x54DF480
    void WaitForCompletion();
    // public System.Boolean get_hasError()
    // Offset: 0x54DF4F8
    bool get_hasError();
    // private System.Boolean HasError()
    // Offset: 0x54DF534
    bool HasError();
    // System.Void SetScriptingCallback(System.Action`1<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback)
    // Offset: 0x54DF5AC
    void SetScriptingCallback(::System::Action_1<::UnityEngine::Rendering::AsyncGPUReadbackRequest>* callback);
    // static private System.Void WaitForCompletion_Injected(ref UnityEngine.Rendering.AsyncGPUReadbackRequest _unity_self)
    // Offset: 0x54DF4BC
    static void WaitForCompletion_Injected(ByRef<::UnityEngine::Rendering::AsyncGPUReadbackRequest> _unity_self);
    // static private System.Boolean HasError_Injected(ref UnityEngine.Rendering.AsyncGPUReadbackRequest _unity_self)
    // Offset: 0x54DF570
    static bool HasError_Injected(ByRef<::UnityEngine::Rendering::AsyncGPUReadbackRequest> _unity_self);
    // static private System.Void SetScriptingCallback_Injected(ref UnityEngine.Rendering.AsyncGPUReadbackRequest _unity_self, System.Action`1<UnityEngine.Rendering.AsyncGPUReadbackRequest> callback)
    // Offset: 0x54DF5F0
    static void SetScriptingCallback_Injected(ByRef<::UnityEngine::Rendering::AsyncGPUReadbackRequest> _unity_self, ::System::Action_1<::UnityEngine::Rendering::AsyncGPUReadbackRequest>* callback);
  }; // UnityEngine.Rendering.AsyncGPUReadbackRequest
  #pragma pack(pop)
  static check_size<sizeof(AsyncGPUReadbackRequest), 8 + sizeof(int)> __UnityEngine_Rendering_AsyncGPUReadbackRequestSizeCheck;
  static_assert(sizeof(AsyncGPUReadbackRequest) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::AsyncGPUReadbackRequest::WaitForCompletion
// Il2CppName: WaitForCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::AsyncGPUReadbackRequest::*)()>(&UnityEngine::Rendering::AsyncGPUReadbackRequest::WaitForCompletion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AsyncGPUReadbackRequest), "WaitForCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AsyncGPUReadbackRequest::get_hasError
// Il2CppName: get_hasError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::AsyncGPUReadbackRequest::*)()>(&UnityEngine::Rendering::AsyncGPUReadbackRequest::get_hasError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AsyncGPUReadbackRequest), "get_hasError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AsyncGPUReadbackRequest::HasError
// Il2CppName: HasError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::AsyncGPUReadbackRequest::*)()>(&UnityEngine::Rendering::AsyncGPUReadbackRequest::HasError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AsyncGPUReadbackRequest), "HasError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AsyncGPUReadbackRequest::SetScriptingCallback
// Il2CppName: SetScriptingCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::AsyncGPUReadbackRequest::*)(::System::Action_1<::UnityEngine::Rendering::AsyncGPUReadbackRequest>*)>(&UnityEngine::Rendering::AsyncGPUReadbackRequest::SetScriptingCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "AsyncGPUReadbackRequest")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AsyncGPUReadbackRequest), "SetScriptingCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AsyncGPUReadbackRequest::WaitForCompletion_Injected
// Il2CppName: WaitForCompletion_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Rendering::AsyncGPUReadbackRequest>)>(&UnityEngine::Rendering::AsyncGPUReadbackRequest::WaitForCompletion_Injected)> {
  static const MethodInfo* get() {
    static auto* _unity_self = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "AsyncGPUReadbackRequest")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AsyncGPUReadbackRequest), "WaitForCompletion_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_unity_self});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AsyncGPUReadbackRequest::HasError_Injected
// Il2CppName: HasError_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Rendering::AsyncGPUReadbackRequest>)>(&UnityEngine::Rendering::AsyncGPUReadbackRequest::HasError_Injected)> {
  static const MethodInfo* get() {
    static auto* _unity_self = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "AsyncGPUReadbackRequest")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AsyncGPUReadbackRequest), "HasError_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_unity_self});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AsyncGPUReadbackRequest::SetScriptingCallback_Injected
// Il2CppName: SetScriptingCallback_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Rendering::AsyncGPUReadbackRequest>, ::System::Action_1<::UnityEngine::Rendering::AsyncGPUReadbackRequest>*)>(&UnityEngine::Rendering::AsyncGPUReadbackRequest::SetScriptingCallback_Injected)> {
  static const MethodInfo* get() {
    static auto* _unity_self = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "AsyncGPUReadbackRequest")->this_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "AsyncGPUReadbackRequest")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AsyncGPUReadbackRequest), "SetScriptingCallback_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_unity_self, callback});
  }
};
