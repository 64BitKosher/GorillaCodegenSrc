// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: GraphicsTier
  struct GraphicsTier;
  // Forward declaring type: BuiltinShaderDefine
  struct BuiltinShaderDefine;
  // Forward declaring type: RenderPipelineAsset
  class RenderPipelineAsset;
  // Forward declaring type: RenderPipeline
  class RenderPipeline;
  // Forward declaring type: RenderPipelineGlobalSettings
  class RenderPipelineGlobalSettings;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ScriptableObject
  class ScriptableObject;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: GraphicsSettings
  class GraphicsSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::GraphicsSettings);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::GraphicsSettings*, "UnityEngine.Rendering", "GraphicsSettings");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.GraphicsSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [StaticAccessorAttribute] Offset: FFFFFFFF
  class GraphicsSettings : public ::UnityEngine::Object {
    public:
    // static public System.Boolean get_lightsUseLinearIntensity()
    // Offset: 0x54E076C
    static bool get_lightsUseLinearIntensity();
    // static public System.Void set_lightsUseLinearIntensity(System.Boolean value)
    // Offset: 0x54E0794
    static void set_lightsUseLinearIntensity(bool value);
    // static public System.Void set_lightsUseColorTemperature(System.Boolean value)
    // Offset: 0x54E07D0
    static void set_lightsUseColorTemperature(bool value);
    // static public System.UInt32 get_defaultRenderingLayerMask()
    // Offset: 0x54E080C
    static uint get_defaultRenderingLayerMask();
    // static public System.Void set_defaultRenderingLayerMask(System.UInt32 value)
    // Offset: 0x54E0834
    static void set_defaultRenderingLayerMask(uint value);
    // static public System.Void set_useScriptableRenderPipelineBatching(System.Boolean value)
    // Offset: 0x54E0870
    static void set_useScriptableRenderPipelineBatching(bool value);
    // static public System.Boolean HasShaderDefine(UnityEngine.Rendering.GraphicsTier tier, UnityEngine.Rendering.BuiltinShaderDefine defineHash)
    // Offset: 0x54E08AC
    static bool HasShaderDefine(::UnityEngine::Rendering::GraphicsTier tier, ::UnityEngine::Rendering::BuiltinShaderDefine defineHash);
    // static public System.Boolean HasShaderDefine(UnityEngine.Rendering.BuiltinShaderDefine defineHash)
    // Offset: 0x54E08F0
    static bool HasShaderDefine(::UnityEngine::Rendering::BuiltinShaderDefine defineHash);
    // static private UnityEngine.ScriptableObject get_INTERNAL_currentRenderPipeline()
    // Offset: 0x54E0974
    static ::UnityEngine::ScriptableObject* get_INTERNAL_currentRenderPipeline();
    // static public UnityEngine.Rendering.RenderPipelineAsset get_currentRenderPipeline()
    // Offset: 0x54E099C
    static ::UnityEngine::Rendering::RenderPipelineAsset* get_currentRenderPipeline();
    // static public UnityEngine.Rendering.RenderPipelineAsset get_renderPipelineAsset()
    // Offset: 0x54E0A2C
    static ::UnityEngine::Rendering::RenderPipelineAsset* get_renderPipelineAsset();
    // static public System.Void set_renderPipelineAsset(UnityEngine.Rendering.RenderPipelineAsset value)
    // Offset: 0x54E0AC0
    static void set_renderPipelineAsset(::UnityEngine::Rendering::RenderPipelineAsset* value);
    // static private UnityEngine.ScriptableObject get_INTERNAL_defaultRenderPipeline()
    // Offset: 0x54E0B38
    static ::UnityEngine::ScriptableObject* get_INTERNAL_defaultRenderPipeline();
    // static private System.Void set_INTERNAL_defaultRenderPipeline(UnityEngine.ScriptableObject value)
    // Offset: 0x54E0B60
    static void set_INTERNAL_defaultRenderPipeline(::UnityEngine::ScriptableObject* value);
    // static public UnityEngine.Rendering.RenderPipelineAsset get_defaultRenderPipeline()
    // Offset: 0x54E0A30
    static ::UnityEngine::Rendering::RenderPipelineAsset* get_defaultRenderPipeline();
    // static public System.Void set_defaultRenderPipeline(UnityEngine.Rendering.RenderPipelineAsset value)
    // Offset: 0x54E0AFC
    static void set_defaultRenderPipeline(::UnityEngine::Rendering::RenderPipelineAsset* value);
    // static public System.Void RegisterRenderPipelineSettings(UnityEngine.Rendering.RenderPipelineGlobalSettings settings)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void RegisterRenderPipelineSettings(::UnityEngine::Rendering::RenderPipelineGlobalSettings* settings) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Rendering::RenderPipeline*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::GraphicsSettings::RegisterRenderPipelineSettings");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "GraphicsSettings", "RegisterRenderPipelineSettings", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(settings)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, settings);
    }
    // static private System.Void RegisterRenderPipeline(System.String renderpipelineName, UnityEngine.Object settings)
    // Offset: 0x54E0B9C
    static void RegisterRenderPipeline(::StringW renderpipelineName, ::UnityEngine::Object* settings);
    // static public System.Void UnregisterRenderPipelineSettings()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void UnregisterRenderPipelineSettings() {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Rendering::RenderPipeline*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::GraphicsSettings::UnregisterRenderPipelineSettings");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "GraphicsSettings", "UnregisterRenderPipelineSettings", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static private System.Void UnregisterRenderPipeline(System.String renderpipelineName)
    // Offset: 0x54E0BE0
    static void UnregisterRenderPipeline(::StringW renderpipelineName);
    // static public UnityEngine.Rendering.RenderPipelineGlobalSettings GetSettingsForRenderPipeline()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::UnityEngine::Rendering::RenderPipelineGlobalSettings* GetSettingsForRenderPipeline() {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Rendering::RenderPipeline*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::GraphicsSettings::GetSettingsForRenderPipeline");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "GraphicsSettings", "GetSettingsForRenderPipeline", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rendering::RenderPipelineGlobalSettings*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static private UnityEngine.Object GetSettingsForRenderPipeline(System.String renderpipelineName)
    // Offset: 0x54E0C1C
    static ::UnityEngine::Object* GetSettingsForRenderPipeline(::StringW renderpipelineName);
  }; // UnityEngine.Rendering.GraphicsSettings
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::get_lightsUseLinearIntensity
// Il2CppName: get_lightsUseLinearIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::Rendering::GraphicsSettings::get_lightsUseLinearIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "get_lightsUseLinearIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::set_lightsUseLinearIntensity
// Il2CppName: set_lightsUseLinearIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&UnityEngine::Rendering::GraphicsSettings::set_lightsUseLinearIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "set_lightsUseLinearIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::set_lightsUseColorTemperature
// Il2CppName: set_lightsUseColorTemperature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&UnityEngine::Rendering::GraphicsSettings::set_lightsUseColorTemperature)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "set_lightsUseColorTemperature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::get_defaultRenderingLayerMask
// Il2CppName: get_defaultRenderingLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)()>(&UnityEngine::Rendering::GraphicsSettings::get_defaultRenderingLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "get_defaultRenderingLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::set_defaultRenderingLayerMask
// Il2CppName: set_defaultRenderingLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint)>(&UnityEngine::Rendering::GraphicsSettings::set_defaultRenderingLayerMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "set_defaultRenderingLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::set_useScriptableRenderPipelineBatching
// Il2CppName: set_useScriptableRenderPipelineBatching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&UnityEngine::Rendering::GraphicsSettings::set_useScriptableRenderPipelineBatching)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "set_useScriptableRenderPipelineBatching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::HasShaderDefine
// Il2CppName: HasShaderDefine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::GraphicsTier, ::UnityEngine::Rendering::BuiltinShaderDefine)>(&UnityEngine::Rendering::GraphicsSettings::HasShaderDefine)> {
  static const MethodInfo* get() {
    static auto* tier = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "GraphicsTier")->byval_arg;
    static auto* defineHash = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "BuiltinShaderDefine")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "HasShaderDefine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tier, defineHash});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::HasShaderDefine
// Il2CppName: HasShaderDefine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::BuiltinShaderDefine)>(&UnityEngine::Rendering::GraphicsSettings::HasShaderDefine)> {
  static const MethodInfo* get() {
    static auto* defineHash = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "BuiltinShaderDefine")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "HasShaderDefine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{defineHash});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::get_INTERNAL_currentRenderPipeline
// Il2CppName: get_INTERNAL_currentRenderPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ScriptableObject* (*)()>(&UnityEngine::Rendering::GraphicsSettings::get_INTERNAL_currentRenderPipeline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "get_INTERNAL_currentRenderPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::get_currentRenderPipeline
// Il2CppName: get_currentRenderPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderPipelineAsset* (*)()>(&UnityEngine::Rendering::GraphicsSettings::get_currentRenderPipeline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "get_currentRenderPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::get_renderPipelineAsset
// Il2CppName: get_renderPipelineAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderPipelineAsset* (*)()>(&UnityEngine::Rendering::GraphicsSettings::get_renderPipelineAsset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "get_renderPipelineAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::set_renderPipelineAsset
// Il2CppName: set_renderPipelineAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::RenderPipelineAsset*)>(&UnityEngine::Rendering::GraphicsSettings::set_renderPipelineAsset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderPipelineAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "set_renderPipelineAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::get_INTERNAL_defaultRenderPipeline
// Il2CppName: get_INTERNAL_defaultRenderPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ScriptableObject* (*)()>(&UnityEngine::Rendering::GraphicsSettings::get_INTERNAL_defaultRenderPipeline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "get_INTERNAL_defaultRenderPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::set_INTERNAL_defaultRenderPipeline
// Il2CppName: set_INTERNAL_defaultRenderPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::ScriptableObject*)>(&UnityEngine::Rendering::GraphicsSettings::set_INTERNAL_defaultRenderPipeline)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ScriptableObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "set_INTERNAL_defaultRenderPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::get_defaultRenderPipeline
// Il2CppName: get_defaultRenderPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderPipelineAsset* (*)()>(&UnityEngine::Rendering::GraphicsSettings::get_defaultRenderPipeline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "get_defaultRenderPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::set_defaultRenderPipeline
// Il2CppName: set_defaultRenderPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::RenderPipelineAsset*)>(&UnityEngine::Rendering::GraphicsSettings::set_defaultRenderPipeline)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderPipelineAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "set_defaultRenderPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::RegisterRenderPipelineSettings
// Il2CppName: RegisterRenderPipelineSettings
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::RegisterRenderPipeline
// Il2CppName: RegisterRenderPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::UnityEngine::Object*)>(&UnityEngine::Rendering::GraphicsSettings::RegisterRenderPipeline)> {
  static const MethodInfo* get() {
    static auto* renderpipelineName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "RegisterRenderPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderpipelineName, settings});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::UnregisterRenderPipelineSettings
// Il2CppName: UnregisterRenderPipelineSettings
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::UnregisterRenderPipeline
// Il2CppName: UnregisterRenderPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&UnityEngine::Rendering::GraphicsSettings::UnregisterRenderPipeline)> {
  static const MethodInfo* get() {
    static auto* renderpipelineName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "UnregisterRenderPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderpipelineName});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::GetSettingsForRenderPipeline
// Il2CppName: GetSettingsForRenderPipeline
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsSettings::GetSettingsForRenderPipeline
// Il2CppName: GetSettingsForRenderPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Object* (*)(::StringW)>(&UnityEngine::Rendering::GraphicsSettings::GetSettingsForRenderPipeline)> {
  static const MethodInfo* get() {
    static auto* renderpipelineName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsSettings*), "GetSettingsForRenderPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderpipelineName});
  }
};
