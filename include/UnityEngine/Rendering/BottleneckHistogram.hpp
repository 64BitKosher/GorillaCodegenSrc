// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: BottleneckHistogram
  struct BottleneckHistogram;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::BottleneckHistogram, "UnityEngine.Rendering", "BottleneckHistogram");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.BottleneckHistogram
  // [TokenAttribute] Offset: FFFFFFFF
  struct BottleneckHistogram/*, public ::System::ValueType*/ {
    public:
    public:
    // System.Single PresentLimited
    // Size: 0x4
    // Offset: 0x0
    float PresentLimited;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single CPU
    // Size: 0x4
    // Offset: 0x4
    float CPU;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single GPU
    // Size: 0x4
    // Offset: 0x8
    float GPU;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single Balanced
    // Size: 0x4
    // Offset: 0xC
    float Balanced;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: BottleneckHistogram
    constexpr BottleneckHistogram(float PresentLimited_ = {}, float CPU_ = {}, float GPU_ = {}, float Balanced_ = {}) noexcept : PresentLimited{PresentLimited_}, CPU{CPU_}, GPU{GPU_}, Balanced{Balanced_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.Single PresentLimited
    [[deprecated("Use field access instead!")]] float& dyn_PresentLimited();
    // Get instance field reference: System.Single CPU
    [[deprecated("Use field access instead!")]] float& dyn_CPU();
    // Get instance field reference: System.Single GPU
    [[deprecated("Use field access instead!")]] float& dyn_GPU();
    // Get instance field reference: System.Single Balanced
    [[deprecated("Use field access instead!")]] float& dyn_Balanced();
  }; // UnityEngine.Rendering.BottleneckHistogram
  #pragma pack(pop)
  static check_size<sizeof(BottleneckHistogram), 12 + sizeof(float)> __UnityEngine_Rendering_BottleneckHistogramSizeCheck;
  static_assert(sizeof(BottleneckHistogram) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
