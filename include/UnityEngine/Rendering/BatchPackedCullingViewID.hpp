// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: BatchPackedCullingViewID
  struct BatchPackedCullingViewID;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::BatchPackedCullingViewID, "UnityEngine.Rendering", "BatchPackedCullingViewID");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.BatchPackedCullingViewID
  // [TokenAttribute] Offset: FFFFFFFF
  struct BatchPackedCullingViewID/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::Rendering::BatchPackedCullingViewID>*/ {
    public:
    public:
    // System.UInt64 handle
    // Size: 0x8
    // Offset: 0x0
    uint64_t handle;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: BatchPackedCullingViewID
    constexpr BatchPackedCullingViewID(uint64_t handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Rendering::BatchPackedCullingViewID>
    operator ::System::IEquatable_1<::UnityEngine::Rendering::BatchPackedCullingViewID>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Rendering::BatchPackedCullingViewID>*>(this);
    }
    // Creating conversion operator: operator uint64_t
    constexpr operator uint64_t() const noexcept {
      return handle;
    }
    // Get instance field reference: System.UInt64 handle
    [[deprecated("Use field access instead!")]] uint64_t& dyn_handle();
    // public System.Boolean Equals(UnityEngine.Rendering.BatchPackedCullingViewID other)
    // Offset: 0x54EF82C
    bool Equals(::UnityEngine::Rendering::BatchPackedCullingViewID other);
    // public override System.Int32 GetHashCode()
    // Offset: 0x54EF824
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x54EF83C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
  }; // UnityEngine.Rendering.BatchPackedCullingViewID
  #pragma pack(pop)
  static check_size<sizeof(BatchPackedCullingViewID), 0 + sizeof(uint64_t)> __UnityEngine_Rendering_BatchPackedCullingViewIDSizeCheck;
  static_assert(sizeof(BatchPackedCullingViewID) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::BatchPackedCullingViewID::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::BatchPackedCullingViewID::*)(::UnityEngine::Rendering::BatchPackedCullingViewID)>(&UnityEngine::Rendering::BatchPackedCullingViewID::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "BatchPackedCullingViewID")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::BatchPackedCullingViewID), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::BatchPackedCullingViewID::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::BatchPackedCullingViewID::*)()>(&UnityEngine::Rendering::BatchPackedCullingViewID::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::BatchPackedCullingViewID), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::BatchPackedCullingViewID::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::BatchPackedCullingViewID::*)(::Il2CppObject*)>(&UnityEngine::Rendering::BatchPackedCullingViewID::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::BatchPackedCullingViewID), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
