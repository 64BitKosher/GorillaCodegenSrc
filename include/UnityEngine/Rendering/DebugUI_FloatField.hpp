// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.DebugUI
#include "UnityEngine/Rendering/DebugUI.hpp"
// Including type: UnityEngine.Rendering.DebugUI/Field`1
#include "UnityEngine/Rendering/DebugUI_Field_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::DebugUI::FloatField);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::DebugUI::FloatField*, "UnityEngine.Rendering", "DebugUI/FloatField");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.DebugUI/FloatField
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugUI::FloatField : public ::UnityEngine::Rendering::DebugUI::Field_1<float> {
    public:
    public:
    // public System.Func`1<System.Single> min
    // Size: 0x8
    // Offset: 0x60
    ::System::Func_1<float>* min;
    // Field size check
    static_assert(sizeof(::System::Func_1<float>*) == 0x8);
    // public System.Func`1<System.Single> max
    // Size: 0x8
    // Offset: 0x68
    ::System::Func_1<float>* max;
    // Field size check
    static_assert(sizeof(::System::Func_1<float>*) == 0x8);
    // public System.Single incStep
    // Size: 0x4
    // Offset: 0x70
    float incStep;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single incStepMult
    // Size: 0x4
    // Offset: 0x74
    float incStepMult;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 decimals
    // Size: 0x4
    // Offset: 0x78
    int decimals;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Func`1<System.Single> min
    [[deprecated("Use field access instead!")]] ::System::Func_1<float>*& dyn_min();
    // Get instance field reference: public System.Func`1<System.Single> max
    [[deprecated("Use field access instead!")]] ::System::Func_1<float>*& dyn_max();
    // Get instance field reference: public System.Single incStep
    [[deprecated("Use field access instead!")]] float& dyn_incStep();
    // Get instance field reference: public System.Single incStepMult
    [[deprecated("Use field access instead!")]] float& dyn_incStepMult();
    // Get instance field reference: public System.Int32 decimals
    [[deprecated("Use field access instead!")]] int& dyn_decimals();
    // public System.Single ValidateValue(System.Single value)
    // Offset: 0x524A2EC
    float ValidateValue(float value);
    // public System.Void .ctor()
    // Offset: 0x524A34C
    // Implemented from: UnityEngine.Rendering.DebugUI/Field`1
    // Base method: System.Void Field_1::.ctor()
    // Base method: System.Void Widget::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugUI::FloatField* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::FloatField::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugUI::FloatField*, creationType>()));
    }
  }; // UnityEngine.Rendering.DebugUI/FloatField
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::FloatField::ValidateValue
// Il2CppName: ValidateValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::DebugUI::FloatField::*)(float)>(&UnityEngine::Rendering::DebugUI::FloatField::ValidateValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::FloatField*), "ValidateValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::FloatField::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
