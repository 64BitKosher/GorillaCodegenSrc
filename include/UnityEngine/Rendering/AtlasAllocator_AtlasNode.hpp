// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.AtlasAllocator
#include "UnityEngine/Rendering/AtlasAllocator.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ObjectPool`1<T>
  template<typename T>
  class ObjectPool_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::AtlasAllocator::AtlasNode);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::AtlasAllocator::AtlasNode*, "UnityEngine.Rendering", "AtlasAllocator/AtlasNode");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.AtlasAllocator/AtlasNode
  // [TokenAttribute] Offset: FFFFFFFF
  class AtlasAllocator::AtlasNode : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Rendering.AtlasAllocator/AtlasNode m_RightChild
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Rendering::AtlasAllocator::AtlasNode* m_RightChild;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::AtlasAllocator::AtlasNode*) == 0x8);
    // public UnityEngine.Rendering.AtlasAllocator/AtlasNode m_BottomChild
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Rendering::AtlasAllocator::AtlasNode* m_BottomChild;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::AtlasAllocator::AtlasNode*) == 0x8);
    // public UnityEngine.Vector4 m_Rect
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Vector4 m_Rect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    public:
    // Get instance field reference: public UnityEngine.Rendering.AtlasAllocator/AtlasNode m_RightChild
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::AtlasAllocator::AtlasNode*& dyn_m_RightChild();
    // Get instance field reference: public UnityEngine.Rendering.AtlasAllocator/AtlasNode m_BottomChild
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::AtlasAllocator::AtlasNode*& dyn_m_BottomChild();
    // Get instance field reference: public UnityEngine.Vector4 m_Rect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_m_Rect();
    // public UnityEngine.Rendering.AtlasAllocator/AtlasNode Allocate(ref UnityEngine.Rendering.ObjectPool`1<UnityEngine.Rendering.AtlasAllocator/AtlasNode> pool, System.Int32 width, System.Int32 height, System.Boolean powerOfTwoPadding)
    // Offset: 0x5256780
    ::UnityEngine::Rendering::AtlasAllocator::AtlasNode* Allocate(ByRef<::UnityEngine::Rendering::ObjectPool_1<::UnityEngine::Rendering::AtlasAllocator::AtlasNode*>*> pool, int width, int height, bool powerOfTwoPadding);
    // public System.Void Release(ref UnityEngine.Rendering.ObjectPool`1<UnityEngine.Rendering.AtlasAllocator/AtlasNode> pool)
    // Offset: 0x52569CC
    void Release(ByRef<::UnityEngine::Rendering::ObjectPool_1<::UnityEngine::Rendering::AtlasAllocator::AtlasNode*>*> pool);
    // public System.Void .ctor()
    // Offset: 0x52566F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AtlasAllocator::AtlasNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::AtlasAllocator::AtlasNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AtlasAllocator::AtlasNode*, creationType>()));
    }
  }; // UnityEngine.Rendering.AtlasAllocator/AtlasNode
  #pragma pack(pop)
  static check_size<sizeof(AtlasAllocator::AtlasNode), 32 + sizeof(::UnityEngine::Vector4)> __UnityEngine_Rendering_AtlasAllocator_AtlasNodeSizeCheck;
  static_assert(sizeof(AtlasAllocator::AtlasNode) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::AtlasAllocator::AtlasNode::Allocate
// Il2CppName: Allocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::AtlasAllocator::AtlasNode* (UnityEngine::Rendering::AtlasAllocator::AtlasNode::*)(ByRef<::UnityEngine::Rendering::ObjectPool_1<::UnityEngine::Rendering::AtlasAllocator::AtlasNode*>*>, int, int, bool)>(&UnityEngine::Rendering::AtlasAllocator::AtlasNode::Allocate)> {
  static const MethodInfo* get() {
    static auto* pool = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ObjectPool`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "AtlasAllocator/AtlasNode")})->this_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* powerOfTwoPadding = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AtlasAllocator::AtlasNode*), "Allocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pool, width, height, powerOfTwoPadding});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AtlasAllocator::AtlasNode::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::AtlasAllocator::AtlasNode::*)(ByRef<::UnityEngine::Rendering::ObjectPool_1<::UnityEngine::Rendering::AtlasAllocator::AtlasNode*>*>)>(&UnityEngine::Rendering::AtlasAllocator::AtlasNode::Release)> {
  static const MethodInfo* get() {
    static auto* pool = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ObjectPool`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "AtlasAllocator/AtlasNode")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AtlasAllocator::AtlasNode*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pool});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AtlasAllocator::AtlasNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
