// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.LensFlareCommonSRP
#include "UnityEngine/Rendering/LensFlareCommonSRP.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: LensFlareDataElementSRP
  class LensFlareDataElementSRP;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::LensFlareCommonSRP::$$c__DisplayClass39_1, "UnityEngine.Rendering", "LensFlareCommonSRP/<>c__DisplayClass39_1");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.LensFlareCommonSRP/<>c__DisplayClass39_1
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  struct LensFlareCommonSRP::$$c__DisplayClass39_1/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Rendering.LensFlareDataElementSRP element
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Rendering::LensFlareDataElementSRP* element;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::LensFlareDataElementSRP*) == 0x8);
    public:
    // Creating value type constructor for type: $$c__DisplayClass39_1
    constexpr $$c__DisplayClass39_1(::UnityEngine::Rendering::LensFlareDataElementSRP* element_ = {}) noexcept : element{element_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::Rendering::LensFlareDataElementSRP*
    constexpr operator ::UnityEngine::Rendering::LensFlareDataElementSRP*() const noexcept {
      return element;
    }
    // Get instance field reference: public UnityEngine.Rendering.LensFlareDataElementSRP element
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::LensFlareDataElementSRP*& dyn_element();
  }; // UnityEngine.Rendering.LensFlareCommonSRP/<>c__DisplayClass39_1
  #pragma pack(pop)
  static check_size<sizeof(LensFlareCommonSRP::$$c__DisplayClass39_1), 0 + sizeof(::UnityEngine::Rendering::LensFlareDataElementSRP*)> __UnityEngine_Rendering_LensFlareCommonSRP_$$c__DisplayClass39_1SizeCheck;
  static_assert(sizeof(LensFlareCommonSRP::$$c__DisplayClass39_1) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
