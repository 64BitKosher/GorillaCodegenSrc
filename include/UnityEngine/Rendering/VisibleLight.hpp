// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.LightType
#include "UnityEngine/LightType.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Rendering.VisibleLightFlags
#include "UnityEngine/Rendering/VisibleLightFlags.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Light
  class Light;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VisibleLight
  struct VisibleLight;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::VisibleLight, "UnityEngine.Rendering", "VisibleLight");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x74
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.VisibleLight
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  struct VisibleLight/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::Rendering::VisibleLight>*/ {
    public:
    public:
    // private UnityEngine.LightType m_LightType
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::LightType m_LightType;
    // Field size check
    static_assert(sizeof(::UnityEngine::LightType) == 0x4);
    // private UnityEngine.Color m_FinalColor
    // Size: 0x10
    // Offset: 0x4
    ::UnityEngine::Color m_FinalColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Rect m_ScreenRect
    // Size: 0x10
    // Offset: 0x14
    ::UnityEngine::Rect m_ScreenRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private UnityEngine.Matrix4x4 m_LocalToWorldMatrix
    // Size: 0x40
    // Offset: 0x24
    ::UnityEngine::Matrix4x4 m_LocalToWorldMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private System.Single m_Range
    // Size: 0x4
    // Offset: 0x64
    float m_Range;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_SpotAngle
    // Size: 0x4
    // Offset: 0x68
    float m_SpotAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_InstanceId
    // Size: 0x4
    // Offset: 0x6C
    int m_InstanceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.VisibleLightFlags m_Flags
    // Size: 0x4
    // Offset: 0x70
    ::UnityEngine::Rendering::VisibleLightFlags m_Flags;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::VisibleLightFlags) == 0x4);
    public:
    // Creating value type constructor for type: VisibleLight
    constexpr VisibleLight(::UnityEngine::LightType m_LightType_ = {}, ::UnityEngine::Color m_FinalColor_ = {}, ::UnityEngine::Rect m_ScreenRect_ = {}, ::UnityEngine::Matrix4x4 m_LocalToWorldMatrix_ = {}, float m_Range_ = {}, float m_SpotAngle_ = {}, int m_InstanceId_ = {}, ::UnityEngine::Rendering::VisibleLightFlags m_Flags_ = {}) noexcept : m_LightType{m_LightType_}, m_FinalColor{m_FinalColor_}, m_ScreenRect{m_ScreenRect_}, m_LocalToWorldMatrix{m_LocalToWorldMatrix_}, m_Range{m_Range_}, m_SpotAngle{m_SpotAngle_}, m_InstanceId{m_InstanceId_}, m_Flags{m_Flags_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Rendering::VisibleLight>
    operator ::System::IEquatable_1<::UnityEngine::Rendering::VisibleLight>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Rendering::VisibleLight>*>(this);
    }
    // Get instance field reference: private UnityEngine.LightType m_LightType
    [[deprecated("Use field access instead!")]] ::UnityEngine::LightType& dyn_m_LightType();
    // Get instance field reference: private UnityEngine.Color m_FinalColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_FinalColor();
    // Get instance field reference: private UnityEngine.Rect m_ScreenRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_m_ScreenRect();
    // Get instance field reference: private UnityEngine.Matrix4x4 m_LocalToWorldMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_m_LocalToWorldMatrix();
    // Get instance field reference: private System.Single m_Range
    [[deprecated("Use field access instead!")]] float& dyn_m_Range();
    // Get instance field reference: private System.Single m_SpotAngle
    [[deprecated("Use field access instead!")]] float& dyn_m_SpotAngle();
    // Get instance field reference: private System.Int32 m_InstanceId
    [[deprecated("Use field access instead!")]] int& dyn_m_InstanceId();
    // Get instance field reference: private UnityEngine.Rendering.VisibleLightFlags m_Flags
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::VisibleLightFlags& dyn_m_Flags();
    // public UnityEngine.Light get_light()
    // Offset: 0x54EEBD8
    ::UnityEngine::Light* get_light();
    // public UnityEngine.LightType get_lightType()
    // Offset: 0x54EEC64
    ::UnityEngine::LightType get_lightType();
    // public UnityEngine.Color get_finalColor()
    // Offset: 0x54EEC6C
    ::UnityEngine::Color get_finalColor();
    // public UnityEngine.Matrix4x4 get_localToWorldMatrix()
    // Offset: 0x54EEC78
    ::UnityEngine::Matrix4x4 get_localToWorldMatrix();
    // public System.Single get_range()
    // Offset: 0x54EEC94
    float get_range();
    // public System.Single get_spotAngle()
    // Offset: 0x54EEC9C
    float get_spotAngle();
    // public System.Boolean Equals(UnityEngine.Rendering.VisibleLight other)
    // Offset: 0x54EECA4
    bool Equals(::UnityEngine::Rendering::VisibleLight other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x54EEE4C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x54EEEDC
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Rendering.VisibleLight
  #pragma pack(pop)
  static check_size<sizeof(VisibleLight), 112 + sizeof(::UnityEngine::Rendering::VisibleLightFlags)> __UnityEngine_Rendering_VisibleLightSizeCheck;
  static_assert(sizeof(VisibleLight) == 0x74);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleLight::get_light
// Il2CppName: get_light
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Light* (UnityEngine::Rendering::VisibleLight::*)()>(&UnityEngine::Rendering::VisibleLight::get_light)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleLight), "get_light", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleLight::get_lightType
// Il2CppName: get_lightType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LightType (UnityEngine::Rendering::VisibleLight::*)()>(&UnityEngine::Rendering::VisibleLight::get_lightType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleLight), "get_lightType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleLight::get_finalColor
// Il2CppName: get_finalColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::Rendering::VisibleLight::*)()>(&UnityEngine::Rendering::VisibleLight::get_finalColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleLight), "get_finalColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleLight::get_localToWorldMatrix
// Il2CppName: get_localToWorldMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (UnityEngine::Rendering::VisibleLight::*)()>(&UnityEngine::Rendering::VisibleLight::get_localToWorldMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleLight), "get_localToWorldMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleLight::get_range
// Il2CppName: get_range
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::VisibleLight::*)()>(&UnityEngine::Rendering::VisibleLight::get_range)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleLight), "get_range", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleLight::get_spotAngle
// Il2CppName: get_spotAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::VisibleLight::*)()>(&UnityEngine::Rendering::VisibleLight::get_spotAngle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleLight), "get_spotAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleLight::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::VisibleLight::*)(::UnityEngine::Rendering::VisibleLight)>(&UnityEngine::Rendering::VisibleLight::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VisibleLight")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleLight), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleLight::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::VisibleLight::*)(::Il2CppObject*)>(&UnityEngine::Rendering::VisibleLight::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleLight), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleLight::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::VisibleLight::*)()>(&UnityEngine::Rendering::VisibleLight::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleLight), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
