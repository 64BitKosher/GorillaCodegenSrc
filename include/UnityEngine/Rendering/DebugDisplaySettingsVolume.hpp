// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.IDebugDisplaySettingsData
#include "UnityEngine/Rendering/IDebugDisplaySettingsData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: IVolumeDebugSettings2
  class IVolumeDebugSettings2;
  // Forward declaring type: IDebugDisplaySettingsPanelDisposable
  class IDebugDisplaySettingsPanelDisposable;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: DebugDisplaySettingsVolume
  class DebugDisplaySettingsVolume;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::DebugDisplaySettingsVolume);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::DebugDisplaySettingsVolume*, "UnityEngine.Rendering", "DebugDisplaySettingsVolume");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.DebugDisplaySettingsVolume
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugDisplaySettingsVolume : public ::Il2CppObject/*, public ::UnityEngine::Rendering::IDebugDisplaySettingsData*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::DebugDisplaySettingsVolume::Styles
    class Styles;
    // Nested type: ::UnityEngine::Rendering::DebugDisplaySettingsVolume::Strings
    class Strings;
    // Nested type: ::UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory
    class WidgetFactory;
    // Nested type: ::UnityEngine::Rendering::DebugDisplaySettingsVolume::SettingsPanel
    class SettingsPanel;
    public:
    // private readonly UnityEngine.Rendering.IVolumeDebugSettings2 <volumeDebugSettings>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Rendering::IVolumeDebugSettings2* volumeDebugSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::IVolumeDebugSettings2*) == 0x8);
    // System.Int32 volumeComponentEnumIndex
    // Size: 0x4
    // Offset: 0x18
    int volumeComponentEnumIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::Rendering::IDebugDisplaySettingsData
    operator ::UnityEngine::Rendering::IDebugDisplaySettingsData() noexcept {
      return *reinterpret_cast<::UnityEngine::Rendering::IDebugDisplaySettingsData*>(this);
    }
    // Get instance field reference: private readonly UnityEngine.Rendering.IVolumeDebugSettings2 <volumeDebugSettings>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::IVolumeDebugSettings2*& dyn_$volumeDebugSettings$k__BackingField();
    // Get instance field reference: System.Int32 volumeComponentEnumIndex
    [[deprecated("Use field access instead!")]] int& dyn_volumeComponentEnumIndex();
    // public UnityEngine.Rendering.IVolumeDebugSettings2 get_volumeDebugSettings()
    // Offset: 0x523F2E0
    ::UnityEngine::Rendering::IVolumeDebugSettings2* get_volumeDebugSettings();
    // public System.Void .ctor(UnityEngine.Rendering.IVolumeDebugSettings2 volumeDebugSettings)
    // Offset: 0x523F2E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugDisplaySettingsVolume* New_ctor(::UnityEngine::Rendering::IVolumeDebugSettings2* volumeDebugSettings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettingsVolume::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugDisplaySettingsVolume*, creationType>(volumeDebugSettings)));
    }
    // public System.Boolean get_AreAnySettingsActive()
    // Offset: 0x523F318
    bool get_AreAnySettingsActive();
    // public System.Boolean get_IsPostProcessingAllowed()
    // Offset: 0x523F320
    bool get_IsPostProcessingAllowed();
    // public System.Boolean get_IsLightingActive()
    // Offset: 0x523F328
    bool get_IsLightingActive();
    // public System.Boolean TryGetScreenClearColor(ref UnityEngine.Color color)
    // Offset: 0x523F330
    bool TryGetScreenClearColor(ByRef<::UnityEngine::Color> color);
    // public UnityEngine.Rendering.IDebugDisplaySettingsPanelDisposable CreatePanel()
    // Offset: 0x523F338
    ::UnityEngine::Rendering::IDebugDisplaySettingsPanelDisposable* CreatePanel();
  }; // UnityEngine.Rendering.DebugDisplaySettingsVolume
  #pragma pack(pop)
  static check_size<sizeof(DebugDisplaySettingsVolume), 24 + sizeof(int)> __UnityEngine_Rendering_DebugDisplaySettingsVolumeSizeCheck;
  static_assert(sizeof(DebugDisplaySettingsVolume) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugDisplaySettingsVolume::get_volumeDebugSettings
// Il2CppName: get_volumeDebugSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::IVolumeDebugSettings2* (UnityEngine::Rendering::DebugDisplaySettingsVolume::*)()>(&UnityEngine::Rendering::DebugDisplaySettingsVolume::get_volumeDebugSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugDisplaySettingsVolume*), "get_volumeDebugSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugDisplaySettingsVolume::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugDisplaySettingsVolume::get_AreAnySettingsActive
// Il2CppName: get_AreAnySettingsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::DebugDisplaySettingsVolume::*)()>(&UnityEngine::Rendering::DebugDisplaySettingsVolume::get_AreAnySettingsActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugDisplaySettingsVolume*), "get_AreAnySettingsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugDisplaySettingsVolume::get_IsPostProcessingAllowed
// Il2CppName: get_IsPostProcessingAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::DebugDisplaySettingsVolume::*)()>(&UnityEngine::Rendering::DebugDisplaySettingsVolume::get_IsPostProcessingAllowed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugDisplaySettingsVolume*), "get_IsPostProcessingAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugDisplaySettingsVolume::get_IsLightingActive
// Il2CppName: get_IsLightingActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::DebugDisplaySettingsVolume::*)()>(&UnityEngine::Rendering::DebugDisplaySettingsVolume::get_IsLightingActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugDisplaySettingsVolume*), "get_IsLightingActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugDisplaySettingsVolume::TryGetScreenClearColor
// Il2CppName: TryGetScreenClearColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::DebugDisplaySettingsVolume::*)(ByRef<::UnityEngine::Color>)>(&UnityEngine::Rendering::DebugDisplaySettingsVolume::TryGetScreenClearColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugDisplaySettingsVolume*), "TryGetScreenClearColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugDisplaySettingsVolume::CreatePanel
// Il2CppName: CreatePanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::IDebugDisplaySettingsPanelDisposable* (UnityEngine::Rendering::DebugDisplaySettingsVolume::*)()>(&UnityEngine::Rendering::DebugDisplaySettingsVolume::CreatePanel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugDisplaySettingsVolume*), "CreatePanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
