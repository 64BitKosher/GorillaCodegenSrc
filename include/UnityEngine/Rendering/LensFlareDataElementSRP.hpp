// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Rendering.SRPLensFlareBlendMode
#include "UnityEngine/Rendering/SRPLensFlareBlendMode.hpp"
// Including type: UnityEngine.Rendering.SRPLensFlareType
#include "UnityEngine/Rendering/SRPLensFlareType.hpp"
// Including type: UnityEngine.Rendering.SRPLensFlareDistribution
#include "UnityEngine/Rendering/SRPLensFlareDistribution.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Gradient
  class Gradient;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: LensFlareDataElementSRP
  class LensFlareDataElementSRP;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::LensFlareDataElementSRP);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::LensFlareDataElementSRP*, "UnityEngine.Rendering", "LensFlareDataElementSRP");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0xF0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.LensFlareDataElementSRP
  // [TokenAttribute] Offset: FFFFFFFF
  class LensFlareDataElementSRP : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean visible
    // Size: 0x1
    // Offset: 0x10
    bool visible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: visible and: position
    char __padding0[0x3] = {};
    // public System.Single position
    // Size: 0x4
    // Offset: 0x14
    float position;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector2 positionOffset
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Vector2 positionOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Single angularOffset
    // Size: 0x4
    // Offset: 0x20
    float angularOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector2 translationScale
    // Size: 0x8
    // Offset: 0x24
    ::UnityEngine::Vector2 translationScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single m_LocalIntensity
    // Size: 0x4
    // Offset: 0x2C
    float m_LocalIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Texture lensFlareTexture
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Texture* lensFlareTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public System.Single uniformScale
    // Size: 0x4
    // Offset: 0x38
    float uniformScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector2 sizeXY
    // Size: 0x8
    // Offset: 0x3C
    ::UnityEngine::Vector2 sizeXY;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Boolean allowMultipleElement
    // Size: 0x1
    // Offset: 0x44
    bool allowMultipleElement;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allowMultipleElement and: m_Count
    char __padding9[0x3] = {};
    // private System.Int32 m_Count
    // Size: 0x4
    // Offset: 0x48
    int m_Count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean preserveAspectRatio
    // Size: 0x1
    // Offset: 0x4C
    bool preserveAspectRatio;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: preserveAspectRatio and: rotation
    char __padding11[0x3] = {};
    // public System.Single rotation
    // Size: 0x4
    // Offset: 0x50
    float rotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color tint
    // Size: 0x10
    // Offset: 0x54
    ::UnityEngine::Color tint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Rendering.SRPLensFlareBlendMode blendMode
    // Size: 0x4
    // Offset: 0x64
    ::UnityEngine::Rendering::SRPLensFlareBlendMode blendMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::SRPLensFlareBlendMode) == 0x4);
    // public System.Boolean autoRotate
    // Size: 0x1
    // Offset: 0x68
    bool autoRotate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoRotate and: flareType
    char __padding15[0x3] = {};
    // public UnityEngine.Rendering.SRPLensFlareType flareType
    // Size: 0x4
    // Offset: 0x6C
    ::UnityEngine::Rendering::SRPLensFlareType flareType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::SRPLensFlareType) == 0x4);
    // public System.Boolean modulateByLightColor
    // Size: 0x1
    // Offset: 0x70
    bool modulateByLightColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isFoldOpened
    // Size: 0x1
    // Offset: 0x71
    bool isFoldOpened;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isFoldOpened and: distribution
    char __padding18[0x2] = {};
    // public UnityEngine.Rendering.SRPLensFlareDistribution distribution
    // Size: 0x4
    // Offset: 0x74
    ::UnityEngine::Rendering::SRPLensFlareDistribution distribution;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::SRPLensFlareDistribution) == 0x4);
    // public System.Single lengthSpread
    // Size: 0x4
    // Offset: 0x78
    float lengthSpread;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lengthSpread and: positionCurve
    char __padding20[0x4] = {};
    // public UnityEngine.AnimationCurve positionCurve
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::AnimationCurve* positionCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve scaleCurve
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::AnimationCurve* scaleCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public System.Int32 seed
    // Size: 0x4
    // Offset: 0x90
    int seed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: seed and: colorGradient
    char __padding23[0x4] = {};
    // public UnityEngine.Gradient colorGradient
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Gradient* colorGradient;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private System.Single m_IntensityVariation
    // Size: 0x4
    // Offset: 0xA0
    float m_IntensityVariation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector2 positionVariation
    // Size: 0x8
    // Offset: 0xA4
    ::UnityEngine::Vector2 positionVariation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Single scaleVariation
    // Size: 0x4
    // Offset: 0xAC
    float scaleVariation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rotationVariation
    // Size: 0x4
    // Offset: 0xB0
    float rotationVariation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean enableRadialDistortion
    // Size: 0x1
    // Offset: 0xB4
    bool enableRadialDistortion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableRadialDistortion and: targetSizeDistortion
    char __padding29[0x3] = {};
    // public UnityEngine.Vector2 targetSizeDistortion
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Vector2 targetSizeDistortion;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.AnimationCurve distortionCurve
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::AnimationCurve* distortionCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public System.Boolean distortionRelativeToCenter
    // Size: 0x1
    // Offset: 0xC8
    bool distortionRelativeToCenter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: distortionRelativeToCenter and: m_FallOff
    char __padding32[0x3] = {};
    // private System.Single m_FallOff
    // Size: 0x4
    // Offset: 0xCC
    float m_FallOff;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_EdgeOffset
    // Size: 0x4
    // Offset: 0xD0
    float m_EdgeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_SideCount
    // Size: 0x4
    // Offset: 0xD4
    int m_SideCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_SdfRoundness
    // Size: 0x4
    // Offset: 0xD8
    float m_SdfRoundness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean inverseSDF
    // Size: 0x1
    // Offset: 0xDC
    bool inverseSDF;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: inverseSDF and: uniformAngle
    char __padding37[0x3] = {};
    // public System.Single uniformAngle
    // Size: 0x4
    // Offset: 0xE0
    float uniformAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: uniformAngle and: uniformAngleCurve
    char __padding38[0x4] = {};
    // public UnityEngine.AnimationCurve uniformAngleCurve
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::AnimationCurve* uniformAngleCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean visible
    [[deprecated("Use field access instead!")]] bool& dyn_visible();
    // Get instance field reference: public System.Single position
    [[deprecated("Use field access instead!")]] float& dyn_position();
    // Get instance field reference: public UnityEngine.Vector2 positionOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_positionOffset();
    // Get instance field reference: public System.Single angularOffset
    [[deprecated("Use field access instead!")]] float& dyn_angularOffset();
    // Get instance field reference: public UnityEngine.Vector2 translationScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_translationScale();
    // Get instance field reference: private System.Single m_LocalIntensity
    [[deprecated("Use field access instead!")]] float& dyn_m_LocalIntensity();
    // Get instance field reference: public UnityEngine.Texture lensFlareTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_lensFlareTexture();
    // Get instance field reference: public System.Single uniformScale
    [[deprecated("Use field access instead!")]] float& dyn_uniformScale();
    // Get instance field reference: public UnityEngine.Vector2 sizeXY
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_sizeXY();
    // Get instance field reference: public System.Boolean allowMultipleElement
    [[deprecated("Use field access instead!")]] bool& dyn_allowMultipleElement();
    // Get instance field reference: private System.Int32 m_Count
    [[deprecated("Use field access instead!")]] int& dyn_m_Count();
    // Get instance field reference: public System.Boolean preserveAspectRatio
    [[deprecated("Use field access instead!")]] bool& dyn_preserveAspectRatio();
    // Get instance field reference: public System.Single rotation
    [[deprecated("Use field access instead!")]] float& dyn_rotation();
    // Get instance field reference: public UnityEngine.Color tint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_tint();
    // Get instance field reference: public UnityEngine.Rendering.SRPLensFlareBlendMode blendMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::SRPLensFlareBlendMode& dyn_blendMode();
    // Get instance field reference: public System.Boolean autoRotate
    [[deprecated("Use field access instead!")]] bool& dyn_autoRotate();
    // Get instance field reference: public UnityEngine.Rendering.SRPLensFlareType flareType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::SRPLensFlareType& dyn_flareType();
    // Get instance field reference: public System.Boolean modulateByLightColor
    [[deprecated("Use field access instead!")]] bool& dyn_modulateByLightColor();
    // Get instance field reference: private System.Boolean isFoldOpened
    [[deprecated("Use field access instead!")]] bool& dyn_isFoldOpened();
    // Get instance field reference: public UnityEngine.Rendering.SRPLensFlareDistribution distribution
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::SRPLensFlareDistribution& dyn_distribution();
    // Get instance field reference: public System.Single lengthSpread
    [[deprecated("Use field access instead!")]] float& dyn_lengthSpread();
    // Get instance field reference: public UnityEngine.AnimationCurve positionCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_positionCurve();
    // Get instance field reference: public UnityEngine.AnimationCurve scaleCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_scaleCurve();
    // Get instance field reference: public System.Int32 seed
    [[deprecated("Use field access instead!")]] int& dyn_seed();
    // Get instance field reference: public UnityEngine.Gradient colorGradient
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn_colorGradient();
    // Get instance field reference: private System.Single m_IntensityVariation
    [[deprecated("Use field access instead!")]] float& dyn_m_IntensityVariation();
    // Get instance field reference: public UnityEngine.Vector2 positionVariation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_positionVariation();
    // Get instance field reference: public System.Single scaleVariation
    [[deprecated("Use field access instead!")]] float& dyn_scaleVariation();
    // Get instance field reference: public System.Single rotationVariation
    [[deprecated("Use field access instead!")]] float& dyn_rotationVariation();
    // Get instance field reference: public System.Boolean enableRadialDistortion
    [[deprecated("Use field access instead!")]] bool& dyn_enableRadialDistortion();
    // Get instance field reference: public UnityEngine.Vector2 targetSizeDistortion
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_targetSizeDistortion();
    // Get instance field reference: public UnityEngine.AnimationCurve distortionCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_distortionCurve();
    // Get instance field reference: public System.Boolean distortionRelativeToCenter
    [[deprecated("Use field access instead!")]] bool& dyn_distortionRelativeToCenter();
    // Get instance field reference: private System.Single m_FallOff
    [[deprecated("Use field access instead!")]] float& dyn_m_FallOff();
    // Get instance field reference: private System.Single m_EdgeOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_EdgeOffset();
    // Get instance field reference: private System.Int32 m_SideCount
    [[deprecated("Use field access instead!")]] int& dyn_m_SideCount();
    // Get instance field reference: private System.Single m_SdfRoundness
    [[deprecated("Use field access instead!")]] float& dyn_m_SdfRoundness();
    // Get instance field reference: public System.Boolean inverseSDF
    [[deprecated("Use field access instead!")]] bool& dyn_inverseSDF();
    // Get instance field reference: public System.Single uniformAngle
    [[deprecated("Use field access instead!")]] float& dyn_uniformAngle();
    // Get instance field reference: public UnityEngine.AnimationCurve uniformAngleCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_uniformAngleCurve();
    // public System.Void .ctor()
    // Offset: 0x5251ADC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LensFlareDataElementSRP* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::LensFlareDataElementSRP::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LensFlareDataElementSRP*, creationType>()));
    }
    // public System.Single get_localIntensity()
    // Offset: 0x5252220
    float get_localIntensity();
    // public System.Void set_localIntensity(System.Single value)
    // Offset: 0x5252188
    void set_localIntensity(float value);
    // public System.Int32 get_count()
    // Offset: 0x5252228
    int get_count();
    // public System.Void set_count(System.Int32 value)
    // Offset: 0x5252198
    void set_count(int value);
    // public System.Single get_intensityVariation()
    // Offset: 0x5252230
    float get_intensityVariation();
    // public System.Void set_intensityVariation(System.Single value)
    // Offset: 0x52521A8
    void set_intensityVariation(float value);
    // public System.Single get_fallOff()
    // Offset: 0x5252238
    float get_fallOff();
    // public System.Void set_fallOff(System.Single value)
    // Offset: 0x52521B8
    void set_fallOff(float value);
    // public System.Single get_edgeOffset()
    // Offset: 0x5252240
    float get_edgeOffset();
    // public System.Void set_edgeOffset(System.Single value)
    // Offset: 0x52521D4
    void set_edgeOffset(float value);
    // public System.Int32 get_sideCount()
    // Offset: 0x5252248
    int get_sideCount();
    // public System.Void set_sideCount(System.Int32 value)
    // Offset: 0x525220C
    void set_sideCount(int value);
    // public System.Single get_sdfRoundness()
    // Offset: 0x5252250
    float get_sdfRoundness();
    // public System.Void set_sdfRoundness(System.Single value)
    // Offset: 0x52521F0
    void set_sdfRoundness(float value);
  }; // UnityEngine.Rendering.LensFlareDataElementSRP
  #pragma pack(pop)
  static check_size<sizeof(LensFlareDataElementSRP), 232 + sizeof(::UnityEngine::AnimationCurve*)> __UnityEngine_Rendering_LensFlareDataElementSRPSizeCheck;
  static_assert(sizeof(LensFlareDataElementSRP) == 0xF0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareDataElementSRP::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareDataElementSRP::get_localIntensity
// Il2CppName: get_localIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::LensFlareDataElementSRP::*)()>(&UnityEngine::Rendering::LensFlareDataElementSRP::get_localIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareDataElementSRP*), "get_localIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareDataElementSRP::set_localIntensity
// Il2CppName: set_localIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::LensFlareDataElementSRP::*)(float)>(&UnityEngine::Rendering::LensFlareDataElementSRP::set_localIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareDataElementSRP*), "set_localIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareDataElementSRP::get_count
// Il2CppName: get_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::LensFlareDataElementSRP::*)()>(&UnityEngine::Rendering::LensFlareDataElementSRP::get_count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareDataElementSRP*), "get_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareDataElementSRP::set_count
// Il2CppName: set_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::LensFlareDataElementSRP::*)(int)>(&UnityEngine::Rendering::LensFlareDataElementSRP::set_count)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareDataElementSRP*), "set_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareDataElementSRP::get_intensityVariation
// Il2CppName: get_intensityVariation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::LensFlareDataElementSRP::*)()>(&UnityEngine::Rendering::LensFlareDataElementSRP::get_intensityVariation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareDataElementSRP*), "get_intensityVariation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareDataElementSRP::set_intensityVariation
// Il2CppName: set_intensityVariation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::LensFlareDataElementSRP::*)(float)>(&UnityEngine::Rendering::LensFlareDataElementSRP::set_intensityVariation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareDataElementSRP*), "set_intensityVariation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareDataElementSRP::get_fallOff
// Il2CppName: get_fallOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::LensFlareDataElementSRP::*)()>(&UnityEngine::Rendering::LensFlareDataElementSRP::get_fallOff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareDataElementSRP*), "get_fallOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareDataElementSRP::set_fallOff
// Il2CppName: set_fallOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::LensFlareDataElementSRP::*)(float)>(&UnityEngine::Rendering::LensFlareDataElementSRP::set_fallOff)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareDataElementSRP*), "set_fallOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareDataElementSRP::get_edgeOffset
// Il2CppName: get_edgeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::LensFlareDataElementSRP::*)()>(&UnityEngine::Rendering::LensFlareDataElementSRP::get_edgeOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareDataElementSRP*), "get_edgeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareDataElementSRP::set_edgeOffset
// Il2CppName: set_edgeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::LensFlareDataElementSRP::*)(float)>(&UnityEngine::Rendering::LensFlareDataElementSRP::set_edgeOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareDataElementSRP*), "set_edgeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareDataElementSRP::get_sideCount
// Il2CppName: get_sideCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::LensFlareDataElementSRP::*)()>(&UnityEngine::Rendering::LensFlareDataElementSRP::get_sideCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareDataElementSRP*), "get_sideCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareDataElementSRP::set_sideCount
// Il2CppName: set_sideCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::LensFlareDataElementSRP::*)(int)>(&UnityEngine::Rendering::LensFlareDataElementSRP::set_sideCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareDataElementSRP*), "set_sideCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareDataElementSRP::get_sdfRoundness
// Il2CppName: get_sdfRoundness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::LensFlareDataElementSRP::*)()>(&UnityEngine::Rendering::LensFlareDataElementSRP::get_sdfRoundness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareDataElementSRP*), "get_sdfRoundness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareDataElementSRP::set_sdfRoundness
// Il2CppName: set_sdfRoundness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::LensFlareDataElementSRP::*)(float)>(&UnityEngine::Rendering::LensFlareDataElementSRP::set_sdfRoundness)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareDataElementSRP*), "set_sdfRoundness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
