// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Rendering.DynamicResolutionHandler/UpsamplerScheduleType
#include "UnityEngine/Rendering/DynamicResolutionHandler.hpp"
// Including type: UnityEngine.Rendering.DynamicResolutionType
#include "UnityEngine/Rendering/DynamicResolutionType.hpp"
// Including type: UnityEngine.Rendering.DynamicResUpscaleFilter
#include "UnityEngine/Rendering/DynamicResUpscaleFilter.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: GlobalDynamicResolutionSettings
  struct GlobalDynamicResolutionSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::GlobalDynamicResolutionSettings, "UnityEngine.Rendering", "GlobalDynamicResolutionSettings");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x34
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.GlobalDynamicResolutionSettings
  // [TokenAttribute] Offset: FFFFFFFF
  struct GlobalDynamicResolutionSettings/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Boolean enabled
    // Size: 0x1
    // Offset: 0x0
    bool enabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean useMipBias
    // Size: 0x1
    // Offset: 0x1
    bool useMipBias;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean enableDLSS
    // Size: 0x1
    // Offset: 0x2
    bool enableDLSS;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableDLSS and: DLSSPerfQualitySetting
    char __padding2[0x1] = {};
    // public System.UInt32 DLSSPerfQualitySetting
    // Size: 0x4
    // Offset: 0x4
    uint DLSSPerfQualitySetting;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public UnityEngine.Rendering.DynamicResolutionHandler/UpsamplerScheduleType DLSSInjectionPoint
    // Size: 0x4
    // Offset: 0x8
    ::UnityEngine::Rendering::DynamicResolutionHandler::UpsamplerScheduleType DLSSInjectionPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::DynamicResolutionHandler::UpsamplerScheduleType) == 0x4);
    // public System.Boolean DLSSUseOptimalSettings
    // Size: 0x1
    // Offset: 0xC
    bool DLSSUseOptimalSettings;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: DLSSUseOptimalSettings and: DLSSSharpness
    char __padding5[0x3] = {};
    // public System.Single DLSSSharpness
    // Size: 0x4
    // Offset: 0x10
    float DLSSSharpness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean fsrOverrideSharpness
    // Size: 0x1
    // Offset: 0x14
    bool fsrOverrideSharpness;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fsrOverrideSharpness and: fsrSharpness
    char __padding7[0x3] = {};
    // public System.Single fsrSharpness
    // Size: 0x4
    // Offset: 0x18
    float fsrSharpness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxPercentage
    // Size: 0x4
    // Offset: 0x1C
    float maxPercentage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minPercentage
    // Size: 0x4
    // Offset: 0x20
    float minPercentage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Rendering.DynamicResolutionType dynResType
    // Size: 0x1
    // Offset: 0x24
    ::UnityEngine::Rendering::DynamicResolutionType dynResType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::DynamicResolutionType) == 0x1);
    // public UnityEngine.Rendering.DynamicResUpscaleFilter upsampleFilter
    // Size: 0x1
    // Offset: 0x25
    ::UnityEngine::Rendering::DynamicResUpscaleFilter upsampleFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::DynamicResUpscaleFilter) == 0x1);
    // public System.Boolean forceResolution
    // Size: 0x1
    // Offset: 0x26
    bool forceResolution;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forceResolution and: forcedPercentage
    char __padding13[0x1] = {};
    // public System.Single forcedPercentage
    // Size: 0x4
    // Offset: 0x28
    float forcedPercentage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lowResTransparencyMinimumThreshold
    // Size: 0x4
    // Offset: 0x2C
    float lowResTransparencyMinimumThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rayTracingHalfResThreshold
    // Size: 0x4
    // Offset: 0x30
    float rayTracingHalfResThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: GlobalDynamicResolutionSettings
    constexpr GlobalDynamicResolutionSettings(bool enabled_ = {}, bool useMipBias_ = {}, bool enableDLSS_ = {}, uint DLSSPerfQualitySetting_ = {}, ::UnityEngine::Rendering::DynamicResolutionHandler::UpsamplerScheduleType DLSSInjectionPoint_ = {}, bool DLSSUseOptimalSettings_ = {}, float DLSSSharpness_ = {}, bool fsrOverrideSharpness_ = {}, float fsrSharpness_ = {}, float maxPercentage_ = {}, float minPercentage_ = {}, ::UnityEngine::Rendering::DynamicResolutionType dynResType_ = {}, ::UnityEngine::Rendering::DynamicResUpscaleFilter upsampleFilter_ = {}, bool forceResolution_ = {}, float forcedPercentage_ = {}, float lowResTransparencyMinimumThreshold_ = {}, float rayTracingHalfResThreshold_ = {}) noexcept : enabled{enabled_}, useMipBias{useMipBias_}, enableDLSS{enableDLSS_}, DLSSPerfQualitySetting{DLSSPerfQualitySetting_}, DLSSInjectionPoint{DLSSInjectionPoint_}, DLSSUseOptimalSettings{DLSSUseOptimalSettings_}, DLSSSharpness{DLSSSharpness_}, fsrOverrideSharpness{fsrOverrideSharpness_}, fsrSharpness{fsrSharpness_}, maxPercentage{maxPercentage_}, minPercentage{minPercentage_}, dynResType{dynResType_}, upsampleFilter{upsampleFilter_}, forceResolution{forceResolution_}, forcedPercentage{forcedPercentage_}, lowResTransparencyMinimumThreshold{lowResTransparencyMinimumThreshold_}, rayTracingHalfResThreshold{rayTracingHalfResThreshold_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Boolean enabled
    [[deprecated("Use field access instead!")]] bool& dyn_enabled();
    // Get instance field reference: public System.Boolean useMipBias
    [[deprecated("Use field access instead!")]] bool& dyn_useMipBias();
    // Get instance field reference: public System.Boolean enableDLSS
    [[deprecated("Use field access instead!")]] bool& dyn_enableDLSS();
    // Get instance field reference: public System.UInt32 DLSSPerfQualitySetting
    [[deprecated("Use field access instead!")]] uint& dyn_DLSSPerfQualitySetting();
    // Get instance field reference: public UnityEngine.Rendering.DynamicResolutionHandler/UpsamplerScheduleType DLSSInjectionPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::DynamicResolutionHandler::UpsamplerScheduleType& dyn_DLSSInjectionPoint();
    // Get instance field reference: public System.Boolean DLSSUseOptimalSettings
    [[deprecated("Use field access instead!")]] bool& dyn_DLSSUseOptimalSettings();
    // Get instance field reference: public System.Single DLSSSharpness
    [[deprecated("Use field access instead!")]] float& dyn_DLSSSharpness();
    // Get instance field reference: public System.Boolean fsrOverrideSharpness
    [[deprecated("Use field access instead!")]] bool& dyn_fsrOverrideSharpness();
    // Get instance field reference: public System.Single fsrSharpness
    [[deprecated("Use field access instead!")]] float& dyn_fsrSharpness();
    // Get instance field reference: public System.Single maxPercentage
    [[deprecated("Use field access instead!")]] float& dyn_maxPercentage();
    // Get instance field reference: public System.Single minPercentage
    [[deprecated("Use field access instead!")]] float& dyn_minPercentage();
    // Get instance field reference: public UnityEngine.Rendering.DynamicResolutionType dynResType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::DynamicResolutionType& dyn_dynResType();
    // Get instance field reference: public UnityEngine.Rendering.DynamicResUpscaleFilter upsampleFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::DynamicResUpscaleFilter& dyn_upsampleFilter();
    // Get instance field reference: public System.Boolean forceResolution
    [[deprecated("Use field access instead!")]] bool& dyn_forceResolution();
    // Get instance field reference: public System.Single forcedPercentage
    [[deprecated("Use field access instead!")]] float& dyn_forcedPercentage();
    // Get instance field reference: public System.Single lowResTransparencyMinimumThreshold
    [[deprecated("Use field access instead!")]] float& dyn_lowResTransparencyMinimumThreshold();
    // Get instance field reference: public System.Single rayTracingHalfResThreshold
    [[deprecated("Use field access instead!")]] float& dyn_rayTracingHalfResThreshold();
    // static public UnityEngine.Rendering.GlobalDynamicResolutionSettings NewDefault()
    // Offset: 0x523DF30
    static ::UnityEngine::Rendering::GlobalDynamicResolutionSettings NewDefault();
  }; // UnityEngine.Rendering.GlobalDynamicResolutionSettings
  #pragma pack(pop)
  static check_size<sizeof(GlobalDynamicResolutionSettings), 48 + sizeof(float)> __UnityEngine_Rendering_GlobalDynamicResolutionSettingsSizeCheck;
  static_assert(sizeof(GlobalDynamicResolutionSettings) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::GlobalDynamicResolutionSettings::NewDefault
// Il2CppName: NewDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::GlobalDynamicResolutionSettings (*)()>(&UnityEngine::Rendering::GlobalDynamicResolutionSettings::NewDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GlobalDynamicResolutionSettings), "NewDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
