// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.VolumeParameter`1
#include "UnityEngine/Rendering/VolumeParameter_1.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ColorParameter
  class ColorParameter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::ColorParameter);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::ColorParameter*, "UnityEngine.Rendering", "ColorParameter");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.ColorParameter
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  class ColorParameter : public ::UnityEngine::Rendering::VolumeParameter_1<::UnityEngine::Color> {
    public:
    public:
    // public System.Boolean hdr
    // Size: 0x1
    // Offset: 0x24
    bool hdr;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showAlpha
    // Size: 0x1
    // Offset: 0x25
    bool showAlpha;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showEyeDropper
    // Size: 0x1
    // Offset: 0x26
    bool showEyeDropper;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Boolean hdr
    [[deprecated("Use field access instead!")]] bool& dyn_hdr();
    // Get instance field reference: public System.Boolean showAlpha
    [[deprecated("Use field access instead!")]] bool& dyn_showAlpha();
    // Get instance field reference: public System.Boolean showEyeDropper
    [[deprecated("Use field access instead!")]] bool& dyn_showEyeDropper();
    // public System.Void .ctor(UnityEngine.Color value, System.Boolean hdr, System.Boolean showAlpha, System.Boolean showEyeDropper, System.Boolean overrideState)
    // Offset: 0x52639F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorParameter* New_ctor(::UnityEngine::Color value, bool hdr, bool showAlpha, bool showEyeDropper, bool overrideState) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ColorParameter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorParameter*, creationType>(value, hdr, showAlpha, showEyeDropper, overrideState)));
    }
    // public System.Void Interp(UnityEngine.Color from, UnityEngine.Color to, System.Single t)
    // Offset: 0x5263AC4
    void Interp(::UnityEngine::Color from, ::UnityEngine::Color to, float t);
  }; // UnityEngine.Rendering.ColorParameter
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::ColorParameter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::ColorParameter::Interp
// Il2CppName: Interp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::ColorParameter::*)(::UnityEngine::Color, ::UnityEngine::Color, float)>(&UnityEngine::Rendering::ColorParameter::Interp)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ColorParameter*), "Interp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, t});
  }
};
