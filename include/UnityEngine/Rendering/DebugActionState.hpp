// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputAction
  class InputAction;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: DebugActionDesc
  class DebugActionDesc;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: DebugActionState
  class DebugActionState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::DebugActionState);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::DebugActionState*, "UnityEngine.Rendering", "DebugActionState");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.DebugActionState
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugActionState : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.InputSystem.InputAction inputAction
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::InputSystem::InputAction* inputAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputAction*) == 0x8);
    // private System.Boolean[] m_TriggerPressedUp
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<bool> m_TriggerPressedUp;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    // private System.Single m_Timer
    // Size: 0x4
    // Offset: 0x20
    float m_Timer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <runningAction>k__BackingField
    // Size: 0x1
    // Offset: 0x24
    bool runningAction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: runningAction and: actionState
    char __padding3[0x3] = {};
    // private System.Single <actionState>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    float actionState;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.InputSystem.InputAction inputAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputAction*& dyn_inputAction();
    // Get instance field reference: private System.Boolean[] m_TriggerPressedUp
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_m_TriggerPressedUp();
    // Get instance field reference: private System.Single m_Timer
    [[deprecated("Use field access instead!")]] float& dyn_m_Timer();
    // Get instance field reference: private System.Boolean <runningAction>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$runningAction$k__BackingField();
    // Get instance field reference: private System.Single <actionState>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$actionState$k__BackingField();
    // System.Boolean get_runningAction()
    // Offset: 0x524929C
    bool get_runningAction();
    // private System.Void set_runningAction(System.Boolean value)
    // Offset: 0x52492A4
    void set_runningAction(bool value);
    // System.Single get_actionState()
    // Offset: 0x52492B0
    float get_actionState();
    // private System.Void set_actionState(System.Single value)
    // Offset: 0x52492B8
    void set_actionState(float value);
    // private System.Void Trigger(System.Int32 triggerCount, System.Single state)
    // Offset: 0x52492C0
    void Trigger(int triggerCount, float state);
    // public System.Void TriggerWithButton(UnityEngine.InputSystem.InputAction action, System.Single state)
    // Offset: 0x5246874
    void TriggerWithButton(::UnityEngine::InputSystem::InputAction* action, float state);
    // private System.Void Reset()
    // Offset: 0x5249388
    void Reset();
    // public System.Void Update(UnityEngine.Rendering.DebugActionDesc desc)
    // Offset: 0x5246950
    void Update(::UnityEngine::Rendering::DebugActionDesc* desc);
  }; // UnityEngine.Rendering.DebugActionState
  #pragma pack(pop)
  static check_size<sizeof(DebugActionState), 40 + sizeof(float)> __UnityEngine_Rendering_DebugActionStateSizeCheck;
  static_assert(sizeof(DebugActionState) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugActionState::get_runningAction
// Il2CppName: get_runningAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::DebugActionState::*)()>(&UnityEngine::Rendering::DebugActionState::get_runningAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugActionState*), "get_runningAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugActionState::set_runningAction
// Il2CppName: set_runningAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugActionState::*)(bool)>(&UnityEngine::Rendering::DebugActionState::set_runningAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugActionState*), "set_runningAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugActionState::get_actionState
// Il2CppName: get_actionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::DebugActionState::*)()>(&UnityEngine::Rendering::DebugActionState::get_actionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugActionState*), "get_actionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugActionState::set_actionState
// Il2CppName: set_actionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugActionState::*)(float)>(&UnityEngine::Rendering::DebugActionState::set_actionState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugActionState*), "set_actionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugActionState::Trigger
// Il2CppName: Trigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugActionState::*)(int, float)>(&UnityEngine::Rendering::DebugActionState::Trigger)> {
  static const MethodInfo* get() {
    static auto* triggerCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugActionState*), "Trigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triggerCount, state});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugActionState::TriggerWithButton
// Il2CppName: TriggerWithButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugActionState::*)(::UnityEngine::InputSystem::InputAction*, float)>(&UnityEngine::Rendering::DebugActionState::TriggerWithButton)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugActionState*), "TriggerWithButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action, state});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugActionState::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugActionState::*)()>(&UnityEngine::Rendering::DebugActionState::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugActionState*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugActionState::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugActionState::*)(::UnityEngine::Rendering::DebugActionDesc*)>(&UnityEngine::Rendering::DebugActionState::Update)> {
  static const MethodInfo* get() {
    static auto* desc = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugActionDesc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugActionState*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desc});
  }
};
