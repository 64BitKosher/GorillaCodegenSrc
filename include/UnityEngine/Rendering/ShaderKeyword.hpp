// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ShaderKeyword
  struct ShaderKeyword;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::ShaderKeyword, "UnityEngine.Rendering", "ShaderKeyword");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0xF
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.ShaderKeyword
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  struct ShaderKeyword/*, public ::System::ValueType*/ {
    public:
    public:
    // System.String m_Name
    // Size: 0x8
    // Offset: 0x0
    ::StringW m_Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.UInt32 m_Index
    // Size: 0x4
    // Offset: 0x8
    uint m_Index;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.Boolean m_IsLocal
    // Size: 0x1
    // Offset: 0xC
    bool m_IsLocal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean m_IsCompute
    // Size: 0x1
    // Offset: 0xD
    bool m_IsCompute;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean m_IsValid
    // Size: 0x1
    // Offset: 0xE
    bool m_IsValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: ShaderKeyword
    constexpr ShaderKeyword(::StringW m_Name_ = {}, uint m_Index_ = {}, bool m_IsLocal_ = {}, bool m_IsCompute_ = {}, bool m_IsValid_ = {}) noexcept : m_Name{m_Name_}, m_Index{m_Index_}, m_IsLocal{m_IsLocal_}, m_IsCompute{m_IsCompute_}, m_IsValid{m_IsValid_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.String m_Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Name();
    // Get instance field reference: System.UInt32 m_Index
    [[deprecated("Use field access instead!")]] uint& dyn_m_Index();
    // Get instance field reference: System.Boolean m_IsLocal
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsLocal();
    // Get instance field reference: System.Boolean m_IsCompute
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsCompute();
    // Get instance field reference: System.Boolean m_IsValid
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsValid();
    // static System.UInt32 GetGlobalKeywordCount()
    // Offset: 0x54F0330
    static uint GetGlobalKeywordCount();
    // static System.UInt32 GetGlobalKeywordIndex(System.String keyword)
    // Offset: 0x54F0358
    static uint GetGlobalKeywordIndex(::StringW keyword);
    // static System.Void CreateGlobalKeyword(System.String keyword)
    // Offset: 0x54F0394
    static void CreateGlobalKeyword(::StringW keyword);
    // public System.String get_name()
    // Offset: 0x54F03D0
    ::StringW get_name();
    // public System.Void .ctor(System.String keywordName)
    // Offset: 0x54F03D8
    ShaderKeyword(::StringW keywordName);
    // public override System.String ToString()
    // Offset: 0x54F04BC
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.Rendering.ShaderKeyword
  #pragma pack(pop)
  static check_size<sizeof(ShaderKeyword), 14 + sizeof(bool)> __UnityEngine_Rendering_ShaderKeywordSizeCheck;
  static_assert(sizeof(ShaderKeyword) == 0xF);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::ShaderKeyword::GetGlobalKeywordCount
// Il2CppName: GetGlobalKeywordCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)()>(&UnityEngine::Rendering::ShaderKeyword::GetGlobalKeywordCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ShaderKeyword), "GetGlobalKeywordCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::ShaderKeyword::GetGlobalKeywordIndex
// Il2CppName: GetGlobalKeywordIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::StringW)>(&UnityEngine::Rendering::ShaderKeyword::GetGlobalKeywordIndex)> {
  static const MethodInfo* get() {
    static auto* keyword = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ShaderKeyword), "GetGlobalKeywordIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyword});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::ShaderKeyword::CreateGlobalKeyword
// Il2CppName: CreateGlobalKeyword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&UnityEngine::Rendering::ShaderKeyword::CreateGlobalKeyword)> {
  static const MethodInfo* get() {
    static auto* keyword = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ShaderKeyword), "CreateGlobalKeyword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyword});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::ShaderKeyword::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Rendering::ShaderKeyword::*)()>(&UnityEngine::Rendering::ShaderKeyword::get_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ShaderKeyword), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::ShaderKeyword::ShaderKeyword
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::ShaderKeyword::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Rendering::ShaderKeyword::*)()>(&UnityEngine::Rendering::ShaderKeyword::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ShaderKeyword), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
