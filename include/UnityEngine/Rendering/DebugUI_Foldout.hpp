// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.DebugUI
#include "UnityEngine/Rendering/DebugUI.hpp"
// Including type: UnityEngine.Rendering.DebugUI/Container
#include "UnityEngine/Rendering/DebugUI_Container.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::DebugUI::Foldout);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::DebugUI::Foldout*, "UnityEngine.Rendering", "DebugUI/Foldout");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.DebugUI/Foldout
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugUI::Foldout : public ::UnityEngine::Rendering::DebugUI::Container {
    public:
    // Nested type: ::UnityEngine::Rendering::DebugUI::Foldout::ContextMenuItem
    struct ContextMenuItem;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.DebugUI/Foldout/ContextMenuItem
    // [TokenAttribute] Offset: FFFFFFFF
    struct ContextMenuItem/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String displayName
      // Size: 0x8
      // Offset: 0x0
      ::StringW displayName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.Action action
      // Size: 0x8
      // Offset: 0x8
      ::System::Action* action;
      // Field size check
      static_assert(sizeof(::System::Action*) == 0x8);
      public:
      // Creating value type constructor for type: ContextMenuItem
      constexpr ContextMenuItem(::StringW displayName_ = {}, ::System::Action* action_ = {}) noexcept : displayName{displayName_}, action{action_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String displayName
      [[deprecated("Use field access instead!")]] ::StringW& dyn_displayName();
      // Get instance field reference: public System.Action action
      [[deprecated("Use field access instead!")]] ::System::Action*& dyn_action();
    }; // UnityEngine.Rendering.DebugUI/Foldout/ContextMenuItem
    #pragma pack(pop)
    static check_size<sizeof(DebugUI::Foldout::ContextMenuItem), 8 + sizeof(::System::Action*)> __UnityEngine_Rendering_DebugUI_Foldout_ContextMenuItemSizeCheck;
    static_assert(sizeof(DebugUI::Foldout::ContextMenuItem) == 0x10);
    public:
    // public System.Boolean opened
    // Size: 0x1
    // Offset: 0x50
    bool opened;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isHeader
    // Size: 0x1
    // Offset: 0x51
    bool isHeader;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isHeader and: contextMenuItems
    char __padding1[0x6] = {};
    // public System.Collections.Generic.List`1<UnityEngine.Rendering.DebugUI/Foldout/ContextMenuItem> contextMenuItems
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::DebugUI::Foldout::ContextMenuItem>* contextMenuItems;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::DebugUI::Foldout::ContextMenuItem>*) == 0x8);
    // private System.String[] <columnLabels>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::StringW> columnLabels;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    public:
    // Deleting conversion operator: operator ::UnityEngine::Rendering::ObservableList_1<::UnityEngine::Rendering::DebugUI::Widget*>*
    constexpr operator ::UnityEngine::Rendering::ObservableList_1<::UnityEngine::Rendering::DebugUI::Widget*>*() const noexcept = delete;
    // Get instance field reference: public System.Boolean opened
    [[deprecated("Use field access instead!")]] bool& dyn_opened();
    // Get instance field reference: public System.Boolean isHeader
    [[deprecated("Use field access instead!")]] bool& dyn_isHeader();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Rendering.DebugUI/Foldout/ContextMenuItem> contextMenuItems
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::DebugUI::Foldout::ContextMenuItem>*& dyn_contextMenuItems();
    // Get instance field reference: private System.String[] <columnLabels>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_$columnLabels$k__BackingField();
    // public System.String[] get_columnLabels()
    // Offset: 0x5249BBC
    ::ArrayW<::StringW> get_columnLabels();
    // public System.Void set_columnLabels(System.String[] value)
    // Offset: 0x5249BC4
    void set_columnLabels(::ArrayW<::StringW> value);
    // public System.Void .ctor()
    // Offset: 0x5245C0C
    // Implemented from: UnityEngine.Rendering.DebugUI/Container
    // Base method: System.Void Container::.ctor()
    // Base method: System.Void Widget::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugUI::Foldout* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::Foldout::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugUI::Foldout*, creationType>()));
    }
  }; // UnityEngine.Rendering.DebugUI/Foldout
  #pragma pack(pop)
  static check_size<sizeof(DebugUI::Foldout), 96 + sizeof(::ArrayW<::StringW>)> __UnityEngine_Rendering_DebugUI_FoldoutSizeCheck;
  static_assert(sizeof(DebugUI::Foldout) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::DebugUI::Foldout::ContextMenuItem, "UnityEngine.Rendering", "DebugUI/Foldout/ContextMenuItem");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Foldout::get_columnLabels
// Il2CppName: get_columnLabels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (UnityEngine::Rendering::DebugUI::Foldout::*)()>(&UnityEngine::Rendering::DebugUI::Foldout::get_columnLabels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Foldout*), "get_columnLabels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Foldout::set_columnLabels
// Il2CppName: set_columnLabels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugUI::Foldout::*)(::ArrayW<::StringW>)>(&UnityEngine::Rendering::DebugUI::Foldout::set_columnLabels)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Foldout*), "set_columnLabels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Foldout::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
