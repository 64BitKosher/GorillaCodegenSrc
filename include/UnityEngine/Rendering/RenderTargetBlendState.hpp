// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ColorWriteMask
  struct ColorWriteMask;
  // Forward declaring type: BlendMode
  struct BlendMode;
  // Forward declaring type: BlendOp
  struct BlendOp;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RenderTargetBlendState
  struct RenderTargetBlendState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::RenderTargetBlendState, "UnityEngine.Rendering", "RenderTargetBlendState");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.RenderTargetBlendState
  // [TokenAttribute] Offset: FFFFFFFF
  struct RenderTargetBlendState/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::Rendering::RenderTargetBlendState>*/ {
    public:
    public:
    // private System.Byte m_WriteMask
    // Size: 0x1
    // Offset: 0x0
    uint8_t m_WriteMask;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_SourceColorBlendMode
    // Size: 0x1
    // Offset: 0x1
    uint8_t m_SourceColorBlendMode;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_DestinationColorBlendMode
    // Size: 0x1
    // Offset: 0x2
    uint8_t m_DestinationColorBlendMode;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_SourceAlphaBlendMode
    // Size: 0x1
    // Offset: 0x3
    uint8_t m_SourceAlphaBlendMode;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_DestinationAlphaBlendMode
    // Size: 0x1
    // Offset: 0x4
    uint8_t m_DestinationAlphaBlendMode;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_ColorBlendOperation
    // Size: 0x1
    // Offset: 0x5
    uint8_t m_ColorBlendOperation;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_AlphaBlendOperation
    // Size: 0x1
    // Offset: 0x6
    uint8_t m_AlphaBlendOperation;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_Padding
    // Size: 0x1
    // Offset: 0x7
    uint8_t m_Padding;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: RenderTargetBlendState
    constexpr RenderTargetBlendState(uint8_t m_WriteMask_ = {}, uint8_t m_SourceColorBlendMode_ = {}, uint8_t m_DestinationColorBlendMode_ = {}, uint8_t m_SourceAlphaBlendMode_ = {}, uint8_t m_DestinationAlphaBlendMode_ = {}, uint8_t m_ColorBlendOperation_ = {}, uint8_t m_AlphaBlendOperation_ = {}, uint8_t m_Padding_ = {}) noexcept : m_WriteMask{m_WriteMask_}, m_SourceColorBlendMode{m_SourceColorBlendMode_}, m_DestinationColorBlendMode{m_DestinationColorBlendMode_}, m_SourceAlphaBlendMode{m_SourceAlphaBlendMode_}, m_DestinationAlphaBlendMode{m_DestinationAlphaBlendMode_}, m_ColorBlendOperation{m_ColorBlendOperation_}, m_AlphaBlendOperation{m_AlphaBlendOperation_}, m_Padding{m_Padding_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Rendering::RenderTargetBlendState>
    operator ::System::IEquatable_1<::UnityEngine::Rendering::RenderTargetBlendState>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Rendering::RenderTargetBlendState>*>(this);
    }
    // Get instance field reference: private System.Byte m_WriteMask
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_WriteMask();
    // Get instance field reference: private System.Byte m_SourceColorBlendMode
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_SourceColorBlendMode();
    // Get instance field reference: private System.Byte m_DestinationColorBlendMode
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_DestinationColorBlendMode();
    // Get instance field reference: private System.Byte m_SourceAlphaBlendMode
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_SourceAlphaBlendMode();
    // Get instance field reference: private System.Byte m_DestinationAlphaBlendMode
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_DestinationAlphaBlendMode();
    // Get instance field reference: private System.Byte m_ColorBlendOperation
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_ColorBlendOperation();
    // Get instance field reference: private System.Byte m_AlphaBlendOperation
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_AlphaBlendOperation();
    // Get instance field reference: private System.Byte m_Padding
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_Padding();
    // static public UnityEngine.Rendering.RenderTargetBlendState get_defaultValue()
    // Offset: 0x54EA2AC
    static ::UnityEngine::Rendering::RenderTargetBlendState get_defaultValue();
    // public System.Void .ctor(UnityEngine.Rendering.ColorWriteMask writeMask, UnityEngine.Rendering.BlendMode sourceColorBlendMode, UnityEngine.Rendering.BlendMode destinationColorBlendMode, UnityEngine.Rendering.BlendMode sourceAlphaBlendMode, UnityEngine.Rendering.BlendMode destinationAlphaBlendMode, UnityEngine.Rendering.BlendOp colorBlendOperation, UnityEngine.Rendering.BlendOp alphaBlendOperation)
    // Offset: 0x54EA2B8
    RenderTargetBlendState(::UnityEngine::Rendering::ColorWriteMask writeMask, ::UnityEngine::Rendering::BlendMode sourceColorBlendMode, ::UnityEngine::Rendering::BlendMode destinationColorBlendMode, ::UnityEngine::Rendering::BlendMode sourceAlphaBlendMode, ::UnityEngine::Rendering::BlendMode destinationAlphaBlendMode, ::UnityEngine::Rendering::BlendOp colorBlendOperation, ::UnityEngine::Rendering::BlendOp alphaBlendOperation);
    // public System.Boolean Equals(UnityEngine.Rendering.RenderTargetBlendState other)
    // Offset: 0x54EA2DC
    bool Equals(::UnityEngine::Rendering::RenderTargetBlendState other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x54EA350
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x54EA3C8
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Rendering.RenderTargetBlendState
  #pragma pack(pop)
  static check_size<sizeof(RenderTargetBlendState), 7 + sizeof(uint8_t)> __UnityEngine_Rendering_RenderTargetBlendStateSizeCheck;
  static_assert(sizeof(RenderTargetBlendState) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::RenderTargetBlendState::get_defaultValue
// Il2CppName: get_defaultValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderTargetBlendState (*)()>(&UnityEngine::Rendering::RenderTargetBlendState::get_defaultValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RenderTargetBlendState), "get_defaultValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RenderTargetBlendState::RenderTargetBlendState
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::RenderTargetBlendState::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::RenderTargetBlendState::*)(::UnityEngine::Rendering::RenderTargetBlendState)>(&UnityEngine::Rendering::RenderTargetBlendState::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetBlendState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RenderTargetBlendState), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RenderTargetBlendState::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::RenderTargetBlendState::*)(::Il2CppObject*)>(&UnityEngine::Rendering::RenderTargetBlendState::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RenderTargetBlendState), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RenderTargetBlendState::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::RenderTargetBlendState::*)()>(&UnityEngine::Rendering::RenderTargetBlendState::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RenderTargetBlendState), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
