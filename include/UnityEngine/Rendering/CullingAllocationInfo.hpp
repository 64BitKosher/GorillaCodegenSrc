// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VisibleLight
  struct VisibleLight;
  // Forward declaring type: VisibleReflectionProbe
  struct VisibleReflectionProbe;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CullingAllocationInfo
  struct CullingAllocationInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::CullingAllocationInfo, "UnityEngine.Rendering", "CullingAllocationInfo");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x24
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.CullingAllocationInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct CullingAllocationInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Rendering.VisibleLight* visibleLightsPtr
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Rendering::VisibleLight* visibleLightsPtr;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::VisibleLight*) == 0x8);
    // public UnityEngine.Rendering.VisibleLight* visibleOffscreenVertexLightsPtr
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Rendering::VisibleLight* visibleOffscreenVertexLightsPtr;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::VisibleLight*) == 0x8);
    // public UnityEngine.Rendering.VisibleReflectionProbe* visibleReflectionProbesPtr
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Rendering::VisibleReflectionProbe* visibleReflectionProbesPtr;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::VisibleReflectionProbe*) == 0x8);
    // public System.Int32 visibleLightCount
    // Size: 0x4
    // Offset: 0x18
    int visibleLightCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 visibleOffscreenVertexLightCount
    // Size: 0x4
    // Offset: 0x1C
    int visibleOffscreenVertexLightCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 visibleReflectionProbeCount
    // Size: 0x4
    // Offset: 0x20
    int visibleReflectionProbeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: CullingAllocationInfo
    constexpr CullingAllocationInfo(::UnityEngine::Rendering::VisibleLight* visibleLightsPtr_ = {}, ::UnityEngine::Rendering::VisibleLight* visibleOffscreenVertexLightsPtr_ = {}, ::UnityEngine::Rendering::VisibleReflectionProbe* visibleReflectionProbesPtr_ = {}, int visibleLightCount_ = {}, int visibleOffscreenVertexLightCount_ = {}, int visibleReflectionProbeCount_ = {}) noexcept : visibleLightsPtr{visibleLightsPtr_}, visibleOffscreenVertexLightsPtr{visibleOffscreenVertexLightsPtr_}, visibleReflectionProbesPtr{visibleReflectionProbesPtr_}, visibleLightCount{visibleLightCount_}, visibleOffscreenVertexLightCount{visibleOffscreenVertexLightCount_}, visibleReflectionProbeCount{visibleReflectionProbeCount_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Rendering.VisibleLight* visibleLightsPtr
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::VisibleLight*& dyn_visibleLightsPtr();
    // Get instance field reference: public UnityEngine.Rendering.VisibleLight* visibleOffscreenVertexLightsPtr
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::VisibleLight*& dyn_visibleOffscreenVertexLightsPtr();
    // Get instance field reference: public UnityEngine.Rendering.VisibleReflectionProbe* visibleReflectionProbesPtr
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::VisibleReflectionProbe*& dyn_visibleReflectionProbesPtr();
    // Get instance field reference: public System.Int32 visibleLightCount
    [[deprecated("Use field access instead!")]] int& dyn_visibleLightCount();
    // Get instance field reference: public System.Int32 visibleOffscreenVertexLightCount
    [[deprecated("Use field access instead!")]] int& dyn_visibleOffscreenVertexLightCount();
    // Get instance field reference: public System.Int32 visibleReflectionProbeCount
    [[deprecated("Use field access instead!")]] int& dyn_visibleReflectionProbeCount();
  }; // UnityEngine.Rendering.CullingAllocationInfo
  #pragma pack(pop)
  static check_size<sizeof(CullingAllocationInfo), 32 + sizeof(int)> __UnityEngine_Rendering_CullingAllocationInfoSizeCheck;
  static_assert(sizeof(CullingAllocationInfo) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
