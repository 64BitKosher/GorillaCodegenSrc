// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Rendering.LocalKeywordSpace
#include "UnityEngine/Rendering/LocalKeywordSpace.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: LocalKeyword
  struct LocalKeyword;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::LocalKeyword, "UnityEngine.Rendering", "LocalKeyword");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.LocalKeyword
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct LocalKeyword/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::Rendering::LocalKeyword>*/ {
    public:
    public:
    // readonly UnityEngine.Rendering.LocalKeywordSpace m_SpaceInfo
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Rendering::LocalKeywordSpace m_SpaceInfo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::LocalKeywordSpace) == 0x8);
    // readonly System.String m_Name
    // Size: 0x8
    // Offset: 0x8
    ::StringW m_Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // readonly System.UInt32 m_Index
    // Size: 0x4
    // Offset: 0x10
    uint m_Index;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: LocalKeyword
    constexpr LocalKeyword(::UnityEngine::Rendering::LocalKeywordSpace m_SpaceInfo_ = {}, ::StringW m_Name_ = {}, uint m_Index_ = {}) noexcept : m_SpaceInfo{m_SpaceInfo_}, m_Name{m_Name_}, m_Index{m_Index_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Rendering::LocalKeyword>
    operator ::System::IEquatable_1<::UnityEngine::Rendering::LocalKeyword>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Rendering::LocalKeyword>*>(this);
    }
    // Get instance field reference: readonly UnityEngine.Rendering.LocalKeywordSpace m_SpaceInfo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::LocalKeywordSpace& dyn_m_SpaceInfo();
    // Get instance field reference: readonly System.String m_Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Name();
    // Get instance field reference: readonly System.UInt32 m_Index
    [[deprecated("Use field access instead!")]] uint& dyn_m_Index();
    // static private System.UInt32 GetShaderKeywordCount(UnityEngine.Shader shader)
    // Offset: 0x54EFCFC
    static uint GetShaderKeywordCount(::UnityEngine::Shader* shader);
    // static private System.UInt32 GetShaderKeywordIndex(UnityEngine.Shader shader, System.String keyword)
    // Offset: 0x54EFD38
    static uint GetShaderKeywordIndex(::UnityEngine::Shader* shader, ::StringW keyword);
    // static private System.Boolean IsValid(UnityEngine.Rendering.LocalKeywordSpace spaceInfo, System.UInt32 keyword)
    // Offset: 0x54EFD7C
    static bool IsValid(::UnityEngine::Rendering::LocalKeywordSpace spaceInfo, uint keyword);
    // public System.Boolean get_isValid()
    // Offset: 0x54EFE0C
    bool get_isValid();
    // public System.Void .ctor(UnityEngine.Shader shader, System.String name)
    // Offset: 0x54EFE5C
    LocalKeyword(::UnityEngine::Shader* shader, ::StringW name);
    // public System.Boolean Equals(UnityEngine.Rendering.LocalKeyword rhs)
    // Offset: 0x54F00DC
    bool Equals(::UnityEngine::Rendering::LocalKeyword rhs);
    // static private System.Boolean IsValid_Injected(ref UnityEngine.Rendering.LocalKeywordSpace spaceInfo, System.UInt32 keyword)
    // Offset: 0x54EFDC8
    static bool IsValid_Injected(ByRef<::UnityEngine::Rendering::LocalKeywordSpace> spaceInfo, uint keyword);
    // public override System.String ToString()
    // Offset: 0x54F0048
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object o)
    // Offset: 0x54F0050
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object o)
    bool Equals(::Il2CppObject* o);
    // public override System.Int32 GetHashCode()
    // Offset: 0x54F012C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Rendering.LocalKeyword
  #pragma pack(pop)
  static check_size<sizeof(LocalKeyword), 16 + sizeof(uint)> __UnityEngine_Rendering_LocalKeywordSizeCheck;
  static_assert(sizeof(LocalKeyword) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::LocalKeyword::GetShaderKeywordCount
// Il2CppName: GetShaderKeywordCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::UnityEngine::Shader*)>(&UnityEngine::Rendering::LocalKeyword::GetShaderKeywordCount)> {
  static const MethodInfo* get() {
    static auto* shader = &::il2cpp_utils::GetClassFromName("UnityEngine", "Shader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LocalKeyword), "GetShaderKeywordCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shader});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LocalKeyword::GetShaderKeywordIndex
// Il2CppName: GetShaderKeywordIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::UnityEngine::Shader*, ::StringW)>(&UnityEngine::Rendering::LocalKeyword::GetShaderKeywordIndex)> {
  static const MethodInfo* get() {
    static auto* shader = &::il2cpp_utils::GetClassFromName("UnityEngine", "Shader")->byval_arg;
    static auto* keyword = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LocalKeyword), "GetShaderKeywordIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shader, keyword});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LocalKeyword::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rendering::LocalKeywordSpace, uint)>(&UnityEngine::Rendering::LocalKeyword::IsValid)> {
  static const MethodInfo* get() {
    static auto* spaceInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LocalKeywordSpace")->byval_arg;
    static auto* keyword = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LocalKeyword), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{spaceInfo, keyword});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LocalKeyword::get_isValid
// Il2CppName: get_isValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::LocalKeyword::*)()>(&UnityEngine::Rendering::LocalKeyword::get_isValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LocalKeyword), "get_isValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LocalKeyword::LocalKeyword
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::LocalKeyword::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::LocalKeyword::*)(::UnityEngine::Rendering::LocalKeyword)>(&UnityEngine::Rendering::LocalKeyword::Equals)> {
  static const MethodInfo* get() {
    static auto* rhs = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LocalKeyword")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LocalKeyword), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rhs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LocalKeyword::IsValid_Injected
// Il2CppName: IsValid_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Rendering::LocalKeywordSpace>, uint)>(&UnityEngine::Rendering::LocalKeyword::IsValid_Injected)> {
  static const MethodInfo* get() {
    static auto* spaceInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LocalKeywordSpace")->this_arg;
    static auto* keyword = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LocalKeyword), "IsValid_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{spaceInfo, keyword});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LocalKeyword::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Rendering::LocalKeyword::*)()>(&UnityEngine::Rendering::LocalKeyword::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LocalKeyword), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LocalKeyword::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::LocalKeyword::*)(::Il2CppObject*)>(&UnityEngine::Rendering::LocalKeyword::Equals)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LocalKeyword), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LocalKeyword::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::LocalKeyword::*)()>(&UnityEngine::Rendering::LocalKeyword::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LocalKeyword), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
