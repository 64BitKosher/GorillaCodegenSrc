// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CoreCameraValues
  struct CoreCameraValues;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::CoreCameraValues, "UnityEngine.Rendering", "CoreCameraValues");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.CoreCameraValues
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  struct CoreCameraValues/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::Rendering::CoreCameraValues>*/ {
    public:
    public:
    // private System.Int32 filterMode
    // Size: 0x4
    // Offset: 0x0
    int filterMode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt32 cullingMask
    // Size: 0x4
    // Offset: 0x4
    uint cullingMask;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Int32 instanceID
    // Size: 0x4
    // Offset: 0x8
    int instanceID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: CoreCameraValues
    constexpr CoreCameraValues(int filterMode_ = {}, uint cullingMask_ = {}, int instanceID_ = {}) noexcept : filterMode{filterMode_}, cullingMask{cullingMask_}, instanceID{instanceID_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Rendering::CoreCameraValues>
    operator ::System::IEquatable_1<::UnityEngine::Rendering::CoreCameraValues>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Rendering::CoreCameraValues>*>(this);
    }
    // Get instance field reference: private System.Int32 filterMode
    [[deprecated("Use field access instead!")]] int& dyn_filterMode();
    // Get instance field reference: private System.UInt32 cullingMask
    [[deprecated("Use field access instead!")]] uint& dyn_cullingMask();
    // Get instance field reference: private System.Int32 instanceID
    [[deprecated("Use field access instead!")]] int& dyn_instanceID();
    // public System.Boolean Equals(UnityEngine.Rendering.CoreCameraValues other)
    // Offset: 0x54E5118
    bool Equals(::UnityEngine::Rendering::CoreCameraValues other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x54E514C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x54E51E4
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Rendering.CoreCameraValues
  #pragma pack(pop)
  static check_size<sizeof(CoreCameraValues), 8 + sizeof(int)> __UnityEngine_Rendering_CoreCameraValuesSizeCheck;
  static_assert(sizeof(CoreCameraValues) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::CoreCameraValues::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::CoreCameraValues::*)(::UnityEngine::Rendering::CoreCameraValues)>(&UnityEngine::Rendering::CoreCameraValues::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CoreCameraValues")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CoreCameraValues), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CoreCameraValues::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::CoreCameraValues::*)(::Il2CppObject*)>(&UnityEngine::Rendering::CoreCameraValues::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CoreCameraValues), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CoreCameraValues::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::CoreCameraValues::*)()>(&UnityEngine::Rendering::CoreCameraValues::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CoreCameraValues), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
