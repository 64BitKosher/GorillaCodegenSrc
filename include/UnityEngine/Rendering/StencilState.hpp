// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CompareFunction
  struct CompareFunction;
  // Forward declaring type: StencilOp
  struct StencilOp;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: StencilState
  struct StencilState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::StencilState, "UnityEngine.Rendering", "StencilState");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.StencilState
  // [TokenAttribute] Offset: FFFFFFFF
  struct StencilState/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::Rendering::StencilState>*/ {
    public:
    public:
    // private System.Byte m_Enabled
    // Size: 0x1
    // Offset: 0x0
    uint8_t m_Enabled;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_ReadMask
    // Size: 0x1
    // Offset: 0x1
    uint8_t m_ReadMask;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_WriteMask
    // Size: 0x1
    // Offset: 0x2
    uint8_t m_WriteMask;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_Padding
    // Size: 0x1
    // Offset: 0x3
    uint8_t m_Padding;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_CompareFunctionFront
    // Size: 0x1
    // Offset: 0x4
    uint8_t m_CompareFunctionFront;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_PassOperationFront
    // Size: 0x1
    // Offset: 0x5
    uint8_t m_PassOperationFront;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_FailOperationFront
    // Size: 0x1
    // Offset: 0x6
    uint8_t m_FailOperationFront;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_ZFailOperationFront
    // Size: 0x1
    // Offset: 0x7
    uint8_t m_ZFailOperationFront;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_CompareFunctionBack
    // Size: 0x1
    // Offset: 0x8
    uint8_t m_CompareFunctionBack;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_PassOperationBack
    // Size: 0x1
    // Offset: 0x9
    uint8_t m_PassOperationBack;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_FailOperationBack
    // Size: 0x1
    // Offset: 0xA
    uint8_t m_FailOperationBack;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_ZFailOperationBack
    // Size: 0x1
    // Offset: 0xB
    uint8_t m_ZFailOperationBack;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: StencilState
    constexpr StencilState(uint8_t m_Enabled_ = {}, uint8_t m_ReadMask_ = {}, uint8_t m_WriteMask_ = {}, uint8_t m_Padding_ = {}, uint8_t m_CompareFunctionFront_ = {}, uint8_t m_PassOperationFront_ = {}, uint8_t m_FailOperationFront_ = {}, uint8_t m_ZFailOperationFront_ = {}, uint8_t m_CompareFunctionBack_ = {}, uint8_t m_PassOperationBack_ = {}, uint8_t m_FailOperationBack_ = {}, uint8_t m_ZFailOperationBack_ = {}) noexcept : m_Enabled{m_Enabled_}, m_ReadMask{m_ReadMask_}, m_WriteMask{m_WriteMask_}, m_Padding{m_Padding_}, m_CompareFunctionFront{m_CompareFunctionFront_}, m_PassOperationFront{m_PassOperationFront_}, m_FailOperationFront{m_FailOperationFront_}, m_ZFailOperationFront{m_ZFailOperationFront_}, m_CompareFunctionBack{m_CompareFunctionBack_}, m_PassOperationBack{m_PassOperationBack_}, m_FailOperationBack{m_FailOperationBack_}, m_ZFailOperationBack{m_ZFailOperationBack_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Rendering::StencilState>
    operator ::System::IEquatable_1<::UnityEngine::Rendering::StencilState>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Rendering::StencilState>*>(this);
    }
    // Get instance field reference: private System.Byte m_Enabled
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_Enabled();
    // Get instance field reference: private System.Byte m_ReadMask
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_ReadMask();
    // Get instance field reference: private System.Byte m_WriteMask
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_WriteMask();
    // Get instance field reference: private System.Byte m_Padding
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_Padding();
    // Get instance field reference: private System.Byte m_CompareFunctionFront
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_CompareFunctionFront();
    // Get instance field reference: private System.Byte m_PassOperationFront
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_PassOperationFront();
    // Get instance field reference: private System.Byte m_FailOperationFront
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_FailOperationFront();
    // Get instance field reference: private System.Byte m_ZFailOperationFront
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_ZFailOperationFront();
    // Get instance field reference: private System.Byte m_CompareFunctionBack
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_CompareFunctionBack();
    // Get instance field reference: private System.Byte m_PassOperationBack
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_PassOperationBack();
    // Get instance field reference: private System.Byte m_FailOperationBack
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_FailOperationBack();
    // Get instance field reference: private System.Byte m_ZFailOperationBack
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_ZFailOperationBack();
    // static public UnityEngine.Rendering.StencilState get_defaultValue()
    // Offset: 0x54E9E9C
    static ::UnityEngine::Rendering::StencilState get_defaultValue();
    // public System.Void .ctor(System.Boolean enabled, System.Byte readMask, System.Byte writeMask, UnityEngine.Rendering.CompareFunction compareFunction, UnityEngine.Rendering.StencilOp passOperation, UnityEngine.Rendering.StencilOp failOperation, UnityEngine.Rendering.StencilOp zFailOperation)
    // Offset: 0x54EE09C
    StencilState(bool enabled, uint8_t readMask, uint8_t writeMask, ::UnityEngine::Rendering::CompareFunction compareFunction, ::UnityEngine::Rendering::StencilOp passOperation, ::UnityEngine::Rendering::StencilOp failOperation, ::UnityEngine::Rendering::StencilOp zFailOperation);
    // public System.Void .ctor(System.Boolean enabled, System.Byte readMask, System.Byte writeMask, UnityEngine.Rendering.CompareFunction compareFunctionFront, UnityEngine.Rendering.StencilOp passOperationFront, UnityEngine.Rendering.StencilOp failOperationFront, UnityEngine.Rendering.StencilOp zFailOperationFront, UnityEngine.Rendering.CompareFunction compareFunctionBack, UnityEngine.Rendering.StencilOp passOperationBack, UnityEngine.Rendering.StencilOp failOperationBack, UnityEngine.Rendering.StencilOp zFailOperationBack)
    // Offset: 0x54EE0C8
    StencilState(bool enabled, uint8_t readMask, uint8_t writeMask, ::UnityEngine::Rendering::CompareFunction compareFunctionFront, ::UnityEngine::Rendering::StencilOp passOperationFront, ::UnityEngine::Rendering::StencilOp failOperationFront, ::UnityEngine::Rendering::StencilOp zFailOperationFront, ::UnityEngine::Rendering::CompareFunction compareFunctionBack, ::UnityEngine::Rendering::StencilOp passOperationBack, ::UnityEngine::Rendering::StencilOp failOperationBack, ::UnityEngine::Rendering::StencilOp zFailOperationBack);
    // public System.Boolean get_enabled()
    // Offset: 0x54EE1AC
    bool get_enabled();
    // public System.Void set_enabled(System.Boolean value)
    // Offset: 0x54EE208
    void set_enabled(bool value);
    // public System.Byte get_readMask()
    // Offset: 0x54EE274
    uint8_t get_readMask();
    // public System.Void set_readMask(System.Byte value)
    // Offset: 0x54EE27C
    void set_readMask(uint8_t value);
    // public System.Byte get_writeMask()
    // Offset: 0x54EE284
    uint8_t get_writeMask();
    // public System.Void set_writeMask(System.Byte value)
    // Offset: 0x54EE28C
    void set_writeMask(uint8_t value);
    // public System.Void SetCompareFunction(UnityEngine.Rendering.CompareFunction value)
    // Offset: 0x54EE294
    void SetCompareFunction(::UnityEngine::Rendering::CompareFunction value);
    // public System.Void SetPassOperation(UnityEngine.Rendering.StencilOp value)
    // Offset: 0x54EE2B0
    void SetPassOperation(::UnityEngine::Rendering::StencilOp value);
    // public System.Void SetFailOperation(UnityEngine.Rendering.StencilOp value)
    // Offset: 0x54EE2CC
    void SetFailOperation(::UnityEngine::Rendering::StencilOp value);
    // public System.Void SetZFailOperation(UnityEngine.Rendering.StencilOp value)
    // Offset: 0x54EE2E8
    void SetZFailOperation(::UnityEngine::Rendering::StencilOp value);
    // public UnityEngine.Rendering.CompareFunction get_compareFunctionFront()
    // Offset: 0x54EE304
    ::UnityEngine::Rendering::CompareFunction get_compareFunctionFront();
    // public System.Void set_compareFunctionFront(UnityEngine.Rendering.CompareFunction value)
    // Offset: 0x54EE2A0
    void set_compareFunctionFront(::UnityEngine::Rendering::CompareFunction value);
    // public UnityEngine.Rendering.StencilOp get_passOperationFront()
    // Offset: 0x54EE30C
    ::UnityEngine::Rendering::StencilOp get_passOperationFront();
    // public System.Void set_passOperationFront(UnityEngine.Rendering.StencilOp value)
    // Offset: 0x54EE2BC
    void set_passOperationFront(::UnityEngine::Rendering::StencilOp value);
    // public UnityEngine.Rendering.StencilOp get_failOperationFront()
    // Offset: 0x54EE314
    ::UnityEngine::Rendering::StencilOp get_failOperationFront();
    // public System.Void set_failOperationFront(UnityEngine.Rendering.StencilOp value)
    // Offset: 0x54EE2D8
    void set_failOperationFront(::UnityEngine::Rendering::StencilOp value);
    // public UnityEngine.Rendering.StencilOp get_zFailOperationFront()
    // Offset: 0x54EE31C
    ::UnityEngine::Rendering::StencilOp get_zFailOperationFront();
    // public System.Void set_zFailOperationFront(UnityEngine.Rendering.StencilOp value)
    // Offset: 0x54EE2F4
    void set_zFailOperationFront(::UnityEngine::Rendering::StencilOp value);
    // public UnityEngine.Rendering.CompareFunction get_compareFunctionBack()
    // Offset: 0x54EE324
    ::UnityEngine::Rendering::CompareFunction get_compareFunctionBack();
    // public System.Void set_compareFunctionBack(UnityEngine.Rendering.CompareFunction value)
    // Offset: 0x54EE2A8
    void set_compareFunctionBack(::UnityEngine::Rendering::CompareFunction value);
    // public UnityEngine.Rendering.StencilOp get_passOperationBack()
    // Offset: 0x54EE32C
    ::UnityEngine::Rendering::StencilOp get_passOperationBack();
    // public System.Void set_passOperationBack(UnityEngine.Rendering.StencilOp value)
    // Offset: 0x54EE2C4
    void set_passOperationBack(::UnityEngine::Rendering::StencilOp value);
    // public UnityEngine.Rendering.StencilOp get_failOperationBack()
    // Offset: 0x54EE334
    ::UnityEngine::Rendering::StencilOp get_failOperationBack();
    // public System.Void set_failOperationBack(UnityEngine.Rendering.StencilOp value)
    // Offset: 0x54EE2E0
    void set_failOperationBack(::UnityEngine::Rendering::StencilOp value);
    // public UnityEngine.Rendering.StencilOp get_zFailOperationBack()
    // Offset: 0x54EE33C
    ::UnityEngine::Rendering::StencilOp get_zFailOperationBack();
    // public System.Void set_zFailOperationBack(UnityEngine.Rendering.StencilOp value)
    // Offset: 0x54EE2FC
    void set_zFailOperationBack(::UnityEngine::Rendering::StencilOp value);
    // public System.Boolean Equals(UnityEngine.Rendering.StencilState other)
    // Offset: 0x54EA00C
    bool Equals(::UnityEngine::Rendering::StencilState other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x54EE344
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x54EA1BC
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Rendering.StencilState
  #pragma pack(pop)
  static check_size<sizeof(StencilState), 11 + sizeof(uint8_t)> __UnityEngine_Rendering_StencilStateSizeCheck;
  static_assert(sizeof(StencilState) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::get_defaultValue
// Il2CppName: get_defaultValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::StencilState (*)()>(&UnityEngine::Rendering::StencilState::get_defaultValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "get_defaultValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::StencilState
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::StencilState
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::get_enabled
// Il2CppName: get_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::StencilState::*)()>(&UnityEngine::Rendering::StencilState::get_enabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "get_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::set_enabled
// Il2CppName: set_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::StencilState::*)(bool)>(&UnityEngine::Rendering::StencilState::set_enabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "set_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::get_readMask
// Il2CppName: get_readMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (UnityEngine::Rendering::StencilState::*)()>(&UnityEngine::Rendering::StencilState::get_readMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "get_readMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::set_readMask
// Il2CppName: set_readMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::StencilState::*)(uint8_t)>(&UnityEngine::Rendering::StencilState::set_readMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "set_readMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::get_writeMask
// Il2CppName: get_writeMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (UnityEngine::Rendering::StencilState::*)()>(&UnityEngine::Rendering::StencilState::get_writeMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "get_writeMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::set_writeMask
// Il2CppName: set_writeMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::StencilState::*)(uint8_t)>(&UnityEngine::Rendering::StencilState::set_writeMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "set_writeMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::SetCompareFunction
// Il2CppName: SetCompareFunction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::StencilState::*)(::UnityEngine::Rendering::CompareFunction)>(&UnityEngine::Rendering::StencilState::SetCompareFunction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CompareFunction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "SetCompareFunction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::SetPassOperation
// Il2CppName: SetPassOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::StencilState::*)(::UnityEngine::Rendering::StencilOp)>(&UnityEngine::Rendering::StencilState::SetPassOperation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "StencilOp")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "SetPassOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::SetFailOperation
// Il2CppName: SetFailOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::StencilState::*)(::UnityEngine::Rendering::StencilOp)>(&UnityEngine::Rendering::StencilState::SetFailOperation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "StencilOp")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "SetFailOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::SetZFailOperation
// Il2CppName: SetZFailOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::StencilState::*)(::UnityEngine::Rendering::StencilOp)>(&UnityEngine::Rendering::StencilState::SetZFailOperation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "StencilOp")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "SetZFailOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::get_compareFunctionFront
// Il2CppName: get_compareFunctionFront
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::CompareFunction (UnityEngine::Rendering::StencilState::*)()>(&UnityEngine::Rendering::StencilState::get_compareFunctionFront)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "get_compareFunctionFront", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::set_compareFunctionFront
// Il2CppName: set_compareFunctionFront
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::StencilState::*)(::UnityEngine::Rendering::CompareFunction)>(&UnityEngine::Rendering::StencilState::set_compareFunctionFront)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CompareFunction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "set_compareFunctionFront", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::get_passOperationFront
// Il2CppName: get_passOperationFront
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::StencilOp (UnityEngine::Rendering::StencilState::*)()>(&UnityEngine::Rendering::StencilState::get_passOperationFront)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "get_passOperationFront", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::set_passOperationFront
// Il2CppName: set_passOperationFront
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::StencilState::*)(::UnityEngine::Rendering::StencilOp)>(&UnityEngine::Rendering::StencilState::set_passOperationFront)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "StencilOp")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "set_passOperationFront", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::get_failOperationFront
// Il2CppName: get_failOperationFront
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::StencilOp (UnityEngine::Rendering::StencilState::*)()>(&UnityEngine::Rendering::StencilState::get_failOperationFront)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "get_failOperationFront", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::set_failOperationFront
// Il2CppName: set_failOperationFront
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::StencilState::*)(::UnityEngine::Rendering::StencilOp)>(&UnityEngine::Rendering::StencilState::set_failOperationFront)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "StencilOp")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "set_failOperationFront", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::get_zFailOperationFront
// Il2CppName: get_zFailOperationFront
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::StencilOp (UnityEngine::Rendering::StencilState::*)()>(&UnityEngine::Rendering::StencilState::get_zFailOperationFront)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "get_zFailOperationFront", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::set_zFailOperationFront
// Il2CppName: set_zFailOperationFront
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::StencilState::*)(::UnityEngine::Rendering::StencilOp)>(&UnityEngine::Rendering::StencilState::set_zFailOperationFront)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "StencilOp")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "set_zFailOperationFront", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::get_compareFunctionBack
// Il2CppName: get_compareFunctionBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::CompareFunction (UnityEngine::Rendering::StencilState::*)()>(&UnityEngine::Rendering::StencilState::get_compareFunctionBack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "get_compareFunctionBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::set_compareFunctionBack
// Il2CppName: set_compareFunctionBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::StencilState::*)(::UnityEngine::Rendering::CompareFunction)>(&UnityEngine::Rendering::StencilState::set_compareFunctionBack)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CompareFunction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "set_compareFunctionBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::get_passOperationBack
// Il2CppName: get_passOperationBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::StencilOp (UnityEngine::Rendering::StencilState::*)()>(&UnityEngine::Rendering::StencilState::get_passOperationBack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "get_passOperationBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::set_passOperationBack
// Il2CppName: set_passOperationBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::StencilState::*)(::UnityEngine::Rendering::StencilOp)>(&UnityEngine::Rendering::StencilState::set_passOperationBack)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "StencilOp")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "set_passOperationBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::get_failOperationBack
// Il2CppName: get_failOperationBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::StencilOp (UnityEngine::Rendering::StencilState::*)()>(&UnityEngine::Rendering::StencilState::get_failOperationBack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "get_failOperationBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::set_failOperationBack
// Il2CppName: set_failOperationBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::StencilState::*)(::UnityEngine::Rendering::StencilOp)>(&UnityEngine::Rendering::StencilState::set_failOperationBack)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "StencilOp")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "set_failOperationBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::get_zFailOperationBack
// Il2CppName: get_zFailOperationBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::StencilOp (UnityEngine::Rendering::StencilState::*)()>(&UnityEngine::Rendering::StencilState::get_zFailOperationBack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "get_zFailOperationBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::set_zFailOperationBack
// Il2CppName: set_zFailOperationBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::StencilState::*)(::UnityEngine::Rendering::StencilOp)>(&UnityEngine::Rendering::StencilState::set_zFailOperationBack)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "StencilOp")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "set_zFailOperationBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::StencilState::*)(::UnityEngine::Rendering::StencilState)>(&UnityEngine::Rendering::StencilState::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "StencilState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::StencilState::*)(::Il2CppObject*)>(&UnityEngine::Rendering::StencilState::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::StencilState::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::StencilState::*)()>(&UnityEngine::Rendering::StencilState::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::StencilState), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
