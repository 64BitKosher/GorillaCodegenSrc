// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.DebugUI
#include "UnityEngine/Rendering/DebugUI.hpp"
// Including type: UnityEngine.Rendering.DebugUI/EnumField`1
#include "UnityEngine/Rendering/DebugUI_EnumField_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: Enum because it is already included!
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::DebugUI::BitField);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::DebugUI::BitField*, "UnityEngine.Rendering", "DebugUI/BitField");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.DebugUI/BitField
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugUI::BitField : public ::UnityEngine::Rendering::DebugUI::EnumField_1<::System::Enum*> {
    public:
    public:
    // private System.Type m_EnumType
    // Size: 0x8
    // Offset: 0x70
    ::System::Type* m_EnumType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Type*
    constexpr operator ::System::Type*() const noexcept {
      return m_EnumType;
    }
    // Get instance field reference: private System.Type m_EnumType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_m_EnumType();
    // public System.Void set_enumType(System.Type value)
    // Offset: 0x524A99C
    void set_enumType(::System::Type* value);
    // public System.Void .ctor()
    // Offset: 0x524AA04
    // Implemented from: UnityEngine.Rendering.DebugUI/EnumField`1
    // Base method: System.Void EnumField_1::.ctor()
    // Base method: System.Void Field_1::.ctor()
    // Base method: System.Void Widget::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugUI::BitField* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::BitField::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugUI::BitField*, creationType>()));
    }
  }; // UnityEngine.Rendering.DebugUI/BitField
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::BitField::set_enumType
// Il2CppName: set_enumType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugUI::BitField::*)(::System::Type*)>(&UnityEngine::Rendering::DebugUI::BitField::set_enumType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::BitField*), "set_enumType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::BitField::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
