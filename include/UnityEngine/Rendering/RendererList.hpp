// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.UIntPtr
#include "System/UIntPtr.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RendererList
  struct RendererList;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::RendererList, "UnityEngine.Rendering", "RendererList");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.RendererList
  // [TokenAttribute] Offset: FFFFFFFF
  // [MovedFromAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  struct RendererList/*, public ::System::ValueType*/ {
    public:
    public:
    // System.UIntPtr context
    // Size: 0x8
    // Offset: 0x0
    ::System::UIntPtr context;
    // Field size check
    static_assert(sizeof(::System::UIntPtr) == 0x8);
    // System.UInt32 index
    // Size: 0x4
    // Offset: 0x8
    uint index;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.UInt32 frame
    // Size: 0x4
    // Offset: 0xC
    uint frame;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.UInt32 type
    // Size: 0x4
    // Offset: 0x10
    uint type;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: RendererList
    constexpr RendererList(::System::UIntPtr context_ = {}, uint index_ = {}, uint frame_ = {}, uint type_ = {}) noexcept : context{context_}, index{index_}, frame{frame_}, type{type_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly UnityEngine.Rendering.RendererList nullRendererList
    static ::UnityEngine::Rendering::RendererList _get_nullRendererList();
    // Set static field: static public readonly UnityEngine.Rendering.RendererList nullRendererList
    static void _set_nullRendererList(::UnityEngine::Rendering::RendererList value);
    // Get instance field reference: System.UIntPtr context
    [[deprecated("Use field access instead!")]] ::System::UIntPtr& dyn_context();
    // Get instance field reference: System.UInt32 index
    [[deprecated("Use field access instead!")]] uint& dyn_index();
    // Get instance field reference: System.UInt32 frame
    [[deprecated("Use field access instead!")]] uint& dyn_frame();
    // Get instance field reference: System.UInt32 type
    [[deprecated("Use field access instead!")]] uint& dyn_type();
    // public System.Boolean get_isValid()
    // Offset: 0x54EA468
    bool get_isValid();
    // System.Void .ctor(System.UIntPtr ctx, System.UInt32 indx)
    // Offset: 0x54EA518
    RendererList(::System::UIntPtr ctx, uint indx);
    // static private System.Void .cctor()
    // Offset: 0x54EA528
    static void _cctor();
    // static private System.Boolean get_isValid_Injected(ref UnityEngine.Rendering.RendererList _unity_self)
    // Offset: 0x54EA4DC
    static bool get_isValid_Injected(ByRef<::UnityEngine::Rendering::RendererList> _unity_self);
  }; // UnityEngine.Rendering.RendererList
  #pragma pack(pop)
  static check_size<sizeof(RendererList), 16 + sizeof(uint)> __UnityEngine_Rendering_RendererListSizeCheck;
  static_assert(sizeof(RendererList) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::RendererList::get_isValid
// Il2CppName: get_isValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::RendererList::*)()>(&UnityEngine::Rendering::RendererList::get_isValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RendererList), "get_isValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RendererList::RendererList
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::RendererList::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::RendererList::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RendererList), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::RendererList::get_isValid_Injected
// Il2CppName: get_isValid_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Rendering::RendererList>)>(&UnityEngine::Rendering::RendererList::get_isValid_Injected)> {
  static const MethodInfo* get() {
    static auto* _unity_self = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RendererList")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::RendererList), "get_isValid_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_unity_self});
  }
};
