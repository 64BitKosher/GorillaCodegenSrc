// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Keyframe
#include "UnityEngine/Keyframe.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: GraphicsFormat
  struct GraphicsFormat;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: TextureCurve
  class TextureCurve;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::TextureCurve);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::TextureCurve*, "UnityEngine.Rendering", "TextureCurve");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x3A
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.TextureCurve
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  class TextureCurve : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Int32 <length>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_Loop
    // Size: 0x1
    // Offset: 0x14
    bool m_Loop;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Loop and: m_ZeroValue
    char __padding1[0x3] = {};
    // private System.Single m_ZeroValue
    // Size: 0x4
    // Offset: 0x18
    float m_ZeroValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Range
    // Size: 0x4
    // Offset: 0x1C
    float m_Range;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AnimationCurve m_Curve
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AnimationCurve* m_Curve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve m_LoopingCurve
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AnimationCurve* m_LoopingCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.Texture2D m_Texture
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Texture2D* m_Texture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private System.Boolean m_IsCurveDirty
    // Size: 0x1
    // Offset: 0x38
    bool m_IsCurveDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsTextureDirty
    // Size: 0x1
    // Offset: 0x39
    bool m_IsTextureDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // static field const value: static private System.Int32 k_Precision
    static constexpr const int k_Precision = 128;
    // Get static field: static private System.Int32 k_Precision
    static int _get_k_Precision();
    // Set static field: static private System.Int32 k_Precision
    static void _set_k_Precision(int value);
    // static field const value: static private System.Single k_Step
    static constexpr const float k_Step = 0.0078125;
    // Get static field: static private System.Single k_Step
    static float _get_k_Step();
    // Set static field: static private System.Single k_Step
    static void _set_k_Step(float value);
    // Get instance field reference: private System.Int32 <length>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$length$k__BackingField();
    // Get instance field reference: private System.Boolean m_Loop
    [[deprecated("Use field access instead!")]] bool& dyn_m_Loop();
    // Get instance field reference: private System.Single m_ZeroValue
    [[deprecated("Use field access instead!")]] float& dyn_m_ZeroValue();
    // Get instance field reference: private System.Single m_Range
    [[deprecated("Use field access instead!")]] float& dyn_m_Range();
    // Get instance field reference: private UnityEngine.AnimationCurve m_Curve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_m_Curve();
    // Get instance field reference: private UnityEngine.AnimationCurve m_LoopingCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_m_LoopingCurve();
    // Get instance field reference: private UnityEngine.Texture2D m_Texture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_m_Texture();
    // Get instance field reference: private System.Boolean m_IsCurveDirty
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsCurveDirty();
    // Get instance field reference: private System.Boolean m_IsTextureDirty
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsTextureDirty();
    // public System.Int32 get_length()
    // Offset: 0x525EE60
    int get_length();
    // private System.Void set_length(System.Int32 value)
    // Offset: 0x525EE68
    void set_length(int value);
    // public System.Void .ctor(UnityEngine.AnimationCurve baseCurve, System.Single zeroValue, System.Boolean loop, in UnityEngine.Vector2 bounds)
    // Offset: 0x525EE70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextureCurve* New_ctor(::UnityEngine::AnimationCurve* baseCurve, float zeroValue, bool loop, ByRef<::UnityEngine::Vector2> bounds) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::TextureCurve::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextureCurve*, creationType>(baseCurve, zeroValue, loop, byref(bounds))));
    }
    // public System.Void .ctor(UnityEngine.Keyframe[] keys, System.Single zeroValue, System.Boolean loop, in UnityEngine.Vector2 bounds)
    // Offset: 0x525EEC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextureCurve* New_ctor(::ArrayW<::UnityEngine::Keyframe> keys, float zeroValue, bool loop, ByRef<::UnityEngine::Vector2> bounds) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::TextureCurve::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextureCurve*, creationType>(keys, zeroValue, loop, byref(bounds))));
    }
    // public System.Void Dispose()
    // Offset: 0x525EFE0
    void Dispose();
    // public System.Void Release()
    // Offset: 0x525EFE4
    void Release();
    // public System.Void SetDirty()
    // Offset: 0x525F04C
    void SetDirty();
    // static private UnityEngine.Experimental.Rendering.GraphicsFormat GetTextureFormat()
    // Offset: 0x525F058
    static ::UnityEngine::Experimental::Rendering::GraphicsFormat GetTextureFormat();
    // public UnityEngine.Texture2D GetTexture()
    // Offset: 0x525F0A4
    ::UnityEngine::Texture2D* GetTexture();
    // public System.Single Evaluate(System.Single time)
    // Offset: 0x525F2AC
    float Evaluate(float time);
    // protected override System.Void Finalize()
    // Offset: 0x525EFD8
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // UnityEngine.Rendering.TextureCurve
  #pragma pack(pop)
  static check_size<sizeof(TextureCurve), 57 + sizeof(bool)> __UnityEngine_Rendering_TextureCurveSizeCheck;
  static_assert(sizeof(TextureCurve) == 0x3A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::TextureCurve::get_length
// Il2CppName: get_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::TextureCurve::*)()>(&UnityEngine::Rendering::TextureCurve::get_length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::TextureCurve*), "get_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::TextureCurve::set_length
// Il2CppName: set_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::TextureCurve::*)(int)>(&UnityEngine::Rendering::TextureCurve::set_length)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::TextureCurve*), "set_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::TextureCurve::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::TextureCurve::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::TextureCurve::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::TextureCurve::*)()>(&UnityEngine::Rendering::TextureCurve::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::TextureCurve*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::TextureCurve::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::TextureCurve::*)()>(&UnityEngine::Rendering::TextureCurve::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::TextureCurve*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::TextureCurve::SetDirty
// Il2CppName: SetDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::TextureCurve::*)()>(&UnityEngine::Rendering::TextureCurve::SetDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::TextureCurve*), "SetDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::TextureCurve::GetTextureFormat
// Il2CppName: GetTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::GraphicsFormat (*)()>(&UnityEngine::Rendering::TextureCurve::GetTextureFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::TextureCurve*), "GetTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::TextureCurve::GetTexture
// Il2CppName: GetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (UnityEngine::Rendering::TextureCurve::*)()>(&UnityEngine::Rendering::TextureCurve::GetTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::TextureCurve*), "GetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::TextureCurve::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::TextureCurve::*)(float)>(&UnityEngine::Rendering::TextureCurve::Evaluate)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::TextureCurve*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::TextureCurve::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::TextureCurve::*)()>(&UnityEngine::Rendering::TextureCurve::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::TextureCurve*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
