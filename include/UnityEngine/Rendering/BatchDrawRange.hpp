// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Rendering.BatchFilterSettings
#include "UnityEngine/Rendering/BatchFilterSettings.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: BatchDrawRange
  struct BatchDrawRange;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::BatchDrawRange, "UnityEngine.Rendering", "BatchDrawRange");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x12
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.BatchDrawRange
  // [TokenAttribute] Offset: FFFFFFFF
  struct BatchDrawRange/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt32 drawCommandsBegin
    // Size: 0x4
    // Offset: 0x0
    uint drawCommandsBegin;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 drawCommandsCount
    // Size: 0x4
    // Offset: 0x4
    uint drawCommandsCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public UnityEngine.Rendering.BatchFilterSettings filterSettings
    // Size: 0xA
    // Offset: 0x8
    ::UnityEngine::Rendering::BatchFilterSettings filterSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::BatchFilterSettings) == 0xA);
    public:
    // Creating value type constructor for type: BatchDrawRange
    constexpr BatchDrawRange(uint drawCommandsBegin_ = {}, uint drawCommandsCount_ = {}, ::UnityEngine::Rendering::BatchFilterSettings filterSettings_ = {}) noexcept : drawCommandsBegin{drawCommandsBegin_}, drawCommandsCount{drawCommandsCount_}, filterSettings{filterSettings_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt32 drawCommandsBegin
    [[deprecated("Use field access instead!")]] uint& dyn_drawCommandsBegin();
    // Get instance field reference: public System.UInt32 drawCommandsCount
    [[deprecated("Use field access instead!")]] uint& dyn_drawCommandsCount();
    // Get instance field reference: public UnityEngine.Rendering.BatchFilterSettings filterSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::BatchFilterSettings& dyn_filterSettings();
  }; // UnityEngine.Rendering.BatchDrawRange
  #pragma pack(pop)
  static check_size<sizeof(BatchDrawRange), 8 + sizeof(::UnityEngine::Rendering::BatchFilterSettings)> __UnityEngine_Rendering_BatchDrawRangeSizeCheck;
  static_assert(sizeof(BatchDrawRange) == 0x12);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
