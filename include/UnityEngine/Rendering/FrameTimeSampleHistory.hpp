// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.FrameTimeSample
#include "UnityEngine/Rendering/FrameTimeSample.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: FrameTimeSampleHistory
  class FrameTimeSampleHistory;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::FrameTimeSampleHistory);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::FrameTimeSampleHistory*, "UnityEngine.Rendering", "FrameTimeSampleHistory");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.FrameTimeSampleHistory
  // [TokenAttribute] Offset: FFFFFFFF
  class FrameTimeSampleHistory : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Rendering::FrameTimeSampleHistory::$$c
    class $$c;
    public:
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.FrameTimeSample> m_Samples
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::FrameTimeSample>* m_Samples;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::FrameTimeSample>*) == 0x8);
    // UnityEngine.Rendering.FrameTimeSample SampleAverage
    // Size: 0x18
    // Offset: 0x18
    ::UnityEngine::Rendering::FrameTimeSample SampleAverage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::FrameTimeSample) == 0x18);
    // UnityEngine.Rendering.FrameTimeSample SampleMin
    // Size: 0x18
    // Offset: 0x30
    ::UnityEngine::Rendering::FrameTimeSample SampleMin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::FrameTimeSample) == 0x18);
    // UnityEngine.Rendering.FrameTimeSample SampleMax
    // Size: 0x18
    // Offset: 0x48
    ::UnityEngine::Rendering::FrameTimeSample SampleMax;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::FrameTimeSample) == 0x18);
    public:
    // Get static field: static private System.Func`3<System.Single,System.Single,System.Single> s_SampleValueAdd
    static ::System::Func_3<float, float, float>* _get_s_SampleValueAdd();
    // Set static field: static private System.Func`3<System.Single,System.Single,System.Single> s_SampleValueAdd
    static void _set_s_SampleValueAdd(::System::Func_3<float, float, float>* value);
    // Get static field: static private System.Func`3<System.Single,System.Single,System.Single> s_SampleValueMin
    static ::System::Func_3<float, float, float>* _get_s_SampleValueMin();
    // Set static field: static private System.Func`3<System.Single,System.Single,System.Single> s_SampleValueMin
    static void _set_s_SampleValueMin(::System::Func_3<float, float, float>* value);
    // Get static field: static private System.Func`3<System.Single,System.Single,System.Single> s_SampleValueMax
    static ::System::Func_3<float, float, float>* _get_s_SampleValueMax();
    // Set static field: static private System.Func`3<System.Single,System.Single,System.Single> s_SampleValueMax
    static void _set_s_SampleValueMax(::System::Func_3<float, float, float>* value);
    // Get static field: static private System.Func`3<System.Single,System.Single,System.Single> s_SampleValueCountValid
    static ::System::Func_3<float, float, float>* _get_s_SampleValueCountValid();
    // Set static field: static private System.Func`3<System.Single,System.Single,System.Single> s_SampleValueCountValid
    static void _set_s_SampleValueCountValid(::System::Func_3<float, float, float>* value);
    // Get static field: static private System.Func`3<System.Single,System.Single,System.Single> s_SampleValueEnsureValid
    static ::System::Func_3<float, float, float>* _get_s_SampleValueEnsureValid();
    // Set static field: static private System.Func`3<System.Single,System.Single,System.Single> s_SampleValueEnsureValid
    static void _set_s_SampleValueEnsureValid(::System::Func_3<float, float, float>* value);
    // Get static field: static private System.Func`3<System.Single,System.Single,System.Single> s_SampleValueDivide
    static ::System::Func_3<float, float, float>* _get_s_SampleValueDivide();
    // Set static field: static private System.Func`3<System.Single,System.Single,System.Single> s_SampleValueDivide
    static void _set_s_SampleValueDivide(::System::Func_3<float, float, float>* value);
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.FrameTimeSample> m_Samples
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::FrameTimeSample>*& dyn_m_Samples();
    // Get instance field reference: UnityEngine.Rendering.FrameTimeSample SampleAverage
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::FrameTimeSample& dyn_SampleAverage();
    // Get instance field reference: UnityEngine.Rendering.FrameTimeSample SampleMin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::FrameTimeSample& dyn_SampleMin();
    // Get instance field reference: UnityEngine.Rendering.FrameTimeSample SampleMax
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::FrameTimeSample& dyn_SampleMax();
    // public System.Void .ctor(System.Int32 initialCapacity)
    // Offset: 0x5243DEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FrameTimeSampleHistory* New_ctor(int initialCapacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::FrameTimeSampleHistory::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FrameTimeSampleHistory*, creationType>(initialCapacity)));
    }
    // System.Void Add(UnityEngine.Rendering.FrameTimeSample sample)
    // Offset: 0x52441EC
    void Add(::UnityEngine::Rendering::FrameTimeSample sample);
    // System.Void ComputeAggregateValues()
    // Offset: 0x52442D4
    void ComputeAggregateValues();
    // System.Void DiscardOldSamples(System.Int32 sampleHistorySize)
    // Offset: 0x524414C
    void DiscardOldSamples(int sampleHistorySize);
    // static private System.Void .cctor()
    // Offset: 0x524BEA4
    static void _cctor();
    // static System.Void <ComputeAggregateValues>g__ForEachSampleMember|12_0(ref UnityEngine.Rendering.FrameTimeSample aggregate, UnityEngine.Rendering.FrameTimeSample sample, System.Func`3<System.Single,System.Single,System.Single> func)
    // Offset: 0x524BDD4
    static void $ComputeAggregateValues$g__ForEachSampleMember_12_0(ByRef<::UnityEngine::Rendering::FrameTimeSample> aggregate, ::UnityEngine::Rendering::FrameTimeSample sample, ::System::Func_3<float, float, float>* func);
  }; // UnityEngine.Rendering.FrameTimeSampleHistory
  #pragma pack(pop)
  static check_size<sizeof(FrameTimeSampleHistory), 72 + sizeof(::UnityEngine::Rendering::FrameTimeSample)> __UnityEngine_Rendering_FrameTimeSampleHistorySizeCheck;
  static_assert(sizeof(FrameTimeSampleHistory) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::FrameTimeSampleHistory::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::FrameTimeSampleHistory::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::FrameTimeSampleHistory::*)(::UnityEngine::Rendering::FrameTimeSample)>(&UnityEngine::Rendering::FrameTimeSampleHistory::Add)> {
  static const MethodInfo* get() {
    static auto* sample = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "FrameTimeSample")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::FrameTimeSampleHistory*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sample});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::FrameTimeSampleHistory::ComputeAggregateValues
// Il2CppName: ComputeAggregateValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::FrameTimeSampleHistory::*)()>(&UnityEngine::Rendering::FrameTimeSampleHistory::ComputeAggregateValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::FrameTimeSampleHistory*), "ComputeAggregateValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::FrameTimeSampleHistory::DiscardOldSamples
// Il2CppName: DiscardOldSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::FrameTimeSampleHistory::*)(int)>(&UnityEngine::Rendering::FrameTimeSampleHistory::DiscardOldSamples)> {
  static const MethodInfo* get() {
    static auto* sampleHistorySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::FrameTimeSampleHistory*), "DiscardOldSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sampleHistorySize});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::FrameTimeSampleHistory::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::FrameTimeSampleHistory::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::FrameTimeSampleHistory*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::FrameTimeSampleHistory::$ComputeAggregateValues$g__ForEachSampleMember_12_0
// Il2CppName: <ComputeAggregateValues>g__ForEachSampleMember|12_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Rendering::FrameTimeSample>, ::UnityEngine::Rendering::FrameTimeSample, ::System::Func_3<float, float, float>*)>(&UnityEngine::Rendering::FrameTimeSampleHistory::$ComputeAggregateValues$g__ForEachSampleMember_12_0)> {
  static const MethodInfo* get() {
    static auto* aggregate = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "FrameTimeSample")->this_arg;
    static auto* sample = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "FrameTimeSample")->byval_arg;
    static auto* func = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::FrameTimeSampleHistory*), "<ComputeAggregateValues>g__ForEachSampleMember|12_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aggregate, sample, func});
  }
};
