// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  struct ValueTuple_3;
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ColorUtils
  class ColorUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::ColorUtils);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::ColorUtils*, "UnityEngine.Rendering", "ColorUtils");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.ColorUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class ColorUtils : public ::Il2CppObject {
    public:
    // Get static field: static public System.Single s_LightMeterCalibrationConstant
    static float _get_s_LightMeterCalibrationConstant();
    // Set static field: static public System.Single s_LightMeterCalibrationConstant
    static void _set_s_LightMeterCalibrationConstant(float value);
    // Get static field: static public System.Single s_LensAttenuation
    static float _get_s_LensAttenuation();
    // Set static field: static public System.Single s_LensAttenuation
    static void _set_s_LensAttenuation(float value);
    // static public System.Single StandardIlluminantY(System.Single x)
    // Offset: 0x525B3B4
    static float StandardIlluminantY(float x);
    // static public UnityEngine.Vector3 CIExyToLMS(System.Single x, System.Single y)
    // Offset: 0x525B3E0
    static ::UnityEngine::Vector3 CIExyToLMS(float x, float y);
    // static public UnityEngine.Vector3 ColorBalanceToLMSCoeffs(System.Single temperature, System.Single tint)
    // Offset: 0x525B470
    static ::UnityEngine::Vector3 ColorBalanceToLMSCoeffs(float temperature, float tint);
    // static public System.ValueTuple`3<UnityEngine.Vector4,UnityEngine.Vector4,UnityEngine.Vector4> PrepareShadowsMidtonesHighlights(in UnityEngine.Vector4 inShadows, in UnityEngine.Vector4 inMidtones, in UnityEngine.Vector4 inHighlights)
    // Offset: 0x525B5D4
    static ::System::ValueTuple_3<::UnityEngine::Vector4, ::UnityEngine::Vector4, ::UnityEngine::Vector4> PrepareShadowsMidtonesHighlights(ByRef<::UnityEngine::Vector4> inShadows, ByRef<::UnityEngine::Vector4> inMidtones, ByRef<::UnityEngine::Vector4> inHighlights);
    // static public System.ValueTuple`3<UnityEngine.Vector4,UnityEngine.Vector4,UnityEngine.Vector4> PrepareLiftGammaGain(in UnityEngine.Vector4 inLift, in UnityEngine.Vector4 inGamma, in UnityEngine.Vector4 inGain)
    // Offset: 0x525B7DC
    static ::System::ValueTuple_3<::UnityEngine::Vector4, ::UnityEngine::Vector4, ::UnityEngine::Vector4> PrepareLiftGammaGain(ByRef<::UnityEngine::Vector4> inLift, ByRef<::UnityEngine::Vector4> inGamma, ByRef<::UnityEngine::Vector4> inGain);
    // static public System.ValueTuple`2<UnityEngine.Vector4,UnityEngine.Vector4> PrepareSplitToning(in UnityEngine.Vector4 inShadows, in UnityEngine.Vector4 inHighlights, System.Single balance)
    // Offset: 0x525BA88
    static ::System::ValueTuple_2<::UnityEngine::Vector4, ::UnityEngine::Vector4> PrepareSplitToning(ByRef<::UnityEngine::Vector4> inShadows, ByRef<::UnityEngine::Vector4> inHighlights, float balance);
    // static public System.Single Luminance(in UnityEngine.Color color)
    // Offset: 0x525BA50
    static float Luminance(ByRef<::UnityEngine::Color> color);
    // static private System.Void .cctor()
    // Offset: 0x525BB14
    static void _cctor();
  }; // UnityEngine.Rendering.ColorUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::ColorUtils::StandardIlluminantY
// Il2CppName: StandardIlluminantY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&UnityEngine::Rendering::ColorUtils::StandardIlluminantY)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ColorUtils*), "StandardIlluminantY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::ColorUtils::CIExyToLMS
// Il2CppName: CIExyToLMS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(float, float)>(&UnityEngine::Rendering::ColorUtils::CIExyToLMS)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ColorUtils*), "CIExyToLMS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::ColorUtils::ColorBalanceToLMSCoeffs
// Il2CppName: ColorBalanceToLMSCoeffs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(float, float)>(&UnityEngine::Rendering::ColorUtils::ColorBalanceToLMSCoeffs)> {
  static const MethodInfo* get() {
    static auto* temperature = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tint = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ColorUtils*), "ColorBalanceToLMSCoeffs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{temperature, tint});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::ColorUtils::PrepareShadowsMidtonesHighlights
// Il2CppName: PrepareShadowsMidtonesHighlights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_3<::UnityEngine::Vector4, ::UnityEngine::Vector4, ::UnityEngine::Vector4> (*)(ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>)>(&UnityEngine::Rendering::ColorUtils::PrepareShadowsMidtonesHighlights)> {
  static const MethodInfo* get() {
    static auto* inShadows = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* inMidtones = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* inHighlights = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ColorUtils*), "PrepareShadowsMidtonesHighlights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inShadows, inMidtones, inHighlights});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::ColorUtils::PrepareLiftGammaGain
// Il2CppName: PrepareLiftGammaGain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_3<::UnityEngine::Vector4, ::UnityEngine::Vector4, ::UnityEngine::Vector4> (*)(ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>)>(&UnityEngine::Rendering::ColorUtils::PrepareLiftGammaGain)> {
  static const MethodInfo* get() {
    static auto* inLift = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* inGamma = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* inGain = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ColorUtils*), "PrepareLiftGammaGain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inLift, inGamma, inGain});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::ColorUtils::PrepareSplitToning
// Il2CppName: PrepareSplitToning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::UnityEngine::Vector4, ::UnityEngine::Vector4> (*)(ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, float)>(&UnityEngine::Rendering::ColorUtils::PrepareSplitToning)> {
  static const MethodInfo* get() {
    static auto* inShadows = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* inHighlights = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* balance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ColorUtils*), "PrepareSplitToning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inShadows, inHighlights, balance});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::ColorUtils::Luminance
// Il2CppName: Luminance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(ByRef<::UnityEngine::Color>)>(&UnityEngine::Rendering::ColorUtils::Luminance)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ColorUtils*), "Luminance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::ColorUtils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::ColorUtils::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ColorUtils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
