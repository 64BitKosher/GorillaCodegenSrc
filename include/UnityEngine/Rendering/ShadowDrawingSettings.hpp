// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Rendering.CullingResults
#include "UnityEngine/Rendering/CullingResults.hpp"
// Including type: UnityEngine.Rendering.ShadowSplitData
#include "UnityEngine/Rendering/ShadowSplitData.hpp"
// Including type: UnityEngine.ShadowObjectsFilter
#include "UnityEngine/ShadowObjectsFilter.hpp"
// Including type: UnityEngine.Rendering.BatchCullingProjectionType
#include "UnityEngine/Rendering/BatchCullingProjectionType.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ShadowDrawingSettings
  struct ShadowDrawingSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::ShadowDrawingSettings, "UnityEngine.Rendering", "ShadowDrawingSettings");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x11C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.ShadowDrawingSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  struct ShadowDrawingSettings/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::Rendering::ShadowDrawingSettings>*/ {
    public:
    public:
    // private UnityEngine.Rendering.CullingResults m_CullingResults
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Rendering::CullingResults m_CullingResults;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CullingResults) == 0x10);
    // private System.Int32 m_LightIndex
    // Size: 0x4
    // Offset: 0x10
    int m_LightIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_UseRenderingLayerMaskTest
    // Size: 0x4
    // Offset: 0x14
    int m_UseRenderingLayerMaskTest;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rendering.ShadowSplitData m_SplitData
    // Size: 0xFC
    // Offset: 0x18
    ::UnityEngine::Rendering::ShadowSplitData m_SplitData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ShadowSplitData) == 0xFC);
    // private UnityEngine.ShadowObjectsFilter m_ObjectsFilter
    // Size: 0x4
    // Offset: 0x114
    ::UnityEngine::ShadowObjectsFilter m_ObjectsFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::ShadowObjectsFilter) == 0x4);
    // private UnityEngine.Rendering.BatchCullingProjectionType m_ProjectionType
    // Size: 0x4
    // Offset: 0x118
    ::UnityEngine::Rendering::BatchCullingProjectionType m_ProjectionType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::BatchCullingProjectionType) == 0x4);
    public:
    // Creating value type constructor for type: ShadowDrawingSettings
    constexpr ShadowDrawingSettings(::UnityEngine::Rendering::CullingResults m_CullingResults_ = {}, int m_LightIndex_ = {}, int m_UseRenderingLayerMaskTest_ = {}, ::UnityEngine::Rendering::ShadowSplitData m_SplitData_ = {}, ::UnityEngine::ShadowObjectsFilter m_ObjectsFilter_ = {}, ::UnityEngine::Rendering::BatchCullingProjectionType m_ProjectionType_ = {}) noexcept : m_CullingResults{m_CullingResults_}, m_LightIndex{m_LightIndex_}, m_UseRenderingLayerMaskTest{m_UseRenderingLayerMaskTest_}, m_SplitData{m_SplitData_}, m_ObjectsFilter{m_ObjectsFilter_}, m_ProjectionType{m_ProjectionType_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Rendering::ShadowDrawingSettings>
    operator ::System::IEquatable_1<::UnityEngine::Rendering::ShadowDrawingSettings>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Rendering::ShadowDrawingSettings>*>(this);
    }
    // Get instance field reference: private UnityEngine.Rendering.CullingResults m_CullingResults
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CullingResults& dyn_m_CullingResults();
    // Get instance field reference: private System.Int32 m_LightIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_LightIndex();
    // Get instance field reference: private System.Int32 m_UseRenderingLayerMaskTest
    [[deprecated("Use field access instead!")]] int& dyn_m_UseRenderingLayerMaskTest();
    // Get instance field reference: private UnityEngine.Rendering.ShadowSplitData m_SplitData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ShadowSplitData& dyn_m_SplitData();
    // Get instance field reference: private UnityEngine.ShadowObjectsFilter m_ObjectsFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::ShadowObjectsFilter& dyn_m_ObjectsFilter();
    // Get instance field reference: private UnityEngine.Rendering.BatchCullingProjectionType m_ProjectionType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::BatchCullingProjectionType& dyn_m_ProjectionType();
    // public System.Void set_useRenderingLayerMaskTest(System.Boolean value)
    // Offset: 0x54ED598
    void set_useRenderingLayerMaskTest(bool value);
    // public System.Void set_splitData(UnityEngine.Rendering.ShadowSplitData value)
    // Offset: 0x54ED5A4
    void set_splitData(::UnityEngine::Rendering::ShadowSplitData value);
    // public System.Void .ctor(UnityEngine.Rendering.CullingResults cullingResults, System.Int32 lightIndex, UnityEngine.Rendering.BatchCullingProjectionType projectionType)
    // Offset: 0x54ED5BC
    ShadowDrawingSettings(::UnityEngine::Rendering::CullingResults cullingResults, int lightIndex, ::UnityEngine::Rendering::BatchCullingProjectionType projectionType);
    // public System.Boolean Equals(UnityEngine.Rendering.ShadowDrawingSettings other)
    // Offset: 0x54ED6F4
    bool Equals(::UnityEngine::Rendering::ShadowDrawingSettings other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x54ED964
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x54EDA1C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Rendering.ShadowDrawingSettings
  #pragma pack(pop)
  static check_size<sizeof(ShadowDrawingSettings), 280 + sizeof(::UnityEngine::Rendering::BatchCullingProjectionType)> __UnityEngine_Rendering_ShadowDrawingSettingsSizeCheck;
  static_assert(sizeof(ShadowDrawingSettings) == 0x11C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::ShadowDrawingSettings::set_useRenderingLayerMaskTest
// Il2CppName: set_useRenderingLayerMaskTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::ShadowDrawingSettings::*)(bool)>(&UnityEngine::Rendering::ShadowDrawingSettings::set_useRenderingLayerMaskTest)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ShadowDrawingSettings), "set_useRenderingLayerMaskTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::ShadowDrawingSettings::set_splitData
// Il2CppName: set_splitData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::ShadowDrawingSettings::*)(::UnityEngine::Rendering::ShadowSplitData)>(&UnityEngine::Rendering::ShadowDrawingSettings::set_splitData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShadowSplitData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ShadowDrawingSettings), "set_splitData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::ShadowDrawingSettings::ShadowDrawingSettings
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::ShadowDrawingSettings::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::ShadowDrawingSettings::*)(::UnityEngine::Rendering::ShadowDrawingSettings)>(&UnityEngine::Rendering::ShadowDrawingSettings::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShadowDrawingSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ShadowDrawingSettings), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::ShadowDrawingSettings::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::ShadowDrawingSettings::*)(::Il2CppObject*)>(&UnityEngine::Rendering::ShadowDrawingSettings::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ShadowDrawingSettings), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::ShadowDrawingSettings::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::ShadowDrawingSettings::*)()>(&UnityEngine::Rendering::ShadowDrawingSettings::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::ShadowDrawingSettings), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
