// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: DynamicArray`1<T>
  template<typename T>
  class DynamicArray_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::Rendering::DynamicArray_1, "UnityEngine.Rendering", "DynamicArray`1");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.DynamicArray`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  template<typename T>
  class DynamicArray_1 : public ::Il2CppObject {
    public:
    public:
    // private T[] m_Array
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> m_Array;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private System.Int32 <size>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Autogenerated instance field getter
    // Get instance field: private T[] m_Array
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_m_Array() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DynamicArray_1::dyn_m_Array");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Array"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <size>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$size$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DynamicArray_1::dyn_$size$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<size>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_size()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_size() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DynamicArray_1::get_size");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_size", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Void set_size(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_size(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DynamicArray_1::set_size");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_size", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_capacity()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_capacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DynamicArray_1::get_capacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_capacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DynamicArray_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DynamicArray_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DynamicArray_1<T>*, creationType>()));
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DynamicArray_1::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Resize(System.Int32 newSize, System.Boolean keepContent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Resize(int newSize, bool keepContent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DynamicArray_1::Resize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newSize), ::il2cpp_utils::ExtractType(keepContent)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newSize, keepContent);
    }
    // public System.Void Reserve(System.Int32 newCapacity, System.Boolean keepContent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Reserve(int newCapacity, bool keepContent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DynamicArray_1::Reserve");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reserve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newCapacity), ::il2cpp_utils::ExtractType(keepContent)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newCapacity, keepContent);
    }
    // public T get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DynamicArray_1::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // System.Void BumpVersion()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void BumpVersion() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DynamicArray_1::BumpVersion");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BumpVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // UnityEngine.Rendering.DynamicArray`1
  // Could not write size check! Type: UnityEngine.Rendering.DynamicArray`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
