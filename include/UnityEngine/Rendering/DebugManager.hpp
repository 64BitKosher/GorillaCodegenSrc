// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.DebugUI
#include "UnityEngine/Rendering/DebugUI.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: DebugActionDesc
  class DebugActionDesc;
  // Forward declaring type: DebugActionState
  class DebugActionState;
  // Forward declaring type: DebugAction
  struct DebugAction;
  // Forward declaring type: IDebugData
  class IDebugData;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputActionMap
  class InputActionMap;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Lazy`1<T>
  template<typename T>
  class Lazy_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: UnityEngine::Rendering::UI
namespace UnityEngine::Rendering::UI {
  // Forward declaring type: DebugUIHandlerCanvas
  class DebugUIHandlerCanvas;
  // Forward declaring type: DebugUIHandlerPersistentCanvas
  class DebugUIHandlerPersistentCanvas;
  // Forward declaring type: DebugUIHandlerWidget
  class DebugUIHandlerWidget;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: DebugManager
  class DebugManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::DebugManager);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::DebugManager*, "UnityEngine.Rendering", "DebugManager");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.DebugManager
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugManager : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Rendering::DebugManager::$$c
    class $$c;
    public:
    // private UnityEngine.Rendering.DebugActionDesc[] m_DebugActions
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Rendering::DebugActionDesc*> m_DebugActions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::DebugActionDesc*>) == 0x8);
    // private UnityEngine.Rendering.DebugActionState[] m_DebugActionStates
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Rendering::DebugActionState*> m_DebugActionStates;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::DebugActionState*>) == 0x8);
    // private UnityEngine.InputSystem.InputActionMap debugActionMap
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::InputSystem::InputActionMap* debugActionMap;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionMap*) == 0x8);
    // private System.Collections.ObjectModel.ReadOnlyCollection`1<UnityEngine.Rendering.DebugUI/Panel> m_ReadOnlyPanels
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::UnityEngine::Rendering::DebugUI::Panel*>* m_ReadOnlyPanels;
    // Field size check
    static_assert(sizeof(::System::Collections::ObjectModel::ReadOnlyCollection_1<::UnityEngine::Rendering::DebugUI::Panel*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<UnityEngine.Rendering.DebugUI/Panel> m_Panels
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::DebugUI::Panel*>* m_Panels;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::DebugUI::Panel*>*) == 0x8);
    // private System.Action`1<System.Boolean> onDisplayRuntimeUIChanged
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_1<bool>* onDisplayRuntimeUIChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    // private System.Action onSetDirty
    // Size: 0x8
    // Offset: 0x40
    ::System::Action* onSetDirty;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action resetData
    // Size: 0x8
    // Offset: 0x48
    ::System::Action* resetData;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Boolean refreshEditorRequested
    // Size: 0x1
    // Offset: 0x50
    bool refreshEditorRequested;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Nullable`1<System.Int32> m_RequestedPanelIndex
    // Size: 0xFFFFFFFF
    // Offset: 0x54
    ::System::Nullable_1<int> m_RequestedPanelIndex;
    // private UnityEngine.GameObject m_Root
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* m_Root;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Rendering.UI.DebugUIHandlerCanvas m_RootUICanvas
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Rendering::UI::DebugUIHandlerCanvas* m_RootUICanvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::UI::DebugUIHandlerCanvas*) == 0x8);
    // private UnityEngine.GameObject m_PersistentRoot
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* m_PersistentRoot;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Rendering.UI.DebugUIHandlerPersistentCanvas m_RootUIPersistentCanvas
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas* m_RootUIPersistentCanvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas*) == 0x8);
    // private System.Boolean m_EnableRuntimeUI
    // Size: 0x1
    // Offset: 0x80
    bool m_EnableRuntimeUI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly System.Lazy`1<UnityEngine.Rendering.DebugManager> s_Instance
    static ::System::Lazy_1<::UnityEngine::Rendering::DebugManager*>* _get_s_Instance();
    // Set static field: static private readonly System.Lazy`1<UnityEngine.Rendering.DebugManager> s_Instance
    static void _set_s_Instance(::System::Lazy_1<::UnityEngine::Rendering::DebugManager*>* value);
    // Get instance field reference: private UnityEngine.Rendering.DebugActionDesc[] m_DebugActions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::DebugActionDesc*>& dyn_m_DebugActions();
    // Get instance field reference: private UnityEngine.Rendering.DebugActionState[] m_DebugActionStates
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::DebugActionState*>& dyn_m_DebugActionStates();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionMap debugActionMap
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionMap*& dyn_debugActionMap();
    // Get instance field reference: private System.Collections.ObjectModel.ReadOnlyCollection`1<UnityEngine.Rendering.DebugUI/Panel> m_ReadOnlyPanels
    [[deprecated("Use field access instead!")]] ::System::Collections::ObjectModel::ReadOnlyCollection_1<::UnityEngine::Rendering::DebugUI::Panel*>*& dyn_m_ReadOnlyPanels();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.Rendering.DebugUI/Panel> m_Panels
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::DebugUI::Panel*>*& dyn_m_Panels();
    // Get instance field reference: private System.Action`1<System.Boolean> onDisplayRuntimeUIChanged
    [[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& dyn_onDisplayRuntimeUIChanged();
    // Get instance field reference: private System.Action onSetDirty
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_onSetDirty();
    // Get instance field reference: private System.Action resetData
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_resetData();
    // Get instance field reference: public System.Boolean refreshEditorRequested
    [[deprecated("Use field access instead!")]] bool& dyn_refreshEditorRequested();
    // Get instance field reference: private System.Nullable`1<System.Int32> m_RequestedPanelIndex
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& dyn_m_RequestedPanelIndex();
    // Get instance field reference: private UnityEngine.GameObject m_Root
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_Root();
    // Get instance field reference: private UnityEngine.Rendering.UI.DebugUIHandlerCanvas m_RootUICanvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::UI::DebugUIHandlerCanvas*& dyn_m_RootUICanvas();
    // Get instance field reference: private UnityEngine.GameObject m_PersistentRoot
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_PersistentRoot();
    // Get instance field reference: private UnityEngine.Rendering.UI.DebugUIHandlerPersistentCanvas m_RootUIPersistentCanvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas*& dyn_m_RootUIPersistentCanvas();
    // Get instance field reference: private System.Boolean m_EnableRuntimeUI
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableRuntimeUI();
    // System.Void EnableInputActions()
    // Offset: 0x52464D0
    void EnableInputActions();
    // private System.Void SampleAction(System.Int32 actionIndex)
    // Offset: 0x524673C
    void SampleAction(int actionIndex);
    // private System.Void UpdateAction(System.Int32 actionIndex)
    // Offset: 0x52468EC
    void UpdateAction(int actionIndex);
    // System.Void UpdateActions()
    // Offset: 0x5246B28
    void UpdateActions();
    // System.Single GetAction(UnityEngine.Rendering.DebugAction action)
    // Offset: 0x5246B80
    float GetAction(::UnityEngine::Rendering::DebugAction action);
    // System.Boolean GetActionToggleDebugMenuWithTouch()
    // Offset: 0x5246BB8
    bool GetActionToggleDebugMenuWithTouch();
    // System.Boolean GetActionReleaseScrollTarget()
    // Offset: 0x5246E14
    bool GetActionReleaseScrollTarget();
    // static public UnityEngine.Rendering.DebugManager get_instance()
    // Offset: 0x5243A4C
    static ::UnityEngine::Rendering::DebugManager* get_instance();
    // private System.Void UpdateReadOnlyCollection()
    // Offset: 0x5246F4C
    void UpdateReadOnlyCollection();
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<UnityEngine.Rendering.DebugUI/Panel> get_panels()
    // Offset: 0x5246FD0
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::UnityEngine::Rendering::DebugUI::Panel*>* get_panels();
    // private System.Void add_resetData(System.Action value)
    // Offset: 0x5246FF4
    void add_resetData(::System::Action* value);
    // private System.Void remove_resetData(System.Action value)
    // Offset: 0x5247090
    void remove_resetData(::System::Action* value);
    // public System.Boolean get_displayRuntimeUI()
    // Offset: 0x524712C
    bool get_displayRuntimeUI();
    // public System.Void set_displayRuntimeUI(System.Boolean value)
    // Offset: 0x52471B4
    void set_displayRuntimeUI(bool value);
    // public System.Void set_displayPersistentRuntimeUI(System.Boolean value)
    // Offset: 0x52474D8
    void set_displayPersistentRuntimeUI(bool value);
    // private System.Void .ctor()
    // Offset: 0x52477A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugManager*, creationType>()));
    }
    // public System.Void RefreshEditor()
    // Offset: 0x52479DC
    void RefreshEditor();
    // public System.Void Reset()
    // Offset: 0x52479E8
    void Reset();
    // public System.Void ReDrawOnScreenDebug()
    // Offset: 0x5243CB8
    void ReDrawOnScreenDebug();
    // public System.Void RegisterData(UnityEngine.Rendering.IDebugData data)
    // Offset: 0x5247A14
    void RegisterData(::UnityEngine::Rendering::IDebugData* data);
    // public System.Void UnregisterData(UnityEngine.Rendering.IDebugData data)
    // Offset: 0x5247AC0
    void UnregisterData(::UnityEngine::Rendering::IDebugData* data);
    // public System.Int32 GetState()
    // Offset: 0x5247B6C
    int GetState();
    // System.Void RegisterRootCanvas(UnityEngine.Rendering.UI.DebugUIHandlerCanvas root)
    // Offset: 0x5247CD4
    void RegisterRootCanvas(::UnityEngine::Rendering::UI::DebugUIHandlerCanvas* root);
    // System.Void SetScrollTarget(UnityEngine.Rendering.UI.DebugUIHandlerWidget widget)
    // Offset: 0x5247D20
    void SetScrollTarget(::UnityEngine::Rendering::UI::DebugUIHandlerWidget* widget);
    // private System.Void EnsurePersistentCanvas()
    // Offset: 0x5247574
    void EnsurePersistentCanvas();
    // System.Void TogglePersistent(UnityEngine.Rendering.DebugUI/Widget widget, System.Nullable`1<System.Int32> forceTupleIndex)
    // Offset: 0x5247DB8
    void TogglePersistent(::UnityEngine::Rendering::DebugUI::Widget* widget, ::System::Nullable_1<int> forceTupleIndex);
    // private System.Void OnPanelDirty(UnityEngine.Rendering.DebugUI/Panel panel)
    // Offset: 0x5248328
    void OnPanelDirty(::UnityEngine::Rendering::DebugUI::Panel* panel);
    // public System.Int32 PanelIndex(System.String displayName)
    // Offset: 0x524834C
    int PanelIndex(::StringW displayName);
    // public System.Void RequestEditorWindowPanelIndex(System.Int32 index)
    // Offset: 0x5248424
    void RequestEditorWindowPanelIndex(int index);
    // public UnityEngine.Rendering.DebugUI/Panel GetPanel(System.String displayName, System.Boolean createIfNull, System.Int32 groupIndex, System.Boolean overrideIfExist)
    // Offset: 0x5243AC4
    ::UnityEngine::Rendering::DebugUI::Panel* GetPanel(::StringW displayName, bool createIfNull, int groupIndex, bool overrideIfExist);
    // public System.Void RemovePanel(UnityEngine.Rendering.DebugUI/Panel panel)
    // Offset: 0x524853C
    void RemovePanel(::UnityEngine::Rendering::DebugUI::Panel* panel);
    // public UnityEngine.Rendering.DebugUI/Widget[] GetItems(UnityEngine.Rendering.DebugUI/Flags flags)
    // Offset: 0x5248850
    ::ArrayW<::UnityEngine::Rendering::DebugUI::Widget*> GetItems(::UnityEngine::Rendering::DebugUI::Flags flags);
    // UnityEngine.Rendering.DebugUI/Widget[] GetItemsFromContainer(UnityEngine.Rendering.DebugUI/Flags flags, UnityEngine.Rendering.DebugUI/IContainer container)
    // Offset: 0x5248AF4
    ::ArrayW<::UnityEngine::Rendering::DebugUI::Widget*> GetItemsFromContainer(::UnityEngine::Rendering::DebugUI::Flags flags, ::UnityEngine::Rendering::DebugUI::IContainer* container);
    // static private System.Void .cctor()
    // Offset: 0x5249040
    static void _cctor();
  }; // UnityEngine.Rendering.DebugManager
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::EnableInputActions
// Il2CppName: EnableInputActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)()>(&UnityEngine::Rendering::DebugManager::EnableInputActions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "EnableInputActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::SampleAction
// Il2CppName: SampleAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)(int)>(&UnityEngine::Rendering::DebugManager::SampleAction)> {
  static const MethodInfo* get() {
    static auto* actionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "SampleAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actionIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::UpdateAction
// Il2CppName: UpdateAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)(int)>(&UnityEngine::Rendering::DebugManager::UpdateAction)> {
  static const MethodInfo* get() {
    static auto* actionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "UpdateAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actionIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::UpdateActions
// Il2CppName: UpdateActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)()>(&UnityEngine::Rendering::DebugManager::UpdateActions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "UpdateActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::GetAction
// Il2CppName: GetAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::DebugManager::*)(::UnityEngine::Rendering::DebugAction)>(&UnityEngine::Rendering::DebugManager::GetAction)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "GetAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::GetActionToggleDebugMenuWithTouch
// Il2CppName: GetActionToggleDebugMenuWithTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::DebugManager::*)()>(&UnityEngine::Rendering::DebugManager::GetActionToggleDebugMenuWithTouch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "GetActionToggleDebugMenuWithTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::GetActionReleaseScrollTarget
// Il2CppName: GetActionReleaseScrollTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::DebugManager::*)()>(&UnityEngine::Rendering::DebugManager::GetActionReleaseScrollTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "GetActionReleaseScrollTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::DebugManager* (*)()>(&UnityEngine::Rendering::DebugManager::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::UpdateReadOnlyCollection
// Il2CppName: UpdateReadOnlyCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)()>(&UnityEngine::Rendering::DebugManager::UpdateReadOnlyCollection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "UpdateReadOnlyCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::get_panels
// Il2CppName: get_panels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::UnityEngine::Rendering::DebugUI::Panel*>* (UnityEngine::Rendering::DebugManager::*)()>(&UnityEngine::Rendering::DebugManager::get_panels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "get_panels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::add_resetData
// Il2CppName: add_resetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)(::System::Action*)>(&UnityEngine::Rendering::DebugManager::add_resetData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "add_resetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::remove_resetData
// Il2CppName: remove_resetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)(::System::Action*)>(&UnityEngine::Rendering::DebugManager::remove_resetData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "remove_resetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::get_displayRuntimeUI
// Il2CppName: get_displayRuntimeUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::DebugManager::*)()>(&UnityEngine::Rendering::DebugManager::get_displayRuntimeUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "get_displayRuntimeUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::set_displayRuntimeUI
// Il2CppName: set_displayRuntimeUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)(bool)>(&UnityEngine::Rendering::DebugManager::set_displayRuntimeUI)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "set_displayRuntimeUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::set_displayPersistentRuntimeUI
// Il2CppName: set_displayPersistentRuntimeUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)(bool)>(&UnityEngine::Rendering::DebugManager::set_displayPersistentRuntimeUI)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "set_displayPersistentRuntimeUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::RefreshEditor
// Il2CppName: RefreshEditor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)()>(&UnityEngine::Rendering::DebugManager::RefreshEditor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "RefreshEditor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)()>(&UnityEngine::Rendering::DebugManager::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::ReDrawOnScreenDebug
// Il2CppName: ReDrawOnScreenDebug
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)()>(&UnityEngine::Rendering::DebugManager::ReDrawOnScreenDebug)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "ReDrawOnScreenDebug", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::RegisterData
// Il2CppName: RegisterData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)(::UnityEngine::Rendering::IDebugData*)>(&UnityEngine::Rendering::DebugManager::RegisterData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "IDebugData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "RegisterData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::UnregisterData
// Il2CppName: UnregisterData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)(::UnityEngine::Rendering::IDebugData*)>(&UnityEngine::Rendering::DebugManager::UnregisterData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "IDebugData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "UnregisterData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::GetState
// Il2CppName: GetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::DebugManager::*)()>(&UnityEngine::Rendering::DebugManager::GetState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "GetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::RegisterRootCanvas
// Il2CppName: RegisterRootCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)(::UnityEngine::Rendering::UI::DebugUIHandlerCanvas*)>(&UnityEngine::Rendering::DebugManager::RegisterRootCanvas)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.UI", "DebugUIHandlerCanvas")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "RegisterRootCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::SetScrollTarget
// Il2CppName: SetScrollTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)(::UnityEngine::Rendering::UI::DebugUIHandlerWidget*)>(&UnityEngine::Rendering::DebugManager::SetScrollTarget)> {
  static const MethodInfo* get() {
    static auto* widget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.UI", "DebugUIHandlerWidget")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "SetScrollTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{widget});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::EnsurePersistentCanvas
// Il2CppName: EnsurePersistentCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)()>(&UnityEngine::Rendering::DebugManager::EnsurePersistentCanvas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "EnsurePersistentCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::TogglePersistent
// Il2CppName: TogglePersistent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)(::UnityEngine::Rendering::DebugUI::Widget*, ::System::Nullable_1<int>)>(&UnityEngine::Rendering::DebugManager::TogglePersistent)> {
  static const MethodInfo* get() {
    static auto* widget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/Widget")->byval_arg;
    static auto* forceTupleIndex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "TogglePersistent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{widget, forceTupleIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::OnPanelDirty
// Il2CppName: OnPanelDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)(::UnityEngine::Rendering::DebugUI::Panel*)>(&UnityEngine::Rendering::DebugManager::OnPanelDirty)> {
  static const MethodInfo* get() {
    static auto* panel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/Panel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "OnPanelDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{panel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::PanelIndex
// Il2CppName: PanelIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::DebugManager::*)(::StringW)>(&UnityEngine::Rendering::DebugManager::PanelIndex)> {
  static const MethodInfo* get() {
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "PanelIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayName});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::RequestEditorWindowPanelIndex
// Il2CppName: RequestEditorWindowPanelIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)(int)>(&UnityEngine::Rendering::DebugManager::RequestEditorWindowPanelIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "RequestEditorWindowPanelIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::GetPanel
// Il2CppName: GetPanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::DebugUI::Panel* (UnityEngine::Rendering::DebugManager::*)(::StringW, bool, int, bool)>(&UnityEngine::Rendering::DebugManager::GetPanel)> {
  static const MethodInfo* get() {
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* createIfNull = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* groupIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* overrideIfExist = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "GetPanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayName, createIfNull, groupIndex, overrideIfExist});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::RemovePanel
// Il2CppName: RemovePanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugManager::*)(::UnityEngine::Rendering::DebugUI::Panel*)>(&UnityEngine::Rendering::DebugManager::RemovePanel)> {
  static const MethodInfo* get() {
    static auto* panel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/Panel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "RemovePanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{panel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::GetItems
// Il2CppName: GetItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rendering::DebugUI::Widget*> (UnityEngine::Rendering::DebugManager::*)(::UnityEngine::Rendering::DebugUI::Flags)>(&UnityEngine::Rendering::DebugManager::GetItems)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/Flags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "GetItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::GetItemsFromContainer
// Il2CppName: GetItemsFromContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rendering::DebugUI::Widget*> (UnityEngine::Rendering::DebugManager::*)(::UnityEngine::Rendering::DebugUI::Flags, ::UnityEngine::Rendering::DebugUI::IContainer*)>(&UnityEngine::Rendering::DebugManager::GetItemsFromContainer)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/Flags")->byval_arg;
    static auto* container = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/IContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), "GetItemsFromContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags, container});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::DebugManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
