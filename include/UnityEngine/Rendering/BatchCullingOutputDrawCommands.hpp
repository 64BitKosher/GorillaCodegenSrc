// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: BatchDrawCommand
  struct BatchDrawCommand;
  // Forward declaring type: BatchDrawRange
  struct BatchDrawRange;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: BatchCullingOutputDrawCommands
  struct BatchCullingOutputDrawCommands;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::BatchCullingOutputDrawCommands, "UnityEngine.Rendering", "BatchCullingOutputDrawCommands");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.BatchCullingOutputDrawCommands
  // [TokenAttribute] Offset: FFFFFFFF
  struct BatchCullingOutputDrawCommands/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Rendering.BatchDrawCommand* drawCommands
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Rendering::BatchDrawCommand* drawCommands;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::BatchDrawCommand*) == 0x8);
    // public System.Int32* visibleInstances
    // Size: 0x8
    // Offset: 0x8
    int* visibleInstances;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // public UnityEngine.Rendering.BatchDrawRange* drawRanges
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Rendering::BatchDrawRange* drawRanges;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::BatchDrawRange*) == 0x8);
    // public System.Single* instanceSortingPositions
    // Size: 0x8
    // Offset: 0x18
    float* instanceSortingPositions;
    // Field size check
    static_assert(sizeof(float*) == 0x8);
    // public System.Int32* drawCommandPickingInstanceIDs
    // Size: 0x8
    // Offset: 0x20
    int* drawCommandPickingInstanceIDs;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // public System.Int32 drawCommandCount
    // Size: 0x4
    // Offset: 0x28
    int drawCommandCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 visibleInstanceCount
    // Size: 0x4
    // Offset: 0x2C
    int visibleInstanceCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 drawRangeCount
    // Size: 0x4
    // Offset: 0x30
    int drawRangeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 instanceSortingPositionFloatCount
    // Size: 0x4
    // Offset: 0x34
    int instanceSortingPositionFloatCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: BatchCullingOutputDrawCommands
    constexpr BatchCullingOutputDrawCommands(::UnityEngine::Rendering::BatchDrawCommand* drawCommands_ = {}, int* visibleInstances_ = {}, ::UnityEngine::Rendering::BatchDrawRange* drawRanges_ = {}, float* instanceSortingPositions_ = {}, int* drawCommandPickingInstanceIDs_ = {}, int drawCommandCount_ = {}, int visibleInstanceCount_ = {}, int drawRangeCount_ = {}, int instanceSortingPositionFloatCount_ = {}) noexcept : drawCommands{drawCommands_}, visibleInstances{visibleInstances_}, drawRanges{drawRanges_}, instanceSortingPositions{instanceSortingPositions_}, drawCommandPickingInstanceIDs{drawCommandPickingInstanceIDs_}, drawCommandCount{drawCommandCount_}, visibleInstanceCount{visibleInstanceCount_}, drawRangeCount{drawRangeCount_}, instanceSortingPositionFloatCount{instanceSortingPositionFloatCount_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Rendering.BatchDrawCommand* drawCommands
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::BatchDrawCommand*& dyn_drawCommands();
    // Get instance field reference: public System.Int32* visibleInstances
    [[deprecated("Use field access instead!")]] int*& dyn_visibleInstances();
    // Get instance field reference: public UnityEngine.Rendering.BatchDrawRange* drawRanges
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::BatchDrawRange*& dyn_drawRanges();
    // Get instance field reference: public System.Single* instanceSortingPositions
    [[deprecated("Use field access instead!")]] float*& dyn_instanceSortingPositions();
    // Get instance field reference: public System.Int32* drawCommandPickingInstanceIDs
    [[deprecated("Use field access instead!")]] int*& dyn_drawCommandPickingInstanceIDs();
    // Get instance field reference: public System.Int32 drawCommandCount
    [[deprecated("Use field access instead!")]] int& dyn_drawCommandCount();
    // Get instance field reference: public System.Int32 visibleInstanceCount
    [[deprecated("Use field access instead!")]] int& dyn_visibleInstanceCount();
    // Get instance field reference: public System.Int32 drawRangeCount
    [[deprecated("Use field access instead!")]] int& dyn_drawRangeCount();
    // Get instance field reference: public System.Int32 instanceSortingPositionFloatCount
    [[deprecated("Use field access instead!")]] int& dyn_instanceSortingPositionFloatCount();
  }; // UnityEngine.Rendering.BatchCullingOutputDrawCommands
  #pragma pack(pop)
  static check_size<sizeof(BatchCullingOutputDrawCommands), 52 + sizeof(int)> __UnityEngine_Rendering_BatchCullingOutputDrawCommandsSizeCheck;
  static_assert(sizeof(BatchCullingOutputDrawCommands) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
