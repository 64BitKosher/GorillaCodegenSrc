// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.DebugUI
#include "UnityEngine/Rendering/DebugUI.hpp"
// Including type: UnityEngine.Rendering.DebugUI/Widget
#include "UnityEngine/Rendering/DebugUI_Widget.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::Rendering::DebugUI::Field_1, "UnityEngine.Rendering", "DebugUI/Field`1");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.DebugUI/Field`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class DebugUI::Field_1 : public ::UnityEngine::Rendering::DebugUI::Widget {
    public:
    public:
    // private System.Func`1<T> <getter>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::System::Func_1<T>* getter;
    // Field size check
    static_assert(sizeof(::System::Func_1<T>*) == 0x8);
    // private System.Action`1<T> <setter>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_1<T>* setter;
    // Field size check
    static_assert(sizeof(::System::Action_1<T>*) == 0x8);
    // public System.Action`2<UnityEngine.Rendering.DebugUI/Field`1<T>,T> onValueChanged
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_2<::UnityEngine::Rendering::DebugUI::Field_1<T>*, T>* onValueChanged;
    // Field size check
    static_assert(sizeof(::System::Action_2<::UnityEngine::Rendering::DebugUI::Field_1<T>*, T>*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private System.Func`1<T> <getter>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Func_1<T>*& dyn_$getter$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::Field_1::dyn_$getter$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<getter>k__BackingField"))->offset;
      return *reinterpret_cast<::System::Func_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Action`1<T> <setter>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_1<T>*& dyn_$setter$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::Field_1::dyn_$setter$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<setter>k__BackingField"))->offset;
      return *reinterpret_cast<::System::Action_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Action`2<UnityEngine.Rendering.DebugUI/Field`1<T>,T> onValueChanged
    [[deprecated("Use field access instead!")]] ::System::Action_2<::UnityEngine::Rendering::DebugUI::Field_1<T>*, T>*& dyn_onValueChanged() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::Field_1::dyn_onValueChanged");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onValueChanged"))->offset;
      return *reinterpret_cast<::System::Action_2<::UnityEngine::Rendering::DebugUI::Field_1<T>*, T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Func`1<T> get_getter()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Func_1<T>* get_getter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::Field_1::get_getter");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_getter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Func_1<T>*, false>(this, ___internal__method);
    }
    // public System.Void set_getter(System.Func`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_getter(::System::Func_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::Field_1::set_getter");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_getter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Action`1<T> get_setter()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Action_1<T>* get_setter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::Field_1::get_setter");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_setter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Action_1<T>*, false>(this, ___internal__method);
    }
    // public System.Void set_setter(System.Action`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_setter(::System::Action_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::Field_1::set_setter");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_setter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public T ValidateValue(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T ValidateValue(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::Field_1::ValidateValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::DebugUI::Field_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, value);
    }
    // public T GetValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T GetValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::Field_1::GetValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void SetValue(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetValue(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::Field_1::SetValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::DebugUI::Field_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Rendering.DebugUI/Widget
    // Base method: System.Void Widget::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugUI::Field_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::Field_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugUI::Field_1<T>*, creationType>()));
    }
  }; // UnityEngine.Rendering.DebugUI/Field`1
  // Could not write size check! Type: UnityEngine.Rendering.DebugUI/Field`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
