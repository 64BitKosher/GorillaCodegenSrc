// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VolumeComponent
  class VolumeComponent;
  // Forward declaring type: VolumeParameter
  class VolumeParameter;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VolumeStack
  class VolumeStack;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::VolumeStack);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::VolumeStack*, "UnityEngine.Rendering", "VolumeStack");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.VolumeStack
  // [TokenAttribute] Offset: FFFFFFFF
  class VolumeStack : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // readonly System.Collections.Generic.Dictionary`2<System.Type,UnityEngine.Rendering.VolumeComponent> components
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::System::Type*, ::UnityEngine::Rendering::VolumeComponent*>* components;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::UnityEngine::Rendering::VolumeComponent*>*) == 0x8);
    // System.ValueTuple`2<UnityEngine.Rendering.VolumeParameter,UnityEngine.Rendering.VolumeParameter>[] defaultParameters
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::System::ValueTuple_2<::UnityEngine::Rendering::VolumeParameter*, ::UnityEngine::Rendering::VolumeParameter*>> defaultParameters;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::ValueTuple_2<::UnityEngine::Rendering::VolumeParameter*, ::UnityEngine::Rendering::VolumeParameter*>>) == 0x8);
    // System.Boolean requiresReset
    // Size: 0x1
    // Offset: 0x20
    bool requiresReset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: readonly System.Collections.Generic.Dictionary`2<System.Type,UnityEngine.Rendering.VolumeComponent> components
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Type*, ::UnityEngine::Rendering::VolumeComponent*>*& dyn_components();
    // Get instance field reference: System.ValueTuple`2<UnityEngine.Rendering.VolumeParameter,UnityEngine.Rendering.VolumeParameter>[] defaultParameters
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::ValueTuple_2<::UnityEngine::Rendering::VolumeParameter*, ::UnityEngine::Rendering::VolumeParameter*>>& dyn_defaultParameters();
    // Get instance field reference: System.Boolean requiresReset
    [[deprecated("Use field access instead!")]] bool& dyn_requiresReset();
    // System.Void .ctor()
    // Offset: 0x526237C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VolumeStack* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeStack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VolumeStack*, creationType>()));
    }
    // System.Void Clear()
    // Offset: 0x5264AAC
    void Clear();
    // System.Void Reload(System.Collections.Generic.List`1<UnityEngine.Rendering.VolumeComponent> componentDefaultStates)
    // Offset: 0x526240C
    void Reload(::System::Collections::Generic::List_1<::UnityEngine::Rendering::VolumeComponent*>* componentDefaultStates);
    // public T GetComponent()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T GetComponent() {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Rendering::VolumeComponent*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeStack::GetComponent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method);
    }
    // public UnityEngine.Rendering.VolumeComponent GetComponent(System.Type type)
    // Offset: 0x52629A0
    ::UnityEngine::Rendering::VolumeComponent* GetComponent(::System::Type* type);
    // public System.Void Dispose()
    // Offset: 0x5264CD0
    void Dispose();
  }; // UnityEngine.Rendering.VolumeStack
  #pragma pack(pop)
  static check_size<sizeof(VolumeStack), 32 + sizeof(bool)> __UnityEngine_Rendering_VolumeStackSizeCheck;
  static_assert(sizeof(VolumeStack) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeStack::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeStack::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeStack::*)()>(&UnityEngine::Rendering::VolumeStack::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeStack*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeStack::Reload
// Il2CppName: Reload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeStack::*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::VolumeComponent*>*)>(&UnityEngine::Rendering::VolumeStack::Reload)> {
  static const MethodInfo* get() {
    static auto* componentDefaultStates = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VolumeComponent")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeStack*), "Reload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{componentDefaultStates});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeStack::GetComponent
// Il2CppName: GetComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeStack::GetComponent
// Il2CppName: GetComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::VolumeComponent* (UnityEngine::Rendering::VolumeStack::*)(::System::Type*)>(&UnityEngine::Rendering::VolumeStack::GetComponent)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeStack*), "GetComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeStack::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeStack::*)()>(&UnityEngine::Rendering::VolumeStack::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeStack*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
