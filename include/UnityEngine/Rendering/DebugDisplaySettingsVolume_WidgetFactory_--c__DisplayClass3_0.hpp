// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.DebugDisplaySettingsVolume/WidgetFactory
#include "UnityEngine/Rendering/DebugDisplaySettingsVolume_WidgetFactory.hpp"
// Including type: UnityEngine.Rendering.DebugUI/Table
#include "UnityEngine/Rendering/DebugUI_Table.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: DebugDisplaySettingsVolume
  class DebugDisplaySettingsVolume;
  // Forward declaring type: VolumeComponent
  class VolumeComponent;
  // Forward declaring type: Volume
  class Volume;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: FieldInfo
  class FieldInfo;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0*, "UnityEngine.Rendering", "DebugDisplaySettingsVolume/WidgetFactory/<>c__DisplayClass3_0");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.DebugDisplaySettingsVolume/WidgetFactory/<>c__DisplayClass3_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0 : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Rendering.DebugDisplaySettingsVolume data
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Rendering::DebugDisplaySettingsVolume* data;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::DebugDisplaySettingsVolume*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Rendering.DebugUI/Table/Row> rows
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::DebugUI::Table::Row*>* rows;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::DebugUI::Table::Row*>*) == 0x8);
    // public UnityEngine.Rendering.DebugUI/Table/Row row
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rendering::DebugUI::Table::Row* row;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::DebugUI::Table::Row*) == 0x8);
    // public UnityEngine.Rendering.VolumeComponent stackComponent
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Rendering::VolumeComponent* stackComponent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::VolumeComponent*) == 0x8);
    // public UnityEngine.Rendering.Volume[] volumes
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Rendering::Volume*> volumes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::Volume*>) == 0x8);
    // public System.Type selectedType
    // Size: 0x8
    // Offset: 0x38
    ::System::Type* selectedType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // public UnityEngine.Rendering.VolumeComponent inst
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Rendering::VolumeComponent* inst;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::VolumeComponent*) == 0x8);
    // public System.Single timer
    // Size: 0x4
    // Offset: 0x48
    float timer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single refreshRate
    // Size: 0x4
    // Offset: 0x4C
    float refreshRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Rendering.DebugUI/Table table
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Rendering::DebugUI::Table* table;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::DebugUI::Table*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Rendering.DebugDisplaySettingsVolume data
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::DebugDisplaySettingsVolume*& dyn_data();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Rendering.DebugUI/Table/Row> rows
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::DebugUI::Table::Row*>*& dyn_rows();
    // Get instance field reference: public UnityEngine.Rendering.DebugUI/Table/Row row
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::DebugUI::Table::Row*& dyn_row();
    // Get instance field reference: public UnityEngine.Rendering.VolumeComponent stackComponent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::VolumeComponent*& dyn_stackComponent();
    // Get instance field reference: public UnityEngine.Rendering.Volume[] volumes
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::Volume*>& dyn_volumes();
    // Get instance field reference: public System.Type selectedType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_selectedType();
    // Get instance field reference: public UnityEngine.Rendering.VolumeComponent inst
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::VolumeComponent*& dyn_inst();
    // Get instance field reference: public System.Single timer
    [[deprecated("Use field access instead!")]] float& dyn_timer();
    // Get instance field reference: public System.Single refreshRate
    [[deprecated("Use field access instead!")]] float& dyn_refreshRate();
    // Get instance field reference: public UnityEngine.Rendering.DebugUI/Table table
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::DebugUI::Table*& dyn_table();
    // public System.Void .ctor()
    // Offset: 0x5241B0C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0*, creationType>()));
    }
    // System.Int32 <CreateVolumeTable>g__AddParameterRows|0(System.Type type, System.String baseName, System.Int32 skip)
    // Offset: 0x5241B1C
    int $CreateVolumeTable$g__AddParameterRows_0(::System::Type* type, ::StringW baseName, int skip);
    // System.Void <CreateVolumeTable>g__AddRow|8(System.Reflection.FieldInfo f, System.String prefix, System.Int32 skip)
    // Offset: 0x5242B50
    void $CreateVolumeTable$g__AddRow_8(::System::Reflection::FieldInfo* f, ::StringW prefix, int skip);
    // System.Boolean <CreateVolumeTable>b__1()
    // Offset: 0x52430E0
    bool $CreateVolumeTable$b__1();
  }; // UnityEngine.Rendering.DebugDisplaySettingsVolume/WidgetFactory/<>c__DisplayClass3_0
  #pragma pack(pop)
  static check_size<sizeof(DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0), 80 + sizeof(::UnityEngine::Rendering::DebugUI::Table*)> __UnityEngine_Rendering_DebugDisplaySettingsVolume_WidgetFactory_$$c__DisplayClass3_0SizeCheck;
  static_assert(sizeof(DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0::$CreateVolumeTable$g__AddParameterRows_0
// Il2CppName: <CreateVolumeTable>g__AddParameterRows|0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0::*)(::System::Type*, ::StringW, int)>(&UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0::$CreateVolumeTable$g__AddParameterRows_0)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* baseName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* skip = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0*), "<CreateVolumeTable>g__AddParameterRows|0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, baseName, skip});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0::$CreateVolumeTable$g__AddRow_8
// Il2CppName: <CreateVolumeTable>g__AddRow|8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0::*)(::System::Reflection::FieldInfo*, ::StringW, int)>(&UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0::$CreateVolumeTable$g__AddRow_8)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System.Reflection", "FieldInfo")->byval_arg;
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* skip = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0*), "<CreateVolumeTable>g__AddRow|8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f, prefix, skip});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0::$CreateVolumeTable$b__1
// Il2CppName: <CreateVolumeTable>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0::*)()>(&UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0::$CreateVolumeTable$b__1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugDisplaySettingsVolume::WidgetFactory::$$c__DisplayClass3_0*), "<CreateVolumeTable>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
