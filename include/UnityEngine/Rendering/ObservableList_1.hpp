// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ListChangedEventHandler`1<T>
  template<typename T>
  class ListChangedEventHandler_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ObservableList`1<T>
  template<typename T>
  class ObservableList_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::Rendering::ObservableList_1, "UnityEngine.Rendering", "ObservableList`1");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.ObservableList`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  template<typename T>
  class ObservableList_1 : public ::Il2CppObject/*, public ::System::Collections::Generic::IList_1<T>*/ {
    public:
    public:
    // private System.Collections.Generic.IList`1<T> m_List
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IList_1<T>* m_List;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IList_1<T>*) == 0x8);
    // private UnityEngine.Rendering.ListChangedEventHandler`1<T> ItemAdded
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Rendering::ListChangedEventHandler_1<T>* ItemAdded;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ListChangedEventHandler_1<T>*) == 0x8);
    // private UnityEngine.Rendering.ListChangedEventHandler`1<T> ItemRemoved
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Rendering::ListChangedEventHandler_1<T>* ItemRemoved;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ListChangedEventHandler_1<T>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IList_1<T>
    operator ::System::Collections::Generic::IList_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IList_1<T>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.IList`1<T> m_List
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IList_1<T>*& dyn_m_List() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::dyn_m_List");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_List"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IList_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Rendering.ListChangedEventHandler`1<T> ItemAdded
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ListChangedEventHandler_1<T>*& dyn_ItemAdded() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::dyn_ItemAdded");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ItemAdded"))->offset;
      return *reinterpret_cast<::UnityEngine::Rendering::ListChangedEventHandler_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Rendering.ListChangedEventHandler`1<T> ItemRemoved
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ListChangedEventHandler_1<T>*& dyn_ItemRemoved() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::dyn_ItemRemoved");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ItemRemoved"))->offset;
      return *reinterpret_cast<::UnityEngine::Rendering::ListChangedEventHandler_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void add_ItemAdded(UnityEngine.Rendering.ListChangedEventHandler`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_ItemAdded(::UnityEngine::Rendering::ListChangedEventHandler_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::add_ItemAdded");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_ItemAdded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_ItemAdded(UnityEngine.Rendering.ListChangedEventHandler`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_ItemAdded(::UnityEngine::Rendering::ListChangedEventHandler_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::remove_ItemAdded");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_ItemAdded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void add_ItemRemoved(UnityEngine.Rendering.ListChangedEventHandler`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_ItemRemoved(::UnityEngine::Rendering::ListChangedEventHandler_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::add_ItemRemoved");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_ItemRemoved", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_ItemRemoved(UnityEngine.Rendering.ListChangedEventHandler`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_ItemRemoved(::UnityEngine::Rendering::ListChangedEventHandler_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::remove_ItemRemoved");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_ItemRemoved", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public T get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::get_Item");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::ObservableList_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // public System.Void set_Item(System.Int32 index, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Item(int index, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::set_Item");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::ObservableList_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::get_Count");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::ObservableList_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Boolean get_IsReadOnly()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::get_IsReadOnly");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::ObservableList_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObservableList_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObservableList_1<T>*, creationType>()));
    }
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObservableList_1<T>* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObservableList_1<T>*, creationType>(capacity)));
    }
    // private System.Void OnEvent(UnityEngine.Rendering.ListChangedEventHandler`1<T> e, System.Int32 index, T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnEvent(::UnityEngine::Rendering::ListChangedEventHandler_1<T>* e, int index, T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::OnEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e, index, item);
    }
    // public System.Boolean Contains(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::Contains");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::ObservableList_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Int32 IndexOf(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int IndexOf(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::IndexOf");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::ObservableList_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, item);
    }
    // public System.Void Add(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::Add");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::ObservableList_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // public System.Void Add(params T[] items)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(::ArrayW<T> items) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(items)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, items);
    }
    // public System.Void Insert(System.Int32 index, T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Insert(int index, T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::Insert");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::ObservableList_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, item);
    }
    // public System.Boolean Remove(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Remove(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::Remove");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::ObservableList_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Int32 Remove(params T[] items)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Remove(::ArrayW<T> items) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(items)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, items);
    }
    // public System.Void RemoveAt(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveAt(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::RemoveAt");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::ObservableList_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::Clear");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::ObservableList_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void CopyTo(T[] array, System.Int32 arrayIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::ArrayW<T> array, int arrayIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::CopyTo");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::ObservableList_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, arrayIndex);
    }
    // public System.Collections.Generic.IEnumerator`1<T> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<T>* GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::ObservableList_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::ObservableList_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::ObservableList_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
  }; // UnityEngine.Rendering.ObservableList`1
  // Could not write size check! Type: UnityEngine.Rendering.ObservableList`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
