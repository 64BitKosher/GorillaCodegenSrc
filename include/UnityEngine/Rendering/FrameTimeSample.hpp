// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: FrameTimeSample
  struct FrameTimeSample;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::FrameTimeSample, "UnityEngine.Rendering", "FrameTimeSample");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.FrameTimeSample
  // [TokenAttribute] Offset: FFFFFFFF
  struct FrameTimeSample/*, public ::System::ValueType*/ {
    public:
    public:
    // System.Single FramesPerSecond
    // Size: 0x4
    // Offset: 0x0
    float FramesPerSecond;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single FullFrameTime
    // Size: 0x4
    // Offset: 0x4
    float FullFrameTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single MainThreadCPUFrameTime
    // Size: 0x4
    // Offset: 0x8
    float MainThreadCPUFrameTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single MainThreadCPUPresentWaitTime
    // Size: 0x4
    // Offset: 0xC
    float MainThreadCPUPresentWaitTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single RenderThreadCPUFrameTime
    // Size: 0x4
    // Offset: 0x10
    float RenderThreadCPUFrameTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single GPUFrameTime
    // Size: 0x4
    // Offset: 0x14
    float GPUFrameTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: FrameTimeSample
    constexpr FrameTimeSample(float FramesPerSecond_ = {}, float FullFrameTime_ = {}, float MainThreadCPUFrameTime_ = {}, float MainThreadCPUPresentWaitTime_ = {}, float RenderThreadCPUFrameTime_ = {}, float GPUFrameTime_ = {}) noexcept : FramesPerSecond{FramesPerSecond_}, FullFrameTime{FullFrameTime_}, MainThreadCPUFrameTime{MainThreadCPUFrameTime_}, MainThreadCPUPresentWaitTime{MainThreadCPUPresentWaitTime_}, RenderThreadCPUFrameTime{RenderThreadCPUFrameTime_}, GPUFrameTime{GPUFrameTime_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.Single FramesPerSecond
    [[deprecated("Use field access instead!")]] float& dyn_FramesPerSecond();
    // Get instance field reference: System.Single FullFrameTime
    [[deprecated("Use field access instead!")]] float& dyn_FullFrameTime();
    // Get instance field reference: System.Single MainThreadCPUFrameTime
    [[deprecated("Use field access instead!")]] float& dyn_MainThreadCPUFrameTime();
    // Get instance field reference: System.Single MainThreadCPUPresentWaitTime
    [[deprecated("Use field access instead!")]] float& dyn_MainThreadCPUPresentWaitTime();
    // Get instance field reference: System.Single RenderThreadCPUFrameTime
    [[deprecated("Use field access instead!")]] float& dyn_RenderThreadCPUFrameTime();
    // Get instance field reference: System.Single GPUFrameTime
    [[deprecated("Use field access instead!")]] float& dyn_GPUFrameTime();
    // System.Void .ctor(System.Single initValue)
    // Offset: 0x524BDC4
    FrameTimeSample(float initValue);
  }; // UnityEngine.Rendering.FrameTimeSample
  #pragma pack(pop)
  static check_size<sizeof(FrameTimeSample), 20 + sizeof(float)> __UnityEngine_Rendering_FrameTimeSampleSizeCheck;
  static_assert(sizeof(FrameTimeSample) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::FrameTimeSample::FrameTimeSample
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
