// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VolumeParameter
  class VolumeParameter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::VolumeParameter);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::VolumeParameter*, "UnityEngine.Rendering", "VolumeParameter");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x11
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.VolumeParameter
  // [TokenAttribute] Offset: FFFFFFFF
  class VolumeParameter : public ::Il2CppObject/*, public ::System::ICloneable*/ {
    public:
    public:
    // protected System.Boolean m_OverrideState
    // Size: 0x1
    // Offset: 0x10
    bool m_OverrideState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::ICloneable
    operator ::System::ICloneable() noexcept {
      return *reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return m_OverrideState;
    }
    // static field const value: static public System.String k_DebuggerDisplay
    static constexpr const char* k_DebuggerDisplay = "{m_Value} ({m_OverrideState})";
    // Get static field: static public System.String k_DebuggerDisplay
    static ::StringW _get_k_DebuggerDisplay();
    // Set static field: static public System.String k_DebuggerDisplay
    static void _set_k_DebuggerDisplay(::StringW value);
    // Get instance field reference: protected System.Boolean m_OverrideState
    [[deprecated("Use field access instead!")]] bool& dyn_m_OverrideState();
    // public System.Boolean get_overrideState()
    // Offset: 0x5263774
    bool get_overrideState();
    // public System.Void set_overrideState(System.Boolean value)
    // Offset: 0x526377C
    void set_overrideState(bool value);
    // System.Void Interp(UnityEngine.Rendering.VolumeParameter from, UnityEngine.Rendering.VolumeParameter to, System.Single t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Interp(::UnityEngine::Rendering::VolumeParameter* from, ::UnityEngine::Rendering::VolumeParameter* to, float t);
    // public T GetValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T GetValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter::GetValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method);
    }
    // public System.Void SetValue(UnityEngine.Rendering.VolumeParameter parameter)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetValue(::UnityEngine::Rendering::VolumeParameter* parameter);
    // protected internal System.Void OnEnable()
    // Offset: 0x5263788
    void OnEnable();
    // protected internal System.Void OnDisable()
    // Offset: 0x526378C
    void OnDisable();
    // static public System.Boolean IsObjectParameter(System.Type type)
    // Offset: 0x5261454
    static bool IsObjectParameter(::System::Type* type);
    // public System.Void Release()
    // Offset: 0x5263790
    void Release();
    // public System.Object Clone()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* Clone();
    // protected System.Void .ctor()
    // Offset: 0x5263794
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VolumeParameter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VolumeParameter*, creationType>()));
    }
  }; // UnityEngine.Rendering.VolumeParameter
  #pragma pack(pop)
  static check_size<sizeof(VolumeParameter), 16 + sizeof(bool)> __UnityEngine_Rendering_VolumeParameterSizeCheck;
  static_assert(sizeof(VolumeParameter) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeParameter::get_overrideState
// Il2CppName: get_overrideState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::VolumeParameter::*)()>(&UnityEngine::Rendering::VolumeParameter::get_overrideState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeParameter*), "get_overrideState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeParameter::set_overrideState
// Il2CppName: set_overrideState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeParameter::*)(bool)>(&UnityEngine::Rendering::VolumeParameter::set_overrideState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeParameter*), "set_overrideState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeParameter::Interp
// Il2CppName: Interp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeParameter::*)(::UnityEngine::Rendering::VolumeParameter*, ::UnityEngine::Rendering::VolumeParameter*, float)>(&UnityEngine::Rendering::VolumeParameter::Interp)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VolumeParameter")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VolumeParameter")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeParameter*), "Interp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, t});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeParameter::GetValue
// Il2CppName: GetValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeParameter::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeParameter::*)(::UnityEngine::Rendering::VolumeParameter*)>(&UnityEngine::Rendering::VolumeParameter::SetValue)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VolumeParameter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeParameter*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeParameter::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeParameter::*)()>(&UnityEngine::Rendering::VolumeParameter::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeParameter*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeParameter::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeParameter::*)()>(&UnityEngine::Rendering::VolumeParameter::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeParameter*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeParameter::IsObjectParameter
// Il2CppName: IsObjectParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&UnityEngine::Rendering::VolumeParameter::IsObjectParameter)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeParameter*), "IsObjectParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeParameter::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeParameter::*)()>(&UnityEngine::Rendering::VolumeParameter::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeParameter*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeParameter::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::Rendering::VolumeParameter::*)()>(&UnityEngine::Rendering::VolumeParameter::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeParameter*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeParameter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
