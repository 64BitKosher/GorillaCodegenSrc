// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VolumeComponent
  class VolumeComponent;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VolumeProfile
  class VolumeProfile;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::VolumeProfile);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::VolumeProfile*, "UnityEngine.Rendering", "VolumeProfile");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.VolumeProfile
  // [TokenAttribute] Offset: FFFFFFFF
  class VolumeProfile : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::UnityEngine::Rendering::VolumeProfile::$$c
    class $$c;
    public:
    // public System.Collections.Generic.List`1<UnityEngine.Rendering.VolumeComponent> components
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::VolumeComponent*>* components;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::VolumeComponent*>*) == 0x8);
    // public System.Boolean isDirty
    // Size: 0x1
    // Offset: 0x20
    bool isDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Rendering.VolumeComponent> components
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::VolumeComponent*>*& dyn_components();
    // Get instance field reference: public System.Boolean isDirty
    [[deprecated("Use field access instead!")]] bool& dyn_isDirty();
    // private System.Void OnEnable()
    // Offset: 0x5263F1C
    void OnEnable();
    // System.Void OnDisable()
    // Offset: 0x5264020
    void OnDisable();
    // public System.Void Reset()
    // Offset: 0x5264104
    void Reset();
    // public T Add(System.Boolean overrides)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T Add(bool overrides) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Rendering::VolumeComponent*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeProfile::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(overrides)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, overrides);
    }
    // public UnityEngine.Rendering.VolumeComponent Add(System.Type type, System.Boolean overrides)
    // Offset: 0x5264110
    ::UnityEngine::Rendering::VolumeComponent* Add(::System::Type* type, bool overrides);
    // public System.Void Remove()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void Remove() {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Rendering::VolumeComponent*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeProfile::Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method);
    }
    // public System.Void Remove(System.Type type)
    // Offset: 0x526444C
    void Remove(::System::Type* type);
    // public System.Boolean Has()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool Has() {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Rendering::VolumeComponent*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeProfile::Has");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Has", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method);
    }
    // public System.Boolean Has(System.Type type)
    // Offset: 0x5264298
    bool Has(::System::Type* type);
    // public System.Boolean HasSubclassOf(System.Type type)
    // Offset: 0x5264564
    bool HasSubclassOf(::System::Type* type);
    // public System.Boolean TryGet(out T component)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool TryGet(ByRef<T> component) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Rendering::VolumeComponent*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeProfile::TryGet");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGet", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<T&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, byref(component));
    }
    // public System.Boolean TryGet(System.Type type, out T component)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool TryGet(::System::Type* type, ByRef<T> component) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Rendering::VolumeComponent*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeProfile::TryGet");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGet", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractIndependentType<T&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, type, byref(component));
    }
    // public System.Boolean TryGetSubclassOf(System.Type type, out T component)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool TryGetSubclassOf(::System::Type* type, ByRef<T> component) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Rendering::VolumeComponent*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeProfile::TryGetSubclassOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetSubclassOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractIndependentType<T&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, type, byref(component));
    }
    // public System.Boolean TryGetAllSubclassOf(System.Type type, System.Collections.Generic.List`1<T> result)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool TryGetAllSubclassOf(::System::Type* type, ::System::Collections::Generic::List_1<T>* result) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Rendering::VolumeComponent*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeProfile::TryGetAllSubclassOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetAllSubclassOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(result)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, type, result);
    }
    // System.Int32 GetComponentListHashCode()
    // Offset: 0x52647A0
    int GetComponentListHashCode();
    // System.Void Sanitize()
    // Offset: 0x5264858
    void Sanitize();
    // public System.Void .ctor()
    // Offset: 0x5264950
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VolumeProfile* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeProfile::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VolumeProfile*, creationType>()));
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0x52646F4
    // Implemented from: UnityEngine.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Rendering.VolumeProfile
  #pragma pack(pop)
  static check_size<sizeof(VolumeProfile), 32 + sizeof(bool)> __UnityEngine_Rendering_VolumeProfileSizeCheck;
  static_assert(sizeof(VolumeProfile) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeProfile::*)()>(&UnityEngine::Rendering::VolumeProfile::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeProfile*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeProfile::*)()>(&UnityEngine::Rendering::VolumeProfile::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeProfile*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeProfile::*)()>(&UnityEngine::Rendering::VolumeProfile::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeProfile*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::Add
// Il2CppName: Add
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::VolumeComponent* (UnityEngine::Rendering::VolumeProfile::*)(::System::Type*, bool)>(&UnityEngine::Rendering::VolumeProfile::Add)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* overrides = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeProfile*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, overrides});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::Remove
// Il2CppName: Remove
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeProfile::*)(::System::Type*)>(&UnityEngine::Rendering::VolumeProfile::Remove)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeProfile*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::Has
// Il2CppName: Has
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::Has
// Il2CppName: Has
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::VolumeProfile::*)(::System::Type*)>(&UnityEngine::Rendering::VolumeProfile::Has)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeProfile*), "Has", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::HasSubclassOf
// Il2CppName: HasSubclassOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::VolumeProfile::*)(::System::Type*)>(&UnityEngine::Rendering::VolumeProfile::HasSubclassOf)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeProfile*), "HasSubclassOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::TryGet
// Il2CppName: TryGet
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::TryGet
// Il2CppName: TryGet
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::TryGetSubclassOf
// Il2CppName: TryGetSubclassOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::TryGetAllSubclassOf
// Il2CppName: TryGetAllSubclassOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::GetComponentListHashCode
// Il2CppName: GetComponentListHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::VolumeProfile::*)()>(&UnityEngine::Rendering::VolumeProfile::GetComponentListHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeProfile*), "GetComponentListHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::Sanitize
// Il2CppName: Sanitize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::VolumeProfile::*)()>(&UnityEngine::Rendering::VolumeProfile::Sanitize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeProfile*), "Sanitize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::VolumeProfile::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::VolumeProfile::*)()>(&UnityEngine::Rendering::VolumeProfile::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VolumeProfile*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
