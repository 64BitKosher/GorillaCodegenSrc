// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: LensFlareComponentSRP
  class LensFlareComponentSRP;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: RenderTargetIdentifier
  struct RenderTargetIdentifier;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Vector4
  struct Vector4;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Light
  class Light;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`4<T1, T2, T3, TResult>
  template<typename T1, typename T2, typename T3, typename TResult>
  class Func_4;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: LensFlareCommonSRP
  class LensFlareCommonSRP;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::LensFlareCommonSRP);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::LensFlareCommonSRP*, "UnityEngine.Rendering", "LensFlareCommonSRP");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.LensFlareCommonSRP
  // [TokenAttribute] Offset: FFFFFFFF
  class LensFlareCommonSRP : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Rendering::LensFlareCommonSRP::LensFlareCompInfo
    class LensFlareCompInfo;
    // Nested type: ::UnityEngine::Rendering::LensFlareCommonSRP::$$c__DisplayClass21_0
    class $$c__DisplayClass21_0;
    // Nested type: ::UnityEngine::Rendering::LensFlareCommonSRP::$$c__DisplayClass22_0
    class $$c__DisplayClass22_0;
    // Nested type: ::UnityEngine::Rendering::LensFlareCommonSRP::$$c__DisplayClass39_0
    struct $$c__DisplayClass39_0;
    // Nested type: ::UnityEngine::Rendering::LensFlareCommonSRP::$$c__DisplayClass39_1
    struct $$c__DisplayClass39_1;
    // Nested type: ::UnityEngine::Rendering::LensFlareCommonSRP::$$c__DisplayClass39_2
    struct $$c__DisplayClass39_2;
    // Get static field: static private UnityEngine.Rendering.LensFlareCommonSRP m_Instance
    static ::UnityEngine::Rendering::LensFlareCommonSRP* _get_m_Instance();
    // Set static field: static private UnityEngine.Rendering.LensFlareCommonSRP m_Instance
    static void _set_m_Instance(::UnityEngine::Rendering::LensFlareCommonSRP* value);
    // Get static field: static private readonly System.Object m_Padlock
    static ::Il2CppObject* _get_m_Padlock();
    // Set static field: static private readonly System.Object m_Padlock
    static void _set_m_Padlock(::Il2CppObject* value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Rendering.LensFlareCommonSRP/LensFlareCompInfo> m_Data
    static ::System::Collections::Generic::List_1<::UnityEngine::Rendering::LensFlareCommonSRP::LensFlareCompInfo*>* _get_m_Data();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Rendering.LensFlareCommonSRP/LensFlareCompInfo> m_Data
    static void _set_m_Data(::System::Collections::Generic::List_1<::UnityEngine::Rendering::LensFlareCommonSRP::LensFlareCompInfo*>* value);
    // Get static field: static private System.Collections.Generic.List`1<System.Int32> m_AvailableIndicies
    static ::System::Collections::Generic::List_1<int>* _get_m_AvailableIndicies();
    // Set static field: static private System.Collections.Generic.List`1<System.Int32> m_AvailableIndicies
    static void _set_m_AvailableIndicies(::System::Collections::Generic::List_1<int>* value);
    // Get static field: static public System.Int32 maxLensFlareWithOcclusion
    static int _get_maxLensFlareWithOcclusion();
    // Set static field: static public System.Int32 maxLensFlareWithOcclusion
    static void _set_maxLensFlareWithOcclusion(int value);
    // Get static field: static public System.Int32 maxLensFlareWithOcclusionTemporalSample
    static int _get_maxLensFlareWithOcclusionTemporalSample();
    // Set static field: static public System.Int32 maxLensFlareWithOcclusionTemporalSample
    static void _set_maxLensFlareWithOcclusionTemporalSample(int value);
    // Get static field: static public System.Int32 mergeNeeded
    static int _get_mergeNeeded();
    // Set static field: static public System.Int32 mergeNeeded
    static void _set_mergeNeeded(int value);
    // Get static field: static public UnityEngine.Rendering.RTHandle occlusionRT
    static ::UnityEngine::Rendering::RTHandle* _get_occlusionRT();
    // Set static field: static public UnityEngine.Rendering.RTHandle occlusionRT
    static void _set_occlusionRT(::UnityEngine::Rendering::RTHandle* value);
    // Get static field: static private System.Int32 frameIdx
    static int _get_frameIdx();
    // Set static field: static private System.Int32 frameIdx
    static void _set_frameIdx(int value);
    // Get static field: static private readonly System.Boolean s_SupportsLensFlareTexFormat
    static bool _get_s_SupportsLensFlareTexFormat();
    // Set static field: static private readonly System.Boolean s_SupportsLensFlareTexFormat
    static void _set_s_SupportsLensFlareTexFormat(bool value);
    // private System.Void .ctor()
    // Offset: 0x524C56C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LensFlareCommonSRP* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::LensFlareCommonSRP::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LensFlareCommonSRP*, creationType>()));
    }
    // static public System.Boolean IsOcclusionRTCompatible()
    // Offset: 0x524C574
    static bool IsOcclusionRTCompatible();
    // static public System.Void Initialize()
    // Offset: 0x524C604
    static void Initialize();
    // static public System.Void Dispose()
    // Offset: 0x524C934
    static void Dispose();
    // static public UnityEngine.Rendering.LensFlareCommonSRP get_Instance()
    // Offset: 0x524CA80
    static ::UnityEngine::Rendering::LensFlareCommonSRP* get_Instance();
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.LensFlareCommonSRP/LensFlareCompInfo> get_Data()
    // Offset: 0x524CC0C
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::LensFlareCommonSRP::LensFlareCompInfo*>* get_Data();
    // public System.Boolean IsEmpty()
    // Offset: 0x524CC64
    bool IsEmpty();
    // private System.Int32 GetNextAvailableIndex()
    // Offset: 0x524CCE8
    int GetNextAvailableIndex();
    // public System.Void AddData(UnityEngine.Rendering.LensFlareComponentSRP newData)
    // Offset: 0x524CDFC
    void AddData(::UnityEngine::Rendering::LensFlareComponentSRP* newData);
    // public System.Void RemoveData(UnityEngine.Rendering.LensFlareComponentSRP data)
    // Offset: 0x524D054
    void RemoveData(::UnityEngine::Rendering::LensFlareComponentSRP* data);
    // static public System.Single ShapeAttenuationPointLight()
    // Offset: 0x524D288
    static float ShapeAttenuationPointLight();
    // static public System.Single ShapeAttenuationDirLight(UnityEngine.Vector3 forward, UnityEngine.Vector3 wo)
    // Offset: 0x524D290
    static float ShapeAttenuationDirLight(::UnityEngine::Vector3 forward, ::UnityEngine::Vector3 wo);
    // static public System.Single ShapeAttenuationSpotConeLight(UnityEngine.Vector3 forward, UnityEngine.Vector3 wo, System.Single spotAngle, System.Single innerSpotPercent01)
    // Offset: 0x524D2B0
    static float ShapeAttenuationSpotConeLight(::UnityEngine::Vector3 forward, ::UnityEngine::Vector3 wo, float spotAngle, float innerSpotPercent01);
    // static public UnityEngine.Vector4 GetFlareData0(UnityEngine.Vector2 screenPos, UnityEngine.Vector2 translationScale, UnityEngine.Vector2 rayOff0, UnityEngine.Vector2 vLocalScreenRatio, System.Single angleDeg, System.Single position, System.Single angularOffset, UnityEngine.Vector2 positionOffset, System.Boolean autoRotate)
    // Offset: 0x524D35C
    static ::UnityEngine::Vector4 GetFlareData0(::UnityEngine::Vector2 screenPos, ::UnityEngine::Vector2 translationScale, ::UnityEngine::Vector2 rayOff0, ::UnityEngine::Vector2 vLocalScreenRatio, float angleDeg, float position, float angularOffset, ::UnityEngine::Vector2 positionOffset, bool autoRotate);
    // static private UnityEngine.Vector2 GetLensFlareRayOffset(UnityEngine.Vector2 screenPos, System.Single position, System.Single globalCos0, System.Single globalSin0)
    // Offset: 0x524D574
    static ::UnityEngine::Vector2 GetLensFlareRayOffset(::UnityEngine::Vector2 screenPos, float position, float globalCos0, float globalSin0);
    // static private UnityEngine.Vector3 WorldToViewport(UnityEngine.Camera camera, System.Boolean isLocalLight, System.Boolean isCameraRelative, UnityEngine.Matrix4x4 viewProjMatrix, UnityEngine.Vector3 positionWS)
    // Offset: 0x524D5AC
    static ::UnityEngine::Vector3 WorldToViewport(::UnityEngine::Camera* camera, bool isLocalLight, bool isCameraRelative, ::UnityEngine::Matrix4x4 viewProjMatrix, ::UnityEngine::Vector3 positionWS);
    // static private UnityEngine.Vector3 WorldToViewportLocal(System.Boolean isCameraRelative, UnityEngine.Matrix4x4 viewProjMatrix, UnityEngine.Vector3 cameraPosWS, UnityEngine.Vector3 positionWS)
    // Offset: 0x524D6F0
    static ::UnityEngine::Vector3 WorldToViewportLocal(bool isCameraRelative, ::UnityEngine::Matrix4x4 viewProjMatrix, ::UnityEngine::Vector3 cameraPosWS, ::UnityEngine::Vector3 positionWS);
    // static private UnityEngine.Vector3 WorldToViewportDistance(UnityEngine.Camera cam, UnityEngine.Vector3 positionWS)
    // Offset: 0x524D768
    static ::UnityEngine::Vector3 WorldToViewportDistance(::UnityEngine::Camera* cam, ::UnityEngine::Vector3 positionWS);
    // static private System.Void SetOcclusionPermutation(UnityEngine.Rendering.CommandBuffer cmd, System.Boolean useBackgroundCloudOcclusion, System.Boolean volumetricCloudOcclusion, System.Boolean hasCloudLayer, System.Int32 _FlareCloudOpacity, System.Int32 _FlareSunOcclusionTex, UnityEngine.Texture cloudOpacityTexture, UnityEngine.Texture sunOcclusionTexture)
    // Offset: 0x524D848
    static void SetOcclusionPermutation(::UnityEngine::Rendering::CommandBuffer* cmd, bool useBackgroundCloudOcclusion, bool volumetricCloudOcclusion, bool hasCloudLayer, int _FlareCloudOpacity, int _FlareSunOcclusionTex, ::UnityEngine::Texture* cloudOpacityTexture, ::UnityEngine::Texture* sunOcclusionTexture);
    // static public System.Void ComputeOcclusion(UnityEngine.Material lensFlareShader, UnityEngine.Camera cam, System.Single actualWidth, System.Single actualHeight, System.Boolean usePanini, System.Single paniniDistance, System.Single paniniCropToFit, System.Boolean isCameraRelative, UnityEngine.Vector3 cameraPositionWS, UnityEngine.Matrix4x4 viewProjMatrix, UnityEngine.Rendering.CommandBuffer cmd, System.Boolean taaEnabled, System.Boolean hasCloudLayer, UnityEngine.Texture cloudOpacityTexture, UnityEngine.Texture sunOcclusionTexture, System.Int32 _FlareOcclusionTex, System.Int32 _FlareCloudOpacity, System.Int32 _FlareOcclusionIndex, System.Int32 _FlareTex, System.Int32 _FlareColorValue, System.Int32 _FlareSunOcclusionTex, System.Int32 _FlareData0, System.Int32 _FlareData1, System.Int32 _FlareData2, System.Int32 _FlareData3, System.Int32 _FlareData4)
    // Offset: 0x524D9D4
    static void ComputeOcclusion(::UnityEngine::Material* lensFlareShader, ::UnityEngine::Camera* cam, float actualWidth, float actualHeight, bool usePanini, float paniniDistance, float paniniCropToFit, bool isCameraRelative, ::UnityEngine::Vector3 cameraPositionWS, ::UnityEngine::Matrix4x4 viewProjMatrix, ::UnityEngine::Rendering::CommandBuffer* cmd, bool taaEnabled, bool hasCloudLayer, ::UnityEngine::Texture* cloudOpacityTexture, ::UnityEngine::Texture* sunOcclusionTexture, int _FlareOcclusionTex, int _FlareCloudOpacity, int _FlareOcclusionIndex, int _FlareTex, int _FlareColorValue, int _FlareSunOcclusionTex, int _FlareData0, int _FlareData1, int _FlareData2, int _FlareData3, int _FlareData4);
    // static public System.Void DoLensFlareDataDrivenCommon(UnityEngine.Material lensFlareShader, UnityEngine.Camera cam, System.Single actualWidth, System.Single actualHeight, System.Boolean usePanini, System.Single paniniDistance, System.Single paniniCropToFit, System.Boolean isCameraRelative, UnityEngine.Vector3 cameraPositionWS, UnityEngine.Matrix4x4 viewProjMatrix, UnityEngine.Rendering.CommandBuffer cmd, System.Boolean taaEnabled, System.Boolean hasCloudLayer, UnityEngine.Texture cloudOpacityTexture, UnityEngine.Texture sunOcclusionTexture, UnityEngine.Rendering.RenderTargetIdentifier colorBuffer, System.Func`4<UnityEngine.Light,UnityEngine.Camera,UnityEngine.Vector3,System.Single> GetLensFlareLightAttenuation, System.Int32 _FlareOcclusionRemapTex, System.Int32 _FlareOcclusionTex, System.Int32 _FlareOcclusionIndex, System.Int32 _FlareCloudOpacity, System.Int32 _FlareSunOcclusionTex, System.Int32 _FlareTex, System.Int32 _FlareColorValue, System.Int32 _FlareData0, System.Int32 _FlareData1, System.Int32 _FlareData2, System.Int32 _FlareData3, System.Int32 _FlareData4, System.Boolean debugView)
    // Offset: 0x524EB64
    static void DoLensFlareDataDrivenCommon(::UnityEngine::Material* lensFlareShader, ::UnityEngine::Camera* cam, float actualWidth, float actualHeight, bool usePanini, float paniniDistance, float paniniCropToFit, bool isCameraRelative, ::UnityEngine::Vector3 cameraPositionWS, ::UnityEngine::Matrix4x4 viewProjMatrix, ::UnityEngine::Rendering::CommandBuffer* cmd, bool taaEnabled, bool hasCloudLayer, ::UnityEngine::Texture* cloudOpacityTexture, ::UnityEngine::Texture* sunOcclusionTexture, ::UnityEngine::Rendering::RenderTargetIdentifier colorBuffer, ::System::Func_4<::UnityEngine::Light*, ::UnityEngine::Camera*, ::UnityEngine::Vector3, float>* GetLensFlareLightAttenuation, int _FlareOcclusionRemapTex, int _FlareOcclusionTex, int _FlareOcclusionIndex, int _FlareCloudOpacity, int _FlareSunOcclusionTex, int _FlareTex, int _FlareColorValue, int _FlareData0, int _FlareData1, int _FlareData2, int _FlareData3, int _FlareData4, bool debugView);
    // static private UnityEngine.Vector2 DoPaniniProjection(UnityEngine.Vector2 screenPos, System.Single actualWidth, System.Single actualHeight, System.Single fieldOfView, System.Single paniniProjectionCropToFit, System.Single paniniProjectionDistance)
    // Offset: 0x524E910
    static ::UnityEngine::Vector2 DoPaniniProjection(::UnityEngine::Vector2 screenPos, float actualWidth, float actualHeight, float fieldOfView, float paniniProjectionCropToFit, float paniniProjectionDistance);
    // static private UnityEngine.Vector2 CalcViewExtents(System.Single actualWidth, System.Single actualHeight, System.Single fieldOfView)
    // Offset: 0x5251134
    static ::UnityEngine::Vector2 CalcViewExtents(float actualWidth, float actualHeight, float fieldOfView);
    // static private UnityEngine.Vector2 CalcCropExtents(System.Single actualWidth, System.Single actualHeight, System.Single fieldOfView, System.Single d)
    // Offset: 0x5251174
    static ::UnityEngine::Vector2 CalcCropExtents(float actualWidth, float actualHeight, float fieldOfView, float d);
    // static private UnityEngine.Vector2 Panini_Generic_Inv(UnityEngine.Vector2 projPos, System.Single d)
    // Offset: 0x5251238
    static ::UnityEngine::Vector2 Panini_Generic_Inv(::UnityEngine::Vector2 projPos, float d);
    // static private System.Void .cctor()
    // Offset: 0x525126C
    static void _cctor();
    // static UnityEngine.Vector2 <DoLensFlareDataDrivenCommon>g__ComputeLocalSize|39_0(UnityEngine.Vector2 rayOff, UnityEngine.Vector2 rayOff0, UnityEngine.Vector2 curSize, UnityEngine.AnimationCurve distortionCurve, ref UnityEngine.Rendering.LensFlareCommonSRP/<>c__DisplayClass39_0 , ref UnityEngine.Rendering.LensFlareCommonSRP/<>c__DisplayClass39_1 , ref UnityEngine.Rendering.LensFlareCommonSRP/<>c__DisplayClass39_2 )
    // Offset: 0x5250F7C
    static ::UnityEngine::Vector2 $DoLensFlareDataDrivenCommon$g__ComputeLocalSize_39_0(::UnityEngine::Vector2 rayOff, ::UnityEngine::Vector2 rayOff0, ::UnityEngine::Vector2 curSize, ::UnityEngine::AnimationCurve* distortionCurve, ByRef<::UnityEngine::Rendering::LensFlareCommonSRP::$$c__DisplayClass39_0> param_4, ByRef<::UnityEngine::Rendering::LensFlareCommonSRP::$$c__DisplayClass39_1> param_5, ByRef<::UnityEngine::Rendering::LensFlareCommonSRP::$$c__DisplayClass39_2> param_6);
    // static System.Single <DoLensFlareDataDrivenCommon>g__RandomRange|39_1(System.Single min, System.Single max)
    // Offset: 0x525112C
    static float $DoLensFlareDataDrivenCommon$g__RandomRange_39_1(float min, float max);
  }; // UnityEngine.Rendering.LensFlareCommonSRP
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::IsOcclusionRTCompatible
// Il2CppName: IsOcclusionRTCompatible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::Rendering::LensFlareCommonSRP::IsOcclusionRTCompatible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "IsOcclusionRTCompatible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::LensFlareCommonSRP::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::LensFlareCommonSRP::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::LensFlareCommonSRP* (*)()>(&UnityEngine::Rendering::LensFlareCommonSRP::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::get_Data
// Il2CppName: get_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Rendering::LensFlareCommonSRP::LensFlareCompInfo*>* (UnityEngine::Rendering::LensFlareCommonSRP::*)()>(&UnityEngine::Rendering::LensFlareCommonSRP::get_Data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "get_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::IsEmpty
// Il2CppName: IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::LensFlareCommonSRP::*)()>(&UnityEngine::Rendering::LensFlareCommonSRP::IsEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::GetNextAvailableIndex
// Il2CppName: GetNextAvailableIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::LensFlareCommonSRP::*)()>(&UnityEngine::Rendering::LensFlareCommonSRP::GetNextAvailableIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "GetNextAvailableIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::AddData
// Il2CppName: AddData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::LensFlareCommonSRP::*)(::UnityEngine::Rendering::LensFlareComponentSRP*)>(&UnityEngine::Rendering::LensFlareCommonSRP::AddData)> {
  static const MethodInfo* get() {
    static auto* newData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LensFlareComponentSRP")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "AddData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::RemoveData
// Il2CppName: RemoveData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::LensFlareCommonSRP::*)(::UnityEngine::Rendering::LensFlareComponentSRP*)>(&UnityEngine::Rendering::LensFlareCommonSRP::RemoveData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LensFlareComponentSRP")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "RemoveData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::ShapeAttenuationPointLight
// Il2CppName: ShapeAttenuationPointLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&UnityEngine::Rendering::LensFlareCommonSRP::ShapeAttenuationPointLight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "ShapeAttenuationPointLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::ShapeAttenuationDirLight
// Il2CppName: ShapeAttenuationDirLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&UnityEngine::Rendering::LensFlareCommonSRP::ShapeAttenuationDirLight)> {
  static const MethodInfo* get() {
    static auto* forward = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* wo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "ShapeAttenuationDirLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forward, wo});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::ShapeAttenuationSpotConeLight
// Il2CppName: ShapeAttenuationSpotConeLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float)>(&UnityEngine::Rendering::LensFlareCommonSRP::ShapeAttenuationSpotConeLight)> {
  static const MethodInfo* get() {
    static auto* forward = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* wo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* spotAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* innerSpotPercent01 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "ShapeAttenuationSpotConeLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forward, wo, spotAngle, innerSpotPercent01});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::GetFlareData0
// Il2CppName: GetFlareData0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, float, float, float, ::UnityEngine::Vector2, bool)>(&UnityEngine::Rendering::LensFlareCommonSRP::GetFlareData0)> {
  static const MethodInfo* get() {
    static auto* screenPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* translationScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* rayOff0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* vLocalScreenRatio = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* angleDeg = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* angularOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* positionOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* autoRotate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "GetFlareData0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screenPos, translationScale, rayOff0, vLocalScreenRatio, angleDeg, position, angularOffset, positionOffset, autoRotate});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::GetLensFlareRayOffset
// Il2CppName: GetLensFlareRayOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, float, float, float)>(&UnityEngine::Rendering::LensFlareCommonSRP::GetLensFlareRayOffset)> {
  static const MethodInfo* get() {
    static auto* screenPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* globalCos0 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* globalSin0 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "GetLensFlareRayOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screenPos, position, globalCos0, globalSin0});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::WorldToViewport
// Il2CppName: WorldToViewport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Camera*, bool, bool, ::UnityEngine::Matrix4x4, ::UnityEngine::Vector3)>(&UnityEngine::Rendering::LensFlareCommonSRP::WorldToViewport)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* isLocalLight = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isCameraRelative = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* viewProjMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* positionWS = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "WorldToViewport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, isLocalLight, isCameraRelative, viewProjMatrix, positionWS});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::WorldToViewportLocal
// Il2CppName: WorldToViewportLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(bool, ::UnityEngine::Matrix4x4, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&UnityEngine::Rendering::LensFlareCommonSRP::WorldToViewportLocal)> {
  static const MethodInfo* get() {
    static auto* isCameraRelative = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* viewProjMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* cameraPosWS = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* positionWS = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "WorldToViewportLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isCameraRelative, viewProjMatrix, cameraPosWS, positionWS});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::WorldToViewportDistance
// Il2CppName: WorldToViewportDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Camera*, ::UnityEngine::Vector3)>(&UnityEngine::Rendering::LensFlareCommonSRP::WorldToViewportDistance)> {
  static const MethodInfo* get() {
    static auto* cam = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* positionWS = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "WorldToViewportDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cam, positionWS});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::SetOcclusionPermutation
// Il2CppName: SetOcclusionPermutation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, bool, bool, bool, int, int, ::UnityEngine::Texture*, ::UnityEngine::Texture*)>(&UnityEngine::Rendering::LensFlareCommonSRP::SetOcclusionPermutation)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* useBackgroundCloudOcclusion = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* volumetricCloudOcclusion = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasCloudLayer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* _FlareCloudOpacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareSunOcclusionTex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cloudOpacityTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* sunOcclusionTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "SetOcclusionPermutation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, useBackgroundCloudOcclusion, volumetricCloudOcclusion, hasCloudLayer, _FlareCloudOpacity, _FlareSunOcclusionTex, cloudOpacityTexture, sunOcclusionTexture});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::ComputeOcclusion
// Il2CppName: ComputeOcclusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Material*, ::UnityEngine::Camera*, float, float, bool, float, float, bool, ::UnityEngine::Vector3, ::UnityEngine::Matrix4x4, ::UnityEngine::Rendering::CommandBuffer*, bool, bool, ::UnityEngine::Texture*, ::UnityEngine::Texture*, int, int, int, int, int, int, int, int, int, int, int)>(&UnityEngine::Rendering::LensFlareCommonSRP::ComputeOcclusion)> {
  static const MethodInfo* get() {
    static auto* lensFlareShader = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* cam = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* actualWidth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* actualHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* usePanini = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* paniniDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* paniniCropToFit = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isCameraRelative = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cameraPositionWS = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* viewProjMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* taaEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasCloudLayer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cloudOpacityTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* sunOcclusionTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* _FlareOcclusionTex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareCloudOpacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareOcclusionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareTex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareColorValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareSunOcclusionTex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareData0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareData1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareData2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareData3 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareData4 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "ComputeOcclusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lensFlareShader, cam, actualWidth, actualHeight, usePanini, paniniDistance, paniniCropToFit, isCameraRelative, cameraPositionWS, viewProjMatrix, cmd, taaEnabled, hasCloudLayer, cloudOpacityTexture, sunOcclusionTexture, _FlareOcclusionTex, _FlareCloudOpacity, _FlareOcclusionIndex, _FlareTex, _FlareColorValue, _FlareSunOcclusionTex, _FlareData0, _FlareData1, _FlareData2, _FlareData3, _FlareData4});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::DoLensFlareDataDrivenCommon
// Il2CppName: DoLensFlareDataDrivenCommon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Material*, ::UnityEngine::Camera*, float, float, bool, float, float, bool, ::UnityEngine::Vector3, ::UnityEngine::Matrix4x4, ::UnityEngine::Rendering::CommandBuffer*, bool, bool, ::UnityEngine::Texture*, ::UnityEngine::Texture*, ::UnityEngine::Rendering::RenderTargetIdentifier, ::System::Func_4<::UnityEngine::Light*, ::UnityEngine::Camera*, ::UnityEngine::Vector3, float>*, int, int, int, int, int, int, int, int, int, int, int, int, bool)>(&UnityEngine::Rendering::LensFlareCommonSRP::DoLensFlareDataDrivenCommon)> {
  static const MethodInfo* get() {
    static auto* lensFlareShader = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* cam = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* actualWidth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* actualHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* usePanini = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* paniniDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* paniniCropToFit = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isCameraRelative = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cameraPositionWS = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* viewProjMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* taaEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasCloudLayer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cloudOpacityTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* sunOcclusionTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* colorBuffer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* GetLensFlareLightAttenuation = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`4"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Light"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Camera"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* _FlareOcclusionRemapTex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareOcclusionTex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareOcclusionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareCloudOpacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareSunOcclusionTex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareTex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareColorValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareData0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareData1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareData2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareData3 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _FlareData4 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* debugView = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "DoLensFlareDataDrivenCommon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lensFlareShader, cam, actualWidth, actualHeight, usePanini, paniniDistance, paniniCropToFit, isCameraRelative, cameraPositionWS, viewProjMatrix, cmd, taaEnabled, hasCloudLayer, cloudOpacityTexture, sunOcclusionTexture, colorBuffer, GetLensFlareLightAttenuation, _FlareOcclusionRemapTex, _FlareOcclusionTex, _FlareOcclusionIndex, _FlareCloudOpacity, _FlareSunOcclusionTex, _FlareTex, _FlareColorValue, _FlareData0, _FlareData1, _FlareData2, _FlareData3, _FlareData4, debugView});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::DoPaniniProjection
// Il2CppName: DoPaniniProjection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, float, float, float, float, float)>(&UnityEngine::Rendering::LensFlareCommonSRP::DoPaniniProjection)> {
  static const MethodInfo* get() {
    static auto* screenPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* actualWidth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* actualHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fieldOfView = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* paniniProjectionCropToFit = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* paniniProjectionDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "DoPaniniProjection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screenPos, actualWidth, actualHeight, fieldOfView, paniniProjectionCropToFit, paniniProjectionDistance});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::CalcViewExtents
// Il2CppName: CalcViewExtents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(float, float, float)>(&UnityEngine::Rendering::LensFlareCommonSRP::CalcViewExtents)> {
  static const MethodInfo* get() {
    static auto* actualWidth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* actualHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fieldOfView = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "CalcViewExtents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actualWidth, actualHeight, fieldOfView});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::CalcCropExtents
// Il2CppName: CalcCropExtents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(float, float, float, float)>(&UnityEngine::Rendering::LensFlareCommonSRP::CalcCropExtents)> {
  static const MethodInfo* get() {
    static auto* actualWidth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* actualHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fieldOfView = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "CalcCropExtents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actualWidth, actualHeight, fieldOfView, d});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::Panini_Generic_Inv
// Il2CppName: Panini_Generic_Inv
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, float)>(&UnityEngine::Rendering::LensFlareCommonSRP::Panini_Generic_Inv)> {
  static const MethodInfo* get() {
    static auto* projPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "Panini_Generic_Inv", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{projPos, d});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::LensFlareCommonSRP::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::$DoLensFlareDataDrivenCommon$g__ComputeLocalSize_39_0
// Il2CppName: <DoLensFlareDataDrivenCommon>g__ComputeLocalSize|39_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::AnimationCurve*, ByRef<::UnityEngine::Rendering::LensFlareCommonSRP::$$c__DisplayClass39_0>, ByRef<::UnityEngine::Rendering::LensFlareCommonSRP::$$c__DisplayClass39_1>, ByRef<::UnityEngine::Rendering::LensFlareCommonSRP::$$c__DisplayClass39_2>)>(&UnityEngine::Rendering::LensFlareCommonSRP::$DoLensFlareDataDrivenCommon$g__ComputeLocalSize_39_0)> {
  static const MethodInfo* get() {
    static auto* rayOff = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* rayOff0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* curSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* distortionCurve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    static auto* param_4 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LensFlareCommonSRP/<>c__DisplayClass39_0")->this_arg;
    static auto* param_5 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LensFlareCommonSRP/<>c__DisplayClass39_1")->this_arg;
    static auto* param_6 = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LensFlareCommonSRP/<>c__DisplayClass39_2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "<DoLensFlareDataDrivenCommon>g__ComputeLocalSize|39_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rayOff, rayOff0, curSize, distortionCurve, param_4, param_5, param_6});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::LensFlareCommonSRP::$DoLensFlareDataDrivenCommon$g__RandomRange_39_1
// Il2CppName: <DoLensFlareDataDrivenCommon>g__RandomRange|39_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&UnityEngine::Rendering::LensFlareCommonSRP::$DoLensFlareDataDrivenCommon$g__RandomRange_39_1)> {
  static const MethodInfo* get() {
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::LensFlareCommonSRP*), "<DoLensFlareDataDrivenCommon>g__RandomRange|39_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{min, max});
  }
};
