// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.Rendering.GraphicsFenceType
#include "UnityEngine/Rendering/GraphicsFenceType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: SynchronisationStageFlags
  struct SynchronisationStageFlags;
  // Forward declaring type: SynchronisationStage
  struct SynchronisationStage;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: GraphicsFence
  struct GraphicsFence;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::GraphicsFence, "UnityEngine.Rendering", "GraphicsFence");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.GraphicsFence
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  struct GraphicsFence/*, public ::System::ValueType*/ {
    public:
    public:
    // System.IntPtr m_Ptr
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr m_Ptr;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // System.Int32 m_Version
    // Size: 0x4
    // Offset: 0x8
    int m_Version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.Rendering.GraphicsFenceType m_FenceType
    // Size: 0x4
    // Offset: 0xC
    ::UnityEngine::Rendering::GraphicsFenceType m_FenceType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::GraphicsFenceType) == 0x4);
    public:
    // Creating value type constructor for type: GraphicsFence
    constexpr GraphicsFence(::System::IntPtr m_Ptr_ = {}, int m_Version_ = {}, ::UnityEngine::Rendering::GraphicsFenceType m_FenceType_ = {}) noexcept : m_Ptr{m_Ptr_}, m_Version{m_Version_}, m_FenceType{m_FenceType_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.IntPtr m_Ptr
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_Ptr();
    // Get instance field reference: System.Int32 m_Version
    [[deprecated("Use field access instead!")]] int& dyn_m_Version();
    // Get instance field reference: UnityEngine.Rendering.GraphicsFenceType m_FenceType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::GraphicsFenceType& dyn_m_FenceType();
    // static UnityEngine.Rendering.SynchronisationStageFlags TranslateSynchronizationStageToFlags(UnityEngine.Rendering.SynchronisationStage s)
    // Offset: 0x54E057C
    static ::UnityEngine::Rendering::SynchronisationStageFlags TranslateSynchronizationStageToFlags(::UnityEngine::Rendering::SynchronisationStage s);
    // System.Void InitPostAllocation()
    // Offset: 0x54E058C
    void InitPostAllocation();
    // System.Boolean IsFencePending()
    // Offset: 0x54E0688
    bool IsFencePending();
    // System.Void Validate()
    // Offset: 0x54E06F4
    void Validate();
    // private System.Int32 GetPlatformNotSupportedVersion()
    // Offset: 0x54E0644
    int GetPlatformNotSupportedVersion();
    // static private System.Int32 GetVersionNumber(System.IntPtr fencePtr)
    // Offset: 0x54E064C
    static int GetVersionNumber(::System::IntPtr fencePtr);
  }; // UnityEngine.Rendering.GraphicsFence
  #pragma pack(pop)
  static check_size<sizeof(GraphicsFence), 12 + sizeof(::UnityEngine::Rendering::GraphicsFenceType)> __UnityEngine_Rendering_GraphicsFenceSizeCheck;
  static_assert(sizeof(GraphicsFence) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsFence::TranslateSynchronizationStageToFlags
// Il2CppName: TranslateSynchronizationStageToFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::SynchronisationStageFlags (*)(::UnityEngine::Rendering::SynchronisationStage)>(&UnityEngine::Rendering::GraphicsFence::TranslateSynchronizationStageToFlags)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SynchronisationStage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsFence), "TranslateSynchronizationStageToFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsFence::InitPostAllocation
// Il2CppName: InitPostAllocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::GraphicsFence::*)()>(&UnityEngine::Rendering::GraphicsFence::InitPostAllocation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsFence), "InitPostAllocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsFence::IsFencePending
// Il2CppName: IsFencePending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::GraphicsFence::*)()>(&UnityEngine::Rendering::GraphicsFence::IsFencePending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsFence), "IsFencePending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsFence::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::GraphicsFence::*)()>(&UnityEngine::Rendering::GraphicsFence::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsFence), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsFence::GetPlatformNotSupportedVersion
// Il2CppName: GetPlatformNotSupportedVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::GraphicsFence::*)()>(&UnityEngine::Rendering::GraphicsFence::GetPlatformNotSupportedVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsFence), "GetPlatformNotSupportedVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::GraphicsFence::GetVersionNumber
// Il2CppName: GetVersionNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&UnityEngine::Rendering::GraphicsFence::GetVersionNumber)> {
  static const MethodInfo* get() {
    static auto* fencePtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::GraphicsFence), "GetVersionNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fencePtr});
  }
};
