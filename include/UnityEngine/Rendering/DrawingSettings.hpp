// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Rendering.SortingSettings
#include "UnityEngine/Rendering/SortingSettings.hpp"
// Including type: UnityEngine.Rendering.PerObjectData
#include "UnityEngine/Rendering/PerObjectData.hpp"
// Including type: UnityEngine.Rendering.DrawRendererFlags
#include "UnityEngine/Rendering/DrawRendererFlags.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ShaderTagId
  struct ShaderTagId;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Shader
  class Shader;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: DrawingSettings
  struct DrawingSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::DrawingSettings, "UnityEngine.Rendering", "DrawingSettings");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0xC4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.DrawingSettings
  // [TokenAttribute] Offset: FFFFFFFF
  struct DrawingSettings/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::Rendering::DrawingSettings>*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::DrawingSettings::$shaderPassNames$e__FixedBuffer
    struct $shaderPassNames$e__FixedBuffer;
    // Size: 0x4
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Rendering.DrawingSettings/<shaderPassNames>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    struct $shaderPassNames$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 FixedElementField
      // Size: 0x4
      // Offset: 0x0
      int FixedElementField;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: $shaderPassNames$e__FixedBuffer
      constexpr $shaderPassNames$e__FixedBuffer(int FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Int32 FixedElementField
      [[deprecated("Use field access instead!")]] int& dyn_FixedElementField();
    }; // UnityEngine.Rendering.DrawingSettings/<shaderPassNames>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(DrawingSettings::$shaderPassNames$e__FixedBuffer), 0 + sizeof(int)> __UnityEngine_Rendering_DrawingSettings_$shaderPassNames$e__FixedBufferSizeCheck;
    static_assert(sizeof(DrawingSettings::$shaderPassNames$e__FixedBuffer) == 0x4);
    public:
    // private UnityEngine.Rendering.SortingSettings m_SortingSettings
    // Size: 0x60
    // Offset: 0x0
    ::UnityEngine::Rendering::SortingSettings m_SortingSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::SortingSettings) == 0x60);
    // UnityEngine.Rendering.DrawingSettings/<shaderPassNames>e__FixedBuffer shaderPassNames
    // Size: 0x4
    // Offset: 0x60
    ::UnityEngine::Rendering::DrawingSettings::$shaderPassNames$e__FixedBuffer shaderPassNames;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::DrawingSettings::$shaderPassNames$e__FixedBuffer) == 0x4);
    // Padding between fields: shaderPassNames and: m_PerObjectData
    char __padding1[0x3C] = {};
    // private UnityEngine.Rendering.PerObjectData m_PerObjectData
    // Size: 0x4
    // Offset: 0xA0
    ::UnityEngine::Rendering::PerObjectData m_PerObjectData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::PerObjectData) == 0x4);
    // private UnityEngine.Rendering.DrawRendererFlags m_Flags
    // Size: 0x4
    // Offset: 0xA4
    ::UnityEngine::Rendering::DrawRendererFlags m_Flags;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::DrawRendererFlags) == 0x4);
    // private System.Int32 m_OverrideShaderID
    // Size: 0x4
    // Offset: 0xA8
    int m_OverrideShaderID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_OverrideShaderPassIndex
    // Size: 0x4
    // Offset: 0xAC
    int m_OverrideShaderPassIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_OverrideMaterialInstanceId
    // Size: 0x4
    // Offset: 0xB0
    int m_OverrideMaterialInstanceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_OverrideMaterialPassIndex
    // Size: 0x4
    // Offset: 0xB4
    int m_OverrideMaterialPassIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_fallbackMaterialInstanceId
    // Size: 0x4
    // Offset: 0xB8
    int m_fallbackMaterialInstanceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_MainLightIndex
    // Size: 0x4
    // Offset: 0xBC
    int m_MainLightIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_UseSrpBatcher
    // Size: 0x4
    // Offset: 0xC0
    int m_UseSrpBatcher;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: DrawingSettings
    constexpr DrawingSettings(::UnityEngine::Rendering::SortingSettings m_SortingSettings_ = {}, ::UnityEngine::Rendering::DrawingSettings::$shaderPassNames$e__FixedBuffer shaderPassNames_ = {}, ::UnityEngine::Rendering::PerObjectData m_PerObjectData_ = {}, ::UnityEngine::Rendering::DrawRendererFlags m_Flags_ = {}, int m_OverrideShaderID_ = {}, int m_OverrideShaderPassIndex_ = {}, int m_OverrideMaterialInstanceId_ = {}, int m_OverrideMaterialPassIndex_ = {}, int m_fallbackMaterialInstanceId_ = {}, int m_MainLightIndex_ = {}, int m_UseSrpBatcher_ = {}) noexcept : m_SortingSettings{m_SortingSettings_}, shaderPassNames{shaderPassNames_}, m_PerObjectData{m_PerObjectData_}, m_Flags{m_Flags_}, m_OverrideShaderID{m_OverrideShaderID_}, m_OverrideShaderPassIndex{m_OverrideShaderPassIndex_}, m_OverrideMaterialInstanceId{m_OverrideMaterialInstanceId_}, m_OverrideMaterialPassIndex{m_OverrideMaterialPassIndex_}, m_fallbackMaterialInstanceId{m_fallbackMaterialInstanceId_}, m_MainLightIndex{m_MainLightIndex_}, m_UseSrpBatcher{m_UseSrpBatcher_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Rendering::DrawingSettings>
    operator ::System::IEquatable_1<::UnityEngine::Rendering::DrawingSettings>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Rendering::DrawingSettings>*>(this);
    }
    // Get static field: static public readonly System.Int32 maxShaderPasses
    static int _get_maxShaderPasses();
    // Set static field: static public readonly System.Int32 maxShaderPasses
    static void _set_maxShaderPasses(int value);
    // Get instance field reference: private UnityEngine.Rendering.SortingSettings m_SortingSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::SortingSettings& dyn_m_SortingSettings();
    // Get instance field reference: UnityEngine.Rendering.DrawingSettings/<shaderPassNames>e__FixedBuffer shaderPassNames
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::DrawingSettings::$shaderPassNames$e__FixedBuffer& dyn_shaderPassNames();
    // Get instance field reference: private UnityEngine.Rendering.PerObjectData m_PerObjectData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::PerObjectData& dyn_m_PerObjectData();
    // Get instance field reference: private UnityEngine.Rendering.DrawRendererFlags m_Flags
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::DrawRendererFlags& dyn_m_Flags();
    // Get instance field reference: private System.Int32 m_OverrideShaderID
    [[deprecated("Use field access instead!")]] int& dyn_m_OverrideShaderID();
    // Get instance field reference: private System.Int32 m_OverrideShaderPassIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_OverrideShaderPassIndex();
    // Get instance field reference: private System.Int32 m_OverrideMaterialInstanceId
    [[deprecated("Use field access instead!")]] int& dyn_m_OverrideMaterialInstanceId();
    // Get instance field reference: private System.Int32 m_OverrideMaterialPassIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_OverrideMaterialPassIndex();
    // Get instance field reference: private System.Int32 m_fallbackMaterialInstanceId
    [[deprecated("Use field access instead!")]] int& dyn_m_fallbackMaterialInstanceId();
    // Get instance field reference: private System.Int32 m_MainLightIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_MainLightIndex();
    // Get instance field reference: private System.Int32 m_UseSrpBatcher
    [[deprecated("Use field access instead!")]] int& dyn_m_UseSrpBatcher();
    // public System.Void .ctor(UnityEngine.Rendering.ShaderTagId shaderPassName, UnityEngine.Rendering.SortingSettings sortingSettings)
    // Offset: 0x54E7434
    DrawingSettings(::UnityEngine::Rendering::ShaderTagId shaderPassName, ::UnityEngine::Rendering::SortingSettings sortingSettings);
    // public UnityEngine.Rendering.SortingSettings get_sortingSettings()
    // Offset: 0x54E7504
    ::UnityEngine::Rendering::SortingSettings get_sortingSettings();
    // public System.Void set_sortingSettings(UnityEngine.Rendering.SortingSettings value)
    // Offset: 0x54E7520
    void set_sortingSettings(::UnityEngine::Rendering::SortingSettings value);
    // public System.Void set_perObjectData(UnityEngine.Rendering.PerObjectData value)
    // Offset: 0x54E7534
    void set_perObjectData(::UnityEngine::Rendering::PerObjectData value);
    // public System.Void set_enableDynamicBatching(System.Boolean value)
    // Offset: 0x54E753C
    void set_enableDynamicBatching(bool value);
    // public System.Void set_enableInstancing(System.Boolean value)
    // Offset: 0x54E754C
    void set_enableInstancing(bool value);
    // public System.Void set_overrideMaterial(UnityEngine.Material value)
    // Offset: 0x54E756C
    void set_overrideMaterial(::UnityEngine::Material* value);
    // public System.Void set_overrideShader(UnityEngine.Shader value)
    // Offset: 0x54E7598
    void set_overrideShader(::UnityEngine::Shader* value);
    // public System.Void set_overrideMaterialPassIndex(System.Int32 value)
    // Offset: 0x54E75C4
    void set_overrideMaterialPassIndex(int value);
    // public System.Void set_overrideShaderPassIndex(System.Int32 value)
    // Offset: 0x54E75CC
    void set_overrideShaderPassIndex(int value);
    // public System.Void set_fallbackMaterial(UnityEngine.Material value)
    // Offset: 0x54E75D4
    void set_fallbackMaterial(::UnityEngine::Material* value);
    // public System.Void set_mainLightIndex(System.Int32 value)
    // Offset: 0x54E7600
    void set_mainLightIndex(int value);
    // public UnityEngine.Rendering.ShaderTagId GetShaderPassName(System.Int32 index)
    // Offset: 0x54E7608
    ::UnityEngine::Rendering::ShaderTagId GetShaderPassName(int index);
    // public System.Void SetShaderPassName(System.Int32 index, UnityEngine.Rendering.ShaderTagId shaderPassName)
    // Offset: 0x54E776C
    void SetShaderPassName(int index, ::UnityEngine::Rendering::ShaderTagId shaderPassName);
    // public System.Boolean Equals(UnityEngine.Rendering.DrawingSettings other)
    // Offset: 0x54E78C8
    bool Equals(::UnityEngine::Rendering::DrawingSettings other);
    // static private System.Void .cctor()
    // Offset: 0x54E7B7C
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x54E7A0C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x54E7AC4
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Rendering.DrawingSettings
  #pragma pack(pop)
  static check_size<sizeof(DrawingSettings), 192 + sizeof(int)> __UnityEngine_Rendering_DrawingSettingsSizeCheck;
  static_assert(sizeof(DrawingSettings) == 0xC4);
  // static public System.Boolean op_Equality(UnityEngine.Rendering.DrawingSettings left, UnityEngine.Rendering.DrawingSettings right)
  // Offset: 0x54E7B20
  bool operator ==(const ::UnityEngine::Rendering::DrawingSettings& left, const ::UnityEngine::Rendering::DrawingSettings& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::DrawingSettings::$shaderPassNames$e__FixedBuffer, "UnityEngine.Rendering", "DrawingSettings/<shaderPassNames>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::DrawingSettings
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::get_sortingSettings
// Il2CppName: get_sortingSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::SortingSettings (UnityEngine::Rendering::DrawingSettings::*)()>(&UnityEngine::Rendering::DrawingSettings::get_sortingSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "get_sortingSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::set_sortingSettings
// Il2CppName: set_sortingSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DrawingSettings::*)(::UnityEngine::Rendering::SortingSettings)>(&UnityEngine::Rendering::DrawingSettings::set_sortingSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SortingSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "set_sortingSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::set_perObjectData
// Il2CppName: set_perObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DrawingSettings::*)(::UnityEngine::Rendering::PerObjectData)>(&UnityEngine::Rendering::DrawingSettings::set_perObjectData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "PerObjectData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "set_perObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::set_enableDynamicBatching
// Il2CppName: set_enableDynamicBatching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DrawingSettings::*)(bool)>(&UnityEngine::Rendering::DrawingSettings::set_enableDynamicBatching)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "set_enableDynamicBatching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::set_enableInstancing
// Il2CppName: set_enableInstancing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DrawingSettings::*)(bool)>(&UnityEngine::Rendering::DrawingSettings::set_enableInstancing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "set_enableInstancing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::set_overrideMaterial
// Il2CppName: set_overrideMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DrawingSettings::*)(::UnityEngine::Material*)>(&UnityEngine::Rendering::DrawingSettings::set_overrideMaterial)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "set_overrideMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::set_overrideShader
// Il2CppName: set_overrideShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DrawingSettings::*)(::UnityEngine::Shader*)>(&UnityEngine::Rendering::DrawingSettings::set_overrideShader)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Shader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "set_overrideShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::set_overrideMaterialPassIndex
// Il2CppName: set_overrideMaterialPassIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DrawingSettings::*)(int)>(&UnityEngine::Rendering::DrawingSettings::set_overrideMaterialPassIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "set_overrideMaterialPassIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::set_overrideShaderPassIndex
// Il2CppName: set_overrideShaderPassIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DrawingSettings::*)(int)>(&UnityEngine::Rendering::DrawingSettings::set_overrideShaderPassIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "set_overrideShaderPassIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::set_fallbackMaterial
// Il2CppName: set_fallbackMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DrawingSettings::*)(::UnityEngine::Material*)>(&UnityEngine::Rendering::DrawingSettings::set_fallbackMaterial)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "set_fallbackMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::set_mainLightIndex
// Il2CppName: set_mainLightIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DrawingSettings::*)(int)>(&UnityEngine::Rendering::DrawingSettings::set_mainLightIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "set_mainLightIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::GetShaderPassName
// Il2CppName: GetShaderPassName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::ShaderTagId (UnityEngine::Rendering::DrawingSettings::*)(int)>(&UnityEngine::Rendering::DrawingSettings::GetShaderPassName)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "GetShaderPassName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::SetShaderPassName
// Il2CppName: SetShaderPassName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DrawingSettings::*)(int, ::UnityEngine::Rendering::ShaderTagId)>(&UnityEngine::Rendering::DrawingSettings::SetShaderPassName)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* shaderPassName = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShaderTagId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "SetShaderPassName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, shaderPassName});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::DrawingSettings::*)(::UnityEngine::Rendering::DrawingSettings)>(&UnityEngine::Rendering::DrawingSettings::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DrawingSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::DrawingSettings::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::DrawingSettings::*)(::Il2CppObject*)>(&UnityEngine::Rendering::DrawingSettings::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::DrawingSettings::*)()>(&UnityEngine::Rendering::DrawingSettings::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DrawingSettings), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DrawingSettings::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
