// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Rendering.DebugUI
#include "UnityEngine/Rendering/DebugUI.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::UI
namespace UnityEngine::Rendering::UI {
  // Forward declaring type: DebugUIPrefabBundle
  class DebugUIPrefabBundle;
  // Forward declaring type: DebugUIHandlerPanel
  class DebugUIHandlerPanel;
  // Forward declaring type: DebugUIHandlerWidget
  class DebugUIHandlerWidget;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.UI
namespace UnityEngine::Rendering::UI {
  // Forward declaring type: DebugUIHandlerCanvas
  class DebugUIHandlerCanvas;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::UI::DebugUIHandlerCanvas);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::UI::DebugUIHandlerCanvas*, "UnityEngine.Rendering.UI", "DebugUIHandlerCanvas");
// Type namespace: UnityEngine.Rendering.UI
namespace UnityEngine::Rendering::UI {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.UI.DebugUIHandlerCanvas
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugUIHandlerCanvas : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::UnityEngine::Rendering::UI::DebugUIHandlerCanvas::$$c
    class $$c;
    // Nested type: ::UnityEngine::Rendering::UI::DebugUIHandlerCanvas::$$c__DisplayClass14_0
    class $$c__DisplayClass14_0;
    public:
    // private System.Int32 m_DebugTreeState
    // Size: 0x4
    // Offset: 0x20
    int m_DebugTreeState;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_DebugTreeState and: m_PrefabsMap
    char __padding0[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<System.Type,UnityEngine.Transform> m_PrefabsMap
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::System::Type*, ::UnityEngine::Transform*>* m_PrefabsMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::UnityEngine::Transform*>*) == 0x8);
    // public UnityEngine.Transform panelPrefab
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* panelPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Rendering.UI.DebugUIPrefabBundle> prefabs
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::UI::DebugUIPrefabBundle*>* prefabs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::UI::DebugUIPrefabBundle*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.UI.DebugUIHandlerPanel> m_UIPanels
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::UI::DebugUIHandlerPanel*>* m_UIPanels;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::UI::DebugUIHandlerPanel*>*) == 0x8);
    // private System.Int32 m_SelectedPanel
    // Size: 0x4
    // Offset: 0x48
    int m_SelectedPanel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_SelectedPanel and: m_SelectedWidget
    char __padding5[0x4] = {};
    // private UnityEngine.Rendering.UI.DebugUIHandlerWidget m_SelectedWidget
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Rendering::UI::DebugUIHandlerWidget* m_SelectedWidget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::UI::DebugUIHandlerWidget*) == 0x8);
    // private System.String m_CurrentQueryPath
    // Size: 0x8
    // Offset: 0x58
    ::StringW m_CurrentQueryPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.Int32 m_DebugTreeState
    [[deprecated("Use field access instead!")]] int& dyn_m_DebugTreeState();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Type,UnityEngine.Transform> m_PrefabsMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Type*, ::UnityEngine::Transform*>*& dyn_m_PrefabsMap();
    // Get instance field reference: public UnityEngine.Transform panelPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_panelPrefab();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Rendering.UI.DebugUIPrefabBundle> prefabs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::UI::DebugUIPrefabBundle*>*& dyn_prefabs();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.UI.DebugUIHandlerPanel> m_UIPanels
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::UI::DebugUIHandlerPanel*>*& dyn_m_UIPanels();
    // Get instance field reference: private System.Int32 m_SelectedPanel
    [[deprecated("Use field access instead!")]] int& dyn_m_SelectedPanel();
    // Get instance field reference: private UnityEngine.Rendering.UI.DebugUIHandlerWidget m_SelectedWidget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::UI::DebugUIHandlerWidget*& dyn_m_SelectedWidget();
    // Get instance field reference: private System.String m_CurrentQueryPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_CurrentQueryPath();
    // private System.Void OnEnable()
    // Offset: 0x5265210
    void OnEnable();
    // private System.Void Update()
    // Offset: 0x5265388
    void Update();
    // System.Void RequestHierarchyReset()
    // Offset: 0x5265B44
    void RequestHierarchyReset();
    // private System.Void ResetAllHierarchy()
    // Offset: 0x52654B0
    void ResetAllHierarchy();
    // private System.Void Rebuild()
    // Offset: 0x5265B50
    void Rebuild();
    // private System.Void Traverse(UnityEngine.Rendering.DebugUI/IContainer container, UnityEngine.Transform parentTransform, UnityEngine.Rendering.UI.DebugUIHandlerWidget parentUIHandler, ref UnityEngine.Rendering.UI.DebugUIHandlerWidget selectedHandler)
    // Offset: 0x52665B4
    void Traverse(::UnityEngine::Rendering::DebugUI::IContainer* container, ::UnityEngine::Transform* parentTransform, ::UnityEngine::Rendering::UI::DebugUIHandlerWidget* parentUIHandler, ByRef<::UnityEngine::Rendering::UI::DebugUIHandlerWidget*> selectedHandler);
    // private UnityEngine.Rendering.UI.DebugUIHandlerWidget GetWidgetFromPath(System.String queryPath)
    // Offset: 0x5266C70
    ::UnityEngine::Rendering::UI::DebugUIHandlerWidget* GetWidgetFromPath(::StringW queryPath);
    // private System.Void ActivatePanel(System.Int32 index, UnityEngine.Rendering.UI.DebugUIHandlerWidget selectedWidget)
    // Offset: 0x5266A6C
    void ActivatePanel(int index, ::UnityEngine::Rendering::UI::DebugUIHandlerWidget* selectedWidget);
    // System.Void ChangeSelection(UnityEngine.Rendering.UI.DebugUIHandlerWidget widget, System.Boolean fromNext)
    // Offset: 0x5266E20
    void ChangeSelection(::UnityEngine::Rendering::UI::DebugUIHandlerWidget* widget, bool fromNext);
    // System.Void SelectPreviousItem()
    // Offset: 0x526717C
    void SelectPreviousItem();
    // System.Void SelectNextPanel()
    // Offset: 0x5267240
    void SelectNextPanel();
    // System.Void SelectPreviousPanel()
    // Offset: 0x52672B4
    void SelectPreviousPanel();
    // System.Void SelectNextItem()
    // Offset: 0x52670B8
    void SelectNextItem();
    // private System.Void ChangeSelectionValue(System.Single multiplier)
    // Offset: 0x5267334
    void ChangeSelectionValue(float multiplier);
    // private System.Void ActivateSelection()
    // Offset: 0x5267420
    void ActivateSelection();
    // private System.Void HandleInput()
    // Offset: 0x52657B8
    void HandleInput();
    // System.Void SetScrollTarget(UnityEngine.Rendering.UI.DebugUIHandlerWidget widget)
    // Offset: 0x5266FCC
    void SetScrollTarget(::UnityEngine::Rendering::UI::DebugUIHandlerWidget* widget);
    // public System.Void .ctor()
    // Offset: 0x52674A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugUIHandlerCanvas* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::UI::DebugUIHandlerCanvas::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugUIHandlerCanvas*, creationType>()));
    }
  }; // UnityEngine.Rendering.UI.DebugUIHandlerCanvas
  #pragma pack(pop)
  static check_size<sizeof(DebugUIHandlerCanvas), 88 + sizeof(::StringW)> __UnityEngine_Rendering_UI_DebugUIHandlerCanvasSizeCheck;
  static_assert(sizeof(DebugUIHandlerCanvas) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::RequestHierarchyReset
// Il2CppName: RequestHierarchyReset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::RequestHierarchyReset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "RequestHierarchyReset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::ResetAllHierarchy
// Il2CppName: ResetAllHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::ResetAllHierarchy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "ResetAllHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::Rebuild
// Il2CppName: Rebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::Rebuild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::Traverse
// Il2CppName: Traverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)(::UnityEngine::Rendering::DebugUI::IContainer*, ::UnityEngine::Transform*, ::UnityEngine::Rendering::UI::DebugUIHandlerWidget*, ByRef<::UnityEngine::Rendering::UI::DebugUIHandlerWidget*>)>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::Traverse)> {
  static const MethodInfo* get() {
    static auto* container = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/IContainer")->byval_arg;
    static auto* parentTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* parentUIHandler = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.UI", "DebugUIHandlerWidget")->byval_arg;
    static auto* selectedHandler = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.UI", "DebugUIHandlerWidget")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "Traverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{container, parentTransform, parentUIHandler, selectedHandler});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::GetWidgetFromPath
// Il2CppName: GetWidgetFromPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::UI::DebugUIHandlerWidget* (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)(::StringW)>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::GetWidgetFromPath)> {
  static const MethodInfo* get() {
    static auto* queryPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "GetWidgetFromPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{queryPath});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::ActivatePanel
// Il2CppName: ActivatePanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)(int, ::UnityEngine::Rendering::UI::DebugUIHandlerWidget*)>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::ActivatePanel)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* selectedWidget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.UI", "DebugUIHandlerWidget")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "ActivatePanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, selectedWidget});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::ChangeSelection
// Il2CppName: ChangeSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)(::UnityEngine::Rendering::UI::DebugUIHandlerWidget*, bool)>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::ChangeSelection)> {
  static const MethodInfo* get() {
    static auto* widget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.UI", "DebugUIHandlerWidget")->byval_arg;
    static auto* fromNext = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "ChangeSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{widget, fromNext});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::SelectPreviousItem
// Il2CppName: SelectPreviousItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::SelectPreviousItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "SelectPreviousItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::SelectNextPanel
// Il2CppName: SelectNextPanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::SelectNextPanel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "SelectNextPanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::SelectPreviousPanel
// Il2CppName: SelectPreviousPanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::SelectPreviousPanel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "SelectPreviousPanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::SelectNextItem
// Il2CppName: SelectNextItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::SelectNextItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "SelectNextItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::ChangeSelectionValue
// Il2CppName: ChangeSelectionValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)(float)>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::ChangeSelectionValue)> {
  static const MethodInfo* get() {
    static auto* multiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "ChangeSelectionValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{multiplier});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::ActivateSelection
// Il2CppName: ActivateSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::ActivateSelection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "ActivateSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::HandleInput
// Il2CppName: HandleInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::HandleInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "HandleInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::SetScrollTarget
// Il2CppName: SetScrollTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerCanvas::*)(::UnityEngine::Rendering::UI::DebugUIHandlerWidget*)>(&UnityEngine::Rendering::UI::DebugUIHandlerCanvas::SetScrollTarget)> {
  static const MethodInfo* get() {
    static auto* widget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.UI", "DebugUIHandlerWidget")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerCanvas*), "SetScrollTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{widget});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerCanvas::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
