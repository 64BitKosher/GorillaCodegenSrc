// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.UI.DebugUIHandlerWidget
#include "UnityEngine/Rendering/UI/DebugUIHandlerWidget.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.UI
namespace UnityEngine::Rendering::UI {
  // Forward declaring type: DebugUIHandlerField`1<T>
  template<typename T>
  class DebugUIHandlerField_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::Rendering::UI::DebugUIHandlerField_1, "UnityEngine.Rendering.UI", "DebugUIHandlerField`1");
// Type namespace: UnityEngine.Rendering.UI
namespace UnityEngine::Rendering::UI {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.UI.DebugUIHandlerField`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class DebugUIHandlerField_1 : public ::UnityEngine::Rendering::UI::DebugUIHandlerWidget {
    public:
    public:
    // public UnityEngine.UI.Text nextButtonText
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UI::Text* nextButtonText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text previousButtonText
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UI::Text* previousButtonText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text nameLabel
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UI::Text* nameLabel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text valueLabel
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UI::Text* valueLabel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // protected internal T m_Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T m_Field;
    public:
    // Autogenerated instance field getter
    // Get instance field: public UnityEngine.UI.Text nextButtonText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_nextButtonText() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::UI::DebugUIHandlerField_1::dyn_nextButtonText");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextButtonText"))->offset;
      return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public UnityEngine.UI.Text previousButtonText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_previousButtonText() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::UI::DebugUIHandlerField_1::dyn_previousButtonText");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previousButtonText"))->offset;
      return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public UnityEngine.UI.Text nameLabel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_nameLabel() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::UI::DebugUIHandlerField_1::dyn_nameLabel");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nameLabel"))->offset;
      return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public UnityEngine.UI.Text valueLabel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_valueLabel() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::UI::DebugUIHandlerField_1::dyn_valueLabel");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "valueLabel"))->offset;
      return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected internal T m_Field
    [[deprecated("Use field access instead!")]] T& dyn_m_Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::UI::DebugUIHandlerField_1::dyn_m_Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Field"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void UpdateValueLabel()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateValueLabel() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::UI::DebugUIHandlerField_1::UpdateValueLabel");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::UI::DebugUIHandlerField_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void SetLabelText(System.String text)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetLabelText(::StringW text) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::UI::DebugUIHandlerField_1::SetLabelText");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLabelText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, text);
    }
    // override System.Void SetWidget(UnityEngine.Rendering.DebugUI/Widget widget)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Rendering.UI.DebugUIHandlerWidget
    // Base method: System.Void DebugUIHandlerWidget::SetWidget(UnityEngine.Rendering.DebugUI/Widget widget)
    void SetWidget(::UnityEngine::Rendering::DebugUI::Widget* widget) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::UI::DebugUIHandlerField_1::SetWidget");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::UI::DebugUIHandlerWidget*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, widget);
    }
    // public override System.Boolean OnSelection(System.Boolean fromNext, UnityEngine.Rendering.UI.DebugUIHandlerWidget previous)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Rendering.UI.DebugUIHandlerWidget
    // Base method: System.Boolean DebugUIHandlerWidget::OnSelection(System.Boolean fromNext, UnityEngine.Rendering.UI.DebugUIHandlerWidget previous)
    bool OnSelection(bool fromNext, ::UnityEngine::Rendering::UI::DebugUIHandlerWidget* previous) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::UI::DebugUIHandlerField_1::OnSelection");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::UI::DebugUIHandlerWidget*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromNext, previous);
    }
    // public override System.Void OnDeselection()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Rendering.UI.DebugUIHandlerWidget
    // Base method: System.Void DebugUIHandlerWidget::OnDeselection()
    void OnDeselection() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::UI::DebugUIHandlerField_1::OnDeselection");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::UI::DebugUIHandlerWidget*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public override System.Void OnAction()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Rendering.UI.DebugUIHandlerWidget
    // Base method: System.Void DebugUIHandlerWidget::OnAction()
    void OnAction() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::UI::DebugUIHandlerField_1::OnAction");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::UI::DebugUIHandlerWidget*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Rendering.UI.DebugUIHandlerWidget
    // Base method: System.Void DebugUIHandlerWidget::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugUIHandlerField_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::UI::DebugUIHandlerField_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugUIHandlerField_1<T>*, creationType>()));
    }
  }; // UnityEngine.Rendering.UI.DebugUIHandlerField`1
  // Could not write size check! Type: UnityEngine.Rendering.UI.DebugUIHandlerField`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
