// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.UI.DebugUIHandlerWidget
#include "UnityEngine/Rendering/UI/DebugUIHandlerWidget.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.UI
namespace UnityEngine::Rendering::UI {
  // Forward declaring type: DebugUIHandlerValue
  class DebugUIHandlerValue;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::UI::DebugUIHandlerValue);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::UI::DebugUIHandlerValue*, "UnityEngine.Rendering.UI", "DebugUIHandlerValue");
// Type namespace: UnityEngine.Rendering.UI
namespace UnityEngine::Rendering::UI {
  // Size: 0x7C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.UI.DebugUIHandlerValue
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugUIHandlerValue : public ::UnityEngine::Rendering::UI::DebugUIHandlerWidget {
    public:
    public:
    // public UnityEngine.UI.Text nameLabel
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::UI::Text* nameLabel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text valueLabel
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::UI::Text* valueLabel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.Rendering.DebugUI/Value m_Field
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Rendering::DebugUI::Value* m_Field;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::DebugUI::Value*) == 0x8);
    // protected internal System.Single m_Timer
    // Size: 0x4
    // Offset: 0x78
    float m_Timer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private readonly UnityEngine.Color k_ZeroColor
    static ::UnityEngine::Color _get_k_ZeroColor();
    // Set static field: static private readonly UnityEngine.Color k_ZeroColor
    static void _set_k_ZeroColor(::UnityEngine::Color value);
    // Get instance field reference: public UnityEngine.UI.Text nameLabel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_nameLabel();
    // Get instance field reference: public UnityEngine.UI.Text valueLabel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_valueLabel();
    // Get instance field reference: private UnityEngine.Rendering.DebugUI/Value m_Field
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::DebugUI::Value*& dyn_m_Field();
    // Get instance field reference: protected internal System.Single m_Timer
    [[deprecated("Use field access instead!")]] float& dyn_m_Timer();
    // private System.Void Update()
    // Offset: 0x5269334
    void Update();
    // static private System.Void .cctor()
    // Offset: 0x52694D0
    static void _cctor();
    // protected override System.Void OnEnable()
    // Offset: 0x52691E8
    // Implemented from: UnityEngine.Rendering.UI.DebugUIHandlerWidget
    // Base method: System.Void DebugUIHandlerWidget::OnEnable()
    void OnEnable();
    // override System.Void SetWidget(UnityEngine.Rendering.DebugUI/Widget widget)
    // Offset: 0x52691F0
    // Implemented from: UnityEngine.Rendering.UI.DebugUIHandlerWidget
    // Base method: System.Void DebugUIHandlerWidget::SetWidget(UnityEngine.Rendering.DebugUI/Widget widget)
    void SetWidget(::UnityEngine::Rendering::DebugUI::Widget* widget);
    // public override System.Boolean OnSelection(System.Boolean fromNext, UnityEngine.Rendering.UI.DebugUIHandlerWidget previous)
    // Offset: 0x526928C
    // Implemented from: UnityEngine.Rendering.UI.DebugUIHandlerWidget
    // Base method: System.Boolean DebugUIHandlerWidget::OnSelection(System.Boolean fromNext, UnityEngine.Rendering.UI.DebugUIHandlerWidget previous)
    bool OnSelection(bool fromNext, ::UnityEngine::Rendering::UI::DebugUIHandlerWidget* previous);
    // public override System.Void OnDeselection()
    // Offset: 0x52692E4
    // Implemented from: UnityEngine.Rendering.UI.DebugUIHandlerWidget
    // Base method: System.Void DebugUIHandlerWidget::OnDeselection()
    void OnDeselection();
    // public System.Void .ctor()
    // Offset: 0x52694B4
    // Implemented from: UnityEngine.Rendering.UI.DebugUIHandlerWidget
    // Base method: System.Void DebugUIHandlerWidget::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugUIHandlerValue* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::UI::DebugUIHandlerValue::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugUIHandlerValue*, creationType>()));
    }
  }; // UnityEngine.Rendering.UI.DebugUIHandlerValue
  #pragma pack(pop)
  static check_size<sizeof(DebugUIHandlerValue), 120 + sizeof(float)> __UnityEngine_Rendering_UI_DebugUIHandlerValueSizeCheck;
  static_assert(sizeof(DebugUIHandlerValue) == 0x7C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerValue::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerValue::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerValue::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerValue*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerValue::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerValue::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerValue*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerValue::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerValue::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerValue::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerValue*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerValue::SetWidget
// Il2CppName: SetWidget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerValue::*)(::UnityEngine::Rendering::DebugUI::Widget*)>(&UnityEngine::Rendering::UI::DebugUIHandlerValue::SetWidget)> {
  static const MethodInfo* get() {
    static auto* widget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/Widget")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerValue*), "SetWidget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{widget});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerValue::OnSelection
// Il2CppName: OnSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::UI::DebugUIHandlerValue::*)(bool, ::UnityEngine::Rendering::UI::DebugUIHandlerWidget*)>(&UnityEngine::Rendering::UI::DebugUIHandlerValue::OnSelection)> {
  static const MethodInfo* get() {
    static auto* fromNext = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* previous = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.UI", "DebugUIHandlerWidget")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerValue*), "OnSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromNext, previous});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerValue::OnDeselection
// Il2CppName: OnDeselection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerValue::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerValue::OnDeselection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerValue*), "OnDeselection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerValue::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
