// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Rendering.DebugUI
#include "UnityEngine/Rendering/DebugUI.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::UI
namespace UnityEngine::Rendering::UI {
  // Forward declaring type: DebugUIHandlerValue
  class DebugUIHandlerValue;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering.UI
namespace UnityEngine::Rendering::UI {
  // Forward declaring type: DebugUIHandlerPersistentCanvas
  class DebugUIHandlerPersistentCanvas;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas*, "UnityEngine.Rendering.UI", "DebugUIHandlerPersistentCanvas");
// Type namespace: UnityEngine.Rendering.UI
namespace UnityEngine::Rendering::UI {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.UI.DebugUIHandlerPersistentCanvas
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugUIHandlerPersistentCanvas : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::$$c__DisplayClass3_0
    class $$c__DisplayClass3_0;
    // Nested type: ::UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::$$c__DisplayClass5_0
    class $$c__DisplayClass5_0;
    public:
    // public UnityEngine.RectTransform panel
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::RectTransform* panel;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // public UnityEngine.RectTransform valuePrefab
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::RectTransform* valuePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.UI.DebugUIHandlerValue> m_Items
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::UI::DebugUIHandlerValue*>* m_Items;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::UI::DebugUIHandlerValue*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.DebugUI/ValueTuple> m_ValueTupleWidgets
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::DebugUI::ValueTuple*>* m_ValueTupleWidgets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::DebugUI::ValueTuple*>*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.RectTransform panel
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_panel();
    // Get instance field reference: public UnityEngine.RectTransform valuePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_valuePrefab();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.UI.DebugUIHandlerValue> m_Items
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::UI::DebugUIHandlerValue*>*& dyn_m_Items();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.DebugUI/ValueTuple> m_ValueTupleWidgets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::DebugUI::ValueTuple*>*& dyn_m_ValueTupleWidgets();
    // System.Void Toggle(UnityEngine.Rendering.DebugUI/Value widget, System.String displayName)
    // Offset: 0x5268524
    void Toggle(::UnityEngine::Rendering::DebugUI::Value* widget, ::StringW displayName);
    // System.Void Toggle(UnityEngine.Rendering.DebugUI/ValueTuple widget, System.Nullable`1<System.Int32> forceTupleIndex)
    // Offset: 0x526881C
    void Toggle(::UnityEngine::Rendering::DebugUI::ValueTuple* widget, ::System::Nullable_1<int> forceTupleIndex);
    // System.Boolean IsEmpty()
    // Offset: 0x5268BBC
    bool IsEmpty();
    // System.Void Clear()
    // Offset: 0x5268C0C
    void Clear();
    // public System.Void .ctor()
    // Offset: 0x5268DBC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugUIHandlerPersistentCanvas* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugUIHandlerPersistentCanvas*, creationType>()));
    }
  }; // UnityEngine.Rendering.UI.DebugUIHandlerPersistentCanvas
  #pragma pack(pop)
  static check_size<sizeof(DebugUIHandlerPersistentCanvas), 56 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::DebugUI::ValueTuple*>*)> __UnityEngine_Rendering_UI_DebugUIHandlerPersistentCanvasSizeCheck;
  static_assert(sizeof(DebugUIHandlerPersistentCanvas) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::Toggle
// Il2CppName: Toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::*)(::UnityEngine::Rendering::DebugUI::Value*, ::StringW)>(&UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::Toggle)> {
  static const MethodInfo* get() {
    static auto* widget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/Value")->byval_arg;
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas*), "Toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{widget, displayName});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::Toggle
// Il2CppName: Toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::*)(::UnityEngine::Rendering::DebugUI::ValueTuple*, ::System::Nullable_1<int>)>(&UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::Toggle)> {
  static const MethodInfo* get() {
    static auto* widget = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/ValueTuple")->byval_arg;
    static auto* forceTupleIndex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas*), "Toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{widget, forceTupleIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::IsEmpty
// Il2CppName: IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::IsEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas*), "IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::*)()>(&UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::UI::DebugUIHandlerPersistentCanvas::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
