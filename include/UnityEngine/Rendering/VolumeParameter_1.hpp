// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.VolumeParameter
#include "UnityEngine/Rendering/VolumeParameter.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VolumeParameter`1<T>
  template<typename T>
  class VolumeParameter_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::Rendering::VolumeParameter_1, "UnityEngine.Rendering", "VolumeParameter`1");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.VolumeParameter`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  template<typename T>
  class VolumeParameter_1 : public ::UnityEngine::Rendering::VolumeParameter/*, public ::System::IEquatable_1<::UnityEngine::Rendering::VolumeParameter_1<T>*>*/ {
    public:
    public:
    // protected T m_Value
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T m_Value;
    public:
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Rendering::VolumeParameter_1<T>*>
    operator ::System::IEquatable_1<::UnityEngine::Rendering::VolumeParameter_1<T>*>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Rendering::VolumeParameter_1<T>*>*>(this);
    }
    // Deleting conversion operator: operator bool
    constexpr operator bool() const noexcept = delete;
    // Autogenerated instance field getter
    // Get instance field: protected T m_Value
    [[deprecated("Use field access instead!")]] T& dyn_m_Value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter_1::dyn_m_Value");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Value"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public T get_value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter_1::get_value");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeParameter_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void set_value(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_value(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter_1::set_value");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeParameter_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // protected System.Void .ctor(T value, System.Boolean overrideState)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VolumeParameter_1<T>* New_ctor(T value, bool overrideState) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VolumeParameter_1<T>*, creationType>(value, overrideState)));
    }
    // public System.Void Interp(T from, T to, System.Single t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Interp(T from, T to, float t) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter_1::Interp");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeParameter_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, from, to, t);
    }
    // public System.Boolean Equals(UnityEngine.Rendering.VolumeParameter`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Equals(::UnityEngine::Rendering::VolumeParameter_1<T>* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeParameter_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Rendering.VolumeParameter
    // Base method: System.Void VolumeParameter::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VolumeParameter_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VolumeParameter_1<T>*, creationType>()));
    }
    // override System.Void Interp(UnityEngine.Rendering.VolumeParameter from, UnityEngine.Rendering.VolumeParameter to, System.Single t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Rendering.VolumeParameter
    // Base method: System.Void VolumeParameter::Interp(UnityEngine.Rendering.VolumeParameter from, UnityEngine.Rendering.VolumeParameter to, System.Single t)
    void Interp(::UnityEngine::Rendering::VolumeParameter* from, ::UnityEngine::Rendering::VolumeParameter* to, float t) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter_1::Interp");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeParameter*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, from, to, t);
    }
    // public override System.Void SetValue(UnityEngine.Rendering.VolumeParameter parameter)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Rendering.VolumeParameter
    // Base method: System.Void VolumeParameter::SetValue(UnityEngine.Rendering.VolumeParameter parameter)
    void SetValue(::UnityEngine::Rendering::VolumeParameter* parameter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter_1::SetValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeParameter*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parameter);
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter_1::GetHashCode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public override System.String ToString()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter_1::ToString");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
    }
    // public override System.Object Clone()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Rendering.VolumeParameter
    // Base method: System.Object VolumeParameter::Clone()
    ::Il2CppObject* Clone() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter_1::Clone");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::VolumeParameter*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
    }
  }; // UnityEngine.Rendering.VolumeParameter`1
  // Could not write size check! Type: UnityEngine.Rendering.VolumeParameter`1 is generic, or has no fields that are valid for size checks!
  // static public System.Boolean op_Equality(UnityEngine.Rendering.VolumeParameter`1<T> lhs, T rhs)
  // Offset: 0xFFFFFFFFFFFFFFFF
  inline bool operator ==(::UnityEngine::Rendering::VolumeParameter_1<T>& lhs, const T& rhs) {
    static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter_1::op_Equality");
    static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<VolumeParameter_1<T>*>::get(), "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(&lhs), ::il2cpp_utils::ExtractType(rhs)})));
    return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, &lhs, rhs);
  }
  // static public System.Boolean op_Inequality(UnityEngine.Rendering.VolumeParameter`1<T> lhs, T rhs)
  // Offset: 0xFFFFFFFFFFFFFFFF
  inline bool operator !=(::UnityEngine::Rendering::VolumeParameter_1<T>& lhs, const T& rhs) {
    static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::VolumeParameter_1::op_Inequality");
    static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<VolumeParameter_1<T>*>::get(), "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(&lhs), ::il2cpp_utils::ExtractType(rhs)})));
    return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, &lhs, rhs);
  }
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
