// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.IDebugDisplaySettings
#include "UnityEngine/Rendering/IDebugDisplaySettings.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Skipping declaration: <>c because it is already included!
  // Forward declaring type: IDebugDisplaySettingsData
  class IDebugDisplaySettingsData;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Lazy`1<T>
  template<typename T>
  class Lazy_1;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: DebugDisplaySettings`1<T>
  template<typename T>
  class DebugDisplaySettings_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::Rendering::DebugDisplaySettings_1, "UnityEngine.Rendering", "DebugDisplaySettings`1");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Rendering.DebugDisplaySettings`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class DebugDisplaySettings_1 : public ::Il2CppObject/*, public ::UnityEngine::Rendering::IDebugDisplaySettings*/ {
    public:
    // Nested type: ::UnityEngine::Rendering::DebugDisplaySettings_1::$$c<T>
    class $$c;
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.Rendering.DebugDisplaySettings`1/<>c
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = DebugDisplaySettings_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c";
      static constexpr bool IS_VALUE_TYPE = false;
      // Autogenerated static field getter
      // Get static field: static public readonly UnityEngine.Rendering.DebugDisplaySettings`1/<>c<T> <>9
      static typename ::UnityEngine::Rendering::DebugDisplaySettings_1<T>::$$c* _get_$$9() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::$$c::_get_$$9");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename ::UnityEngine::Rendering::DebugDisplaySettings_1<T>::$$c*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DebugDisplaySettings_1<T>::$$c*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly UnityEngine.Rendering.DebugDisplaySettings`1/<>c<T> <>9
      static void _set_$$9(typename ::UnityEngine::Rendering::DebugDisplaySettings_1<T>::$$c* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::$$c::_set_$$9");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DebugDisplaySettings_1<T>::$$c*>::get(), "<>9", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::$$c::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DebugDisplaySettings_1<T>::$$c*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename DebugDisplaySettings_1<T>::$$c* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::$$c::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename DebugDisplaySettings_1<T>::$$c*, creationType>()));
      }
      // T <.cctor>b__15_0()
      // Offset: 0xFFFFFFFFFFFFFFFF
      T $_cctor$b__15_0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::$$c::<.cctor>b__15_0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__15_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
      }
    }; // UnityEngine.Rendering.DebugDisplaySettings`1/<>c
    // Could not write size check! Type: UnityEngine.Rendering.DebugDisplaySettings`1/<>c is generic, or has no fields that are valid for size checks!
    public:
    // protected readonly System.Collections.Generic.HashSet`1<UnityEngine.Rendering.IDebugDisplaySettingsData> m_Settings
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::HashSet_1<::UnityEngine::Rendering::IDebugDisplaySettingsData*>* m_Settings;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::Rendering::IDebugDisplaySettingsData*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::Rendering::IDebugDisplaySettings
    operator ::UnityEngine::Rendering::IDebugDisplaySettings() noexcept {
      return *reinterpret_cast<::UnityEngine::Rendering::IDebugDisplaySettings*>(this);
    }
    // Creating conversion operator: operator ::System::Collections::Generic::HashSet_1<::UnityEngine::Rendering::IDebugDisplaySettingsData*>*
    constexpr operator ::System::Collections::Generic::HashSet_1<::UnityEngine::Rendering::IDebugDisplaySettingsData*>*() const noexcept {
      return m_Settings;
    }
    // Autogenerated static field getter
    // Get static field: static private readonly System.Lazy`1<T> s_Instance
    static ::System::Lazy_1<T>* _get_s_Instance() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::_get_s_Instance");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Lazy_1<T>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<DebugDisplaySettings_1<T>*>::get(), "s_Instance"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly System.Lazy`1<T> s_Instance
    static void _set_s_Instance(::System::Lazy_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::_set_s_Instance");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<DebugDisplaySettings_1<T>*>::get(), "s_Instance", value));
    }
    // Autogenerated instance field getter
    // Get instance field: protected readonly System.Collections.Generic.HashSet`1<UnityEngine.Rendering.IDebugDisplaySettingsData> m_Settings
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::Rendering::IDebugDisplaySettingsData*>*& dyn_m_Settings() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::dyn_m_Settings");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Settings"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::UnityEngine::Rendering::IDebugDisplaySettingsData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // static public T get_Instance()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T get_Instance() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::get_Instance");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<DebugDisplaySettings_1<T>*>::get(), "get_Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // public System.Boolean get_AreAnySettingsActive()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_AreAnySettingsActive() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::get_AreAnySettingsActive");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::DebugDisplaySettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Boolean get_IsPostProcessingAllowed()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsPostProcessingAllowed() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::get_IsPostProcessingAllowed");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::DebugDisplaySettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Boolean get_IsLightingActive()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsLightingActive() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::get_IsLightingActive");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::DebugDisplaySettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // protected TData Add(TData newData)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TData>
    TData Add(TData newData) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TData>, ::UnityEngine::Rendering::IDebugDisplaySettingsData>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newData)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TData, false>(this, ___generic__method, newData);
    }
    // public System.Void ForEach(System.Action`1<UnityEngine.Rendering.IDebugDisplaySettingsData> onExecute)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ForEach(::System::Action_1<::UnityEngine::Rendering::IDebugDisplaySettingsData*>* onExecute) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::ForEach");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::DebugDisplaySettings_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, onExecute);
    }
    // public System.Void Reset()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Reset() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::Reset");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::DebugDisplaySettings_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean TryGetScreenClearColor(ref UnityEngine.Color color)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGetScreenClearColor(ByRef<::UnityEngine::Color> color) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::TryGetScreenClearColor");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Rendering::DebugDisplaySettings_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(color));
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugDisplaySettings_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugDisplaySettings_1<T>*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugDisplaySettings_1::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<DebugDisplaySettings_1<T>*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
  }; // UnityEngine.Rendering.DebugDisplaySettings`1
  // Could not write size check! Type: UnityEngine.Rendering.DebugDisplaySettings`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
