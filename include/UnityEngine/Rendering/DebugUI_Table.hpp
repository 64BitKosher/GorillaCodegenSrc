// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.DebugUI
#include "UnityEngine/Rendering/DebugUI.hpp"
// Including type: UnityEngine.Rendering.DebugUI/Container
#include "UnityEngine/Rendering/DebugUI_Container.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ObservableList`1<T>
  template<typename T>
  class ObservableList_1;
  // Forward declaring type: ListChangedEventArgs`1<T>
  template<typename T>
  class ListChangedEventArgs_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::DebugUI::Table);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::DebugUI::Table*, "UnityEngine.Rendering", "DebugUI/Table");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.DebugUI/Table
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugUI::Table : public ::UnityEngine::Rendering::DebugUI::Container {
    public:
    // Nested type: ::UnityEngine::Rendering::DebugUI::Table::Row
    class Row;
    public:
    // public System.Boolean isReadOnly
    // Size: 0x1
    // Offset: 0x50
    bool isReadOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isReadOnly and: m_Header
    char __padding0[0x7] = {};
    // private System.Boolean[] m_Header
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<bool> m_Header;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    public:
    // Deleting conversion operator: operator ::UnityEngine::Rendering::ObservableList_1<::UnityEngine::Rendering::DebugUI::Widget*>*
    constexpr operator ::UnityEngine::Rendering::ObservableList_1<::UnityEngine::Rendering::DebugUI::Widget*>*() const noexcept = delete;
    // Get instance field reference: public System.Boolean isReadOnly
    [[deprecated("Use field access instead!")]] bool& dyn_isReadOnly();
    // Get instance field reference: private System.Boolean[] m_Header
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_m_Header();
    // public System.Void SetColumnVisibility(System.Int32 index, System.Boolean visible)
    // Offset: 0x5249C20
    void SetColumnVisibility(int index, bool visible);
    // public System.Boolean[] get_VisibleColumns()
    // Offset: 0x5249C6C
    ::ArrayW<bool> get_VisibleColumns();
    // public System.Void .ctor()
    // Offset: 0x5249BCC
    // Implemented from: UnityEngine.Rendering.DebugUI/Container
    // Base method: System.Void Container::.ctor()
    // Base method: System.Void Widget::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugUI::Table* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::DebugUI::Table::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugUI::Table*, creationType>()));
    }
    // protected override System.Void OnItemAdded(UnityEngine.Rendering.ObservableList`1<UnityEngine.Rendering.DebugUI/Widget> sender, UnityEngine.Rendering.ListChangedEventArgs`1<UnityEngine.Rendering.DebugUI/Widget> e)
    // Offset: 0x5249EAC
    // Implemented from: UnityEngine.Rendering.DebugUI/Container
    // Base method: System.Void Container::OnItemAdded(UnityEngine.Rendering.ObservableList`1<UnityEngine.Rendering.DebugUI/Widget> sender, UnityEngine.Rendering.ListChangedEventArgs`1<UnityEngine.Rendering.DebugUI/Widget> e)
    void OnItemAdded(::UnityEngine::Rendering::ObservableList_1<::UnityEngine::Rendering::DebugUI::Widget*>* sender, ::UnityEngine::Rendering::ListChangedEventArgs_1<::UnityEngine::Rendering::DebugUI::Widget*>* e);
    // protected override System.Void OnItemRemoved(UnityEngine.Rendering.ObservableList`1<UnityEngine.Rendering.DebugUI/Widget> sender, UnityEngine.Rendering.ListChangedEventArgs`1<UnityEngine.Rendering.DebugUI/Widget> e)
    // Offset: 0x5249ECC
    // Implemented from: UnityEngine.Rendering.DebugUI/Container
    // Base method: System.Void Container::OnItemRemoved(UnityEngine.Rendering.ObservableList`1<UnityEngine.Rendering.DebugUI/Widget> sender, UnityEngine.Rendering.ListChangedEventArgs`1<UnityEngine.Rendering.DebugUI/Widget> e)
    void OnItemRemoved(::UnityEngine::Rendering::ObservableList_1<::UnityEngine::Rendering::DebugUI::Widget*>* sender, ::UnityEngine::Rendering::ListChangedEventArgs_1<::UnityEngine::Rendering::DebugUI::Widget*>* e);
  }; // UnityEngine.Rendering.DebugUI/Table
  #pragma pack(pop)
  static check_size<sizeof(DebugUI::Table), 88 + sizeof(::ArrayW<bool>)> __UnityEngine_Rendering_DebugUI_TableSizeCheck;
  static_assert(sizeof(DebugUI::Table) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Table::SetColumnVisibility
// Il2CppName: SetColumnVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugUI::Table::*)(int, bool)>(&UnityEngine::Rendering::DebugUI::Table::SetColumnVisibility)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* visible = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Table*), "SetColumnVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, visible});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Table::get_VisibleColumns
// Il2CppName: get_VisibleColumns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<bool> (UnityEngine::Rendering::DebugUI::Table::*)()>(&UnityEngine::Rendering::DebugUI::Table::get_VisibleColumns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Table*), "get_VisibleColumns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Table::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Table::OnItemAdded
// Il2CppName: OnItemAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugUI::Table::*)(::UnityEngine::Rendering::ObservableList_1<::UnityEngine::Rendering::DebugUI::Widget*>*, ::UnityEngine::Rendering::ListChangedEventArgs_1<::UnityEngine::Rendering::DebugUI::Widget*>*)>(&UnityEngine::Rendering::DebugUI::Table::OnItemAdded)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ObservableList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/Widget")})->byval_arg;
    static auto* e = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ListChangedEventArgs`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/Widget")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Table*), "OnItemAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, e});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::DebugUI::Table::OnItemRemoved
// Il2CppName: OnItemRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::DebugUI::Table::*)(::UnityEngine::Rendering::ObservableList_1<::UnityEngine::Rendering::DebugUI::Widget*>*, ::UnityEngine::Rendering::ListChangedEventArgs_1<::UnityEngine::Rendering::DebugUI::Widget*>*)>(&UnityEngine::Rendering::DebugUI::Table::OnItemRemoved)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ObservableList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/Widget")})->byval_arg;
    static auto* e = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ListChangedEventArgs`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DebugUI/Widget")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::DebugUI::Table*), "OnItemRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, e});
  }
};
