// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.JobHandle
#include "Unity/Jobs/JobHandle.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Rendering.BatchCullingViewType
#include "UnityEngine/Rendering/BatchCullingViewType.hpp"
// Including type: UnityEngine.Rendering.BatchCullingProjectionType
#include "UnityEngine/Rendering/BatchCullingProjectionType.hpp"
// Including type: UnityEngine.Rendering.BatchCullingFlags
#include "UnityEngine/Rendering/BatchCullingFlags.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Plane
  struct Plane;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CullingSplit
  struct CullingSplit;
  // Forward declaring type: BatchCullingOutputDrawCommands
  struct BatchCullingOutputDrawCommands;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: BatchRendererCullingOutput
  struct BatchRendererCullingOutput;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::BatchRendererCullingOutput, "UnityEngine.Rendering", "BatchRendererCullingOutput");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0xA0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.BatchRendererCullingOutput
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  struct BatchRendererCullingOutput/*, public ::System::ValueType*/ {
    public:
    public:
    // public Unity.Jobs.JobHandle cullingJobsFence
    // Size: 0xC
    // Offset: 0x0
    ::Unity::Jobs::JobHandle cullingJobsFence;
    // Field size check
    static_assert(sizeof(::Unity::Jobs::JobHandle) == 0xC);
    // Padding between fields: cullingJobsFence and: localToWorldMatrix
    char __padding0[0x4] = {};
    // public UnityEngine.Matrix4x4 localToWorldMatrix
    // Size: 0x40
    // Offset: 0x10
    ::UnityEngine::Matrix4x4 localToWorldMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // public UnityEngine.Plane* cullingPlanes
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Plane* cullingPlanes;
    // Field size check
    static_assert(sizeof(::UnityEngine::Plane*) == 0x8);
    // public System.Int32 cullingPlaneCount
    // Size: 0x4
    // Offset: 0x58
    int cullingPlaneCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 receiverPlaneOffset
    // Size: 0x4
    // Offset: 0x5C
    int receiverPlaneOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 receiverPlaneCount
    // Size: 0x4
    // Offset: 0x60
    int receiverPlaneCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: receiverPlaneCount and: cullingSplits
    char __padding5[0x4] = {};
    // public UnityEngine.Rendering.CullingSplit* cullingSplits
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Rendering::CullingSplit* cullingSplits;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CullingSplit*) == 0x8);
    // public System.Int32 cullingSplitCount
    // Size: 0x4
    // Offset: 0x70
    int cullingSplitCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Rendering.BatchCullingViewType viewType
    // Size: 0x4
    // Offset: 0x74
    ::UnityEngine::Rendering::BatchCullingViewType viewType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::BatchCullingViewType) == 0x4);
    // public UnityEngine.Rendering.BatchCullingProjectionType projectionType
    // Size: 0x4
    // Offset: 0x78
    ::UnityEngine::Rendering::BatchCullingProjectionType projectionType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::BatchCullingProjectionType) == 0x4);
    // public UnityEngine.Rendering.BatchCullingFlags cullingFlags
    // Size: 0x4
    // Offset: 0x7C
    ::UnityEngine::Rendering::BatchCullingFlags cullingFlags;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::BatchCullingFlags) == 0x4);
    // public System.UInt64 viewID
    // Size: 0x8
    // Offset: 0x80
    uint64_t viewID;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt32 cullingLayerMask
    // Size: 0x4
    // Offset: 0x88
    uint cullingLayerMask;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: cullingLayerMask and: sceneCullingMask
    char __padding12[0x4] = {};
    // public System.UInt64 sceneCullingMask
    // Size: 0x8
    // Offset: 0x90
    uint64_t sceneCullingMask;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public UnityEngine.Rendering.BatchCullingOutputDrawCommands* drawCommands
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Rendering::BatchCullingOutputDrawCommands* drawCommands;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::BatchCullingOutputDrawCommands*) == 0x8);
    public:
    // Creating value type constructor for type: BatchRendererCullingOutput
    constexpr BatchRendererCullingOutput(::Unity::Jobs::JobHandle cullingJobsFence_ = {}, ::UnityEngine::Matrix4x4 localToWorldMatrix_ = {}, ::UnityEngine::Plane* cullingPlanes_ = {}, int cullingPlaneCount_ = {}, int receiverPlaneOffset_ = {}, int receiverPlaneCount_ = {}, ::UnityEngine::Rendering::CullingSplit* cullingSplits_ = {}, int cullingSplitCount_ = {}, ::UnityEngine::Rendering::BatchCullingViewType viewType_ = {}, ::UnityEngine::Rendering::BatchCullingProjectionType projectionType_ = {}, ::UnityEngine::Rendering::BatchCullingFlags cullingFlags_ = {}, uint64_t viewID_ = {}, uint cullingLayerMask_ = {}, uint64_t sceneCullingMask_ = {}, ::UnityEngine::Rendering::BatchCullingOutputDrawCommands* drawCommands_ = {}) noexcept : cullingJobsFence{cullingJobsFence_}, localToWorldMatrix{localToWorldMatrix_}, cullingPlanes{cullingPlanes_}, cullingPlaneCount{cullingPlaneCount_}, receiverPlaneOffset{receiverPlaneOffset_}, receiverPlaneCount{receiverPlaneCount_}, cullingSplits{cullingSplits_}, cullingSplitCount{cullingSplitCount_}, viewType{viewType_}, projectionType{projectionType_}, cullingFlags{cullingFlags_}, viewID{viewID_}, cullingLayerMask{cullingLayerMask_}, sceneCullingMask{sceneCullingMask_}, drawCommands{drawCommands_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Unity.Jobs.JobHandle cullingJobsFence
    [[deprecated("Use field access instead!")]] ::Unity::Jobs::JobHandle& dyn_cullingJobsFence();
    // Get instance field reference: public UnityEngine.Matrix4x4 localToWorldMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_localToWorldMatrix();
    // Get instance field reference: public UnityEngine.Plane* cullingPlanes
    [[deprecated("Use field access instead!")]] ::UnityEngine::Plane*& dyn_cullingPlanes();
    // Get instance field reference: public System.Int32 cullingPlaneCount
    [[deprecated("Use field access instead!")]] int& dyn_cullingPlaneCount();
    // Get instance field reference: public System.Int32 receiverPlaneOffset
    [[deprecated("Use field access instead!")]] int& dyn_receiverPlaneOffset();
    // Get instance field reference: public System.Int32 receiverPlaneCount
    [[deprecated("Use field access instead!")]] int& dyn_receiverPlaneCount();
    // Get instance field reference: public UnityEngine.Rendering.CullingSplit* cullingSplits
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CullingSplit*& dyn_cullingSplits();
    // Get instance field reference: public System.Int32 cullingSplitCount
    [[deprecated("Use field access instead!")]] int& dyn_cullingSplitCount();
    // Get instance field reference: public UnityEngine.Rendering.BatchCullingViewType viewType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::BatchCullingViewType& dyn_viewType();
    // Get instance field reference: public UnityEngine.Rendering.BatchCullingProjectionType projectionType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::BatchCullingProjectionType& dyn_projectionType();
    // Get instance field reference: public UnityEngine.Rendering.BatchCullingFlags cullingFlags
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::BatchCullingFlags& dyn_cullingFlags();
    // Get instance field reference: public System.UInt64 viewID
    [[deprecated("Use field access instead!")]] uint64_t& dyn_viewID();
    // Get instance field reference: public System.UInt32 cullingLayerMask
    [[deprecated("Use field access instead!")]] uint& dyn_cullingLayerMask();
    // Get instance field reference: public System.UInt64 sceneCullingMask
    [[deprecated("Use field access instead!")]] uint64_t& dyn_sceneCullingMask();
    // Get instance field reference: public UnityEngine.Rendering.BatchCullingOutputDrawCommands* drawCommands
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::BatchCullingOutputDrawCommands*& dyn_drawCommands();
  }; // UnityEngine.Rendering.BatchRendererCullingOutput
  #pragma pack(pop)
  static check_size<sizeof(BatchRendererCullingOutput), 152 + sizeof(::UnityEngine::Rendering::BatchCullingOutputDrawCommands*)> __UnityEngine_Rendering_BatchRendererCullingOutputSizeCheck;
  static_assert(sizeof(BatchRendererCullingOutput) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
