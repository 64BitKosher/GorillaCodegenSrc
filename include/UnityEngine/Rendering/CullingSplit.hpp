// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CullingSplit
  struct CullingSplit;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::CullingSplit, "UnityEngine.Rendering", "CullingSplit");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x60
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.CullingSplit
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  struct CullingSplit/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 sphereCenter
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 sphereCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single sphereRadius
    // Size: 0x4
    // Offset: 0xC
    float sphereRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 cullingPlaneOffset
    // Size: 0x4
    // Offset: 0x10
    int cullingPlaneOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 cullingPlaneCount
    // Size: 0x4
    // Offset: 0x14
    int cullingPlaneCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single cascadeBlendCullingFactor
    // Size: 0x4
    // Offset: 0x18
    float cascadeBlendCullingFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single nearPlane
    // Size: 0x4
    // Offset: 0x1C
    float nearPlane;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Matrix4x4 cullingMatrix
    // Size: 0x40
    // Offset: 0x20
    ::UnityEngine::Matrix4x4 cullingMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    public:
    // Creating value type constructor for type: CullingSplit
    constexpr CullingSplit(::UnityEngine::Vector3 sphereCenter_ = {}, float sphereRadius_ = {}, int cullingPlaneOffset_ = {}, int cullingPlaneCount_ = {}, float cascadeBlendCullingFactor_ = {}, float nearPlane_ = {}, ::UnityEngine::Matrix4x4 cullingMatrix_ = {}) noexcept : sphereCenter{sphereCenter_}, sphereRadius{sphereRadius_}, cullingPlaneOffset{cullingPlaneOffset_}, cullingPlaneCount{cullingPlaneCount_}, cascadeBlendCullingFactor{cascadeBlendCullingFactor_}, nearPlane{nearPlane_}, cullingMatrix{cullingMatrix_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 sphereCenter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_sphereCenter();
    // Get instance field reference: public System.Single sphereRadius
    [[deprecated("Use field access instead!")]] float& dyn_sphereRadius();
    // Get instance field reference: public System.Int32 cullingPlaneOffset
    [[deprecated("Use field access instead!")]] int& dyn_cullingPlaneOffset();
    // Get instance field reference: public System.Int32 cullingPlaneCount
    [[deprecated("Use field access instead!")]] int& dyn_cullingPlaneCount();
    // Get instance field reference: public System.Single cascadeBlendCullingFactor
    [[deprecated("Use field access instead!")]] float& dyn_cascadeBlendCullingFactor();
    // Get instance field reference: public System.Single nearPlane
    [[deprecated("Use field access instead!")]] float& dyn_nearPlane();
    // Get instance field reference: public UnityEngine.Matrix4x4 cullingMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_cullingMatrix();
  }; // UnityEngine.Rendering.CullingSplit
  #pragma pack(pop)
  static check_size<sizeof(CullingSplit), 32 + sizeof(::UnityEngine::Matrix4x4)> __UnityEngine_Rendering_CullingSplitSizeCheck;
  static_assert(sizeof(CullingSplit) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
