// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: AsyncRequestNativeArrayData
  struct AsyncRequestNativeArrayData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::AsyncRequestNativeArrayData, "UnityEngine.Rendering", "AsyncRequestNativeArrayData");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.AsyncRequestNativeArrayData
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  struct AsyncRequestNativeArrayData/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Void* nativeArrayBuffer
    // Size: 0x8
    // Offset: 0x0
    void* nativeArrayBuffer;
    // Field size check
    static_assert(sizeof(void*) == 0x8);
    // public System.Int64 lengthInBytes
    // Size: 0x8
    // Offset: 0x8
    int64_t lengthInBytes;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Creating value type constructor for type: AsyncRequestNativeArrayData
    constexpr AsyncRequestNativeArrayData(void* nativeArrayBuffer_ = {}, int64_t lengthInBytes_ = {}) noexcept : nativeArrayBuffer{nativeArrayBuffer_}, lengthInBytes{lengthInBytes_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Void* nativeArrayBuffer
    [[deprecated("Use field access instead!")]] void*& dyn_nativeArrayBuffer();
    // Get instance field reference: public System.Int64 lengthInBytes
    [[deprecated("Use field access instead!")]] int64_t& dyn_lengthInBytes();
    // static public UnityEngine.Rendering.AsyncRequestNativeArrayData CreateAndCheckAccess(Unity.Collections.NativeArray`1<T> array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::UnityEngine::Rendering::AsyncRequestNativeArrayData CreateAndCheckAccess(::Unity::Collections::NativeArray_1<T> array) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::AsyncRequestNativeArrayData::CreateAndCheckAccess");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Rendering", "AsyncRequestNativeArrayData", "CreateAndCheckAccess", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rendering::AsyncRequestNativeArrayData, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array);
    }
  }; // UnityEngine.Rendering.AsyncRequestNativeArrayData
  #pragma pack(pop)
  static check_size<sizeof(AsyncRequestNativeArrayData), 8 + sizeof(int64_t)> __UnityEngine_Rendering_AsyncRequestNativeArrayDataSizeCheck;
  static_assert(sizeof(AsyncRequestNativeArrayData) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::AsyncRequestNativeArrayData::CreateAndCheckAccess
// Il2CppName: CreateAndCheckAccess
// Cannot write MetadataGetter for generic methods!
