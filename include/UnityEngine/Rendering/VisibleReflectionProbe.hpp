// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: ReflectionProbe
  class ReflectionProbe;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VisibleReflectionProbe
  struct VisibleReflectionProbe;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::VisibleReflectionProbe, "UnityEngine.Rendering", "VisibleReflectionProbe");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x88
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.VisibleReflectionProbe
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  struct VisibleReflectionProbe/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::Rendering::VisibleReflectionProbe>*/ {
    public:
    public:
    // private UnityEngine.Bounds m_Bounds
    // Size: 0x18
    // Offset: 0x0
    ::UnityEngine::Bounds m_Bounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // private UnityEngine.Matrix4x4 m_LocalToWorldMatrix
    // Size: 0x40
    // Offset: 0x18
    ::UnityEngine::Matrix4x4 m_LocalToWorldMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private UnityEngine.Vector4 m_HdrData
    // Size: 0x10
    // Offset: 0x58
    ::UnityEngine::Vector4 m_HdrData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private UnityEngine.Vector3 m_Center
    // Size: 0xC
    // Offset: 0x68
    ::UnityEngine::Vector3 m_Center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_BlendDistance
    // Size: 0x4
    // Offset: 0x74
    float m_BlendDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_Importance
    // Size: 0x4
    // Offset: 0x78
    int m_Importance;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_BoxProjection
    // Size: 0x4
    // Offset: 0x7C
    int m_BoxProjection;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_InstanceId
    // Size: 0x4
    // Offset: 0x80
    int m_InstanceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_TextureId
    // Size: 0x4
    // Offset: 0x84
    int m_TextureId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: VisibleReflectionProbe
    constexpr VisibleReflectionProbe(::UnityEngine::Bounds m_Bounds_ = {}, ::UnityEngine::Matrix4x4 m_LocalToWorldMatrix_ = {}, ::UnityEngine::Vector4 m_HdrData_ = {}, ::UnityEngine::Vector3 m_Center_ = {}, float m_BlendDistance_ = {}, int m_Importance_ = {}, int m_BoxProjection_ = {}, int m_InstanceId_ = {}, int m_TextureId_ = {}) noexcept : m_Bounds{m_Bounds_}, m_LocalToWorldMatrix{m_LocalToWorldMatrix_}, m_HdrData{m_HdrData_}, m_Center{m_Center_}, m_BlendDistance{m_BlendDistance_}, m_Importance{m_Importance_}, m_BoxProjection{m_BoxProjection_}, m_InstanceId{m_InstanceId_}, m_TextureId{m_TextureId_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Rendering::VisibleReflectionProbe>
    operator ::System::IEquatable_1<::UnityEngine::Rendering::VisibleReflectionProbe>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Rendering::VisibleReflectionProbe>*>(this);
    }
    // Get instance field reference: private UnityEngine.Bounds m_Bounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_m_Bounds();
    // Get instance field reference: private UnityEngine.Matrix4x4 m_LocalToWorldMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_m_LocalToWorldMatrix();
    // Get instance field reference: private UnityEngine.Vector4 m_HdrData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_m_HdrData();
    // Get instance field reference: private UnityEngine.Vector3 m_Center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Center();
    // Get instance field reference: private System.Single m_BlendDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_BlendDistance();
    // Get instance field reference: private System.Int32 m_Importance
    [[deprecated("Use field access instead!")]] int& dyn_m_Importance();
    // Get instance field reference: private System.Int32 m_BoxProjection
    [[deprecated("Use field access instead!")]] int& dyn_m_BoxProjection();
    // Get instance field reference: private System.Int32 m_InstanceId
    [[deprecated("Use field access instead!")]] int& dyn_m_InstanceId();
    // Get instance field reference: private System.Int32 m_TextureId
    [[deprecated("Use field access instead!")]] int& dyn_m_TextureId();
    // public UnityEngine.Texture get_texture()
    // Offset: 0x54EEFE0
    ::UnityEngine::Texture* get_texture();
    // public UnityEngine.ReflectionProbe get_reflectionProbe()
    // Offset: 0x54EF088
    ::UnityEngine::ReflectionProbe* get_reflectionProbe();
    // public UnityEngine.Bounds get_bounds()
    // Offset: 0x54EF114
    ::UnityEngine::Bounds get_bounds();
    // public UnityEngine.Matrix4x4 get_localToWorldMatrix()
    // Offset: 0x54EF128
    ::UnityEngine::Matrix4x4 get_localToWorldMatrix();
    // public UnityEngine.Vector4 get_hdrData()
    // Offset: 0x54EF144
    ::UnityEngine::Vector4 get_hdrData();
    // public System.Single get_blendDistance()
    // Offset: 0x54EF150
    float get_blendDistance();
    // public System.Int32 get_importance()
    // Offset: 0x54EF158
    int get_importance();
    // public System.Boolean get_isBoxProjection()
    // Offset: 0x54EF160
    bool get_isBoxProjection();
    // public System.Boolean Equals(UnityEngine.Rendering.VisibleReflectionProbe other)
    // Offset: 0x54EF1BC
    bool Equals(::UnityEngine::Rendering::VisibleReflectionProbe other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x54EF35C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x54EF3EC
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Rendering.VisibleReflectionProbe
  #pragma pack(pop)
  static check_size<sizeof(VisibleReflectionProbe), 132 + sizeof(int)> __UnityEngine_Rendering_VisibleReflectionProbeSizeCheck;
  static_assert(sizeof(VisibleReflectionProbe) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleReflectionProbe::get_texture
// Il2CppName: get_texture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture* (UnityEngine::Rendering::VisibleReflectionProbe::*)()>(&UnityEngine::Rendering::VisibleReflectionProbe::get_texture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleReflectionProbe), "get_texture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleReflectionProbe::get_reflectionProbe
// Il2CppName: get_reflectionProbe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ReflectionProbe* (UnityEngine::Rendering::VisibleReflectionProbe::*)()>(&UnityEngine::Rendering::VisibleReflectionProbe::get_reflectionProbe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleReflectionProbe), "get_reflectionProbe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleReflectionProbe::get_bounds
// Il2CppName: get_bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (UnityEngine::Rendering::VisibleReflectionProbe::*)()>(&UnityEngine::Rendering::VisibleReflectionProbe::get_bounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleReflectionProbe), "get_bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleReflectionProbe::get_localToWorldMatrix
// Il2CppName: get_localToWorldMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (UnityEngine::Rendering::VisibleReflectionProbe::*)()>(&UnityEngine::Rendering::VisibleReflectionProbe::get_localToWorldMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleReflectionProbe), "get_localToWorldMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleReflectionProbe::get_hdrData
// Il2CppName: get_hdrData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (UnityEngine::Rendering::VisibleReflectionProbe::*)()>(&UnityEngine::Rendering::VisibleReflectionProbe::get_hdrData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleReflectionProbe), "get_hdrData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleReflectionProbe::get_blendDistance
// Il2CppName: get_blendDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::VisibleReflectionProbe::*)()>(&UnityEngine::Rendering::VisibleReflectionProbe::get_blendDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleReflectionProbe), "get_blendDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleReflectionProbe::get_importance
// Il2CppName: get_importance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::VisibleReflectionProbe::*)()>(&UnityEngine::Rendering::VisibleReflectionProbe::get_importance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleReflectionProbe), "get_importance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleReflectionProbe::get_isBoxProjection
// Il2CppName: get_isBoxProjection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::VisibleReflectionProbe::*)()>(&UnityEngine::Rendering::VisibleReflectionProbe::get_isBoxProjection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleReflectionProbe), "get_isBoxProjection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleReflectionProbe::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::VisibleReflectionProbe::*)(::UnityEngine::Rendering::VisibleReflectionProbe)>(&UnityEngine::Rendering::VisibleReflectionProbe::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VisibleReflectionProbe")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleReflectionProbe), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleReflectionProbe::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::VisibleReflectionProbe::*)(::Il2CppObject*)>(&UnityEngine::Rendering::VisibleReflectionProbe::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleReflectionProbe), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::VisibleReflectionProbe::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::VisibleReflectionProbe::*)()>(&UnityEngine::Rendering::VisibleReflectionProbe::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::VisibleReflectionProbe), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
