// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Rendering.RenderTargetBlendState
#include "UnityEngine/Rendering/RenderTargetBlendState.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: BlendState
  struct BlendState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::BlendState, "UnityEngine.Rendering", "BlendState");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x44
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.BlendState
  // [TokenAttribute] Offset: FFFFFFFF
  struct BlendState/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::Rendering::BlendState>*/ {
    public:
    public:
    // private UnityEngine.Rendering.RenderTargetBlendState m_BlendState0
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Rendering::RenderTargetBlendState m_BlendState0;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetBlendState) == 0x8);
    // private UnityEngine.Rendering.RenderTargetBlendState m_BlendState1
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Rendering::RenderTargetBlendState m_BlendState1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetBlendState) == 0x8);
    // private UnityEngine.Rendering.RenderTargetBlendState m_BlendState2
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Rendering::RenderTargetBlendState m_BlendState2;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetBlendState) == 0x8);
    // private UnityEngine.Rendering.RenderTargetBlendState m_BlendState3
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Rendering::RenderTargetBlendState m_BlendState3;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetBlendState) == 0x8);
    // private UnityEngine.Rendering.RenderTargetBlendState m_BlendState4
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rendering::RenderTargetBlendState m_BlendState4;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetBlendState) == 0x8);
    // private UnityEngine.Rendering.RenderTargetBlendState m_BlendState5
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Rendering::RenderTargetBlendState m_BlendState5;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetBlendState) == 0x8);
    // private UnityEngine.Rendering.RenderTargetBlendState m_BlendState6
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Rendering::RenderTargetBlendState m_BlendState6;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetBlendState) == 0x8);
    // private UnityEngine.Rendering.RenderTargetBlendState m_BlendState7
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Rendering::RenderTargetBlendState m_BlendState7;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetBlendState) == 0x8);
    // private System.Byte m_SeparateMRTBlendStates
    // Size: 0x1
    // Offset: 0x40
    uint8_t m_SeparateMRTBlendStates;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_AlphaToMask
    // Size: 0x1
    // Offset: 0x41
    uint8_t m_AlphaToMask;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Int16 m_Padding
    // Size: 0x2
    // Offset: 0x42
    int16_t m_Padding;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    public:
    // Creating value type constructor for type: BlendState
    constexpr BlendState(::UnityEngine::Rendering::RenderTargetBlendState m_BlendState0_ = {}, ::UnityEngine::Rendering::RenderTargetBlendState m_BlendState1_ = {}, ::UnityEngine::Rendering::RenderTargetBlendState m_BlendState2_ = {}, ::UnityEngine::Rendering::RenderTargetBlendState m_BlendState3_ = {}, ::UnityEngine::Rendering::RenderTargetBlendState m_BlendState4_ = {}, ::UnityEngine::Rendering::RenderTargetBlendState m_BlendState5_ = {}, ::UnityEngine::Rendering::RenderTargetBlendState m_BlendState6_ = {}, ::UnityEngine::Rendering::RenderTargetBlendState m_BlendState7_ = {}, uint8_t m_SeparateMRTBlendStates_ = {}, uint8_t m_AlphaToMask_ = {}, int16_t m_Padding_ = {}) noexcept : m_BlendState0{m_BlendState0_}, m_BlendState1{m_BlendState1_}, m_BlendState2{m_BlendState2_}, m_BlendState3{m_BlendState3_}, m_BlendState4{m_BlendState4_}, m_BlendState5{m_BlendState5_}, m_BlendState6{m_BlendState6_}, m_BlendState7{m_BlendState7_}, m_SeparateMRTBlendStates{m_SeparateMRTBlendStates_}, m_AlphaToMask{m_AlphaToMask_}, m_Padding{m_Padding_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Rendering::BlendState>
    operator ::System::IEquatable_1<::UnityEngine::Rendering::BlendState>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Rendering::BlendState>*>(this);
    }
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetBlendState m_BlendState0
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetBlendState& dyn_m_BlendState0();
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetBlendState m_BlendState1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetBlendState& dyn_m_BlendState1();
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetBlendState m_BlendState2
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetBlendState& dyn_m_BlendState2();
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetBlendState m_BlendState3
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetBlendState& dyn_m_BlendState3();
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetBlendState m_BlendState4
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetBlendState& dyn_m_BlendState4();
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetBlendState m_BlendState5
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetBlendState& dyn_m_BlendState5();
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetBlendState m_BlendState6
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetBlendState& dyn_m_BlendState6();
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetBlendState m_BlendState7
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetBlendState& dyn_m_BlendState7();
    // Get instance field reference: private System.Byte m_SeparateMRTBlendStates
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_SeparateMRTBlendStates();
    // Get instance field reference: private System.Byte m_AlphaToMask
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_AlphaToMask();
    // Get instance field reference: private System.Int16 m_Padding
    [[deprecated("Use field access instead!")]] int16_t& dyn_m_Padding();
    // static public UnityEngine.Rendering.BlendState get_defaultValue()
    // Offset: 0x54E4D88
    static ::UnityEngine::Rendering::BlendState get_defaultValue();
    // public System.Void .ctor(System.Boolean separateMRTBlend, System.Boolean alphaToMask)
    // Offset: 0x54E4DE0
    BlendState(bool separateMRTBlend, bool alphaToMask);
    // public System.Void set_blendState0(UnityEngine.Rendering.RenderTargetBlendState value)
    // Offset: 0x54E4EC4
    void set_blendState0(::UnityEngine::Rendering::RenderTargetBlendState value);
    // public System.Boolean Equals(UnityEngine.Rendering.BlendState other)
    // Offset: 0x54E4ECC
    bool Equals(::UnityEngine::Rendering::BlendState other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x54E4FAC
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x54E503C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Rendering.BlendState
  #pragma pack(pop)
  static check_size<sizeof(BlendState), 66 + sizeof(int16_t)> __UnityEngine_Rendering_BlendStateSizeCheck;
  static_assert(sizeof(BlendState) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::BlendState::get_defaultValue
// Il2CppName: get_defaultValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::BlendState (*)()>(&UnityEngine::Rendering::BlendState::get_defaultValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::BlendState), "get_defaultValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::BlendState::BlendState
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::BlendState::set_blendState0
// Il2CppName: set_blendState0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::BlendState::*)(::UnityEngine::Rendering::RenderTargetBlendState)>(&UnityEngine::Rendering::BlendState::set_blendState0)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetBlendState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::BlendState), "set_blendState0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::BlendState::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::BlendState::*)(::UnityEngine::Rendering::BlendState)>(&UnityEngine::Rendering::BlendState::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "BlendState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::BlendState), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::BlendState::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::BlendState::*)(::Il2CppObject*)>(&UnityEngine::Rendering::BlendState::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::BlendState), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::BlendState::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::BlendState::*)()>(&UnityEngine::Rendering::BlendState::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::BlendState), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
