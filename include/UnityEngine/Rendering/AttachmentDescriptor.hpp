// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Rendering.RenderBufferLoadAction
#include "UnityEngine/Rendering/RenderBufferLoadAction.hpp"
// Including type: UnityEngine.Rendering.RenderBufferStoreAction
#include "UnityEngine/Rendering/RenderBufferStoreAction.hpp"
// Including type: UnityEngine.Experimental.Rendering.GraphicsFormat
#include "UnityEngine/Experimental/Rendering/GraphicsFormat.hpp"
// Including type: UnityEngine.Rendering.RenderTargetIdentifier
#include "UnityEngine/Rendering/RenderTargetIdentifier.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: AttachmentDescriptor
  struct AttachmentDescriptor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::AttachmentDescriptor, "UnityEngine.Rendering", "AttachmentDescriptor");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x78
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.AttachmentDescriptor
  // [TokenAttribute] Offset: FFFFFFFF
  struct AttachmentDescriptor/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::Rendering::AttachmentDescriptor>*/ {
    public:
    public:
    // private UnityEngine.Rendering.RenderBufferLoadAction m_LoadAction
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::Rendering::RenderBufferLoadAction m_LoadAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderBufferLoadAction) == 0x4);
    // private UnityEngine.Rendering.RenderBufferStoreAction m_StoreAction
    // Size: 0x4
    // Offset: 0x4
    ::UnityEngine::Rendering::RenderBufferStoreAction m_StoreAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderBufferStoreAction) == 0x4);
    // private UnityEngine.Experimental.Rendering.GraphicsFormat m_Format
    // Size: 0x4
    // Offset: 0x8
    ::UnityEngine::Experimental::Rendering::GraphicsFormat m_Format;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::GraphicsFormat) == 0x4);
    // Padding between fields: m_Format and: m_LoadStoreTarget
    char __padding2[0x4] = {};
    // private UnityEngine.Rendering.RenderTargetIdentifier m_LoadStoreTarget
    // Size: 0x24
    // Offset: 0x10
    ::UnityEngine::Rendering::RenderTargetIdentifier m_LoadStoreTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetIdentifier) == 0x24);
    // Padding between fields: m_LoadStoreTarget and: m_ResolveTarget
    char __padding3[0x4] = {};
    // private UnityEngine.Rendering.RenderTargetIdentifier m_ResolveTarget
    // Size: 0x24
    // Offset: 0x38
    ::UnityEngine::Rendering::RenderTargetIdentifier m_ResolveTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetIdentifier) == 0x24);
    // Padding between fields: m_ResolveTarget and: m_ClearColor
    char __padding4[0x4] = {};
    // private UnityEngine.Color m_ClearColor
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Color m_ClearColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single m_ClearDepth
    // Size: 0x4
    // Offset: 0x70
    float m_ClearDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.UInt32 m_ClearStencil
    // Size: 0x4
    // Offset: 0x74
    uint m_ClearStencil;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: AttachmentDescriptor
    constexpr AttachmentDescriptor(::UnityEngine::Rendering::RenderBufferLoadAction m_LoadAction_ = {}, ::UnityEngine::Rendering::RenderBufferStoreAction m_StoreAction_ = {}, ::UnityEngine::Experimental::Rendering::GraphicsFormat m_Format_ = {}, ::UnityEngine::Rendering::RenderTargetIdentifier m_LoadStoreTarget_ = {}, ::UnityEngine::Rendering::RenderTargetIdentifier m_ResolveTarget_ = {}, ::UnityEngine::Color m_ClearColor_ = {}, float m_ClearDepth_ = {}, uint m_ClearStencil_ = {}) noexcept : m_LoadAction{m_LoadAction_}, m_StoreAction{m_StoreAction_}, m_Format{m_Format_}, m_LoadStoreTarget{m_LoadStoreTarget_}, m_ResolveTarget{m_ResolveTarget_}, m_ClearColor{m_ClearColor_}, m_ClearDepth{m_ClearDepth_}, m_ClearStencil{m_ClearStencil_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Rendering::AttachmentDescriptor>
    operator ::System::IEquatable_1<::UnityEngine::Rendering::AttachmentDescriptor>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Rendering::AttachmentDescriptor>*>(this);
    }
    // Get instance field reference: private UnityEngine.Rendering.RenderBufferLoadAction m_LoadAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderBufferLoadAction& dyn_m_LoadAction();
    // Get instance field reference: private UnityEngine.Rendering.RenderBufferStoreAction m_StoreAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderBufferStoreAction& dyn_m_StoreAction();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.GraphicsFormat m_Format
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::GraphicsFormat& dyn_m_Format();
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetIdentifier m_LoadStoreTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetIdentifier& dyn_m_LoadStoreTarget();
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetIdentifier m_ResolveTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetIdentifier& dyn_m_ResolveTarget();
    // Get instance field reference: private UnityEngine.Color m_ClearColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_ClearColor();
    // Get instance field reference: private System.Single m_ClearDepth
    [[deprecated("Use field access instead!")]] float& dyn_m_ClearDepth();
    // Get instance field reference: private System.UInt32 m_ClearStencil
    [[deprecated("Use field access instead!")]] uint& dyn_m_ClearStencil();
    // public System.Void set_loadAction(UnityEngine.Rendering.RenderBufferLoadAction value)
    // Offset: 0x54E493C
    void set_loadAction(::UnityEngine::Rendering::RenderBufferLoadAction value);
    // public System.Void set_storeAction(UnityEngine.Rendering.RenderBufferStoreAction value)
    // Offset: 0x54E4944
    void set_storeAction(::UnityEngine::Rendering::RenderBufferStoreAction value);
    // public UnityEngine.Experimental.Rendering.GraphicsFormat get_graphicsFormat()
    // Offset: 0x54E494C
    ::UnityEngine::Experimental::Rendering::GraphicsFormat get_graphicsFormat();
    // public UnityEngine.Rendering.RenderTargetIdentifier get_loadStoreTarget()
    // Offset: 0x54E4954
    ::UnityEngine::Rendering::RenderTargetIdentifier get_loadStoreTarget();
    // public System.Void set_loadStoreTarget(UnityEngine.Rendering.RenderTargetIdentifier value)
    // Offset: 0x54E4968
    void set_loadStoreTarget(::UnityEngine::Rendering::RenderTargetIdentifier value);
    // public System.Void ConfigureTarget(UnityEngine.Rendering.RenderTargetIdentifier target, System.Boolean loadExistingContents, System.Boolean storeResults)
    // Offset: 0x54E497C
    void ConfigureTarget(::UnityEngine::Rendering::RenderTargetIdentifier target, bool loadExistingContents, bool storeResults);
    // public System.Void ConfigureResolveTarget(UnityEngine.Rendering.RenderTargetIdentifier target)
    // Offset: 0x54E49C0
    void ConfigureResolveTarget(::UnityEngine::Rendering::RenderTargetIdentifier target);
    // public System.Void ConfigureClear(UnityEngine.Color clearColor, System.Single clearDepth, System.UInt32 clearStencil)
    // Offset: 0x54E49F0
    void ConfigureClear(::UnityEngine::Color clearColor, float clearDepth, uint clearStencil);
    // public System.Void .ctor(UnityEngine.Experimental.Rendering.GraphicsFormat format)
    // Offset: 0x54E4A0C
    AttachmentDescriptor(::UnityEngine::Experimental::Rendering::GraphicsFormat format);
    // public System.Boolean Equals(UnityEngine.Rendering.AttachmentDescriptor other)
    // Offset: 0x54E4A6C
    bool Equals(::UnityEngine::Rendering::AttachmentDescriptor other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x54E4BCC
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x54E4C5C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Rendering.AttachmentDescriptor
  #pragma pack(pop)
  static check_size<sizeof(AttachmentDescriptor), 116 + sizeof(uint)> __UnityEngine_Rendering_AttachmentDescriptorSizeCheck;
  static_assert(sizeof(AttachmentDescriptor) == 0x78);
  // static public System.Boolean op_Inequality(UnityEngine.Rendering.AttachmentDescriptor left, UnityEngine.Rendering.AttachmentDescriptor right)
  // Offset: 0x54E4D50
  bool operator !=(const ::UnityEngine::Rendering::AttachmentDescriptor& left, const ::UnityEngine::Rendering::AttachmentDescriptor& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::AttachmentDescriptor::set_loadAction
// Il2CppName: set_loadAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::AttachmentDescriptor::*)(::UnityEngine::Rendering::RenderBufferLoadAction)>(&UnityEngine::Rendering::AttachmentDescriptor::set_loadAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferLoadAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AttachmentDescriptor), "set_loadAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AttachmentDescriptor::set_storeAction
// Il2CppName: set_storeAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::AttachmentDescriptor::*)(::UnityEngine::Rendering::RenderBufferStoreAction)>(&UnityEngine::Rendering::AttachmentDescriptor::set_storeAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AttachmentDescriptor), "set_storeAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AttachmentDescriptor::get_graphicsFormat
// Il2CppName: get_graphicsFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::GraphicsFormat (UnityEngine::Rendering::AttachmentDescriptor::*)()>(&UnityEngine::Rendering::AttachmentDescriptor::get_graphicsFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AttachmentDescriptor), "get_graphicsFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AttachmentDescriptor::get_loadStoreTarget
// Il2CppName: get_loadStoreTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderTargetIdentifier (UnityEngine::Rendering::AttachmentDescriptor::*)()>(&UnityEngine::Rendering::AttachmentDescriptor::get_loadStoreTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AttachmentDescriptor), "get_loadStoreTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AttachmentDescriptor::set_loadStoreTarget
// Il2CppName: set_loadStoreTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::AttachmentDescriptor::*)(::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Rendering::AttachmentDescriptor::set_loadStoreTarget)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AttachmentDescriptor), "set_loadStoreTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AttachmentDescriptor::ConfigureTarget
// Il2CppName: ConfigureTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::AttachmentDescriptor::*)(::UnityEngine::Rendering::RenderTargetIdentifier, bool, bool)>(&UnityEngine::Rendering::AttachmentDescriptor::ConfigureTarget)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* loadExistingContents = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* storeResults = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AttachmentDescriptor), "ConfigureTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, loadExistingContents, storeResults});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AttachmentDescriptor::ConfigureResolveTarget
// Il2CppName: ConfigureResolveTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::AttachmentDescriptor::*)(::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Rendering::AttachmentDescriptor::ConfigureResolveTarget)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AttachmentDescriptor), "ConfigureResolveTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AttachmentDescriptor::ConfigureClear
// Il2CppName: ConfigureClear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::AttachmentDescriptor::*)(::UnityEngine::Color, float, uint)>(&UnityEngine::Rendering::AttachmentDescriptor::ConfigureClear)> {
  static const MethodInfo* get() {
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* clearDepth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* clearStencil = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AttachmentDescriptor), "ConfigureClear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clearColor, clearDepth, clearStencil});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AttachmentDescriptor::AttachmentDescriptor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::AttachmentDescriptor::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::AttachmentDescriptor::*)(::UnityEngine::Rendering::AttachmentDescriptor)>(&UnityEngine::Rendering::AttachmentDescriptor::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "AttachmentDescriptor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AttachmentDescriptor), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AttachmentDescriptor::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::AttachmentDescriptor::*)(::Il2CppObject*)>(&UnityEngine::Rendering::AttachmentDescriptor::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AttachmentDescriptor), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AttachmentDescriptor::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::AttachmentDescriptor::*)()>(&UnityEngine::Rendering::AttachmentDescriptor::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::AttachmentDescriptor), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::AttachmentDescriptor::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
