// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VolumeProfile
  class VolumeProfile;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: Volume
  class Volume;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::Volume);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::Volume*, "UnityEngine.Rendering", "Volume");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.Volume
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class Volume : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Boolean m_IsGlobal
    // Size: 0x1
    // Offset: 0x20
    bool m_IsGlobal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_IsGlobal and: priority
    char __padding0[0x3] = {};
    // public System.Single priority
    // Size: 0x4
    // Offset: 0x24
    float priority;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single blendDistance
    // Size: 0x4
    // Offset: 0x28
    float blendDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single weight
    // Size: 0x4
    // Offset: 0x2C
    float weight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Rendering.VolumeProfile sharedProfile
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Rendering::VolumeProfile* sharedProfile;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::VolumeProfile*) == 0x8);
    // System.Collections.Generic.List`1<UnityEngine.Collider> m_Colliders
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* m_Colliders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    // private System.Int32 m_PreviousLayer
    // Size: 0x4
    // Offset: 0x40
    int m_PreviousLayer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_PreviousPriority
    // Size: 0x4
    // Offset: 0x44
    float m_PreviousPriority;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Rendering.VolumeProfile m_InternalProfile
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Rendering::VolumeProfile* m_InternalProfile;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::VolumeProfile*) == 0x8);
    public:
    // Get instance field reference: private System.Boolean m_IsGlobal
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsGlobal();
    // Get instance field reference: public System.Single priority
    [[deprecated("Use field access instead!")]] float& dyn_priority();
    // Get instance field reference: public System.Single blendDistance
    [[deprecated("Use field access instead!")]] float& dyn_blendDistance();
    // Get instance field reference: public System.Single weight
    [[deprecated("Use field access instead!")]] float& dyn_weight();
    // Get instance field reference: public UnityEngine.Rendering.VolumeProfile sharedProfile
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::VolumeProfile*& dyn_sharedProfile();
    // Get instance field reference: System.Collections.Generic.List`1<UnityEngine.Collider> m_Colliders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn_m_Colliders();
    // Get instance field reference: private System.Int32 m_PreviousLayer
    [[deprecated("Use field access instead!")]] int& dyn_m_PreviousLayer();
    // Get instance field reference: private System.Single m_PreviousPriority
    [[deprecated("Use field access instead!")]] float& dyn_m_PreviousPriority();
    // Get instance field reference: private UnityEngine.Rendering.VolumeProfile m_InternalProfile
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::VolumeProfile*& dyn_m_InternalProfile();
    // public System.Boolean get_isGlobal()
    // Offset: 0x525F55C
    bool get_isGlobal();
    // public System.Void set_isGlobal(System.Boolean value)
    // Offset: 0x525F564
    void set_isGlobal(bool value);
    // public UnityEngine.Rendering.VolumeProfile get_profile()
    // Offset: 0x525F570
    ::UnityEngine::Rendering::VolumeProfile* get_profile();
    // public System.Void set_profile(UnityEngine.Rendering.VolumeProfile value)
    // Offset: 0x525F858
    void set_profile(::UnityEngine::Rendering::VolumeProfile* value);
    // public System.Collections.Generic.List`1<UnityEngine.Collider> get_colliders()
    // Offset: 0x525F860
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* get_colliders();
    // UnityEngine.Rendering.VolumeProfile get_profileRef()
    // Offset: 0x525F868
    ::UnityEngine::Rendering::VolumeProfile* get_profileRef();
    // public System.Boolean HasInstantiatedProfile()
    // Offset: 0x525F8E0
    bool HasInstantiatedProfile();
    // private System.Void OnEnable()
    // Offset: 0x525F940
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x525FD08
    void OnDisable();
    // private System.Void Update()
    // Offset: 0x525FF34
    void Update();
    // System.Void UpdateLayer()
    // Offset: 0x525FFD8
    void UpdateLayer();
    // public System.Void .ctor()
    // Offset: 0x5260234
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Volume* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::Volume::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Volume*, creationType>()));
    }
  }; // UnityEngine.Rendering.Volume
  #pragma pack(pop)
  static check_size<sizeof(Volume), 72 + sizeof(::UnityEngine::Rendering::VolumeProfile*)> __UnityEngine_Rendering_VolumeSizeCheck;
  static_assert(sizeof(Volume) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::Volume::get_isGlobal
// Il2CppName: get_isGlobal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Volume::*)()>(&UnityEngine::Rendering::Volume::get_isGlobal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Volume*), "get_isGlobal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Volume::set_isGlobal
// Il2CppName: set_isGlobal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Volume::*)(bool)>(&UnityEngine::Rendering::Volume::set_isGlobal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Volume*), "set_isGlobal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Volume::get_profile
// Il2CppName: get_profile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::VolumeProfile* (UnityEngine::Rendering::Volume::*)()>(&UnityEngine::Rendering::Volume::get_profile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Volume*), "get_profile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Volume::set_profile
// Il2CppName: set_profile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Volume::*)(::UnityEngine::Rendering::VolumeProfile*)>(&UnityEngine::Rendering::Volume::set_profile)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VolumeProfile")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Volume*), "set_profile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Volume::get_colliders
// Il2CppName: get_colliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Collider*>* (UnityEngine::Rendering::Volume::*)()>(&UnityEngine::Rendering::Volume::get_colliders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Volume*), "get_colliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Volume::get_profileRef
// Il2CppName: get_profileRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::VolumeProfile* (UnityEngine::Rendering::Volume::*)()>(&UnityEngine::Rendering::Volume::get_profileRef)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Volume*), "get_profileRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Volume::HasInstantiatedProfile
// Il2CppName: HasInstantiatedProfile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::Volume::*)()>(&UnityEngine::Rendering::Volume::HasInstantiatedProfile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Volume*), "HasInstantiatedProfile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Volume::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Volume::*)()>(&UnityEngine::Rendering::Volume::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Volume*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Volume::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Volume::*)()>(&UnityEngine::Rendering::Volume::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Volume*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Volume::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Volume::*)()>(&UnityEngine::Rendering::Volume::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Volume*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Volume::UpdateLayer
// Il2CppName: UpdateLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::Volume::*)()>(&UnityEngine::Rendering::Volume::UpdateLayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::Volume*), "UpdateLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::Volume::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
