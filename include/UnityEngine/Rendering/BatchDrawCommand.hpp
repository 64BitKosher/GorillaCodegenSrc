// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Rendering.BatchID
#include "UnityEngine/Rendering/BatchID.hpp"
// Including type: UnityEngine.Rendering.BatchMaterialID
#include "UnityEngine/Rendering/BatchMaterialID.hpp"
// Including type: UnityEngine.Rendering.BatchMeshID
#include "UnityEngine/Rendering/BatchMeshID.hpp"
// Including type: UnityEngine.Rendering.BatchDrawCommandFlags
#include "UnityEngine/Rendering/BatchDrawCommandFlags.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: BatchDrawCommand
  struct BatchDrawCommand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::BatchDrawCommand, "UnityEngine.Rendering", "BatchDrawCommand");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.BatchDrawCommand
  // [TokenAttribute] Offset: FFFFFFFF
  struct BatchDrawCommand/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt32 visibleOffset
    // Size: 0x4
    // Offset: 0x0
    uint visibleOffset;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 visibleCount
    // Size: 0x4
    // Offset: 0x4
    uint visibleCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public UnityEngine.Rendering.BatchID batchID
    // Size: 0x4
    // Offset: 0x8
    ::UnityEngine::Rendering::BatchID batchID;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::BatchID) == 0x4);
    // public UnityEngine.Rendering.BatchMaterialID materialID
    // Size: 0x4
    // Offset: 0xC
    ::UnityEngine::Rendering::BatchMaterialID materialID;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::BatchMaterialID) == 0x4);
    // public UnityEngine.Rendering.BatchMeshID meshID
    // Size: 0x4
    // Offset: 0x10
    ::UnityEngine::Rendering::BatchMeshID meshID;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::BatchMeshID) == 0x4);
    // public System.UInt16 submeshIndex
    // Size: 0x2
    // Offset: 0x14
    uint16_t submeshIndex;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 splitVisibilityMask
    // Size: 0x2
    // Offset: 0x16
    uint16_t splitVisibilityMask;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public UnityEngine.Rendering.BatchDrawCommandFlags flags
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::Rendering::BatchDrawCommandFlags flags;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::BatchDrawCommandFlags) == 0x4);
    // public System.Int32 sortingPosition
    // Size: 0x4
    // Offset: 0x1C
    int sortingPosition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: BatchDrawCommand
    constexpr BatchDrawCommand(uint visibleOffset_ = {}, uint visibleCount_ = {}, ::UnityEngine::Rendering::BatchID batchID_ = {}, ::UnityEngine::Rendering::BatchMaterialID materialID_ = {}, ::UnityEngine::Rendering::BatchMeshID meshID_ = {}, uint16_t submeshIndex_ = {}, uint16_t splitVisibilityMask_ = {}, ::UnityEngine::Rendering::BatchDrawCommandFlags flags_ = {}, int sortingPosition_ = {}) noexcept : visibleOffset{visibleOffset_}, visibleCount{visibleCount_}, batchID{batchID_}, materialID{materialID_}, meshID{meshID_}, submeshIndex{submeshIndex_}, splitVisibilityMask{splitVisibilityMask_}, flags{flags_}, sortingPosition{sortingPosition_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt32 visibleOffset
    [[deprecated("Use field access instead!")]] uint& dyn_visibleOffset();
    // Get instance field reference: public System.UInt32 visibleCount
    [[deprecated("Use field access instead!")]] uint& dyn_visibleCount();
    // Get instance field reference: public UnityEngine.Rendering.BatchID batchID
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::BatchID& dyn_batchID();
    // Get instance field reference: public UnityEngine.Rendering.BatchMaterialID materialID
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::BatchMaterialID& dyn_materialID();
    // Get instance field reference: public UnityEngine.Rendering.BatchMeshID meshID
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::BatchMeshID& dyn_meshID();
    // Get instance field reference: public System.UInt16 submeshIndex
    [[deprecated("Use field access instead!")]] uint16_t& dyn_submeshIndex();
    // Get instance field reference: public System.UInt16 splitVisibilityMask
    [[deprecated("Use field access instead!")]] uint16_t& dyn_splitVisibilityMask();
    // Get instance field reference: public UnityEngine.Rendering.BatchDrawCommandFlags flags
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::BatchDrawCommandFlags& dyn_flags();
    // Get instance field reference: public System.Int32 sortingPosition
    [[deprecated("Use field access instead!")]] int& dyn_sortingPosition();
  }; // UnityEngine.Rendering.BatchDrawCommand
  #pragma pack(pop)
  static check_size<sizeof(BatchDrawCommand), 28 + sizeof(int)> __UnityEngine_Rendering_BatchDrawCommandSizeCheck;
  static_assert(sizeof(BatchDrawCommand) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
