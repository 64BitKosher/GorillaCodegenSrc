// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: FrameTiming
  struct FrameTiming;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::FrameTiming, "UnityEngine", "FrameTiming");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x54
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.FrameTiming
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  struct FrameTiming/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Double cpuFrameTime
    // Size: 0x8
    // Offset: 0x0
    double cpuFrameTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double cpuMainThreadFrameTime
    // Size: 0x8
    // Offset: 0x8
    double cpuMainThreadFrameTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double cpuMainThreadPresentWaitTime
    // Size: 0x8
    // Offset: 0x10
    double cpuMainThreadPresentWaitTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double cpuRenderThreadFrameTime
    // Size: 0x8
    // Offset: 0x18
    double cpuRenderThreadFrameTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double gpuFrameTime
    // Size: 0x8
    // Offset: 0x20
    double gpuFrameTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.UInt64 frameStartTimestamp
    // Size: 0x8
    // Offset: 0x28
    uint64_t frameStartTimestamp;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt64 firstSubmitTimestamp
    // Size: 0x8
    // Offset: 0x30
    uint64_t firstSubmitTimestamp;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt64 cpuTimePresentCalled
    // Size: 0x8
    // Offset: 0x38
    uint64_t cpuTimePresentCalled;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt64 cpuTimeFrameComplete
    // Size: 0x8
    // Offset: 0x40
    uint64_t cpuTimeFrameComplete;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.Single heightScale
    // Size: 0x4
    // Offset: 0x48
    float heightScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single widthScale
    // Size: 0x4
    // Offset: 0x4C
    float widthScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.UInt32 syncInterval
    // Size: 0x4
    // Offset: 0x50
    uint syncInterval;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: FrameTiming
    constexpr FrameTiming(double cpuFrameTime_ = {}, double cpuMainThreadFrameTime_ = {}, double cpuMainThreadPresentWaitTime_ = {}, double cpuRenderThreadFrameTime_ = {}, double gpuFrameTime_ = {}, uint64_t frameStartTimestamp_ = {}, uint64_t firstSubmitTimestamp_ = {}, uint64_t cpuTimePresentCalled_ = {}, uint64_t cpuTimeFrameComplete_ = {}, float heightScale_ = {}, float widthScale_ = {}, uint syncInterval_ = {}) noexcept : cpuFrameTime{cpuFrameTime_}, cpuMainThreadFrameTime{cpuMainThreadFrameTime_}, cpuMainThreadPresentWaitTime{cpuMainThreadPresentWaitTime_}, cpuRenderThreadFrameTime{cpuRenderThreadFrameTime_}, gpuFrameTime{gpuFrameTime_}, frameStartTimestamp{frameStartTimestamp_}, firstSubmitTimestamp{firstSubmitTimestamp_}, cpuTimePresentCalled{cpuTimePresentCalled_}, cpuTimeFrameComplete{cpuTimeFrameComplete_}, heightScale{heightScale_}, widthScale{widthScale_}, syncInterval{syncInterval_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Double cpuFrameTime
    [[deprecated("Use field access instead!")]] double& dyn_cpuFrameTime();
    // Get instance field reference: public System.Double cpuMainThreadFrameTime
    [[deprecated("Use field access instead!")]] double& dyn_cpuMainThreadFrameTime();
    // Get instance field reference: public System.Double cpuMainThreadPresentWaitTime
    [[deprecated("Use field access instead!")]] double& dyn_cpuMainThreadPresentWaitTime();
    // Get instance field reference: public System.Double cpuRenderThreadFrameTime
    [[deprecated("Use field access instead!")]] double& dyn_cpuRenderThreadFrameTime();
    // Get instance field reference: public System.Double gpuFrameTime
    [[deprecated("Use field access instead!")]] double& dyn_gpuFrameTime();
    // Get instance field reference: public System.UInt64 frameStartTimestamp
    [[deprecated("Use field access instead!")]] uint64_t& dyn_frameStartTimestamp();
    // Get instance field reference: public System.UInt64 firstSubmitTimestamp
    [[deprecated("Use field access instead!")]] uint64_t& dyn_firstSubmitTimestamp();
    // Get instance field reference: public System.UInt64 cpuTimePresentCalled
    [[deprecated("Use field access instead!")]] uint64_t& dyn_cpuTimePresentCalled();
    // Get instance field reference: public System.UInt64 cpuTimeFrameComplete
    [[deprecated("Use field access instead!")]] uint64_t& dyn_cpuTimeFrameComplete();
    // Get instance field reference: public System.Single heightScale
    [[deprecated("Use field access instead!")]] float& dyn_heightScale();
    // Get instance field reference: public System.Single widthScale
    [[deprecated("Use field access instead!")]] float& dyn_widthScale();
    // Get instance field reference: public System.UInt32 syncInterval
    [[deprecated("Use field access instead!")]] uint& dyn_syncInterval();
  }; // UnityEngine.FrameTiming
  #pragma pack(pop)
  static check_size<sizeof(FrameTiming), 80 + sizeof(uint)> __UnityEngine_FrameTimingSizeCheck;
  static_assert(sizeof(FrameTiming) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
