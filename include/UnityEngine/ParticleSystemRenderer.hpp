// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.ParticleSystemVertexStream
#include "UnityEngine/ParticleSystemVertexStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystemVertexStreams
  struct ParticleSystemVertexStreams;
  // Forward declaring type: ParticleSystemRenderSpace
  struct ParticleSystemRenderSpace;
  // Forward declaring type: ParticleSystemRenderMode
  struct ParticleSystemRenderMode;
  // Forward declaring type: ParticleSystemMeshDistribution
  struct ParticleSystemMeshDistribution;
  // Forward declaring type: ParticleSystemSortMode
  struct ParticleSystemSortMode;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: SpriteMaskInteraction
  struct SpriteMaskInteraction;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystemRenderer
  class ParticleSystemRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::ParticleSystemRenderer);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ParticleSystemRenderer*, "UnityEngine", "ParticleSystemRenderer");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ParticleSystemRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  class ParticleSystemRenderer : public ::UnityEngine::Renderer {
    public:
    // public System.Void EnableVertexStreams(UnityEngine.ParticleSystemVertexStreams streams)
    // Offset: 0x55211B4
    void EnableVertexStreams(::UnityEngine::ParticleSystemVertexStreams streams);
    // public System.Void DisableVertexStreams(UnityEngine.ParticleSystemVertexStreams streams)
    // Offset: 0x5521E84
    void DisableVertexStreams(::UnityEngine::ParticleSystemVertexStreams streams);
    // public System.Boolean AreVertexStreamsEnabled(UnityEngine.ParticleSystemVertexStreams streams)
    // Offset: 0x5521E8C
    bool AreVertexStreamsEnabled(::UnityEngine::ParticleSystemVertexStreams streams);
    // public UnityEngine.ParticleSystemVertexStreams GetEnabledVertexStreams(UnityEngine.ParticleSystemVertexStreams streams)
    // Offset: 0x5522124
    ::UnityEngine::ParticleSystemVertexStreams GetEnabledVertexStreams(::UnityEngine::ParticleSystemVertexStreams streams);
    // System.Void Internal_SetVertexStreams(UnityEngine.ParticleSystemVertexStreams streams, System.Boolean enabled)
    // Offset: 0x55211BC
    void Internal_SetVertexStreams(::UnityEngine::ParticleSystemVertexStreams streams, bool enabled);
    // UnityEngine.ParticleSystemVertexStreams Internal_GetEnabledVertexStreams(UnityEngine.ParticleSystemVertexStreams streams)
    // Offset: 0x5521EA8
    ::UnityEngine::ParticleSystemVertexStreams Internal_GetEnabledVertexStreams(::UnityEngine::ParticleSystemVertexStreams streams);
    // public UnityEngine.ParticleSystemRenderSpace get_alignment()
    // Offset: 0x55221EC
    ::UnityEngine::ParticleSystemRenderSpace get_alignment();
    // public System.Void set_alignment(UnityEngine.ParticleSystemRenderSpace value)
    // Offset: 0x5522228
    void set_alignment(::UnityEngine::ParticleSystemRenderSpace value);
    // public UnityEngine.ParticleSystemRenderMode get_renderMode()
    // Offset: 0x552226C
    ::UnityEngine::ParticleSystemRenderMode get_renderMode();
    // public System.Void set_renderMode(UnityEngine.ParticleSystemRenderMode value)
    // Offset: 0x55222A8
    void set_renderMode(::UnityEngine::ParticleSystemRenderMode value);
    // public UnityEngine.ParticleSystemMeshDistribution get_meshDistribution()
    // Offset: 0x55222EC
    ::UnityEngine::ParticleSystemMeshDistribution get_meshDistribution();
    // public System.Void set_meshDistribution(UnityEngine.ParticleSystemMeshDistribution value)
    // Offset: 0x5522328
    void set_meshDistribution(::UnityEngine::ParticleSystemMeshDistribution value);
    // public UnityEngine.ParticleSystemSortMode get_sortMode()
    // Offset: 0x552236C
    ::UnityEngine::ParticleSystemSortMode get_sortMode();
    // public System.Void set_sortMode(UnityEngine.ParticleSystemSortMode value)
    // Offset: 0x55223A8
    void set_sortMode(::UnityEngine::ParticleSystemSortMode value);
    // public System.Single get_lengthScale()
    // Offset: 0x55223EC
    float get_lengthScale();
    // public System.Void set_lengthScale(System.Single value)
    // Offset: 0x5522428
    void set_lengthScale(float value);
    // public System.Single get_velocityScale()
    // Offset: 0x5522474
    float get_velocityScale();
    // public System.Void set_velocityScale(System.Single value)
    // Offset: 0x55224B0
    void set_velocityScale(float value);
    // public System.Single get_cameraVelocityScale()
    // Offset: 0x55224FC
    float get_cameraVelocityScale();
    // public System.Void set_cameraVelocityScale(System.Single value)
    // Offset: 0x5522538
    void set_cameraVelocityScale(float value);
    // public System.Single get_normalDirection()
    // Offset: 0x5522584
    float get_normalDirection();
    // public System.Void set_normalDirection(System.Single value)
    // Offset: 0x55225C0
    void set_normalDirection(float value);
    // public System.Single get_shadowBias()
    // Offset: 0x552260C
    float get_shadowBias();
    // public System.Void set_shadowBias(System.Single value)
    // Offset: 0x5522648
    void set_shadowBias(float value);
    // public System.Single get_sortingFudge()
    // Offset: 0x5522694
    float get_sortingFudge();
    // public System.Void set_sortingFudge(System.Single value)
    // Offset: 0x55226D0
    void set_sortingFudge(float value);
    // public System.Single get_minParticleSize()
    // Offset: 0x552271C
    float get_minParticleSize();
    // public System.Void set_minParticleSize(System.Single value)
    // Offset: 0x5522758
    void set_minParticleSize(float value);
    // public System.Single get_maxParticleSize()
    // Offset: 0x55227A4
    float get_maxParticleSize();
    // public System.Void set_maxParticleSize(System.Single value)
    // Offset: 0x55227E0
    void set_maxParticleSize(float value);
    // public UnityEngine.Vector3 get_pivot()
    // Offset: 0x552282C
    ::UnityEngine::Vector3 get_pivot();
    // public System.Void set_pivot(UnityEngine.Vector3 value)
    // Offset: 0x55228CC
    void set_pivot(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_flip()
    // Offset: 0x5522964
    ::UnityEngine::Vector3 get_flip();
    // public System.Void set_flip(UnityEngine.Vector3 value)
    // Offset: 0x5522A04
    void set_flip(::UnityEngine::Vector3 value);
    // public UnityEngine.SpriteMaskInteraction get_maskInteraction()
    // Offset: 0x5522A9C
    ::UnityEngine::SpriteMaskInteraction get_maskInteraction();
    // public System.Void set_maskInteraction(UnityEngine.SpriteMaskInteraction value)
    // Offset: 0x5522AD8
    void set_maskInteraction(::UnityEngine::SpriteMaskInteraction value);
    // public UnityEngine.Material get_trailMaterial()
    // Offset: 0x5522B1C
    ::UnityEngine::Material* get_trailMaterial();
    // public System.Void set_trailMaterial(UnityEngine.Material value)
    // Offset: 0x5522B58
    void set_trailMaterial(::UnityEngine::Material* value);
    // System.Void set_oldTrailMaterial(UnityEngine.Material value)
    // Offset: 0x5522B9C
    void set_oldTrailMaterial(::UnityEngine::Material* value);
    // public System.Boolean get_enableGPUInstancing()
    // Offset: 0x5522BE0
    bool get_enableGPUInstancing();
    // public System.Void set_enableGPUInstancing(System.Boolean value)
    // Offset: 0x5522C1C
    void set_enableGPUInstancing(bool value);
    // public System.Boolean get_allowRoll()
    // Offset: 0x5522C60
    bool get_allowRoll();
    // public System.Void set_allowRoll(System.Boolean value)
    // Offset: 0x5522C9C
    void set_allowRoll(bool value);
    // public System.Boolean get_freeformStretching()
    // Offset: 0x5522CE0
    bool get_freeformStretching();
    // public System.Void set_freeformStretching(System.Boolean value)
    // Offset: 0x5522D1C
    void set_freeformStretching(bool value);
    // public System.Boolean get_rotateWithStretchDirection()
    // Offset: 0x5522D60
    bool get_rotateWithStretchDirection();
    // public System.Void set_rotateWithStretchDirection(System.Boolean value)
    // Offset: 0x5522D9C
    void set_rotateWithStretchDirection(bool value);
    // public UnityEngine.Mesh get_mesh()
    // Offset: 0x5522DE0
    ::UnityEngine::Mesh* get_mesh();
    // public System.Void set_mesh(UnityEngine.Mesh value)
    // Offset: 0x5522E1C
    void set_mesh(::UnityEngine::Mesh* value);
    // public System.Int32 GetMeshes(out UnityEngine.Mesh[] meshes)
    // Offset: 0x5522E60
    int GetMeshes(ByRef<::ArrayW<::UnityEngine::Mesh*>> meshes);
    // public System.Void SetMeshes(UnityEngine.Mesh[] meshes, System.Int32 size)
    // Offset: 0x5522EA4
    void SetMeshes(::ArrayW<::UnityEngine::Mesh*> meshes, int size);
    // public System.Void SetMeshes(UnityEngine.Mesh[] meshes)
    // Offset: 0x5522EF8
    void SetMeshes(::ArrayW<::UnityEngine::Mesh*> meshes);
    // public System.Int32 GetMeshWeightings(out System.Single[] weightings)
    // Offset: 0x5522F54
    int GetMeshWeightings(ByRef<::ArrayW<float>> weightings);
    // public System.Void SetMeshWeightings(System.Single[] weightings, System.Int32 size)
    // Offset: 0x5522F98
    void SetMeshWeightings(::ArrayW<float> weightings, int size);
    // public System.Void SetMeshWeightings(System.Single[] weightings)
    // Offset: 0x5522FEC
    void SetMeshWeightings(::ArrayW<float> weightings);
    // public System.Int32 get_meshCount()
    // Offset: 0x5523048
    int get_meshCount();
    // public System.Void BakeMesh(UnityEngine.Mesh mesh, System.Boolean useTransform)
    // Offset: 0x5523084
    void BakeMesh(::UnityEngine::Mesh* mesh, bool useTransform);
    // public System.Void BakeMesh(UnityEngine.Mesh mesh, UnityEngine.Camera camera, System.Boolean useTransform)
    // Offset: 0x55230E8
    void BakeMesh(::UnityEngine::Mesh* mesh, ::UnityEngine::Camera* camera, bool useTransform);
    // public System.Void BakeTrailsMesh(UnityEngine.Mesh mesh, System.Boolean useTransform)
    // Offset: 0x5523144
    void BakeTrailsMesh(::UnityEngine::Mesh* mesh, bool useTransform);
    // public System.Void BakeTrailsMesh(UnityEngine.Mesh mesh, UnityEngine.Camera camera, System.Boolean useTransform)
    // Offset: 0x55231A8
    void BakeTrailsMesh(::UnityEngine::Mesh* mesh, ::UnityEngine::Camera* camera, bool useTransform);
    // public System.Int32 get_activeVertexStreamsCount()
    // Offset: 0x5522128
    int get_activeVertexStreamsCount();
    // public System.Void SetActiveVertexStreams(System.Collections.Generic.List`1<UnityEngine.ParticleSystemVertexStream> streams)
    // Offset: 0x55221A8
    void SetActiveVertexStreams(::System::Collections::Generic::List_1<::UnityEngine::ParticleSystemVertexStream>* streams);
    // public System.Void GetActiveVertexStreams(System.Collections.Generic.List`1<UnityEngine.ParticleSystemVertexStream> streams)
    // Offset: 0x5522164
    void GetActiveVertexStreams(::System::Collections::Generic::List_1<::UnityEngine::ParticleSystemVertexStream>* streams);
    // public System.Void .ctor()
    // Offset: 0x5523204
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParticleSystemRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ParticleSystemRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParticleSystemRenderer*, creationType>()));
    }
    // private System.Void get_pivot_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x5522888
    void get_pivot_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_pivot_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x5522920
    void set_pivot_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_flip_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x55229C0
    void get_flip_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_flip_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x5522A58
    void set_flip_Injected(ByRef<::UnityEngine::Vector3> value);
  }; // UnityEngine.ParticleSystemRenderer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::EnableVertexStreams
// Il2CppName: EnableVertexStreams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::ParticleSystemVertexStreams)>(&UnityEngine::ParticleSystemRenderer::EnableVertexStreams)> {
  static const MethodInfo* get() {
    static auto* streams = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemVertexStreams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "EnableVertexStreams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{streams});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::DisableVertexStreams
// Il2CppName: DisableVertexStreams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::ParticleSystemVertexStreams)>(&UnityEngine::ParticleSystemRenderer::DisableVertexStreams)> {
  static const MethodInfo* get() {
    static auto* streams = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemVertexStreams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "DisableVertexStreams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{streams});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::AreVertexStreamsEnabled
// Il2CppName: AreVertexStreamsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::ParticleSystemVertexStreams)>(&UnityEngine::ParticleSystemRenderer::AreVertexStreamsEnabled)> {
  static const MethodInfo* get() {
    static auto* streams = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemVertexStreams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "AreVertexStreamsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{streams});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::GetEnabledVertexStreams
// Il2CppName: GetEnabledVertexStreams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystemVertexStreams (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::ParticleSystemVertexStreams)>(&UnityEngine::ParticleSystemRenderer::GetEnabledVertexStreams)> {
  static const MethodInfo* get() {
    static auto* streams = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemVertexStreams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "GetEnabledVertexStreams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{streams});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::Internal_SetVertexStreams
// Il2CppName: Internal_SetVertexStreams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::ParticleSystemVertexStreams, bool)>(&UnityEngine::ParticleSystemRenderer::Internal_SetVertexStreams)> {
  static const MethodInfo* get() {
    static auto* streams = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemVertexStreams")->byval_arg;
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "Internal_SetVertexStreams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{streams, enabled});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::Internal_GetEnabledVertexStreams
// Il2CppName: Internal_GetEnabledVertexStreams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystemVertexStreams (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::ParticleSystemVertexStreams)>(&UnityEngine::ParticleSystemRenderer::Internal_GetEnabledVertexStreams)> {
  static const MethodInfo* get() {
    static auto* streams = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemVertexStreams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "Internal_GetEnabledVertexStreams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{streams});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_alignment
// Il2CppName: get_alignment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystemRenderSpace (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_alignment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_alignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_alignment
// Il2CppName: set_alignment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::ParticleSystemRenderSpace)>(&UnityEngine::ParticleSystemRenderer::set_alignment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemRenderSpace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_alignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_renderMode
// Il2CppName: get_renderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystemRenderMode (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_renderMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_renderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_renderMode
// Il2CppName: set_renderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::ParticleSystemRenderMode)>(&UnityEngine::ParticleSystemRenderer::set_renderMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemRenderMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_renderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_meshDistribution
// Il2CppName: get_meshDistribution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystemMeshDistribution (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_meshDistribution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_meshDistribution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_meshDistribution
// Il2CppName: set_meshDistribution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::ParticleSystemMeshDistribution)>(&UnityEngine::ParticleSystemRenderer::set_meshDistribution)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemMeshDistribution")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_meshDistribution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_sortMode
// Il2CppName: get_sortMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystemSortMode (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_sortMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_sortMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_sortMode
// Il2CppName: set_sortMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::ParticleSystemSortMode)>(&UnityEngine::ParticleSystemRenderer::set_sortMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemSortMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_sortMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_lengthScale
// Il2CppName: get_lengthScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_lengthScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_lengthScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_lengthScale
// Il2CppName: set_lengthScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(float)>(&UnityEngine::ParticleSystemRenderer::set_lengthScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_lengthScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_velocityScale
// Il2CppName: get_velocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_velocityScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_velocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_velocityScale
// Il2CppName: set_velocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(float)>(&UnityEngine::ParticleSystemRenderer::set_velocityScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_velocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_cameraVelocityScale
// Il2CppName: get_cameraVelocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_cameraVelocityScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_cameraVelocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_cameraVelocityScale
// Il2CppName: set_cameraVelocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(float)>(&UnityEngine::ParticleSystemRenderer::set_cameraVelocityScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_cameraVelocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_normalDirection
// Il2CppName: get_normalDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_normalDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_normalDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_normalDirection
// Il2CppName: set_normalDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(float)>(&UnityEngine::ParticleSystemRenderer::set_normalDirection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_normalDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_shadowBias
// Il2CppName: get_shadowBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_shadowBias)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_shadowBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_shadowBias
// Il2CppName: set_shadowBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(float)>(&UnityEngine::ParticleSystemRenderer::set_shadowBias)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_shadowBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_sortingFudge
// Il2CppName: get_sortingFudge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_sortingFudge)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_sortingFudge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_sortingFudge
// Il2CppName: set_sortingFudge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(float)>(&UnityEngine::ParticleSystemRenderer::set_sortingFudge)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_sortingFudge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_minParticleSize
// Il2CppName: get_minParticleSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_minParticleSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_minParticleSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_minParticleSize
// Il2CppName: set_minParticleSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(float)>(&UnityEngine::ParticleSystemRenderer::set_minParticleSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_minParticleSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_maxParticleSize
// Il2CppName: get_maxParticleSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_maxParticleSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_maxParticleSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_maxParticleSize
// Il2CppName: set_maxParticleSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(float)>(&UnityEngine::ParticleSystemRenderer::set_maxParticleSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_maxParticleSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_pivot
// Il2CppName: get_pivot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_pivot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_pivot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_pivot
// Il2CppName: set_pivot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::Vector3)>(&UnityEngine::ParticleSystemRenderer::set_pivot)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_pivot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_flip
// Il2CppName: get_flip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_flip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_flip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_flip
// Il2CppName: set_flip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::Vector3)>(&UnityEngine::ParticleSystemRenderer::set_flip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_flip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_maskInteraction
// Il2CppName: get_maskInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SpriteMaskInteraction (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_maskInteraction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_maskInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_maskInteraction
// Il2CppName: set_maskInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::SpriteMaskInteraction)>(&UnityEngine::ParticleSystemRenderer::set_maskInteraction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SpriteMaskInteraction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_maskInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_trailMaterial
// Il2CppName: get_trailMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_trailMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_trailMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_trailMaterial
// Il2CppName: set_trailMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::Material*)>(&UnityEngine::ParticleSystemRenderer::set_trailMaterial)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_trailMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_oldTrailMaterial
// Il2CppName: set_oldTrailMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::Material*)>(&UnityEngine::ParticleSystemRenderer::set_oldTrailMaterial)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_oldTrailMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_enableGPUInstancing
// Il2CppName: get_enableGPUInstancing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_enableGPUInstancing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_enableGPUInstancing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_enableGPUInstancing
// Il2CppName: set_enableGPUInstancing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(bool)>(&UnityEngine::ParticleSystemRenderer::set_enableGPUInstancing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_enableGPUInstancing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_allowRoll
// Il2CppName: get_allowRoll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_allowRoll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_allowRoll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_allowRoll
// Il2CppName: set_allowRoll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(bool)>(&UnityEngine::ParticleSystemRenderer::set_allowRoll)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_allowRoll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_freeformStretching
// Il2CppName: get_freeformStretching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_freeformStretching)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_freeformStretching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_freeformStretching
// Il2CppName: set_freeformStretching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(bool)>(&UnityEngine::ParticleSystemRenderer::set_freeformStretching)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_freeformStretching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_rotateWithStretchDirection
// Il2CppName: get_rotateWithStretchDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_rotateWithStretchDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_rotateWithStretchDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_rotateWithStretchDirection
// Il2CppName: set_rotateWithStretchDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(bool)>(&UnityEngine::ParticleSystemRenderer::set_rotateWithStretchDirection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_rotateWithStretchDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_mesh
// Il2CppName: get_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_mesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_mesh
// Il2CppName: set_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::Mesh*)>(&UnityEngine::ParticleSystemRenderer::set_mesh)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::GetMeshes
// Il2CppName: GetMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystemRenderer::*)(ByRef<::ArrayW<::UnityEngine::Mesh*>>)>(&UnityEngine::ParticleSystemRenderer::GetMeshes)> {
  static const MethodInfo* get() {
    static auto* meshes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "GetMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshes});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::SetMeshes
// Il2CppName: SetMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::ArrayW<::UnityEngine::Mesh*>, int)>(&UnityEngine::ParticleSystemRenderer::SetMeshes)> {
  static const MethodInfo* get() {
    static auto* meshes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh"), 1)->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "SetMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshes, size});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::SetMeshes
// Il2CppName: SetMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::ArrayW<::UnityEngine::Mesh*>)>(&UnityEngine::ParticleSystemRenderer::SetMeshes)> {
  static const MethodInfo* get() {
    static auto* meshes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "SetMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshes});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::GetMeshWeightings
// Il2CppName: GetMeshWeightings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystemRenderer::*)(ByRef<::ArrayW<float>>)>(&UnityEngine::ParticleSystemRenderer::GetMeshWeightings)> {
  static const MethodInfo* get() {
    static auto* weightings = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "GetMeshWeightings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{weightings});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::SetMeshWeightings
// Il2CppName: SetMeshWeightings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::ArrayW<float>, int)>(&UnityEngine::ParticleSystemRenderer::SetMeshWeightings)> {
  static const MethodInfo* get() {
    static auto* weightings = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "SetMeshWeightings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{weightings, size});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::SetMeshWeightings
// Il2CppName: SetMeshWeightings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::ArrayW<float>)>(&UnityEngine::ParticleSystemRenderer::SetMeshWeightings)> {
  static const MethodInfo* get() {
    static auto* weightings = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "SetMeshWeightings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{weightings});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_meshCount
// Il2CppName: get_meshCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_meshCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_meshCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::BakeMesh
// Il2CppName: BakeMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::Mesh*, bool)>(&UnityEngine::ParticleSystemRenderer::BakeMesh)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* useTransform = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "BakeMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, useTransform});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::BakeMesh
// Il2CppName: BakeMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::Mesh*, ::UnityEngine::Camera*, bool)>(&UnityEngine::ParticleSystemRenderer::BakeMesh)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* useTransform = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "BakeMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, camera, useTransform});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::BakeTrailsMesh
// Il2CppName: BakeTrailsMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::Mesh*, bool)>(&UnityEngine::ParticleSystemRenderer::BakeTrailsMesh)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* useTransform = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "BakeTrailsMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, useTransform});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::BakeTrailsMesh
// Il2CppName: BakeTrailsMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::UnityEngine::Mesh*, ::UnityEngine::Camera*, bool)>(&UnityEngine::ParticleSystemRenderer::BakeTrailsMesh)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* useTransform = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "BakeTrailsMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, camera, useTransform});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_activeVertexStreamsCount
// Il2CppName: get_activeVertexStreamsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ParticleSystemRenderer::*)()>(&UnityEngine::ParticleSystemRenderer::get_activeVertexStreamsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_activeVertexStreamsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::SetActiveVertexStreams
// Il2CppName: SetActiveVertexStreams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::System::Collections::Generic::List_1<::UnityEngine::ParticleSystemVertexStream>*)>(&UnityEngine::ParticleSystemRenderer::SetActiveVertexStreams)> {
  static const MethodInfo* get() {
    static auto* streams = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemVertexStream")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "SetActiveVertexStreams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{streams});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::GetActiveVertexStreams
// Il2CppName: GetActiveVertexStreams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(::System::Collections::Generic::List_1<::UnityEngine::ParticleSystemVertexStream>*)>(&UnityEngine::ParticleSystemRenderer::GetActiveVertexStreams)> {
  static const MethodInfo* get() {
    static auto* streams = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemVertexStream")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "GetActiveVertexStreams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{streams});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_pivot_Injected
// Il2CppName: get_pivot_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ParticleSystemRenderer::get_pivot_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_pivot_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_pivot_Injected
// Il2CppName: set_pivot_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ParticleSystemRenderer::set_pivot_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_pivot_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::get_flip_Injected
// Il2CppName: get_flip_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ParticleSystemRenderer::get_flip_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "get_flip_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemRenderer::set_flip_Injected
// Il2CppName: set_flip_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemRenderer::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ParticleSystemRenderer::set_flip_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemRenderer*), "set_flip_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
