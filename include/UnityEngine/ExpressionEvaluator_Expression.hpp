// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ExpressionEvaluator
#include "UnityEngine/ExpressionEvaluator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::ExpressionEvaluator::Expression);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ExpressionEvaluator::Expression*, "UnityEngine", "ExpressionEvaluator/Expression");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ExpressionEvaluator/Expression
  // [TokenAttribute] Offset: FFFFFFFF
  class ExpressionEvaluator::Expression : public ::Il2CppObject {
    public:
    public:
    // readonly System.String[] rpnTokens
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::StringW> rpnTokens;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // readonly System.Boolean hasVariables
    // Size: 0x1
    // Offset: 0x18
    bool hasVariables;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: readonly System.String[] rpnTokens
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_rpnTokens();
    // Get instance field reference: readonly System.Boolean hasVariables
    [[deprecated("Use field access instead!")]] bool& dyn_hasVariables();
    // System.Void .ctor(System.String expression)
    // Offset: 0x5484C9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExpressionEvaluator::Expression* New_ctor(::StringW expression) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ExpressionEvaluator::Expression::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExpressionEvaluator::Expression*, creationType>(expression)));
    }
    // public System.Boolean Evaluate(ref T value, System.Int32 index, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool Evaluate(ByRef<T> value, int index, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ExpressionEvaluator::Expression::Evaluate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Evaluate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, byref(value), index, count);
    }
  }; // UnityEngine.ExpressionEvaluator/Expression
  #pragma pack(pop)
  static check_size<sizeof(ExpressionEvaluator::Expression), 24 + sizeof(bool)> __UnityEngine_ExpressionEvaluator_ExpressionSizeCheck;
  static_assert(sizeof(ExpressionEvaluator::Expression) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ExpressionEvaluator::Expression::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ExpressionEvaluator::Expression::Evaluate
// Il2CppName: Evaluate
// Cannot write MetadataGetter for generic methods!
