// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.EnumDataUtility
#include "UnityEngine/EnumDataUtility.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: FieldInfo
  class FieldInfo;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::EnumDataUtility::$$c__DisplayClass8_0, "UnityEngine", "EnumDataUtility/<>c__DisplayClass8_0");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.EnumDataUtility/<>c__DisplayClass8_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  struct EnumDataUtility::$$c__DisplayClass8_0/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Func`2<System.String,System.String> nicifyName
    // Size: 0x8
    // Offset: 0x0
    ::System::Func_2<::StringW, ::StringW>* nicifyName;
    // Field size check
    static_assert(sizeof(::System::Func_2<::StringW, ::StringW>*) == 0x8);
    // public System.Reflection.FieldInfo field
    // Size: 0x8
    // Offset: 0x8
    ::System::Reflection::FieldInfo* field;
    // Field size check
    static_assert(sizeof(::System::Reflection::FieldInfo*) == 0x8);
    public:
    // Creating value type constructor for type: $$c__DisplayClass8_0
    constexpr $$c__DisplayClass8_0(::System::Func_2<::StringW, ::StringW>* nicifyName_ = {}, ::System::Reflection::FieldInfo* field_ = {}) noexcept : nicifyName{nicifyName_}, field{field_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Func`2<System.String,System.String> nicifyName
    [[deprecated("Use field access instead!")]] ::System::Func_2<::StringW, ::StringW>*& dyn_nicifyName();
    // Get instance field reference: public System.Reflection.FieldInfo field
    [[deprecated("Use field access instead!")]] ::System::Reflection::FieldInfo*& dyn_field();
  }; // UnityEngine.EnumDataUtility/<>c__DisplayClass8_0
  #pragma pack(pop)
  static check_size<sizeof(EnumDataUtility::$$c__DisplayClass8_0), 8 + sizeof(::System::Reflection::FieldInfo*)> __UnityEngine_EnumDataUtility_$$c__DisplayClass8_0SizeCheck;
  static_assert(sizeof(EnumDataUtility::$$c__DisplayClass8_0) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
