// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RefreshRate
  struct RefreshRate;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::RefreshRate, "UnityEngine", "RefreshRate");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.RefreshRate
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeTypeAttribute] Offset: FFFFFFFF
  struct RefreshRate/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::RefreshRate>, public ::System::IComparable_1<::UnityEngine::RefreshRate>*/ {
    public:
    public:
    // public System.UInt32 numerator
    // Size: 0x4
    // Offset: 0x0
    uint numerator;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 denominator
    // Size: 0x4
    // Offset: 0x4
    uint denominator;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: RefreshRate
    constexpr RefreshRate(uint numerator_ = {}, uint denominator_ = {}) noexcept : numerator{numerator_}, denominator{denominator_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::RefreshRate>
    operator ::System::IEquatable_1<::UnityEngine::RefreshRate>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::RefreshRate>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IComparable_1<::UnityEngine::RefreshRate>
    operator ::System::IComparable_1<::UnityEngine::RefreshRate>() noexcept {
      return *reinterpret_cast<::System::IComparable_1<::UnityEngine::RefreshRate>*>(this);
    }
    // Get instance field reference: public System.UInt32 numerator
    [[deprecated("Use field access instead!")]] uint& dyn_numerator();
    // Get instance field reference: public System.UInt32 denominator
    [[deprecated("Use field access instead!")]] uint& dyn_denominator();
    // public System.Double get_value()
    // Offset: 0x5489840
    double get_value();
    // public System.Boolean Equals(UnityEngine.RefreshRate other)
    // Offset: 0x5489854
    bool Equals(::UnityEngine::RefreshRate other);
    // public System.Int32 CompareTo(UnityEngine.RefreshRate other)
    // Offset: 0x5489890
    int CompareTo(::UnityEngine::RefreshRate other);
    // public override System.String ToString()
    // Offset: 0x54898E0
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.RefreshRate
  #pragma pack(pop)
  static check_size<sizeof(RefreshRate), 4 + sizeof(uint)> __UnityEngine_RefreshRateSizeCheck;
  static_assert(sizeof(RefreshRate) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::RefreshRate::get_value
// Il2CppName: get_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::RefreshRate::*)()>(&UnityEngine::RefreshRate::get_value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RefreshRate), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::RefreshRate::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::RefreshRate::*)(::UnityEngine::RefreshRate)>(&UnityEngine::RefreshRate::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "RefreshRate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RefreshRate), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::RefreshRate::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::RefreshRate::*)(::UnityEngine::RefreshRate)>(&UnityEngine::RefreshRate::CompareTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "RefreshRate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RefreshRate), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::RefreshRate::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::RefreshRate::*)()>(&UnityEngine::RefreshRate::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RefreshRate), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
