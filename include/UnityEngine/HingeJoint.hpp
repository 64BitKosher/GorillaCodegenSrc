// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Joint
#include "UnityEngine/Joint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: JointMotor
  struct JointMotor;
  // Forward declaring type: JointLimits
  struct JointLimits;
  // Forward declaring type: JointSpring
  struct JointSpring;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: HingeJoint
  class HingeJoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::HingeJoint);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::HingeJoint*, "UnityEngine", "HingeJoint");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.HingeJoint
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeClassAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  class HingeJoint : public ::UnityEngine::Joint {
    public:
    // public UnityEngine.JointMotor get_motor()
    // Offset: 0x5532708
    ::UnityEngine::JointMotor get_motor();
    // public System.Void set_motor(UnityEngine.JointMotor value)
    // Offset: 0x55327A8
    void set_motor(::UnityEngine::JointMotor value);
    // public UnityEngine.JointLimits get_limits()
    // Offset: 0x5532840
    ::UnityEngine::JointLimits get_limits();
    // public System.Void set_limits(UnityEngine.JointLimits value)
    // Offset: 0x55328F0
    void set_limits(::UnityEngine::JointLimits value);
    // public UnityEngine.JointSpring get_spring()
    // Offset: 0x5532978
    ::UnityEngine::JointSpring get_spring();
    // public System.Void set_spring(UnityEngine.JointSpring value)
    // Offset: 0x5532A18
    void set_spring(::UnityEngine::JointSpring value);
    // public System.Boolean get_useMotor()
    // Offset: 0x5532AB0
    bool get_useMotor();
    // public System.Void set_useMotor(System.Boolean value)
    // Offset: 0x5532AEC
    void set_useMotor(bool value);
    // public System.Boolean get_useLimits()
    // Offset: 0x5532B30
    bool get_useLimits();
    // public System.Void set_useLimits(System.Boolean value)
    // Offset: 0x5532B6C
    void set_useLimits(bool value);
    // public System.Boolean get_extendedLimits()
    // Offset: 0x5532BB0
    bool get_extendedLimits();
    // public System.Void set_extendedLimits(System.Boolean value)
    // Offset: 0x5532BEC
    void set_extendedLimits(bool value);
    // public System.Boolean get_useSpring()
    // Offset: 0x5532C30
    bool get_useSpring();
    // public System.Void set_useSpring(System.Boolean value)
    // Offset: 0x5532C6C
    void set_useSpring(bool value);
    // public System.Single get_velocity()
    // Offset: 0x5532CB0
    float get_velocity();
    // public System.Single get_angle()
    // Offset: 0x5532CEC
    float get_angle();
    // public System.Boolean get_useAcceleration()
    // Offset: 0x5532D28
    bool get_useAcceleration();
    // public System.Void set_useAcceleration(System.Boolean value)
    // Offset: 0x5532D64
    void set_useAcceleration(bool value);
    // private System.Void get_motor_Injected(out UnityEngine.JointMotor ret)
    // Offset: 0x5532764
    void get_motor_Injected(ByRef<::UnityEngine::JointMotor> ret);
    // private System.Void set_motor_Injected(ref UnityEngine.JointMotor value)
    // Offset: 0x55327FC
    void set_motor_Injected(ByRef<::UnityEngine::JointMotor> value);
    // private System.Void get_limits_Injected(out UnityEngine.JointLimits ret)
    // Offset: 0x55328AC
    void get_limits_Injected(ByRef<::UnityEngine::JointLimits> ret);
    // private System.Void set_limits_Injected(ref UnityEngine.JointLimits value)
    // Offset: 0x5532934
    void set_limits_Injected(ByRef<::UnityEngine::JointLimits> value);
    // private System.Void get_spring_Injected(out UnityEngine.JointSpring ret)
    // Offset: 0x55329D4
    void get_spring_Injected(ByRef<::UnityEngine::JointSpring> ret);
    // private System.Void set_spring_Injected(ref UnityEngine.JointSpring value)
    // Offset: 0x5532A6C
    void set_spring_Injected(ByRef<::UnityEngine::JointSpring> value);
    // public System.Void .ctor()
    // Offset: 0x5532DA8
    // Implemented from: UnityEngine.Joint
    // Base method: System.Void Joint::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HingeJoint* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::HingeJoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HingeJoint*, creationType>()));
    }
  }; // UnityEngine.HingeJoint
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::HingeJoint::get_motor
// Il2CppName: get_motor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::JointMotor (UnityEngine::HingeJoint::*)()>(&UnityEngine::HingeJoint::get_motor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "get_motor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::set_motor
// Il2CppName: set_motor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HingeJoint::*)(::UnityEngine::JointMotor)>(&UnityEngine::HingeJoint::set_motor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointMotor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "set_motor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::get_limits
// Il2CppName: get_limits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::JointLimits (UnityEngine::HingeJoint::*)()>(&UnityEngine::HingeJoint::get_limits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "get_limits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::set_limits
// Il2CppName: set_limits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HingeJoint::*)(::UnityEngine::JointLimits)>(&UnityEngine::HingeJoint::set_limits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointLimits")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "set_limits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::get_spring
// Il2CppName: get_spring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::JointSpring (UnityEngine::HingeJoint::*)()>(&UnityEngine::HingeJoint::get_spring)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "get_spring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::set_spring
// Il2CppName: set_spring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HingeJoint::*)(::UnityEngine::JointSpring)>(&UnityEngine::HingeJoint::set_spring)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointSpring")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "set_spring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::get_useMotor
// Il2CppName: get_useMotor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::HingeJoint::*)()>(&UnityEngine::HingeJoint::get_useMotor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "get_useMotor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::set_useMotor
// Il2CppName: set_useMotor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HingeJoint::*)(bool)>(&UnityEngine::HingeJoint::set_useMotor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "set_useMotor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::get_useLimits
// Il2CppName: get_useLimits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::HingeJoint::*)()>(&UnityEngine::HingeJoint::get_useLimits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "get_useLimits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::set_useLimits
// Il2CppName: set_useLimits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HingeJoint::*)(bool)>(&UnityEngine::HingeJoint::set_useLimits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "set_useLimits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::get_extendedLimits
// Il2CppName: get_extendedLimits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::HingeJoint::*)()>(&UnityEngine::HingeJoint::get_extendedLimits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "get_extendedLimits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::set_extendedLimits
// Il2CppName: set_extendedLimits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HingeJoint::*)(bool)>(&UnityEngine::HingeJoint::set_extendedLimits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "set_extendedLimits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::get_useSpring
// Il2CppName: get_useSpring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::HingeJoint::*)()>(&UnityEngine::HingeJoint::get_useSpring)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "get_useSpring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::set_useSpring
// Il2CppName: set_useSpring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HingeJoint::*)(bool)>(&UnityEngine::HingeJoint::set_useSpring)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "set_useSpring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::get_velocity
// Il2CppName: get_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::HingeJoint::*)()>(&UnityEngine::HingeJoint::get_velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "get_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::get_angle
// Il2CppName: get_angle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::HingeJoint::*)()>(&UnityEngine::HingeJoint::get_angle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "get_angle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::get_useAcceleration
// Il2CppName: get_useAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::HingeJoint::*)()>(&UnityEngine::HingeJoint::get_useAcceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "get_useAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::set_useAcceleration
// Il2CppName: set_useAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HingeJoint::*)(bool)>(&UnityEngine::HingeJoint::set_useAcceleration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "set_useAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::get_motor_Injected
// Il2CppName: get_motor_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HingeJoint::*)(ByRef<::UnityEngine::JointMotor>)>(&UnityEngine::HingeJoint::get_motor_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointMotor")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "get_motor_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::set_motor_Injected
// Il2CppName: set_motor_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HingeJoint::*)(ByRef<::UnityEngine::JointMotor>)>(&UnityEngine::HingeJoint::set_motor_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointMotor")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "set_motor_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::get_limits_Injected
// Il2CppName: get_limits_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HingeJoint::*)(ByRef<::UnityEngine::JointLimits>)>(&UnityEngine::HingeJoint::get_limits_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointLimits")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "get_limits_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::set_limits_Injected
// Il2CppName: set_limits_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HingeJoint::*)(ByRef<::UnityEngine::JointLimits>)>(&UnityEngine::HingeJoint::set_limits_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointLimits")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "set_limits_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::get_spring_Injected
// Il2CppName: get_spring_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HingeJoint::*)(ByRef<::UnityEngine::JointSpring>)>(&UnityEngine::HingeJoint::get_spring_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointSpring")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "get_spring_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::set_spring_Injected
// Il2CppName: set_spring_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::HingeJoint::*)(ByRef<::UnityEngine::JointSpring>)>(&UnityEngine::HingeJoint::set_spring_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointSpring")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::HingeJoint*), "set_spring_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::HingeJoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
