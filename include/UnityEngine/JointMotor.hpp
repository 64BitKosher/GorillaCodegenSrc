// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: JointMotor
  struct JointMotor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::JointMotor, "UnityEngine", "JointMotor");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.JointMotor
  // [TokenAttribute] Offset: FFFFFFFF
  struct JointMotor/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Single m_TargetVelocity
    // Size: 0x4
    // Offset: 0x0
    float m_TargetVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Force
    // Size: 0x4
    // Offset: 0x4
    float m_Force;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_FreeSpin
    // Size: 0x4
    // Offset: 0x8
    int m_FreeSpin;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: JointMotor
    constexpr JointMotor(float m_TargetVelocity_ = {}, float m_Force_ = {}, int m_FreeSpin_ = {}) noexcept : m_TargetVelocity{m_TargetVelocity_}, m_Force{m_Force_}, m_FreeSpin{m_FreeSpin_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Single m_TargetVelocity
    [[deprecated("Use field access instead!")]] float& dyn_m_TargetVelocity();
    // Get instance field reference: private System.Single m_Force
    [[deprecated("Use field access instead!")]] float& dyn_m_Force();
    // Get instance field reference: private System.Int32 m_FreeSpin
    [[deprecated("Use field access instead!")]] int& dyn_m_FreeSpin();
  }; // UnityEngine.JointMotor
  #pragma pack(pop)
  static check_size<sizeof(JointMotor), 8 + sizeof(int)> __UnityEngine_JointMotorSizeCheck;
  static_assert(sizeof(JointMotor) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
