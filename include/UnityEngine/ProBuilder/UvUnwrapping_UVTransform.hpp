// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ProBuilder.UvUnwrapping
#include "UnityEngine/ProBuilder/UvUnwrapping.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ProBuilder::UvUnwrapping::UVTransform, "UnityEngine.ProBuilder", "UvUnwrapping/UVTransform");
// Type namespace: UnityEngine.ProBuilder
namespace UnityEngine::ProBuilder {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ProBuilder.UvUnwrapping/UVTransform
  // [TokenAttribute] Offset: FFFFFFFF
  struct UvUnwrapping::UVTransform/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector2 translation
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Vector2 translation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Single rotation
    // Size: 0x4
    // Offset: 0x8
    float rotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector2 scale
    // Size: 0x8
    // Offset: 0xC
    ::UnityEngine::Vector2 scale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Creating value type constructor for type: UVTransform
    constexpr UVTransform(::UnityEngine::Vector2 translation_ = {}, float rotation_ = {}, ::UnityEngine::Vector2 scale_ = {}) noexcept : translation{translation_}, rotation{rotation_}, scale{scale_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector2 translation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_translation();
    // Get instance field reference: public System.Single rotation
    [[deprecated("Use field access instead!")]] float& dyn_rotation();
    // Get instance field reference: public UnityEngine.Vector2 scale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_scale();
    // public override System.String ToString()
    // Offset: 0x51E4210
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.ProBuilder.UvUnwrapping/UVTransform
  #pragma pack(pop)
  static check_size<sizeof(UvUnwrapping::UVTransform), 12 + sizeof(::UnityEngine::Vector2)> __UnityEngine_ProBuilder_UvUnwrapping_UVTransformSizeCheck;
  static_assert(sizeof(UvUnwrapping::UVTransform) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ProBuilder::UvUnwrapping::UVTransform::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::ProBuilder::UvUnwrapping::UVTransform::*)()>(&UnityEngine::ProBuilder::UvUnwrapping::UVTransform::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ProBuilder::UvUnwrapping::UVTransform), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
