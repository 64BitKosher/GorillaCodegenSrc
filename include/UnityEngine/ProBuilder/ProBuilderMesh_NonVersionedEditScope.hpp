// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ProBuilder.ProBuilderMesh
#include "UnityEngine/ProBuilder/ProBuilderMesh.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ProBuilder::ProBuilderMesh::NonVersionedEditScope, "UnityEngine.ProBuilder", "ProBuilderMesh/NonVersionedEditScope");
// Type namespace: UnityEngine.ProBuilder
namespace UnityEngine::ProBuilder {
  // Size: 0xA
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ProBuilder.ProBuilderMesh/NonVersionedEditScope
  // [TokenAttribute] Offset: FFFFFFFF
  struct ProBuilderMesh::NonVersionedEditScope/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private UnityEngine.ProBuilder.ProBuilderMesh m_Mesh
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::ProBuilder::ProBuilderMesh* m_Mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::ProBuilder::ProBuilderMesh*) == 0x8);
    // private System.UInt16 m_VersionIndex
    // Size: 0x2
    // Offset: 0x8
    uint16_t m_VersionIndex;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    public:
    // Creating value type constructor for type: NonVersionedEditScope
    constexpr NonVersionedEditScope(::UnityEngine::ProBuilder::ProBuilderMesh* m_Mesh_ = {}, uint16_t m_VersionIndex_ = {}) noexcept : m_Mesh{m_Mesh_}, m_VersionIndex{m_VersionIndex_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private UnityEngine.ProBuilder.ProBuilderMesh m_Mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::ProBuilder::ProBuilderMesh*& dyn_m_Mesh();
    // Get instance field reference: private System.UInt16 m_VersionIndex
    [[deprecated("Use field access instead!")]] uint16_t& dyn_m_VersionIndex();
    // public System.Void .ctor(UnityEngine.ProBuilder.ProBuilderMesh mesh)
    // Offset: 0x51C0200
    NonVersionedEditScope(::UnityEngine::ProBuilder::ProBuilderMesh* mesh);
    // public System.Void Dispose()
    // Offset: 0x51C539C
    void Dispose();
  }; // UnityEngine.ProBuilder.ProBuilderMesh/NonVersionedEditScope
  #pragma pack(pop)
  static check_size<sizeof(ProBuilderMesh::NonVersionedEditScope), 8 + sizeof(uint16_t)> __UnityEngine_ProBuilder_ProBuilderMesh_NonVersionedEditScopeSizeCheck;
  static_assert(sizeof(ProBuilderMesh::NonVersionedEditScope) == 0xA);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ProBuilder::ProBuilderMesh::NonVersionedEditScope::NonVersionedEditScope
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ProBuilder::ProBuilderMesh::NonVersionedEditScope::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ProBuilder::ProBuilderMesh::NonVersionedEditScope::*)()>(&UnityEngine::ProBuilder::ProBuilderMesh::NonVersionedEditScope::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ProBuilder::ProBuilderMesh::NonVersionedEditScope), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
