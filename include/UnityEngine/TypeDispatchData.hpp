// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TypeDispatchData
  struct TypeDispatchData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TypeDispatchData, "UnityEngine", "TypeDispatchData");
// Type namespace: UnityEngine
namespace UnityEngine {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.TypeDispatchData
  // [TokenAttribute] Offset: FFFFFFFF
  struct TypeDispatchData/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // public UnityEngine.Object[] changed
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<::UnityEngine::Object*> changed;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Object*>) == 0x8);
    // public Unity.Collections.NativeArray`1<System.Int32> changedID
    // Size: 0xFFFFFFFF
    // Offset: 0x8
    ::Unity::Collections::NativeArray_1<int> changedID;
    // public Unity.Collections.NativeArray`1<System.Int32> destroyedID
    // Size: 0xFFFFFFFF
    // Offset: 0x18
    ::Unity::Collections::NativeArray_1<int> destroyedID;
    public:
    // Creating value type constructor for type: TypeDispatchData
    constexpr TypeDispatchData(::ArrayW<::UnityEngine::Object*> changed_ = ::ArrayW<::UnityEngine::Object*>(static_cast<void*>(nullptr)), ::Unity::Collections::NativeArray_1<int> changedID_ = {}, ::Unity::Collections::NativeArray_1<int> destroyedID_ = {}) noexcept : changed{changed_}, changedID{changedID_}, destroyedID{destroyedID_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: public UnityEngine.Object[] changed
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Object*>& dyn_changed();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Int32> changedID
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_changedID();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Int32> destroyedID
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_destroyedID();
    // public System.Void Dispose()
    // Offset: 0x54BE9C0
    void Dispose();
  }; // UnityEngine.TypeDispatchData
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TypeDispatchData::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TypeDispatchData::*)()>(&UnityEngine::TypeDispatchData::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TypeDispatchData), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
