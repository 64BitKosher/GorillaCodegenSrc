// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: JointLimits
  struct JointLimits;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::JointLimits, "UnityEngine", "JointLimits");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x1C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.JointLimits
  // [TokenAttribute] Offset: FFFFFFFF
  struct JointLimits/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Single m_Min
    // Size: 0x4
    // Offset: 0x0
    float m_Min;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Max
    // Size: 0x4
    // Offset: 0x4
    float m_Max;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Bounciness
    // Size: 0x4
    // Offset: 0x8
    float m_Bounciness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_BounceMinVelocity
    // Size: 0x4
    // Offset: 0xC
    float m_BounceMinVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ContactDistance
    // Size: 0x4
    // Offset: 0x10
    float m_ContactDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minBounce
    // Size: 0x4
    // Offset: 0x14
    float minBounce;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxBounce
    // Size: 0x4
    // Offset: 0x18
    float maxBounce;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: JointLimits
    constexpr JointLimits(float m_Min_ = {}, float m_Max_ = {}, float m_Bounciness_ = {}, float m_BounceMinVelocity_ = {}, float m_ContactDistance_ = {}, float minBounce_ = {}, float maxBounce_ = {}) noexcept : m_Min{m_Min_}, m_Max{m_Max_}, m_Bounciness{m_Bounciness_}, m_BounceMinVelocity{m_BounceMinVelocity_}, m_ContactDistance{m_ContactDistance_}, minBounce{minBounce_}, maxBounce{maxBounce_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Single m_Min
    [[deprecated("Use field access instead!")]] float& dyn_m_Min();
    // Get instance field reference: private System.Single m_Max
    [[deprecated("Use field access instead!")]] float& dyn_m_Max();
    // Get instance field reference: private System.Single m_Bounciness
    [[deprecated("Use field access instead!")]] float& dyn_m_Bounciness();
    // Get instance field reference: private System.Single m_BounceMinVelocity
    [[deprecated("Use field access instead!")]] float& dyn_m_BounceMinVelocity();
    // Get instance field reference: private System.Single m_ContactDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_ContactDistance();
    // Get instance field reference: public System.Single minBounce
    [[deprecated("Use field access instead!")]] float& dyn_minBounce();
    // Get instance field reference: public System.Single maxBounce
    [[deprecated("Use field access instead!")]] float& dyn_maxBounce();
  }; // UnityEngine.JointLimits
  #pragma pack(pop)
  static check_size<sizeof(JointLimits), 24 + sizeof(float)> __UnityEngine_JointLimitsSizeCheck;
  static_assert(sizeof(JointLimits) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
