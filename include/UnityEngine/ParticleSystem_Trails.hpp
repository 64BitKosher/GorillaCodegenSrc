// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ParticleSystem::Trails, "UnityEngine", "ParticleSystem/Trails");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ParticleSystem/Trails
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeTypeAttribute] Offset: FFFFFFFF
  struct ParticleSystem::Trails/*, public ::System::ValueType*/ {
    public:
    public:
    // System.Collections.Generic.List`1<UnityEngine.Vector4> positions
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* positions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector4>*) == 0x8);
    // System.Collections.Generic.List`1<System.Int32> frontPositions
    // Size: 0x8
    // Offset: 0x8
    ::System::Collections::Generic::List_1<int>* frontPositions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // System.Collections.Generic.List`1<System.Int32> backPositions
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<int>* backPositions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // System.Collections.Generic.List`1<System.Int32> positionCounts
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<int>* positionCounts;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // System.Collections.Generic.List`1<System.Single> textureOffsets
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<float>* textureOffsets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<float>*) == 0x8);
    // System.Int32 maxTrailCount
    // Size: 0x4
    // Offset: 0x28
    int maxTrailCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 maxPositionsPerTrailCount
    // Size: 0x4
    // Offset: 0x2C
    int maxPositionsPerTrailCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Trails
    constexpr Trails(::System::Collections::Generic::List_1<::UnityEngine::Vector4>* positions_ = {}, ::System::Collections::Generic::List_1<int>* frontPositions_ = {}, ::System::Collections::Generic::List_1<int>* backPositions_ = {}, ::System::Collections::Generic::List_1<int>* positionCounts_ = {}, ::System::Collections::Generic::List_1<float>* textureOffsets_ = {}, int maxTrailCount_ = {}, int maxPositionsPerTrailCount_ = {}) noexcept : positions{positions_}, frontPositions{frontPositions_}, backPositions{backPositions_}, positionCounts{positionCounts_}, textureOffsets{textureOffsets_}, maxTrailCount{maxTrailCount_}, maxPositionsPerTrailCount{maxPositionsPerTrailCount_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.Collections.Generic.List`1<UnityEngine.Vector4> positions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*& dyn_positions();
    // Get instance field reference: System.Collections.Generic.List`1<System.Int32> frontPositions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_frontPositions();
    // Get instance field reference: System.Collections.Generic.List`1<System.Int32> backPositions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_backPositions();
    // Get instance field reference: System.Collections.Generic.List`1<System.Int32> positionCounts
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_positionCounts();
    // Get instance field reference: System.Collections.Generic.List`1<System.Single> textureOffsets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& dyn_textureOffsets();
    // Get instance field reference: System.Int32 maxTrailCount
    [[deprecated("Use field access instead!")]] int& dyn_maxTrailCount();
    // Get instance field reference: System.Int32 maxPositionsPerTrailCount
    [[deprecated("Use field access instead!")]] int& dyn_maxPositionsPerTrailCount();
    // System.Void Allocate()
    // Offset: 0x551E3A8
    void Allocate();
  }; // UnityEngine.ParticleSystem/Trails
  #pragma pack(pop)
  static check_size<sizeof(ParticleSystem::Trails), 44 + sizeof(int)> __UnityEngine_ParticleSystem_TrailsSizeCheck;
  static_assert(sizeof(ParticleSystem::Trails) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::Trails::Allocate
// Il2CppName: Allocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::Trails::*)()>(&UnityEngine::ParticleSystem::Trails::Allocate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::Trails), "Allocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
