// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: UnityEngine.Jobs
namespace UnityEngine::Jobs {
  // Forward declaring type: TransformAccessArray
  struct TransformAccessArray;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Jobs::TransformAccessArray, "UnityEngine.Jobs", "TransformAccessArray");
// Type namespace: UnityEngine.Jobs
namespace UnityEngine::Jobs {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Jobs.TransformAccessArray
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeTypeAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  struct TransformAccessArray/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private System.IntPtr m_TransformArray
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr m_TransformArray;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: TransformAccessArray
    constexpr TransformAccessArray(::System::IntPtr m_TransformArray_ = {}) noexcept : m_TransformArray{m_TransformArray_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return m_TransformArray;
    }
    // Get instance field reference: private System.IntPtr m_TransformArray
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_TransformArray();
    // public System.Void .ctor(System.Int32 capacity, System.Int32 desiredJobCount)
    // Offset: 0x54D7F98
    TransformAccessArray(int capacity, int desiredJobCount);
    // static public System.Void Allocate(System.Int32 capacity, System.Int32 desiredJobCount, out UnityEngine.Jobs.TransformAccessArray array)
    // Offset: 0x54D7FAC
    static void Allocate(int capacity, int desiredJobCount, ByRef<::UnityEngine::Jobs::TransformAccessArray> array);
    // public System.Boolean get_isCreated()
    // Offset: 0x54D8054
    bool get_isCreated();
    // public System.Void Dispose()
    // Offset: 0x54D8064
    void Dispose();
    // System.IntPtr GetTransformAccessArrayForSchedule()
    // Offset: 0x54D80F8
    ::System::IntPtr GetTransformAccessArrayForSchedule();
    // public UnityEngine.Transform get_Item(System.Int32 index)
    // Offset: 0x54D8100
    ::UnityEngine::Transform* get_Item(int index);
    // public System.Void set_Item(System.Int32 index, UnityEngine.Transform value)
    // Offset: 0x54D8188
    void set_Item(int index, ::UnityEngine::Transform* value);
    // public System.Int32 get_length()
    // Offset: 0x54D8230
    int get_length();
    // public System.Void Add(UnityEngine.Transform transform)
    // Offset: 0x54D82A8
    void Add(::UnityEngine::Transform* transform);
    // public System.Void RemoveAtSwapBack(System.Int32 index)
    // Offset: 0x54D8330
    void RemoveAtSwapBack(int index);
    // static private System.IntPtr Create(System.Int32 capacity, System.Int32 desiredJobCount)
    // Offset: 0x54D8010
    static ::System::IntPtr Create(int capacity, int desiredJobCount);
    // static private System.Void DestroyTransformAccessArray(System.IntPtr transformArray)
    // Offset: 0x54D80BC
    static void DestroyTransformAccessArray(::System::IntPtr transformArray);
    // static private System.Void Add(System.IntPtr transformArrayIntPtr, UnityEngine.Transform transform)
    // Offset: 0x54D82EC
    static void Add(::System::IntPtr transformArrayIntPtr, ::UnityEngine::Transform* transform);
    // static private System.Void RemoveAtSwapBack(System.IntPtr transformArrayIntPtr, System.Int32 index)
    // Offset: 0x54D8374
    static void RemoveAtSwapBack(::System::IntPtr transformArrayIntPtr, int index);
    // static System.IntPtr GetSortedTransformAccess(System.IntPtr transformArrayIntPtr)
    // Offset: 0x54D83B8
    static ::System::IntPtr GetSortedTransformAccess(::System::IntPtr transformArrayIntPtr);
    // static System.IntPtr GetSortedToUserIndex(System.IntPtr transformArrayIntPtr)
    // Offset: 0x54D83F4
    static ::System::IntPtr GetSortedToUserIndex(::System::IntPtr transformArrayIntPtr);
    // static System.Int32 GetLength(System.IntPtr transformArrayIntPtr)
    // Offset: 0x54D826C
    static int GetLength(::System::IntPtr transformArrayIntPtr);
    // static UnityEngine.Transform GetTransform(System.IntPtr transformArrayIntPtr, System.Int32 index)
    // Offset: 0x54D8144
    static ::UnityEngine::Transform* GetTransform(::System::IntPtr transformArrayIntPtr, int index);
    // static System.Void SetTransform(System.IntPtr transformArrayIntPtr, System.Int32 index, UnityEngine.Transform transform)
    // Offset: 0x54D81DC
    static void SetTransform(::System::IntPtr transformArrayIntPtr, int index, ::UnityEngine::Transform* transform);
  }; // UnityEngine.Jobs.TransformAccessArray
  #pragma pack(pop)
  static check_size<sizeof(TransformAccessArray), 0 + sizeof(::System::IntPtr)> __UnityEngine_Jobs_TransformAccessArraySizeCheck;
  static_assert(sizeof(TransformAccessArray) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::TransformAccessArray
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::Allocate
// Il2CppName: Allocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int, ByRef<::UnityEngine::Jobs::TransformAccessArray>)>(&UnityEngine::Jobs::TransformAccessArray::Allocate)> {
  static const MethodInfo* get() {
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* desiredJobCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* array = &::il2cpp_utils::GetClassFromName("UnityEngine.Jobs", "TransformAccessArray")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "Allocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capacity, desiredJobCount, array});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::get_isCreated
// Il2CppName: get_isCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Jobs::TransformAccessArray::*)()>(&UnityEngine::Jobs::TransformAccessArray::get_isCreated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "get_isCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Jobs::TransformAccessArray::*)()>(&UnityEngine::Jobs::TransformAccessArray::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::GetTransformAccessArrayForSchedule
// Il2CppName: GetTransformAccessArrayForSchedule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (UnityEngine::Jobs::TransformAccessArray::*)()>(&UnityEngine::Jobs::TransformAccessArray::GetTransformAccessArrayForSchedule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "GetTransformAccessArrayForSchedule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Jobs::TransformAccessArray::*)(int)>(&UnityEngine::Jobs::TransformAccessArray::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Jobs::TransformAccessArray::*)(int, ::UnityEngine::Transform*)>(&UnityEngine::Jobs::TransformAccessArray::set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::get_length
// Il2CppName: get_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Jobs::TransformAccessArray::*)()>(&UnityEngine::Jobs::TransformAccessArray::get_length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "get_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Jobs::TransformAccessArray::*)(::UnityEngine::Transform*)>(&UnityEngine::Jobs::TransformAccessArray::Add)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::RemoveAtSwapBack
// Il2CppName: RemoveAtSwapBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Jobs::TransformAccessArray::*)(int)>(&UnityEngine::Jobs::TransformAccessArray::RemoveAtSwapBack)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "RemoveAtSwapBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(int, int)>(&UnityEngine::Jobs::TransformAccessArray::Create)> {
  static const MethodInfo* get() {
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* desiredJobCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capacity, desiredJobCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::DestroyTransformAccessArray
// Il2CppName: DestroyTransformAccessArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&UnityEngine::Jobs::TransformAccessArray::DestroyTransformAccessArray)> {
  static const MethodInfo* get() {
    static auto* transformArray = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "DestroyTransformAccessArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformArray});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, ::UnityEngine::Transform*)>(&UnityEngine::Jobs::TransformAccessArray::Add)> {
  static const MethodInfo* get() {
    static auto* transformArrayIntPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformArrayIntPtr, transform});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::RemoveAtSwapBack
// Il2CppName: RemoveAtSwapBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, int)>(&UnityEngine::Jobs::TransformAccessArray::RemoveAtSwapBack)> {
  static const MethodInfo* get() {
    static auto* transformArrayIntPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "RemoveAtSwapBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformArrayIntPtr, index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::GetSortedTransformAccess
// Il2CppName: GetSortedTransformAccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::System::IntPtr)>(&UnityEngine::Jobs::TransformAccessArray::GetSortedTransformAccess)> {
  static const MethodInfo* get() {
    static auto* transformArrayIntPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "GetSortedTransformAccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformArrayIntPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::GetSortedToUserIndex
// Il2CppName: GetSortedToUserIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::System::IntPtr)>(&UnityEngine::Jobs::TransformAccessArray::GetSortedToUserIndex)> {
  static const MethodInfo* get() {
    static auto* transformArrayIntPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "GetSortedToUserIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformArrayIntPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::GetLength
// Il2CppName: GetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&UnityEngine::Jobs::TransformAccessArray::GetLength)> {
  static const MethodInfo* get() {
    static auto* transformArrayIntPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "GetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformArrayIntPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::GetTransform
// Il2CppName: GetTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (*)(::System::IntPtr, int)>(&UnityEngine::Jobs::TransformAccessArray::GetTransform)> {
  static const MethodInfo* get() {
    static auto* transformArrayIntPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "GetTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformArrayIntPtr, index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccessArray::SetTransform
// Il2CppName: SetTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, int, ::UnityEngine::Transform*)>(&UnityEngine::Jobs::TransformAccessArray::SetTransform)> {
  static const MethodInfo* get() {
    static auto* transformArrayIntPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccessArray), "SetTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformArrayIntPtr, index, transform});
  }
};
