// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
}
// Completed forward declares
// Type namespace: UnityEngine.Jobs
namespace UnityEngine::Jobs {
  // Forward declaring type: TransformAccess
  struct TransformAccess;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Jobs::TransformAccess, "UnityEngine.Jobs", "TransformAccess");
// Type namespace: UnityEngine.Jobs
namespace UnityEngine::Jobs {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Jobs.TransformAccess
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  struct TransformAccess/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.IntPtr hierarchy
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr hierarchy;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.Int32 index
    // Size: 0x4
    // Offset: 0x8
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TransformAccess
    constexpr TransformAccess(::System::IntPtr hierarchy_ = {}, int index_ = {}) noexcept : hierarchy{hierarchy_}, index{index_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.IntPtr hierarchy
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_hierarchy();
    // Get instance field reference: private System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x54D7BDC
    ::UnityEngine::Vector3 get_position();
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x54D7C7C
    void set_position(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_rotation()
    // Offset: 0x54D7D14
    ::UnityEngine::Quaternion get_rotation();
    // public System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0x54D7DB0
    void set_rotation(::UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_localScale()
    // Offset: 0x54D7E48
    ::UnityEngine::Vector3 get_localScale();
    // public UnityEngine.Matrix4x4 get_localToWorldMatrix()
    // Offset: 0x54D7EE8
    ::UnityEngine::Matrix4x4 get_localToWorldMatrix();
    // static private System.Void GetPosition(ref UnityEngine.Jobs.TransformAccess access, out UnityEngine.Vector3 p)
    // Offset: 0x54D7C38
    static void GetPosition(ByRef<::UnityEngine::Jobs::TransformAccess> access, ByRef<::UnityEngine::Vector3> p);
    // static private System.Void SetPosition(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Vector3 p)
    // Offset: 0x54D7CD0
    static void SetPosition(ByRef<::UnityEngine::Jobs::TransformAccess> access, ByRef<::UnityEngine::Vector3> p);
    // static private System.Void GetRotation(ref UnityEngine.Jobs.TransformAccess access, out UnityEngine.Quaternion r)
    // Offset: 0x54D7D6C
    static void GetRotation(ByRef<::UnityEngine::Jobs::TransformAccess> access, ByRef<::UnityEngine::Quaternion> r);
    // static private System.Void SetRotation(ref UnityEngine.Jobs.TransformAccess access, ref UnityEngine.Quaternion r)
    // Offset: 0x54D7E04
    static void SetRotation(ByRef<::UnityEngine::Jobs::TransformAccess> access, ByRef<::UnityEngine::Quaternion> r);
    // static private System.Void GetLocalScale(ref UnityEngine.Jobs.TransformAccess access, out UnityEngine.Vector3 r)
    // Offset: 0x54D7EA4
    static void GetLocalScale(ByRef<::UnityEngine::Jobs::TransformAccess> access, ByRef<::UnityEngine::Vector3> r);
    // static private System.Void GetLocalToWorldMatrix(ref UnityEngine.Jobs.TransformAccess access, out UnityEngine.Matrix4x4 m)
    // Offset: 0x54D7F54
    static void GetLocalToWorldMatrix(ByRef<::UnityEngine::Jobs::TransformAccess> access, ByRef<::UnityEngine::Matrix4x4> m);
  }; // UnityEngine.Jobs.TransformAccess
  #pragma pack(pop)
  static check_size<sizeof(TransformAccess), 8 + sizeof(int)> __UnityEngine_Jobs_TransformAccessSizeCheck;
  static_assert(sizeof(TransformAccess) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccess::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Jobs::TransformAccess::*)()>(&UnityEngine::Jobs::TransformAccess::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccess), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccess::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Jobs::TransformAccess::*)(::UnityEngine::Vector3)>(&UnityEngine::Jobs::TransformAccess::set_position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccess), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccess::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (UnityEngine::Jobs::TransformAccess::*)()>(&UnityEngine::Jobs::TransformAccess::get_rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccess), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccess::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Jobs::TransformAccess::*)(::UnityEngine::Quaternion)>(&UnityEngine::Jobs::TransformAccess::set_rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccess), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccess::get_localScale
// Il2CppName: get_localScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Jobs::TransformAccess::*)()>(&UnityEngine::Jobs::TransformAccess::get_localScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccess), "get_localScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccess::get_localToWorldMatrix
// Il2CppName: get_localToWorldMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (UnityEngine::Jobs::TransformAccess::*)()>(&UnityEngine::Jobs::TransformAccess::get_localToWorldMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccess), "get_localToWorldMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccess::GetPosition
// Il2CppName: GetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Jobs::TransformAccess>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Jobs::TransformAccess::GetPosition)> {
  static const MethodInfo* get() {
    static auto* access = &::il2cpp_utils::GetClassFromName("UnityEngine.Jobs", "TransformAccess")->this_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccess), "GetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{access, p});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccess::SetPosition
// Il2CppName: SetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Jobs::TransformAccess>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Jobs::TransformAccess::SetPosition)> {
  static const MethodInfo* get() {
    static auto* access = &::il2cpp_utils::GetClassFromName("UnityEngine.Jobs", "TransformAccess")->this_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccess), "SetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{access, p});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccess::GetRotation
// Il2CppName: GetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Jobs::TransformAccess>, ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Jobs::TransformAccess::GetRotation)> {
  static const MethodInfo* get() {
    static auto* access = &::il2cpp_utils::GetClassFromName("UnityEngine.Jobs", "TransformAccess")->this_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccess), "GetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{access, r});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccess::SetRotation
// Il2CppName: SetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Jobs::TransformAccess>, ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Jobs::TransformAccess::SetRotation)> {
  static const MethodInfo* get() {
    static auto* access = &::il2cpp_utils::GetClassFromName("UnityEngine.Jobs", "TransformAccess")->this_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccess), "SetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{access, r});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccess::GetLocalScale
// Il2CppName: GetLocalScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Jobs::TransformAccess>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Jobs::TransformAccess::GetLocalScale)> {
  static const MethodInfo* get() {
    static auto* access = &::il2cpp_utils::GetClassFromName("UnityEngine.Jobs", "TransformAccess")->this_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccess), "GetLocalScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{access, r});
  }
};
// Writing MetadataGetter for method: UnityEngine::Jobs::TransformAccess::GetLocalToWorldMatrix
// Il2CppName: GetLocalToWorldMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Jobs::TransformAccess>, ByRef<::UnityEngine::Matrix4x4>)>(&UnityEngine::Jobs::TransformAccess::GetLocalToWorldMatrix)> {
  static const MethodInfo* get() {
    static auto* access = &::il2cpp_utils::GetClassFromName("UnityEngine.Jobs", "TransformAccess")->this_arg;
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Jobs::TransformAccess), "GetLocalToWorldMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{access, m});
  }
};
