// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ComputeBufferType
  struct ComputeBufferType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ComputeBufferType, "UnityEngine", "ComputeBufferType");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ComputeBufferType
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  struct ComputeBufferType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ComputeBufferType
    constexpr ComputeBufferType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public UnityEngine.ComputeBufferType Default
    static constexpr const int Default = 0;
    // Get static field: static public UnityEngine.ComputeBufferType Default
    static ::UnityEngine::ComputeBufferType _get_Default();
    // Set static field: static public UnityEngine.ComputeBufferType Default
    static void _set_Default(::UnityEngine::ComputeBufferType value);
    // static field const value: static public UnityEngine.ComputeBufferType Raw
    static constexpr const int Raw = 1;
    // Get static field: static public UnityEngine.ComputeBufferType Raw
    static ::UnityEngine::ComputeBufferType _get_Raw();
    // Set static field: static public UnityEngine.ComputeBufferType Raw
    static void _set_Raw(::UnityEngine::ComputeBufferType value);
    // static field const value: static public UnityEngine.ComputeBufferType Append
    static constexpr const int Append = 2;
    // Get static field: static public UnityEngine.ComputeBufferType Append
    static ::UnityEngine::ComputeBufferType _get_Append();
    // Set static field: static public UnityEngine.ComputeBufferType Append
    static void _set_Append(::UnityEngine::ComputeBufferType value);
    // static field const value: static public UnityEngine.ComputeBufferType Counter
    static constexpr const int Counter = 4;
    // Get static field: static public UnityEngine.ComputeBufferType Counter
    static ::UnityEngine::ComputeBufferType _get_Counter();
    // Set static field: static public UnityEngine.ComputeBufferType Counter
    static void _set_Counter(::UnityEngine::ComputeBufferType value);
    // static field const value: static public UnityEngine.ComputeBufferType Constant
    static constexpr const int Constant = 8;
    // Get static field: static public UnityEngine.ComputeBufferType Constant
    static ::UnityEngine::ComputeBufferType _get_Constant();
    // Set static field: static public UnityEngine.ComputeBufferType Constant
    static void _set_Constant(::UnityEngine::ComputeBufferType value);
    // static field const value: static public UnityEngine.ComputeBufferType Structured
    static constexpr const int Structured = 16;
    // Get static field: static public UnityEngine.ComputeBufferType Structured
    static ::UnityEngine::ComputeBufferType _get_Structured();
    // Set static field: static public UnityEngine.ComputeBufferType Structured
    static void _set_Structured(::UnityEngine::ComputeBufferType value);
    // static field const value: static public UnityEngine.ComputeBufferType DrawIndirect
    static constexpr const int DrawIndirect = 256;
    // Get static field: static public UnityEngine.ComputeBufferType DrawIndirect
    static ::UnityEngine::ComputeBufferType _get_DrawIndirect();
    // Set static field: static public UnityEngine.ComputeBufferType DrawIndirect
    static void _set_DrawIndirect(::UnityEngine::ComputeBufferType value);
    // static field const value: static public UnityEngine.ComputeBufferType IndirectArguments
    static constexpr const int IndirectArguments = 256;
    // Get static field: static public UnityEngine.ComputeBufferType IndirectArguments
    static ::UnityEngine::ComputeBufferType _get_IndirectArguments();
    // Set static field: static public UnityEngine.ComputeBufferType IndirectArguments
    static void _set_IndirectArguments(::UnityEngine::ComputeBufferType value);
    // static field const value: static public UnityEngine.ComputeBufferType GPUMemory
    static constexpr const int GPUMemory = 512;
    // Get static field: static public UnityEngine.ComputeBufferType GPUMemory
    static ::UnityEngine::ComputeBufferType _get_GPUMemory();
    // Set static field: static public UnityEngine.ComputeBufferType GPUMemory
    static void _set_GPUMemory(::UnityEngine::ComputeBufferType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // UnityEngine.ComputeBufferType
  #pragma pack(pop)
  static check_size<sizeof(ComputeBufferType), 0 + sizeof(int)> __UnityEngine_ComputeBufferTypeSizeCheck;
  static_assert(sizeof(ComputeBufferType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
