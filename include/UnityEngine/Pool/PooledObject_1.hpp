// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Pool
namespace UnityEngine::Pool {
  // Forward declaring type: IObjectPool`1<T>
  template<typename T>
  class IObjectPool_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Pool
namespace UnityEngine::Pool {
  // Forward declaring type: PooledObject`1<T>
  template<typename T>
  struct PooledObject_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::UnityEngine::Pool::PooledObject_1, "UnityEngine.Pool", "PooledObject`1");
// Type namespace: UnityEngine.Pool
namespace UnityEngine::Pool {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Pool.PooledObject`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  struct PooledObject_1/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private readonly T m_ToReturn
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T m_ToReturn;
    // private readonly UnityEngine.Pool.IObjectPool`1<T> m_Pool
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Pool::IObjectPool_1<T>* m_Pool;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pool::IObjectPool_1<T>*) == 0x8);
    public:
    // Creating value type constructor for type: PooledObject_1
    constexpr PooledObject_1(T m_ToReturn_ = {}, ::UnityEngine::Pool::IObjectPool_1<T>* m_Pool_ = {}) noexcept : m_ToReturn{m_ToReturn_}, m_Pool{m_Pool_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly T m_ToReturn
    [[deprecated("Use field access instead!")]] T& dyn_m_ToReturn() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Pool::PooledObject_1::dyn_m_ToReturn");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ToReturn"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly UnityEngine.Pool.IObjectPool`1<T> m_Pool
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pool::IObjectPool_1<T>*& dyn_m_Pool() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Pool::PooledObject_1::dyn_m_Pool");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Pool"))->offset;
      return *reinterpret_cast<::UnityEngine::Pool::IObjectPool_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // System.Void .ctor(T value, UnityEngine.Pool.IObjectPool`1<T> pool)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // ABORTED: conflicts with another method.  PooledObject_1(T value, ::UnityEngine::Pool::IObjectPool_1<T>* pool)
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_IDisposable_Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Pool::PooledObject_1::System.IDisposable.Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::Pool::PooledObject_1<T>), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // UnityEngine.Pool.PooledObject`1
  // Could not write size check! Type: UnityEngine.Pool.PooledObject`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
