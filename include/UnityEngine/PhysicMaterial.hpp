// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: PhysicMaterialCombine
  struct PhysicMaterialCombine;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: PhysicMaterial
  class PhysicMaterial;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::PhysicMaterial);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::PhysicMaterial*, "UnityEngine", "PhysicMaterial");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.PhysicMaterial
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  class PhysicMaterial : public ::UnityEngine::Object {
    public:
    // public System.Void .ctor()
    // Offset: 0x552D6E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhysicMaterial* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::PhysicMaterial::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhysicMaterial*, creationType>()));
    }
    // public System.Void .ctor(System.String name)
    // Offset: 0x552D7C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhysicMaterial* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::PhysicMaterial::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhysicMaterial*, creationType>(name)));
    }
    // static private System.Void Internal_CreateDynamicsMaterial(UnityEngine.PhysicMaterial mat, System.String name)
    // Offset: 0x552D77C
    static void Internal_CreateDynamicsMaterial(::UnityEngine::PhysicMaterial* mat, ::StringW name);
    // public System.Single get_bounciness()
    // Offset: 0x552D850
    float get_bounciness();
    // public System.Void set_bounciness(System.Single value)
    // Offset: 0x552D88C
    void set_bounciness(float value);
    // public System.Single get_dynamicFriction()
    // Offset: 0x552D8D8
    float get_dynamicFriction();
    // public System.Void set_dynamicFriction(System.Single value)
    // Offset: 0x552D914
    void set_dynamicFriction(float value);
    // public System.Single get_staticFriction()
    // Offset: 0x552D960
    float get_staticFriction();
    // public System.Void set_staticFriction(System.Single value)
    // Offset: 0x552D99C
    void set_staticFriction(float value);
    // public UnityEngine.PhysicMaterialCombine get_frictionCombine()
    // Offset: 0x552D9E8
    ::UnityEngine::PhysicMaterialCombine get_frictionCombine();
    // public System.Void set_frictionCombine(UnityEngine.PhysicMaterialCombine value)
    // Offset: 0x552DA24
    void set_frictionCombine(::UnityEngine::PhysicMaterialCombine value);
    // public UnityEngine.PhysicMaterialCombine get_bounceCombine()
    // Offset: 0x552DA68
    ::UnityEngine::PhysicMaterialCombine get_bounceCombine();
    // public System.Void set_bounceCombine(UnityEngine.PhysicMaterialCombine value)
    // Offset: 0x552DAA4
    void set_bounceCombine(::UnityEngine::PhysicMaterialCombine value);
    // public System.Single get_bouncyness()
    // Offset: 0x552DAE8
    float get_bouncyness();
    // public System.Void set_bouncyness(System.Single value)
    // Offset: 0x552DB24
    void set_bouncyness(float value);
    // public UnityEngine.Vector3 get_frictionDirection2()
    // Offset: 0x552DB70
    ::UnityEngine::Vector3 get_frictionDirection2();
    // public System.Void set_frictionDirection2(UnityEngine.Vector3 value)
    // Offset: 0x552DBB4
    void set_frictionDirection2(::UnityEngine::Vector3 value);
    // public System.Single get_dynamicFriction2()
    // Offset: 0x552DBB8
    float get_dynamicFriction2();
    // public System.Void set_dynamicFriction2(System.Single value)
    // Offset: 0x552DBC0
    void set_dynamicFriction2(float value);
    // public System.Single get_staticFriction2()
    // Offset: 0x552DBC4
    float get_staticFriction2();
    // public System.Void set_staticFriction2(System.Single value)
    // Offset: 0x552DBCC
    void set_staticFriction2(float value);
    // public UnityEngine.Vector3 get_frictionDirection()
    // Offset: 0x552DBD0
    ::UnityEngine::Vector3 get_frictionDirection();
    // public System.Void set_frictionDirection(UnityEngine.Vector3 value)
    // Offset: 0x552DC14
    void set_frictionDirection(::UnityEngine::Vector3 value);
  }; // UnityEngine.PhysicMaterial
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::Internal_CreateDynamicsMaterial
// Il2CppName: Internal_CreateDynamicsMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::PhysicMaterial*, ::StringW)>(&UnityEngine::PhysicMaterial::Internal_CreateDynamicsMaterial)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicMaterial")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "Internal_CreateDynamicsMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat, name});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::get_bounciness
// Il2CppName: get_bounciness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::PhysicMaterial::*)()>(&UnityEngine::PhysicMaterial::get_bounciness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "get_bounciness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::set_bounciness
// Il2CppName: set_bounciness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::PhysicMaterial::*)(float)>(&UnityEngine::PhysicMaterial::set_bounciness)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "set_bounciness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::get_dynamicFriction
// Il2CppName: get_dynamicFriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::PhysicMaterial::*)()>(&UnityEngine::PhysicMaterial::get_dynamicFriction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "get_dynamicFriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::set_dynamicFriction
// Il2CppName: set_dynamicFriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::PhysicMaterial::*)(float)>(&UnityEngine::PhysicMaterial::set_dynamicFriction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "set_dynamicFriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::get_staticFriction
// Il2CppName: get_staticFriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::PhysicMaterial::*)()>(&UnityEngine::PhysicMaterial::get_staticFriction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "get_staticFriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::set_staticFriction
// Il2CppName: set_staticFriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::PhysicMaterial::*)(float)>(&UnityEngine::PhysicMaterial::set_staticFriction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "set_staticFriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::get_frictionCombine
// Il2CppName: get_frictionCombine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::PhysicMaterialCombine (UnityEngine::PhysicMaterial::*)()>(&UnityEngine::PhysicMaterial::get_frictionCombine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "get_frictionCombine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::set_frictionCombine
// Il2CppName: set_frictionCombine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::PhysicMaterial::*)(::UnityEngine::PhysicMaterialCombine)>(&UnityEngine::PhysicMaterial::set_frictionCombine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicMaterialCombine")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "set_frictionCombine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::get_bounceCombine
// Il2CppName: get_bounceCombine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::PhysicMaterialCombine (UnityEngine::PhysicMaterial::*)()>(&UnityEngine::PhysicMaterial::get_bounceCombine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "get_bounceCombine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::set_bounceCombine
// Il2CppName: set_bounceCombine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::PhysicMaterial::*)(::UnityEngine::PhysicMaterialCombine)>(&UnityEngine::PhysicMaterial::set_bounceCombine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicMaterialCombine")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "set_bounceCombine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::get_bouncyness
// Il2CppName: get_bouncyness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::PhysicMaterial::*)()>(&UnityEngine::PhysicMaterial::get_bouncyness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "get_bouncyness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::set_bouncyness
// Il2CppName: set_bouncyness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::PhysicMaterial::*)(float)>(&UnityEngine::PhysicMaterial::set_bouncyness)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "set_bouncyness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::get_frictionDirection2
// Il2CppName: get_frictionDirection2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::PhysicMaterial::*)()>(&UnityEngine::PhysicMaterial::get_frictionDirection2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "get_frictionDirection2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::set_frictionDirection2
// Il2CppName: set_frictionDirection2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::PhysicMaterial::*)(::UnityEngine::Vector3)>(&UnityEngine::PhysicMaterial::set_frictionDirection2)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "set_frictionDirection2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::get_dynamicFriction2
// Il2CppName: get_dynamicFriction2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::PhysicMaterial::*)()>(&UnityEngine::PhysicMaterial::get_dynamicFriction2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "get_dynamicFriction2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::set_dynamicFriction2
// Il2CppName: set_dynamicFriction2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::PhysicMaterial::*)(float)>(&UnityEngine::PhysicMaterial::set_dynamicFriction2)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "set_dynamicFriction2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::get_staticFriction2
// Il2CppName: get_staticFriction2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::PhysicMaterial::*)()>(&UnityEngine::PhysicMaterial::get_staticFriction2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "get_staticFriction2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::set_staticFriction2
// Il2CppName: set_staticFriction2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::PhysicMaterial::*)(float)>(&UnityEngine::PhysicMaterial::set_staticFriction2)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "set_staticFriction2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::get_frictionDirection
// Il2CppName: get_frictionDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::PhysicMaterial::*)()>(&UnityEngine::PhysicMaterial::get_frictionDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "get_frictionDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicMaterial::set_frictionDirection
// Il2CppName: set_frictionDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::PhysicMaterial::*)(::UnityEngine::Vector3)>(&UnityEngine::PhysicMaterial::set_frictionDirection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicMaterial*), "set_frictionDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
