// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.VertexAttributeDescriptor
#include "UnityEngine/Rendering/VertexAttributeDescriptor.hpp"
// Including type: UnityEngine.Rendering.SubMeshDescriptor
#include "UnityEngine/Rendering/SubMeshDescriptor.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.GraphicsBuffer
#include "UnityEngine/GraphicsBuffer.hpp"
// Including type: UnityEngine.BoneWeight
#include "UnityEngine/BoneWeight.hpp"
// Including type: UnityEngine.BoneWeight1
#include "UnityEngine/BoneWeight1.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.CombineInstance
#include "UnityEngine/CombineInstance.hpp"
// Including type: UnityEngine.Rendering.MeshUpdateFlags
#include "UnityEngine/Rendering/MeshUpdateFlags.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: BlendShapeBufferRange
  struct BlendShapeBufferRange;
  // Forward declaring type: BlendShape
  struct BlendShape;
  // Forward declaring type: SkinWeights
  struct SkinWeights;
  // Skipping declaration: Bounds because it is already included!
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: IndexFormat
  struct IndexFormat;
  // Forward declaring type: BlendShapeBufferLayout
  struct BlendShapeBufferLayout;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
  // Skipping declaration: ValueType because it is already included!
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Mesh);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Mesh*, "UnityEngine", "Mesh");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Mesh
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [ExcludeFromPresetAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: FFFFFFFF
  class Mesh : public ::UnityEngine::Object {
    public:
    // Nested type: ::UnityEngine::Mesh::MeshData
    struct MeshData;
    // Nested type: ::UnityEngine::Mesh::MeshDataArray
    struct MeshDataArray;
    // static private System.Void Internal_Create(UnityEngine.Mesh mono)
    // Offset: 0x549EFD4
    static void Internal_Create(::UnityEngine::Mesh* mono);
    // static UnityEngine.Mesh FromInstanceID(System.Int32 id)
    // Offset: 0x549F090
    static ::UnityEngine::Mesh* FromInstanceID(int id);
    // public UnityEngine.Rendering.IndexFormat get_indexFormat()
    // Offset: 0x549F0CC
    ::UnityEngine::Rendering::IndexFormat get_indexFormat();
    // public System.Void set_indexFormat(UnityEngine.Rendering.IndexFormat value)
    // Offset: 0x549F108
    void set_indexFormat(::UnityEngine::Rendering::IndexFormat value);
    // System.UInt32 GetTotalIndexCount()
    // Offset: 0x549F14C
    uint GetTotalIndexCount();
    // public System.Void SetIndexBufferParams(System.Int32 indexCount, UnityEngine.Rendering.IndexFormat format)
    // Offset: 0x549F188
    void SetIndexBufferParams(int indexCount, ::UnityEngine::Rendering::IndexFormat format);
    // private System.Void InternalSetIndexBufferData(System.IntPtr data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x549F1DC
    void InternalSetIndexBufferData(::System::IntPtr data, int dataStart, int meshBufferStart, int count, int elemSize, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void InternalSetIndexBufferDataFromArray(System.Array data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x549F260
    void InternalSetIndexBufferDataFromArray(::System::Array* data, int dataStart, int meshBufferStart, int count, int elemSize, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void SetVertexBufferParamsFromPtr(System.Int32 vertexCount, System.IntPtr attributesPtr, System.Int32 attributesCount)
    // Offset: 0x549F2E4
    void SetVertexBufferParamsFromPtr(int vertexCount, ::System::IntPtr attributesPtr, int attributesCount);
    // private System.Void SetVertexBufferParamsFromArray(System.Int32 vertexCount, params UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    // Offset: 0x549F340
    void SetVertexBufferParamsFromArray(int vertexCount, ::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor> attributes);
    // private System.Void InternalSetVertexBufferData(System.Int32 stream, System.IntPtr data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x549F394
    void InternalSetVertexBufferData(int stream, ::System::IntPtr data, int dataStart, int meshBufferStart, int count, int elemSize, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void InternalSetVertexBufferDataFromArray(System.Int32 stream, System.Array data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x549F420
    void InternalSetVertexBufferDataFromArray(int stream, ::System::Array* data, int dataStart, int meshBufferStart, int count, int elemSize, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Array GetVertexAttributesAlloc()
    // Offset: 0x549F4AC
    ::System::Array* GetVertexAttributesAlloc();
    // private System.Int32 GetVertexAttributesArray(UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    // Offset: 0x549F4E8
    int GetVertexAttributesArray(::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor> attributes);
    // private System.Int32 GetVertexAttributesList(System.Collections.Generic.List`1<UnityEngine.Rendering.VertexAttributeDescriptor> attributes)
    // Offset: 0x549F52C
    int GetVertexAttributesList(::System::Collections::Generic::List_1<::UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // private System.Int32 GetVertexAttributeCountImpl()
    // Offset: 0x549F570
    int GetVertexAttributeCountImpl();
    // public UnityEngine.Rendering.VertexAttributeDescriptor GetVertexAttribute(System.Int32 index)
    // Offset: 0x549F5AC
    ::UnityEngine::Rendering::VertexAttributeDescriptor GetVertexAttribute(int index);
    // private System.UInt32 GetIndexStartImpl(System.Int32 submesh)
    // Offset: 0x549F65C
    uint GetIndexStartImpl(int submesh);
    // private System.UInt32 GetIndexCountImpl(System.Int32 submesh)
    // Offset: 0x549F6A0
    uint GetIndexCountImpl(int submesh);
    // private System.UInt32 GetTrianglesCountImpl(System.Int32 submesh)
    // Offset: 0x549F6E4
    uint GetTrianglesCountImpl(int submesh);
    // private System.UInt32 GetBaseVertexImpl(System.Int32 submesh)
    // Offset: 0x549F728
    uint GetBaseVertexImpl(int submesh);
    // private System.Int32[] GetTrianglesImpl(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x549F76C
    ::ArrayW<int> GetTrianglesImpl(int submesh, bool applyBaseVertex);
    // private System.Int32[] GetIndicesImpl(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x549F7C0
    ::ArrayW<int> GetIndicesImpl(int submesh, bool applyBaseVertex);
    // private System.Void SetIndicesImpl(System.Int32 submesh, UnityEngine.MeshTopology topology, UnityEngine.Rendering.IndexFormat indicesFormat, System.Array indices, System.Int32 arrayStart, System.Int32 arraySize, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x549F814
    void SetIndicesImpl(int submesh, ::UnityEngine::MeshTopology topology, ::UnityEngine::Rendering::IndexFormat indicesFormat, ::System::Array* indices, int arrayStart, int arraySize, bool calculateBounds, int baseVertex);
    // private System.Void SetIndicesNativeArrayImpl(System.Int32 submesh, UnityEngine.MeshTopology topology, UnityEngine.Rendering.IndexFormat indicesFormat, System.IntPtr indices, System.Int32 arrayStart, System.Int32 arraySize, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x549F8B0
    void SetIndicesNativeArrayImpl(int submesh, ::UnityEngine::MeshTopology topology, ::UnityEngine::Rendering::IndexFormat indicesFormat, ::System::IntPtr indices, int arrayStart, int arraySize, bool calculateBounds, int baseVertex);
    // private System.Void GetTrianglesNonAllocImpl(out System.Int32[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x549F94C
    void GetTrianglesNonAllocImpl(ByRef<::ArrayW<int>> values, int submesh, bool applyBaseVertex);
    // private System.Void GetTrianglesNonAllocImpl16(out System.UInt16[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x549F9A8
    void GetTrianglesNonAllocImpl16(ByRef<::ArrayW<uint16_t>> values, int submesh, bool applyBaseVertex);
    // private System.Void GetIndicesNonAllocImpl(out System.Int32[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x549FA04
    void GetIndicesNonAllocImpl(ByRef<::ArrayW<int>> values, int submesh, bool applyBaseVertex);
    // private System.Void GetIndicesNonAllocImpl16(out System.UInt16[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x549FA60
    void GetIndicesNonAllocImpl16(ByRef<::ArrayW<uint16_t>> values, int submesh, bool applyBaseVertex);
    // private System.Void PrintErrorCantAccessChannel(UnityEngine.Rendering.VertexAttribute ch)
    // Offset: 0x549FABC
    void PrintErrorCantAccessChannel(::UnityEngine::Rendering::VertexAttribute ch);
    // public System.Boolean HasVertexAttribute(UnityEngine.Rendering.VertexAttribute attr)
    // Offset: 0x549FB00
    bool HasVertexAttribute(::UnityEngine::Rendering::VertexAttribute attr);
    // public System.Int32 GetVertexAttributeDimension(UnityEngine.Rendering.VertexAttribute attr)
    // Offset: 0x549FB44
    int GetVertexAttributeDimension(::UnityEngine::Rendering::VertexAttribute attr);
    // public UnityEngine.Rendering.VertexAttributeFormat GetVertexAttributeFormat(UnityEngine.Rendering.VertexAttribute attr)
    // Offset: 0x549FB88
    ::UnityEngine::Rendering::VertexAttributeFormat GetVertexAttributeFormat(::UnityEngine::Rendering::VertexAttribute attr);
    // public System.Int32 GetVertexAttributeStream(UnityEngine.Rendering.VertexAttribute attr)
    // Offset: 0x549FBCC
    int GetVertexAttributeStream(::UnityEngine::Rendering::VertexAttribute attr);
    // public System.Int32 GetVertexAttributeOffset(UnityEngine.Rendering.VertexAttribute attr)
    // Offset: 0x549FC10
    int GetVertexAttributeOffset(::UnityEngine::Rendering::VertexAttribute attr);
    // private System.Void SetArrayForChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values, System.Int32 arraySize, System.Int32 valuesStart, System.Int32 valuesCount, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x549FC54
    void SetArrayForChannelImpl(::UnityEngine::Rendering::VertexAttribute channel, ::UnityEngine::Rendering::VertexAttributeFormat format, int dim, ::System::Array* values, int arraySize, int valuesStart, int valuesCount, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void SetNativeArrayForChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.IntPtr values, System.Int32 arraySize, System.Int32 valuesStart, System.Int32 valuesCount, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x549FCF0
    void SetNativeArrayForChannelImpl(::UnityEngine::Rendering::VertexAttribute channel, ::UnityEngine::Rendering::VertexAttributeFormat format, int dim, ::System::IntPtr values, int arraySize, int valuesStart, int valuesCount, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Array GetAllocArrayFromChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim)
    // Offset: 0x549FD8C
    ::System::Array* GetAllocArrayFromChannelImpl(::UnityEngine::Rendering::VertexAttribute channel, ::UnityEngine::Rendering::VertexAttributeFormat format, int dim);
    // private System.Void GetArrayFromChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values)
    // Offset: 0x549FDE8
    void GetArrayFromChannelImpl(::UnityEngine::Rendering::VertexAttribute channel, ::UnityEngine::Rendering::VertexAttributeFormat format, int dim, ::System::Array* values);
    // public System.Int32 get_vertexBufferCount()
    // Offset: 0x549FE54
    int get_vertexBufferCount();
    // public System.Int32 GetVertexBufferStride(System.Int32 stream)
    // Offset: 0x549FE90
    int GetVertexBufferStride(int stream);
    // public System.IntPtr GetNativeVertexBufferPtr(System.Int32 index)
    // Offset: 0x549FED4
    ::System::IntPtr GetNativeVertexBufferPtr(int index);
    // public System.IntPtr GetNativeIndexBufferPtr()
    // Offset: 0x549FF18
    ::System::IntPtr GetNativeIndexBufferPtr();
    // private UnityEngine.GraphicsBuffer GetVertexBufferImpl(System.Int32 index)
    // Offset: 0x549FF54
    ::UnityEngine::GraphicsBuffer* GetVertexBufferImpl(int index);
    // private UnityEngine.GraphicsBuffer GetIndexBufferImpl()
    // Offset: 0x549FF98
    ::UnityEngine::GraphicsBuffer* GetIndexBufferImpl();
    // private UnityEngine.GraphicsBuffer GetBoneWeightBufferImpl(System.Int32 bonesPerVertex)
    // Offset: 0x549FFD4
    ::UnityEngine::GraphicsBuffer* GetBoneWeightBufferImpl(int bonesPerVertex);
    // private UnityEngine.GraphicsBuffer GetBlendShapeBufferImpl(System.Int32 layout)
    // Offset: 0x54A0018
    ::UnityEngine::GraphicsBuffer* GetBlendShapeBufferImpl(int layout);
    // public UnityEngine.GraphicsBuffer/Target get_vertexBufferTarget()
    // Offset: 0x54A005C
    ::UnityEngine::GraphicsBuffer::Target get_vertexBufferTarget();
    // public System.Void set_vertexBufferTarget(UnityEngine.GraphicsBuffer/Target value)
    // Offset: 0x54A0098
    void set_vertexBufferTarget(::UnityEngine::GraphicsBuffer::Target value);
    // public UnityEngine.GraphicsBuffer/Target get_indexBufferTarget()
    // Offset: 0x54A00DC
    ::UnityEngine::GraphicsBuffer::Target get_indexBufferTarget();
    // public System.Void set_indexBufferTarget(UnityEngine.GraphicsBuffer/Target value)
    // Offset: 0x54A0118
    void set_indexBufferTarget(::UnityEngine::GraphicsBuffer::Target value);
    // public System.Int32 get_blendShapeCount()
    // Offset: 0x54A015C
    int get_blendShapeCount();
    // public System.Void ClearBlendShapes()
    // Offset: 0x54A0198
    void ClearBlendShapes();
    // public System.String GetBlendShapeName(System.Int32 shapeIndex)
    // Offset: 0x54A01D4
    ::StringW GetBlendShapeName(int shapeIndex);
    // public System.Int32 GetBlendShapeIndex(System.String blendShapeName)
    // Offset: 0x54A0218
    int GetBlendShapeIndex(::StringW blendShapeName);
    // public System.Int32 GetBlendShapeFrameCount(System.Int32 shapeIndex)
    // Offset: 0x54A025C
    int GetBlendShapeFrameCount(int shapeIndex);
    // public System.Single GetBlendShapeFrameWeight(System.Int32 shapeIndex, System.Int32 frameIndex)
    // Offset: 0x54A02A0
    float GetBlendShapeFrameWeight(int shapeIndex, int frameIndex);
    // public System.Void GetBlendShapeFrameVertices(System.Int32 shapeIndex, System.Int32 frameIndex, UnityEngine.Vector3[] deltaVertices, UnityEngine.Vector3[] deltaNormals, UnityEngine.Vector3[] deltaTangents)
    // Offset: 0x54A02F4
    void GetBlendShapeFrameVertices(int shapeIndex, int frameIndex, ::ArrayW<::UnityEngine::Vector3> deltaVertices, ::ArrayW<::UnityEngine::Vector3> deltaNormals, ::ArrayW<::UnityEngine::Vector3> deltaTangents);
    // public System.Void AddBlendShapeFrame(System.String shapeName, System.Single frameWeight, UnityEngine.Vector3[] deltaVertices, UnityEngine.Vector3[] deltaNormals, UnityEngine.Vector3[] deltaTangents)
    // Offset: 0x54A0368
    void AddBlendShapeFrame(::StringW shapeName, float frameWeight, ::ArrayW<::UnityEngine::Vector3> deltaVertices, ::ArrayW<::UnityEngine::Vector3> deltaNormals, ::ArrayW<::UnityEngine::Vector3> deltaTangents);
    // private UnityEngine.BlendShape GetBlendShapeOffsetInternal(System.Int32 index)
    // Offset: 0x54A03E4
    ::UnityEngine::BlendShape GetBlendShapeOffsetInternal(int index);
    // private System.Boolean HasBoneWeights()
    // Offset: 0x54A049C
    bool HasBoneWeights();
    // private UnityEngine.BoneWeight[] GetBoneWeightsImpl()
    // Offset: 0x54A04D8
    ::ArrayW<::UnityEngine::BoneWeight> GetBoneWeightsImpl();
    // private System.Void SetBoneWeightsImpl(UnityEngine.BoneWeight[] weights)
    // Offset: 0x54A0514
    void SetBoneWeightsImpl(::ArrayW<::UnityEngine::BoneWeight> weights);
    // public System.Void SetBoneWeights(Unity.Collections.NativeArray`1<System.Byte> bonesPerVertex, Unity.Collections.NativeArray`1<UnityEngine.BoneWeight1> weights)
    // Offset: 0x54A0558
    void SetBoneWeights(::Unity::Collections::NativeArray_1<uint8_t> bonesPerVertex, ::Unity::Collections::NativeArray_1<::UnityEngine::BoneWeight1> weights);
    // private System.Void InternalSetBoneWeights(System.IntPtr bonesPerVertex, System.Int32 bonesPerVertexSize, System.IntPtr weights, System.Int32 weightsSize)
    // Offset: 0x54A0640
    void InternalSetBoneWeights(::System::IntPtr bonesPerVertex, int bonesPerVertexSize, ::System::IntPtr weights, int weightsSize);
    // public Unity.Collections.NativeArray`1<UnityEngine.BoneWeight1> GetAllBoneWeights()
    // Offset: 0x54A06AC
    ::Unity::Collections::NativeArray_1<::UnityEngine::BoneWeight1> GetAllBoneWeights();
    // public Unity.Collections.NativeArray`1<System.Byte> GetBonesPerVertex()
    // Offset: 0x54A07D8
    ::Unity::Collections::NativeArray_1<uint8_t> GetBonesPerVertex();
    // private System.Int32 GetAllBoneWeightsArraySize()
    // Offset: 0x54A079C
    int GetAllBoneWeightsArraySize();
    // private System.Int32 GetBoneWeightBufferLayoutInternal()
    // Offset: 0x54A0934
    int GetBoneWeightBufferLayoutInternal();
    // private System.IntPtr GetAllBoneWeightsArray()
    // Offset: 0x54A0760
    ::System::IntPtr GetAllBoneWeightsArray();
    // private System.IntPtr GetBonesPerVertexArray()
    // Offset: 0x54A08F8
    ::System::IntPtr GetBonesPerVertexArray();
    // public System.Int32 get_bindposeCount()
    // Offset: 0x54A0970
    int get_bindposeCount();
    // public UnityEngine.Matrix4x4[] get_bindposes()
    // Offset: 0x54A09AC
    ::ArrayW<::UnityEngine::Matrix4x4> get_bindposes();
    // public System.Void set_bindposes(UnityEngine.Matrix4x4[] value)
    // Offset: 0x54A09E8
    void set_bindposes(::ArrayW<::UnityEngine::Matrix4x4> value);
    // public Unity.Collections.NativeArray`1<UnityEngine.Matrix4x4> GetBindposes()
    // Offset: 0x54A0A2C
    ::Unity::Collections::NativeArray_1<::UnityEngine::Matrix4x4> GetBindposes();
    // private System.IntPtr GetBindposesArray()
    // Offset: 0x54A0AE0
    ::System::IntPtr GetBindposesArray();
    // private System.Void GetBoneWeightsNonAllocImpl(out UnityEngine.BoneWeight[] values)
    // Offset: 0x54A0B1C
    void GetBoneWeightsNonAllocImpl(ByRef<::ArrayW<::UnityEngine::BoneWeight>> values);
    // private System.Void GetBindposesNonAllocImpl(out UnityEngine.Matrix4x4[] values)
    // Offset: 0x54A0B60
    void GetBindposesNonAllocImpl(ByRef<::ArrayW<::UnityEngine::Matrix4x4>> values);
    // public System.Boolean get_isReadable()
    // Offset: 0x54A0BA4
    bool get_isReadable();
    // System.Boolean get_canAccess()
    // Offset: 0x54A0BE0
    bool get_canAccess();
    // public System.Int32 get_vertexCount()
    // Offset: 0x54A08BC
    int get_vertexCount();
    // public System.Int32 get_subMeshCount()
    // Offset: 0x54A0C1C
    int get_subMeshCount();
    // public System.Void set_subMeshCount(System.Int32 value)
    // Offset: 0x54A0C58
    void set_subMeshCount(int value);
    // public System.Void SetSubMesh(System.Int32 index, UnityEngine.Rendering.SubMeshDescriptor desc, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A0C9C
    void SetSubMesh(int index, ::UnityEngine::Rendering::SubMeshDescriptor desc, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public UnityEngine.Rendering.SubMeshDescriptor GetSubMesh(System.Int32 index)
    // Offset: 0x54A0D54
    ::UnityEngine::Rendering::SubMeshDescriptor GetSubMesh(int index);
    // private System.Void SetAllSubMeshesAtOnceFromArray(UnityEngine.Rendering.SubMeshDescriptor[] desc, System.Int32 start, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A0E24
    void SetAllSubMeshesAtOnceFromArray(::ArrayW<::UnityEngine::Rendering::SubMeshDescriptor> desc, int start, int count, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void SetAllSubMeshesAtOnceFromNativeArray(System.IntPtr desc, System.Int32 start, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A0E90
    void SetAllSubMeshesAtOnceFromNativeArray(::System::IntPtr desc, int start, int count, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public UnityEngine.Bounds get_bounds()
    // Offset: 0x54A0EFC
    ::UnityEngine::Bounds get_bounds();
    // public System.Void set_bounds(UnityEngine.Bounds value)
    // Offset: 0x54A0FA8
    void set_bounds(::UnityEngine::Bounds value);
    // private System.Void ClearImpl(System.Boolean keepVertexLayout)
    // Offset: 0x54A1030
    void ClearImpl(bool keepVertexLayout);
    // private System.Void RecalculateBoundsImpl(UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A1074
    void RecalculateBoundsImpl(::UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void RecalculateNormalsImpl(UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A10B8
    void RecalculateNormalsImpl(::UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void RecalculateTangentsImpl(UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A10FC
    void RecalculateTangentsImpl(::UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void MarkDynamicImpl()
    // Offset: 0x54A1140
    void MarkDynamicImpl();
    // public System.Void MarkModified()
    // Offset: 0x54A117C
    void MarkModified();
    // private System.Void UploadMeshDataImpl(System.Boolean markNoLongerReadable)
    // Offset: 0x54A11B8
    void UploadMeshDataImpl(bool markNoLongerReadable);
    // private UnityEngine.MeshTopology GetTopologyImpl(System.Int32 submesh)
    // Offset: 0x54A11FC
    ::UnityEngine::MeshTopology GetTopologyImpl(int submesh);
    // private System.Void RecalculateUVDistributionMetricImpl(System.Int32 uvSetIndex, System.Single uvAreaThreshold)
    // Offset: 0x54A1240
    void RecalculateUVDistributionMetricImpl(int uvSetIndex, float uvAreaThreshold);
    // private System.Void RecalculateUVDistributionMetricsImpl(System.Single uvAreaThreshold)
    // Offset: 0x54A1294
    void RecalculateUVDistributionMetricsImpl(float uvAreaThreshold);
    // public System.Single GetUVDistributionMetric(System.Int32 uvSetIndex)
    // Offset: 0x54A12E0
    float GetUVDistributionMetric(int uvSetIndex);
    // private System.Void CombineMeshesImpl(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes, System.Boolean useMatrices, System.Boolean hasLightmapData)
    // Offset: 0x54A1324
    void CombineMeshesImpl(::ArrayW<::UnityEngine::CombineInstance> combine, bool mergeSubMeshes, bool useMatrices, bool hasLightmapData);
    // private System.Void OptimizeImpl()
    // Offset: 0x54A1390
    void OptimizeImpl();
    // private System.Void OptimizeIndexBuffersImpl()
    // Offset: 0x54A13CC
    void OptimizeIndexBuffersImpl();
    // private System.Void OptimizeReorderVertexBufferImpl()
    // Offset: 0x54A1408
    void OptimizeReorderVertexBufferImpl();
    // static UnityEngine.Rendering.VertexAttribute GetUVChannel(System.Int32 uvIndex)
    // Offset: 0x54A1444
    static ::UnityEngine::Rendering::VertexAttribute GetUVChannel(int uvIndex);
    // static System.Int32 DefaultDimensionForChannel(UnityEngine.Rendering.VertexAttribute channel)
    // Offset: 0x54A14B8
    static int DefaultDimensionForChannel(::UnityEngine::Rendering::VertexAttribute channel);
    // private T[] GetAllocArrayFromChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::ArrayW<T> GetAllocArrayFromChannel(::UnityEngine::Rendering::VertexAttribute channel, ::UnityEngine::Rendering::VertexAttributeFormat format, int dim) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::GetAllocArrayFromChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllocArrayFromChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(dim)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___generic__method, channel, format, dim);
    }
    // private T[] GetAllocArrayFromChannel(UnityEngine.Rendering.VertexAttribute channel)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::ArrayW<T> GetAllocArrayFromChannel(::UnityEngine::Rendering::VertexAttribute channel) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::GetAllocArrayFromChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllocArrayFromChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___generic__method, channel);
    }
    // private System.Void SetSizedArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values, System.Int32 valuesArrayLength, System.Int32 valuesStart, System.Int32 valuesCount, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A1554
    void SetSizedArrayForChannel(::UnityEngine::Rendering::VertexAttribute channel, ::UnityEngine::Rendering::VertexAttributeFormat format, int dim, ::System::Array* values, int valuesArrayLength, int valuesStart, int valuesCount, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void SetSizedNativeArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.IntPtr values, System.Int32 valuesArrayLength, System.Int32 valuesStart, System.Int32 valuesCount, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A17E8
    void SetSizedNativeArrayForChannel(::UnityEngine::Rendering::VertexAttribute channel, ::UnityEngine::Rendering::VertexAttributeFormat format, int dim, ::System::IntPtr values, int valuesArrayLength, int valuesStart, int valuesCount, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void SetArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, T[] values, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetArrayForChannel(::UnityEngine::Rendering::VertexAttribute channel, ::UnityEngine::Rendering::VertexAttributeFormat format, int dim, ::ArrayW<T> values, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetArrayForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetArrayForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, channel, format, dim, values, flags);
    }
    // private System.Void SetArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, T[] values, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetArrayForChannel(::UnityEngine::Rendering::VertexAttribute channel, ::ArrayW<T> values, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetArrayForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetArrayForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, channel, values, flags);
    }
    // private System.Void SetListForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Collections.Generic.List`1<T> values, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetListForChannel(::UnityEngine::Rendering::VertexAttribute channel, ::UnityEngine::Rendering::VertexAttributeFormat format, int dim, ::System::Collections::Generic::List_1<T>* values, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, channel, format, dim, values, start, length, flags);
    }
    // private System.Void SetListForChannel(UnityEngine.Rendering.VertexAttribute channel, System.Collections.Generic.List`1<T> values, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetListForChannel(::UnityEngine::Rendering::VertexAttribute channel, ::System::Collections::Generic::List_1<T>* values, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, channel, values, start, length, flags);
    }
    // private System.Void GetListForChannel(System.Collections.Generic.List`1<T> buffer, System.Int32 capacity, UnityEngine.Rendering.VertexAttribute channel, System.Int32 dim)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void GetListForChannel(::System::Collections::Generic::List_1<T>* buffer, int capacity, ::UnityEngine::Rendering::VertexAttribute channel, int dim) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::GetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(dim)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, buffer, capacity, channel, dim);
    }
    // private System.Void GetListForChannel(System.Collections.Generic.List`1<T> buffer, System.Int32 capacity, UnityEngine.Rendering.VertexAttribute channel, System.Int32 dim, UnityEngine.Rendering.VertexAttributeFormat channelType)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void GetListForChannel(::System::Collections::Generic::List_1<T>* buffer, int capacity, ::UnityEngine::Rendering::VertexAttribute channel, int dim, ::UnityEngine::Rendering::VertexAttributeFormat channelType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::GetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(channelType)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, buffer, capacity, channel, dim, channelType);
    }
    // public UnityEngine.Vector3[] get_vertices()
    // Offset: 0x54A1A74
    ::ArrayW<::UnityEngine::Vector3> get_vertices();
    // public System.Void set_vertices(UnityEngine.Vector3[] value)
    // Offset: 0x54A1AC0
    void set_vertices(::ArrayW<::UnityEngine::Vector3> value);
    // public UnityEngine.Vector3[] get_normals()
    // Offset: 0x54A1B20
    ::ArrayW<::UnityEngine::Vector3> get_normals();
    // public System.Void set_normals(UnityEngine.Vector3[] value)
    // Offset: 0x54A1B6C
    void set_normals(::ArrayW<::UnityEngine::Vector3> value);
    // public UnityEngine.Vector4[] get_tangents()
    // Offset: 0x54A1BCC
    ::ArrayW<::UnityEngine::Vector4> get_tangents();
    // public System.Void set_tangents(UnityEngine.Vector4[] value)
    // Offset: 0x54A1C18
    void set_tangents(::ArrayW<::UnityEngine::Vector4> value);
    // public UnityEngine.Vector2[] get_uv()
    // Offset: 0x54A1C78
    ::ArrayW<::UnityEngine::Vector2> get_uv();
    // public System.Void set_uv(UnityEngine.Vector2[] value)
    // Offset: 0x54A1CC4
    void set_uv(::ArrayW<::UnityEngine::Vector2> value);
    // public UnityEngine.Vector2[] get_uv2()
    // Offset: 0x54A1D24
    ::ArrayW<::UnityEngine::Vector2> get_uv2();
    // public System.Void set_uv2(UnityEngine.Vector2[] value)
    // Offset: 0x54A1D70
    void set_uv2(::ArrayW<::UnityEngine::Vector2> value);
    // public UnityEngine.Vector2[] get_uv3()
    // Offset: 0x54A1DD0
    ::ArrayW<::UnityEngine::Vector2> get_uv3();
    // public System.Void set_uv3(UnityEngine.Vector2[] value)
    // Offset: 0x54A1E1C
    void set_uv3(::ArrayW<::UnityEngine::Vector2> value);
    // public UnityEngine.Vector2[] get_uv4()
    // Offset: 0x54A1E7C
    ::ArrayW<::UnityEngine::Vector2> get_uv4();
    // public System.Void set_uv4(UnityEngine.Vector2[] value)
    // Offset: 0x54A1EC8
    void set_uv4(::ArrayW<::UnityEngine::Vector2> value);
    // public UnityEngine.Vector2[] get_uv5()
    // Offset: 0x54A1F28
    ::ArrayW<::UnityEngine::Vector2> get_uv5();
    // public System.Void set_uv5(UnityEngine.Vector2[] value)
    // Offset: 0x54A1F74
    void set_uv5(::ArrayW<::UnityEngine::Vector2> value);
    // public UnityEngine.Vector2[] get_uv6()
    // Offset: 0x54A1FD4
    ::ArrayW<::UnityEngine::Vector2> get_uv6();
    // public System.Void set_uv6(UnityEngine.Vector2[] value)
    // Offset: 0x54A2020
    void set_uv6(::ArrayW<::UnityEngine::Vector2> value);
    // public UnityEngine.Vector2[] get_uv7()
    // Offset: 0x54A2080
    ::ArrayW<::UnityEngine::Vector2> get_uv7();
    // public System.Void set_uv7(UnityEngine.Vector2[] value)
    // Offset: 0x54A20CC
    void set_uv7(::ArrayW<::UnityEngine::Vector2> value);
    // public UnityEngine.Vector2[] get_uv8()
    // Offset: 0x54A212C
    ::ArrayW<::UnityEngine::Vector2> get_uv8();
    // public System.Void set_uv8(UnityEngine.Vector2[] value)
    // Offset: 0x54A2178
    void set_uv8(::ArrayW<::UnityEngine::Vector2> value);
    // public UnityEngine.Color[] get_colors()
    // Offset: 0x54A21D8
    ::ArrayW<::UnityEngine::Color> get_colors();
    // public System.Void set_colors(UnityEngine.Color[] value)
    // Offset: 0x54A2224
    void set_colors(::ArrayW<::UnityEngine::Color> value);
    // public UnityEngine.Color32[] get_colors32()
    // Offset: 0x54A2284
    ::ArrayW<::UnityEngine::Color32> get_colors32();
    // public System.Void set_colors32(UnityEngine.Color32[] value)
    // Offset: 0x54A22D8
    void set_colors32(::ArrayW<::UnityEngine::Color32> value);
    // public System.Void GetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> vertices)
    // Offset: 0x54A2340
    void GetVertices(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* vertices);
    // public System.Void SetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> inVertices)
    // Offset: 0x54A242C
    void SetVertices(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* inVertices);
    // public System.Void SetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> inVertices, System.Int32 start, System.Int32 length)
    // Offset: 0x54A2498
    void SetVertices(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* inVertices, int start, int length);
    // public System.Void SetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> inVertices, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A24A0
    void SetVertices(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* inVertices, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetVertices(UnityEngine.Vector3[] inVertices)
    // Offset: 0x54A251C
    void SetVertices(::ArrayW<::UnityEngine::Vector3> inVertices);
    // public System.Void SetVertices(UnityEngine.Vector3[] inVertices, System.Int32 start, System.Int32 length)
    // Offset: 0x54A2584
    void SetVertices(::ArrayW<::UnityEngine::Vector3> inVertices, int start, int length);
    // public System.Void SetVertices(UnityEngine.Vector3[] inVertices, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A25EC
    void SetVertices(::ArrayW<::UnityEngine::Vector3> inVertices, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetVertices(Unity.Collections.NativeArray`1<T> inVertices)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetVertices(::Unity::Collections::NativeArray_1<T> inVertices) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetVertices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inVertices)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, inVertices);
    }
    // public System.Void SetVertices(Unity.Collections.NativeArray`1<T> inVertices, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetVertices(::Unity::Collections::NativeArray_1<T> inVertices, int start, int length) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetVertices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inVertices), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, inVertices, start, length);
    }
    // public System.Void SetVertices(Unity.Collections.NativeArray`1<T> inVertices, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetVertices(::Unity::Collections::NativeArray_1<T> inVertices, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetVertices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inVertices), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, inVertices, start, length, flags);
    }
    // public System.Void GetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> normals)
    // Offset: 0x54A2658
    void GetNormals(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* normals);
    // public System.Void SetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> inNormals)
    // Offset: 0x54A2744
    void SetNormals(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* inNormals);
    // public System.Void SetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> inNormals, System.Int32 start, System.Int32 length)
    // Offset: 0x54A27B0
    void SetNormals(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* inNormals, int start, int length);
    // public System.Void SetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> inNormals, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A27B8
    void SetNormals(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* inNormals, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetNormals(UnityEngine.Vector3[] inNormals)
    // Offset: 0x54A2834
    void SetNormals(::ArrayW<::UnityEngine::Vector3> inNormals);
    // public System.Void SetNormals(UnityEngine.Vector3[] inNormals, System.Int32 start, System.Int32 length)
    // Offset: 0x54A289C
    void SetNormals(::ArrayW<::UnityEngine::Vector3> inNormals, int start, int length);
    // public System.Void SetNormals(UnityEngine.Vector3[] inNormals, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A2904
    void SetNormals(::ArrayW<::UnityEngine::Vector3> inNormals, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetNormals(Unity.Collections.NativeArray`1<T> inNormals)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetNormals(::Unity::Collections::NativeArray_1<T> inNormals) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetNormals");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormals", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inNormals)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, inNormals);
    }
    // public System.Void SetNormals(Unity.Collections.NativeArray`1<T> inNormals, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetNormals(::Unity::Collections::NativeArray_1<T> inNormals, int start, int length) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetNormals");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormals", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inNormals), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, inNormals, start, length);
    }
    // public System.Void SetNormals(Unity.Collections.NativeArray`1<T> inNormals, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetNormals(::Unity::Collections::NativeArray_1<T> inNormals, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetNormals");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormals", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inNormals), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, inNormals, start, length, flags);
    }
    // public System.Void GetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> tangents)
    // Offset: 0x54A2970
    void GetTangents(::System::Collections::Generic::List_1<::UnityEngine::Vector4>* tangents);
    // public System.Void SetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> inTangents)
    // Offset: 0x54A2A5C
    void SetTangents(::System::Collections::Generic::List_1<::UnityEngine::Vector4>* inTangents);
    // public System.Void SetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> inTangents, System.Int32 start, System.Int32 length)
    // Offset: 0x54A2AC8
    void SetTangents(::System::Collections::Generic::List_1<::UnityEngine::Vector4>* inTangents, int start, int length);
    // public System.Void SetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> inTangents, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A2AD0
    void SetTangents(::System::Collections::Generic::List_1<::UnityEngine::Vector4>* inTangents, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetTangents(UnityEngine.Vector4[] inTangents)
    // Offset: 0x54A2B4C
    void SetTangents(::ArrayW<::UnityEngine::Vector4> inTangents);
    // public System.Void SetTangents(UnityEngine.Vector4[] inTangents, System.Int32 start, System.Int32 length)
    // Offset: 0x54A2BB4
    void SetTangents(::ArrayW<::UnityEngine::Vector4> inTangents, int start, int length);
    // public System.Void SetTangents(UnityEngine.Vector4[] inTangents, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A2C1C
    void SetTangents(::ArrayW<::UnityEngine::Vector4> inTangents, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetTangents(Unity.Collections.NativeArray`1<T> inTangents)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetTangents(::Unity::Collections::NativeArray_1<T> inTangents) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetTangents");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTangents", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inTangents)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, inTangents);
    }
    // public System.Void SetTangents(Unity.Collections.NativeArray`1<T> inTangents, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetTangents(::Unity::Collections::NativeArray_1<T> inTangents, int start, int length) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetTangents");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTangents", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inTangents), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, inTangents, start, length);
    }
    // public System.Void SetTangents(Unity.Collections.NativeArray`1<T> inTangents, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetTangents(::Unity::Collections::NativeArray_1<T> inTangents, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetTangents");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTangents", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inTangents), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, inTangents, start, length, flags);
    }
    // public System.Void GetColors(System.Collections.Generic.List`1<UnityEngine.Color> colors)
    // Offset: 0x54A2C88
    void GetColors(::System::Collections::Generic::List_1<::UnityEngine::Color>* colors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color> inColors)
    // Offset: 0x54A2D74
    void SetColors(::System::Collections::Generic::List_1<::UnityEngine::Color>* inColors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color> inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x54A2DE0
    void SetColors(::System::Collections::Generic::List_1<::UnityEngine::Color>* inColors, int start, int length);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color> inColors, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A2DE8
    void SetColors(::System::Collections::Generic::List_1<::UnityEngine::Color>* inColors, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetColors(UnityEngine.Color[] inColors)
    // Offset: 0x54A2E64
    void SetColors(::ArrayW<::UnityEngine::Color> inColors);
    // public System.Void SetColors(UnityEngine.Color[] inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x54A2ECC
    void SetColors(::ArrayW<::UnityEngine::Color> inColors, int start, int length);
    // public System.Void SetColors(UnityEngine.Color[] inColors, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A2F34
    void SetColors(::ArrayW<::UnityEngine::Color> inColors, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void GetColors(System.Collections.Generic.List`1<UnityEngine.Color32> colors)
    // Offset: 0x54A2FA0
    void GetColors(::System::Collections::Generic::List_1<::UnityEngine::Color32>* colors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color32> inColors)
    // Offset: 0x54A3090
    void SetColors(::System::Collections::Generic::List_1<::UnityEngine::Color32>* inColors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color32> inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x54A30FC
    void SetColors(::System::Collections::Generic::List_1<::UnityEngine::Color32>* inColors, int start, int length);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color32> inColors, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A3104
    void SetColors(::System::Collections::Generic::List_1<::UnityEngine::Color32>* inColors, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetColors(UnityEngine.Color32[] inColors)
    // Offset: 0x54A3198
    void SetColors(::ArrayW<::UnityEngine::Color32> inColors);
    // public System.Void SetColors(UnityEngine.Color32[] inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x54A3200
    void SetColors(::ArrayW<::UnityEngine::Color32> inColors, int start, int length);
    // public System.Void SetColors(UnityEngine.Color32[] inColors, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A3268
    void SetColors(::ArrayW<::UnityEngine::Color32> inColors, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetColors(Unity.Collections.NativeArray`1<T> inColors)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetColors(::Unity::Collections::NativeArray_1<T> inColors) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetColors");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inColors)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, inColors);
    }
    // public System.Void SetColors(Unity.Collections.NativeArray`1<T> inColors, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetColors(::Unity::Collections::NativeArray_1<T> inColors, int start, int length) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetColors");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inColors), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, inColors, start, length);
    }
    // public System.Void SetColors(Unity.Collections.NativeArray`1<T> inColors, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetColors(::Unity::Collections::NativeArray_1<T> inColors, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetColors");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inColors), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, inColors, start, length, flags);
    }
    // private System.Void SetUvsImpl(System.Int32 uvIndex, System.Int32 dim, System.Collections.Generic.List`1<T> uvs, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetUvsImpl(int uvIndex, int dim, ::System::Collections::Generic::List_1<T>* uvs, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetUvsImpl");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUvsImpl", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uvIndex), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(uvs), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, uvIndex, dim, uvs, start, length, flags);
    }
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs)
    // Offset: 0x54A32D4
    void SetUVs(int channel, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* uvs);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs)
    // Offset: 0x54A3350
    void SetUVs(int channel, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* uvs);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)
    // Offset: 0x54A33CC
    void SetUVs(int channel, ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* uvs);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x54A3348
    void SetUVs(int channel, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A3448
    void SetUVs(int channel, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* uvs, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x54A33C4
    void SetUVs(int channel, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A34D4
    void SetUVs(int channel, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* uvs, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x54A3440
    void SetUVs(int channel, ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A3560
    void SetUVs(int channel, ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* uvs, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void SetUvsImpl(System.Int32 uvIndex, System.Int32 dim, System.Array uvs, System.Int32 arrayStart, System.Int32 arraySize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A35EC
    void SetUvsImpl(int uvIndex, int dim, ::System::Array* uvs, int arrayStart, int arraySize, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector2[] uvs)
    // Offset: 0x54A36F4
    void SetUVs(int channel, ::ArrayW<::UnityEngine::Vector2> uvs);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector3[] uvs)
    // Offset: 0x54A3754
    void SetUVs(int channel, ::ArrayW<::UnityEngine::Vector3> uvs);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector4[] uvs)
    // Offset: 0x54A37B4
    void SetUVs(int channel, ::ArrayW<::UnityEngine::Vector4> uvs);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector2[] uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x54A373C
    void SetUVs(int channel, ::ArrayW<::UnityEngine::Vector2> uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector2[] uvs, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A3814
    void SetUVs(int channel, ::ArrayW<::UnityEngine::Vector2> uvs, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector3[] uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x54A379C
    void SetUVs(int channel, ::ArrayW<::UnityEngine::Vector3> uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector3[] uvs, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A382C
    void SetUVs(int channel, ::ArrayW<::UnityEngine::Vector3> uvs, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector4[] uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x54A37FC
    void SetUVs(int channel, ::ArrayW<::UnityEngine::Vector4> uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector4[] uvs, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A3844
    void SetUVs(int channel, ::ArrayW<::UnityEngine::Vector4> uvs, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetUVs(System.Int32 channel, Unity.Collections.NativeArray`1<T> uvs)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetUVs(int channel, ::Unity::Collections::NativeArray_1<T> uvs) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetUVs");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUVs", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(uvs)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, channel, uvs);
    }
    // public System.Void SetUVs(System.Int32 channel, Unity.Collections.NativeArray`1<T> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetUVs(int channel, ::Unity::Collections::NativeArray_1<T> uvs, int start, int length) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetUVs");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUVs", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(uvs), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, channel, uvs, start, length);
    }
    // public System.Void SetUVs(System.Int32 channel, Unity.Collections.NativeArray`1<T> uvs, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetUVs(int channel, ::Unity::Collections::NativeArray_1<T> uvs, int start, int length, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetUVs");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUVs", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(uvs), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, channel, uvs, start, length, flags);
    }
    // private System.Void GetUVsImpl(System.Int32 uvIndex, System.Collections.Generic.List`1<T> uvs, System.Int32 dim)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void GetUVsImpl(int uvIndex, ::System::Collections::Generic::List_1<T>* uvs, int dim) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::GetUVsImpl");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUVsImpl", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uvIndex), ::il2cpp_utils::ExtractType(uvs), ::il2cpp_utils::ExtractType(dim)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, uvIndex, uvs, dim);
    }
    // public System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs)
    // Offset: 0x54A385C
    void GetUVs(int channel, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* uvs);
    // public System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs)
    // Offset: 0x54A38C0
    void GetUVs(int channel, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* uvs);
    // public System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)
    // Offset: 0x54A3924
    void GetUVs(int channel, ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* uvs);
    // public System.Int32 get_vertexAttributeCount()
    // Offset: 0x54A3988
    int get_vertexAttributeCount();
    // public UnityEngine.Rendering.VertexAttributeDescriptor[] GetVertexAttributes()
    // Offset: 0x54A39C4
    ::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor> GetVertexAttributes();
    // public System.Int32 GetVertexAttributes(UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    // Offset: 0x54A3A50
    int GetVertexAttributes(::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor> attributes);
    // public System.Int32 GetVertexAttributes(System.Collections.Generic.List`1<UnityEngine.Rendering.VertexAttributeDescriptor> attributes)
    // Offset: 0x54A3A94
    int GetVertexAttributes(::System::Collections::Generic::List_1<::UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // public System.Void SetVertexBufferParams(System.Int32 vertexCount, params UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    // Offset: 0x54A3AD8
    void SetVertexBufferParams(int vertexCount, ::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor> attributes);
    // public System.Void SetVertexBufferParams(System.Int32 vertexCount, Unity.Collections.NativeArray`1<UnityEngine.Rendering.VertexAttributeDescriptor> attributes)
    // Offset: 0x54A3B2C
    void SetVertexBufferParams(int vertexCount, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VertexAttributeDescriptor> attributes);
    // public System.Void SetVertexBufferData(Unity.Collections.NativeArray`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 stream, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetVertexBufferData(::Unity::Collections::NativeArray_1<T> data, int dataStart, int meshBufferStart, int count, int stream, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetVertexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, stream, flags);
    }
    // public System.Void SetVertexBufferData(T[] data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 stream, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetVertexBufferData(::ArrayW<T> data, int dataStart, int meshBufferStart, int count, int stream, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetVertexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, stream, flags);
    }
    // public System.Void SetVertexBufferData(System.Collections.Generic.List`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 stream, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetVertexBufferData(::System::Collections::Generic::List_1<T>* data, int dataStart, int meshBufferStart, int count, int stream, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetVertexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, stream, flags);
    }
    // static public UnityEngine.Mesh/MeshDataArray AcquireReadOnlyMeshData(UnityEngine.Mesh mesh)
    // Offset: 0x54A3BD4
    static ::UnityEngine::Mesh::MeshDataArray AcquireReadOnlyMeshData(::UnityEngine::Mesh* mesh);
    // static public UnityEngine.Mesh/MeshDataArray AcquireReadOnlyMeshData(UnityEngine.Mesh[] meshes)
    // Offset: 0x54A3E1C
    static ::UnityEngine::Mesh::MeshDataArray AcquireReadOnlyMeshData(::ArrayW<::UnityEngine::Mesh*> meshes);
    // static public UnityEngine.Mesh/MeshDataArray AcquireReadOnlyMeshData(System.Collections.Generic.List`1<UnityEngine.Mesh> meshes)
    // Offset: 0x54A41A8
    static ::UnityEngine::Mesh::MeshDataArray AcquireReadOnlyMeshData(::System::Collections::Generic::List_1<::UnityEngine::Mesh*>* meshes);
    // static public UnityEngine.Mesh/MeshDataArray AllocateWritableMeshData(System.Int32 meshCount)
    // Offset: 0x54A4284
    static ::UnityEngine::Mesh::MeshDataArray AllocateWritableMeshData(int meshCount);
    // static public System.Void ApplyAndDisposeWritableMeshData(UnityEngine.Mesh/MeshDataArray data, UnityEngine.Mesh mesh, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A43CC
    static void ApplyAndDisposeWritableMeshData(::UnityEngine::Mesh::MeshDataArray data, ::UnityEngine::Mesh* mesh, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // static public System.Void ApplyAndDisposeWritableMeshData(UnityEngine.Mesh/MeshDataArray data, UnityEngine.Mesh[] meshes, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A4664
    static void ApplyAndDisposeWritableMeshData(::UnityEngine::Mesh::MeshDataArray data, ::ArrayW<::UnityEngine::Mesh*> meshes, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // static public System.Void ApplyAndDisposeWritableMeshData(UnityEngine.Mesh/MeshDataArray data, System.Collections.Generic.List`1<UnityEngine.Mesh> meshes, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A49F0
    static void ApplyAndDisposeWritableMeshData(::UnityEngine::Mesh::MeshDataArray data, ::System::Collections::Generic::List_1<::UnityEngine::Mesh*>* meshes, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public UnityEngine.GraphicsBuffer GetVertexBuffer(System.Int32 index)
    // Offset: 0x54A4BA0
    ::UnityEngine::GraphicsBuffer* GetVertexBuffer(int index);
    // public UnityEngine.GraphicsBuffer GetIndexBuffer()
    // Offset: 0x54A4C6C
    ::UnityEngine::GraphicsBuffer* GetIndexBuffer();
    // public UnityEngine.GraphicsBuffer GetBoneWeightBuffer(UnityEngine.SkinWeights layout)
    // Offset: 0x54A4D28
    ::UnityEngine::GraphicsBuffer* GetBoneWeightBuffer(::UnityEngine::SkinWeights layout);
    // public UnityEngine.GraphicsBuffer GetBlendShapeBuffer(UnityEngine.Rendering.BlendShapeBufferLayout layout)
    // Offset: 0x54A4FF0
    ::UnityEngine::GraphicsBuffer* GetBlendShapeBuffer(::UnityEngine::Rendering::BlendShapeBufferLayout layout);
    // public UnityEngine.GraphicsBuffer GetBlendShapeBuffer()
    // Offset: 0x54A5120
    ::UnityEngine::GraphicsBuffer* GetBlendShapeBuffer();
    // public UnityEngine.BlendShapeBufferRange GetBlendShapeBufferRange(System.Int32 blendShapeIndex)
    // Offset: 0x54A5240
    ::UnityEngine::BlendShapeBufferRange GetBlendShapeBufferRange(int blendShapeIndex);
    // private System.Void PrintErrorCantAccessIndices()
    // Offset: 0x54A5330
    void PrintErrorCantAccessIndices();
    // private System.Boolean CheckCanAccessSubmesh(System.Int32 submesh, System.Boolean errorAboutTriangles)
    // Offset: 0x54A53CC
    bool CheckCanAccessSubmesh(int submesh, bool errorAboutTriangles);
    // private System.Boolean CheckCanAccessSubmeshTriangles(System.Int32 submesh)
    // Offset: 0x54A5510
    bool CheckCanAccessSubmeshTriangles(int submesh);
    // private System.Boolean CheckCanAccessSubmeshIndices(System.Int32 submesh)
    // Offset: 0x54A5518
    bool CheckCanAccessSubmeshIndices(int submesh);
    // public System.Int32[] get_triangles()
    // Offset: 0x54A5520
    ::ArrayW<int> get_triangles();
    // public System.Void set_triangles(System.Int32[] value)
    // Offset: 0x54A55D4
    void set_triangles(::ArrayW<int> value);
    // public System.Int32[] GetTriangles(System.Int32 submesh)
    // Offset: 0x54A571C
    ::ArrayW<int> GetTriangles(int submesh);
    // public System.Int32[] GetTriangles(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x54A5724
    ::ArrayW<int> GetTriangles(int submesh, bool applyBaseVertex);
    // public System.Void GetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh)
    // Offset: 0x54A57CC
    void GetTriangles(::System::Collections::Generic::List_1<int>* triangles, int submesh);
    // public System.Void GetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x54A57D4
    void GetTriangles(::System::Collections::Generic::List_1<int>* triangles, int submesh, bool applyBaseVertex);
    // public System.Void GetTriangles(System.Collections.Generic.List`1<System.UInt16> triangles, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x54A5988
    void GetTriangles(::System::Collections::Generic::List_1<uint16_t>* triangles, int submesh, bool applyBaseVertex);
    // public System.Int32[] GetIndices(System.Int32 submesh)
    // Offset: 0x54A5B3C
    ::ArrayW<int> GetIndices(int submesh);
    // public System.Int32[] GetIndices(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x54A5B44
    ::ArrayW<int> GetIndices(int submesh, bool applyBaseVertex);
    // public System.Void GetIndices(System.Collections.Generic.List`1<System.Int32> indices, System.Int32 submesh)
    // Offset: 0x54A5BEC
    void GetIndices(::System::Collections::Generic::List_1<int>* indices, int submesh);
    // public System.Void GetIndices(System.Collections.Generic.List`1<System.Int32> indices, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x54A5BF4
    void GetIndices(::System::Collections::Generic::List_1<int>* indices, int submesh, bool applyBaseVertex);
    // public System.Void GetIndices(System.Collections.Generic.List`1<System.UInt16> indices, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x54A5E48
    void GetIndices(::System::Collections::Generic::List_1<uint16_t>* indices, int submesh, bool applyBaseVertex);
    // public System.Void SetIndexBufferData(Unity.Collections.NativeArray`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetIndexBufferData(::Unity::Collections::NativeArray_1<T> data, int dataStart, int meshBufferStart, int count, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetIndexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, flags);
    }
    // public System.Void SetIndexBufferData(T[] data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetIndexBufferData(::ArrayW<T> data, int dataStart, int meshBufferStart, int count, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetIndexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, flags);
    }
    // public System.Void SetIndexBufferData(System.Collections.Generic.List`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetIndexBufferData(::System::Collections::Generic::List_1<T>* data, int dataStart, int meshBufferStart, int count, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetIndexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, flags);
    }
    // public System.UInt32 GetIndexStart(System.Int32 submesh)
    // Offset: 0x54A5FDC
    uint GetIndexStart(int submesh);
    // public System.UInt32 GetIndexCount(System.Int32 submesh)
    // Offset: 0x54A5D88
    uint GetIndexCount(int submesh);
    // public System.UInt32 GetBaseVertex(System.Int32 submesh)
    // Offset: 0x54A609C
    uint GetBaseVertex(int submesh);
    // private System.Void CheckIndicesArrayRange(System.Int32 valuesLength, System.Int32 start, System.Int32 length)
    // Offset: 0x54A615C
    void CheckIndicesArrayRange(int valuesLength, int start, int length);
    // private System.Void SetTrianglesImpl(System.Int32 submesh, UnityEngine.Rendering.IndexFormat indicesFormat, System.Array triangles, System.Int32 trianglesArrayLength, System.Int32 start, System.Int32 length, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A567C
    void SetTrianglesImpl(int submesh, ::UnityEngine::Rendering::IndexFormat indicesFormat, ::System::Array* triangles, int trianglesArrayLength, int start, int length, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh)
    // Offset: 0x54A62F8
    void SetTriangles(::ArrayW<int> triangles, int submesh);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh, System.Boolean calculateBounds)
    // Offset: 0x54A6398
    void SetTriangles(::ArrayW<int> triangles, int submesh, bool calculateBounds);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A6340
    void SetTriangles(::ArrayW<int> triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A63EC
    void SetTriangles(::ArrayW<int> triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.UInt16[] triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A6478
    void SetTriangles(::ArrayW<uint16_t> triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.UInt16[] triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A64D0
    void SetTriangles(::ArrayW<uint16_t> triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh)
    // Offset: 0x54A655C
    void SetTriangles(::System::Collections::Generic::List_1<int>* triangles, int submesh);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh, System.Boolean calculateBounds)
    // Offset: 0x54A65F0
    void SetTriangles(::System::Collections::Generic::List_1<int>* triangles, int submesh, bool calculateBounds);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A6568
    void SetTriangles(::System::Collections::Generic::List_1<int>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A65FC
    void SetTriangles(::System::Collections::Generic::List_1<int>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.UInt16> triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A66CC
    void SetTriangles(::System::Collections::Generic::List_1<uint16_t>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.UInt16> triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A6754
    void SetTriangles(::System::Collections::Generic::List_1<uint16_t>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh)
    // Offset: 0x54A6824
    void SetIndices(::ArrayW<int> indices, ::UnityEngine::MeshTopology topology, int submesh);
    // public System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds)
    // Offset: 0x54A68FC
    void SetIndices(::ArrayW<int> indices, ::UnityEngine::MeshTopology topology, int submesh, bool calculateBounds);
    // public System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A6888
    void SetIndices(::ArrayW<int> indices, ::UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Int32[] indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A6964
    void SetIndices(::ArrayW<int> indices, int indicesStart, int indicesLength, ::UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.UInt16[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A6A38
    void SetIndices(::ArrayW<uint16_t> indices, ::UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.UInt16[] indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A6AAC
    void SetIndices(::ArrayW<uint16_t> indices, int indicesStart, int indicesLength, ::UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(Unity.Collections.NativeArray`1<T> indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetIndices(::Unity::Collections::NativeArray_1<T> indices, ::UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetIndices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(indices), ::il2cpp_utils::ExtractType(topology), ::il2cpp_utils::ExtractType(submesh), ::il2cpp_utils::ExtractType(calculateBounds), ::il2cpp_utils::ExtractType(baseVertex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, indices, topology, submesh, calculateBounds, baseVertex);
    }
    // public System.Void SetIndices(Unity.Collections.NativeArray`1<T> indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetIndices(::Unity::Collections::NativeArray_1<T> indices, int indicesStart, int indicesLength, ::UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetIndices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(indices), ::il2cpp_utils::ExtractType(indicesStart), ::il2cpp_utils::ExtractType(indicesLength), ::il2cpp_utils::ExtractType(topology), ::il2cpp_utils::ExtractType(submesh), ::il2cpp_utils::ExtractType(calculateBounds), ::il2cpp_utils::ExtractType(baseVertex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, indices, indicesStart, indicesLength, topology, submesh, calculateBounds, baseVertex);
    }
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.Int32> indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A6B80
    void SetIndices(::System::Collections::Generic::List_1<int>* indices, ::UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.Int32> indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A6C24
    void SetIndices(::System::Collections::Generic::List_1<int>* indices, int indicesStart, int indicesLength, ::UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.UInt16> indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A6D34
    void SetIndices(::System::Collections::Generic::List_1<uint16_t>* indices, ::UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.UInt16> indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x54A6DD8
    void SetIndices(::System::Collections::Generic::List_1<uint16_t>* indices, int indicesStart, int indicesLength, ::UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetSubMeshes(UnityEngine.Rendering.SubMeshDescriptor[] desc, System.Int32 start, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A6EE8
    void SetSubMeshes(::ArrayW<::UnityEngine::Rendering::SubMeshDescriptor> desc, int start, int count, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetSubMeshes(UnityEngine.Rendering.SubMeshDescriptor[] desc, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A71B4
    void SetSubMeshes(::ArrayW<::UnityEngine::Rendering::SubMeshDescriptor> desc, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetSubMeshes(System.Collections.Generic.List`1<UnityEngine.Rendering.SubMeshDescriptor> desc, System.Int32 start, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A71E0
    void SetSubMeshes(::System::Collections::Generic::List_1<::UnityEngine::Rendering::SubMeshDescriptor>* desc, int start, int count, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetSubMeshes(System.Collections.Generic.List`1<UnityEngine.Rendering.SubMeshDescriptor> desc, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A7260
    void SetSubMeshes(::System::Collections::Generic::List_1<::UnityEngine::Rendering::SubMeshDescriptor>* desc, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetSubMeshes(Unity.Collections.NativeArray`1<T> desc, System.Int32 start, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetSubMeshes(::Unity::Collections::NativeArray_1<T> desc, int start, int count, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetSubMeshes");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSubMeshes", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(desc), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, desc, start, count, flags);
    }
    // public System.Void SetSubMeshes(Unity.Collections.NativeArray`1<T> desc, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetSubMeshes(::Unity::Collections::NativeArray_1<T> desc, ::UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::SetSubMeshes");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSubMeshes", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(desc), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, desc, flags);
    }
    // public System.Void GetBindposes(System.Collections.Generic.List`1<UnityEngine.Matrix4x4> bindposes)
    // Offset: 0x54A72F0
    void GetBindposes(::System::Collections::Generic::List_1<::UnityEngine::Matrix4x4>* bindposes);
    // public System.Void GetBoneWeights(System.Collections.Generic.List`1<UnityEngine.BoneWeight> boneWeights)
    // Offset: 0x54A7420
    void GetBoneWeights(::System::Collections::Generic::List_1<::UnityEngine::BoneWeight>* boneWeights);
    // public UnityEngine.BoneWeight[] get_boneWeights()
    // Offset: 0x54A757C
    ::ArrayW<::UnityEngine::BoneWeight> get_boneWeights();
    // public System.Void set_boneWeights(UnityEngine.BoneWeight[] value)
    // Offset: 0x54A75B8
    void set_boneWeights(::ArrayW<::UnityEngine::BoneWeight> value);
    // public UnityEngine.SkinWeights get_skinWeightBufferLayout()
    // Offset: 0x54A75FC
    ::UnityEngine::SkinWeights get_skinWeightBufferLayout();
    // public System.Void Clear(System.Boolean keepVertexLayout)
    // Offset: 0x54A7638
    void Clear(bool keepVertexLayout);
    // public System.Void Clear()
    // Offset: 0x54A767C
    void Clear();
    // public System.Void RecalculateBounds()
    // Offset: 0x54A76BC
    void RecalculateBounds();
    // public System.Void RecalculateNormals()
    // Offset: 0x54A77BC
    void RecalculateNormals();
    // public System.Void RecalculateTangents()
    // Offset: 0x54A78BC
    void RecalculateTangents();
    // public System.Void RecalculateBounds(UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A76C4
    void RecalculateBounds(::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void RecalculateNormals(UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A77C4
    void RecalculateNormals(::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void RecalculateTangents(UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A78C4
    void RecalculateTangents(::UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void RecalculateUVDistributionMetric(System.Int32 uvSetIndex, System.Single uvAreaThreshold)
    // Offset: 0x54A79BC
    void RecalculateUVDistributionMetric(int uvSetIndex, float uvAreaThreshold);
    // public System.Void RecalculateUVDistributionMetrics(System.Single uvAreaThreshold)
    // Offset: 0x54A7AC8
    void RecalculateUVDistributionMetrics(float uvAreaThreshold);
    // public System.Void MarkDynamic()
    // Offset: 0x54A7BCC
    void MarkDynamic();
    // public System.Void UploadMeshData(System.Boolean markNoLongerReadable)
    // Offset: 0x54A7C40
    void UploadMeshData(bool markNoLongerReadable);
    // public System.Void Optimize()
    // Offset: 0x54A7CBC
    void Optimize();
    // public System.Void OptimizeIndexBuffers()
    // Offset: 0x54A7DAC
    void OptimizeIndexBuffers();
    // public System.Void OptimizeReorderVertexBuffer()
    // Offset: 0x54A7E9C
    void OptimizeReorderVertexBuffer();
    // public UnityEngine.MeshTopology GetTopology(System.Int32 submesh)
    // Offset: 0x54A7F8C
    ::UnityEngine::MeshTopology GetTopology(int submesh);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes, System.Boolean useMatrices, System.Boolean hasLightmapData)
    // Offset: 0x54A8070
    void CombineMeshes(::ArrayW<::UnityEngine::CombineInstance> combine, bool mergeSubMeshes, bool useMatrices, bool hasLightmapData);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes, System.Boolean useMatrices)
    // Offset: 0x54A80DC
    void CombineMeshes(::ArrayW<::UnityEngine::CombineInstance> combine, bool mergeSubMeshes, bool useMatrices);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes)
    // Offset: 0x54A813C
    void CombineMeshes(::ArrayW<::UnityEngine::CombineInstance> combine, bool mergeSubMeshes);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine)
    // Offset: 0x54A8198
    void CombineMeshes(::ArrayW<::UnityEngine::CombineInstance> combine);
    // private System.Void GetVertexAttribute_Injected(System.Int32 index, out UnityEngine.Rendering.VertexAttributeDescriptor ret)
    // Offset: 0x549F608
    void GetVertexAttribute_Injected(int index, ByRef<::UnityEngine::Rendering::VertexAttributeDescriptor> ret);
    // private System.Void GetBlendShapeOffsetInternal_Injected(System.Int32 index, out UnityEngine.BlendShape ret)
    // Offset: 0x54A0448
    void GetBlendShapeOffsetInternal_Injected(int index, ByRef<::UnityEngine::BlendShape> ret);
    // private System.Void SetSubMesh_Injected(System.Int32 index, ref UnityEngine.Rendering.SubMeshDescriptor desc, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x54A0CF8
    void SetSubMesh_Injected(int index, ByRef<::UnityEngine::Rendering::SubMeshDescriptor> desc, ::UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void GetSubMesh_Injected(System.Int32 index, out UnityEngine.Rendering.SubMeshDescriptor ret)
    // Offset: 0x54A0DD0
    void GetSubMesh_Injected(int index, ByRef<::UnityEngine::Rendering::SubMeshDescriptor> ret);
    // private System.Void get_bounds_Injected(out UnityEngine.Bounds ret)
    // Offset: 0x54A0F64
    void get_bounds_Injected(ByRef<::UnityEngine::Bounds> ret);
    // private System.Void set_bounds_Injected(ref UnityEngine.Bounds value)
    // Offset: 0x54A0FEC
    void set_bounds_Injected(ByRef<::UnityEngine::Bounds> value);
    // public System.Void .ctor()
    // Offset: 0x549F010
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Mesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Mesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Mesh*, creationType>()));
    }
  }; // UnityEngine.Mesh
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Mesh::Internal_Create
// Il2CppName: Internal_Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*)>(&UnityEngine::Mesh::Internal_Create)> {
  static const MethodInfo* get() {
    static auto* mono = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "Internal_Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mono});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::FromInstanceID
// Il2CppName: FromInstanceID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (*)(int)>(&UnityEngine::Mesh::FromInstanceID)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "FromInstanceID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_indexFormat
// Il2CppName: get_indexFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::IndexFormat (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_indexFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_indexFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_indexFormat
// Il2CppName: set_indexFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::Rendering::IndexFormat)>(&UnityEngine::Mesh::set_indexFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "IndexFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_indexFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTotalIndexCount
// Il2CppName: GetTotalIndexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetTotalIndexCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTotalIndexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndexBufferParams
// Il2CppName: SetIndexBufferParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::UnityEngine::Rendering::IndexFormat)>(&UnityEngine::Mesh::SetIndexBufferParams)> {
  static const MethodInfo* get() {
    static auto* indexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "IndexFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndexBufferParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indexCount, format});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::InternalSetIndexBufferData
// Il2CppName: InternalSetIndexBufferData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::IntPtr, int, int, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::InternalSetIndexBufferData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dataStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* meshBufferStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elemSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "InternalSetIndexBufferData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, dataStart, meshBufferStart, count, elemSize, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::InternalSetIndexBufferDataFromArray
// Il2CppName: InternalSetIndexBufferDataFromArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Array*, int, int, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::InternalSetIndexBufferDataFromArray)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* dataStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* meshBufferStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elemSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "InternalSetIndexBufferDataFromArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, dataStart, meshBufferStart, count, elemSize, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertexBufferParamsFromPtr
// Il2CppName: SetVertexBufferParamsFromPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::System::IntPtr, int)>(&UnityEngine::Mesh::SetVertexBufferParamsFromPtr)> {
  static const MethodInfo* get() {
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attributesPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* attributesCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetVertexBufferParamsFromPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexCount, attributesPtr, attributesCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertexBufferParamsFromArray
// Il2CppName: SetVertexBufferParamsFromArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor>)>(&UnityEngine::Mesh::SetVertexBufferParamsFromArray)> {
  static const MethodInfo* get() {
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attributes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetVertexBufferParamsFromArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexCount, attributes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::InternalSetVertexBufferData
// Il2CppName: InternalSetVertexBufferData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::System::IntPtr, int, int, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::InternalSetVertexBufferData)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dataStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* meshBufferStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elemSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "InternalSetVertexBufferData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, data, dataStart, meshBufferStart, count, elemSize, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::InternalSetVertexBufferDataFromArray
// Il2CppName: InternalSetVertexBufferDataFromArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::System::Array*, int, int, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::InternalSetVertexBufferDataFromArray)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* dataStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* meshBufferStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elemSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "InternalSetVertexBufferDataFromArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, data, dataStart, meshBufferStart, count, elemSize, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributesAlloc
// Il2CppName: GetVertexAttributesAlloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Array* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetVertexAttributesAlloc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributesAlloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributesArray
// Il2CppName: GetVertexAttributesArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor>)>(&UnityEngine::Mesh::GetVertexAttributesArray)> {
  static const MethodInfo* get() {
    static auto* attributes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributesArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributesList
// Il2CppName: GetVertexAttributesList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::VertexAttributeDescriptor>*)>(&UnityEngine::Mesh::GetVertexAttributesList)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributesList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributeCountImpl
// Il2CppName: GetVertexAttributeCountImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetVertexAttributeCountImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributeCountImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttribute
// Il2CppName: GetVertexAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::VertexAttributeDescriptor (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetVertexAttribute)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndexStartImpl
// Il2CppName: GetIndexStartImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetIndexStartImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndexStartImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndexCountImpl
// Il2CppName: GetIndexCountImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetIndexCountImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndexCountImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTrianglesCountImpl
// Il2CppName: GetTrianglesCountImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetTrianglesCountImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTrianglesCountImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBaseVertexImpl
// Il2CppName: GetBaseVertexImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetBaseVertexImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBaseVertexImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTrianglesImpl
// Il2CppName: GetTrianglesImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (UnityEngine::Mesh::*)(int, bool)>(&UnityEngine::Mesh::GetTrianglesImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTrianglesImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndicesImpl
// Il2CppName: GetIndicesImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (UnityEngine::Mesh::*)(int, bool)>(&UnityEngine::Mesh::GetIndicesImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndicesImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndicesImpl
// Il2CppName: SetIndicesImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::UnityEngine::MeshTopology, ::UnityEngine::Rendering::IndexFormat, ::System::Array*, int, int, bool, int)>(&UnityEngine::Mesh::SetIndicesImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* indicesFormat = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "IndexFormat")->byval_arg;
    static auto* indices = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* arrayStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* arraySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndicesImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, topology, indicesFormat, indices, arrayStart, arraySize, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndicesNativeArrayImpl
// Il2CppName: SetIndicesNativeArrayImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::UnityEngine::MeshTopology, ::UnityEngine::Rendering::IndexFormat, ::System::IntPtr, int, int, bool, int)>(&UnityEngine::Mesh::SetIndicesNativeArrayImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* indicesFormat = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "IndexFormat")->byval_arg;
    static auto* indices = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* arrayStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* arraySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndicesNativeArrayImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, topology, indicesFormat, indices, arrayStart, arraySize, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTrianglesNonAllocImpl
// Il2CppName: GetTrianglesNonAllocImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<::ArrayW<int>>, int, bool)>(&UnityEngine::Mesh::GetTrianglesNonAllocImpl)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTrianglesNonAllocImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTrianglesNonAllocImpl16
// Il2CppName: GetTrianglesNonAllocImpl16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<::ArrayW<uint16_t>>, int, bool)>(&UnityEngine::Mesh::GetTrianglesNonAllocImpl16)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->this_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTrianglesNonAllocImpl16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndicesNonAllocImpl
// Il2CppName: GetIndicesNonAllocImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<::ArrayW<int>>, int, bool)>(&UnityEngine::Mesh::GetIndicesNonAllocImpl)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndicesNonAllocImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndicesNonAllocImpl16
// Il2CppName: GetIndicesNonAllocImpl16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<::ArrayW<uint16_t>>, int, bool)>(&UnityEngine::Mesh::GetIndicesNonAllocImpl16)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->this_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndicesNonAllocImpl16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::PrintErrorCantAccessChannel
// Il2CppName: PrintErrorCantAccessChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::Rendering::VertexAttribute)>(&UnityEngine::Mesh::PrintErrorCantAccessChannel)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "PrintErrorCantAccessChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::HasVertexAttribute
// Il2CppName: HasVertexAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Mesh::*)(::UnityEngine::Rendering::VertexAttribute)>(&UnityEngine::Mesh::HasVertexAttribute)> {
  static const MethodInfo* get() {
    static auto* attr = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "HasVertexAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributeDimension
// Il2CppName: GetVertexAttributeDimension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(::UnityEngine::Rendering::VertexAttribute)>(&UnityEngine::Mesh::GetVertexAttributeDimension)> {
  static const MethodInfo* get() {
    static auto* attr = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributeDimension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributeFormat
// Il2CppName: GetVertexAttributeFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::VertexAttributeFormat (UnityEngine::Mesh::*)(::UnityEngine::Rendering::VertexAttribute)>(&UnityEngine::Mesh::GetVertexAttributeFormat)> {
  static const MethodInfo* get() {
    static auto* attr = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributeFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributeStream
// Il2CppName: GetVertexAttributeStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(::UnityEngine::Rendering::VertexAttribute)>(&UnityEngine::Mesh::GetVertexAttributeStream)> {
  static const MethodInfo* get() {
    static auto* attr = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributeStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributeOffset
// Il2CppName: GetVertexAttributeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(::UnityEngine::Rendering::VertexAttribute)>(&UnityEngine::Mesh::GetVertexAttributeOffset)> {
  static const MethodInfo* get() {
    static auto* attr = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetArrayForChannelImpl
// Il2CppName: SetArrayForChannelImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::Rendering::VertexAttribute, ::UnityEngine::Rendering::VertexAttributeFormat, int, ::System::Array*, int, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetArrayForChannelImpl)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeFormat")->byval_arg;
    static auto* dim = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* arraySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetArrayForChannelImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, format, dim, values, arraySize, valuesStart, valuesCount, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNativeArrayForChannelImpl
// Il2CppName: SetNativeArrayForChannelImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::Rendering::VertexAttribute, ::UnityEngine::Rendering::VertexAttributeFormat, int, ::System::IntPtr, int, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetNativeArrayForChannelImpl)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeFormat")->byval_arg;
    static auto* dim = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* arraySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetNativeArrayForChannelImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, format, dim, values, arraySize, valuesStart, valuesCount, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllocArrayFromChannelImpl
// Il2CppName: GetAllocArrayFromChannelImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Array* (UnityEngine::Mesh::*)(::UnityEngine::Rendering::VertexAttribute, ::UnityEngine::Rendering::VertexAttributeFormat, int)>(&UnityEngine::Mesh::GetAllocArrayFromChannelImpl)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeFormat")->byval_arg;
    static auto* dim = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetAllocArrayFromChannelImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, format, dim});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetArrayFromChannelImpl
// Il2CppName: GetArrayFromChannelImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::Rendering::VertexAttribute, ::UnityEngine::Rendering::VertexAttributeFormat, int, ::System::Array*)>(&UnityEngine::Mesh::GetArrayFromChannelImpl)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeFormat")->byval_arg;
    static auto* dim = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetArrayFromChannelImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, format, dim, values});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_vertexBufferCount
// Il2CppName: get_vertexBufferCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_vertexBufferCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_vertexBufferCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexBufferStride
// Il2CppName: GetVertexBufferStride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetVertexBufferStride)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexBufferStride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetNativeVertexBufferPtr
// Il2CppName: GetNativeVertexBufferPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetNativeVertexBufferPtr)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetNativeVertexBufferPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetNativeIndexBufferPtr
// Il2CppName: GetNativeIndexBufferPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetNativeIndexBufferPtr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetNativeIndexBufferPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexBufferImpl
// Il2CppName: GetVertexBufferImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GraphicsBuffer* (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetVertexBufferImpl)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexBufferImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndexBufferImpl
// Il2CppName: GetIndexBufferImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GraphicsBuffer* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetIndexBufferImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndexBufferImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBoneWeightBufferImpl
// Il2CppName: GetBoneWeightBufferImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GraphicsBuffer* (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetBoneWeightBufferImpl)> {
  static const MethodInfo* get() {
    static auto* bonesPerVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBoneWeightBufferImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bonesPerVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeBufferImpl
// Il2CppName: GetBlendShapeBufferImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GraphicsBuffer* (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetBlendShapeBufferImpl)> {
  static const MethodInfo* get() {
    static auto* layout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeBufferImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layout});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_vertexBufferTarget
// Il2CppName: get_vertexBufferTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GraphicsBuffer::Target (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_vertexBufferTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_vertexBufferTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_vertexBufferTarget
// Il2CppName: set_vertexBufferTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::GraphicsBuffer::Target)>(&UnityEngine::Mesh::set_vertexBufferTarget)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "GraphicsBuffer/Target")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_vertexBufferTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_indexBufferTarget
// Il2CppName: get_indexBufferTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GraphicsBuffer::Target (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_indexBufferTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_indexBufferTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_indexBufferTarget
// Il2CppName: set_indexBufferTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::GraphicsBuffer::Target)>(&UnityEngine::Mesh::set_indexBufferTarget)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "GraphicsBuffer/Target")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_indexBufferTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_blendShapeCount
// Il2CppName: get_blendShapeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_blendShapeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_blendShapeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::ClearBlendShapes
// Il2CppName: ClearBlendShapes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::ClearBlendShapes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "ClearBlendShapes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeName
// Il2CppName: GetBlendShapeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetBlendShapeName)> {
  static const MethodInfo* get() {
    static auto* shapeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shapeIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeIndex
// Il2CppName: GetBlendShapeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(::StringW)>(&UnityEngine::Mesh::GetBlendShapeIndex)> {
  static const MethodInfo* get() {
    static auto* blendShapeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blendShapeName});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeFrameCount
// Il2CppName: GetBlendShapeFrameCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetBlendShapeFrameCount)> {
  static const MethodInfo* get() {
    static auto* shapeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeFrameCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shapeIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeFrameWeight
// Il2CppName: GetBlendShapeFrameWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Mesh::*)(int, int)>(&UnityEngine::Mesh::GetBlendShapeFrameWeight)> {
  static const MethodInfo* get() {
    static auto* shapeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeFrameWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shapeIndex, frameIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeFrameVertices
// Il2CppName: GetBlendShapeFrameVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, int, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::Mesh::GetBlendShapeFrameVertices)> {
  static const MethodInfo* get() {
    static auto* shapeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* deltaVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* deltaNormals = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* deltaTangents = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeFrameVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shapeIndex, frameIndex, deltaVertices, deltaNormals, deltaTangents});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::AddBlendShapeFrame
// Il2CppName: AddBlendShapeFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::StringW, float, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::Mesh::AddBlendShapeFrame)> {
  static const MethodInfo* get() {
    static auto* shapeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* frameWeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* deltaNormals = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* deltaTangents = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "AddBlendShapeFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shapeName, frameWeight, deltaVertices, deltaNormals, deltaTangents});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeOffsetInternal
// Il2CppName: GetBlendShapeOffsetInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::BlendShape (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetBlendShapeOffsetInternal)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeOffsetInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::HasBoneWeights
// Il2CppName: HasBoneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::HasBoneWeights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "HasBoneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBoneWeightsImpl
// Il2CppName: GetBoneWeightsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::BoneWeight> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetBoneWeightsImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBoneWeightsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetBoneWeightsImpl
// Il2CppName: SetBoneWeightsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::BoneWeight>)>(&UnityEngine::Mesh::SetBoneWeightsImpl)> {
  static const MethodInfo* get() {
    static auto* weights = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "BoneWeight"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetBoneWeightsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{weights});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetBoneWeights
// Il2CppName: SetBoneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Unity::Collections::NativeArray_1<uint8_t>, ::Unity::Collections::NativeArray_1<::UnityEngine::BoneWeight1>)>(&UnityEngine::Mesh::SetBoneWeights)> {
  static const MethodInfo* get() {
    static auto* bonesPerVertex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* weights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "BoneWeight1")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetBoneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bonesPerVertex, weights});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::InternalSetBoneWeights
// Il2CppName: InternalSetBoneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::IntPtr, int, ::System::IntPtr, int)>(&UnityEngine::Mesh::InternalSetBoneWeights)> {
  static const MethodInfo* get() {
    static auto* bonesPerVertex = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* bonesPerVertexSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* weights = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* weightsSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "InternalSetBoneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bonesPerVertex, bonesPerVertexSize, weights, weightsSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllBoneWeights
// Il2CppName: GetAllBoneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<::UnityEngine::BoneWeight1> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetAllBoneWeights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetAllBoneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBonesPerVertex
// Il2CppName: GetBonesPerVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<uint8_t> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetBonesPerVertex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBonesPerVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllBoneWeightsArraySize
// Il2CppName: GetAllBoneWeightsArraySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetAllBoneWeightsArraySize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetAllBoneWeightsArraySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBoneWeightBufferLayoutInternal
// Il2CppName: GetBoneWeightBufferLayoutInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetBoneWeightBufferLayoutInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBoneWeightBufferLayoutInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllBoneWeightsArray
// Il2CppName: GetAllBoneWeightsArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetAllBoneWeightsArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetAllBoneWeightsArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBonesPerVertexArray
// Il2CppName: GetBonesPerVertexArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetBonesPerVertexArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBonesPerVertexArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_bindposeCount
// Il2CppName: get_bindposeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_bindposeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_bindposeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_bindposes
// Il2CppName: get_bindposes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Matrix4x4> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_bindposes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_bindposes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_bindposes
// Il2CppName: set_bindposes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Matrix4x4>)>(&UnityEngine::Mesh::set_bindposes)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_bindposes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBindposes
// Il2CppName: GetBindposes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<::UnityEngine::Matrix4x4> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetBindposes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBindposes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBindposesArray
// Il2CppName: GetBindposesArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetBindposesArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBindposesArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBoneWeightsNonAllocImpl
// Il2CppName: GetBoneWeightsNonAllocImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<::ArrayW<::UnityEngine::BoneWeight>>)>(&UnityEngine::Mesh::GetBoneWeightsNonAllocImpl)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "BoneWeight"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBoneWeightsNonAllocImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBindposesNonAllocImpl
// Il2CppName: GetBindposesNonAllocImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<::ArrayW<::UnityEngine::Matrix4x4>>)>(&UnityEngine::Mesh::GetBindposesNonAllocImpl)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBindposesNonAllocImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_isReadable
// Il2CppName: get_isReadable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_isReadable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_isReadable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_canAccess
// Il2CppName: get_canAccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_canAccess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_canAccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_vertexCount
// Il2CppName: get_vertexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_vertexCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_vertexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_subMeshCount
// Il2CppName: get_subMeshCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_subMeshCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_subMeshCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_subMeshCount
// Il2CppName: set_subMeshCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::set_subMeshCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_subMeshCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSubMesh
// Il2CppName: SetSubMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::UnityEngine::Rendering::SubMeshDescriptor, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetSubMesh)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* desc = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SubMeshDescriptor")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetSubMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, desc, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetSubMesh
// Il2CppName: GetSubMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::SubMeshDescriptor (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetSubMesh)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetSubMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetAllSubMeshesAtOnceFromArray
// Il2CppName: SetAllSubMeshesAtOnceFromArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Rendering::SubMeshDescriptor>, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetAllSubMeshesAtOnceFromArray)> {
  static const MethodInfo* get() {
    static auto* desc = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SubMeshDescriptor"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetAllSubMeshesAtOnceFromArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desc, start, count, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetAllSubMeshesAtOnceFromNativeArray
// Il2CppName: SetAllSubMeshesAtOnceFromNativeArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::IntPtr, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetAllSubMeshesAtOnceFromNativeArray)> {
  static const MethodInfo* get() {
    static auto* desc = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetAllSubMeshesAtOnceFromNativeArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desc, start, count, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_bounds
// Il2CppName: get_bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_bounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_bounds
// Il2CppName: set_bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::Bounds)>(&UnityEngine::Mesh::set_bounds)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::ClearImpl
// Il2CppName: ClearImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(bool)>(&UnityEngine::Mesh::ClearImpl)> {
  static const MethodInfo* get() {
    static auto* keepVertexLayout = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "ClearImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keepVertexLayout});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateBoundsImpl
// Il2CppName: RecalculateBoundsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::RecalculateBoundsImpl)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateBoundsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateNormalsImpl
// Il2CppName: RecalculateNormalsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::RecalculateNormalsImpl)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateNormalsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateTangentsImpl
// Il2CppName: RecalculateTangentsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::RecalculateTangentsImpl)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateTangentsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MarkDynamicImpl
// Il2CppName: MarkDynamicImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::MarkDynamicImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "MarkDynamicImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MarkModified
// Il2CppName: MarkModified
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::MarkModified)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "MarkModified", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::UploadMeshDataImpl
// Il2CppName: UploadMeshDataImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(bool)>(&UnityEngine::Mesh::UploadMeshDataImpl)> {
  static const MethodInfo* get() {
    static auto* markNoLongerReadable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "UploadMeshDataImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{markNoLongerReadable});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTopologyImpl
// Il2CppName: GetTopologyImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::MeshTopology (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetTopologyImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTopologyImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateUVDistributionMetricImpl
// Il2CppName: RecalculateUVDistributionMetricImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, float)>(&UnityEngine::Mesh::RecalculateUVDistributionMetricImpl)> {
  static const MethodInfo* get() {
    static auto* uvSetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvAreaThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateUVDistributionMetricImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvSetIndex, uvAreaThreshold});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateUVDistributionMetricsImpl
// Il2CppName: RecalculateUVDistributionMetricsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(float)>(&UnityEngine::Mesh::RecalculateUVDistributionMetricsImpl)> {
  static const MethodInfo* get() {
    static auto* uvAreaThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateUVDistributionMetricsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvAreaThreshold});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVDistributionMetric
// Il2CppName: GetUVDistributionMetric
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetUVDistributionMetric)> {
  static const MethodInfo* get() {
    static auto* uvSetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetUVDistributionMetric", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvSetIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CombineMeshesImpl
// Il2CppName: CombineMeshesImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::CombineInstance>, bool, bool, bool)>(&UnityEngine::Mesh::CombineMeshesImpl)> {
  static const MethodInfo* get() {
    static auto* combine = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "CombineInstance"), 1)->byval_arg;
    static auto* mergeSubMeshes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useMatrices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasLightmapData = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CombineMeshesImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{combine, mergeSubMeshes, useMatrices, hasLightmapData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::OptimizeImpl
// Il2CppName: OptimizeImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::OptimizeImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "OptimizeImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::OptimizeIndexBuffersImpl
// Il2CppName: OptimizeIndexBuffersImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::OptimizeIndexBuffersImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "OptimizeIndexBuffersImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::OptimizeReorderVertexBufferImpl
// Il2CppName: OptimizeReorderVertexBufferImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::OptimizeReorderVertexBufferImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "OptimizeReorderVertexBufferImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVChannel
// Il2CppName: GetUVChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::VertexAttribute (*)(int)>(&UnityEngine::Mesh::GetUVChannel)> {
  static const MethodInfo* get() {
    static auto* uvIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetUVChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::DefaultDimensionForChannel
// Il2CppName: DefaultDimensionForChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Rendering::VertexAttribute)>(&UnityEngine::Mesh::DefaultDimensionForChannel)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "DefaultDimensionForChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllocArrayFromChannel
// Il2CppName: GetAllocArrayFromChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllocArrayFromChannel
// Il2CppName: GetAllocArrayFromChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSizedArrayForChannel
// Il2CppName: SetSizedArrayForChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::Rendering::VertexAttribute, ::UnityEngine::Rendering::VertexAttributeFormat, int, ::System::Array*, int, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetSizedArrayForChannel)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeFormat")->byval_arg;
    static auto* dim = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* valuesArrayLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetSizedArrayForChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, format, dim, values, valuesArrayLength, valuesStart, valuesCount, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSizedNativeArrayForChannel
// Il2CppName: SetSizedNativeArrayForChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::Rendering::VertexAttribute, ::UnityEngine::Rendering::VertexAttributeFormat, int, ::System::IntPtr, int, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetSizedNativeArrayForChannel)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeFormat")->byval_arg;
    static auto* dim = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* valuesArrayLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetSizedNativeArrayForChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, format, dim, values, valuesArrayLength, valuesStart, valuesCount, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetArrayForChannel
// Il2CppName: SetArrayForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetArrayForChannel
// Il2CppName: SetArrayForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetListForChannel
// Il2CppName: SetListForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetListForChannel
// Il2CppName: SetListForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetListForChannel
// Il2CppName: GetListForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetListForChannel
// Il2CppName: GetListForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_vertices
// Il2CppName: get_vertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_vertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_vertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_vertices
// Il2CppName: set_vertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::Mesh::set_vertices)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_vertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_normals
// Il2CppName: get_normals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_normals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_normals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_normals
// Il2CppName: set_normals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::Mesh::set_normals)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_normals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_tangents
// Il2CppName: get_tangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector4> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_tangents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_tangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_tangents
// Il2CppName: set_tangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector4>)>(&UnityEngine::Mesh::set_tangents)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_tangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv
// Il2CppName: get_uv
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector2> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv
// Il2CppName: set_uv
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector2>)>(&UnityEngine::Mesh::set_uv)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv2
// Il2CppName: get_uv2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector2> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv2
// Il2CppName: set_uv2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector2>)>(&UnityEngine::Mesh::set_uv2)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv3
// Il2CppName: get_uv3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector2> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv3
// Il2CppName: set_uv3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector2>)>(&UnityEngine::Mesh::set_uv3)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv4
// Il2CppName: get_uv4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector2> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv4)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv4
// Il2CppName: set_uv4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector2>)>(&UnityEngine::Mesh::set_uv4)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv5
// Il2CppName: get_uv5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector2> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv5)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv5
// Il2CppName: set_uv5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector2>)>(&UnityEngine::Mesh::set_uv5)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv6
// Il2CppName: get_uv6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector2> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv6)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv6
// Il2CppName: set_uv6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector2>)>(&UnityEngine::Mesh::set_uv6)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv7
// Il2CppName: get_uv7
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector2> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv7)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv7", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv7
// Il2CppName: set_uv7
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector2>)>(&UnityEngine::Mesh::set_uv7)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv7", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv8
// Il2CppName: get_uv8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector2> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv8)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv8
// Il2CppName: set_uv8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector2>)>(&UnityEngine::Mesh::set_uv8)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_colors
// Il2CppName: get_colors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_colors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_colors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_colors
// Il2CppName: set_colors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Color>)>(&UnityEngine::Mesh::set_colors)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_colors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_colors32
// Il2CppName: get_colors32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color32> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_colors32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_colors32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_colors32
// Il2CppName: set_colors32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Color32>)>(&UnityEngine::Mesh::set_colors32)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_colors32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertices
// Il2CppName: GetVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&UnityEngine::Mesh::GetVertices)> {
  static const MethodInfo* get() {
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&UnityEngine::Mesh::SetVertices)> {
  static const MethodInfo* get() {
    static auto* inVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inVertices});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, int, int)>(&UnityEngine::Mesh::SetVertices)> {
  static const MethodInfo* get() {
    static auto* inVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inVertices, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetVertices)> {
  static const MethodInfo* get() {
    static auto* inVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inVertices, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::Mesh::SetVertices)> {
  static const MethodInfo* get() {
    static auto* inVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inVertices});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector3>, int, int)>(&UnityEngine::Mesh::SetVertices)> {
  static const MethodInfo* get() {
    static auto* inVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inVertices, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector3>, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetVertices)> {
  static const MethodInfo* get() {
    static auto* inVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inVertices, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetNormals
// Il2CppName: GetNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&UnityEngine::Mesh::GetNormals)> {
  static const MethodInfo* get() {
    static auto* normals = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{normals});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&UnityEngine::Mesh::SetNormals)> {
  static const MethodInfo* get() {
    static auto* inNormals = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inNormals});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, int, int)>(&UnityEngine::Mesh::SetNormals)> {
  static const MethodInfo* get() {
    static auto* inNormals = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inNormals, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetNormals)> {
  static const MethodInfo* get() {
    static auto* inNormals = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inNormals, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::Mesh::SetNormals)> {
  static const MethodInfo* get() {
    static auto* inNormals = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inNormals});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector3>, int, int)>(&UnityEngine::Mesh::SetNormals)> {
  static const MethodInfo* get() {
    static auto* inNormals = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inNormals, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector3>, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetNormals)> {
  static const MethodInfo* get() {
    static auto* inNormals = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inNormals, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTangents
// Il2CppName: GetTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector4>*)>(&UnityEngine::Mesh::GetTangents)> {
  static const MethodInfo* get() {
    static auto* tangents = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tangents});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector4>*)>(&UnityEngine::Mesh::SetTangents)> {
  static const MethodInfo* get() {
    static auto* inTangents = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inTangents});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector4>*, int, int)>(&UnityEngine::Mesh::SetTangents)> {
  static const MethodInfo* get() {
    static auto* inTangents = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inTangents, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector4>*, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetTangents)> {
  static const MethodInfo* get() {
    static auto* inTangents = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inTangents, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector4>)>(&UnityEngine::Mesh::SetTangents)> {
  static const MethodInfo* get() {
    static auto* inTangents = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inTangents});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector4>, int, int)>(&UnityEngine::Mesh::SetTangents)> {
  static const MethodInfo* get() {
    static auto* inTangents = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inTangents, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Vector4>, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetTangents)> {
  static const MethodInfo* get() {
    static auto* inTangents = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inTangents, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetColors
// Il2CppName: GetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Color>*)>(&UnityEngine::Mesh::GetColors)> {
  static const MethodInfo* get() {
    static auto* colors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Color>*)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Color>*, int, int)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Color>*, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Color>)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Color>, int, int)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Color>, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetColors
// Il2CppName: GetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Color32>*)>(&UnityEngine::Mesh::GetColors)> {
  static const MethodInfo* get() {
    static auto* colors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Color32>*)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Color32>*, int, int)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Color32>*, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Color32>)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Color32>, int, int)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Color32>, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUvsImpl
// Il2CppName: SetUvsImpl
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>*)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>*, int, int)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>*, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, int, int)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*, int, int)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUvsImpl
// Il2CppName: SetUvsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, int, ::System::Array*, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetUvsImpl)> {
  static const MethodInfo* get() {
    static auto* uvIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dim = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* arrayStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* arraySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUvsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvIndex, dim, uvs, arrayStart, arraySize, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::ArrayW<::UnityEngine::Vector2>)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::ArrayW<::UnityEngine::Vector4>)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::ArrayW<::UnityEngine::Vector2>, int, int)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::ArrayW<::UnityEngine::Vector2>, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::ArrayW<::UnityEngine::Vector3>, int, int)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::ArrayW<::UnityEngine::Vector3>, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::ArrayW<::UnityEngine::Vector4>, int, int)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::ArrayW<::UnityEngine::Vector4>, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVsImpl
// Il2CppName: GetUVsImpl
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVs
// Il2CppName: GetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>*)>(&UnityEngine::Mesh::GetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVs
// Il2CppName: GetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&UnityEngine::Mesh::GetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVs
// Il2CppName: GetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*)>(&UnityEngine::Mesh::GetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_vertexAttributeCount
// Il2CppName: get_vertexAttributeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_vertexAttributeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_vertexAttributeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributes
// Il2CppName: GetVertexAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetVertexAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributes
// Il2CppName: GetVertexAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor>)>(&UnityEngine::Mesh::GetVertexAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributes
// Il2CppName: GetVertexAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::VertexAttributeDescriptor>*)>(&UnityEngine::Mesh::GetVertexAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertexBufferParams
// Il2CppName: SetVertexBufferParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor>)>(&UnityEngine::Mesh::SetVertexBufferParams)> {
  static const MethodInfo* get() {
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attributes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetVertexBufferParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexCount, attributes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertexBufferParams
// Il2CppName: SetVertexBufferParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::Unity::Collections::NativeArray_1<::UnityEngine::Rendering::VertexAttributeDescriptor>)>(&UnityEngine::Mesh::SetVertexBufferParams)> {
  static const MethodInfo* get() {
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetVertexBufferParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexCount, attributes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertexBufferData
// Il2CppName: SetVertexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertexBufferData
// Il2CppName: SetVertexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertexBufferData
// Il2CppName: SetVertexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::AcquireReadOnlyMeshData
// Il2CppName: AcquireReadOnlyMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh::MeshDataArray (*)(::UnityEngine::Mesh*)>(&UnityEngine::Mesh::AcquireReadOnlyMeshData)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "AcquireReadOnlyMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::AcquireReadOnlyMeshData
// Il2CppName: AcquireReadOnlyMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh::MeshDataArray (*)(::ArrayW<::UnityEngine::Mesh*>)>(&UnityEngine::Mesh::AcquireReadOnlyMeshData)> {
  static const MethodInfo* get() {
    static auto* meshes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "AcquireReadOnlyMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::AcquireReadOnlyMeshData
// Il2CppName: AcquireReadOnlyMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh::MeshDataArray (*)(::System::Collections::Generic::List_1<::UnityEngine::Mesh*>*)>(&UnityEngine::Mesh::AcquireReadOnlyMeshData)> {
  static const MethodInfo* get() {
    static auto* meshes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "AcquireReadOnlyMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::AllocateWritableMeshData
// Il2CppName: AllocateWritableMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh::MeshDataArray (*)(int)>(&UnityEngine::Mesh::AllocateWritableMeshData)> {
  static const MethodInfo* get() {
    static auto* meshCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "AllocateWritableMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::ApplyAndDisposeWritableMeshData
// Il2CppName: ApplyAndDisposeWritableMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh::MeshDataArray, ::UnityEngine::Mesh*, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::ApplyAndDisposeWritableMeshData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh/MeshDataArray")->byval_arg;
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "ApplyAndDisposeWritableMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, mesh, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::ApplyAndDisposeWritableMeshData
// Il2CppName: ApplyAndDisposeWritableMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh::MeshDataArray, ::ArrayW<::UnityEngine::Mesh*>, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::ApplyAndDisposeWritableMeshData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh/MeshDataArray")->byval_arg;
    static auto* meshes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh"), 1)->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "ApplyAndDisposeWritableMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, meshes, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::ApplyAndDisposeWritableMeshData
// Il2CppName: ApplyAndDisposeWritableMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh::MeshDataArray, ::System::Collections::Generic::List_1<::UnityEngine::Mesh*>*, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::ApplyAndDisposeWritableMeshData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh/MeshDataArray")->byval_arg;
    static auto* meshes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")})->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "ApplyAndDisposeWritableMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, meshes, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexBuffer
// Il2CppName: GetVertexBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GraphicsBuffer* (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetVertexBuffer)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndexBuffer
// Il2CppName: GetIndexBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GraphicsBuffer* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetIndexBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndexBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBoneWeightBuffer
// Il2CppName: GetBoneWeightBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GraphicsBuffer* (UnityEngine::Mesh::*)(::UnityEngine::SkinWeights)>(&UnityEngine::Mesh::GetBoneWeightBuffer)> {
  static const MethodInfo* get() {
    static auto* layout = &::il2cpp_utils::GetClassFromName("UnityEngine", "SkinWeights")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBoneWeightBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layout});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeBuffer
// Il2CppName: GetBlendShapeBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GraphicsBuffer* (UnityEngine::Mesh::*)(::UnityEngine::Rendering::BlendShapeBufferLayout)>(&UnityEngine::Mesh::GetBlendShapeBuffer)> {
  static const MethodInfo* get() {
    static auto* layout = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "BlendShapeBufferLayout")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layout});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeBuffer
// Il2CppName: GetBlendShapeBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GraphicsBuffer* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetBlendShapeBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeBufferRange
// Il2CppName: GetBlendShapeBufferRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::BlendShapeBufferRange (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetBlendShapeBufferRange)> {
  static const MethodInfo* get() {
    static auto* blendShapeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeBufferRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blendShapeIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::PrintErrorCantAccessIndices
// Il2CppName: PrintErrorCantAccessIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::PrintErrorCantAccessIndices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "PrintErrorCantAccessIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CheckCanAccessSubmesh
// Il2CppName: CheckCanAccessSubmesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Mesh::*)(int, bool)>(&UnityEngine::Mesh::CheckCanAccessSubmesh)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* errorAboutTriangles = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CheckCanAccessSubmesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, errorAboutTriangles});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CheckCanAccessSubmeshTriangles
// Il2CppName: CheckCanAccessSubmeshTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::CheckCanAccessSubmeshTriangles)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CheckCanAccessSubmeshTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CheckCanAccessSubmeshIndices
// Il2CppName: CheckCanAccessSubmeshIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::CheckCanAccessSubmeshIndices)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CheckCanAccessSubmeshIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_triangles
// Il2CppName: get_triangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_triangles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_triangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_triangles
// Il2CppName: set_triangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<int>)>(&UnityEngine::Mesh::set_triangles)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_triangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTriangles
// Il2CppName: GetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetTriangles)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTriangles
// Il2CppName: GetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (UnityEngine::Mesh::*)(int, bool)>(&UnityEngine::Mesh::GetTriangles)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTriangles
// Il2CppName: GetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<int>*, int)>(&UnityEngine::Mesh::GetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTriangles
// Il2CppName: GetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<int>*, int, bool)>(&UnityEngine::Mesh::GetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTriangles
// Il2CppName: GetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<uint16_t>*, int, bool)>(&UnityEngine::Mesh::GetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndices
// Il2CppName: GetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetIndices)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndices
// Il2CppName: GetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (UnityEngine::Mesh::*)(int, bool)>(&UnityEngine::Mesh::GetIndices)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndices
// Il2CppName: GetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<int>*, int)>(&UnityEngine::Mesh::GetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndices
// Il2CppName: GetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<int>*, int, bool)>(&UnityEngine::Mesh::GetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndices
// Il2CppName: GetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<uint16_t>*, int, bool)>(&UnityEngine::Mesh::GetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndexBufferData
// Il2CppName: SetIndexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndexBufferData
// Il2CppName: SetIndexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndexBufferData
// Il2CppName: SetIndexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndexStart
// Il2CppName: GetIndexStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetIndexStart)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndexStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndexCount
// Il2CppName: GetIndexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetIndexCount)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBaseVertex
// Il2CppName: GetBaseVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetBaseVertex)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBaseVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CheckIndicesArrayRange
// Il2CppName: CheckIndicesArrayRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, int, int)>(&UnityEngine::Mesh::CheckIndicesArrayRange)> {
  static const MethodInfo* get() {
    static auto* valuesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CheckIndicesArrayRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{valuesLength, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTrianglesImpl
// Il2CppName: SetTrianglesImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::UnityEngine::Rendering::IndexFormat, ::System::Array*, int, int, int, bool, int)>(&UnityEngine::Mesh::SetTrianglesImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indicesFormat = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "IndexFormat")->byval_arg;
    static auto* triangles = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* trianglesArrayLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTrianglesImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, indicesFormat, triangles, trianglesArrayLength, start, length, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<int>, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<int>, int, bool)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, calculateBounds});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<int>, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<int>, int, int, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* trianglesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* trianglesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, trianglesStart, trianglesLength, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<uint16_t>, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<uint16_t>, int, int, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    static auto* trianglesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* trianglesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, trianglesStart, trianglesLength, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<int>*, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<int>*, int, bool)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, calculateBounds});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<int>*, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<int>*, int, int, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* trianglesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* trianglesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, trianglesStart, trianglesLength, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<uint16_t>*, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<uint16_t>*, int, int, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    static auto* trianglesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* trianglesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, trianglesStart, trianglesLength, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<int>, ::UnityEngine::MeshTopology, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, topology, submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<int>, ::UnityEngine::MeshTopology, int, bool)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, topology, submesh, calculateBounds});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<int>, ::UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<int>, int, int, ::UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* indicesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indicesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, indicesStart, indicesLength, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<uint16_t>, ::UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<uint16_t>, int, int, ::UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    static auto* indicesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indicesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, indicesStart, indicesLength, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<int>*, ::UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<int>*, int, int, ::UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* indicesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indicesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, indicesStart, indicesLength, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<uint16_t>*, ::UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<uint16_t>*, int, int, ::UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    static auto* indicesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indicesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, indicesStart, indicesLength, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSubMeshes
// Il2CppName: SetSubMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Rendering::SubMeshDescriptor>, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetSubMeshes)> {
  static const MethodInfo* get() {
    static auto* desc = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SubMeshDescriptor"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetSubMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desc, start, count, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSubMeshes
// Il2CppName: SetSubMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::Rendering::SubMeshDescriptor>, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetSubMeshes)> {
  static const MethodInfo* get() {
    static auto* desc = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SubMeshDescriptor"), 1)->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetSubMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desc, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSubMeshes
// Il2CppName: SetSubMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::SubMeshDescriptor>*, int, int, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetSubMeshes)> {
  static const MethodInfo* get() {
    static auto* desc = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SubMeshDescriptor")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetSubMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desc, start, count, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSubMeshes
// Il2CppName: SetSubMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Rendering::SubMeshDescriptor>*, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetSubMeshes)> {
  static const MethodInfo* get() {
    static auto* desc = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SubMeshDescriptor")})->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetSubMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desc, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSubMeshes
// Il2CppName: SetSubMeshes
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSubMeshes
// Il2CppName: SetSubMeshes
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBindposes
// Il2CppName: GetBindposes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Matrix4x4>*)>(&UnityEngine::Mesh::GetBindposes)> {
  static const MethodInfo* get() {
    static auto* bindposes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBindposes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindposes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBoneWeights
// Il2CppName: GetBoneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::System::Collections::Generic::List_1<::UnityEngine::BoneWeight>*)>(&UnityEngine::Mesh::GetBoneWeights)> {
  static const MethodInfo* get() {
    static auto* boneWeights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "BoneWeight")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBoneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneWeights});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_boneWeights
// Il2CppName: get_boneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::BoneWeight> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_boneWeights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_boneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_boneWeights
// Il2CppName: set_boneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::BoneWeight>)>(&UnityEngine::Mesh::set_boneWeights)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "BoneWeight"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_boneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_skinWeightBufferLayout
// Il2CppName: get_skinWeightBufferLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SkinWeights (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_skinWeightBufferLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_skinWeightBufferLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(bool)>(&UnityEngine::Mesh::Clear)> {
  static const MethodInfo* get() {
    static auto* keepVertexLayout = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keepVertexLayout});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateBounds
// Il2CppName: RecalculateBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::RecalculateBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateNormals
// Il2CppName: RecalculateNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::RecalculateNormals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateTangents
// Il2CppName: RecalculateTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::RecalculateTangents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateBounds
// Il2CppName: RecalculateBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::RecalculateBounds)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateNormals
// Il2CppName: RecalculateNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::RecalculateNormals)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateTangents
// Il2CppName: RecalculateTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::RecalculateTangents)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateUVDistributionMetric
// Il2CppName: RecalculateUVDistributionMetric
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, float)>(&UnityEngine::Mesh::RecalculateUVDistributionMetric)> {
  static const MethodInfo* get() {
    static auto* uvSetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvAreaThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateUVDistributionMetric", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvSetIndex, uvAreaThreshold});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateUVDistributionMetrics
// Il2CppName: RecalculateUVDistributionMetrics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(float)>(&UnityEngine::Mesh::RecalculateUVDistributionMetrics)> {
  static const MethodInfo* get() {
    static auto* uvAreaThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateUVDistributionMetrics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvAreaThreshold});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MarkDynamic
// Il2CppName: MarkDynamic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::MarkDynamic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "MarkDynamic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::UploadMeshData
// Il2CppName: UploadMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(bool)>(&UnityEngine::Mesh::UploadMeshData)> {
  static const MethodInfo* get() {
    static auto* markNoLongerReadable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "UploadMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{markNoLongerReadable});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::Optimize
// Il2CppName: Optimize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::Optimize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "Optimize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::OptimizeIndexBuffers
// Il2CppName: OptimizeIndexBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::OptimizeIndexBuffers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "OptimizeIndexBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::OptimizeReorderVertexBuffer
// Il2CppName: OptimizeReorderVertexBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::OptimizeReorderVertexBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "OptimizeReorderVertexBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTopology
// Il2CppName: GetTopology
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::MeshTopology (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetTopology)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTopology", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CombineMeshes
// Il2CppName: CombineMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::CombineInstance>, bool, bool, bool)>(&UnityEngine::Mesh::CombineMeshes)> {
  static const MethodInfo* get() {
    static auto* combine = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "CombineInstance"), 1)->byval_arg;
    static auto* mergeSubMeshes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useMatrices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasLightmapData = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CombineMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{combine, mergeSubMeshes, useMatrices, hasLightmapData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CombineMeshes
// Il2CppName: CombineMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::CombineInstance>, bool, bool)>(&UnityEngine::Mesh::CombineMeshes)> {
  static const MethodInfo* get() {
    static auto* combine = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "CombineInstance"), 1)->byval_arg;
    static auto* mergeSubMeshes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useMatrices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CombineMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{combine, mergeSubMeshes, useMatrices});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CombineMeshes
// Il2CppName: CombineMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::CombineInstance>, bool)>(&UnityEngine::Mesh::CombineMeshes)> {
  static const MethodInfo* get() {
    static auto* combine = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "CombineInstance"), 1)->byval_arg;
    static auto* mergeSubMeshes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CombineMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{combine, mergeSubMeshes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CombineMeshes
// Il2CppName: CombineMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::ArrayW<::UnityEngine::CombineInstance>)>(&UnityEngine::Mesh::CombineMeshes)> {
  static const MethodInfo* get() {
    static auto* combine = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "CombineInstance"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CombineMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{combine});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttribute_Injected
// Il2CppName: GetVertexAttribute_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ByRef<::UnityEngine::Rendering::VertexAttributeDescriptor>)>(&UnityEngine::Mesh::GetVertexAttribute_Injected)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttribute_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeOffsetInternal_Injected
// Il2CppName: GetBlendShapeOffsetInternal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ByRef<::UnityEngine::BlendShape>)>(&UnityEngine::Mesh::GetBlendShapeOffsetInternal_Injected)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "BlendShape")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeOffsetInternal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSubMesh_Injected
// Il2CppName: SetSubMesh_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ByRef<::UnityEngine::Rendering::SubMeshDescriptor>, ::UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetSubMesh_Injected)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* desc = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SubMeshDescriptor")->this_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetSubMesh_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, desc, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetSubMesh_Injected
// Il2CppName: GetSubMesh_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ByRef<::UnityEngine::Rendering::SubMeshDescriptor>)>(&UnityEngine::Mesh::GetSubMesh_Injected)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SubMeshDescriptor")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetSubMesh_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_bounds_Injected
// Il2CppName: get_bounds_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<::UnityEngine::Bounds>)>(&UnityEngine::Mesh::get_bounds_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_bounds_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_bounds_Injected
// Il2CppName: set_bounds_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<::UnityEngine::Bounds>)>(&UnityEngine::Mesh::set_bounds_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_bounds_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
