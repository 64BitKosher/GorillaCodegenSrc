// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.ComputeBufferType
#include "UnityEngine/ComputeBufferType.hpp"
// Including type: UnityEngine.ComputeBufferMode
#include "UnityEngine/ComputeBufferMode.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ComputeBuffer
  class ComputeBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::ComputeBuffer);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ComputeBuffer*, "UnityEngine", "ComputeBuffer");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ComputeBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  // [NativeClassAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  class ComputeBuffer : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // System.IntPtr m_Ptr
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr m_Ptr;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return m_Ptr;
    }
    // Get instance field reference: System.IntPtr m_Ptr
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_Ptr();
    // public System.Void Dispose()
    // Offset: 0x54CBE2C
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x54CBD70
    void Dispose(bool disposing);
    // static private System.IntPtr InitBuffer(System.Int32 count, System.Int32 stride, UnityEngine.ComputeBufferType type, UnityEngine.ComputeBufferMode usage)
    // Offset: 0x54CBECC
    static ::System::IntPtr InitBuffer(int count, int stride, ::UnityEngine::ComputeBufferType type, ::UnityEngine::ComputeBufferMode usage);
    // static private System.Void DestroyBuffer(UnityEngine.ComputeBuffer buf)
    // Offset: 0x54CBE90
    static void DestroyBuffer(::UnityEngine::ComputeBuffer* buf);
    // public System.Void .ctor(System.Int32 count, System.Int32 stride)
    // Offset: 0x54CBF28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ComputeBuffer* New_ctor(int count, int stride) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ComputeBuffer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ComputeBuffer*, creationType>(count, stride)));
    }
    // public System.Void .ctor(System.Int32 count, System.Int32 stride, UnityEngine.ComputeBufferType type)
    // Offset: 0x54CC114
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ComputeBuffer* New_ctor(int count, int stride, ::UnityEngine::ComputeBufferType type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ComputeBuffer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ComputeBuffer*, creationType>(count, stride, type)));
    }
    // private System.Void .ctor(System.Int32 count, System.Int32 stride, UnityEngine.ComputeBufferType type, UnityEngine.ComputeBufferMode usage, System.Int32 stackDepth)
    // Offset: 0x54CBF34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ComputeBuffer* New_ctor(int count, int stride, ::UnityEngine::ComputeBufferType type, ::UnityEngine::ComputeBufferMode usage, int stackDepth) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ComputeBuffer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ComputeBuffer*, creationType>(count, stride, type, usage, stackDepth)));
    }
    // public System.Void Release()
    // Offset: 0x54CC144
    void Release();
    // public System.Int32 get_count()
    // Offset: 0x54CC148
    int get_count();
    // public System.Int32 get_stride()
    // Offset: 0x54CC184
    int get_stride();
    // public System.Void SetData(System.Array data)
    // Offset: 0x54CC1C0
    void SetData(::System::Array* data);
    // public System.Void SetData(Unity.Collections.NativeArray`1<T> data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetData(::Unity::Collections::NativeArray_1<T> data) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ComputeBuffer::SetData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, data);
    }
    // private System.Void InternalSetNativeData(System.IntPtr data, System.Int32 nativeBufferStartIndex, System.Int32 computeBufferStartIndex, System.Int32 count, System.Int32 elemSize)
    // Offset: 0x54CC390
    void InternalSetNativeData(::System::IntPtr data, int nativeBufferStartIndex, int computeBufferStartIndex, int count, int elemSize);
    // private System.Void InternalSetData(System.Array data, System.Int32 managedBufferStartIndex, System.Int32 computeBufferStartIndex, System.Int32 count, System.Int32 elemSize)
    // Offset: 0x54CC31C
    void InternalSetData(::System::Array* data, int managedBufferStartIndex, int computeBufferStartIndex, int count, int elemSize);
    // public System.Void GetData(System.Array data)
    // Offset: 0x54CC404
    void GetData(::System::Array* data);
    // private System.Void InternalGetData(System.Array data, System.Int32 managedBufferStartIndex, System.Int32 computeBufferStartIndex, System.Int32 count, System.Int32 elemSize)
    // Offset: 0x54CC5A4
    void InternalGetData(::System::Array* data, int managedBufferStartIndex, int computeBufferStartIndex, int count, int elemSize);
    // protected override System.Void Finalize()
    // Offset: 0x54CBCD8
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // UnityEngine.ComputeBuffer
  #pragma pack(pop)
  static check_size<sizeof(ComputeBuffer), 16 + sizeof(::System::IntPtr)> __UnityEngine_ComputeBufferSizeCheck;
  static_assert(sizeof(ComputeBuffer) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ComputeBuffer::*)()>(&UnityEngine::ComputeBuffer::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ComputeBuffer*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ComputeBuffer::*)(bool)>(&UnityEngine::ComputeBuffer::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ComputeBuffer*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::InitBuffer
// Il2CppName: InitBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(int, int, ::UnityEngine::ComputeBufferType, ::UnityEngine::ComputeBufferMode)>(&UnityEngine::ComputeBuffer::InitBuffer)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* stride = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine", "ComputeBufferType")->byval_arg;
    static auto* usage = &::il2cpp_utils::GetClassFromName("UnityEngine", "ComputeBufferMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ComputeBuffer*), "InitBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count, stride, type, usage});
  }
};
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::DestroyBuffer
// Il2CppName: DestroyBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::ComputeBuffer*)>(&UnityEngine::ComputeBuffer::DestroyBuffer)> {
  static const MethodInfo* get() {
    static auto* buf = &::il2cpp_utils::GetClassFromName("UnityEngine", "ComputeBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ComputeBuffer*), "DestroyBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf});
  }
};
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ComputeBuffer::*)()>(&UnityEngine::ComputeBuffer::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ComputeBuffer*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::get_count
// Il2CppName: get_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ComputeBuffer::*)()>(&UnityEngine::ComputeBuffer::get_count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ComputeBuffer*), "get_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::get_stride
// Il2CppName: get_stride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ComputeBuffer::*)()>(&UnityEngine::ComputeBuffer::get_stride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ComputeBuffer*), "get_stride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ComputeBuffer::*)(::System::Array*)>(&UnityEngine::ComputeBuffer::SetData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ComputeBuffer*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::SetData
// Il2CppName: SetData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::InternalSetNativeData
// Il2CppName: InternalSetNativeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ComputeBuffer::*)(::System::IntPtr, int, int, int, int)>(&UnityEngine::ComputeBuffer::InternalSetNativeData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* nativeBufferStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* computeBufferStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elemSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ComputeBuffer*), "InternalSetNativeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, nativeBufferStartIndex, computeBufferStartIndex, count, elemSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::InternalSetData
// Il2CppName: InternalSetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ComputeBuffer::*)(::System::Array*, int, int, int, int)>(&UnityEngine::ComputeBuffer::InternalSetData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* managedBufferStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* computeBufferStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elemSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ComputeBuffer*), "InternalSetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, managedBufferStartIndex, computeBufferStartIndex, count, elemSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ComputeBuffer::*)(::System::Array*)>(&UnityEngine::ComputeBuffer::GetData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ComputeBuffer*), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::InternalGetData
// Il2CppName: InternalGetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ComputeBuffer::*)(::System::Array*, int, int, int, int)>(&UnityEngine::ComputeBuffer::InternalGetData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* managedBufferStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* computeBufferStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elemSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ComputeBuffer*), "InternalGetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, managedBufferStartIndex, computeBufferStartIndex, count, elemSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::ComputeBuffer::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ComputeBuffer::*)()>(&UnityEngine::ComputeBuffer::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ComputeBuffer*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
