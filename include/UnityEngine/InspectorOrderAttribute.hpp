// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.PropertyAttribute
#include "UnityEngine/PropertyAttribute.hpp"
// Including type: UnityEngine.InspectorSort
#include "UnityEngine/InspectorSort.hpp"
// Including type: UnityEngine.InspectorSortDirection
#include "UnityEngine/InspectorSortDirection.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: InspectorOrderAttribute
  class InspectorOrderAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InspectorOrderAttribute);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InspectorOrderAttribute*, "UnityEngine", "InspectorOrderAttribute");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InspectorOrderAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class InspectorOrderAttribute : public ::UnityEngine::PropertyAttribute {
    public:
    public:
    // private UnityEngine.InspectorSort <m_inspectorSort>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    ::UnityEngine::InspectorSort m_inspectorSort;
    // Field size check
    static_assert(sizeof(::UnityEngine::InspectorSort) == 0x4);
    // private UnityEngine.InspectorSortDirection <m_sortDirection>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::InspectorSortDirection m_sortDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::InspectorSortDirection) == 0x4);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: private UnityEngine.InspectorSort <m_inspectorSort>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InspectorSort& dyn_$m_inspectorSort$k__BackingField();
    // Get instance field reference: private UnityEngine.InspectorSortDirection <m_sortDirection>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InspectorSortDirection& dyn_$m_sortDirection$k__BackingField();
    // UnityEngine.InspectorSort get_m_inspectorSort()
    // Offset: 0x54C667C
    ::UnityEngine::InspectorSort get_m_inspectorSort();
    // UnityEngine.InspectorSortDirection get_m_sortDirection()
    // Offset: 0x54C6684
    ::UnityEngine::InspectorSortDirection get_m_sortDirection();
  }; // UnityEngine.InspectorOrderAttribute
  #pragma pack(pop)
  static check_size<sizeof(InspectorOrderAttribute), 24 + sizeof(::UnityEngine::InspectorSortDirection)> __UnityEngine_InspectorOrderAttributeSizeCheck;
  static_assert(sizeof(InspectorOrderAttribute) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InspectorOrderAttribute::get_m_inspectorSort
// Il2CppName: get_m_inspectorSort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InspectorSort (UnityEngine::InspectorOrderAttribute::*)()>(&UnityEngine::InspectorOrderAttribute::get_m_inspectorSort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InspectorOrderAttribute*), "get_m_inspectorSort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InspectorOrderAttribute::get_m_sortDirection
// Il2CppName: get_m_sortDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InspectorSortDirection (UnityEngine::InspectorOrderAttribute::*)()>(&UnityEngine::InspectorOrderAttribute::get_m_sortDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InspectorOrderAttribute*), "get_m_sortDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
