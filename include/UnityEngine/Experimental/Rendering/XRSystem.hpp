// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Experimental.Rendering.XRPassCreateInfo
#include "UnityEngine/Experimental/Rendering/XRPassCreateInfo.hpp"
// Including type: UnityEngine.Rendering.MSAASamples
#include "UnityEngine/Rendering/MSAASamples.hpp"
// Including type: UnityEngine.Rendering.FoveatedRenderingCaps
#include "UnityEngine/Rendering/FoveatedRenderingCaps.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: XRLayout
  class XRLayout;
  // Forward declaring type: XRPass
  class XRPass;
  // Forward declaring type: XRView
  struct XRView;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Shader
  class Shader;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Skipping declaration: ScriptableCullingParameters because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: XRSystem
  class XRSystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::Rendering::XRSystem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::XRSystem*, "UnityEngine.Experimental.Rendering", "XRSystem");
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Experimental.Rendering.XRSystem
  // [TokenAttribute] Offset: FFFFFFFF
  class XRSystem : public ::Il2CppObject {
    public:
    // Get static field: static private UnityEngine.Experimental.Rendering.XRLayout s_Layout
    static ::UnityEngine::Experimental::Rendering::XRLayout* _get_s_Layout();
    // Set static field: static private UnityEngine.Experimental.Rendering.XRLayout s_Layout
    static void _set_s_Layout(::UnityEngine::Experimental::Rendering::XRLayout* value);
    // Get static field: static private System.Func`2<UnityEngine.Experimental.Rendering.XRPassCreateInfo,UnityEngine.Experimental.Rendering.XRPass> s_PassAllocator
    static ::System::Func_2<::UnityEngine::Experimental::Rendering::XRPassCreateInfo, ::UnityEngine::Experimental::Rendering::XRPass*>* _get_s_PassAllocator();
    // Set static field: static private System.Func`2<UnityEngine.Experimental.Rendering.XRPassCreateInfo,UnityEngine.Experimental.Rendering.XRPass> s_PassAllocator
    static void _set_s_PassAllocator(::System::Func_2<::UnityEngine::Experimental::Rendering::XRPassCreateInfo, ::UnityEngine::Experimental::Rendering::XRPass*>* value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.XR.XRDisplaySubsystem> s_DisplayList
    static ::System::Collections::Generic::List_1<::UnityEngine::XR::XRDisplaySubsystem*>* _get_s_DisplayList();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.XR.XRDisplaySubsystem> s_DisplayList
    static void _set_s_DisplayList(::System::Collections::Generic::List_1<::UnityEngine::XR::XRDisplaySubsystem*>* value);
    // Get static field: static private UnityEngine.XR.XRDisplaySubsystem s_Display
    static ::UnityEngine::XR::XRDisplaySubsystem* _get_s_Display();
    // Set static field: static private UnityEngine.XR.XRDisplaySubsystem s_Display
    static void _set_s_Display(::UnityEngine::XR::XRDisplaySubsystem* value);
    // Get static field: static private UnityEngine.Rendering.MSAASamples s_MSAASamples
    static ::UnityEngine::Rendering::MSAASamples _get_s_MSAASamples();
    // Set static field: static private UnityEngine.Rendering.MSAASamples s_MSAASamples
    static void _set_s_MSAASamples(::UnityEngine::Rendering::MSAASamples value);
    // Get static field: static private UnityEngine.Material s_OcclusionMeshMaterial
    static ::UnityEngine::Material* _get_s_OcclusionMeshMaterial();
    // Set static field: static private UnityEngine.Material s_OcclusionMeshMaterial
    static void _set_s_OcclusionMeshMaterial(::UnityEngine::Material* value);
    // Get static field: static private UnityEngine.Material s_MirrorViewMaterial
    static ::UnityEngine::Material* _get_s_MirrorViewMaterial();
    // Set static field: static private UnityEngine.Material s_MirrorViewMaterial
    static void _set_s_MirrorViewMaterial(::UnityEngine::Material* value);
    // Get static field: static private System.Action`2<UnityEngine.Experimental.Rendering.XRLayout,UnityEngine.Camera> s_LayoutOverride
    static ::System::Action_2<::UnityEngine::Experimental::Rendering::XRLayout*, ::UnityEngine::Camera*>* _get_s_LayoutOverride();
    // Set static field: static private System.Action`2<UnityEngine.Experimental.Rendering.XRLayout,UnityEngine.Camera> s_LayoutOverride
    static void _set_s_LayoutOverride(::System::Action_2<::UnityEngine::Experimental::Rendering::XRLayout*, ::UnityEngine::Camera*>* value);
    // Get static field: static public readonly UnityEngine.Experimental.Rendering.XRPass emptyPass
    static ::UnityEngine::Experimental::Rendering::XRPass* _get_emptyPass();
    // Set static field: static public readonly UnityEngine.Experimental.Rendering.XRPass emptyPass
    static void _set_emptyPass(::UnityEngine::Experimental::Rendering::XRPass* value);
    // Get static field: static private System.Boolean <singlePassAllowed>k__BackingField
    static bool _get_$singlePassAllowed$k__BackingField();
    // Set static field: static private System.Boolean <singlePassAllowed>k__BackingField
    static void _set_$singlePassAllowed$k__BackingField(bool value);
    // Get static field: static private UnityEngine.Rendering.FoveatedRenderingCaps <foveatedRenderingCaps>k__BackingField
    static ::UnityEngine::Rendering::FoveatedRenderingCaps _get_$foveatedRenderingCaps$k__BackingField();
    // Set static field: static private UnityEngine.Rendering.FoveatedRenderingCaps <foveatedRenderingCaps>k__BackingField
    static void _set_$foveatedRenderingCaps$k__BackingField(::UnityEngine::Rendering::FoveatedRenderingCaps value);
    // Get static field: static private System.Boolean <dumpDebugInfo>k__BackingField
    static bool _get_$dumpDebugInfo$k__BackingField();
    // Set static field: static private System.Boolean <dumpDebugInfo>k__BackingField
    static void _set_$dumpDebugInfo$k__BackingField(bool value);
    // static public UnityEngine.XR.XRDisplaySubsystem GetActiveDisplay()
    // Offset: 0x522EA30
    static ::UnityEngine::XR::XRDisplaySubsystem* GetActiveDisplay();
    // static public System.Boolean get_displayActive()
    // Offset: 0x522B640
    static bool get_displayActive();
    // static public System.Boolean get_singlePassAllowed()
    // Offset: 0x522EA88
    static bool get_singlePassAllowed();
    // static public UnityEngine.Rendering.FoveatedRenderingCaps get_foveatedRenderingCaps()
    // Offset: 0x522EAE0
    static ::UnityEngine::Rendering::FoveatedRenderingCaps get_foveatedRenderingCaps();
    // static public System.Void set_foveatedRenderingCaps(UnityEngine.Rendering.FoveatedRenderingCaps value)
    // Offset: 0x522EB38
    static void set_foveatedRenderingCaps(::UnityEngine::Rendering::FoveatedRenderingCaps value);
    // static public System.Boolean get_dumpDebugInfo()
    // Offset: 0x522EB94
    static bool get_dumpDebugInfo();
    // static public System.Void Initialize(System.Func`2<UnityEngine.Experimental.Rendering.XRPassCreateInfo,UnityEngine.Experimental.Rendering.XRPass> passAllocator, UnityEngine.Shader occlusionMeshPS, UnityEngine.Shader mirrorViewPS)
    // Offset: 0x522EBEC
    static void Initialize(::System::Func_2<::UnityEngine::Experimental::Rendering::XRPassCreateInfo, ::UnityEngine::Experimental::Rendering::XRPass*>* passAllocator, ::UnityEngine::Shader* occlusionMeshPS, ::UnityEngine::Shader* mirrorViewPS);
    // static public System.Void SetDisplayMSAASamples(UnityEngine.Rendering.MSAASamples msaaSamples)
    // Offset: 0x522F278
    static void SetDisplayMSAASamples(::UnityEngine::Rendering::MSAASamples msaaSamples);
    // static public UnityEngine.Rendering.MSAASamples GetDisplayMSAASamples()
    // Offset: 0x522F488
    static ::UnityEngine::Rendering::MSAASamples GetDisplayMSAASamples();
    // static public System.Void SetRenderScale(System.Single renderScale)
    // Offset: 0x522F4E0
    static void SetRenderScale(float renderScale);
    // static public UnityEngine.Experimental.Rendering.XRLayout NewLayout()
    // Offset: 0x522F6B8
    static ::UnityEngine::Experimental::Rendering::XRLayout* NewLayout();
    // static public System.Void EndLayout()
    // Offset: 0x522F7B0
    static void EndLayout();
    // static public System.Void RenderMirrorView(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Camera camera)
    // Offset: 0x522F880
    static void RenderMirrorView(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Camera* camera);
    // static public System.Void Dispose()
    // Offset: 0x522F920
    static void Dispose();
    // static System.Void SetDisplayZRange(System.Single zNear, System.Single zFar)
    // Offset: 0x522B6D4
    static void SetDisplayZRange(float zNear, float zFar);
    // static private System.Void SetLayoutOverride(System.Action`2<UnityEngine.Experimental.Rendering.XRLayout,UnityEngine.Camera> action)
    // Offset: 0x522FAC0
    static void SetLayoutOverride(::System::Action_2<::UnityEngine::Experimental::Rendering::XRLayout*, ::UnityEngine::Camera*>* action);
    // static private System.Void XRSystemInit()
    // Offset: 0x522FB20
    static void XRSystemInit();
    // static private System.Void RefreshDeviceInfo()
    // Offset: 0x522EF90
    static void RefreshDeviceInfo();
    // static System.Void CreateDefaultLayout(UnityEngine.Camera camera)
    // Offset: 0x522B798
    static void CreateDefaultLayout(::UnityEngine::Camera* camera);
    // static System.Void ReconfigurePass(UnityEngine.Experimental.Rendering.XRPass xrPass, UnityEngine.Camera camera)
    // Offset: 0x522BE7C
    static void ReconfigurePass(::UnityEngine::Experimental::Rendering::XRPass* xrPass, ::UnityEngine::Camera* camera);
    // static private System.Boolean CanUseSinglePass(UnityEngine.Camera camera, UnityEngine.XR.XRDisplaySubsystem/XRRenderPass renderPass)
    // Offset: 0x522FBC0
    static bool CanUseSinglePass(::UnityEngine::Camera* camera, ::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass renderPass);
    // static private UnityEngine.Experimental.Rendering.XRView BuildView(UnityEngine.XR.XRDisplaySubsystem/XRRenderPass renderPass, UnityEngine.XR.XRDisplaySubsystem/XRRenderParameter renderParameter)
    // Offset: 0x522FF98
    static ::UnityEngine::Experimental::Rendering::XRView BuildView(::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass renderPass, ::UnityEngine::XR::XRDisplaySubsystem::XRRenderParameter renderParameter);
    // static private UnityEngine.Experimental.Rendering.XRPassCreateInfo BuildPass(UnityEngine.XR.XRDisplaySubsystem/XRRenderPass xrRenderPass, UnityEngine.Rendering.ScriptableCullingParameters cullingParameters)
    // Offset: 0x522FD44
    static ::UnityEngine::Experimental::Rendering::XRPassCreateInfo BuildPass(::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass xrRenderPass, ::UnityEngine::Rendering::ScriptableCullingParameters cullingParameters);
    // static private System.Void .cctor()
    // Offset: 0x5230138
    static void _cctor();
  }; // UnityEngine.Experimental.Rendering.XRSystem
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::GetActiveDisplay
// Il2CppName: GetActiveDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::XRDisplaySubsystem* (*)()>(&UnityEngine::Experimental::Rendering::XRSystem::GetActiveDisplay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "GetActiveDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::get_displayActive
// Il2CppName: get_displayActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::Experimental::Rendering::XRSystem::get_displayActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "get_displayActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::get_singlePassAllowed
// Il2CppName: get_singlePassAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::Experimental::Rendering::XRSystem::get_singlePassAllowed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "get_singlePassAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::get_foveatedRenderingCaps
// Il2CppName: get_foveatedRenderingCaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::FoveatedRenderingCaps (*)()>(&UnityEngine::Experimental::Rendering::XRSystem::get_foveatedRenderingCaps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "get_foveatedRenderingCaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::set_foveatedRenderingCaps
// Il2CppName: set_foveatedRenderingCaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::FoveatedRenderingCaps)>(&UnityEngine::Experimental::Rendering::XRSystem::set_foveatedRenderingCaps)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "FoveatedRenderingCaps")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "set_foveatedRenderingCaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::get_dumpDebugInfo
// Il2CppName: get_dumpDebugInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::Experimental::Rendering::XRSystem::get_dumpDebugInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "get_dumpDebugInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Func_2<::UnityEngine::Experimental::Rendering::XRPassCreateInfo, ::UnityEngine::Experimental::Rendering::XRPass*>*, ::UnityEngine::Shader*, ::UnityEngine::Shader*)>(&UnityEngine::Experimental::Rendering::XRSystem::Initialize)> {
  static const MethodInfo* get() {
    static auto* passAllocator = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "XRPassCreateInfo"), ::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "XRPass")})->byval_arg;
    static auto* occlusionMeshPS = &::il2cpp_utils::GetClassFromName("UnityEngine", "Shader")->byval_arg;
    static auto* mirrorViewPS = &::il2cpp_utils::GetClassFromName("UnityEngine", "Shader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passAllocator, occlusionMeshPS, mirrorViewPS});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::SetDisplayMSAASamples
// Il2CppName: SetDisplayMSAASamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::MSAASamples)>(&UnityEngine::Experimental::Rendering::XRSystem::SetDisplayMSAASamples)> {
  static const MethodInfo* get() {
    static auto* msaaSamples = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MSAASamples")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "SetDisplayMSAASamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msaaSamples});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::GetDisplayMSAASamples
// Il2CppName: GetDisplayMSAASamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::MSAASamples (*)()>(&UnityEngine::Experimental::Rendering::XRSystem::GetDisplayMSAASamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "GetDisplayMSAASamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::SetRenderScale
// Il2CppName: SetRenderScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&UnityEngine::Experimental::Rendering::XRSystem::SetRenderScale)> {
  static const MethodInfo* get() {
    static auto* renderScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "SetRenderScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderScale});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::NewLayout
// Il2CppName: NewLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::XRLayout* (*)()>(&UnityEngine::Experimental::Rendering::XRSystem::NewLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "NewLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::EndLayout
// Il2CppName: EndLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Experimental::Rendering::XRSystem::EndLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "EndLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::RenderMirrorView
// Il2CppName: RenderMirrorView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Camera*)>(&UnityEngine::Experimental::Rendering::XRSystem::RenderMirrorView)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "RenderMirrorView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Experimental::Rendering::XRSystem::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::SetDisplayZRange
// Il2CppName: SetDisplayZRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float)>(&UnityEngine::Experimental::Rendering::XRSystem::SetDisplayZRange)> {
  static const MethodInfo* get() {
    static auto* zNear = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* zFar = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "SetDisplayZRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zNear, zFar});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::SetLayoutOverride
// Il2CppName: SetLayoutOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<::UnityEngine::Experimental::Rendering::XRLayout*, ::UnityEngine::Camera*>*)>(&UnityEngine::Experimental::Rendering::XRSystem::SetLayoutOverride)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "XRLayout"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "SetLayoutOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::XRSystemInit
// Il2CppName: XRSystemInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Experimental::Rendering::XRSystem::XRSystemInit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "XRSystemInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::RefreshDeviceInfo
// Il2CppName: RefreshDeviceInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Experimental::Rendering::XRSystem::RefreshDeviceInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "RefreshDeviceInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::CreateDefaultLayout
// Il2CppName: CreateDefaultLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*)>(&UnityEngine::Experimental::Rendering::XRSystem::CreateDefaultLayout)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "CreateDefaultLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::ReconfigurePass
// Il2CppName: ReconfigurePass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Experimental::Rendering::XRPass*, ::UnityEngine::Camera*)>(&UnityEngine::Experimental::Rendering::XRSystem::ReconfigurePass)> {
  static const MethodInfo* get() {
    static auto* xrPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "XRPass")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "ReconfigurePass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xrPass, camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::CanUseSinglePass
// Il2CppName: CanUseSinglePass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Camera*, ::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass)>(&UnityEngine::Experimental::Rendering::XRSystem::CanUseSinglePass)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* renderPass = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRDisplaySubsystem/XRRenderPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "CanUseSinglePass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, renderPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::BuildView
// Il2CppName: BuildView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::XRView (*)(::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass, ::UnityEngine::XR::XRDisplaySubsystem::XRRenderParameter)>(&UnityEngine::Experimental::Rendering::XRSystem::BuildView)> {
  static const MethodInfo* get() {
    static auto* renderPass = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRDisplaySubsystem/XRRenderPass")->byval_arg;
    static auto* renderParameter = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRDisplaySubsystem/XRRenderParameter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "BuildView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderPass, renderParameter});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::BuildPass
// Il2CppName: BuildPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::XRPassCreateInfo (*)(::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass, ::UnityEngine::Rendering::ScriptableCullingParameters)>(&UnityEngine::Experimental::Rendering::XRSystem::BuildPass)> {
  static const MethodInfo* get() {
    static auto* xrRenderPass = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRDisplaySubsystem/XRRenderPass")->byval_arg;
    static auto* cullingParameters = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableCullingParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), "BuildPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xrRenderPass, cullingParameters});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRSystem::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Experimental::Rendering::XRSystem::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRSystem*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
