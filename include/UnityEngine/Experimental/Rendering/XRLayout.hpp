// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: XRPass
  class XRPass;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: XRLayout
  class XRLayout;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::Rendering::XRLayout);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::XRLayout*, "UnityEngine.Experimental.Rendering", "XRLayout");
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Experimental.Rendering.XRLayout
  // [TokenAttribute] Offset: FFFFFFFF
  class XRLayout : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Collections.Generic.List`1<System.ValueTuple`2<UnityEngine.Camera,UnityEngine.Experimental.Rendering.XRPass>> m_ActivePasses
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::System::ValueTuple_2<::UnityEngine::Camera*, ::UnityEngine::Experimental::Rendering::XRPass*>>* m_ActivePasses;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::ValueTuple_2<::UnityEngine::Camera*, ::UnityEngine::Experimental::Rendering::XRPass*>>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::System::ValueTuple_2<::UnityEngine::Camera*, ::UnityEngine::Experimental::Rendering::XRPass*>>*
    constexpr operator ::System::Collections::Generic::List_1<::System::ValueTuple_2<::UnityEngine::Camera*, ::UnityEngine::Experimental::Rendering::XRPass*>>*() const noexcept {
      return m_ActivePasses;
    }
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.ValueTuple`2<UnityEngine.Camera,UnityEngine.Experimental.Rendering.XRPass>> m_ActivePasses
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::ValueTuple_2<::UnityEngine::Camera*, ::UnityEngine::Experimental::Rendering::XRPass*>>*& dyn_m_ActivePasses();
    // public System.Void AddCamera(UnityEngine.Camera camera, System.Boolean enableXR)
    // Offset: 0x522B494
    void AddCamera(::UnityEngine::Camera* camera, bool enableXR);
    // public System.Void ReconfigurePass(UnityEngine.Experimental.Rendering.XRPass xrPass, UnityEngine.Camera camera)
    // Offset: 0x522BDD8
    void ReconfigurePass(::UnityEngine::Experimental::Rendering::XRPass* xrPass, ::UnityEngine::Camera* camera);
    // public System.Collections.Generic.List`1<System.ValueTuple`2<UnityEngine.Camera,UnityEngine.Experimental.Rendering.XRPass>> GetActivePasses()
    // Offset: 0x522C134
    ::System::Collections::Generic::List_1<::System::ValueTuple_2<::UnityEngine::Camera*, ::UnityEngine::Experimental::Rendering::XRPass*>>* GetActivePasses();
    // System.Void AddPass(UnityEngine.Camera camera, UnityEngine.Experimental.Rendering.XRPass xrPass)
    // Offset: 0x522BCD8
    void AddPass(::UnityEngine::Camera* camera, ::UnityEngine::Experimental::Rendering::XRPass* xrPass);
    // System.Void Clear()
    // Offset: 0x522C13C
    void Clear();
    // System.Void LogDebugInfo()
    // Offset: 0x522C268
    void LogDebugInfo();
    // public System.Void .ctor()
    // Offset: 0x522C7E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRLayout* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::XRLayout::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRLayout*, creationType>()));
    }
  }; // UnityEngine.Experimental.Rendering.XRLayout
  #pragma pack(pop)
  static check_size<sizeof(XRLayout), 16 + sizeof(::System::Collections::Generic::List_1<::System::ValueTuple_2<::UnityEngine::Camera*, ::UnityEngine::Experimental::Rendering::XRPass*>>*)> __UnityEngine_Experimental_Rendering_XRLayoutSizeCheck;
  static_assert(sizeof(XRLayout) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRLayout::AddCamera
// Il2CppName: AddCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRLayout::*)(::UnityEngine::Camera*, bool)>(&UnityEngine::Experimental::Rendering::XRLayout::AddCamera)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* enableXR = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRLayout*), "AddCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, enableXR});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRLayout::ReconfigurePass
// Il2CppName: ReconfigurePass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRLayout::*)(::UnityEngine::Experimental::Rendering::XRPass*, ::UnityEngine::Camera*)>(&UnityEngine::Experimental::Rendering::XRLayout::ReconfigurePass)> {
  static const MethodInfo* get() {
    static auto* xrPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "XRPass")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRLayout*), "ReconfigurePass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xrPass, camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRLayout::GetActivePasses
// Il2CppName: GetActivePasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::ValueTuple_2<::UnityEngine::Camera*, ::UnityEngine::Experimental::Rendering::XRPass*>>* (UnityEngine::Experimental::Rendering::XRLayout::*)()>(&UnityEngine::Experimental::Rendering::XRLayout::GetActivePasses)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRLayout*), "GetActivePasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRLayout::AddPass
// Il2CppName: AddPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRLayout::*)(::UnityEngine::Camera*, ::UnityEngine::Experimental::Rendering::XRPass*)>(&UnityEngine::Experimental::Rendering::XRLayout::AddPass)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* xrPass = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "XRPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRLayout*), "AddPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, xrPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRLayout::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRLayout::*)()>(&UnityEngine::Experimental::Rendering::XRLayout::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRLayout*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRLayout::LogDebugInfo
// Il2CppName: LogDebugInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRLayout::*)()>(&UnityEngine::Experimental::Rendering::XRLayout::LogDebugInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRLayout*), "LogDebugInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRLayout::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
