// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.RenderTextureDescriptor
#include "UnityEngine/RenderTextureDescriptor.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Rendering.RenderTargetIdentifier
#include "UnityEngine/Rendering/RenderTargetIdentifier.hpp"
// Including type: UnityEngine.Rendering.ScriptableCullingParameters
#include "UnityEngine/Rendering/ScriptableCullingParameters.hpp"
// Including type: UnityEngine.XR.XRDisplaySubsystem/XRRenderPass
#include "UnityEngine/XR/XRDisplaySubsystem_XRRenderPass.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: XRPassCreateInfo
  struct XRPassCreateInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::XRPassCreateInfo, "UnityEngine.Experimental.Rendering", "XRPassCreateInfo");
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Size: 0x790
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Experimental.Rendering.XRPassCreateInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct XRPassCreateInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // UnityEngine.Rendering.RenderTargetIdentifier renderTarget
    // Size: 0x24
    // Offset: 0x0
    ::UnityEngine::Rendering::RenderTargetIdentifier renderTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetIdentifier) == 0x24);
    // Padding between fields: renderTarget and: renderTargetDesc
    char __padding0[0x4] = {};
    // UnityEngine.RenderTextureDescriptor renderTargetDesc
    // Size: 0x34
    // Offset: 0x28
    ::UnityEngine::RenderTextureDescriptor renderTargetDesc;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTextureDescriptor) == 0x34);
    // Padding between fields: renderTargetDesc and: cullingParameters
    char __padding1[0x4] = {};
    // UnityEngine.Rendering.ScriptableCullingParameters cullingParameters
    // Size: 0x630
    // Offset: 0x60
    ::UnityEngine::Rendering::ScriptableCullingParameters cullingParameters;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ScriptableCullingParameters) == 0x630);
    // UnityEngine.Material occlusionMeshMaterial
    // Size: 0x8
    // Offset: 0x690
    ::UnityEngine::Material* occlusionMeshMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // System.IntPtr foveatedRenderingInfo
    // Size: 0x8
    // Offset: 0x698
    ::System::IntPtr foveatedRenderingInfo;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // System.Int32 multipassId
    // Size: 0x4
    // Offset: 0x6A0
    int multipassId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 cullingPassId
    // Size: 0x4
    // Offset: 0x6A4
    int cullingPassId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean copyDepth
    // Size: 0x1
    // Offset: 0x6A8
    bool copyDepth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: copyDepth and: xrSdkRenderPass
    char __padding7[0x7] = {};
    // UnityEngine.XR.XRDisplaySubsystem/XRRenderPass xrSdkRenderPass
    // Size: 0xE0
    // Offset: 0x6B0
    ::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass xrSdkRenderPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass) == 0xE0);
    public:
    // Creating value type constructor for type: XRPassCreateInfo
    constexpr XRPassCreateInfo(::UnityEngine::Rendering::RenderTargetIdentifier renderTarget_ = {}, ::UnityEngine::RenderTextureDescriptor renderTargetDesc_ = {}, ::UnityEngine::Rendering::ScriptableCullingParameters cullingParameters_ = {}, ::UnityEngine::Material* occlusionMeshMaterial_ = {}, ::System::IntPtr foveatedRenderingInfo_ = {}, int multipassId_ = {}, int cullingPassId_ = {}, bool copyDepth_ = {}, ::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass xrSdkRenderPass_ = {}) noexcept : renderTarget{renderTarget_}, renderTargetDesc{renderTargetDesc_}, cullingParameters{cullingParameters_}, occlusionMeshMaterial{occlusionMeshMaterial_}, foveatedRenderingInfo{foveatedRenderingInfo_}, multipassId{multipassId_}, cullingPassId{cullingPassId_}, copyDepth{copyDepth_}, xrSdkRenderPass{xrSdkRenderPass_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: UnityEngine.Rendering.RenderTargetIdentifier renderTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetIdentifier& dyn_renderTarget();
    // Get instance field reference: UnityEngine.RenderTextureDescriptor renderTargetDesc
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTextureDescriptor& dyn_renderTargetDesc();
    // Get instance field reference: UnityEngine.Rendering.ScriptableCullingParameters cullingParameters
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ScriptableCullingParameters& dyn_cullingParameters();
    // Get instance field reference: UnityEngine.Material occlusionMeshMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_occlusionMeshMaterial();
    // Get instance field reference: System.IntPtr foveatedRenderingInfo
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_foveatedRenderingInfo();
    // Get instance field reference: System.Int32 multipassId
    [[deprecated("Use field access instead!")]] int& dyn_multipassId();
    // Get instance field reference: System.Int32 cullingPassId
    [[deprecated("Use field access instead!")]] int& dyn_cullingPassId();
    // Get instance field reference: System.Boolean copyDepth
    [[deprecated("Use field access instead!")]] bool& dyn_copyDepth();
    // Get instance field reference: UnityEngine.XR.XRDisplaySubsystem/XRRenderPass xrSdkRenderPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass& dyn_xrSdkRenderPass();
  }; // UnityEngine.Experimental.Rendering.XRPassCreateInfo
  #pragma pack(pop)
  static check_size<sizeof(XRPassCreateInfo), 1712 + sizeof(::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass)> __UnityEngine_Experimental_Rendering_XRPassCreateInfoSizeCheck;
  static_assert(sizeof(XRPassCreateInfo) == 0x790);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
