// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraphLogger
  class RenderGraphLogger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger*, "UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphLogger");
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphLogger
  // [TokenAttribute] Offset: FFFFFFFF
  class RenderGraphLogger : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.Dictionary`2<System.String,System.Text.StringBuilder> m_LogMap
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Text::StringBuilder*>* m_LogMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Text::StringBuilder*>*) == 0x8);
    // private System.Text.StringBuilder m_CurrentBuilder
    // Size: 0x8
    // Offset: 0x18
    ::System::Text::StringBuilder* m_CurrentBuilder;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private System.Int32 m_CurrentIndentation
    // Size: 0x4
    // Offset: 0x20
    int m_CurrentIndentation;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Text.StringBuilder> m_LogMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Text::StringBuilder*>*& dyn_m_LogMap();
    // Get instance field reference: private System.Text.StringBuilder m_CurrentBuilder
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn_m_CurrentBuilder();
    // Get instance field reference: private System.Int32 m_CurrentIndentation
    [[deprecated("Use field access instead!")]] int& dyn_m_CurrentIndentation();
    // public System.Void Initialize(System.String logName)
    // Offset: 0x52320EC
    void Initialize(::StringW logName);
    // public System.Void IncrementIndentation(System.Int32 value)
    // Offset: 0x523A788
    void IncrementIndentation(int value);
    // public System.Void DecrementIndentation(System.Int32 value)
    // Offset: 0x523A85C
    void DecrementIndentation(int value);
    // public System.Void LogLine(System.String format, params System.Object[] args)
    // Offset: 0x5233FD4
    void LogLine(::StringW format, ::ArrayW<::Il2CppObject*> args);
    // public System.String GetAllLogs()
    // Offset: 0x52317E4
    ::StringW GetAllLogs();
    // public System.Void .ctor()
    // Offset: 0x5230F04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RenderGraphLogger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RenderGraphLogger*, creationType>()));
    }
  }; // UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphLogger
  #pragma pack(pop)
  static check_size<sizeof(RenderGraphLogger), 32 + sizeof(int)> __UnityEngine_Experimental_Rendering_RenderGraphModule_RenderGraphLoggerSizeCheck;
  static_assert(sizeof(RenderGraphLogger) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::*)(::StringW)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::Initialize)> {
  static const MethodInfo* get() {
    static auto* logName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logName});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::IncrementIndentation
// Il2CppName: IncrementIndentation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::*)(int)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::IncrementIndentation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger*), "IncrementIndentation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::DecrementIndentation
// Il2CppName: DecrementIndentation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::*)(int)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::DecrementIndentation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger*), "DecrementIndentation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::LogLine
// Il2CppName: LogLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::LogLine)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger*), "LogLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, args});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::GetAllLogs
// Il2CppName: GetAllLogs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::GetAllLogs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger*), "GetAllLogs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
