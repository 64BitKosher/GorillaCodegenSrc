// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle
#include "UnityEngine/Experimental/Rendering/RenderGraphModule/RendererListHandle.hpp"
// Including type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder
#include "UnityEngine/Experimental/Rendering/RenderGraphModule/RenderGraphBuilder.hpp"
// Including type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugData
#include "UnityEngine/Experimental/Rendering/RenderGraphModule/RenderGraphDebugData.hpp"
// Including type: UnityEngine.Rendering.GraphicsFence
#include "UnityEngine/Rendering/GraphicsFence.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraphResourceRegistry
  class RenderGraphResourceRegistry;
  // Forward declaring type: RenderGraphObjectPool
  class RenderGraphObjectPool;
  // Forward declaring type: RenderGraphPass
  class RenderGraphPass;
  // Forward declaring type: RenderGraphDebugParams
  class RenderGraphDebugParams;
  // Forward declaring type: RenderGraphLogger
  class RenderGraphLogger;
  // Forward declaring type: RenderGraphDefaultResources
  class RenderGraphDefaultResources;
  // Forward declaring type: RenderGraphContext
  class RenderGraphContext;
  // Forward declaring type: TextureHandle
  struct TextureHandle;
  // Forward declaring type: TextureDesc
  struct TextureDesc;
  // Forward declaring type: RenderGraphExecution
  struct RenderGraphExecution;
  // Forward declaring type: RenderGraphParameters
  struct RenderGraphParameters;
  // Skipping declaration: CompiledPassInfo because it is already included!
  // Skipping declaration: CompiledResourceInfo because it is already included!
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: DynamicArray`1<T>
  template<typename T>
  class DynamicArray_1;
  // Forward declaring type: RTHandle
  class RTHandle;
  // Forward declaring type: RenderTargetIdentifier
  struct RenderTargetIdentifier;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraph
  class RenderGraph;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, "UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph");
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Size: 0xC0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph
  // [TokenAttribute] Offset: FFFFFFFF
  class RenderGraph : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo
    struct CompiledResourceInfo;
    // Nested type: ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo
    struct CompiledPassInfo;
    // Nested type: ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::OnGraphRegisteredDelegate
    class OnGraphRegisteredDelegate;
    // Nested type: ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::OnExecutionRegisteredDelegate
    class OnExecutionRegisteredDelegate;
    // Size: 0x15
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledResourceInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct CompiledResourceInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Collections.Generic.List`1<System.Int32> producers
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::List_1<int>* producers;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
      // public System.Collections.Generic.List`1<System.Int32> consumers
      // Size: 0x8
      // Offset: 0x8
      ::System::Collections::Generic::List_1<int>* consumers;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
      // public System.Int32 refCount
      // Size: 0x4
      // Offset: 0x10
      int refCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Boolean imported
      // Size: 0x1
      // Offset: 0x14
      bool imported;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: CompiledResourceInfo
      constexpr CompiledResourceInfo(::System::Collections::Generic::List_1<int>* producers_ = {}, ::System::Collections::Generic::List_1<int>* consumers_ = {}, int refCount_ = {}, bool imported_ = {}) noexcept : producers{producers_}, consumers{consumers_}, refCount{refCount_}, imported{imported_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> producers
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_producers();
      // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> consumers
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_consumers();
      // Get instance field reference: public System.Int32 refCount
      [[deprecated("Use field access instead!")]] int& dyn_refCount();
      // Get instance field reference: public System.Boolean imported
      [[deprecated("Use field access instead!")]] bool& dyn_imported();
      // public System.Void Reset()
      // Offset: 0x5232D28
      void Reset();
    }; // UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledResourceInfo
    #pragma pack(pop)
    static check_size<sizeof(RenderGraph::CompiledResourceInfo), 20 + sizeof(bool)> __UnityEngine_Experimental_Rendering_RenderGraphModule_RenderGraph_CompiledResourceInfoSizeCheck;
    static_assert(sizeof(RenderGraph::CompiledResourceInfo) == 0x15);
    // Size: 0x41
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledPassInfo
    // [TokenAttribute] Offset: FFFFFFFF
    // [DebuggerDisplayAttribute] Offset: FFFFFFFF
    struct CompiledPassInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass pass
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass* pass;
      // Field size check
      static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*) == 0x8);
      // public System.Collections.Generic.List`1<System.Int32>[] resourceCreateList
      // Size: 0x8
      // Offset: 0x8
      ::ArrayW<::System::Collections::Generic::List_1<int>*> resourceCreateList;
      // Field size check
      static_assert(sizeof(::ArrayW<::System::Collections::Generic::List_1<int>*>) == 0x8);
      // public System.Collections.Generic.List`1<System.Int32>[] resourceReleaseList
      // Size: 0x8
      // Offset: 0x10
      ::ArrayW<::System::Collections::Generic::List_1<int>*> resourceReleaseList;
      // Field size check
      static_assert(sizeof(::ArrayW<::System::Collections::Generic::List_1<int>*>) == 0x8);
      // public System.Int32 refCount
      // Size: 0x4
      // Offset: 0x18
      int refCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Boolean culled
      // Size: 0x1
      // Offset: 0x1C
      bool culled;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean culledByRendererList
      // Size: 0x1
      // Offset: 0x1D
      bool culledByRendererList;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean hasSideEffect
      // Size: 0x1
      // Offset: 0x1E
      bool hasSideEffect;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: hasSideEffect and: syncToPassIndex
      char __padding6[0x1] = {};
      // public System.Int32 syncToPassIndex
      // Size: 0x4
      // Offset: 0x20
      int syncToPassIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 syncFromPassIndex
      // Size: 0x4
      // Offset: 0x24
      int syncFromPassIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Boolean needGraphicsFence
      // Size: 0x1
      // Offset: 0x28
      bool needGraphicsFence;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: needGraphicsFence and: fence
      char __padding9[0x7] = {};
      // public UnityEngine.Rendering.GraphicsFence fence
      // Size: 0x10
      // Offset: 0x30
      ::UnityEngine::Rendering::GraphicsFence fence;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rendering::GraphicsFence) == 0x10);
      // public System.Boolean enableAsyncCompute
      // Size: 0x1
      // Offset: 0x40
      bool enableAsyncCompute;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: CompiledPassInfo
      constexpr CompiledPassInfo(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass* pass_ = {}, ::ArrayW<::System::Collections::Generic::List_1<int>*> resourceCreateList_ = ::ArrayW<::System::Collections::Generic::List_1<int>*>(static_cast<void*>(nullptr)), ::ArrayW<::System::Collections::Generic::List_1<int>*> resourceReleaseList_ = ::ArrayW<::System::Collections::Generic::List_1<int>*>(static_cast<void*>(nullptr)), int refCount_ = {}, bool culled_ = {}, bool culledByRendererList_ = {}, bool hasSideEffect_ = {}, int syncToPassIndex_ = {}, int syncFromPassIndex_ = {}, bool needGraphicsFence_ = {}, ::UnityEngine::Rendering::GraphicsFence fence_ = {}, bool enableAsyncCompute_ = {}) noexcept : pass{pass_}, resourceCreateList{resourceCreateList_}, resourceReleaseList{resourceReleaseList_}, refCount{refCount_}, culled{culled_}, culledByRendererList{culledByRendererList_}, hasSideEffect{hasSideEffect_}, syncToPassIndex{syncToPassIndex_}, syncFromPassIndex{syncFromPassIndex_}, needGraphicsFence{needGraphicsFence_}, fence{fence_}, enableAsyncCompute{enableAsyncCompute_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass pass
      [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*& dyn_pass();
      // Get instance field reference: public System.Collections.Generic.List`1<System.Int32>[] resourceCreateList
      [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::List_1<int>*>& dyn_resourceCreateList();
      // Get instance field reference: public System.Collections.Generic.List`1<System.Int32>[] resourceReleaseList
      [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::List_1<int>*>& dyn_resourceReleaseList();
      // Get instance field reference: public System.Int32 refCount
      [[deprecated("Use field access instead!")]] int& dyn_refCount();
      // Get instance field reference: public System.Boolean culled
      [[deprecated("Use field access instead!")]] bool& dyn_culled();
      // Get instance field reference: public System.Boolean culledByRendererList
      [[deprecated("Use field access instead!")]] bool& dyn_culledByRendererList();
      // Get instance field reference: public System.Boolean hasSideEffect
      [[deprecated("Use field access instead!")]] bool& dyn_hasSideEffect();
      // Get instance field reference: public System.Int32 syncToPassIndex
      [[deprecated("Use field access instead!")]] int& dyn_syncToPassIndex();
      // Get instance field reference: public System.Int32 syncFromPassIndex
      [[deprecated("Use field access instead!")]] int& dyn_syncFromPassIndex();
      // Get instance field reference: public System.Boolean needGraphicsFence
      [[deprecated("Use field access instead!")]] bool& dyn_needGraphicsFence();
      // Get instance field reference: public UnityEngine.Rendering.GraphicsFence fence
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::GraphicsFence& dyn_fence();
      // Get instance field reference: public System.Boolean enableAsyncCompute
      [[deprecated("Use field access instead!")]] bool& dyn_enableAsyncCompute();
      // public System.Boolean get_allowPassCulling()
      // Offset: 0x523404C
      bool get_allowPassCulling();
      // public System.Void Reset(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass pass)
      // Offset: 0x5232FA4
      void Reset(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass* pass);
    }; // UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledPassInfo
    #pragma pack(pop)
    static check_size<sizeof(RenderGraph::CompiledPassInfo), 64 + sizeof(bool)> __UnityEngine_Experimental_Rendering_RenderGraphModule_RenderGraph_CompiledPassInfoSizeCheck;
    static_assert(sizeof(RenderGraph::CompiledPassInfo) == 0x41);
    public:
    // private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphResourceRegistry m_Resources
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceRegistry* m_Resources;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceRegistry*) == 0x8);
    // private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphObjectPool m_RenderGraphPool
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphObjectPool* m_RenderGraphPool;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphObjectPool*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass> m_RenderPasses
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*>* m_RenderPasses;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle> m_RendererLists
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RendererListHandle>* m_RendererLists;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RendererListHandle>*) == 0x8);
    // private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugParams m_DebugParameters
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugParams* m_DebugParameters;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugParams*) == 0x8);
    // private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphLogger m_FrameInformationLogger
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger* m_FrameInformationLogger;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger*) == 0x8);
    // private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDefaultResources m_DefaultResources
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDefaultResources* m_DefaultResources;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDefaultResources*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.Rendering.ProfilingSampler> m_DefaultProfilingSamplers
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Rendering::ProfilingSampler*>* m_DefaultProfilingSamplers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Rendering::ProfilingSampler*>*) == 0x8);
    // private System.Boolean m_ExecutionExceptionWasRaised
    // Size: 0x1
    // Offset: 0x50
    bool m_ExecutionExceptionWasRaised;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ExecutionExceptionWasRaised and: m_RenderGraphContext
    char __padding8[0x7] = {};
    // private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphContext m_RenderGraphContext
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphContext* m_RenderGraphContext;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphContext*) == 0x8);
    // private UnityEngine.Rendering.CommandBuffer m_PreviousCommandBuffer
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Rendering::CommandBuffer* m_PreviousCommandBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CommandBuffer*) == 0x8);
    // private System.Int32 m_CurrentImmediatePassIndex
    // Size: 0x4
    // Offset: 0x68
    int m_CurrentImmediatePassIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_CurrentImmediatePassIndex and: m_ImmediateModeResourceList
    char __padding11[0x4] = {};
    // private System.Collections.Generic.List`1<System.Int32>[] m_ImmediateModeResourceList
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::System::Collections::Generic::List_1<int>*> m_ImmediateModeResourceList;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Collections::Generic::List_1<int>*>) == 0x8);
    // private UnityEngine.Rendering.DynamicArray`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledResourceInfo>[] m_CompiledResourcesInfos
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::UnityEngine::Rendering::DynamicArray_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo>*> m_CompiledResourcesInfos;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::DynamicArray_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo>*>) == 0x8);
    // private UnityEngine.Rendering.DynamicArray`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledPassInfo> m_CompiledPassInfos
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Rendering::DynamicArray_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo>* m_CompiledPassInfos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::DynamicArray_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo>*) == 0x8);
    // private System.Collections.Generic.Stack`1<System.Int32> m_CullingStack
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::Stack_1<int>* m_CullingStack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<int>*) == 0x8);
    // private System.Int32 m_ExecutionCount
    // Size: 0x4
    // Offset: 0x90
    int m_ExecutionCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_CurrentFrameIndex
    // Size: 0x4
    // Offset: 0x94
    int m_CurrentFrameIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_HasRenderGraphBegun
    // Size: 0x1
    // Offset: 0x98
    bool m_HasRenderGraphBegun;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_HasRenderGraphBegun and: m_CurrentExecutionName
    char __padding18[0x7] = {};
    // private System.String m_CurrentExecutionName
    // Size: 0x8
    // Offset: 0xA0
    ::StringW m_CurrentExecutionName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean m_RendererListCulling
    // Size: 0x1
    // Offset: 0xA8
    bool m_RendererListCulling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RendererListCulling and: m_DebugData
    char __padding20[0x7] = {};
    // private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugData> m_DebugData
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData*>* m_DebugData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData*>*) == 0x8);
    // private System.String <name>k__BackingField
    // Size: 0x8
    // Offset: 0xB8
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get static field: static public readonly System.Int32 kMaxMRTCount
    static int _get_kMaxMRTCount();
    // Set static field: static public readonly System.Int32 kMaxMRTCount
    static void _set_kMaxMRTCount(int value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph> s_RegisteredGraphs
    static ::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*>* _get_s_RegisteredGraphs();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph> s_RegisteredGraphs
    static void _set_s_RegisteredGraphs(::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*>* value);
    // Get static field: static private System.Boolean <requireDebugData>k__BackingField
    static bool _get_$requireDebugData$k__BackingField();
    // Set static field: static private System.Boolean <requireDebugData>k__BackingField
    static void _set_$requireDebugData$k__BackingField(bool value);
    // Get static field: static private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/OnGraphRegisteredDelegate onGraphRegistered
    static ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::OnGraphRegisteredDelegate* _get_onGraphRegistered();
    // Set static field: static private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/OnGraphRegisteredDelegate onGraphRegistered
    static void _set_onGraphRegistered(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::OnGraphRegisteredDelegate* value);
    // Get static field: static private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/OnGraphRegisteredDelegate onGraphUnregistered
    static ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::OnGraphRegisteredDelegate* _get_onGraphUnregistered();
    // Set static field: static private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/OnGraphRegisteredDelegate onGraphUnregistered
    static void _set_onGraphUnregistered(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::OnGraphRegisteredDelegate* value);
    // Get static field: static private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/OnExecutionRegisteredDelegate onExecutionRegistered
    static ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::OnExecutionRegisteredDelegate* _get_onExecutionRegistered();
    // Set static field: static private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/OnExecutionRegisteredDelegate onExecutionRegistered
    static void _set_onExecutionRegistered(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::OnExecutionRegisteredDelegate* value);
    // Get static field: static private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/OnExecutionRegisteredDelegate onExecutionUnregistered
    static ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::OnExecutionRegisteredDelegate* _get_onExecutionUnregistered();
    // Set static field: static private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/OnExecutionRegisteredDelegate onExecutionUnregistered
    static void _set_onExecutionUnregistered(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::OnExecutionRegisteredDelegate* value);
    // Get instance field reference: private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphResourceRegistry m_Resources
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceRegistry*& dyn_m_Resources();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphObjectPool m_RenderGraphPool
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphObjectPool*& dyn_m_RenderGraphPool();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass> m_RenderPasses
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*>*& dyn_m_RenderPasses();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle> m_RendererLists
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RendererListHandle>*& dyn_m_RendererLists();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugParams m_DebugParameters
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugParams*& dyn_m_DebugParameters();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphLogger m_FrameInformationLogger
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger*& dyn_m_FrameInformationLogger();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDefaultResources m_DefaultResources
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDefaultResources*& dyn_m_DefaultResources();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.Rendering.ProfilingSampler> m_DefaultProfilingSamplers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Rendering::ProfilingSampler*>*& dyn_m_DefaultProfilingSamplers();
    // Get instance field reference: private System.Boolean m_ExecutionExceptionWasRaised
    [[deprecated("Use field access instead!")]] bool& dyn_m_ExecutionExceptionWasRaised();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphContext m_RenderGraphContext
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphContext*& dyn_m_RenderGraphContext();
    // Get instance field reference: private UnityEngine.Rendering.CommandBuffer m_PreviousCommandBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& dyn_m_PreviousCommandBuffer();
    // Get instance field reference: private System.Int32 m_CurrentImmediatePassIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_CurrentImmediatePassIndex();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32>[] m_ImmediateModeResourceList
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::List_1<int>*>& dyn_m_ImmediateModeResourceList();
    // Get instance field reference: private UnityEngine.Rendering.DynamicArray`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledResourceInfo>[] m_CompiledResourcesInfos
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::DynamicArray_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo>*>& dyn_m_CompiledResourcesInfos();
    // Get instance field reference: private UnityEngine.Rendering.DynamicArray`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledPassInfo> m_CompiledPassInfos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::DynamicArray_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo>*& dyn_m_CompiledPassInfos();
    // Get instance field reference: private System.Collections.Generic.Stack`1<System.Int32> m_CullingStack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<int>*& dyn_m_CullingStack();
    // Get instance field reference: private System.Int32 m_ExecutionCount
    [[deprecated("Use field access instead!")]] int& dyn_m_ExecutionCount();
    // Get instance field reference: private System.Int32 m_CurrentFrameIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_CurrentFrameIndex();
    // Get instance field reference: private System.Boolean m_HasRenderGraphBegun
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasRenderGraphBegun();
    // Get instance field reference: private System.String m_CurrentExecutionName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_CurrentExecutionName();
    // Get instance field reference: private System.Boolean m_RendererListCulling
    [[deprecated("Use field access instead!")]] bool& dyn_m_RendererListCulling();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugData> m_DebugData
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData*>*& dyn_m_DebugData();
    // Get instance field reference: private System.String <name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$name$k__BackingField();
    // private System.Void set_name(System.String value)
    // Offset: 0x52307C8
    void set_name(::StringW value);
    // static System.Boolean get_requireDebugData()
    // Offset: 0x52307D0
    static bool get_requireDebugData();
    // public UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDefaultResources get_defaultResources()
    // Offset: 0x5230828
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDefaultResources* get_defaultResources();
    // public System.Void .ctor(System.String name)
    // Offset: 0x5230830
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RenderGraph* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RenderGraph*, creationType>(name)));
    }
    // public System.Void Cleanup()
    // Offset: 0x523141C
    void Cleanup();
    // public System.Void EndFrame()
    // Offset: 0x52316B8
    void EndFrame();
    // public UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle ImportTexture(UnityEngine.Rendering.RTHandle rt)
    // Offset: 0x52319FC
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle ImportTexture(::UnityEngine::Rendering::RTHandle* rt);
    // public UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle ImportBackbuffer(UnityEngine.Rendering.RenderTargetIdentifier rt)
    // Offset: 0x5231ADC
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle ImportBackbuffer(::UnityEngine::Rendering::RenderTargetIdentifier rt);
    // public UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle CreateTexture(in UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc desc)
    // Offset: 0x5231C90
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle CreateTexture(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureDesc> desc);
    // public UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder AddRenderPass(System.String passName, out PassData passData, UnityEngine.Rendering.ProfilingSampler sampler)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class PassData>
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder AddRenderPass(::StringW passName, ByRef<PassData> passData, ::UnityEngine::Rendering::ProfilingSampler* sampler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::AddRenderPass");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddRenderPass", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<PassData>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(passName), ::il2cpp_utils::ExtractIndependentType<PassData&>(), ::il2cpp_utils::ExtractType(sampler)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<PassData>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder, false>(this, ___generic__method, passName, byref(passData), sampler);
    }
    // public UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphExecution RecordAndExecute(in UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphParameters parameters)
    // Offset: 0x5231D9C
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphExecution RecordAndExecute(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphParameters> parameters);
    // System.Void Execute()
    // Offset: 0x5230354
    void Execute();
    // System.Void ClearCompiledGraph()
    // Offset: 0x523287C
    void ClearCompiledGraph();
    // private System.Void InvalidateContext()
    // Offset: 0x5232BC4
    void InvalidateContext();
    // System.Void OnPassAdded(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass pass)
    // Offset: 0x5232C10
    void OnPassAdded(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass* pass);
    // private System.Void InitResourceInfosData(UnityEngine.Rendering.DynamicArray`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledResourceInfo> resourceInfos, System.Int32 count)
    // Offset: 0x5232C74
    void InitResourceInfosData(::UnityEngine::Rendering::DynamicArray_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo>* resourceInfos, int count);
    // private System.Void InitializeCompilationData()
    // Offset: 0x5232E28
    void InitializeCompilationData();
    // private System.Void CountReferences()
    // Offset: 0x52331E8
    void CountReferences();
    // private System.Void CullUnusedPasses()
    // Offset: 0x5233A14
    void CullUnusedPasses();
    // private System.Void UpdatePassSynchronization(ref UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledPassInfo currentPassInfo, ref UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledPassInfo producerPassInfo, System.Int32 currentPassIndex, System.Int32 lastProducer, ref System.Int32 intLastSyncIndex)
    // Offset: 0x523445C
    void UpdatePassSynchronization(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo> currentPassInfo, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo> producerPassInfo, int currentPassIndex, int lastProducer, ByRef<int> intLastSyncIndex);
    // private System.Void UpdateResourceSynchronization(ref System.Int32 lastGraphicsPipeSync, ref System.Int32 lastComputePipeSync, System.Int32 currentPassIndex, in UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledResourceInfo resource)
    // Offset: 0x5234484
    void UpdateResourceSynchronization(ByRef<int> lastGraphicsPipeSync, ByRef<int> lastComputePipeSync, int currentPassIndex, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo> resource);
    // private System.Int32 GetFirstValidConsumerIndex(System.Int32 passIndex, in UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledResourceInfo info)
    // Offset: 0x5234704
    int GetFirstValidConsumerIndex(int passIndex, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo> info);
    // private System.Int32 FindTextureProducer(System.Int32 consumerPass, in UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledResourceInfo info, out System.Int32 index)
    // Offset: 0x52348A4
    int FindTextureProducer(int consumerPass, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo> info, ByRef<int> index);
    // private System.Int32 GetLatestProducerIndex(System.Int32 passIndex, in UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledResourceInfo info)
    // Offset: 0x52345B0
    int GetLatestProducerIndex(int passIndex, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo> info);
    // private System.Int32 GetLatestValidReadIndex(in UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledResourceInfo info)
    // Offset: 0x52349B8
    int GetLatestValidReadIndex(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo> info);
    // private System.Int32 GetFirstValidWriteIndex(in UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledResourceInfo info)
    // Offset: 0x5234A9C
    int GetFirstValidWriteIndex(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo> info);
    // private System.Int32 GetLatestValidWriteIndex(in UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledResourceInfo info)
    // Offset: 0x5234B90
    int GetLatestValidWriteIndex(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo> info);
    // private System.Void CreateRendererLists()
    // Offset: 0x5234C74
    void CreateRendererLists();
    // System.Boolean GetImportedFallback(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc desc, out UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle fallback)
    // Offset: 0x5235010
    bool GetImportedFallback(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureDesc desc, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> fallback);
    // private System.Void AllocateCulledPassResources(ref UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledPassInfo passInfo, System.Int32 passIndex)
    // Offset: 0x52351F4
    void AllocateCulledPassResources(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo> passInfo, int passIndex);
    // private System.Void UpdateResourceAllocationAndSynchronization()
    // Offset: 0x523574C
    void UpdateResourceAllocationAndSynchronization();
    // private System.Boolean AreRendererListsEmpty(System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle> rendererLists)
    // Offset: 0x523611C
    bool AreRendererListsEmpty(::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RendererListHandle>* rendererLists);
    // private System.Void TryCullPassAtIndex(System.Int32 passIndex)
    // Offset: 0x52363D4
    void TryCullPassAtIndex(int passIndex);
    // private System.Void CullRendererLists()
    // Offset: 0x52364DC
    void CullRendererLists();
    // System.Void CompileRenderGraph()
    // Offset: 0x5232600
    void CompileRenderGraph();
    // private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledPassInfo CompilePassImmediatly(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass pass)
    // Offset: 0x52366E4
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo CompilePassImmediatly(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass* pass);
    // private System.Void ExecutePassImmediatly(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass pass)
    // Offset: 0x5232C50
    void ExecutePassImmediatly(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass* pass);
    // private System.Void ExecuteCompiledPass(ref UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledPassInfo passInfo, System.Int32 passIndex)
    // Offset: 0x5237114
    void ExecuteCompiledPass(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo> passInfo, int passIndex);
    // private System.Void ExecuteRenderGraph()
    // Offset: 0x5232724
    void ExecuteRenderGraph();
    // private System.Void PreRenderPassSetRenderTargets(in UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledPassInfo passInfo, UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphContext rgContext)
    // Offset: 0x5237CE4
    void PreRenderPassSetRenderTargets(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo> passInfo, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphContext* rgContext);
    // private System.Void PreRenderPassExecute(in UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledPassInfo passInfo, UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphContext rgContext)
    // Offset: 0x5237808
    void PreRenderPassExecute(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo> passInfo, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphContext* rgContext);
    // private System.Void PostRenderPassExecute(ref UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledPassInfo passInfo, UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphContext rgContext)
    // Offset: 0x5237AB0
    void PostRenderPassExecute(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo> passInfo, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphContext* rgContext);
    // private System.Void ClearRenderPasses()
    // Offset: 0x5232964
    void ClearRenderPasses();
    // private System.Void ReleaseImmediateModeResources()
    // Offset: 0x5238784
    void ReleaseImmediateModeResources();
    // private System.Void LogFrameInformation()
    // Offset: 0x52323BC
    void LogFrameInformation();
    // private System.Void LogRendererListsCreation()
    // Offset: 0x52365C8
    void LogRendererListsCreation();
    // private System.Void LogRenderPassBegin(in UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph/CompiledPassInfo passInfo)
    // Offset: 0x5237490
    void LogRenderPassBegin(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo> passInfo);
    // private System.Void LogCulledPasses()
    // Offset: 0x5234068
    void LogCulledPasses();
    // private System.Void UpdateImportedResourceLifeTime(ref UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugData/ResourceDebugData data, System.Collections.Generic.List`1<System.Int32> passList)
    // Offset: 0x5238918
    void UpdateImportedResourceLifeTime(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::ResourceDebugData> data, ::System::Collections::Generic::List_1<int>* passList);
    // private System.Void GenerateDebugData()
    // Offset: 0x5238AEC
    void GenerateDebugData();
    // private System.Void CleanupDebugData()
    // Offset: 0x5239AD0
    void CleanupDebugData();
    // static private System.Void .cctor()
    // Offset: 0x5239DE0
    static void _cctor();
  }; // UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph
  #pragma pack(pop)
  static check_size<sizeof(RenderGraph), 184 + sizeof(::StringW)> __UnityEngine_Experimental_Rendering_RenderGraphModule_RenderGraphSizeCheck;
  static_assert(sizeof(RenderGraph) == 0xC0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo, "UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledPassInfo");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo, "UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledResourceInfo");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::set_name
// Il2CppName: set_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(::StringW)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::set_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "set_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::get_requireDebugData
// Il2CppName: get_requireDebugData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::get_requireDebugData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "get_requireDebugData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::get_defaultResources
// Il2CppName: get_defaultResources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDefaultResources* (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::get_defaultResources)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "get_defaultResources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::EndFrame
// Il2CppName: EndFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::EndFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "EndFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ImportTexture
// Il2CppName: ImportTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(::UnityEngine::Rendering::RTHandle*)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ImportTexture)> {
  static const MethodInfo* get() {
    static auto* rt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RTHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "ImportTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rt});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ImportBackbuffer
// Il2CppName: ImportBackbuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ImportBackbuffer)> {
  static const MethodInfo* get() {
    static auto* rt = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "ImportBackbuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rt});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CreateTexture
// Il2CppName: CreateTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureDesc>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CreateTexture)> {
  static const MethodInfo* get() {
    static auto* desc = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureDesc")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "CreateTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desc});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::AddRenderPass
// Il2CppName: AddRenderPass
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::RecordAndExecute
// Il2CppName: RecordAndExecute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphExecution (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphParameters>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::RecordAndExecute)> {
  static const MethodInfo* get() {
    static auto* parameters = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphParameters")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "RecordAndExecute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameters});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::Execute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ClearCompiledGraph
// Il2CppName: ClearCompiledGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ClearCompiledGraph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "ClearCompiledGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::InvalidateContext
// Il2CppName: InvalidateContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::InvalidateContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "InvalidateContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::OnPassAdded
// Il2CppName: OnPassAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::OnPassAdded)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "OnPassAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::InitResourceInfosData
// Il2CppName: InitResourceInfosData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(::UnityEngine::Rendering::DynamicArray_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo>*, int)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::InitResourceInfosData)> {
  static const MethodInfo* get() {
    static auto* resourceInfos = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "DynamicArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledResourceInfo")})->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "InitResourceInfosData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resourceInfos, count});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::InitializeCompilationData
// Il2CppName: InitializeCompilationData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::InitializeCompilationData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "InitializeCompilationData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CountReferences
// Il2CppName: CountReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CountReferences)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "CountReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CullUnusedPasses
// Il2CppName: CullUnusedPasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CullUnusedPasses)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "CullUnusedPasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::UpdatePassSynchronization
// Il2CppName: UpdatePassSynchronization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo>, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo>, int, int, ByRef<int>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::UpdatePassSynchronization)> {
  static const MethodInfo* get() {
    static auto* currentPassInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledPassInfo")->this_arg;
    static auto* producerPassInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledPassInfo")->this_arg;
    static auto* currentPassIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lastProducer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* intLastSyncIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "UpdatePassSynchronization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentPassInfo, producerPassInfo, currentPassIndex, lastProducer, intLastSyncIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::UpdateResourceSynchronization
// Il2CppName: UpdateResourceSynchronization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(ByRef<int>, ByRef<int>, int, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::UpdateResourceSynchronization)> {
  static const MethodInfo* get() {
    static auto* lastGraphicsPipeSync = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* lastComputePipeSync = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* currentPassIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* resource = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledResourceInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "UpdateResourceSynchronization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lastGraphicsPipeSync, lastComputePipeSync, currentPassIndex, resource});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::GetFirstValidConsumerIndex
// Il2CppName: GetFirstValidConsumerIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(int, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::GetFirstValidConsumerIndex)> {
  static const MethodInfo* get() {
    static auto* passIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledResourceInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "GetFirstValidConsumerIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passIndex, info});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::FindTextureProducer
// Il2CppName: FindTextureProducer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(int, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo>, ByRef<int>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::FindTextureProducer)> {
  static const MethodInfo* get() {
    static auto* consumerPass = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledResourceInfo")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "FindTextureProducer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{consumerPass, info, index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::GetLatestProducerIndex
// Il2CppName: GetLatestProducerIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(int, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::GetLatestProducerIndex)> {
  static const MethodInfo* get() {
    static auto* passIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledResourceInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "GetLatestProducerIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passIndex, info});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::GetLatestValidReadIndex
// Il2CppName: GetLatestValidReadIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::GetLatestValidReadIndex)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledResourceInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "GetLatestValidReadIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::GetFirstValidWriteIndex
// Il2CppName: GetFirstValidWriteIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::GetFirstValidWriteIndex)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledResourceInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "GetFirstValidWriteIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::GetLatestValidWriteIndex
// Il2CppName: GetLatestValidWriteIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledResourceInfo>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::GetLatestValidWriteIndex)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledResourceInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "GetLatestValidWriteIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CreateRendererLists
// Il2CppName: CreateRendererLists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CreateRendererLists)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "CreateRendererLists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::GetImportedFallback
// Il2CppName: GetImportedFallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureDesc, ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::GetImportedFallback)> {
  static const MethodInfo* get() {
    static auto* desc = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureDesc")->byval_arg;
    static auto* fallback = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "GetImportedFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desc, fallback});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::AllocateCulledPassResources
// Il2CppName: AllocateCulledPassResources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo>, int)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::AllocateCulledPassResources)> {
  static const MethodInfo* get() {
    static auto* passInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledPassInfo")->this_arg;
    static auto* passIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "AllocateCulledPassResources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passInfo, passIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::UpdateResourceAllocationAndSynchronization
// Il2CppName: UpdateResourceAllocationAndSynchronization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::UpdateResourceAllocationAndSynchronization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "UpdateResourceAllocationAndSynchronization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::AreRendererListsEmpty
// Il2CppName: AreRendererListsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RendererListHandle>*)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::AreRendererListsEmpty)> {
  static const MethodInfo* get() {
    static auto* rendererLists = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RendererListHandle")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "AreRendererListsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rendererLists});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::TryCullPassAtIndex
// Il2CppName: TryCullPassAtIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(int)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::TryCullPassAtIndex)> {
  static const MethodInfo* get() {
    static auto* passIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "TryCullPassAtIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CullRendererLists
// Il2CppName: CullRendererLists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CullRendererLists)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "CullRendererLists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompileRenderGraph
// Il2CppName: CompileRenderGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompileRenderGraph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "CompileRenderGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompilePassImmediatly
// Il2CppName: CompilePassImmediatly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompilePassImmediatly)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "CompilePassImmediatly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ExecutePassImmediatly
// Il2CppName: ExecutePassImmediatly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ExecutePassImmediatly)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphPass")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "ExecutePassImmediatly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ExecuteCompiledPass
// Il2CppName: ExecuteCompiledPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo>, int)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ExecuteCompiledPass)> {
  static const MethodInfo* get() {
    static auto* passInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledPassInfo")->this_arg;
    static auto* passIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "ExecuteCompiledPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passInfo, passIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ExecuteRenderGraph
// Il2CppName: ExecuteRenderGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ExecuteRenderGraph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "ExecuteRenderGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::PreRenderPassSetRenderTargets
// Il2CppName: PreRenderPassSetRenderTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo>, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphContext*)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::PreRenderPassSetRenderTargets)> {
  static const MethodInfo* get() {
    static auto* passInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledPassInfo")->this_arg;
    static auto* rgContext = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "PreRenderPassSetRenderTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passInfo, rgContext});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::PreRenderPassExecute
// Il2CppName: PreRenderPassExecute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo>, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphContext*)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::PreRenderPassExecute)> {
  static const MethodInfo* get() {
    static auto* passInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledPassInfo")->this_arg;
    static auto* rgContext = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "PreRenderPassExecute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passInfo, rgContext});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::PostRenderPassExecute
// Il2CppName: PostRenderPassExecute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo>, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphContext*)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::PostRenderPassExecute)> {
  static const MethodInfo* get() {
    static auto* passInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledPassInfo")->this_arg;
    static auto* rgContext = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "PostRenderPassExecute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passInfo, rgContext});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ClearRenderPasses
// Il2CppName: ClearRenderPasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ClearRenderPasses)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "ClearRenderPasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ReleaseImmediateModeResources
// Il2CppName: ReleaseImmediateModeResources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::ReleaseImmediateModeResources)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "ReleaseImmediateModeResources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::LogFrameInformation
// Il2CppName: LogFrameInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::LogFrameInformation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "LogFrameInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::LogRendererListsCreation
// Il2CppName: LogRendererListsCreation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::LogRendererListsCreation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "LogRendererListsCreation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::LogRenderPassBegin
// Il2CppName: LogRenderPassBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CompiledPassInfo>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::LogRenderPassBegin)> {
  static const MethodInfo* get() {
    static auto* passInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph/CompiledPassInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "LogRenderPassBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::LogCulledPasses
// Il2CppName: LogCulledPasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::LogCulledPasses)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "LogCulledPasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::UpdateImportedResourceLifeTime
// Il2CppName: UpdateImportedResourceLifeTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::ResourceDebugData>, ::System::Collections::Generic::List_1<int>*)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::UpdateImportedResourceLifeTime)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphDebugData/ResourceDebugData")->this_arg;
    static auto* passList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "UpdateImportedResourceLifeTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, passList});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::GenerateDebugData
// Il2CppName: GenerateDebugData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::GenerateDebugData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "GenerateDebugData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CleanupDebugData
// Il2CppName: CleanupDebugData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::CleanupDebugData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), "CleanupDebugData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
