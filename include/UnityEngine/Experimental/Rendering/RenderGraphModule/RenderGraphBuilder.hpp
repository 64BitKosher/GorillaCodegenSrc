// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraphPass
  class RenderGraphPass;
  // Forward declaring type: RenderGraphResourceRegistry
  class RenderGraphResourceRegistry;
  // Forward declaring type: RenderGraph
  class RenderGraph;
  // Forward declaring type: TextureHandle
  struct TextureHandle;
  // Forward declaring type: DepthAccess
  struct DepthAccess;
  // Forward declaring type: RenderFunc`1<PassData>
  template<typename PassData>
  class RenderFunc_1;
  // Forward declaring type: ResourceHandle
  struct ResourceHandle;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraphBuilder
  struct RenderGraphBuilder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder, "UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphBuilder");
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Size: 0x19
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder
  // [TokenAttribute] Offset: FFFFFFFF
  struct RenderGraphBuilder/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass m_RenderPass
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass* m_RenderPass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*) == 0x8);
    // private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphResourceRegistry m_Resources
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceRegistry* m_Resources;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceRegistry*) == 0x8);
    // private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph m_RenderGraph
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* m_RenderGraph;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*) == 0x8);
    // private System.Boolean m_Disposed
    // Size: 0x1
    // Offset: 0x18
    bool m_Disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: RenderGraphBuilder
    constexpr RenderGraphBuilder(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass* m_RenderPass_ = {}, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceRegistry* m_Resources_ = {}, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* m_RenderGraph_ = {}, bool m_Disposed_ = {}) noexcept : m_RenderPass{m_RenderPass_}, m_Resources{m_Resources_}, m_RenderGraph{m_RenderGraph_}, m_Disposed{m_Disposed_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass m_RenderPass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*& dyn_m_RenderPass();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphResourceRegistry m_Resources
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceRegistry*& dyn_m_Resources();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph m_RenderGraph
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*& dyn_m_RenderGraph();
    // Get instance field reference: private System.Boolean m_Disposed
    [[deprecated("Use field access instead!")]] bool& dyn_m_Disposed();
    // public UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle UseColorBuffer(in UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle input, System.Int32 index)
    // Offset: 0x523A0CC
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle UseColorBuffer(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> input, int index);
    // public UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle UseDepthBuffer(in UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle input, UnityEngine.Experimental.Rendering.RenderGraphModule.DepthAccess flags)
    // Offset: 0x523A278
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle UseDepthBuffer(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> input, ::UnityEngine::Experimental::Rendering::RenderGraphModule::DepthAccess flags);
    // public UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle ReadTexture(in UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle input)
    // Offset: 0x523A3E0
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle ReadTexture(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> input);
    // public UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle WriteTexture(in UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle input)
    // Offset: 0x523A35C
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle WriteTexture(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> input);
    // public System.Void SetRenderFunc(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderFunc`1<PassData> renderFunc)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class PassData>
    void SetRenderFunc(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderFunc_1<PassData>* renderFunc) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::SetRenderFunc");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetRenderFunc", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<PassData>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderFunc)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<PassData>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, renderFunc);
    }
    // public System.Void AllowPassCulling(System.Boolean value)
    // Offset: 0x523A654
    void AllowPassCulling(bool value);
    // public System.Void Dispose()
    // Offset: 0x523A680
    void Dispose();
    // System.Void .ctor(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass renderPass, UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphResourceRegistry resources, UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph)
    // Offset: 0x523A6BC
    RenderGraphBuilder(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass* renderPass, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceRegistry* resources, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph);
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x523A688
    void Dispose(bool disposing);
    // private System.Void CheckResource(in UnityEngine.Experimental.Rendering.RenderGraphModule.ResourceHandle res, System.Boolean dontCheckTransientReadWrite)
    // Offset: 0x523A114
    void CheckResource(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle> res, bool dontCheckTransientReadWrite);
  }; // UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder
  #pragma pack(pop)
  static check_size<sizeof(RenderGraphBuilder), 24 + sizeof(bool)> __UnityEngine_Experimental_Rendering_RenderGraphModule_RenderGraphBuilderSizeCheck;
  static_assert(sizeof(RenderGraphBuilder) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::UseColorBuffer
// Il2CppName: UseColorBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>, int)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::UseColorBuffer)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder), "UseColorBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::UseDepthBuffer
// Il2CppName: UseDepthBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>, ::UnityEngine::Experimental::Rendering::RenderGraphModule::DepthAccess)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::UseDepthBuffer)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->this_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "DepthAccess")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder), "UseDepthBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::ReadTexture
// Il2CppName: ReadTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::ReadTexture)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder), "ReadTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::WriteTexture
// Il2CppName: WriteTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::WriteTexture)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder), "WriteTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::SetRenderFunc
// Il2CppName: SetRenderFunc
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::AllowPassCulling
// Il2CppName: AllowPassCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::*)(bool)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::AllowPassCulling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder), "AllowPassCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::RenderGraphBuilder
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::*)(bool)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::CheckResource
// Il2CppName: CheckResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle>, bool)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder::CheckResource)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "ResourceHandle")->this_arg;
    static auto* dontCheckTransientReadWrite = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphBuilder), "CheckResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res, dontCheckTransientReadWrite});
  }
};
