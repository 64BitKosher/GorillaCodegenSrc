// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass
#include "UnityEngine/Experimental/Rendering/RenderGraphModule/RenderGraphPass.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderFunc`1<PassData>
  template<typename PassData>
  class RenderFunc_1;
  // Forward declaring type: RenderGraphContext
  class RenderGraphContext;
  // Forward declaring type: RenderGraphObjectPool
  class RenderGraphObjectPool;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraphPass`1<PassData>
  template<typename PassData>
  class RenderGraphPass_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass_1, "UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphPass`1");
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  template<typename PassData>
  class RenderGraphPass_1 : public ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass {
    public:
    public:
    // PassData data
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    PassData data;
    // UnityEngine.Experimental.Rendering.RenderGraphModule.RenderFunc`1<PassData> renderFunc
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderFunc_1<PassData>* renderFunc;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderFunc_1<PassData>*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: PassData data
    [[deprecated("Use field access instead!")]] PassData& dyn_data() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass_1::dyn_data");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "data"))->offset;
      return *reinterpret_cast<PassData*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderFunc`1<PassData> renderFunc
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderFunc_1<PassData>*& dyn_renderFunc() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass_1::dyn_renderFunc");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderFunc"))->offset;
      return *reinterpret_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderFunc_1<PassData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void Initialize(System.Int32 passIndex, PassData passData, System.String passName, UnityEngine.Rendering.ProfilingSampler sampler)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Initialize(int passIndex, PassData passData, ::StringW passName, ::UnityEngine::Rendering::ProfilingSampler* sampler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass_1::Initialize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(passIndex), ::il2cpp_utils::ExtractType(passData), ::il2cpp_utils::ExtractType(passName), ::il2cpp_utils::ExtractType(sampler)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, passIndex, passData, passName, sampler);
    }
    // public override System.Void Execute(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphContext renderGraphContext)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass
    // Base method: System.Void RenderGraphPass::Execute(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphContext renderGraphContext)
    void Execute(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphContext* renderGraphContext) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass_1::Execute");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, renderGraphContext);
    }
    // public override System.Void Release(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphObjectPool pool)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass
    // Base method: System.Void RenderGraphPass::Release(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphObjectPool pool)
    void Release(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphObjectPool* pool) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass_1::Release");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pool);
    }
    // public override System.Boolean HasRenderFunc()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass
    // Base method: System.Boolean RenderGraphPass::HasRenderFunc()
    bool HasRenderFunc() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass_1::HasRenderFunc");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass
    // Base method: System.Void RenderGraphPass::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RenderGraphPass_1<PassData>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RenderGraphPass_1<PassData>*, creationType>()));
    }
  }; // UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass`1
  // Could not write size check! Type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
