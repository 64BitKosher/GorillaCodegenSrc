// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphResourceType
#include "UnityEngine/Experimental/Rendering/RenderGraphModule/RenderGraphResourceType.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Completed includes
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: ResourceHandle
  struct ResourceHandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle, "UnityEngine.Experimental.Rendering.RenderGraphModule", "ResourceHandle");
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Experimental.Rendering.RenderGraphModule.ResourceHandle
  // [TokenAttribute] Offset: FFFFFFFF
  struct ResourceHandle/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.UInt32 m_Value
    // Size: 0x4
    // Offset: 0x0
    uint m_Value;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphResourceType <type>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceType type;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceType) == 0x4);
    public:
    // Creating value type constructor for type: ResourceHandle
    constexpr ResourceHandle(uint m_Value_ = {}, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceType type_ = {}) noexcept : m_Value{m_Value_}, type{type_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static private System.UInt32 kValidityMask
    static constexpr const uint kValidityMask = 4294901760u;
    // Get static field: static private System.UInt32 kValidityMask
    static uint _get_kValidityMask();
    // Set static field: static private System.UInt32 kValidityMask
    static void _set_kValidityMask(uint value);
    // static field const value: static private System.UInt32 kIndexMask
    static constexpr const uint kIndexMask = 65535u;
    // Get static field: static private System.UInt32 kIndexMask
    static uint _get_kIndexMask();
    // Set static field: static private System.UInt32 kIndexMask
    static void _set_kIndexMask(uint value);
    // Get static field: static private System.UInt32 s_CurrentValidBit
    static uint _get_s_CurrentValidBit();
    // Set static field: static private System.UInt32 s_CurrentValidBit
    static void _set_s_CurrentValidBit(uint value);
    // Get static field: static private System.UInt32 s_SharedResourceValidBit
    static uint _get_s_SharedResourceValidBit();
    // Set static field: static private System.UInt32 s_SharedResourceValidBit
    static void _set_s_SharedResourceValidBit(uint value);
    // Get instance field reference: private System.UInt32 m_Value
    [[deprecated("Use field access instead!")]] uint& dyn_m_Value();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphResourceType <type>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceType& dyn_$type$k__BackingField();
    // public System.Int32 get_index()
    // Offset: 0x523BC1C
    int get_index();
    // public UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphResourceType get_type()
    // Offset: 0x523C4F4
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceType get_type();
    // private System.Void set_type(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphResourceType value)
    // Offset: 0x523C4FC
    void set_type(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceType value);
    // public System.Int32 get_iType()
    // Offset: 0x523B078
    int get_iType();
    // System.Void .ctor(System.Int32 value, UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphResourceType type, System.Boolean shared)
    // Offset: 0x523C504
    ResourceHandle(int value, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceType type, bool shared);
    // public System.Boolean IsValid()
    // Offset: 0x523C594
    bool IsValid();
    // static public System.Void NewFrame(System.Int32 executionIndex)
    // Offset: 0x523B9A4
    static void NewFrame(int executionIndex);
    // static private System.Void .cctor()
    // Offset: 0x523C634
    static void _cctor();
  }; // UnityEngine.Experimental.Rendering.RenderGraphModule.ResourceHandle
  #pragma pack(pop)
  static check_size<sizeof(ResourceHandle), 4 + sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceType)> __UnityEngine_Experimental_Rendering_RenderGraphModule_ResourceHandleSizeCheck;
  static_assert(sizeof(ResourceHandle) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::get_index
// Il2CppName: get_index
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::get_index)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle), "get_index", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::get_type
// Il2CppName: get_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceType (UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::get_type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle), "get_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::set_type
// Il2CppName: set_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphResourceType)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::set_type)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphResourceType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle), "set_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::get_iType
// Il2CppName: get_iType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::get_iType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle), "get_iType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::ResourceHandle
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::NewFrame
// Il2CppName: NewFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::NewFrame)> {
  static const MethodInfo* get() {
    static auto* executionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle), "NewFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{executionIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
