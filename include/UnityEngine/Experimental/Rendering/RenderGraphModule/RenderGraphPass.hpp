// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle
#include "UnityEngine/Experimental/Rendering/RenderGraphModule/TextureHandle.hpp"
// Including type: UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle
#include "UnityEngine/Experimental/Rendering/RenderGraphModule/RendererListHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderFunc`1<PassData>
  template<typename PassData>
  class RenderFunc_1;
  // Forward declaring type: RenderGraphContext
  class RenderGraphContext;
  // Forward declaring type: RenderGraphObjectPool
  class RenderGraphObjectPool;
  // Forward declaring type: DepthAccess
  struct DepthAccess;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraphPass
  class RenderGraphPass;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*, "UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphPass");
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  class RenderGraphPass : public ::Il2CppObject {
    public:
    public:
    // private System.String <name>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 <index>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: index and: customSampler
    char __padding1[0x4] = {};
    // private UnityEngine.Rendering.ProfilingSampler <customSampler>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rendering::ProfilingSampler* customSampler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // private System.Boolean <enableAsyncCompute>k__BackingField
    // Size: 0x1
    // Offset: 0x28
    bool enableAsyncCompute;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <allowPassCulling>k__BackingField
    // Size: 0x1
    // Offset: 0x29
    bool allowPassCulling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allowPassCulling and: depthBuffer
    char __padding4[0x2] = {};
    // private UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle <depthBuffer>k__BackingField
    // Size: 0x8
    // Offset: 0x2C
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle depthBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle) == 0x8);
    // Padding between fields: depthBuffer and: colorBuffers
    char __padding5[0x4] = {};
    // private UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle[] <colorBuffers>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> colorBuffers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>) == 0x8);
    // private System.Int32 <colorBufferMaxIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x40
    int colorBufferMaxIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <refCount>k__BackingField
    // Size: 0x4
    // Offset: 0x44
    int refCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <generateDebugData>k__BackingField
    // Size: 0x1
    // Offset: 0x48
    bool generateDebugData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <allowRendererListCulling>k__BackingField
    // Size: 0x1
    // Offset: 0x49
    bool allowRendererListCulling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allowRendererListCulling and: resourceReadLists
    char __padding10[0x6] = {};
    // public System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.ResourceHandle>[] resourceReadLists
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle>*> resourceReadLists;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle>*>) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.ResourceHandle>[] resourceWriteLists
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle>*> resourceWriteLists;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle>*>) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.ResourceHandle>[] transientResourceList
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle>*> transientResourceList;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle>*>) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle> usedRendererListList
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RendererListHandle>* usedRendererListList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RendererListHandle>*) == 0x8);
    public:
    // Get instance field reference: private System.String <name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$name$k__BackingField();
    // Get instance field reference: private System.Int32 <index>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$index$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler <customSampler>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_$customSampler$k__BackingField();
    // Get instance field reference: private System.Boolean <enableAsyncCompute>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$enableAsyncCompute$k__BackingField();
    // Get instance field reference: private System.Boolean <allowPassCulling>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$allowPassCulling$k__BackingField();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle <depthBuffer>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle& dyn_$depthBuffer$k__BackingField();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle[] <colorBuffers>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle>& dyn_$colorBuffers$k__BackingField();
    // Get instance field reference: private System.Int32 <colorBufferMaxIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$colorBufferMaxIndex$k__BackingField();
    // Get instance field reference: private System.Int32 <refCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$refCount$k__BackingField();
    // Get instance field reference: private System.Boolean <generateDebugData>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$generateDebugData$k__BackingField();
    // Get instance field reference: private System.Boolean <allowRendererListCulling>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$allowRendererListCulling$k__BackingField();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.ResourceHandle>[] resourceReadLists
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle>*>& dyn_resourceReadLists();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.ResourceHandle>[] resourceWriteLists
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle>*>& dyn_resourceWriteLists();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.ResourceHandle>[] transientResourceList
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle>*>& dyn_transientResourceList();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle> usedRendererListList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RendererListHandle>*& dyn_usedRendererListList();
    // public UnityEngine.Experimental.Rendering.RenderGraphModule.RenderFunc`1<PassData> GetExecuteDelegate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class PassData>
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderFunc_1<PassData>* GetExecuteDelegate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::GetExecuteDelegate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExecuteDelegate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<PassData>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<PassData>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderFunc_1<PassData>*, false>(this, ___generic__method);
    }
    // public System.Void Execute(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphContext renderGraphContext)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Execute(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphContext* renderGraphContext);
    // public System.Void Release(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphObjectPool pool)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Release(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphObjectPool* pool);
    // public System.Boolean HasRenderFunc()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool HasRenderFunc();
    // public System.String get_name()
    // Offset: 0x523AAF0
    ::StringW get_name();
    // protected System.Void set_name(System.String value)
    // Offset: 0x523AAF8
    void set_name(::StringW value);
    // public System.Int32 get_index()
    // Offset: 0x523AB00
    int get_index();
    // protected System.Void set_index(System.Int32 value)
    // Offset: 0x523AB08
    void set_index(int value);
    // public UnityEngine.Rendering.ProfilingSampler get_customSampler()
    // Offset: 0x523AB10
    ::UnityEngine::Rendering::ProfilingSampler* get_customSampler();
    // protected System.Void set_customSampler(UnityEngine.Rendering.ProfilingSampler value)
    // Offset: 0x523AB18
    void set_customSampler(::UnityEngine::Rendering::ProfilingSampler* value);
    // public System.Boolean get_enableAsyncCompute()
    // Offset: 0x523AB20
    bool get_enableAsyncCompute();
    // protected System.Void set_enableAsyncCompute(System.Boolean value)
    // Offset: 0x523AB28
    void set_enableAsyncCompute(bool value);
    // public System.Boolean get_allowPassCulling()
    // Offset: 0x523AB34
    bool get_allowPassCulling();
    // protected System.Void set_allowPassCulling(System.Boolean value)
    // Offset: 0x523AB3C
    void set_allowPassCulling(bool value);
    // public UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle get_depthBuffer()
    // Offset: 0x523AB48
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle get_depthBuffer();
    // protected System.Void set_depthBuffer(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle value)
    // Offset: 0x523AB50
    void set_depthBuffer(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle value);
    // public UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle[] get_colorBuffers()
    // Offset: 0x523AB58
    ::ArrayW<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> get_colorBuffers();
    // public System.Int32 get_colorBufferMaxIndex()
    // Offset: 0x523AB60
    int get_colorBufferMaxIndex();
    // protected System.Void set_colorBufferMaxIndex(System.Int32 value)
    // Offset: 0x523AB68
    void set_colorBufferMaxIndex(int value);
    // protected System.Void set_refCount(System.Int32 value)
    // Offset: 0x523AB70
    void set_refCount(int value);
    // public System.Boolean get_generateDebugData()
    // Offset: 0x523AB78
    bool get_generateDebugData();
    // protected System.Void set_generateDebugData(System.Boolean value)
    // Offset: 0x523AB80
    void set_generateDebugData(bool value);
    // public System.Boolean get_allowRendererListCulling()
    // Offset: 0x523AB8C
    bool get_allowRendererListCulling();
    // protected System.Void set_allowRendererListCulling(System.Boolean value)
    // Offset: 0x523AB94
    void set_allowRendererListCulling(bool value);
    // public System.Void .ctor()
    // Offset: 0x523ABA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RenderGraphPass* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RenderGraphPass*, creationType>()));
    }
    // public System.Void Clear()
    // Offset: 0x523AE58
    void Clear();
    // public System.Void AddResourceWrite(in UnityEngine.Experimental.Rendering.RenderGraphModule.ResourceHandle res)
    // Offset: 0x523A58C
    void AddResourceWrite(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle> res);
    // public System.Void AddResourceRead(in UnityEngine.Experimental.Rendering.RenderGraphModule.ResourceHandle res)
    // Offset: 0x523A4C4
    void AddResourceRead(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle> res);
    // public System.Void AllowPassCulling(System.Boolean value)
    // Offset: 0x523A674
    void AllowPassCulling(bool value);
    // public System.Void SetColorBuffer(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle resource, System.Int32 index)
    // Offset: 0x523A1C4
    void SetColorBuffer(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle resource, int index);
    // public System.Void SetDepthBuffer(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle resource, UnityEngine.Experimental.Rendering.RenderGraphModule.DepthAccess flags)
    // Offset: 0x523A39C
    void SetDepthBuffer(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle resource, ::UnityEngine::Experimental::Rendering::RenderGraphModule::DepthAccess flags);
  }; // UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphPass
  #pragma pack(pop)
  static check_size<sizeof(RenderGraphPass), 104 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RendererListHandle>*)> __UnityEngine_Experimental_Rendering_RenderGraphModule_RenderGraphPassSizeCheck;
  static_assert(sizeof(RenderGraphPass) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::GetExecuteDelegate
// Il2CppName: GetExecuteDelegate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphContext*)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::Execute)> {
  static const MethodInfo* get() {
    static auto* renderGraphContext = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraphContext});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphObjectPool*)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::Release)> {
  static const MethodInfo* get() {
    static auto* pool = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphObjectPool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pool});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::HasRenderFunc
// Il2CppName: HasRenderFunc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::HasRenderFunc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "HasRenderFunc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_name
// Il2CppName: set_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(::StringW)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "set_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_index
// Il2CppName: get_index
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_index)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "get_index", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_index
// Il2CppName: set_index
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(int)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_index)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "set_index", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_customSampler
// Il2CppName: get_customSampler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::ProfilingSampler* (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_customSampler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "get_customSampler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_customSampler
// Il2CppName: set_customSampler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(::UnityEngine::Rendering::ProfilingSampler*)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_customSampler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ProfilingSampler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "set_customSampler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_enableAsyncCompute
// Il2CppName: get_enableAsyncCompute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_enableAsyncCompute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "get_enableAsyncCompute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_enableAsyncCompute
// Il2CppName: set_enableAsyncCompute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(bool)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_enableAsyncCompute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "set_enableAsyncCompute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_allowPassCulling
// Il2CppName: get_allowPassCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_allowPassCulling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "get_allowPassCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_allowPassCulling
// Il2CppName: set_allowPassCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(bool)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_allowPassCulling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "set_allowPassCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_depthBuffer
// Il2CppName: get_depthBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_depthBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "get_depthBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_depthBuffer
// Il2CppName: set_depthBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_depthBuffer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "set_depthBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_colorBuffers
// Il2CppName: get_colorBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle> (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_colorBuffers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "get_colorBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_colorBufferMaxIndex
// Il2CppName: get_colorBufferMaxIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_colorBufferMaxIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "get_colorBufferMaxIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_colorBufferMaxIndex
// Il2CppName: set_colorBufferMaxIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(int)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_colorBufferMaxIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "set_colorBufferMaxIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_refCount
// Il2CppName: set_refCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(int)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_refCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "set_refCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_generateDebugData
// Il2CppName: get_generateDebugData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_generateDebugData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "get_generateDebugData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_generateDebugData
// Il2CppName: set_generateDebugData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(bool)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_generateDebugData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "set_generateDebugData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_allowRendererListCulling
// Il2CppName: get_allowRendererListCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::get_allowRendererListCulling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "get_allowRendererListCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_allowRendererListCulling
// Il2CppName: set_allowRendererListCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(bool)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::set_allowRendererListCulling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "set_allowRendererListCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::AddResourceWrite
// Il2CppName: AddResourceWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::AddResourceWrite)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "ResourceHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "AddResourceWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::AddResourceRead
// Il2CppName: AddResourceRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(ByRef<::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle>)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::AddResourceRead)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "ResourceHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "AddResourceRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::AllowPassCulling
// Il2CppName: AllowPassCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(bool)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::AllowPassCulling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "AllowPassCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::SetColorBuffer
// Il2CppName: SetColorBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle, int)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::SetColorBuffer)> {
  static const MethodInfo* get() {
    static auto* resource = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "SetColorBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resource, index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::SetDepthBuffer
// Il2CppName: SetDepthBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle, ::UnityEngine::Experimental::Rendering::RenderGraphModule::DepthAccess)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass::SetDepthBuffer)> {
  static const MethodInfo* get() {
    static auto* resource = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "DepthAccess")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphPass*), "SetDepthBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resource, flags});
  }
};
