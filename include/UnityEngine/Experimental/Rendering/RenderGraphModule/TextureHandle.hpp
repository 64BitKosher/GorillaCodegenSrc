// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Experimental.Rendering.RenderGraphModule.ResourceHandle
#include "UnityEngine/Experimental/Rendering/RenderGraphModule/ResourceHandle.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: RenderTargetIdentifier
  struct RenderTargetIdentifier;
  // Forward declaring type: RTHandle
  class RTHandle;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: TextureHandle
  struct TextureHandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle, "UnityEngine.Experimental.Rendering.RenderGraphModule", "TextureHandle");
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  struct TextureHandle/*, public ::System::ValueType*/ {
    public:
    public:
    // UnityEngine.Experimental.Rendering.RenderGraphModule.ResourceHandle handle
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle handle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle) == 0x8);
    public:
    // Creating value type constructor for type: TextureHandle
    constexpr TextureHandle(::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle
    constexpr operator ::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle() const noexcept {
      return handle;
    }
    // Get static field: static private UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle s_NullHandle
    static ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle _get_s_NullHandle();
    // Set static field: static private UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle s_NullHandle
    static void _set_s_NullHandle(::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle value);
    // Get instance field reference: UnityEngine.Experimental.Rendering.RenderGraphModule.ResourceHandle handle
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle& dyn_handle();
    // static public UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle get_nullHandle()
    // Offset: 0x523C734
    static ::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle get_nullHandle();
    // System.Void .ctor(System.Int32 handle, System.Boolean shared)
    // Offset: 0x523BD38
    TextureHandle(int handle, bool shared);
    // public System.Boolean IsValid()
    // Offset: 0x52351F0
    bool IsValid();
  }; // UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle
  #pragma pack(pop)
  static check_size<sizeof(TextureHandle), 0 + sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::ResourceHandle)> __UnityEngine_Experimental_Rendering_RenderGraphModule_TextureHandleSizeCheck;
  static_assert(sizeof(TextureHandle) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle::get_nullHandle
// Il2CppName: get_nullHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle (*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle::get_nullHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle), "get_nullHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle::TextureHandle
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle::IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::TextureHandle), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
