// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraphLogger
  class RenderGraphLogger;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraphLogIndent
  struct RenderGraphLogIndent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogIndent, "UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphLogIndent");
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Size: 0x11
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphLogIndent
  // [TokenAttribute] Offset: FFFFFFFF
  struct RenderGraphLogIndent/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Int32 m_Indentation
    // Size: 0x4
    // Offset: 0x0
    int m_Indentation;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_Indentation and: m_Logger
    char __padding0[0x4] = {};
    // private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphLogger m_Logger
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger* m_Logger;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger*) == 0x8);
    // private System.Boolean m_Disposed
    // Size: 0x1
    // Offset: 0x10
    bool m_Disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: RenderGraphLogIndent
    constexpr RenderGraphLogIndent(int m_Indentation_ = {}, ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger* m_Logger_ = {}, bool m_Disposed_ = {}) noexcept : m_Indentation{m_Indentation_}, m_Logger{m_Logger_}, m_Disposed{m_Disposed_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Int32 m_Indentation
    [[deprecated("Use field access instead!")]] int& dyn_m_Indentation();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphLogger m_Logger
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger*& dyn_m_Logger();
    // Get instance field reference: private System.Boolean m_Disposed
    [[deprecated("Use field access instead!")]] bool& dyn_m_Disposed();
    // public System.Void .ctor(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphLogger logger, System.Int32 indentation)
    // Offset: 0x52377C8
    RenderGraphLogIndent(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogger* logger, int indentation);
    // public System.Void Dispose()
    // Offset: 0x523A7F8
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x523A828
    void Dispose(bool disposing);
  }; // UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphLogIndent
  #pragma pack(pop)
  static check_size<sizeof(RenderGraphLogIndent), 16 + sizeof(bool)> __UnityEngine_Experimental_Rendering_RenderGraphModule_RenderGraphLogIndentSizeCheck;
  static_assert(sizeof(RenderGraphLogIndent) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogIndent::RenderGraphLogIndent
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogIndent::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogIndent::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogIndent::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogIndent), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogIndent::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogIndent::*)(bool)>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogIndent::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphLogIndent), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
