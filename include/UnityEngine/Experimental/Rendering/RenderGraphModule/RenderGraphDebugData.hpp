// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraphDebugData
  class RenderGraphDebugData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData*, "UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphDebugData");
// Type namespace: UnityEngine.Experimental.Rendering.RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugData
  // [TokenAttribute] Offset: FFFFFFFF
  class RenderGraphDebugData : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::PassDebugData
    struct PassDebugData;
    // Nested type: ::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::ResourceDebugData
    struct ResourceDebugData;
    // Size: 0x25
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugData/PassDebugData
    // [TokenAttribute] Offset: FFFFFFFF
    // [DebuggerDisplayAttribute] Offset: FFFFFFFF
    struct PassDebugData/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String name
      // Size: 0x8
      // Offset: 0x0
      ::StringW name;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.Collections.Generic.List`1<System.Int32>[] resourceReadLists
      // Size: 0x8
      // Offset: 0x8
      ::ArrayW<::System::Collections::Generic::List_1<int>*> resourceReadLists;
      // Field size check
      static_assert(sizeof(::ArrayW<::System::Collections::Generic::List_1<int>*>) == 0x8);
      // public System.Collections.Generic.List`1<System.Int32>[] resourceWriteLists
      // Size: 0x8
      // Offset: 0x10
      ::ArrayW<::System::Collections::Generic::List_1<int>*> resourceWriteLists;
      // Field size check
      static_assert(sizeof(::ArrayW<::System::Collections::Generic::List_1<int>*>) == 0x8);
      // public System.Boolean culled
      // Size: 0x1
      // Offset: 0x18
      bool culled;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean async
      // Size: 0x1
      // Offset: 0x19
      bool async;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: async and: syncToPassIndex
      char __padding4[0x2] = {};
      // public System.Int32 syncToPassIndex
      // Size: 0x4
      // Offset: 0x1C
      int syncToPassIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 syncFromPassIndex
      // Size: 0x4
      // Offset: 0x20
      int syncFromPassIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Boolean generateDebugData
      // Size: 0x1
      // Offset: 0x24
      bool generateDebugData;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: PassDebugData
      constexpr PassDebugData(::StringW name_ = {}, ::ArrayW<::System::Collections::Generic::List_1<int>*> resourceReadLists_ = ::ArrayW<::System::Collections::Generic::List_1<int>*>(static_cast<void*>(nullptr)), ::ArrayW<::System::Collections::Generic::List_1<int>*> resourceWriteLists_ = ::ArrayW<::System::Collections::Generic::List_1<int>*>(static_cast<void*>(nullptr)), bool culled_ = {}, bool async_ = {}, int syncToPassIndex_ = {}, int syncFromPassIndex_ = {}, bool generateDebugData_ = {}) noexcept : name{name_}, resourceReadLists{resourceReadLists_}, resourceWriteLists{resourceWriteLists_}, culled{culled_}, async{async_}, syncToPassIndex{syncToPassIndex_}, syncFromPassIndex{syncFromPassIndex_}, generateDebugData{generateDebugData_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String name
      [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
      // Get instance field reference: public System.Collections.Generic.List`1<System.Int32>[] resourceReadLists
      [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::List_1<int>*>& dyn_resourceReadLists();
      // Get instance field reference: public System.Collections.Generic.List`1<System.Int32>[] resourceWriteLists
      [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::List_1<int>*>& dyn_resourceWriteLists();
      // Get instance field reference: public System.Boolean culled
      [[deprecated("Use field access instead!")]] bool& dyn_culled();
      // Get instance field reference: public System.Boolean async
      [[deprecated("Use field access instead!")]] bool& dyn_async();
      // Get instance field reference: public System.Int32 syncToPassIndex
      [[deprecated("Use field access instead!")]] int& dyn_syncToPassIndex();
      // Get instance field reference: public System.Int32 syncFromPassIndex
      [[deprecated("Use field access instead!")]] int& dyn_syncFromPassIndex();
      // Get instance field reference: public System.Boolean generateDebugData
      [[deprecated("Use field access instead!")]] bool& dyn_generateDebugData();
    }; // UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugData/PassDebugData
    #pragma pack(pop)
    static check_size<sizeof(RenderGraphDebugData::PassDebugData), 36 + sizeof(bool)> __UnityEngine_Experimental_Rendering_RenderGraphModule_RenderGraphDebugData_PassDebugDataSizeCheck;
    static_assert(sizeof(RenderGraphDebugData::PassDebugData) == 0x25);
    // Size: 0x28
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugData/ResourceDebugData
    // [TokenAttribute] Offset: FFFFFFFF
    // [DebuggerDisplayAttribute] Offset: FFFFFFFF
    struct ResourceDebugData/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String name
      // Size: 0x8
      // Offset: 0x0
      ::StringW name;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.Boolean imported
      // Size: 0x1
      // Offset: 0x8
      bool imported;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: imported and: creationPassIndex
      char __padding1[0x3] = {};
      // public System.Int32 creationPassIndex
      // Size: 0x4
      // Offset: 0xC
      int creationPassIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 releasePassIndex
      // Size: 0x4
      // Offset: 0x10
      int releasePassIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Padding between fields: releasePassIndex and: consumerList
      char __padding3[0x4] = {};
      // public System.Collections.Generic.List`1<System.Int32> consumerList
      // Size: 0x8
      // Offset: 0x18
      ::System::Collections::Generic::List_1<int>* consumerList;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
      // public System.Collections.Generic.List`1<System.Int32> producerList
      // Size: 0x8
      // Offset: 0x20
      ::System::Collections::Generic::List_1<int>* producerList;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
      public:
      // Creating value type constructor for type: ResourceDebugData
      constexpr ResourceDebugData(::StringW name_ = {}, bool imported_ = {}, int creationPassIndex_ = {}, int releasePassIndex_ = {}, ::System::Collections::Generic::List_1<int>* consumerList_ = {}, ::System::Collections::Generic::List_1<int>* producerList_ = {}) noexcept : name{name_}, imported{imported_}, creationPassIndex{creationPassIndex_}, releasePassIndex{releasePassIndex_}, consumerList{consumerList_}, producerList{producerList_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String name
      [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
      // Get instance field reference: public System.Boolean imported
      [[deprecated("Use field access instead!")]] bool& dyn_imported();
      // Get instance field reference: public System.Int32 creationPassIndex
      [[deprecated("Use field access instead!")]] int& dyn_creationPassIndex();
      // Get instance field reference: public System.Int32 releasePassIndex
      [[deprecated("Use field access instead!")]] int& dyn_releasePassIndex();
      // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> consumerList
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_consumerList();
      // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> producerList
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_producerList();
    }; // UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugData/ResourceDebugData
    #pragma pack(pop)
    static check_size<sizeof(RenderGraphDebugData::ResourceDebugData), 32 + sizeof(::System::Collections::Generic::List_1<int>*)> __UnityEngine_Experimental_Rendering_RenderGraphModule_RenderGraphDebugData_ResourceDebugDataSizeCheck;
    static_assert(sizeof(RenderGraphDebugData::ResourceDebugData) == 0x28);
    public:
    // public System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugData/PassDebugData> passList
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::PassDebugData>* passList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::PassDebugData>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugData/ResourceDebugData>[] resourceLists
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::ResourceDebugData>*> resourceLists;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::ResourceDebugData>*>) == 0x8);
    public:
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugData/PassDebugData> passList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::PassDebugData>*& dyn_passList();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugData/ResourceDebugData>[] resourceLists
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::ResourceDebugData>*>& dyn_resourceLists();
    // public System.Void Clear()
    // Offset: 0x5230568
    void Clear();
    // public System.Void .ctor()
    // Offset: 0x5230710
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RenderGraphDebugData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RenderGraphDebugData*, creationType>()));
    }
  }; // UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDebugData
  #pragma pack(pop)
  static check_size<sizeof(RenderGraphDebugData), 24 + sizeof(::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::ResourceDebugData>*>)> __UnityEngine_Experimental_Rendering_RenderGraphModule_RenderGraphDebugDataSizeCheck;
  static_assert(sizeof(RenderGraphDebugData) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::ResourceDebugData, "UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphDebugData/ResourceDebugData");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::PassDebugData, "UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraphDebugData/PassDebugData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::*)()>(&UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraphDebugData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
