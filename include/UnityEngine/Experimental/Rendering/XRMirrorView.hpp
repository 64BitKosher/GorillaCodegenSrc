// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRDisplaySubsystem
  class XRDisplaySubsystem;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: XRMirrorView
  class XRMirrorView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::Rendering::XRMirrorView);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::XRMirrorView*, "UnityEngine.Experimental.Rendering", "XRMirrorView");
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Experimental.Rendering.XRMirrorView
  // [TokenAttribute] Offset: FFFFFFFF
  class XRMirrorView : public ::Il2CppObject {
    public:
    // Get static field: static private readonly UnityEngine.MaterialPropertyBlock s_MirrorViewMaterialProperty
    static ::UnityEngine::MaterialPropertyBlock* _get_s_MirrorViewMaterialProperty();
    // Set static field: static private readonly UnityEngine.MaterialPropertyBlock s_MirrorViewMaterialProperty
    static void _set_s_MirrorViewMaterialProperty(::UnityEngine::MaterialPropertyBlock* value);
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler k_MirrorViewProfilingSampler
    static ::UnityEngine::Rendering::ProfilingSampler* _get_k_MirrorViewProfilingSampler();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler k_MirrorViewProfilingSampler
    static void _set_k_MirrorViewProfilingSampler(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get static field: static private readonly System.Int32 k_SourceTex
    static int _get_k_SourceTex();
    // Set static field: static private readonly System.Int32 k_SourceTex
    static void _set_k_SourceTex(int value);
    // Get static field: static private readonly System.Int32 k_SourceTexArraySlice
    static int _get_k_SourceTexArraySlice();
    // Set static field: static private readonly System.Int32 k_SourceTexArraySlice
    static void _set_k_SourceTexArraySlice(int value);
    // Get static field: static private readonly System.Int32 k_ScaleBias
    static int _get_k_ScaleBias();
    // Set static field: static private readonly System.Int32 k_ScaleBias
    static void _set_k_ScaleBias(int value);
    // Get static field: static private readonly System.Int32 k_ScaleBiasRt
    static int _get_k_ScaleBiasRt();
    // Set static field: static private readonly System.Int32 k_ScaleBiasRt
    static void _set_k_ScaleBiasRt(int value);
    // Get static field: static private readonly System.Int32 k_SRGBRead
    static int _get_k_SRGBRead();
    // Set static field: static private readonly System.Int32 k_SRGBRead
    static void _set_k_SRGBRead(int value);
    // Get static field: static private readonly System.Int32 k_SRGBWrite
    static int _get_k_SRGBWrite();
    // Set static field: static private readonly System.Int32 k_SRGBWrite
    static void _set_k_SRGBWrite(int value);
    // static System.Void RenderMirrorView(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Camera camera, UnityEngine.Material mat, UnityEngine.XR.XRDisplaySubsystem display)
    // Offset: 0x522C86C
    static void RenderMirrorView(::UnityEngine::Rendering::CommandBuffer* cmd, ::UnityEngine::Camera* camera, ::UnityEngine::Material* mat, ::UnityEngine::XR::XRDisplaySubsystem* display);
    // static private System.Void .cctor()
    // Offset: 0x522D008
    static void _cctor();
  }; // UnityEngine.Experimental.Rendering.XRMirrorView
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRMirrorView::RenderMirrorView
// Il2CppName: RenderMirrorView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*, ::UnityEngine::Camera*, ::UnityEngine::Material*, ::UnityEngine::XR::XRDisplaySubsystem*)>(&UnityEngine::Experimental::Rendering::XRMirrorView::RenderMirrorView)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* display = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRDisplaySubsystem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRMirrorView*), "RenderMirrorView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, camera, mat, display});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRMirrorView::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Experimental::Rendering::XRMirrorView::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRMirrorView*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
