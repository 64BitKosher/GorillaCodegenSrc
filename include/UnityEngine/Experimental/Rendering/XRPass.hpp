// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.RenderTextureDescriptor
#include "UnityEngine/RenderTextureDescriptor.hpp"
// Including type: UnityEngine.Experimental.Rendering.XRView
#include "UnityEngine/Experimental/Rendering/XRView.hpp"
// Including type: UnityEngine.Rendering.RenderTargetIdentifier
#include "UnityEngine/Rendering/RenderTargetIdentifier.hpp"
// Including type: UnityEngine.Rendering.ScriptableCullingParameters
#include "UnityEngine/Rendering/ScriptableCullingParameters.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: XROcclusionMesh
  class XROcclusionMesh;
  // Forward declaring type: XRPassCreateInfo
  struct XRPassCreateInfo;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Matrix4x4 because it is already included!
  // Skipping declaration: Rect because it is already included!
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Vector4
  struct Vector4;
  // Skipping declaration: Vector2 because it is already included!
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: XRPass
  class XRPass;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::Rendering::XRPass);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::XRPass*, "UnityEngine.Experimental.Rendering", "XRPass");
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Size: 0x6C8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Experimental.Rendering.XRPass
  // [TokenAttribute] Offset: FFFFFFFF
  class XRPass : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.XRView> m_Views
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::XRView>* m_Views;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::XRView>*) == 0x8);
    // private readonly UnityEngine.Experimental.Rendering.XROcclusionMesh m_OcclusionMesh
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Experimental::Rendering::XROcclusionMesh* m_OcclusionMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::XROcclusionMesh*) == 0x8);
    // private System.Boolean <copyDepth>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool copyDepth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: copyDepth and: multipassId
    char __padding2[0x3] = {};
    // private System.Int32 <multipassId>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    int multipassId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <cullingPassId>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    int cullingPassId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: cullingPassId and: renderTarget
    char __padding4[0x4] = {};
    // private UnityEngine.Rendering.RenderTargetIdentifier <renderTarget>k__BackingField
    // Size: 0x24
    // Offset: 0x30
    ::UnityEngine::Rendering::RenderTargetIdentifier renderTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetIdentifier) == 0x24);
    // Padding between fields: renderTarget and: renderTargetDesc
    char __padding5[0x4] = {};
    // private UnityEngine.RenderTextureDescriptor <renderTargetDesc>k__BackingField
    // Size: 0x34
    // Offset: 0x58
    ::UnityEngine::RenderTextureDescriptor renderTargetDesc;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTextureDescriptor) == 0x34);
    // Padding between fields: renderTargetDesc and: cullingParams
    char __padding6[0x4] = {};
    // private UnityEngine.Rendering.ScriptableCullingParameters <cullingParams>k__BackingField
    // Size: 0x630
    // Offset: 0x90
    ::UnityEngine::Rendering::ScriptableCullingParameters cullingParams;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ScriptableCullingParameters) == 0x630);
    // private System.IntPtr <foveatedRenderingInfo>k__BackingField
    // Size: 0x8
    // Offset: 0x6C0
    ::System::IntPtr foveatedRenderingInfo;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.Experimental.Rendering.XRView> m_Views
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Experimental::Rendering::XRView>*& dyn_m_Views();
    // Get instance field reference: private readonly UnityEngine.Experimental.Rendering.XROcclusionMesh m_OcclusionMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::XROcclusionMesh*& dyn_m_OcclusionMesh();
    // Get instance field reference: private System.Boolean <copyDepth>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$copyDepth$k__BackingField();
    // Get instance field reference: private System.Int32 <multipassId>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$multipassId$k__BackingField();
    // Get instance field reference: private System.Int32 <cullingPassId>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$cullingPassId$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.RenderTargetIdentifier <renderTarget>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetIdentifier& dyn_$renderTarget$k__BackingField();
    // Get instance field reference: private UnityEngine.RenderTextureDescriptor <renderTargetDesc>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTextureDescriptor& dyn_$renderTargetDesc$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.ScriptableCullingParameters <cullingParams>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ScriptableCullingParameters& dyn_$cullingParams$k__BackingField();
    // Get instance field reference: private System.IntPtr <foveatedRenderingInfo>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_$foveatedRenderingInfo$k__BackingField();
    // public System.Void .ctor()
    // Offset: 0x522DFA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRPass* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::XRPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRPass*, creationType>()));
    }
    // public System.Void Release()
    // Offset: 0x522E078
    void Release();
    // public System.Boolean get_enabled()
    // Offset: 0x522BE64
    bool get_enabled();
    // public System.Boolean get_supportsFoveatedRendering()
    // Offset: 0x522E0E4
    bool get_supportsFoveatedRendering();
    // public System.Boolean get_copyDepth()
    // Offset: 0x522E1A4
    bool get_copyDepth();
    // private System.Void set_copyDepth(System.Boolean value)
    // Offset: 0x522E1AC
    void set_copyDepth(bool value);
    // public System.Int32 get_multipassId()
    // Offset: 0x522E1B8
    int get_multipassId();
    // private System.Void set_multipassId(System.Int32 value)
    // Offset: 0x522E1C0
    void set_multipassId(int value);
    // public System.Int32 get_cullingPassId()
    // Offset: 0x522E1C8
    int get_cullingPassId();
    // private System.Void set_cullingPassId(System.Int32 value)
    // Offset: 0x522E1D0
    void set_cullingPassId(int value);
    // public UnityEngine.Rendering.RenderTargetIdentifier get_renderTarget()
    // Offset: 0x522E1D8
    ::UnityEngine::Rendering::RenderTargetIdentifier get_renderTarget();
    // private System.Void set_renderTarget(UnityEngine.Rendering.RenderTargetIdentifier value)
    // Offset: 0x522E1EC
    void set_renderTarget(::UnityEngine::Rendering::RenderTargetIdentifier value);
    // public UnityEngine.RenderTextureDescriptor get_renderTargetDesc()
    // Offset: 0x522E200
    ::UnityEngine::RenderTextureDescriptor get_renderTargetDesc();
    // private System.Void set_renderTargetDesc(UnityEngine.RenderTextureDescriptor value)
    // Offset: 0x522E220
    void set_renderTargetDesc(::UnityEngine::RenderTextureDescriptor value);
    // public UnityEngine.Rendering.ScriptableCullingParameters get_cullingParams()
    // Offset: 0x522E240
    ::UnityEngine::Rendering::ScriptableCullingParameters get_cullingParams();
    // private System.Void set_cullingParams(UnityEngine.Rendering.ScriptableCullingParameters value)
    // Offset: 0x522E250
    void set_cullingParams(::UnityEngine::Rendering::ScriptableCullingParameters value);
    // public System.Int32 get_viewCount()
    // Offset: 0x522C79C
    int get_viewCount();
    // public System.Boolean get_singlePassEnabled()
    // Offset: 0x522D388
    bool get_singlePassEnabled();
    // public System.IntPtr get_foveatedRenderingInfo()
    // Offset: 0x522E268
    ::System::IntPtr get_foveatedRenderingInfo();
    // private System.Void set_foveatedRenderingInfo(System.IntPtr value)
    // Offset: 0x522E270
    void set_foveatedRenderingInfo(::System::IntPtr value);
    // public UnityEngine.Matrix4x4 GetProjMatrix(System.Int32 viewIndex)
    // Offset: 0x522E278
    ::UnityEngine::Matrix4x4 GetProjMatrix(int viewIndex);
    // public UnityEngine.Matrix4x4 GetViewMatrix(System.Int32 viewIndex)
    // Offset: 0x522E310
    ::UnityEngine::Matrix4x4 GetViewMatrix(int viewIndex);
    // public UnityEngine.Rect GetViewport(System.Int32 viewIndex)
    // Offset: 0x522C6C0
    ::UnityEngine::Rect GetViewport(int viewIndex);
    // public UnityEngine.Mesh GetOcclusionMesh(System.Int32 viewIndex)
    // Offset: 0x522D3A0
    ::UnityEngine::Mesh* GetOcclusionMesh(int viewIndex);
    // public System.Int32 GetTextureArraySlice(System.Int32 viewIndex)
    // Offset: 0x522C730
    int GetTextureArraySlice(int viewIndex);
    // public System.Void StartSinglePass(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x522D7F8
    void StartSinglePass(::UnityEngine::Rendering::CommandBuffer* cmd);
    // public System.Void StopSinglePass(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x522D72C
    void StopSinglePass(::UnityEngine::Rendering::CommandBuffer* cmd);
    // public System.Boolean get_hasValidOcclusionMesh()
    // Offset: 0x522E3A8
    bool get_hasValidOcclusionMesh();
    // public System.Void RenderOcclusionMesh(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x522E3C0
    void RenderOcclusionMesh(::UnityEngine::Rendering::CommandBuffer* cmd);
    // public UnityEngine.Vector4 ApplyXRViewCenterOffset(UnityEngine.Vector2 center)
    // Offset: 0x522E3D8
    ::UnityEngine::Vector4 ApplyXRViewCenterOffset(::UnityEngine::Vector2 center);
    // System.Void AssignView(System.Int32 viewId, UnityEngine.Experimental.Rendering.XRView xrView)
    // Offset: 0x522E51C
    void AssignView(int viewId, ::UnityEngine::Experimental::Rendering::XRView xrView);
    // System.Void AssignCullingParams(System.Int32 cullingPassId, UnityEngine.Rendering.ScriptableCullingParameters cullingParams)
    // Offset: 0x522E61C
    void AssignCullingParams(int cullingPassId, ::UnityEngine::Rendering::ScriptableCullingParameters cullingParams);
    // System.Void UpdateCombinedOcclusionMesh()
    // Offset: 0x522C11C
    void UpdateCombinedOcclusionMesh();
    // public System.Void InitBase(UnityEngine.Experimental.Rendering.XRPassCreateInfo createInfo)
    // Offset: 0x522E66C
    void InitBase(::UnityEngine::Experimental::Rendering::XRPassCreateInfo createInfo);
    // System.Void AddView(UnityEngine.Experimental.Rendering.XRView xrView)
    // Offset: 0x522E81C
    void AddView(::UnityEngine::Experimental::Rendering::XRView xrView);
  }; // UnityEngine.Experimental.Rendering.XRPass
  #pragma pack(pop)
  static check_size<sizeof(XRPass), 1728 + sizeof(::System::IntPtr)> __UnityEngine_Experimental_Rendering_XRPassSizeCheck;
  static_assert(sizeof(XRPass) == 0x6C8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)()>(&UnityEngine::Experimental::Rendering::XRPass::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::get_enabled
// Il2CppName: get_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::XRPass::*)()>(&UnityEngine::Experimental::Rendering::XRPass::get_enabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "get_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::get_supportsFoveatedRendering
// Il2CppName: get_supportsFoveatedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::XRPass::*)()>(&UnityEngine::Experimental::Rendering::XRPass::get_supportsFoveatedRendering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "get_supportsFoveatedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::get_copyDepth
// Il2CppName: get_copyDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::XRPass::*)()>(&UnityEngine::Experimental::Rendering::XRPass::get_copyDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "get_copyDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::set_copyDepth
// Il2CppName: set_copyDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)(bool)>(&UnityEngine::Experimental::Rendering::XRPass::set_copyDepth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "set_copyDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::get_multipassId
// Il2CppName: get_multipassId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::XRPass::*)()>(&UnityEngine::Experimental::Rendering::XRPass::get_multipassId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "get_multipassId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::set_multipassId
// Il2CppName: set_multipassId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)(int)>(&UnityEngine::Experimental::Rendering::XRPass::set_multipassId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "set_multipassId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::get_cullingPassId
// Il2CppName: get_cullingPassId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::XRPass::*)()>(&UnityEngine::Experimental::Rendering::XRPass::get_cullingPassId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "get_cullingPassId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::set_cullingPassId
// Il2CppName: set_cullingPassId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)(int)>(&UnityEngine::Experimental::Rendering::XRPass::set_cullingPassId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "set_cullingPassId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::get_renderTarget
// Il2CppName: get_renderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::RenderTargetIdentifier (UnityEngine::Experimental::Rendering::XRPass::*)()>(&UnityEngine::Experimental::Rendering::XRPass::get_renderTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "get_renderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::set_renderTarget
// Il2CppName: set_renderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)(::UnityEngine::Rendering::RenderTargetIdentifier)>(&UnityEngine::Experimental::Rendering::XRPass::set_renderTarget)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "set_renderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::get_renderTargetDesc
// Il2CppName: get_renderTargetDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTextureDescriptor (UnityEngine::Experimental::Rendering::XRPass::*)()>(&UnityEngine::Experimental::Rendering::XRPass::get_renderTargetDesc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "get_renderTargetDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::set_renderTargetDesc
// Il2CppName: set_renderTargetDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)(::UnityEngine::RenderTextureDescriptor)>(&UnityEngine::Experimental::Rendering::XRPass::set_renderTargetDesc)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "set_renderTargetDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::get_cullingParams
// Il2CppName: get_cullingParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::ScriptableCullingParameters (UnityEngine::Experimental::Rendering::XRPass::*)()>(&UnityEngine::Experimental::Rendering::XRPass::get_cullingParams)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "get_cullingParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::set_cullingParams
// Il2CppName: set_cullingParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)(::UnityEngine::Rendering::ScriptableCullingParameters)>(&UnityEngine::Experimental::Rendering::XRPass::set_cullingParams)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableCullingParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "set_cullingParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::get_viewCount
// Il2CppName: get_viewCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::XRPass::*)()>(&UnityEngine::Experimental::Rendering::XRPass::get_viewCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "get_viewCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::get_singlePassEnabled
// Il2CppName: get_singlePassEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::XRPass::*)()>(&UnityEngine::Experimental::Rendering::XRPass::get_singlePassEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "get_singlePassEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::get_foveatedRenderingInfo
// Il2CppName: get_foveatedRenderingInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (UnityEngine::Experimental::Rendering::XRPass::*)()>(&UnityEngine::Experimental::Rendering::XRPass::get_foveatedRenderingInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "get_foveatedRenderingInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::set_foveatedRenderingInfo
// Il2CppName: set_foveatedRenderingInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)(::System::IntPtr)>(&UnityEngine::Experimental::Rendering::XRPass::set_foveatedRenderingInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "set_foveatedRenderingInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::GetProjMatrix
// Il2CppName: GetProjMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (UnityEngine::Experimental::Rendering::XRPass::*)(int)>(&UnityEngine::Experimental::Rendering::XRPass::GetProjMatrix)> {
  static const MethodInfo* get() {
    static auto* viewIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "GetProjMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::GetViewMatrix
// Il2CppName: GetViewMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (UnityEngine::Experimental::Rendering::XRPass::*)(int)>(&UnityEngine::Experimental::Rendering::XRPass::GetViewMatrix)> {
  static const MethodInfo* get() {
    static auto* viewIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "GetViewMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::GetViewport
// Il2CppName: GetViewport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (UnityEngine::Experimental::Rendering::XRPass::*)(int)>(&UnityEngine::Experimental::Rendering::XRPass::GetViewport)> {
  static const MethodInfo* get() {
    static auto* viewIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "GetViewport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::GetOcclusionMesh
// Il2CppName: GetOcclusionMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (UnityEngine::Experimental::Rendering::XRPass::*)(int)>(&UnityEngine::Experimental::Rendering::XRPass::GetOcclusionMesh)> {
  static const MethodInfo* get() {
    static auto* viewIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "GetOcclusionMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::GetTextureArraySlice
// Il2CppName: GetTextureArraySlice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::XRPass::*)(int)>(&UnityEngine::Experimental::Rendering::XRPass::GetTextureArraySlice)> {
  static const MethodInfo* get() {
    static auto* viewIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "GetTextureArraySlice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::StartSinglePass
// Il2CppName: StartSinglePass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Experimental::Rendering::XRPass::StartSinglePass)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "StartSinglePass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::StopSinglePass
// Il2CppName: StopSinglePass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Experimental::Rendering::XRPass::StopSinglePass)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "StopSinglePass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::get_hasValidOcclusionMesh
// Il2CppName: get_hasValidOcclusionMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::XRPass::*)()>(&UnityEngine::Experimental::Rendering::XRPass::get_hasValidOcclusionMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "get_hasValidOcclusionMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::RenderOcclusionMesh
// Il2CppName: RenderOcclusionMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Experimental::Rendering::XRPass::RenderOcclusionMesh)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "RenderOcclusionMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::ApplyXRViewCenterOffset
// Il2CppName: ApplyXRViewCenterOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (UnityEngine::Experimental::Rendering::XRPass::*)(::UnityEngine::Vector2)>(&UnityEngine::Experimental::Rendering::XRPass::ApplyXRViewCenterOffset)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "ApplyXRViewCenterOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::AssignView
// Il2CppName: AssignView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)(int, ::UnityEngine::Experimental::Rendering::XRView)>(&UnityEngine::Experimental::Rendering::XRPass::AssignView)> {
  static const MethodInfo* get() {
    static auto* viewId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* xrView = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "XRView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "AssignView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewId, xrView});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::AssignCullingParams
// Il2CppName: AssignCullingParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)(int, ::UnityEngine::Rendering::ScriptableCullingParameters)>(&UnityEngine::Experimental::Rendering::XRPass::AssignCullingParams)> {
  static const MethodInfo* get() {
    static auto* cullingPassId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cullingParams = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableCullingParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "AssignCullingParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cullingPassId, cullingParams});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::UpdateCombinedOcclusionMesh
// Il2CppName: UpdateCombinedOcclusionMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)()>(&UnityEngine::Experimental::Rendering::XRPass::UpdateCombinedOcclusionMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "UpdateCombinedOcclusionMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::InitBase
// Il2CppName: InitBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)(::UnityEngine::Experimental::Rendering::XRPassCreateInfo)>(&UnityEngine::Experimental::Rendering::XRPass::InitBase)> {
  static const MethodInfo* get() {
    static auto* createInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "XRPassCreateInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "InitBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{createInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRPass::AddView
// Il2CppName: AddView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XRPass::*)(::UnityEngine::Experimental::Rendering::XRView)>(&UnityEngine::Experimental::Rendering::XRPass::AddView)> {
  static const MethodInfo* get() {
    static auto* xrView = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "XRView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRPass*), "AddView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xrView});
  }
};
