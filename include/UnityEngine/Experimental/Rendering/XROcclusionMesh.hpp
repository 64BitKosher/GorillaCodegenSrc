// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: XRPass
  class XRPass;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: XROcclusionMesh
  class XROcclusionMesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::Rendering::XROcclusionMesh);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::XROcclusionMesh*, "UnityEngine.Experimental.Rendering", "XROcclusionMesh");
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Experimental.Rendering.XROcclusionMesh
  // [TokenAttribute] Offset: FFFFFFFF
  class XROcclusionMesh : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Experimental.Rendering.XRPass m_Pass
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Experimental::Rendering::XRPass* m_Pass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::XRPass*) == 0x8);
    // private UnityEngine.Mesh m_CombinedMesh
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Mesh* m_CombinedMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Material m_Material
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* m_Material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Int32 m_CombinedMeshHashCode
    // Size: 0x4
    // Offset: 0x28
    int m_CombinedMeshHashCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private readonly UnityEngine.Rendering.ProfilingSampler k_OcclusionMeshProfilingSampler
    static ::UnityEngine::Rendering::ProfilingSampler* _get_k_OcclusionMeshProfilingSampler();
    // Set static field: static private readonly UnityEngine.Rendering.ProfilingSampler k_OcclusionMeshProfilingSampler
    static void _set_k_OcclusionMeshProfilingSampler(::UnityEngine::Rendering::ProfilingSampler* value);
    // Get instance field reference: private UnityEngine.Experimental.Rendering.XRPass m_Pass
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::XRPass*& dyn_m_Pass();
    // Get instance field reference: private UnityEngine.Mesh m_CombinedMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_m_CombinedMesh();
    // Get instance field reference: private UnityEngine.Material m_Material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_Material();
    // Get instance field reference: private System.Int32 m_CombinedMeshHashCode
    [[deprecated("Use field access instead!")]] int& dyn_m_CombinedMeshHashCode();
    // System.Void .ctor(UnityEngine.Experimental.Rendering.XRPass xrPass)
    // Offset: 0x522D204
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XROcclusionMesh* New_ctor(::UnityEngine::Experimental::Rendering::XRPass* xrPass) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::XROcclusionMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XROcclusionMesh*, creationType>(xrPass)));
    }
    // System.Void SetMaterial(UnityEngine.Material mat)
    // Offset: 0x522D234
    void SetMaterial(::UnityEngine::Material* mat);
    // System.Boolean get_hasValidOcclusionMesh()
    // Offset: 0x522D23C
    bool get_hasValidOcclusionMesh();
    // System.Void RenderOcclusionMesh(UnityEngine.Rendering.CommandBuffer cmd)
    // Offset: 0x522D40C
    void RenderOcclusionMesh(::UnityEngine::Rendering::CommandBuffer* cmd);
    // System.Void UpdateCombinedMesh()
    // Offset: 0x522D9EC
    void UpdateCombinedMesh();
    // private System.Boolean IsOcclusionMeshSupported()
    // Offset: 0x522D300
    bool IsOcclusionMeshSupported();
    // private System.Boolean TryGetOcclusionMeshCombinedHashCode(out System.Int32 hashCode)
    // Offset: 0x522DAC0
    bool TryGetOcclusionMeshCombinedHashCode(ByRef<int> hashCode);
    // private System.Void CreateOcclusionMeshCombined()
    // Offset: 0x522DBB4
    void CreateOcclusionMeshCombined();
    // static private System.Void .cctor()
    // Offset: 0x522DF08
    static void _cctor();
  }; // UnityEngine.Experimental.Rendering.XROcclusionMesh
  #pragma pack(pop)
  static check_size<sizeof(XROcclusionMesh), 40 + sizeof(int)> __UnityEngine_Experimental_Rendering_XROcclusionMeshSizeCheck;
  static_assert(sizeof(XROcclusionMesh) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XROcclusionMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XROcclusionMesh::SetMaterial
// Il2CppName: SetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XROcclusionMesh::*)(::UnityEngine::Material*)>(&UnityEngine::Experimental::Rendering::XROcclusionMesh::SetMaterial)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XROcclusionMesh*), "SetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XROcclusionMesh::get_hasValidOcclusionMesh
// Il2CppName: get_hasValidOcclusionMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::XROcclusionMesh::*)()>(&UnityEngine::Experimental::Rendering::XROcclusionMesh::get_hasValidOcclusionMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XROcclusionMesh*), "get_hasValidOcclusionMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XROcclusionMesh::RenderOcclusionMesh
// Il2CppName: RenderOcclusionMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XROcclusionMesh::*)(::UnityEngine::Rendering::CommandBuffer*)>(&UnityEngine::Experimental::Rendering::XROcclusionMesh::RenderOcclusionMesh)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XROcclusionMesh*), "RenderOcclusionMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XROcclusionMesh::UpdateCombinedMesh
// Il2CppName: UpdateCombinedMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XROcclusionMesh::*)()>(&UnityEngine::Experimental::Rendering::XROcclusionMesh::UpdateCombinedMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XROcclusionMesh*), "UpdateCombinedMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XROcclusionMesh::IsOcclusionMeshSupported
// Il2CppName: IsOcclusionMeshSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::XROcclusionMesh::*)()>(&UnityEngine::Experimental::Rendering::XROcclusionMesh::IsOcclusionMeshSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XROcclusionMesh*), "IsOcclusionMeshSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XROcclusionMesh::TryGetOcclusionMeshCombinedHashCode
// Il2CppName: TryGetOcclusionMeshCombinedHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Rendering::XROcclusionMesh::*)(ByRef<int>)>(&UnityEngine::Experimental::Rendering::XROcclusionMesh::TryGetOcclusionMeshCombinedHashCode)> {
  static const MethodInfo* get() {
    static auto* hashCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XROcclusionMesh*), "TryGetOcclusionMeshCombinedHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hashCode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XROcclusionMesh::CreateOcclusionMeshCombined
// Il2CppName: CreateOcclusionMeshCombined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::XROcclusionMesh::*)()>(&UnityEngine::Experimental::Rendering::XROcclusionMesh::CreateOcclusionMeshCombined)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XROcclusionMesh*), "CreateOcclusionMeshCombined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XROcclusionMesh::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Experimental::Rendering::XROcclusionMesh::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XROcclusionMesh*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
