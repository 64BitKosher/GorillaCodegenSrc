// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Experimental.Rendering.Universal.RenderObjects
#include "UnityEngine/Experimental/Rendering/Universal/RenderObjects.hpp"
// Including type: UnityEngine.Rendering.Universal.RenderPassEvent
#include "UnityEngine/Rendering/Universal/RenderPassEvent.hpp"
// Including type: UnityEngine.Rendering.CompareFunction
#include "UnityEngine/Rendering/CompareFunction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: StencilStateData
  class StencilStateData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Shader
  class Shader;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::Rendering::Universal::RenderObjects::RenderObjectsSettings);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::Universal::RenderObjects::RenderObjectsSettings*, "UnityEngine.Experimental.Rendering.Universal", "RenderObjects/RenderObjectsSettings");
// Type namespace: UnityEngine.Experimental.Rendering.Universal
namespace UnityEngine::Experimental::Rendering::Universal {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Experimental.Rendering.Universal.RenderObjects/RenderObjectsSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class RenderObjects::RenderObjectsSettings : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Experimental::Rendering::Universal::RenderObjects::RenderObjectsSettings::OverrideMaterialMode
    struct OverrideMaterialMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Experimental.Rendering.Universal.RenderObjects/RenderObjectsSettings/OverrideMaterialMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct OverrideMaterialMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: OverrideMaterialMode
      constexpr OverrideMaterialMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Experimental.Rendering.Universal.RenderObjects/RenderObjectsSettings/OverrideMaterialMode None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.Experimental.Rendering.Universal.RenderObjects/RenderObjectsSettings/OverrideMaterialMode None
      static ::UnityEngine::Experimental::Rendering::Universal::RenderObjects::RenderObjectsSettings::OverrideMaterialMode _get_None();
      // Set static field: static public UnityEngine.Experimental.Rendering.Universal.RenderObjects/RenderObjectsSettings/OverrideMaterialMode None
      static void _set_None(::UnityEngine::Experimental::Rendering::Universal::RenderObjects::RenderObjectsSettings::OverrideMaterialMode value);
      // static field const value: static public UnityEngine.Experimental.Rendering.Universal.RenderObjects/RenderObjectsSettings/OverrideMaterialMode Material
      static constexpr const int Material = 1;
      // Get static field: static public UnityEngine.Experimental.Rendering.Universal.RenderObjects/RenderObjectsSettings/OverrideMaterialMode Material
      static ::UnityEngine::Experimental::Rendering::Universal::RenderObjects::RenderObjectsSettings::OverrideMaterialMode _get_Material();
      // Set static field: static public UnityEngine.Experimental.Rendering.Universal.RenderObjects/RenderObjectsSettings/OverrideMaterialMode Material
      static void _set_Material(::UnityEngine::Experimental::Rendering::Universal::RenderObjects::RenderObjectsSettings::OverrideMaterialMode value);
      // static field const value: static public UnityEngine.Experimental.Rendering.Universal.RenderObjects/RenderObjectsSettings/OverrideMaterialMode Shader
      static constexpr const int Shader = 2;
      // Get static field: static public UnityEngine.Experimental.Rendering.Universal.RenderObjects/RenderObjectsSettings/OverrideMaterialMode Shader
      static ::UnityEngine::Experimental::Rendering::Universal::RenderObjects::RenderObjectsSettings::OverrideMaterialMode _get_Shader();
      // Set static field: static public UnityEngine.Experimental.Rendering.Universal.RenderObjects/RenderObjectsSettings/OverrideMaterialMode Shader
      static void _set_Shader(::UnityEngine::Experimental::Rendering::Universal::RenderObjects::RenderObjectsSettings::OverrideMaterialMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.Experimental.Rendering.Universal.RenderObjects/RenderObjectsSettings/OverrideMaterialMode
    #pragma pack(pop)
    static check_size<sizeof(RenderObjects::RenderObjectsSettings::OverrideMaterialMode), 0 + sizeof(int)> __UnityEngine_Experimental_Rendering_Universal_RenderObjects_RenderObjectsSettings_OverrideMaterialModeSizeCheck;
    static_assert(sizeof(RenderObjects::RenderObjectsSettings::OverrideMaterialMode) == 0x4);
    public:
    // public System.String passTag
    // Size: 0x8
    // Offset: 0x10
    ::StringW passTag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Rendering.Universal.RenderPassEvent Event
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::Rendering::Universal::RenderPassEvent Event;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::RenderPassEvent) == 0x4);
    // Padding between fields: Event and: filterSettings
    char __padding1[0x4] = {};
    // public UnityEngine.Experimental.Rendering.Universal.RenderObjects/FilterSettings filterSettings
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Experimental::Rendering::Universal::RenderObjects::FilterSettings* filterSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::Universal::RenderObjects::FilterSettings*) == 0x8);
    // public UnityEngine.Material overrideMaterial
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* overrideMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.Int32 overrideMaterialPassIndex
    // Size: 0x4
    // Offset: 0x30
    int overrideMaterialPassIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: overrideMaterialPassIndex and: overrideShader
    char __padding4[0x4] = {};
    // public UnityEngine.Shader overrideShader
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Shader* overrideShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public System.Int32 overrideShaderPassIndex
    // Size: 0x4
    // Offset: 0x40
    int overrideShaderPassIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Experimental.Rendering.Universal.RenderObjects/RenderObjectsSettings/OverrideMaterialMode overrideMode
    // Size: 0x4
    // Offset: 0x44
    ::UnityEngine::Experimental::Rendering::Universal::RenderObjects::RenderObjectsSettings::OverrideMaterialMode overrideMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::Universal::RenderObjects::RenderObjectsSettings::OverrideMaterialMode) == 0x4);
    // public System.Boolean overrideDepthState
    // Size: 0x1
    // Offset: 0x48
    bool overrideDepthState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideDepthState and: depthCompareFunction
    char __padding8[0x3] = {};
    // public UnityEngine.Rendering.CompareFunction depthCompareFunction
    // Size: 0x4
    // Offset: 0x4C
    ::UnityEngine::Rendering::CompareFunction depthCompareFunction;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CompareFunction) == 0x4);
    // public System.Boolean enableWrite
    // Size: 0x1
    // Offset: 0x50
    bool enableWrite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableWrite and: stencilSettings
    char __padding10[0x7] = {};
    // public UnityEngine.Rendering.Universal.StencilStateData stencilSettings
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Rendering::Universal::StencilStateData* stencilSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::Universal::StencilStateData*) == 0x8);
    // public UnityEngine.Experimental.Rendering.Universal.RenderObjects/CustomCameraSettings cameraSettings
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Experimental::Rendering::Universal::RenderObjects::CustomCameraSettings* cameraSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::Universal::RenderObjects::CustomCameraSettings*) == 0x8);
    public:
    // Get instance field reference: public System.String passTag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_passTag();
    // Get instance field reference: public UnityEngine.Rendering.Universal.RenderPassEvent Event
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::RenderPassEvent& dyn_Event();
    // Get instance field reference: public UnityEngine.Experimental.Rendering.Universal.RenderObjects/FilterSettings filterSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::Universal::RenderObjects::FilterSettings*& dyn_filterSettings();
    // Get instance field reference: public UnityEngine.Material overrideMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_overrideMaterial();
    // Get instance field reference: public System.Int32 overrideMaterialPassIndex
    [[deprecated("Use field access instead!")]] int& dyn_overrideMaterialPassIndex();
    // Get instance field reference: public UnityEngine.Shader overrideShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_overrideShader();
    // Get instance field reference: public System.Int32 overrideShaderPassIndex
    [[deprecated("Use field access instead!")]] int& dyn_overrideShaderPassIndex();
    // Get instance field reference: public UnityEngine.Experimental.Rendering.Universal.RenderObjects/RenderObjectsSettings/OverrideMaterialMode overrideMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::Universal::RenderObjects::RenderObjectsSettings::OverrideMaterialMode& dyn_overrideMode();
    // Get instance field reference: public System.Boolean overrideDepthState
    [[deprecated("Use field access instead!")]] bool& dyn_overrideDepthState();
    // Get instance field reference: public UnityEngine.Rendering.CompareFunction depthCompareFunction
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CompareFunction& dyn_depthCompareFunction();
    // Get instance field reference: public System.Boolean enableWrite
    [[deprecated("Use field access instead!")]] bool& dyn_enableWrite();
    // Get instance field reference: public UnityEngine.Rendering.Universal.StencilStateData stencilSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::Universal::StencilStateData*& dyn_stencilSettings();
    // Get instance field reference: public UnityEngine.Experimental.Rendering.Universal.RenderObjects/CustomCameraSettings cameraSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::Universal::RenderObjects::CustomCameraSettings*& dyn_cameraSettings();
    // public System.Void .ctor()
    // Offset: 0x526C0C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RenderObjects::RenderObjectsSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::Universal::RenderObjects::RenderObjectsSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RenderObjects::RenderObjectsSettings*, creationType>()));
    }
  }; // UnityEngine.Experimental.Rendering.Universal.RenderObjects/RenderObjectsSettings
  #pragma pack(pop)
  static check_size<sizeof(RenderObjects::RenderObjectsSettings), 96 + sizeof(::UnityEngine::Experimental::Rendering::Universal::RenderObjects::CustomCameraSettings*)> __UnityEngine_Experimental_Rendering_Universal_RenderObjects_RenderObjectsSettingsSizeCheck;
  static_assert(sizeof(RenderObjects::RenderObjectsSettings) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::Universal::RenderObjects::RenderObjectsSettings::OverrideMaterialMode, "UnityEngine.Experimental.Rendering.Universal", "RenderObjects/RenderObjectsSettings/OverrideMaterialMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjects::RenderObjectsSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
