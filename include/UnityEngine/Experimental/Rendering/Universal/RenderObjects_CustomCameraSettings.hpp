// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Experimental.Rendering.Universal.RenderObjects
#include "UnityEngine/Experimental/Rendering/Universal/RenderObjects.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::Rendering::Universal::RenderObjects::CustomCameraSettings);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::Universal::RenderObjects::CustomCameraSettings*, "UnityEngine.Experimental.Rendering.Universal", "RenderObjects/CustomCameraSettings");
// Type namespace: UnityEngine.Experimental.Rendering.Universal
namespace UnityEngine::Experimental::Rendering::Universal {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Experimental.Rendering.Universal.RenderObjects/CustomCameraSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class RenderObjects::CustomCameraSettings : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean overrideCamera
    // Size: 0x1
    // Offset: 0x10
    bool overrideCamera;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean restoreCamera
    // Size: 0x1
    // Offset: 0x11
    bool restoreCamera;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: restoreCamera and: offset
    char __padding1[0x2] = {};
    // public UnityEngine.Vector4 offset
    // Size: 0x10
    // Offset: 0x14
    ::UnityEngine::Vector4 offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public System.Single cameraFieldOfView
    // Size: 0x4
    // Offset: 0x24
    float cameraFieldOfView;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Boolean overrideCamera
    [[deprecated("Use field access instead!")]] bool& dyn_overrideCamera();
    // Get instance field reference: public System.Boolean restoreCamera
    [[deprecated("Use field access instead!")]] bool& dyn_restoreCamera();
    // Get instance field reference: public UnityEngine.Vector4 offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_offset();
    // Get instance field reference: public System.Single cameraFieldOfView
    [[deprecated("Use field access instead!")]] float& dyn_cameraFieldOfView();
    // public System.Void .ctor()
    // Offset: 0x526C23C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RenderObjects::CustomCameraSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::Universal::RenderObjects::CustomCameraSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RenderObjects::CustomCameraSettings*, creationType>()));
    }
  }; // UnityEngine.Experimental.Rendering.Universal.RenderObjects/CustomCameraSettings
  #pragma pack(pop)
  static check_size<sizeof(RenderObjects::CustomCameraSettings), 36 + sizeof(float)> __UnityEngine_Experimental_Rendering_Universal_RenderObjects_CustomCameraSettingsSizeCheck;
  static_assert(sizeof(RenderObjects::CustomCameraSettings) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjects::CustomCameraSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
