// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.Universal.ScriptableRenderPass
#include "UnityEngine/Rendering/Universal/ScriptableRenderPass.hpp"
// Including type: UnityEngine.Experimental.Rendering.Universal.RenderQueueType
#include "UnityEngine/Experimental/Rendering/Universal/RenderQueueType.hpp"
// Including type: UnityEngine.Rendering.FilteringSettings
#include "UnityEngine/Rendering/FilteringSettings.hpp"
// Including type: UnityEngine.Experimental.Rendering.Universal.RenderObjects
#include "UnityEngine/Experimental/Rendering/Universal/RenderObjects.hpp"
// Including type: UnityEngine.Rendering.RenderStateBlock
#include "UnityEngine/Rendering/RenderStateBlock.hpp"
// Including type: UnityEngine.Rendering.Universal.URPProfileId
#include "UnityEngine/Rendering/Universal/URPProfileId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::Rendering::Universal
namespace UnityEngine::Experimental::Rendering::Universal {
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ProfilingSampler
  class ProfilingSampler;
  // Forward declaring type: CompareFunction
  struct CompareFunction;
  // Forward declaring type: StencilOp
  struct StencilOp;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Shader
  class Shader;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Rendering::Universal
namespace UnityEngine::Rendering::Universal {
  // Forward declaring type: RenderingData
  struct RenderingData;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering::RenderGraphModule
namespace UnityEngine::Experimental::Rendering::RenderGraphModule {
  // Forward declaring type: RenderGraph
  class RenderGraph;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering.Universal
namespace UnityEngine::Experimental::Rendering::Universal {
  // Forward declaring type: RenderObjectsPass
  class RenderObjectsPass;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass*, "UnityEngine.Experimental.Rendering.Universal", "RenderObjectsPass");
// Type namespace: UnityEngine.Experimental.Rendering.Universal
namespace UnityEngine::Experimental::Rendering::Universal {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Experimental.Rendering.Universal.RenderObjectsPass
  // [TokenAttribute] Offset: FFFFFFFF
  class RenderObjectsPass : public ::UnityEngine::Rendering::Universal::ScriptableRenderPass {
    public:
    // Nested type: ::UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::PassData
    class PassData;
    // Nested type: ::UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::$$c
    class $$c;
    public:
    // private UnityEngine.Experimental.Rendering.Universal.RenderQueueType renderQueueType
    // Size: 0x4
    // Offset: 0xE0
    ::UnityEngine::Experimental::Rendering::Universal::RenderQueueType renderQueueType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::Universal::RenderQueueType) == 0x4);
    // private UnityEngine.Rendering.FilteringSettings m_FilteringSettings
    // Size: 0x18
    // Offset: 0xE4
    ::UnityEngine::Rendering::FilteringSettings m_FilteringSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::FilteringSettings) == 0x18);
    // private UnityEngine.Experimental.Rendering.Universal.RenderObjects/CustomCameraSettings m_CameraSettings
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::Experimental::Rendering::Universal::RenderObjects::CustomCameraSettings* m_CameraSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::Universal::RenderObjects::CustomCameraSettings*) == 0x8);
    // private System.String m_ProfilerTag
    // Size: 0x8
    // Offset: 0x108
    ::StringW m_ProfilerTag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::Rendering::ProfilingSampler* m_ProfilingSampler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::ProfilingSampler*) == 0x8);
    // private UnityEngine.Material <overrideMaterial>k__BackingField
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Material* overrideMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Int32 <overrideMaterialPassIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x120
    int overrideMaterialPassIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Shader <overrideShader>k__BackingField
    // Size: 0x8
    // Offset: 0x128
    ::UnityEngine::Shader* overrideShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private System.Int32 <overrideShaderPassIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x130
    int overrideShaderPassIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> m_ShaderTagIdList
    // Size: 0x8
    // Offset: 0x138
    ::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>* m_ShaderTagIdList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>*) == 0x8);
    // private UnityEngine.Rendering.RenderStateBlock m_RenderStateBlock
    // Size: 0x6C
    // Offset: 0x140
    ::UnityEngine::Rendering::RenderStateBlock m_RenderStateBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderStateBlock) == 0x6C);
    public:
    // Get instance field reference: private UnityEngine.Experimental.Rendering.Universal.RenderQueueType renderQueueType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::Universal::RenderQueueType& dyn_renderQueueType();
    // Get instance field reference: private UnityEngine.Rendering.FilteringSettings m_FilteringSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::FilteringSettings& dyn_m_FilteringSettings();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.Universal.RenderObjects/CustomCameraSettings m_CameraSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::Universal::RenderObjects::CustomCameraSettings*& dyn_m_CameraSettings();
    // Get instance field reference: private System.String m_ProfilerTag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_ProfilerTag();
    // Get instance field reference: private UnityEngine.Rendering.ProfilingSampler m_ProfilingSampler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::ProfilingSampler*& dyn_m_ProfilingSampler();
    // Get instance field reference: private UnityEngine.Material <overrideMaterial>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_$overrideMaterial$k__BackingField();
    // Get instance field reference: private System.Int32 <overrideMaterialPassIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$overrideMaterialPassIndex$k__BackingField();
    // Get instance field reference: private UnityEngine.Shader <overrideShader>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_$overrideShader$k__BackingField();
    // Get instance field reference: private System.Int32 <overrideShaderPassIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$overrideShaderPassIndex$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> m_ShaderTagIdList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rendering::ShaderTagId>*& dyn_m_ShaderTagIdList();
    // Get instance field reference: private UnityEngine.Rendering.RenderStateBlock m_RenderStateBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderStateBlock& dyn_m_RenderStateBlock();
    // public UnityEngine.Material get_overrideMaterial()
    // Offset: 0x526AC48
    ::UnityEngine::Material* get_overrideMaterial();
    // public System.Void set_overrideMaterial(UnityEngine.Material value)
    // Offset: 0x526AC50
    void set_overrideMaterial(::UnityEngine::Material* value);
    // public System.Int32 get_overrideMaterialPassIndex()
    // Offset: 0x526AC60
    int get_overrideMaterialPassIndex();
    // public System.Void set_overrideMaterialPassIndex(System.Int32 value)
    // Offset: 0x526AC68
    void set_overrideMaterialPassIndex(int value);
    // public UnityEngine.Shader get_overrideShader()
    // Offset: 0x526AC70
    ::UnityEngine::Shader* get_overrideShader();
    // public System.Void set_overrideShader(UnityEngine.Shader value)
    // Offset: 0x526AC78
    void set_overrideShader(::UnityEngine::Shader* value);
    // public System.Int32 get_overrideShaderPassIndex()
    // Offset: 0x526AC88
    int get_overrideShaderPassIndex();
    // public System.Void set_overrideShaderPassIndex(System.Int32 value)
    // Offset: 0x526AC90
    void set_overrideShaderPassIndex(int value);
    // public System.Void SetDetphState(System.Boolean writeEnabled, UnityEngine.Rendering.CompareFunction function)
    // Offset: 0x526AC98
    void SetDetphState(bool writeEnabled, ::UnityEngine::Rendering::CompareFunction function);
    // public System.Void SetStencilState(System.Int32 reference, UnityEngine.Rendering.CompareFunction compareFunction, UnityEngine.Rendering.StencilOp passOp, UnityEngine.Rendering.StencilOp failOp, UnityEngine.Rendering.StencilOp zFailOp)
    // Offset: 0x526AD04
    void SetStencilState(int reference, ::UnityEngine::Rendering::CompareFunction compareFunction, ::UnityEngine::Rendering::StencilOp passOp, ::UnityEngine::Rendering::StencilOp failOp, ::UnityEngine::Rendering::StencilOp zFailOp);
    // public System.Void .ctor(System.String profilerTag, UnityEngine.Rendering.Universal.RenderPassEvent renderPassEvent, System.String[] shaderTags, UnityEngine.Experimental.Rendering.Universal.RenderQueueType renderQueueType, System.Int32 layerMask, UnityEngine.Experimental.Rendering.Universal.RenderObjects/CustomCameraSettings cameraSettings)
    // Offset: 0x526ADEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RenderObjectsPass* New_ctor(::StringW profilerTag, ::UnityEngine::Rendering::Universal::RenderPassEvent renderPassEvent, ::ArrayW<::StringW> shaderTags, ::UnityEngine::Experimental::Rendering::Universal::RenderQueueType renderQueueType, int layerMask, ::UnityEngine::Experimental::Rendering::Universal::RenderObjects::CustomCameraSettings* cameraSettings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RenderObjectsPass*, creationType>(profilerTag, renderPassEvent, shaderTags, renderQueueType, layerMask, cameraSettings)));
    }
    // System.Void .ctor(UnityEngine.Rendering.Universal.URPProfileId profileId, UnityEngine.Rendering.Universal.RenderPassEvent renderPassEvent, System.String[] shaderTags, UnityEngine.Experimental.Rendering.Universal.RenderQueueType renderQueueType, System.Int32 layerMask, UnityEngine.Experimental.Rendering.Universal.RenderObjects/CustomCameraSettings cameraSettings)
    // Offset: 0x526B2C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RenderObjectsPass* New_ctor(::UnityEngine::Rendering::Universal::URPProfileId profileId, ::UnityEngine::Rendering::Universal::RenderPassEvent renderPassEvent, ::ArrayW<::StringW> shaderTags, ::UnityEngine::Experimental::Rendering::Universal::RenderQueueType renderQueueType, int layerMask, ::UnityEngine::Experimental::Rendering::Universal::RenderObjects::CustomCameraSettings* cameraSettings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RenderObjectsPass*, creationType>(profileId, renderPassEvent, shaderTags, renderQueueType, layerMask, cameraSettings)));
    }
    // public override System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x526B3BC
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void Execute(::UnityEngine::Rendering::ScriptableRenderContext context, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
    // override System.Void RecordRenderGraph(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    // Offset: 0x526BA14
    // Implemented from: UnityEngine.Rendering.Universal.ScriptableRenderPass
    // Base method: System.Void ScriptableRenderPass::RecordRenderGraph(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph renderGraph, ref UnityEngine.Rendering.Universal.RenderingData renderingData)
    void RecordRenderGraph(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph* renderGraph, ByRef<::UnityEngine::Rendering::Universal::RenderingData> renderingData);
  }; // UnityEngine.Experimental.Rendering.Universal.RenderObjectsPass
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::get_overrideMaterial
// Il2CppName: get_overrideMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::*)()>(&UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::get_overrideMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass*), "get_overrideMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::set_overrideMaterial
// Il2CppName: set_overrideMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::*)(::UnityEngine::Material*)>(&UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::set_overrideMaterial)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass*), "set_overrideMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::get_overrideMaterialPassIndex
// Il2CppName: get_overrideMaterialPassIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::*)()>(&UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::get_overrideMaterialPassIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass*), "get_overrideMaterialPassIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::set_overrideMaterialPassIndex
// Il2CppName: set_overrideMaterialPassIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::*)(int)>(&UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::set_overrideMaterialPassIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass*), "set_overrideMaterialPassIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::get_overrideShader
// Il2CppName: get_overrideShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::*)()>(&UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::get_overrideShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass*), "get_overrideShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::set_overrideShader
// Il2CppName: set_overrideShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::*)(::UnityEngine::Shader*)>(&UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::set_overrideShader)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Shader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass*), "set_overrideShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::get_overrideShaderPassIndex
// Il2CppName: get_overrideShaderPassIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::*)()>(&UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::get_overrideShaderPassIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass*), "get_overrideShaderPassIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::set_overrideShaderPassIndex
// Il2CppName: set_overrideShaderPassIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::*)(int)>(&UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::set_overrideShaderPassIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass*), "set_overrideShaderPassIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::SetDetphState
// Il2CppName: SetDetphState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::*)(bool, ::UnityEngine::Rendering::CompareFunction)>(&UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::SetDetphState)> {
  static const MethodInfo* get() {
    static auto* writeEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* function = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CompareFunction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass*), "SetDetphState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writeEnabled, function});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::SetStencilState
// Il2CppName: SetStencilState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::*)(int, ::UnityEngine::Rendering::CompareFunction, ::UnityEngine::Rendering::StencilOp, ::UnityEngine::Rendering::StencilOp, ::UnityEngine::Rendering::StencilOp)>(&UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::SetStencilState)> {
  static const MethodInfo* get() {
    static auto* reference = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* compareFunction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CompareFunction")->byval_arg;
    static auto* passOp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "StencilOp")->byval_arg;
    static auto* failOp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "StencilOp")->byval_arg;
    static auto* zFailOp = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "StencilOp")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass*), "SetStencilState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reference, compareFunction, passOp, failOp, zFailOp});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::*)(::UnityEngine::Rendering::ScriptableRenderContext, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::Execute)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableRenderContext")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, renderingData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::RecordRenderGraph
// Il2CppName: RecordRenderGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::*)(::UnityEngine::Experimental::Rendering::RenderGraphModule::RenderGraph*, ByRef<::UnityEngine::Rendering::Universal::RenderingData>)>(&UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass::RecordRenderGraph)> {
  static const MethodInfo* get() {
    static auto* renderGraph = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering.RenderGraphModule", "RenderGraph")->byval_arg;
    static auto* renderingData = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering.Universal", "RenderingData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::Universal::RenderObjectsPass*), "RecordRenderGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderGraph, renderingData});
  }
};
