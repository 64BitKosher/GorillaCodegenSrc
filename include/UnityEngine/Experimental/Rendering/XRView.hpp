// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: XRView
  struct XRView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::XRView, "UnityEngine.Experimental.Rendering", "XRView");
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Size: 0xA4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Experimental.Rendering.XRView
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct XRView/*, public ::System::ValueType*/ {
    public:
    public:
    // readonly UnityEngine.Matrix4x4 projMatrix
    // Size: 0x40
    // Offset: 0x0
    ::UnityEngine::Matrix4x4 projMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // readonly UnityEngine.Matrix4x4 viewMatrix
    // Size: 0x40
    // Offset: 0x40
    ::UnityEngine::Matrix4x4 viewMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // readonly UnityEngine.Rect viewport
    // Size: 0x10
    // Offset: 0x80
    ::UnityEngine::Rect viewport;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // readonly UnityEngine.Mesh occlusionMesh
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Mesh* occlusionMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // readonly System.Int32 textureArraySlice
    // Size: 0x4
    // Offset: 0x98
    int textureArraySlice;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // readonly UnityEngine.Vector2 eyeCenterUV
    // Size: 0x8
    // Offset: 0x9C
    ::UnityEngine::Vector2 eyeCenterUV;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Creating value type constructor for type: XRView
    constexpr XRView(::UnityEngine::Matrix4x4 projMatrix_ = {}, ::UnityEngine::Matrix4x4 viewMatrix_ = {}, ::UnityEngine::Rect viewport_ = {}, ::UnityEngine::Mesh* occlusionMesh_ = {}, int textureArraySlice_ = {}, ::UnityEngine::Vector2 eyeCenterUV_ = {}) noexcept : projMatrix{projMatrix_}, viewMatrix{viewMatrix_}, viewport{viewport_}, occlusionMesh{occlusionMesh_}, textureArraySlice{textureArraySlice_}, eyeCenterUV{eyeCenterUV_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: readonly UnityEngine.Matrix4x4 projMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_projMatrix();
    // Get instance field reference: readonly UnityEngine.Matrix4x4 viewMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_viewMatrix();
    // Get instance field reference: readonly UnityEngine.Rect viewport
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_viewport();
    // Get instance field reference: readonly UnityEngine.Mesh occlusionMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_occlusionMesh();
    // Get instance field reference: readonly System.Int32 textureArraySlice
    [[deprecated("Use field access instead!")]] int& dyn_textureArraySlice();
    // Get instance field reference: readonly UnityEngine.Vector2 eyeCenterUV
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_eyeCenterUV();
    // System.Void .ctor(UnityEngine.Matrix4x4 projMatrix, UnityEngine.Matrix4x4 viewMatrix, UnityEngine.Rect viewport, UnityEngine.Mesh occlusionMesh, System.Int32 textureArraySlice)
    // Offset: 0x52300B8
    XRView(::UnityEngine::Matrix4x4 projMatrix, ::UnityEngine::Matrix4x4 viewMatrix, ::UnityEngine::Rect viewport, ::UnityEngine::Mesh* occlusionMesh, int textureArraySlice);
    // static private UnityEngine.Vector2 ComputeEyeCenterUV(UnityEngine.Matrix4x4 proj)
    // Offset: 0x523028C
    static ::UnityEngine::Vector2 ComputeEyeCenterUV(::UnityEngine::Matrix4x4 proj);
  }; // UnityEngine.Experimental.Rendering.XRView
  #pragma pack(pop)
  static check_size<sizeof(XRView), 156 + sizeof(::UnityEngine::Vector2)> __UnityEngine_Experimental_Rendering_XRViewSizeCheck;
  static_assert(sizeof(XRView) == 0xA4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRView::XRView
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::XRView::ComputeEyeCenterUV
// Il2CppName: ComputeEyeCenterUV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Matrix4x4)>(&UnityEngine::Experimental::Rendering::XRView::ComputeEyeCenterUV)> {
  static const MethodInfo* get() {
    static auto* proj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::XRView), "ComputeEyeCenterUV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{proj});
  }
};
