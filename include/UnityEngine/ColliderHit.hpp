// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ColliderHit
  struct ColliderHit;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ColliderHit, "UnityEngine", "ColliderHit");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ColliderHit
  // [TokenAttribute] Offset: FFFFFFFF
  struct ColliderHit/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 m_ColliderInstanceID
    // Size: 0x4
    // Offset: 0x0
    int m_ColliderInstanceID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ColliderHit
    constexpr ColliderHit(int m_ColliderInstanceID_ = {}) noexcept : m_ColliderInstanceID{m_ColliderInstanceID_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return m_ColliderInstanceID;
    }
    // Get instance field reference: private System.Int32 m_ColliderInstanceID
    [[deprecated("Use field access instead!")]] int& dyn_m_ColliderInstanceID();
    // public System.Int32 get_instanceID()
    // Offset: 0x5535E88
    int get_instanceID();
    // public UnityEngine.Collider get_collider()
    // Offset: 0x5535E90
    ::UnityEngine::Collider* get_collider();
  }; // UnityEngine.ColliderHit
  #pragma pack(pop)
  static check_size<sizeof(ColliderHit), 0 + sizeof(int)> __UnityEngine_ColliderHitSizeCheck;
  static_assert(sizeof(ColliderHit) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ColliderHit::get_instanceID
// Il2CppName: get_instanceID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ColliderHit::*)()>(&UnityEngine::ColliderHit::get_instanceID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ColliderHit), "get_instanceID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ColliderHit::get_collider
// Il2CppName: get_collider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (UnityEngine::ColliderHit::*)()>(&UnityEngine::ColliderHit::get_collider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ColliderHit), "get_collider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
