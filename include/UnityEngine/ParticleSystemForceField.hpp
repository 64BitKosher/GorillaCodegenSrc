// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Behaviour
#include "UnityEngine/Behaviour.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystemForceFieldShape
  struct ParticleSystemForceFieldShape;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Texture3D
  class Texture3D;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystemForceField
  class ParticleSystemForceField;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::ParticleSystemForceField);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ParticleSystemForceField*, "UnityEngine", "ParticleSystemForceField");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ParticleSystemForceField
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class ParticleSystemForceField : public ::UnityEngine::Behaviour {
    public:
    // public UnityEngine.ParticleSystemForceFieldShape get_shape()
    // Offset: 0x5523224
    ::UnityEngine::ParticleSystemForceFieldShape get_shape();
    // public System.Void set_shape(UnityEngine.ParticleSystemForceFieldShape value)
    // Offset: 0x5523260
    void set_shape(::UnityEngine::ParticleSystemForceFieldShape value);
    // public System.Single get_startRange()
    // Offset: 0x55232A4
    float get_startRange();
    // public System.Void set_startRange(System.Single value)
    // Offset: 0x55232E0
    void set_startRange(float value);
    // public System.Single get_endRange()
    // Offset: 0x552332C
    float get_endRange();
    // public System.Void set_endRange(System.Single value)
    // Offset: 0x5523368
    void set_endRange(float value);
    // public System.Single get_length()
    // Offset: 0x55233B4
    float get_length();
    // public System.Void set_length(System.Single value)
    // Offset: 0x55233F0
    void set_length(float value);
    // public System.Single get_gravityFocus()
    // Offset: 0x552343C
    float get_gravityFocus();
    // public System.Void set_gravityFocus(System.Single value)
    // Offset: 0x5523478
    void set_gravityFocus(float value);
    // public UnityEngine.Vector2 get_rotationRandomness()
    // Offset: 0x55234C4
    ::UnityEngine::Vector2 get_rotationRandomness();
    // public System.Void set_rotationRandomness(UnityEngine.Vector2 value)
    // Offset: 0x5523554
    void set_rotationRandomness(::UnityEngine::Vector2 value);
    // public System.Boolean get_multiplyDragByParticleSize()
    // Offset: 0x55235E0
    bool get_multiplyDragByParticleSize();
    // public System.Void set_multiplyDragByParticleSize(System.Boolean value)
    // Offset: 0x552361C
    void set_multiplyDragByParticleSize(bool value);
    // public System.Boolean get_multiplyDragByParticleVelocity()
    // Offset: 0x5523660
    bool get_multiplyDragByParticleVelocity();
    // public System.Void set_multiplyDragByParticleVelocity(System.Boolean value)
    // Offset: 0x552369C
    void set_multiplyDragByParticleVelocity(bool value);
    // public UnityEngine.Texture3D get_vectorField()
    // Offset: 0x55236E0
    ::UnityEngine::Texture3D* get_vectorField();
    // public System.Void set_vectorField(UnityEngine.Texture3D value)
    // Offset: 0x552371C
    void set_vectorField(::UnityEngine::Texture3D* value);
    // public UnityEngine.ParticleSystem/MinMaxCurve get_directionX()
    // Offset: 0x5523760
    ::UnityEngine::ParticleSystem::MinMaxCurve get_directionX();
    // public System.Void set_directionX(UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5523804
    void set_directionX(::UnityEngine::ParticleSystem::MinMaxCurve value);
    // public UnityEngine.ParticleSystem/MinMaxCurve get_directionY()
    // Offset: 0x552388C
    ::UnityEngine::ParticleSystem::MinMaxCurve get_directionY();
    // public System.Void set_directionY(UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5523930
    void set_directionY(::UnityEngine::ParticleSystem::MinMaxCurve value);
    // public UnityEngine.ParticleSystem/MinMaxCurve get_directionZ()
    // Offset: 0x55239B8
    ::UnityEngine::ParticleSystem::MinMaxCurve get_directionZ();
    // public System.Void set_directionZ(UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5523A5C
    void set_directionZ(::UnityEngine::ParticleSystem::MinMaxCurve value);
    // public UnityEngine.ParticleSystem/MinMaxCurve get_gravity()
    // Offset: 0x5523AE4
    ::UnityEngine::ParticleSystem::MinMaxCurve get_gravity();
    // public System.Void set_gravity(UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5523B88
    void set_gravity(::UnityEngine::ParticleSystem::MinMaxCurve value);
    // public UnityEngine.ParticleSystem/MinMaxCurve get_rotationSpeed()
    // Offset: 0x5523C10
    ::UnityEngine::ParticleSystem::MinMaxCurve get_rotationSpeed();
    // public System.Void set_rotationSpeed(UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5523CB4
    void set_rotationSpeed(::UnityEngine::ParticleSystem::MinMaxCurve value);
    // public UnityEngine.ParticleSystem/MinMaxCurve get_rotationAttraction()
    // Offset: 0x5523D3C
    ::UnityEngine::ParticleSystem::MinMaxCurve get_rotationAttraction();
    // public System.Void set_rotationAttraction(UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5523DE0
    void set_rotationAttraction(::UnityEngine::ParticleSystem::MinMaxCurve value);
    // public UnityEngine.ParticleSystem/MinMaxCurve get_drag()
    // Offset: 0x5523E68
    ::UnityEngine::ParticleSystem::MinMaxCurve get_drag();
    // public System.Void set_drag(UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5523F0C
    void set_drag(::UnityEngine::ParticleSystem::MinMaxCurve value);
    // public UnityEngine.ParticleSystem/MinMaxCurve get_vectorFieldSpeed()
    // Offset: 0x5523F94
    ::UnityEngine::ParticleSystem::MinMaxCurve get_vectorFieldSpeed();
    // public System.Void set_vectorFieldSpeed(UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5524038
    void set_vectorFieldSpeed(::UnityEngine::ParticleSystem::MinMaxCurve value);
    // public UnityEngine.ParticleSystem/MinMaxCurve get_vectorFieldAttraction()
    // Offset: 0x55240C0
    ::UnityEngine::ParticleSystem::MinMaxCurve get_vectorFieldAttraction();
    // public System.Void set_vectorFieldAttraction(UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5524164
    void set_vectorFieldAttraction(::UnityEngine::ParticleSystem::MinMaxCurve value);
    // public System.Void .ctor()
    // Offset: 0x55241EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParticleSystemForceField* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ParticleSystemForceField::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParticleSystemForceField*, creationType>()));
    }
    // private System.Void get_rotationRandomness_Injected(out UnityEngine.Vector2 ret)
    // Offset: 0x5523510
    void get_rotationRandomness_Injected(ByRef<::UnityEngine::Vector2> ret);
    // private System.Void set_rotationRandomness_Injected(ref UnityEngine.Vector2 value)
    // Offset: 0x552359C
    void set_rotationRandomness_Injected(ByRef<::UnityEngine::Vector2> value);
    // private System.Void get_directionX_Injected(out UnityEngine.ParticleSystem/MinMaxCurve ret)
    // Offset: 0x55237C0
    void get_directionX_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> ret);
    // private System.Void set_directionX_Injected(ref UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5523848
    void set_directionX_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> value);
    // private System.Void get_directionY_Injected(out UnityEngine.ParticleSystem/MinMaxCurve ret)
    // Offset: 0x55238EC
    void get_directionY_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> ret);
    // private System.Void set_directionY_Injected(ref UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5523974
    void set_directionY_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> value);
    // private System.Void get_directionZ_Injected(out UnityEngine.ParticleSystem/MinMaxCurve ret)
    // Offset: 0x5523A18
    void get_directionZ_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> ret);
    // private System.Void set_directionZ_Injected(ref UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5523AA0
    void set_directionZ_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> value);
    // private System.Void get_gravity_Injected(out UnityEngine.ParticleSystem/MinMaxCurve ret)
    // Offset: 0x5523B44
    void get_gravity_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> ret);
    // private System.Void set_gravity_Injected(ref UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5523BCC
    void set_gravity_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> value);
    // private System.Void get_rotationSpeed_Injected(out UnityEngine.ParticleSystem/MinMaxCurve ret)
    // Offset: 0x5523C70
    void get_rotationSpeed_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> ret);
    // private System.Void set_rotationSpeed_Injected(ref UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5523CF8
    void set_rotationSpeed_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> value);
    // private System.Void get_rotationAttraction_Injected(out UnityEngine.ParticleSystem/MinMaxCurve ret)
    // Offset: 0x5523D9C
    void get_rotationAttraction_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> ret);
    // private System.Void set_rotationAttraction_Injected(ref UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5523E24
    void set_rotationAttraction_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> value);
    // private System.Void get_drag_Injected(out UnityEngine.ParticleSystem/MinMaxCurve ret)
    // Offset: 0x5523EC8
    void get_drag_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> ret);
    // private System.Void set_drag_Injected(ref UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x5523F50
    void set_drag_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> value);
    // private System.Void get_vectorFieldSpeed_Injected(out UnityEngine.ParticleSystem/MinMaxCurve ret)
    // Offset: 0x5523FF4
    void get_vectorFieldSpeed_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> ret);
    // private System.Void set_vectorFieldSpeed_Injected(ref UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x552407C
    void set_vectorFieldSpeed_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> value);
    // private System.Void get_vectorFieldAttraction_Injected(out UnityEngine.ParticleSystem/MinMaxCurve ret)
    // Offset: 0x5524120
    void get_vectorFieldAttraction_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> ret);
    // private System.Void set_vectorFieldAttraction_Injected(ref UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x55241A8
    void set_vectorFieldAttraction_Injected(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve> value);
  }; // UnityEngine.ParticleSystemForceField
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_shape
// Il2CppName: get_shape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystemForceFieldShape (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_shape)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_shape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_shape
// Il2CppName: set_shape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(::UnityEngine::ParticleSystemForceFieldShape)>(&UnityEngine::ParticleSystemForceField::set_shape)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystemForceFieldShape")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_shape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_startRange
// Il2CppName: get_startRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_startRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_startRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_startRange
// Il2CppName: set_startRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(float)>(&UnityEngine::ParticleSystemForceField::set_startRange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_startRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_endRange
// Il2CppName: get_endRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_endRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_endRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_endRange
// Il2CppName: set_endRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(float)>(&UnityEngine::ParticleSystemForceField::set_endRange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_endRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_length
// Il2CppName: get_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_length
// Il2CppName: set_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(float)>(&UnityEngine::ParticleSystemForceField::set_length)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_gravityFocus
// Il2CppName: get_gravityFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_gravityFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_gravityFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_gravityFocus
// Il2CppName: set_gravityFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(float)>(&UnityEngine::ParticleSystemForceField::set_gravityFocus)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_gravityFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_rotationRandomness
// Il2CppName: get_rotationRandomness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_rotationRandomness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_rotationRandomness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_rotationRandomness
// Il2CppName: set_rotationRandomness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(::UnityEngine::Vector2)>(&UnityEngine::ParticleSystemForceField::set_rotationRandomness)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_rotationRandomness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_multiplyDragByParticleSize
// Il2CppName: get_multiplyDragByParticleSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_multiplyDragByParticleSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_multiplyDragByParticleSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_multiplyDragByParticleSize
// Il2CppName: set_multiplyDragByParticleSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(bool)>(&UnityEngine::ParticleSystemForceField::set_multiplyDragByParticleSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_multiplyDragByParticleSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_multiplyDragByParticleVelocity
// Il2CppName: get_multiplyDragByParticleVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_multiplyDragByParticleVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_multiplyDragByParticleVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_multiplyDragByParticleVelocity
// Il2CppName: set_multiplyDragByParticleVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(bool)>(&UnityEngine::ParticleSystemForceField::set_multiplyDragByParticleVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_multiplyDragByParticleVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_vectorField
// Il2CppName: get_vectorField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture3D* (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_vectorField)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_vectorField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_vectorField
// Il2CppName: set_vectorField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(::UnityEngine::Texture3D*)>(&UnityEngine::ParticleSystemForceField::set_vectorField)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture3D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_vectorField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_directionX
// Il2CppName: get_directionX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::MinMaxCurve (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_directionX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_directionX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_directionX
// Il2CppName: set_directionX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(::UnityEngine::ParticleSystem::MinMaxCurve)>(&UnityEngine::ParticleSystemForceField::set_directionX)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_directionX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_directionY
// Il2CppName: get_directionY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::MinMaxCurve (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_directionY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_directionY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_directionY
// Il2CppName: set_directionY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(::UnityEngine::ParticleSystem::MinMaxCurve)>(&UnityEngine::ParticleSystemForceField::set_directionY)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_directionY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_directionZ
// Il2CppName: get_directionZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::MinMaxCurve (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_directionZ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_directionZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_directionZ
// Il2CppName: set_directionZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(::UnityEngine::ParticleSystem::MinMaxCurve)>(&UnityEngine::ParticleSystemForceField::set_directionZ)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_directionZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_gravity
// Il2CppName: get_gravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::MinMaxCurve (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_gravity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_gravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_gravity
// Il2CppName: set_gravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(::UnityEngine::ParticleSystem::MinMaxCurve)>(&UnityEngine::ParticleSystemForceField::set_gravity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_gravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_rotationSpeed
// Il2CppName: get_rotationSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::MinMaxCurve (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_rotationSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_rotationSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_rotationSpeed
// Il2CppName: set_rotationSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(::UnityEngine::ParticleSystem::MinMaxCurve)>(&UnityEngine::ParticleSystemForceField::set_rotationSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_rotationSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_rotationAttraction
// Il2CppName: get_rotationAttraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::MinMaxCurve (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_rotationAttraction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_rotationAttraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_rotationAttraction
// Il2CppName: set_rotationAttraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(::UnityEngine::ParticleSystem::MinMaxCurve)>(&UnityEngine::ParticleSystemForceField::set_rotationAttraction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_rotationAttraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_drag
// Il2CppName: get_drag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::MinMaxCurve (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_drag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_drag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_drag
// Il2CppName: set_drag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(::UnityEngine::ParticleSystem::MinMaxCurve)>(&UnityEngine::ParticleSystemForceField::set_drag)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_drag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_vectorFieldSpeed
// Il2CppName: get_vectorFieldSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::MinMaxCurve (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_vectorFieldSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_vectorFieldSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_vectorFieldSpeed
// Il2CppName: set_vectorFieldSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(::UnityEngine::ParticleSystem::MinMaxCurve)>(&UnityEngine::ParticleSystemForceField::set_vectorFieldSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_vectorFieldSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_vectorFieldAttraction
// Il2CppName: get_vectorFieldAttraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::MinMaxCurve (UnityEngine::ParticleSystemForceField::*)()>(&UnityEngine::ParticleSystemForceField::get_vectorFieldAttraction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_vectorFieldAttraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_vectorFieldAttraction
// Il2CppName: set_vectorFieldAttraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(::UnityEngine::ParticleSystem::MinMaxCurve)>(&UnityEngine::ParticleSystemForceField::set_vectorFieldAttraction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_vectorFieldAttraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_rotationRandomness_Injected
// Il2CppName: get_rotationRandomness_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::Vector2>)>(&UnityEngine::ParticleSystemForceField::get_rotationRandomness_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_rotationRandomness_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_rotationRandomness_Injected
// Il2CppName: set_rotationRandomness_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::Vector2>)>(&UnityEngine::ParticleSystemForceField::set_rotationRandomness_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_rotationRandomness_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_directionX_Injected
// Il2CppName: get_directionX_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::get_directionX_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_directionX_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_directionX_Injected
// Il2CppName: set_directionX_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::set_directionX_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_directionX_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_directionY_Injected
// Il2CppName: get_directionY_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::get_directionY_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_directionY_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_directionY_Injected
// Il2CppName: set_directionY_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::set_directionY_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_directionY_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_directionZ_Injected
// Il2CppName: get_directionZ_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::get_directionZ_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_directionZ_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_directionZ_Injected
// Il2CppName: set_directionZ_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::set_directionZ_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_directionZ_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_gravity_Injected
// Il2CppName: get_gravity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::get_gravity_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_gravity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_gravity_Injected
// Il2CppName: set_gravity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::set_gravity_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_gravity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_rotationSpeed_Injected
// Il2CppName: get_rotationSpeed_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::get_rotationSpeed_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_rotationSpeed_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_rotationSpeed_Injected
// Il2CppName: set_rotationSpeed_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::set_rotationSpeed_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_rotationSpeed_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_rotationAttraction_Injected
// Il2CppName: get_rotationAttraction_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::get_rotationAttraction_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_rotationAttraction_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_rotationAttraction_Injected
// Il2CppName: set_rotationAttraction_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::set_rotationAttraction_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_rotationAttraction_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_drag_Injected
// Il2CppName: get_drag_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::get_drag_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_drag_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_drag_Injected
// Il2CppName: set_drag_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::set_drag_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_drag_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_vectorFieldSpeed_Injected
// Il2CppName: get_vectorFieldSpeed_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::get_vectorFieldSpeed_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_vectorFieldSpeed_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_vectorFieldSpeed_Injected
// Il2CppName: set_vectorFieldSpeed_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::set_vectorFieldSpeed_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_vectorFieldSpeed_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::get_vectorFieldAttraction_Injected
// Il2CppName: get_vectorFieldAttraction_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::get_vectorFieldAttraction_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "get_vectorFieldAttraction_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystemForceField::set_vectorFieldAttraction_Injected
// Il2CppName: set_vectorFieldAttraction_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystemForceField::*)(ByRef<::UnityEngine::ParticleSystem::MinMaxCurve>)>(&UnityEngine::ParticleSystemForceField::set_vectorFieldAttraction_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxCurve")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystemForceField*), "set_vectorFieldAttraction_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
