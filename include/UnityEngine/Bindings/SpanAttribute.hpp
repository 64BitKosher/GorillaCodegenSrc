// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.Bindings
namespace UnityEngine::Bindings {
  // Forward declaring type: SpanAttribute
  class SpanAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Bindings::SpanAttribute);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Bindings::SpanAttribute*, "UnityEngine.Bindings", "SpanAttribute");
// Type namespace: UnityEngine.Bindings
namespace UnityEngine::Bindings {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Bindings.SpanAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [VisibleToOtherModulesAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class SpanAttribute : public ::System::Attribute {
    public:
    public:
    // private readonly System.Boolean <IsReadOnly>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool IsReadOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsReadOnly and: SizeParameter
    char __padding0[0x7] = {};
    // private readonly System.String <SizeParameter>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW SizeParameter;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private readonly System.Boolean <IsReadOnly>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsReadOnly$k__BackingField();
    // Get instance field reference: private readonly System.String <SizeParameter>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$SizeParameter$k__BackingField();
    // public System.Void .ctor(System.String sizeParameter, System.Boolean isReadOnly)
    // Offset: 0x553B520
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpanAttribute* New_ctor(::StringW sizeParameter, bool isReadOnly) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Bindings::SpanAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpanAttribute*, creationType>(sizeParameter, isReadOnly)));
    }
  }; // UnityEngine.Bindings.SpanAttribute
  #pragma pack(pop)
  static check_size<sizeof(SpanAttribute), 24 + sizeof(::StringW)> __UnityEngine_Bindings_SpanAttributeSizeCheck;
  static_assert(sizeof(SpanAttribute) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Bindings::SpanAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
