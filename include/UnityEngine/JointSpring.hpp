// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: JointSpring
  struct JointSpring;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::JointSpring, "UnityEngine", "JointSpring");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.JointSpring
  // [TokenAttribute] Offset: FFFFFFFF
  struct JointSpring/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single spring
    // Size: 0x4
    // Offset: 0x0
    float spring;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single damper
    // Size: 0x4
    // Offset: 0x4
    float damper;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single targetPosition
    // Size: 0x4
    // Offset: 0x8
    float targetPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: JointSpring
    constexpr JointSpring(float spring_ = {}, float damper_ = {}, float targetPosition_ = {}) noexcept : spring{spring_}, damper{damper_}, targetPosition{targetPosition_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single spring
    [[deprecated("Use field access instead!")]] float& dyn_spring();
    // Get instance field reference: public System.Single damper
    [[deprecated("Use field access instead!")]] float& dyn_damper();
    // Get instance field reference: public System.Single targetPosition
    [[deprecated("Use field access instead!")]] float& dyn_targetPosition();
  }; // UnityEngine.JointSpring
  #pragma pack(pop)
  static check_size<sizeof(JointSpring), 8 + sizeof(float)> __UnityEngine_JointSpringSizeCheck;
  static_assert(sizeof(JointSpring) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
