// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.XRMeshSubsystem
#include "UnityEngine/XR/XRMeshSubsystem.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::XRMeshSubsystem::MeshTransformList, "UnityEngine.XR", "XRMeshSubsystem/MeshTransformList");
// Type namespace: UnityEngine.XR
namespace UnityEngine::XR {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.XR.XRMeshSubsystem/MeshTransformList
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeConditionalAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct XRMeshSubsystem::MeshTransformList/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private readonly System.IntPtr m_Self
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr m_Self;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: MeshTransformList
    constexpr MeshTransformList(::System::IntPtr m_Self_ = {}) noexcept : m_Self{m_Self_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return m_Self;
    }
    // Get instance field reference: private readonly System.IntPtr m_Self
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_Self();
    // public System.Void Dispose()
    // Offset: 0x57167A4
    void Dispose();
    // static private System.Void Dispose(System.IntPtr self)
    // Offset: 0x57167E0
    static void Dispose(::System::IntPtr self);
  }; // UnityEngine.XR.XRMeshSubsystem/MeshTransformList
  #pragma pack(pop)
  static check_size<sizeof(XRMeshSubsystem::MeshTransformList), 0 + sizeof(::System::IntPtr)> __UnityEngine_XR_XRMeshSubsystem_MeshTransformListSizeCheck;
  static_assert(sizeof(XRMeshSubsystem::MeshTransformList) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::XRMeshSubsystem::MeshTransformList::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::XRMeshSubsystem::MeshTransformList::*)()>(&UnityEngine::XR::XRMeshSubsystem::MeshTransformList::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRMeshSubsystem::MeshTransformList), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRMeshSubsystem::MeshTransformList::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&UnityEngine::XR::XRMeshSubsystem::MeshTransformList::Dispose)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRMeshSubsystem::MeshTransformList), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self});
  }
};
