// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.IntegratedSubsystem`1
#include "UnityEngine/IntegratedSubsystem_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRDisplaySubsystemDescriptor
  class XRDisplaySubsystemDescriptor;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: RenderTexture
  class RenderTexture;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ScriptableCullingParameters
  struct ScriptableCullingParameters;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Completed forward declares
// Type namespace: UnityEngine.XR
namespace UnityEngine::XR {
  // Forward declaring type: XRDisplaySubsystem
  class XRDisplaySubsystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::XRDisplaySubsystem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::XRDisplaySubsystem*, "UnityEngine.XR", "XRDisplaySubsystem");
// Type namespace: UnityEngine.XR
namespace UnityEngine::XR {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.XR.XRDisplaySubsystem
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  // [NativeTypeAttribute] Offset: FFFFFFFF
  // [NativeConditionalAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  class XRDisplaySubsystem : public ::UnityEngine::IntegratedSubsystem_1<::UnityEngine::XR::XRDisplaySubsystemDescriptor*> {
    public:
    // Nested type: ::UnityEngine::XR::XRDisplaySubsystem::LateLatchNode
    struct LateLatchNode;
    // Nested type: ::UnityEngine::XR::XRDisplaySubsystem::TextureLayout
    struct TextureLayout;
    // Nested type: ::UnityEngine::XR::XRDisplaySubsystem::XRRenderParameter
    struct XRRenderParameter;
    // Nested type: ::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass
    struct XRRenderPass;
    // Nested type: ::UnityEngine::XR::XRDisplaySubsystem::XRBlitParams
    struct XRBlitParams;
    // Nested type: ::UnityEngine::XR::XRDisplaySubsystem::XRMirrorViewBlitDesc
    struct XRMirrorViewBlitDesc;
    public:
    // private System.Action`1<System.Boolean> displayFocusChanged
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_1<bool>* displayFocusChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Action_1<bool>*
    constexpr operator ::System::Action_1<bool>*() const noexcept {
      return displayFocusChanged;
    }
    // Get instance field reference: private System.Action`1<System.Boolean> displayFocusChanged
    [[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& dyn_displayFocusChanged();
    // private System.Void InvokeDisplayFocusChanged(System.Boolean focus)
    // Offset: 0x5714FF0
    void InvokeDisplayFocusChanged(bool focus);
    // public System.Void set_scaleOfAllRenderTargets(System.Single value)
    // Offset: 0x5715010
    void set_scaleOfAllRenderTargets(float value);
    // public System.Void set_zNear(System.Single value)
    // Offset: 0x571505C
    void set_zNear(float value);
    // public System.Void set_zFar(System.Single value)
    // Offset: 0x57150A8
    void set_zFar(float value);
    // public System.Void set_sRGB(System.Boolean value)
    // Offset: 0x57150F4
    void set_sRGB(bool value);
    // public System.Void MarkTransformLateLatched(UnityEngine.Transform transform, UnityEngine.XR.XRDisplaySubsystem/LateLatchNode nodeType)
    // Offset: 0x5715138
    void MarkTransformLateLatched(::UnityEngine::Transform* transform, ::UnityEngine::XR::XRDisplaySubsystem::LateLatchNode nodeType);
    // public System.Void set_textureLayout(UnityEngine.XR.XRDisplaySubsystem/TextureLayout value)
    // Offset: 0x571518C
    void set_textureLayout(::UnityEngine::XR::XRDisplaySubsystem::TextureLayout value);
    // public System.Void SetMSAALevel(System.Int32 level)
    // Offset: 0x57151D0
    void SetMSAALevel(int level);
    // public System.Void set_disableLegacyRenderer(System.Boolean value)
    // Offset: 0x5715214
    void set_disableLegacyRenderer(bool value);
    // public System.Int32 GetRenderPassCount()
    // Offset: 0x5715258
    int GetRenderPassCount();
    // public System.Void GetRenderPass(System.Int32 renderPassIndex, out UnityEngine.XR.XRDisplaySubsystem/XRRenderPass renderPass)
    // Offset: 0x5715294
    void GetRenderPass(int renderPassIndex, ByRef<::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass> renderPass);
    // private System.Boolean Internal_TryGetRenderPass(System.Int32 renderPassIndex, out UnityEngine.XR.XRDisplaySubsystem/XRRenderPass renderPass)
    // Offset: 0x5715338
    bool Internal_TryGetRenderPass(int renderPassIndex, ByRef<::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass> renderPass);
    // public System.Void EndRecordingIfLateLatched(UnityEngine.Camera camera)
    // Offset: 0x571538C
    void EndRecordingIfLateLatched(::UnityEngine::Camera* camera);
    // private System.Boolean Internal_TryEndRecordingIfLateLatched(UnityEngine.Camera camera)
    // Offset: 0x571546C
    bool Internal_TryEndRecordingIfLateLatched(::UnityEngine::Camera* camera);
    // public System.Void BeginRecordingIfLateLatched(UnityEngine.Camera camera)
    // Offset: 0x57154B0
    void BeginRecordingIfLateLatched(::UnityEngine::Camera* camera);
    // private System.Boolean Internal_TryBeginRecordingIfLateLatched(UnityEngine.Camera camera)
    // Offset: 0x5715590
    bool Internal_TryBeginRecordingIfLateLatched(::UnityEngine::Camera* camera);
    // public System.Void GetCullingParameters(UnityEngine.Camera camera, System.Int32 cullingPassIndex, out UnityEngine.Rendering.ScriptableCullingParameters scriptableCullingParameters)
    // Offset: 0x57155D4
    void GetCullingParameters(::UnityEngine::Camera* camera, int cullingPassIndex, ByRef<::UnityEngine::Rendering::ScriptableCullingParameters> scriptableCullingParameters);
    // private System.Boolean Internal_TryGetCullingParams(UnityEngine.Camera camera, System.Int32 cullingPassIndex, out UnityEngine.Rendering.ScriptableCullingParameters scriptableCullingParameters)
    // Offset: 0x57156E0
    bool Internal_TryGetCullingParams(::UnityEngine::Camera* camera, int cullingPassIndex, ByRef<::UnityEngine::Rendering::ScriptableCullingParameters> scriptableCullingParameters);
    // public System.Boolean TryGetAppGPUTimeLastFrame(out System.Single gpuTimeLastFrame)
    // Offset: 0x571573C
    bool TryGetAppGPUTimeLastFrame(ByRef<float> gpuTimeLastFrame);
    // public System.Boolean TryGetCompositorGPUTimeLastFrame(out System.Single gpuTimeLastFrameCompositor)
    // Offset: 0x5715780
    bool TryGetCompositorGPUTimeLastFrame(ByRef<float> gpuTimeLastFrameCompositor);
    // public System.Boolean TryGetDisplayRefreshRate(out System.Single displayRefreshRate)
    // Offset: 0x57157C4
    bool TryGetDisplayRefreshRate(ByRef<float> displayRefreshRate);
    // public System.Boolean TryGetMotionToPhoton(out System.Single motionToPhoton)
    // Offset: 0x5715808
    bool TryGetMotionToPhoton(ByRef<float> motionToPhoton);
    // public System.Int32 GetPreferredMirrorBlitMode()
    // Offset: 0x571584C
    int GetPreferredMirrorBlitMode();
    // public System.Boolean GetMirrorViewBlitDesc(UnityEngine.RenderTexture mirrorRt, out UnityEngine.XR.XRDisplaySubsystem/XRMirrorViewBlitDesc outDesc, System.Int32 mode)
    // Offset: 0x5715888
    bool GetMirrorViewBlitDesc(::UnityEngine::RenderTexture* mirrorRt, ByRef<::UnityEngine::XR::XRDisplaySubsystem::XRMirrorViewBlitDesc> outDesc, int mode);
    // public System.Boolean AddGraphicsThreadMirrorViewBlit(UnityEngine.Rendering.CommandBuffer cmd, System.Boolean allowGraphicsStateInvalidate, System.Int32 mode)
    // Offset: 0x57158E4
    bool AddGraphicsThreadMirrorViewBlit(::UnityEngine::Rendering::CommandBuffer* cmd, bool allowGraphicsStateInvalidate, int mode);
    // public System.Void .ctor()
    // Offset: 0x5715940
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRDisplaySubsystem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::XRDisplaySubsystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRDisplaySubsystem*, creationType>()));
    }
  }; // UnityEngine.XR.XRDisplaySubsystem
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::InvokeDisplayFocusChanged
// Il2CppName: InvokeDisplayFocusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::XRDisplaySubsystem::*)(bool)>(&UnityEngine::XR::XRDisplaySubsystem::InvokeDisplayFocusChanged)> {
  static const MethodInfo* get() {
    static auto* focus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "InvokeDisplayFocusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focus});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::set_scaleOfAllRenderTargets
// Il2CppName: set_scaleOfAllRenderTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::XRDisplaySubsystem::*)(float)>(&UnityEngine::XR::XRDisplaySubsystem::set_scaleOfAllRenderTargets)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "set_scaleOfAllRenderTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::set_zNear
// Il2CppName: set_zNear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::XRDisplaySubsystem::*)(float)>(&UnityEngine::XR::XRDisplaySubsystem::set_zNear)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "set_zNear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::set_zFar
// Il2CppName: set_zFar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::XRDisplaySubsystem::*)(float)>(&UnityEngine::XR::XRDisplaySubsystem::set_zFar)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "set_zFar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::set_sRGB
// Il2CppName: set_sRGB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::XRDisplaySubsystem::*)(bool)>(&UnityEngine::XR::XRDisplaySubsystem::set_sRGB)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "set_sRGB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::MarkTransformLateLatched
// Il2CppName: MarkTransformLateLatched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::XRDisplaySubsystem::*)(::UnityEngine::Transform*, ::UnityEngine::XR::XRDisplaySubsystem::LateLatchNode)>(&UnityEngine::XR::XRDisplaySubsystem::MarkTransformLateLatched)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* nodeType = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRDisplaySubsystem/LateLatchNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "MarkTransformLateLatched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, nodeType});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::set_textureLayout
// Il2CppName: set_textureLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::XRDisplaySubsystem::*)(::UnityEngine::XR::XRDisplaySubsystem::TextureLayout)>(&UnityEngine::XR::XRDisplaySubsystem::set_textureLayout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRDisplaySubsystem/TextureLayout")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "set_textureLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::SetMSAALevel
// Il2CppName: SetMSAALevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::XRDisplaySubsystem::*)(int)>(&UnityEngine::XR::XRDisplaySubsystem::SetMSAALevel)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "SetMSAALevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::set_disableLegacyRenderer
// Il2CppName: set_disableLegacyRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::XRDisplaySubsystem::*)(bool)>(&UnityEngine::XR::XRDisplaySubsystem::set_disableLegacyRenderer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "set_disableLegacyRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::GetRenderPassCount
// Il2CppName: GetRenderPassCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::XRDisplaySubsystem::*)()>(&UnityEngine::XR::XRDisplaySubsystem::GetRenderPassCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "GetRenderPassCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::GetRenderPass
// Il2CppName: GetRenderPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::XRDisplaySubsystem::*)(int, ByRef<::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass>)>(&UnityEngine::XR::XRDisplaySubsystem::GetRenderPass)> {
  static const MethodInfo* get() {
    static auto* renderPassIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* renderPass = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRDisplaySubsystem/XRRenderPass")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "GetRenderPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderPassIndex, renderPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::Internal_TryGetRenderPass
// Il2CppName: Internal_TryGetRenderPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::XRDisplaySubsystem::*)(int, ByRef<::UnityEngine::XR::XRDisplaySubsystem::XRRenderPass>)>(&UnityEngine::XR::XRDisplaySubsystem::Internal_TryGetRenderPass)> {
  static const MethodInfo* get() {
    static auto* renderPassIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* renderPass = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRDisplaySubsystem/XRRenderPass")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "Internal_TryGetRenderPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderPassIndex, renderPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::EndRecordingIfLateLatched
// Il2CppName: EndRecordingIfLateLatched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::XRDisplaySubsystem::*)(::UnityEngine::Camera*)>(&UnityEngine::XR::XRDisplaySubsystem::EndRecordingIfLateLatched)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "EndRecordingIfLateLatched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::Internal_TryEndRecordingIfLateLatched
// Il2CppName: Internal_TryEndRecordingIfLateLatched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::XRDisplaySubsystem::*)(::UnityEngine::Camera*)>(&UnityEngine::XR::XRDisplaySubsystem::Internal_TryEndRecordingIfLateLatched)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "Internal_TryEndRecordingIfLateLatched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::BeginRecordingIfLateLatched
// Il2CppName: BeginRecordingIfLateLatched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::XRDisplaySubsystem::*)(::UnityEngine::Camera*)>(&UnityEngine::XR::XRDisplaySubsystem::BeginRecordingIfLateLatched)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "BeginRecordingIfLateLatched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::Internal_TryBeginRecordingIfLateLatched
// Il2CppName: Internal_TryBeginRecordingIfLateLatched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::XRDisplaySubsystem::*)(::UnityEngine::Camera*)>(&UnityEngine::XR::XRDisplaySubsystem::Internal_TryBeginRecordingIfLateLatched)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "Internal_TryBeginRecordingIfLateLatched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::GetCullingParameters
// Il2CppName: GetCullingParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::XRDisplaySubsystem::*)(::UnityEngine::Camera*, int, ByRef<::UnityEngine::Rendering::ScriptableCullingParameters>)>(&UnityEngine::XR::XRDisplaySubsystem::GetCullingParameters)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cullingPassIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* scriptableCullingParameters = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableCullingParameters")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "GetCullingParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, cullingPassIndex, scriptableCullingParameters});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::Internal_TryGetCullingParams
// Il2CppName: Internal_TryGetCullingParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::XRDisplaySubsystem::*)(::UnityEngine::Camera*, int, ByRef<::UnityEngine::Rendering::ScriptableCullingParameters>)>(&UnityEngine::XR::XRDisplaySubsystem::Internal_TryGetCullingParams)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cullingPassIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* scriptableCullingParameters = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ScriptableCullingParameters")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "Internal_TryGetCullingParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, cullingPassIndex, scriptableCullingParameters});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::TryGetAppGPUTimeLastFrame
// Il2CppName: TryGetAppGPUTimeLastFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::XRDisplaySubsystem::*)(ByRef<float>)>(&UnityEngine::XR::XRDisplaySubsystem::TryGetAppGPUTimeLastFrame)> {
  static const MethodInfo* get() {
    static auto* gpuTimeLastFrame = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "TryGetAppGPUTimeLastFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gpuTimeLastFrame});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::TryGetCompositorGPUTimeLastFrame
// Il2CppName: TryGetCompositorGPUTimeLastFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::XRDisplaySubsystem::*)(ByRef<float>)>(&UnityEngine::XR::XRDisplaySubsystem::TryGetCompositorGPUTimeLastFrame)> {
  static const MethodInfo* get() {
    static auto* gpuTimeLastFrameCompositor = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "TryGetCompositorGPUTimeLastFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gpuTimeLastFrameCompositor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::TryGetDisplayRefreshRate
// Il2CppName: TryGetDisplayRefreshRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::XRDisplaySubsystem::*)(ByRef<float>)>(&UnityEngine::XR::XRDisplaySubsystem::TryGetDisplayRefreshRate)> {
  static const MethodInfo* get() {
    static auto* displayRefreshRate = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "TryGetDisplayRefreshRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayRefreshRate});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::TryGetMotionToPhoton
// Il2CppName: TryGetMotionToPhoton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::XRDisplaySubsystem::*)(ByRef<float>)>(&UnityEngine::XR::XRDisplaySubsystem::TryGetMotionToPhoton)> {
  static const MethodInfo* get() {
    static auto* motionToPhoton = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "TryGetMotionToPhoton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{motionToPhoton});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::GetPreferredMirrorBlitMode
// Il2CppName: GetPreferredMirrorBlitMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::XRDisplaySubsystem::*)()>(&UnityEngine::XR::XRDisplaySubsystem::GetPreferredMirrorBlitMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "GetPreferredMirrorBlitMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::GetMirrorViewBlitDesc
// Il2CppName: GetMirrorViewBlitDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::XRDisplaySubsystem::*)(::UnityEngine::RenderTexture*, ByRef<::UnityEngine::XR::XRDisplaySubsystem::XRMirrorViewBlitDesc>, int)>(&UnityEngine::XR::XRDisplaySubsystem::GetMirrorViewBlitDesc)> {
  static const MethodInfo* get() {
    static auto* mirrorRt = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* outDesc = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRDisplaySubsystem/XRMirrorViewBlitDesc")->this_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "GetMirrorViewBlitDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mirrorRt, outDesc, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::AddGraphicsThreadMirrorViewBlit
// Il2CppName: AddGraphicsThreadMirrorViewBlit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::XRDisplaySubsystem::*)(::UnityEngine::Rendering::CommandBuffer*, bool, int)>(&UnityEngine::XR::XRDisplaySubsystem::AddGraphicsThreadMirrorViewBlit)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* allowGraphicsStateInvalidate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::XRDisplaySubsystem*), "AddGraphicsThreadMirrorViewBlit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd, allowGraphicsStateInvalidate, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::XRDisplaySubsystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
