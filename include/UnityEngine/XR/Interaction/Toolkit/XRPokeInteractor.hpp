// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
#include "UnityEngine/XR/Interaction/Toolkit/XRBaseInteractor.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.UI.IUIInteractor
#include "UnityEngine/XR/Interaction/Toolkit/UI/IUIInteractor.hpp"
// Including type: UnityEngine.QueryTriggerInteraction
#include "UnityEngine/QueryTriggerInteraction.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: UnityEngine.PhysicsScene
#include "UnityEngine/PhysicsScene.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::Filtering
namespace UnityEngine::XR::Interaction::Toolkit::Filtering {
  // Forward declaring type: IXRSelectFilter
  class IXRSelectFilter;
  // Forward declaring type: XRPokeFilter
  class XRPokeFilter;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Collider
  class Collider;
  // Skipping declaration: Component because it is already included!
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: IXRSelectInteractable
  class IXRSelectInteractable;
  // Forward declaring type: IXRInteractable
  class IXRInteractable;
  // Skipping declaration: PokeCollision because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Forward declaring type: RegisteredUIInteractorCache
  class RegisteredUIInteractorCache;
  // Forward declaring type: TrackedDeviceModel
  struct TrackedDeviceModel;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRPokeInteractor
  class XRPokeInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*, "UnityEngine.XR.Interaction.Toolkit", "XRPokeInteractor");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x218
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRPokeInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class XRPokeInteractor : public ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor/*, public ::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor*/ {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::PokeCollision
    struct PokeCollision;
    // Size: 0x19
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRPokeInteractor/PokeCollision
    // [TokenAttribute] Offset: FFFFFFFF
    // [IsReadOnlyAttribute] Offset: FFFFFFFF
    struct PokeCollision/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly UnityEngine.Collider collider
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Collider* collider;
      // Field size check
      static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
      // public readonly UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* interactable;
      // Field size check
      static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*) == 0x8);
      // public readonly UnityEngine.XR.Interaction.Toolkit.Filtering.XRPokeFilter filter
      // Size: 0x8
      // Offset: 0x10
      ::UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter* filter;
      // Field size check
      static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*) == 0x8);
      // public readonly System.Boolean hasPokeFilter
      // Size: 0x1
      // Offset: 0x18
      bool hasPokeFilter;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: PokeCollision
      constexpr PokeCollision(::UnityEngine::Collider* collider_ = {}, ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* interactable_ = {}, ::UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter* filter_ = {}, bool hasPokeFilter_ = {}) noexcept : collider{collider_}, interactable{interactable_}, filter{filter_}, hasPokeFilter{hasPokeFilter_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly UnityEngine.Collider collider
      [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_collider();
      // Get instance field reference: public readonly UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable
      [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*& dyn_interactable();
      // Get instance field reference: public readonly UnityEngine.XR.Interaction.Toolkit.Filtering.XRPokeFilter filter
      [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*& dyn_filter();
      // Get instance field reference: public readonly System.Boolean hasPokeFilter
      [[deprecated("Use field access instead!")]] bool& dyn_hasPokeFilter();
      // public System.Void .ctor(UnityEngine.Collider collider, UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable, UnityEngine.XR.Interaction.Toolkit.Filtering.XRPokeFilter filter)
      // Offset: 0x53F5A5C
      PokeCollision(::UnityEngine::Collider* collider, ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* interactable, ::UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter* filter);
    }; // UnityEngine.XR.Interaction.Toolkit.XRPokeInteractor/PokeCollision
    #pragma pack(pop)
    static check_size<sizeof(XRPokeInteractor::PokeCollision), 24 + sizeof(bool)> __UnityEngine_XR_Interaction_Toolkit_XRPokeInteractor_PokeCollisionSizeCheck;
    static_assert(sizeof(XRPokeInteractor::PokeCollision) == 0x19);
    public:
    // private System.Single m_PokeDepth
    // Size: 0x4
    // Offset: 0x198
    float m_PokeDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_PokeWidth
    // Size: 0x4
    // Offset: 0x19C
    float m_PokeWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_PokeSelectWidth
    // Size: 0x4
    // Offset: 0x1A0
    float m_PokeSelectWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_PokeHoverRadius
    // Size: 0x4
    // Offset: 0x1A4
    float m_PokeHoverRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_PokeInteractionOffset
    // Size: 0x4
    // Offset: 0x1A8
    float m_PokeInteractionOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.LayerMask m_PhysicsLayerMask
    // Size: 0x4
    // Offset: 0x1AC
    ::UnityEngine::LayerMask m_PhysicsLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.QueryTriggerInteraction m_PhysicsTriggerInteraction
    // Size: 0x4
    // Offset: 0x1B0
    ::UnityEngine::QueryTriggerInteraction m_PhysicsTriggerInteraction;
    // Field size check
    static_assert(sizeof(::UnityEngine::QueryTriggerInteraction) == 0x4);
    // private System.Boolean m_RequirePokeFilter
    // Size: 0x1
    // Offset: 0x1B4
    bool m_RequirePokeFilter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_EnableUIInteraction
    // Size: 0x1
    // Offset: 0x1B5
    bool m_EnableUIInteraction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_DebugVisualizationsEnabled
    // Size: 0x1
    // Offset: 0x1B6
    bool m_DebugVisualizationsEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_DebugVisualizationsEnabled and: m_HoverDebugSphere
    char __padding9[0x1] = {};
    // private UnityEngine.GameObject m_HoverDebugSphere
    // Size: 0x8
    // Offset: 0x1B8
    ::UnityEngine::GameObject* m_HoverDebugSphere;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.MeshRenderer m_HoverDebugRenderer
    // Size: 0x8
    // Offset: 0x1C0
    ::UnityEngine::MeshRenderer* m_HoverDebugRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.Vector3 m_LastPokeInteractionPoint
    // Size: 0xC
    // Offset: 0x1C8
    ::UnityEngine::Vector3 m_LastPokeInteractionPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean m_PokeCanSelect
    // Size: 0x1
    // Offset: 0x1D4
    bool m_PokeCanSelect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_FirstFrame
    // Size: 0x1
    // Offset: 0x1D5
    bool m_FirstFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_FirstFrame and: m_CurrentPokeTarget
    char __padding14[0x2] = {};
    // private UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractable m_CurrentPokeTarget
    // Size: 0x8
    // Offset: 0x1D8
    ::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractable* m_CurrentPokeTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractable*) == 0x8);
    // private readonly UnityEngine.RaycastHit[] m_SphereCastHits
    // Size: 0x8
    // Offset: 0x1E0
    ::ArrayW<::UnityEngine::RaycastHit> m_SphereCastHits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private readonly UnityEngine.Collider[] m_OverlapSphereHits
    // Size: 0x8
    // Offset: 0x1E8
    ::ArrayW<::UnityEngine::Collider*> m_OverlapSphereHits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRPokeInteractor/PokeCollision> m_PokeTargets
    // Size: 0x8
    // Offset: 0x1F0
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::PokeCollision>* m_PokeTargets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::PokeCollision>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Filtering.IXRSelectFilter> m_InteractableSelectFilters
    // Size: 0x8
    // Offset: 0x1F8
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Filtering::IXRSelectFilter*>* m_InteractableSelectFilters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Filtering::IXRSelectFilter*>*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.UI.RegisteredUIInteractorCache m_RegisteredUIInteractorCache
    // Size: 0x8
    // Offset: 0x200
    ::UnityEngine::XR::Interaction::Toolkit::UI::RegisteredUIInteractorCache* m_RegisteredUIInteractorCache;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::RegisteredUIInteractorCache*) == 0x8);
    // private UnityEngine.PhysicsScene m_LocalPhysicsScene
    // Size: 0x4
    // Offset: 0x208
    ::UnityEngine::PhysicsScene m_LocalPhysicsScene;
    // Field size check
    static_assert(sizeof(::UnityEngine::PhysicsScene) == 0x4);
    // Padding between fields: m_LocalPhysicsScene and: m_PositionGetter
    char __padding21[0x4] = {};
    // private System.Func`1<UnityEngine.Vector3> m_PositionGetter
    // Size: 0x8
    // Offset: 0x210
    ::System::Func_1<::UnityEngine::Vector3>* m_PositionGetter;
    // Field size check
    static_assert(sizeof(::System::Func_1<::UnityEngine::Vector3>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor
    operator ::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor() noexcept {
      return *reinterpret_cast<::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor*>(this);
    }
    // Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> s_Results
    static ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>* _get_s_Results();
    // Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> s_Results
    static void _set_s_Results(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>* value);
    // Get instance field reference: private System.Single m_PokeDepth
    [[deprecated("Use field access instead!")]] float& dyn_m_PokeDepth();
    // Get instance field reference: private System.Single m_PokeWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_PokeWidth();
    // Get instance field reference: private System.Single m_PokeSelectWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_PokeSelectWidth();
    // Get instance field reference: private System.Single m_PokeHoverRadius
    [[deprecated("Use field access instead!")]] float& dyn_m_PokeHoverRadius();
    // Get instance field reference: private System.Single m_PokeInteractionOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_PokeInteractionOffset();
    // Get instance field reference: private UnityEngine.LayerMask m_PhysicsLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_m_PhysicsLayerMask();
    // Get instance field reference: private UnityEngine.QueryTriggerInteraction m_PhysicsTriggerInteraction
    [[deprecated("Use field access instead!")]] ::UnityEngine::QueryTriggerInteraction& dyn_m_PhysicsTriggerInteraction();
    // Get instance field reference: private System.Boolean m_RequirePokeFilter
    [[deprecated("Use field access instead!")]] bool& dyn_m_RequirePokeFilter();
    // Get instance field reference: private System.Boolean m_EnableUIInteraction
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableUIInteraction();
    // Get instance field reference: private System.Boolean m_DebugVisualizationsEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_m_DebugVisualizationsEnabled();
    // Get instance field reference: private UnityEngine.GameObject m_HoverDebugSphere
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_HoverDebugSphere();
    // Get instance field reference: private UnityEngine.MeshRenderer m_HoverDebugRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_m_HoverDebugRenderer();
    // Get instance field reference: private UnityEngine.Vector3 m_LastPokeInteractionPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_LastPokeInteractionPoint();
    // Get instance field reference: private System.Boolean m_PokeCanSelect
    [[deprecated("Use field access instead!")]] bool& dyn_m_PokeCanSelect();
    // Get instance field reference: private System.Boolean m_FirstFrame
    [[deprecated("Use field access instead!")]] bool& dyn_m_FirstFrame();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractable m_CurrentPokeTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractable*& dyn_m_CurrentPokeTarget();
    // Get instance field reference: private readonly UnityEngine.RaycastHit[] m_SphereCastHits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_m_SphereCastHits();
    // Get instance field reference: private readonly UnityEngine.Collider[] m_OverlapSphereHits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_m_OverlapSphereHits();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRPokeInteractor/PokeCollision> m_PokeTargets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::PokeCollision>*& dyn_m_PokeTargets();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Filtering.IXRSelectFilter> m_InteractableSelectFilters
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Filtering::IXRSelectFilter*>*& dyn_m_InteractableSelectFilters();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.UI.RegisteredUIInteractorCache m_RegisteredUIInteractorCache
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::RegisteredUIInteractorCache*& dyn_m_RegisteredUIInteractorCache();
    // Get instance field reference: private UnityEngine.PhysicsScene m_LocalPhysicsScene
    [[deprecated("Use field access instead!")]] ::UnityEngine::PhysicsScene& dyn_m_LocalPhysicsScene();
    // Get instance field reference: private System.Func`1<UnityEngine.Vector3> m_PositionGetter
    [[deprecated("Use field access instead!")]] ::System::Func_1<::UnityEngine::Vector3>*& dyn_m_PositionGetter();
    // public System.Single get_pokeDepth()
    // Offset: 0x53F4464
    float get_pokeDepth();
    // public System.Void set_pokeDepth(System.Single value)
    // Offset: 0x53F446C
    void set_pokeDepth(float value);
    // public System.Single get_pokeWidth()
    // Offset: 0x53F4474
    float get_pokeWidth();
    // public System.Void set_pokeWidth(System.Single value)
    // Offset: 0x53F447C
    void set_pokeWidth(float value);
    // public System.Single get_pokeSelectWidth()
    // Offset: 0x53F4484
    float get_pokeSelectWidth();
    // public System.Void set_pokeSelectWidth(System.Single value)
    // Offset: 0x53F448C
    void set_pokeSelectWidth(float value);
    // public System.Single get_pokeHoverRadius()
    // Offset: 0x53F4494
    float get_pokeHoverRadius();
    // public System.Void set_pokeHoverRadius(System.Single value)
    // Offset: 0x53F449C
    void set_pokeHoverRadius(float value);
    // public System.Single get_pokeInteractionOffset()
    // Offset: 0x53F44A4
    float get_pokeInteractionOffset();
    // public System.Void set_pokeInteractionOffset(System.Single value)
    // Offset: 0x53F44AC
    void set_pokeInteractionOffset(float value);
    // public UnityEngine.LayerMask get_physicsLayerMask()
    // Offset: 0x53F44B4
    ::UnityEngine::LayerMask get_physicsLayerMask();
    // public System.Void set_physicsLayerMask(UnityEngine.LayerMask value)
    // Offset: 0x53F44BC
    void set_physicsLayerMask(::UnityEngine::LayerMask value);
    // public UnityEngine.QueryTriggerInteraction get_physicsTriggerInteraction()
    // Offset: 0x53F44C4
    ::UnityEngine::QueryTriggerInteraction get_physicsTriggerInteraction();
    // public System.Void set_physicsTriggerInteraction(UnityEngine.QueryTriggerInteraction value)
    // Offset: 0x53F44CC
    void set_physicsTriggerInteraction(::UnityEngine::QueryTriggerInteraction value);
    // public System.Boolean get_requirePokeFilter()
    // Offset: 0x53F44D4
    bool get_requirePokeFilter();
    // public System.Void set_requirePokeFilter(System.Boolean value)
    // Offset: 0x53F44DC
    void set_requirePokeFilter(bool value);
    // public System.Boolean get_enableUIInteraction()
    // Offset: 0x53F44E8
    bool get_enableUIInteraction();
    // public System.Void set_enableUIInteraction(System.Boolean value)
    // Offset: 0x53F44F0
    void set_enableUIInteraction(bool value);
    // public System.Boolean get_debugVisualizationsEnabled()
    // Offset: 0x53F4520
    bool get_debugVisualizationsEnabled();
    // public System.Void set_debugVisualizationsEnabled(System.Boolean value)
    // Offset: 0x53F4528
    void set_debugVisualizationsEnabled(bool value);
    // private System.Boolean EvaluatePokeInteraction(out UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractable newHoveredInteractable)
    // Offset: 0x53F49D4
    bool EvaluatePokeInteraction(ByRef<::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractable*> newHoveredInteractable);
    // private System.Int32 EvaluateSphereOverlap()
    // Offset: 0x53F5078
    int EvaluateSphereOverlap();
    // private System.Boolean FindPokeTarget(UnityEngine.Collider hitCollider, out UnityEngine.XR.Interaction.Toolkit.XRPokeInteractor/PokeCollision newPokeCollision)
    // Offset: 0x53F5530
    bool FindPokeTarget(::UnityEngine::Collider* hitCollider, ByRef<::UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::PokeCollision> newPokeCollision);
    // private System.Void SetDebugObjectVisibility(System.Boolean isVisible)
    // Offset: 0x53F468C
    void SetDebugObjectVisibility(bool isVisible);
    // private System.Void UpdateDebugVisuals()
    // Offset: 0x53F4C30
    void UpdateDebugVisuals();
    // private T GetOrAddComponent()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T GetOrAddComponent() {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::GetOrAddComponent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOrAddComponent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method);
    }
    // static private T GetOrAddComponent(UnityEngine.GameObject go)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T GetOrAddComponent(::UnityEngine::GameObject* go) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::GetOrAddComponent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR.Interaction.Toolkit", "XRPokeInteractor", "GetOrAddComponent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, go);
    }
    // public System.Void UpdateUIModel(ref UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel model)
    // Offset: 0x53F5B10
    void UpdateUIModel(ByRef<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel> model);
    // private UnityEngine.Vector3 GetPokePosition()
    // Offset: 0x53F5E28
    ::UnityEngine::Vector3 GetPokePosition();
    // public System.Boolean TryGetUIModel(out UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel model)
    // Offset: 0x53F5E54
    bool TryGetUIModel(ByRef<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel> model);
    // protected override System.Void Awake()
    // Offset: 0x53F4534
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::Awake()
    void Awake();
    // protected override System.Void OnEnable()
    // Offset: 0x53F4630
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x53F48FC
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::OnDisable()
    void OnDisable();
    // protected override System.Void OnDestroy()
    // Offset: 0x53F493C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::OnDestroy()
    void OnDestroy();
    // public override System.Void PreprocessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    // Offset: 0x53F4940
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::PreprocessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    void PreprocessInteractor(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // public override System.Void ProcessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    // Offset: 0x53F4C20
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::ProcessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    void ProcessInteractor(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // public override System.Void GetValidTargets(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> targets)
    // Offset: 0x53F4CDC
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::GetValidTargets(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> targets)
    void GetValidTargets(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>* targets);
    // public override System.Boolean CanSelect(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractable interactable)
    // Offset: 0x53F5058
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Boolean XRBaseInteractor::CanSelect(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractable interactable)
    bool CanSelect(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractable* interactable);
    // public System.Void .ctor()
    // Offset: 0x53F5E70
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRPokeInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRPokeInteractor*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x53F6014
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::.cctor()
    static void _cctor();
  }; // UnityEngine.XR.Interaction.Toolkit.XRPokeInteractor
  #pragma pack(pop)
  static check_size<sizeof(XRPokeInteractor), 528 + sizeof(::System::Func_1<::UnityEngine::Vector3>*)> __UnityEngine_XR_Interaction_Toolkit_XRPokeInteractorSizeCheck;
  static_assert(sizeof(XRPokeInteractor) == 0x218);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::PokeCollision, "UnityEngine.XR.Interaction.Toolkit", "XRPokeInteractor/PokeCollision");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_pokeDepth
// Il2CppName: get_pokeDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_pokeDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "get_pokeDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_pokeDepth
// Il2CppName: set_pokeDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_pokeDepth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "set_pokeDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_pokeWidth
// Il2CppName: get_pokeWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_pokeWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "get_pokeWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_pokeWidth
// Il2CppName: set_pokeWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_pokeWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "set_pokeWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_pokeSelectWidth
// Il2CppName: get_pokeSelectWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_pokeSelectWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "get_pokeSelectWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_pokeSelectWidth
// Il2CppName: set_pokeSelectWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_pokeSelectWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "set_pokeSelectWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_pokeHoverRadius
// Il2CppName: get_pokeHoverRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_pokeHoverRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "get_pokeHoverRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_pokeHoverRadius
// Il2CppName: set_pokeHoverRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_pokeHoverRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "set_pokeHoverRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_pokeInteractionOffset
// Il2CppName: get_pokeInteractionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_pokeInteractionOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "get_pokeInteractionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_pokeInteractionOffset
// Il2CppName: set_pokeInteractionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_pokeInteractionOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "set_pokeInteractionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_physicsLayerMask
// Il2CppName: get_physicsLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_physicsLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "get_physicsLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_physicsLayerMask
// Il2CppName: set_physicsLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(::UnityEngine::LayerMask)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_physicsLayerMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "set_physicsLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_physicsTriggerInteraction
// Il2CppName: get_physicsTriggerInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::QueryTriggerInteraction (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_physicsTriggerInteraction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "get_physicsTriggerInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_physicsTriggerInteraction
// Il2CppName: set_physicsTriggerInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(::UnityEngine::QueryTriggerInteraction)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_physicsTriggerInteraction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "set_physicsTriggerInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_requirePokeFilter
// Il2CppName: get_requirePokeFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_requirePokeFilter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "get_requirePokeFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_requirePokeFilter
// Il2CppName: set_requirePokeFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_requirePokeFilter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "set_requirePokeFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_enableUIInteraction
// Il2CppName: get_enableUIInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_enableUIInteraction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "get_enableUIInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_enableUIInteraction
// Il2CppName: set_enableUIInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_enableUIInteraction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "set_enableUIInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_debugVisualizationsEnabled
// Il2CppName: get_debugVisualizationsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::get_debugVisualizationsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "get_debugVisualizationsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_debugVisualizationsEnabled
// Il2CppName: set_debugVisualizationsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::set_debugVisualizationsEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "set_debugVisualizationsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::EvaluatePokeInteraction
// Il2CppName: EvaluatePokeInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(ByRef<::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractable*>)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::EvaluatePokeInteraction)> {
  static const MethodInfo* get() {
    static auto* newHoveredInteractable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRSelectInteractable")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "EvaluatePokeInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newHoveredInteractable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::EvaluateSphereOverlap
// Il2CppName: EvaluateSphereOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::EvaluateSphereOverlap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "EvaluateSphereOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::FindPokeTarget
// Il2CppName: FindPokeTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(::UnityEngine::Collider*, ByRef<::UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::PokeCollision>)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::FindPokeTarget)> {
  static const MethodInfo* get() {
    static auto* hitCollider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    static auto* newPokeCollision = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRPokeInteractor/PokeCollision")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "FindPokeTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitCollider, newPokeCollision});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::SetDebugObjectVisibility
// Il2CppName: SetDebugObjectVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::SetDebugObjectVisibility)> {
  static const MethodInfo* get() {
    static auto* isVisible = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "SetDebugObjectVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isVisible});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::UpdateDebugVisuals
// Il2CppName: UpdateDebugVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::UpdateDebugVisuals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "UpdateDebugVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::GetOrAddComponent
// Il2CppName: GetOrAddComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::GetOrAddComponent
// Il2CppName: GetOrAddComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::UpdateUIModel
// Il2CppName: UpdateUIModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(ByRef<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel>)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::UpdateUIModel)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceModel")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "UpdateUIModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::GetPokePosition
// Il2CppName: GetPokePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::GetPokePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "GetPokePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::TryGetUIModel
// Il2CppName: TryGetUIModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(ByRef<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel>)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::TryGetUIModel)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceModel")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "TryGetUIModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::PreprocessInteractor
// Il2CppName: PreprocessInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::PreprocessInteractor)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "PreprocessInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::ProcessInteractor
// Il2CppName: ProcessInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::ProcessInteractor)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "ProcessInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::GetValidTargets
// Il2CppName: GetValidTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::GetValidTargets)> {
  static const MethodInfo* get() {
    static auto* targets = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "GetValidTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targets});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::CanSelect
// Il2CppName: CanSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::CanSelect)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRSelectInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), "CanSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRPokeInteractor*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
