// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRInteractionManager
  class XRInteractionManager;
  // Forward declaring type: IXRInteractable
  class IXRInteractable;
  // Forward declaring type: IXRSelectInteractable
  class IXRSelectInteractable;
  // Forward declaring type: SelectEnterEventArgs
  class SelectEnterEventArgs;
  // Forward declaring type: SelectExitEventArgs
  class SelectExitEventArgs;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRInteractableSnapVolume
  class XRInteractableSnapVolume;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*, "UnityEngine.XR.Interaction.Toolkit", "XRInteractableSnapVolume");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRInteractableSnapVolume
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class XRInteractableSnapVolume : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager m_InteractionManager
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* m_InteractionManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*) == 0x8);
    // private UnityEngine.Object m_InteractableObject
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Object* m_InteractableObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private UnityEngine.Collider m_SnapCollider
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Collider* m_SnapCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // private System.Boolean m_DisableSnapColliderWhenSelected
    // Size: 0x1
    // Offset: 0x38
    bool m_DisableSnapColliderWhenSelected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_DisableSnapColliderWhenSelected and: m_SnapToCollider
    char __padding3[0x7] = {};
    // private UnityEngine.Collider m_SnapToCollider
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Collider* m_SnapToCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.IXRInteractable m_Interactable
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* m_Interactable;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.IXRInteractable m_BoundInteractable
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* m_BoundInteractable;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractable m_BoundSelectInteractable
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractable* m_BoundSelectInteractable;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractable*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager m_RegisteredInteractionManager
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* m_RegisteredInteractionManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*) == 0x8);
    public:
    // Get static field: static private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager s_InteractionManagerCache
    static ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* _get_s_InteractionManagerCache();
    // Set static field: static private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager s_InteractionManagerCache
    static void _set_s_InteractionManagerCache(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* value);
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager m_InteractionManager
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*& dyn_m_InteractionManager();
    // Get instance field reference: private UnityEngine.Object m_InteractableObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn_m_InteractableObject();
    // Get instance field reference: private UnityEngine.Collider m_SnapCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_m_SnapCollider();
    // Get instance field reference: private System.Boolean m_DisableSnapColliderWhenSelected
    [[deprecated("Use field access instead!")]] bool& dyn_m_DisableSnapColliderWhenSelected();
    // Get instance field reference: private UnityEngine.Collider m_SnapToCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_m_SnapToCollider();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.IXRInteractable m_Interactable
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*& dyn_m_Interactable();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.IXRInteractable m_BoundInteractable
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*& dyn_m_BoundInteractable();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractable m_BoundSelectInteractable
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractable*& dyn_m_BoundSelectInteractable();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager m_RegisteredInteractionManager
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*& dyn_m_RegisteredInteractionManager();
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractionManager get_interactionManager()
    // Offset: 0x53E1B3C
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* get_interactionManager();
    // public System.Void set_interactionManager(UnityEngine.XR.Interaction.Toolkit.XRInteractionManager value)
    // Offset: 0x53E1B44
    void set_interactionManager(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* value);
    // public UnityEngine.Object get_interactableObject()
    // Offset: 0x53E1CBC
    ::UnityEngine::Object* get_interactableObject();
    // public System.Void set_interactableObject(UnityEngine.Object value)
    // Offset: 0x53E1CC4
    void set_interactableObject(::UnityEngine::Object* value);
    // public UnityEngine.Collider get_snapCollider()
    // Offset: 0x53E1E5C
    ::UnityEngine::Collider* get_snapCollider();
    // public System.Void set_snapCollider(UnityEngine.Collider value)
    // Offset: 0x53E1E64
    void set_snapCollider(::UnityEngine::Collider* value);
    // public System.Boolean get_disableSnapColliderWhenSelected()
    // Offset: 0x53E2264
    bool get_disableSnapColliderWhenSelected();
    // public System.Void set_disableSnapColliderWhenSelected(System.Boolean value)
    // Offset: 0x53E226C
    void set_disableSnapColliderWhenSelected(bool value);
    // public UnityEngine.Collider get_snapToCollider()
    // Offset: 0x53E22FC
    ::UnityEngine::Collider* get_snapToCollider();
    // public System.Void set_snapToCollider(UnityEngine.Collider value)
    // Offset: 0x53E2304
    void set_snapToCollider(::UnityEngine::Collider* value);
    // public UnityEngine.XR.Interaction.Toolkit.IXRInteractable get_interactable()
    // Offset: 0x53E230C
    ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* get_interactable();
    // public System.Void set_interactable(UnityEngine.XR.Interaction.Toolkit.IXRInteractable value)
    // Offset: 0x53E1D34
    void set_interactable(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* value);
    // protected System.Void Reset()
    // Offset: 0x53E26F8
    void Reset();
    // protected System.Void Awake()
    // Offset: 0x53E26FC
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x53E28A8
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x53E2C28
    void OnDisable();
    // private System.Void FindCreateInteractionManager()
    // Offset: 0x53E2998
    void FindCreateInteractionManager();
    // private System.Void RegisterWithInteractionManager()
    // Offset: 0x53E1BE0
    void RegisterWithInteractionManager();
    // private System.Void UnregisterWithInteractionManager()
    // Offset: 0x53E1F74
    void UnregisterWithInteractionManager();
    // static protected UnityEngine.Collider FindSnapCollider(UnityEngine.GameObject gameObject)
    // Offset: 0x53E2794
    static ::UnityEngine::Collider* FindSnapCollider(::UnityEngine::GameObject* gameObject);
    // static System.Boolean SupportsTriggerCollider(UnityEngine.Collider col)
    // Offset: 0x53E2CE8
    static bool SupportsTriggerCollider(::UnityEngine::Collider* col);
    // private System.Void ValidateSnapCollider()
    // Offset: 0x53E201C
    void ValidateSnapCollider();
    // private System.Void SetSnapColliderEnabled(System.Boolean enable)
    // Offset: 0x53E2C50
    void SetSnapColliderEnabled(bool enable);
    // public UnityEngine.Vector3 GetClosestPoint(UnityEngine.Vector3 point)
    // Offset: 0x53E2E20
    ::UnityEngine::Vector3 GetClosestPoint(::UnityEngine::Vector3 point);
    // private System.Void SetBoundInteractable(UnityEngine.XR.Interaction.Toolkit.IXRInteractable source)
    // Offset: 0x53E2314
    void SetBoundInteractable(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* source);
    // private System.Void RefreshSnapColliderEnabled()
    // Offset: 0x53E219C
    void RefreshSnapColliderEnabled();
    // private System.Void OnFirstSelectEntered(UnityEngine.XR.Interaction.Toolkit.SelectEnterEventArgs args)
    // Offset: 0x53E2FEC
    void OnFirstSelectEntered(::UnityEngine::XR::Interaction::Toolkit::SelectEnterEventArgs* args);
    // private System.Void OnLastSelectExited(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)
    // Offset: 0x53E3000
    void OnLastSelectExited(::UnityEngine::XR::Interaction::Toolkit::SelectExitEventArgs* args);
    // public System.Void .ctor()
    // Offset: 0x53E3014
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRInteractableSnapVolume* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRInteractableSnapVolume*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.XRInteractableSnapVolume
  #pragma pack(pop)
  static check_size<sizeof(XRInteractableSnapVolume), 96 + sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*)> __UnityEngine_XR_Interaction_Toolkit_XRInteractableSnapVolumeSizeCheck;
  static_assert(sizeof(XRInteractableSnapVolume) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::get_interactionManager
// Il2CppName: get_interactionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::get_interactionManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "get_interactionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::set_interactionManager
// Il2CppName: set_interactionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::set_interactionManager)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "set_interactionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::get_interactableObject
// Il2CppName: get_interactableObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Object* (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::get_interactableObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "get_interactableObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::set_interactableObject
// Il2CppName: set_interactableObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)(::UnityEngine::Object*)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::set_interactableObject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "set_interactableObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::get_snapCollider
// Il2CppName: get_snapCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::get_snapCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "get_snapCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::set_snapCollider
// Il2CppName: set_snapCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)(::UnityEngine::Collider*)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::set_snapCollider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "set_snapCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::get_disableSnapColliderWhenSelected
// Il2CppName: get_disableSnapColliderWhenSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::get_disableSnapColliderWhenSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "get_disableSnapColliderWhenSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::set_disableSnapColliderWhenSelected
// Il2CppName: set_disableSnapColliderWhenSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::set_disableSnapColliderWhenSelected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "set_disableSnapColliderWhenSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::get_snapToCollider
// Il2CppName: get_snapToCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::get_snapToCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "get_snapToCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::set_snapToCollider
// Il2CppName: set_snapToCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)(::UnityEngine::Collider*)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::set_snapToCollider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "set_snapToCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::get_interactable
// Il2CppName: get_interactable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::get_interactable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "get_interactable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::set_interactable
// Il2CppName: set_interactable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::set_interactable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "set_interactable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::FindCreateInteractionManager
// Il2CppName: FindCreateInteractionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::FindCreateInteractionManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "FindCreateInteractionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::RegisterWithInteractionManager
// Il2CppName: RegisterWithInteractionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::RegisterWithInteractionManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "RegisterWithInteractionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::UnregisterWithInteractionManager
// Il2CppName: UnregisterWithInteractionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::UnregisterWithInteractionManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "UnregisterWithInteractionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::FindSnapCollider
// Il2CppName: FindSnapCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (*)(::UnityEngine::GameObject*)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::FindSnapCollider)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "FindSnapCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::SupportsTriggerCollider
// Il2CppName: SupportsTriggerCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Collider*)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::SupportsTriggerCollider)> {
  static const MethodInfo* get() {
    static auto* col = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "SupportsTriggerCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::ValidateSnapCollider
// Il2CppName: ValidateSnapCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::ValidateSnapCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "ValidateSnapCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::SetSnapColliderEnabled
// Il2CppName: SetSnapColliderEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::SetSnapColliderEnabled)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "SetSnapColliderEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::GetClosestPoint
// Il2CppName: GetClosestPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)(::UnityEngine::Vector3)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::GetClosestPoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "GetClosestPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::SetBoundInteractable
// Il2CppName: SetBoundInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::SetBoundInteractable)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "SetBoundInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::RefreshSnapColliderEnabled
// Il2CppName: RefreshSnapColliderEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::RefreshSnapColliderEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "RefreshSnapColliderEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::OnFirstSelectEntered
// Il2CppName: OnFirstSelectEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)(::UnityEngine::XR::Interaction::Toolkit::SelectEnterEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::OnFirstSelectEntered)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "SelectEnterEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "OnFirstSelectEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::OnLastSelectExited
// Il2CppName: OnLastSelectExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::*)(::UnityEngine::XR::Interaction::Toolkit::SelectExitEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::OnLastSelectExited)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "SelectExitEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*), "OnLastSelectExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
