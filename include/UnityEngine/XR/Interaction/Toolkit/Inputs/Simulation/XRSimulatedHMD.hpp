// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.XR.XRHMD
#include "UnityEngine/InputSystem/XR/XRHMD.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputDeviceCommand
  struct InputDeviceCommand;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation
namespace UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation {
  // Forward declaring type: XRSimulatedHMD
  class XRSimulatedHMD;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMD);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMD*, "UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation", "XRSimulatedHMD");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation
namespace UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation {
  // Size: 0x1C0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRSimulatedHMD
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  // [InputControlLayoutAttribute] Offset: FFFFFFFF
  class XRSimulatedHMD : public ::UnityEngine::InputSystem::XR::XRHMD {
    public:
    // public System.Void .ctor()
    // Offset: 0x543C264
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRSimulatedHMD* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMD::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRSimulatedHMD*, creationType>()));
    }
    // protected override System.Int64 ExecuteCommand(UnityEngine.InputSystem.LowLevel.InputDeviceCommand* commandPtr)
    // Offset: 0x543C1D8
    // Implemented from: UnityEngine.InputSystem.InputDevice
    // Base method: System.Int64 InputDevice::ExecuteCommand(UnityEngine.InputSystem.LowLevel.InputDeviceCommand* commandPtr)
    int64_t ExecuteCommand(::UnityEngine::InputSystem::LowLevel::InputDeviceCommand* commandPtr);
  }; // UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRSimulatedHMD
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMD::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMD::ExecuteCommand
// Il2CppName: ExecuteCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMD::*)(::UnityEngine::InputSystem::LowLevel::InputDeviceCommand*)>(&UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMD::ExecuteCommand)> {
  static const MethodInfo* get() {
    static auto* commandPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputDeviceCommand"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMD*), "ExecuteCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{commandPtr});
  }
};
