// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.WrapMode
#include "UnityEngine/WrapMode.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Skipping declaration: Allocator because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Utilities.Collections
namespace UnityEngine::XR::Interaction::Toolkit::Utilities::Collections {
  // Forward declaring type: NativeCurve
  struct NativeCurve;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve, "UnityEngine.XR.Interaction.Toolkit.Utilities.Collections", "NativeCurve");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Utilities.Collections
namespace UnityEngine::XR::Interaction::Toolkit::Utilities::Collections {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Utilities.Collections.NativeCurve
  // [TokenAttribute] Offset: FFFFFFFF
  struct NativeCurve/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private Unity.Collections.NativeArray`1<System.Single> m_Values
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<float> m_Values;
    // private UnityEngine.WrapMode m_PreWrapMode
    // Size: 0x4
    // Offset: 0x10
    ::UnityEngine::WrapMode m_PreWrapMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::WrapMode) == 0x4);
    // private UnityEngine.WrapMode m_PostWrapMode
    // Size: 0x4
    // Offset: 0x14
    ::UnityEngine::WrapMode m_PostWrapMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::WrapMode) == 0x4);
    public:
    // Creating value type constructor for type: NativeCurve
    constexpr NativeCurve(::Unity::Collections::NativeArray_1<float> m_Values_ = {}, ::UnityEngine::WrapMode m_PreWrapMode_ = {}, ::UnityEngine::WrapMode m_PostWrapMode_ = {}) noexcept : m_Values{m_Values_}, m_PreWrapMode{m_PreWrapMode_}, m_PostWrapMode{m_PostWrapMode_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.Single> m_Values
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<float>& dyn_m_Values();
    // Get instance field reference: private UnityEngine.WrapMode m_PreWrapMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::WrapMode& dyn_m_PreWrapMode();
    // Get instance field reference: private UnityEngine.WrapMode m_PostWrapMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::WrapMode& dyn_m_PostWrapMode();
    // public System.Boolean get_isCreated()
    // Offset: 0x5419BD8
    bool get_isCreated();
    // private System.Void InitializeValues(System.Int32 count, Unity.Collections.Allocator allocator)
    // Offset: 0x5419C1C
    void InitializeValues(int count, ::Unity::Collections::Allocator allocator);
    // public System.Void Update(UnityEngine.AnimationCurve curve, System.Int32 resolution)
    // Offset: 0x5419CCC
    void Update(::UnityEngine::AnimationCurve* curve, int resolution);
    // public System.Single Evaluate(System.Single t)
    // Offset: 0x5419DA0
    float Evaluate(float t);
    // public System.Void Dispose()
    // Offset: 0x5419F3C
    void Dispose();
    // private System.Single Repeat(System.Single t, System.Single length)
    // Offset: 0x5419FA4
    float Repeat(float t, float length);
    // private System.Single PingPong(System.Single t, System.Single length)
    // Offset: 0x541A038
    float PingPong(float t, float length);
  }; // UnityEngine.XR.Interaction.Toolkit.Utilities.Collections.NativeCurve
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::get_isCreated
// Il2CppName: get_isCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::*)()>(&UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::get_isCreated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve), "get_isCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::InitializeValues
// Il2CppName: InitializeValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::*)(int, ::Unity::Collections::Allocator)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::InitializeValues)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "Allocator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve), "InitializeValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count, allocator});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::*)(::UnityEngine::AnimationCurve*, int)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::Update)> {
  static const MethodInfo* get() {
    static auto* curve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    static auto* resolution = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curve, resolution});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::Evaluate)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::*)()>(&UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::Repeat
// Il2CppName: Repeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::*)(float, float)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::Repeat)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve), "Repeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::PingPong
// Il2CppName: PingPong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::*)(float, float)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve::PingPong)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::Collections::NativeCurve), "PingPong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, length});
  }
};
