// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::XR::CoreUtils::Collections
namespace Unity::XR::CoreUtils::Collections {
  // Forward declaring type: HashSetList`1<T>
  template<typename T>
  class HashSetList_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IDisposable
  class IDisposable;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Utilities
namespace UnityEngine::XR::Interaction::Toolkit::Utilities {
  // Forward declaring type: DisposableManagerSingleton
  class DisposableManagerSingleton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton*, "UnityEngine.XR.Interaction.Toolkit.Utilities", "DisposableManagerSingleton");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Utilities
namespace UnityEngine::XR::Interaction::Toolkit::Utilities {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Utilities.DisposableManagerSingleton
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class DisposableManagerSingleton : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private readonly Unity.XR.CoreUtils.Collections.HashSetList`1<System.IDisposable> m_Disposables
    // Size: 0x8
    // Offset: 0x20
    ::Unity::XR::CoreUtils::Collections::HashSetList_1<::System::IDisposable*>* m_Disposables;
    // Field size check
    static_assert(sizeof(::Unity::XR::CoreUtils::Collections::HashSetList_1<::System::IDisposable*>*) == 0x8);
    public:
    // Get static field: static private UnityEngine.XR.Interaction.Toolkit.Utilities.DisposableManagerSingleton s_DisposableManagerSingleton
    static ::UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton* _get_s_DisposableManagerSingleton();
    // Set static field: static private UnityEngine.XR.Interaction.Toolkit.Utilities.DisposableManagerSingleton s_DisposableManagerSingleton
    static void _set_s_DisposableManagerSingleton(::UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton* value);
    // Get instance field reference: private readonly Unity.XR.CoreUtils.Collections.HashSetList`1<System.IDisposable> m_Disposables
    [[deprecated("Use field access instead!")]] ::Unity::XR::CoreUtils::Collections::HashSetList_1<::System::IDisposable*>*& dyn_m_Disposables();
    // static private UnityEngine.XR.Interaction.Toolkit.Utilities.DisposableManagerSingleton get_instance()
    // Offset: 0x5414BA0
    static ::UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton* get_instance();
    // static private UnityEngine.XR.Interaction.Toolkit.Utilities.DisposableManagerSingleton Initialize()
    // Offset: 0x5414BA4
    static ::UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton* Initialize();
    // private System.Void Awake()
    // Offset: 0x5414CD0
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x5414E0C
    void OnDestroy();
    // private System.Void OnApplicationQuit()
    // Offset: 0x5414FF8
    void OnApplicationQuit();
    // private System.Void DisposeAll()
    // Offset: 0x5414E10
    void DisposeAll();
    // static public System.Void RegisterDisposable(System.IDisposable disposableToRegister)
    // Offset: 0x5414FFC
    static void RegisterDisposable(::System::IDisposable* disposableToRegister);
    // public System.Void .ctor()
    // Offset: 0x5415058
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DisposableManagerSingleton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DisposableManagerSingleton*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.Utilities.DisposableManagerSingleton
  #pragma pack(pop)
  static check_size<sizeof(DisposableManagerSingleton), 32 + sizeof(::Unity::XR::CoreUtils::Collections::HashSetList_1<::System::IDisposable*>*)> __UnityEngine_XR_Interaction_Toolkit_Utilities_DisposableManagerSingletonSizeCheck;
  static_assert(sizeof(DisposableManagerSingleton) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton* (*)()>(&UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton* (*)()>(&UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::*)()>(&UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::*)()>(&UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::*)()>(&UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::DisposeAll
// Il2CppName: DisposeAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::*)()>(&UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::DisposeAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton*), "DisposeAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::RegisterDisposable
// Il2CppName: RegisterDisposable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IDisposable*)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::RegisterDisposable)> {
  static const MethodInfo* get() {
    static auto* disposableToRegister = &::il2cpp_utils::GetClassFromName("System", "IDisposable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton*), "RegisterDisposable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposableToRegister});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::DisposableManagerSingleton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
