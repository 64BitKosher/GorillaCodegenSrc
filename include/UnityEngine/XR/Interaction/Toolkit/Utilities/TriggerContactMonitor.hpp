// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: IXRInteractable
  class IXRInteractable;
  // Forward declaring type: XRInteractionManager
  class XRInteractionManager;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Utilities
namespace UnityEngine::XR::Interaction::Toolkit::Utilities {
  // Forward declaring type: TriggerContactMonitor
  class TriggerContactMonitor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor*, "UnityEngine.XR.Interaction.Toolkit.Utilities", "TriggerContactMonitor");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Utilities
namespace UnityEngine::XR::Interaction::Toolkit::Utilities {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Utilities.TriggerContactMonitor
  // [TokenAttribute] Offset: FFFFFFFF
  class TriggerContactMonitor : public ::Il2CppObject {
    public:
    public:
    // private System.Action`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> contactAdded
    // Size: 0x8
    // Offset: 0x10
    ::System::Action_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>* contactAdded;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*) == 0x8);
    // private System.Action`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> contactRemoved
    // Size: 0x8
    // Offset: 0x18
    ::System::Action_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>* contactRemoved;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager <interactionManager>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* interactionManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<UnityEngine.Collider,UnityEngine.XR.Interaction.Toolkit.IXRInteractable> m_EnteredColliders
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Collider*, ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>* m_EnteredColliders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Collider*, ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> m_UnorderedInteractables
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::HashSet_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>* m_UnorderedInteractables;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<UnityEngine.Collider> m_EnteredUnassociatedColliders
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::HashSet_1<::UnityEngine::Collider*>* m_EnteredUnassociatedColliders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::Collider*>*) == 0x8);
    public:
    // Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Collider> s_ScratchColliders
    static ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* _get_s_ScratchColliders();
    // Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Collider> s_ScratchColliders
    static void _set_s_ScratchColliders(::System::Collections::Generic::List_1<::UnityEngine::Collider*>* value);
    // Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Collider> s_ExitedColliders
    static ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* _get_s_ExitedColliders();
    // Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Collider> s_ExitedColliders
    static void _set_s_ExitedColliders(::System::Collections::Generic::List_1<::UnityEngine::Collider*>* value);
    // Get instance field reference: private System.Action`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> contactAdded
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*& dyn_contactAdded();
    // Get instance field reference: private System.Action`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> contactRemoved
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*& dyn_contactRemoved();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager <interactionManager>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*& dyn_$interactionManager$k__BackingField();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.Collider,UnityEngine.XR.Interaction.Toolkit.IXRInteractable> m_EnteredColliders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Collider*, ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*& dyn_m_EnteredColliders();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> m_UnorderedInteractables
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*& dyn_m_UnorderedInteractables();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<UnityEngine.Collider> m_EnteredUnassociatedColliders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::Collider*>*& dyn_m_EnteredUnassociatedColliders();
    // public System.Void add_contactAdded(System.Action`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> value)
    // Offset: 0x54175DC
    void add_contactAdded(::System::Action_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>* value);
    // public System.Void remove_contactAdded(System.Action`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> value)
    // Offset: 0x541768C
    void remove_contactAdded(::System::Action_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>* value);
    // public System.Void add_contactRemoved(System.Action`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> value)
    // Offset: 0x541773C
    void add_contactRemoved(::System::Action_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>* value);
    // public System.Void remove_contactRemoved(System.Action`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> value)
    // Offset: 0x54177EC
    void remove_contactRemoved(::System::Action_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>* value);
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractionManager get_interactionManager()
    // Offset: 0x541789C
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* get_interactionManager();
    // public System.Void set_interactionManager(UnityEngine.XR.Interaction.Toolkit.XRInteractionManager value)
    // Offset: 0x54178A4
    void set_interactionManager(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* value);
    // public System.Void AddCollider(UnityEngine.Collider collider)
    // Offset: 0x54178AC
    void AddCollider(::UnityEngine::Collider* collider);
    // public System.Void RemoveCollider(UnityEngine.Collider collider)
    // Offset: 0x54179E4
    void RemoveCollider(::UnityEngine::Collider* collider);
    // public System.Void ResolveUnassociatedColliders()
    // Offset: 0x5417C7C
    void ResolveUnassociatedColliders();
    // public System.Void ResolveUnassociatedColliders(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)
    // Offset: 0x54181D4
    void ResolveUnassociatedColliders(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* interactable);
    // public System.Void UpdateStayedColliders(System.Collections.Generic.HashSet`1<UnityEngine.Collider> stayedColliders)
    // Offset: 0x54185D0
    void UpdateStayedColliders(::System::Collections::Generic::HashSet_1<::UnityEngine::Collider*>* stayedColliders);
    // public System.Boolean IsContacting(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)
    // Offset: 0x5418B10
    bool IsContacting(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* interactable);
    // static private System.Boolean IsDestroyed(UnityEngine.Collider col)
    // Offset: 0x5418B68
    static bool IsDestroyed(::UnityEngine::Collider* col);
    // public System.Void .ctor()
    // Offset: 0x5418BC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TriggerContactMonitor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TriggerContactMonitor*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x5418CF4
    static void _cctor();
  }; // UnityEngine.XR.Interaction.Toolkit.Utilities.TriggerContactMonitor
  #pragma pack(pop)
  static check_size<sizeof(TriggerContactMonitor), 56 + sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::Collider*>*)> __UnityEngine_XR_Interaction_Toolkit_Utilities_TriggerContactMonitorSizeCheck;
  static_assert(sizeof(TriggerContactMonitor) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::add_contactAdded
// Il2CppName: add_contactAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::*)(::System::Action_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::add_contactAdded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor*), "add_contactAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::remove_contactAdded
// Il2CppName: remove_contactAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::*)(::System::Action_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::remove_contactAdded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor*), "remove_contactAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::add_contactRemoved
// Il2CppName: add_contactRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::*)(::System::Action_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::add_contactRemoved)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor*), "add_contactRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::remove_contactRemoved
// Il2CppName: remove_contactRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::*)(::System::Action_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::remove_contactRemoved)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor*), "remove_contactRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::get_interactionManager
// Il2CppName: get_interactionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* (UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::*)()>(&UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::get_interactionManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor*), "get_interactionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::set_interactionManager
// Il2CppName: set_interactionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::set_interactionManager)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor*), "set_interactionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::AddCollider
// Il2CppName: AddCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::*)(::UnityEngine::Collider*)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::AddCollider)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor*), "AddCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::RemoveCollider
// Il2CppName: RemoveCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::*)(::UnityEngine::Collider*)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::RemoveCollider)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor*), "RemoveCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::ResolveUnassociatedColliders
// Il2CppName: ResolveUnassociatedColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::*)()>(&UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::ResolveUnassociatedColliders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor*), "ResolveUnassociatedColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::ResolveUnassociatedColliders
// Il2CppName: ResolveUnassociatedColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::ResolveUnassociatedColliders)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor*), "ResolveUnassociatedColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::UpdateStayedColliders
// Il2CppName: UpdateStayedColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::*)(::System::Collections::Generic::HashSet_1<::UnityEngine::Collider*>*)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::UpdateStayedColliders)> {
  static const MethodInfo* get() {
    static auto* stayedColliders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "HashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor*), "UpdateStayedColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stayedColliders});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::IsContacting
// Il2CppName: IsContacting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::IsContacting)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor*), "IsContacting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::IsDestroyed
// Il2CppName: IsDestroyed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Collider*)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::IsDestroyed)> {
  static const MethodInfo* get() {
    static auto* col = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor*), "IsDestroyed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::TriggerContactMonitor*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
