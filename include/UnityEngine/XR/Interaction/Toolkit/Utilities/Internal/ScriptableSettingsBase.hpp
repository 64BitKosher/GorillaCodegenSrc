// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Utilities.Internal
namespace UnityEngine::XR::Interaction::Toolkit::Utilities::Internal {
  // Forward declaring type: ScriptableSettingsBase
  class ScriptableSettingsBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase*, "UnityEngine.XR.Interaction.Toolkit.Utilities.Internal", "ScriptableSettingsBase");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Utilities.Internal
namespace UnityEngine::XR::Interaction::Toolkit::Utilities::Internal {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Utilities.Internal.ScriptableSettingsBase
  // [TokenAttribute] Offset: FFFFFFFF
  class ScriptableSettingsBase : public ::UnityEngine::ScriptableObject {
    public:
    // static field const value: static private System.String k_AbsolutePathMessage
    static constexpr const char* k_AbsolutePathMessage = "Path cannot be absolute";
    // Get static field: static private System.String k_AbsolutePathMessage
    static ::StringW _get_k_AbsolutePathMessage();
    // Set static field: static private System.String k_AbsolutePathMessage
    static void _set_k_AbsolutePathMessage(::StringW value);
    // static field const value: static protected System.String k_PathExceptionMessage
    static constexpr const char* k_PathExceptionMessage = "Exception caught trying to create path.";
    // Get static field: static protected System.String k_PathExceptionMessage
    static ::StringW _get_k_PathExceptionMessage();
    // Set static field: static protected System.String k_PathExceptionMessage
    static void _set_k_PathExceptionMessage(::StringW value);
    // static field const value: static System.String nullPathMessage
    static constexpr const char* nullPathMessage = "Path cannot be null";
    // Get static field: static System.String nullPathMessage
    static ::StringW _get_nullPathMessage();
    // Set static field: static System.String nullPathMessage
    static void _set_nullPathMessage(::StringW value);
    // static field const value: static System.String pathWithPeriodMessage
    static constexpr const char* pathWithPeriodMessage = "Path cannot contain the character '.' before or after a directory separator";
    // Get static field: static System.String pathWithPeriodMessage
    static ::StringW _get_pathWithPeriodMessage();
    // Set static field: static System.String pathWithPeriodMessage
    static void _set_pathWithPeriodMessage(::StringW value);
    // static field const value: static System.String pathWithInvalidCharacterMessage
    static constexpr const char* pathWithInvalidCharacterMessage = "Paths on Windows cannot contain the following characters: ':', '*', '?', '\"', '<', '>', '|'";
    // Get static field: static System.String pathWithInvalidCharacterMessage
    static ::StringW _get_pathWithInvalidCharacterMessage();
    // Set static field: static System.String pathWithInvalidCharacterMessage
    static void _set_pathWithInvalidCharacterMessage(::StringW value);
    // Get static field: static private readonly System.Char[] k_PathTrimChars
    static ::ArrayW<::Il2CppChar> _get_k_PathTrimChars();
    // Set static field: static private readonly System.Char[] k_PathTrimChars
    static void _set_k_PathTrimChars(::ArrayW<::Il2CppChar> value);
    // Get static field: static private readonly System.Char[] k_InvalidCharacters
    static ::ArrayW<::Il2CppChar> _get_k_InvalidCharacters();
    // Set static field: static private readonly System.Char[] k_InvalidCharacters
    static void _set_k_InvalidCharacters(::ArrayW<::Il2CppChar> value);
    // Get static field: static private readonly System.String[] k_InvalidStrings
    static ::ArrayW<::StringW> _get_k_InvalidStrings();
    // Set static field: static private readonly System.String[] k_InvalidStrings
    static void _set_k_InvalidStrings(::ArrayW<::StringW> value);
    // static public UnityEngine.XR.Interaction.Toolkit.Utilities.Internal.ScriptableSettingsBase GetInstanceByType(System.Type settingsType)
    // Offset: 0x54193E0
    static ::UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase* GetInstanceByType(::System::Type* settingsType);
    // private System.Void Awake()
    // Offset: 0x54194A0
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x54194A4
    void OnEnable();
    // protected System.Void OnLoaded()
    // Offset: 0x54194B0
    void OnLoaded();
    // static System.Boolean ValidatePath(System.String path, out System.String cleanedPath)
    // Offset: 0x54194B4
    static bool ValidatePath(::StringW path, ByRef<::StringW> cleanedPath);
    // protected System.Void .ctor()
    // Offset: 0x541999C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScriptableSettingsBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScriptableSettingsBase*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x54199A4
    static void _cctor();
  }; // UnityEngine.XR.Interaction.Toolkit.Utilities.Internal.ScriptableSettingsBase
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::GetInstanceByType
// Il2CppName: GetInstanceByType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase* (*)(::System::Type*)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::GetInstanceByType)> {
  static const MethodInfo* get() {
    static auto* settingsType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase*), "GetInstanceByType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settingsType});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::OnLoaded
// Il2CppName: OnLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::OnLoaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase*), "OnLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::ValidatePath
// Il2CppName: ValidatePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::StringW>)>(&UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::ValidatePath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cleanedPath = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase*), "ValidatePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, cleanedPath});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Utilities::Internal::ScriptableSettingsBase*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
