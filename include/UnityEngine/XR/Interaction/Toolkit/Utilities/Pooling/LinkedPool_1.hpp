// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.PooledObject`1
#include "UnityEngine/XR/Interaction/Toolkit/Utilities/Pooling/PooledObject_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling
namespace UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling {
  // Skipping declaration: LinkedPoolItem because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling
namespace UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling {
  // Forward declaring type: LinkedPool`1<T>
  template<typename T>
  class LinkedPool_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1, "UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling", "LinkedPool`1");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling
namespace UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class LinkedPool_1 : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::LinkedPoolItem<T>
    class LinkedPoolItem;
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1/LinkedPoolItem
    // [TokenAttribute] Offset: FFFFFFFF
    class LinkedPoolItem : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = LinkedPool_1<T>*;
      static constexpr std::string_view NESTED_NAME = "LinkedPoolItem";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1/LinkedPoolItem<T> poolNext
      // Size: 0x8
      // Offset: 0x0
      typename ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<T>::LinkedPoolItem* poolNext;
      // Field size check
      static_assert(sizeof(typename ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<T>::LinkedPoolItem*) == 0x8);
      // T value
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T value;
      public:
      // Autogenerated instance field getter
      // Get instance field: UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1/LinkedPoolItem<T> poolNext
      [[deprecated("Use field access instead!")]] typename ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<T>::LinkedPoolItem*& dyn_poolNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::LinkedPoolItem::dyn_poolNext");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "poolNext"))->offset;
        return *reinterpret_cast<typename ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<T>::LinkedPoolItem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: T value
      [[deprecated("Use field access instead!")]] T& dyn_value() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::LinkedPoolItem::dyn_value");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
        return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename LinkedPool_1<T>::LinkedPoolItem* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::LinkedPoolItem::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename LinkedPool_1<T>::LinkedPoolItem*, creationType>()));
      }
    }; // UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1/LinkedPoolItem
    // Could not write size check! Type: UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1/LinkedPoolItem is generic, or has no fields that are valid for size checks!
    public:
    // private readonly System.Func`1<T> m_CreateFunc
    // Size: 0x8
    // Offset: 0x0
    ::System::Func_1<T>* m_CreateFunc;
    // Field size check
    static_assert(sizeof(::System::Func_1<T>*) == 0x8);
    // private readonly System.Action`1<T> m_ActionOnGet
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_1<T>* m_ActionOnGet;
    // Field size check
    static_assert(sizeof(::System::Action_1<T>*) == 0x8);
    // private readonly System.Action`1<T> m_ActionOnRelease
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_1<T>* m_ActionOnRelease;
    // Field size check
    static_assert(sizeof(::System::Action_1<T>*) == 0x8);
    // private readonly System.Action`1<T> m_ActionOnDestroy
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_1<T>* m_ActionOnDestroy;
    // Field size check
    static_assert(sizeof(::System::Action_1<T>*) == 0x8);
    // private readonly System.Int32 m_Limit
    // Size: 0x4
    // Offset: 0x0
    int m_Limit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1/LinkedPoolItem<T> m_PoolFirst
    // Size: 0x8
    // Offset: 0x0
    typename ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<T>::LinkedPoolItem* m_PoolFirst;
    // Field size check
    static_assert(sizeof(typename ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<T>::LinkedPoolItem*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1/LinkedPoolItem<T> m_NextAvailableListItem
    // Size: 0x8
    // Offset: 0x0
    typename ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<T>::LinkedPoolItem* m_NextAvailableListItem;
    // Field size check
    static_assert(sizeof(typename ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<T>::LinkedPoolItem*) == 0x8);
    // private readonly System.Boolean m_CollectionCheck
    // Size: 0x1
    // Offset: 0x0
    bool m_CollectionCheck;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 <countInactive>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int countInactive;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Func`1<T> m_CreateFunc
    [[deprecated("Use field access instead!")]] ::System::Func_1<T>*& dyn_m_CreateFunc() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::dyn_m_CreateFunc");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CreateFunc"))->offset;
      return *reinterpret_cast<::System::Func_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Action`1<T> m_ActionOnGet
    [[deprecated("Use field access instead!")]] ::System::Action_1<T>*& dyn_m_ActionOnGet() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::dyn_m_ActionOnGet");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ActionOnGet"))->offset;
      return *reinterpret_cast<::System::Action_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Action`1<T> m_ActionOnRelease
    [[deprecated("Use field access instead!")]] ::System::Action_1<T>*& dyn_m_ActionOnRelease() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::dyn_m_ActionOnRelease");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ActionOnRelease"))->offset;
      return *reinterpret_cast<::System::Action_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Action`1<T> m_ActionOnDestroy
    [[deprecated("Use field access instead!")]] ::System::Action_1<T>*& dyn_m_ActionOnDestroy() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::dyn_m_ActionOnDestroy");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ActionOnDestroy"))->offset;
      return *reinterpret_cast<::System::Action_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 m_Limit
    [[deprecated("Use field access instead!")]] int& dyn_m_Limit() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::dyn_m_Limit");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Limit"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1/LinkedPoolItem<T> m_PoolFirst
    [[deprecated("Use field access instead!")]] typename ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<T>::LinkedPoolItem*& dyn_m_PoolFirst() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::dyn_m_PoolFirst");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PoolFirst"))->offset;
      return *reinterpret_cast<typename ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<T>::LinkedPoolItem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1/LinkedPoolItem<T> m_NextAvailableListItem
    [[deprecated("Use field access instead!")]] typename ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<T>::LinkedPoolItem*& dyn_m_NextAvailableListItem() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::dyn_m_NextAvailableListItem");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_NextAvailableListItem"))->offset;
      return *reinterpret_cast<typename ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<T>::LinkedPoolItem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Boolean m_CollectionCheck
    [[deprecated("Use field access instead!")]] bool& dyn_m_CollectionCheck() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::dyn_m_CollectionCheck");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CollectionCheck"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <countInactive>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$countInactive$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::dyn_$countInactive$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<countInactive>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.Func`1<T> createFunc, System.Action`1<T> actionOnGet, System.Action`1<T> actionOnRelease, System.Action`1<T> actionOnDestroy, System.Boolean collectionCheck, System.Int32 maxSize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LinkedPool_1<T>* New_ctor(::System::Func_1<T>* createFunc, ::System::Action_1<T>* actionOnGet, ::System::Action_1<T>* actionOnRelease, ::System::Action_1<T>* actionOnDestroy, bool collectionCheck, int maxSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LinkedPool_1<T>*, creationType>(createFunc, actionOnGet, actionOnRelease, actionOnDestroy, collectionCheck, maxSize)));
    }
    // public System.Int32 get_countInactive()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_countInactive() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::get_countInactive");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_countInactive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Void set_countInactive(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_countInactive(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::set_countInactive");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_countInactive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public T Get()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Get() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::Get");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.PooledObject`1<T> Get(out T v)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::PooledObject_1<T> Get(ByRef<T> v) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::Get");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<T&>()})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::PooledObject_1<T>, false>(this, ___internal__method, byref(v));
    }
    // public System.Void Release(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Release(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::Release");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1
  // Could not write size check! Type: UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
