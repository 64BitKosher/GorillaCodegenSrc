// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: DistanceInfo
  struct DistanceInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::DistanceInfo, "UnityEngine.XR.Interaction.Toolkit", "DistanceInfo");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.DistanceInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct DistanceInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.Vector3 <point>k__BackingField
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 point;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single <distanceSqr>k__BackingField
    // Size: 0x4
    // Offset: 0xC
    float distanceSqr;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Collider <collider>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Collider* collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    public:
    // Creating value type constructor for type: DistanceInfo
    constexpr DistanceInfo(::UnityEngine::Vector3 point_ = {}, float distanceSqr_ = {}, ::UnityEngine::Collider* collider_ = {}) noexcept : point{point_}, distanceSqr{distanceSqr_}, collider{collider_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private UnityEngine.Vector3 <point>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$point$k__BackingField();
    // Get instance field reference: private System.Single <distanceSqr>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$distanceSqr$k__BackingField();
    // Get instance field reference: private UnityEngine.Collider <collider>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_$collider$k__BackingField();
    // public UnityEngine.Vector3 get_point()
    // Offset: 0x53D6774
    ::UnityEngine::Vector3 get_point();
    // public System.Void set_point(UnityEngine.Vector3 value)
    // Offset: 0x53D6780
    void set_point(::UnityEngine::Vector3 value);
    // public System.Single get_distanceSqr()
    // Offset: 0x53D678C
    float get_distanceSqr();
    // public System.Void set_distanceSqr(System.Single value)
    // Offset: 0x53D6794
    void set_distanceSqr(float value);
    // public UnityEngine.Collider get_collider()
    // Offset: 0x53D679C
    ::UnityEngine::Collider* get_collider();
    // public System.Void set_collider(UnityEngine.Collider value)
    // Offset: 0x53D67A4
    void set_collider(::UnityEngine::Collider* value);
  }; // UnityEngine.XR.Interaction.Toolkit.DistanceInfo
  #pragma pack(pop)
  static check_size<sizeof(DistanceInfo), 16 + sizeof(::UnityEngine::Collider*)> __UnityEngine_XR_Interaction_Toolkit_DistanceInfoSizeCheck;
  static_assert(sizeof(DistanceInfo) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::DistanceInfo::get_point
// Il2CppName: get_point
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::XR::Interaction::Toolkit::DistanceInfo::*)()>(&UnityEngine::XR::Interaction::Toolkit::DistanceInfo::get_point)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::DistanceInfo), "get_point", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::DistanceInfo::set_point
// Il2CppName: set_point
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::DistanceInfo::*)(::UnityEngine::Vector3)>(&UnityEngine::XR::Interaction::Toolkit::DistanceInfo::set_point)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::DistanceInfo), "set_point", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::DistanceInfo::get_distanceSqr
// Il2CppName: get_distanceSqr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::DistanceInfo::*)()>(&UnityEngine::XR::Interaction::Toolkit::DistanceInfo::get_distanceSqr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::DistanceInfo), "get_distanceSqr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::DistanceInfo::set_distanceSqr
// Il2CppName: set_distanceSqr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::DistanceInfo::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::DistanceInfo::set_distanceSqr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::DistanceInfo), "set_distanceSqr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::DistanceInfo::get_collider
// Il2CppName: get_collider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (UnityEngine::XR::Interaction::Toolkit::DistanceInfo::*)()>(&UnityEngine::XR::Interaction::Toolkit::DistanceInfo::get_collider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::DistanceInfo), "get_collider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::DistanceInfo::set_collider
// Il2CppName: set_collider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::DistanceInfo::*)(::UnityEngine::Collider*)>(&UnityEngine::XR::Interaction::Toolkit::DistanceInfo::set_collider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::DistanceInfo), "set_collider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
