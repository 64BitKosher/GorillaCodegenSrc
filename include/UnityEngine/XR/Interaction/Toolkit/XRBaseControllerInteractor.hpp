// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
#include "UnityEngine/XR/Interaction/Toolkit/XRBaseInteractor.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.IXRActivateInteractor
#include "UnityEngine/XR/Interaction/Toolkit/IXRActivateInteractor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRBaseController
  class XRBaseController;
  // Forward declaring type: ActivateEventArgs
  class ActivateEventArgs;
  // Forward declaring type: DeactivateEventArgs
  class DeactivateEventArgs;
  // Skipping declaration: XRBaseInteractable because it is already included!
  // Forward declaring type: IXRActivateInteractable
  class IXRActivateInteractable;
  // Skipping declaration: InputTriggerType because it is already included!
  // Forward declaring type: IXRHoverInteractable
  class IXRHoverInteractable;
  // Forward declaring type: SelectEnterEventArgs
  class SelectEnterEventArgs;
  // Forward declaring type: SelectExitEventArgs
  class SelectExitEventArgs;
  // Forward declaring type: HoverEnterEventArgs
  class HoverEnterEventArgs;
  // Forward declaring type: HoverExitEventArgs
  class HoverExitEventArgs;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling
namespace UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling {
  // Forward declaring type: LinkedPool`1<T>
  template<typename T>
  class LinkedPool_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRBaseControllerInteractor
  class XRBaseControllerInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*, "UnityEngine.XR.Interaction.Toolkit", "XRBaseControllerInteractor");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x280
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  class XRBaseControllerInteractor : public ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor/*, public ::UnityEngine::XR::Interaction::Toolkit::IXRActivateInteractor*/ {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType
    struct InputTriggerType;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType
    // [TokenAttribute] Offset: FFFFFFFF
    struct InputTriggerType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InputTriggerType
      constexpr InputTriggerType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType State
      static constexpr const int State = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType State
      static ::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType _get_State();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType State
      static void _set_State(::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType StateChange
      static constexpr const int StateChange = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType StateChange
      static ::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType _get_StateChange();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType StateChange
      static void _set_StateChange(::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType Toggle
      static constexpr const int Toggle = 2;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType Toggle
      static ::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType _get_Toggle();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType Toggle
      static void _set_Toggle(::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType Sticky
      static constexpr const int Sticky = 3;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType Sticky
      static ::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType _get_Sticky();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType Sticky
      static void _set_Sticky(::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType
    #pragma pack(pop)
    static check_size<sizeof(XRBaseControllerInteractor::InputTriggerType), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_XRBaseControllerInteractor_InputTriggerTypeSizeCheck;
    static_assert(sizeof(XRBaseControllerInteractor::InputTriggerType) == 0x4);
    public:
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType m_SelectActionTrigger
    // Size: 0x4
    // Offset: 0x198
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType m_SelectActionTrigger;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType) == 0x4);
    // private System.Boolean m_HideControllerOnSelect
    // Size: 0x1
    // Offset: 0x19C
    bool m_HideControllerOnSelect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_AllowHoveredActivate
    // Size: 0x1
    // Offset: 0x19D
    bool m_AllowHoveredActivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AllowHoveredActivate and: m_TargetPriorityMode
    char __padding2[0x2] = {};
    // private UnityEngine.XR.Interaction.Toolkit.TargetPriorityMode m_TargetPriorityMode
    // Size: 0x4
    // Offset: 0x1A0
    ::UnityEngine::XR::Interaction::Toolkit::TargetPriorityMode m_TargetPriorityMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::TargetPriorityMode) == 0x4);
    // private System.Boolean m_PlayAudioClipOnSelectEntered
    // Size: 0x1
    // Offset: 0x1A4
    bool m_PlayAudioClipOnSelectEntered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayAudioClipOnSelectEntered and: m_AudioClipForOnSelectEntered
    char __padding4[0x3] = {};
    // private UnityEngine.AudioClip m_AudioClipForOnSelectEntered
    // Size: 0x8
    // Offset: 0x1A8
    ::UnityEngine::AudioClip* m_AudioClipForOnSelectEntered;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Boolean m_PlayAudioClipOnSelectExited
    // Size: 0x1
    // Offset: 0x1B0
    bool m_PlayAudioClipOnSelectExited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayAudioClipOnSelectExited and: m_AudioClipForOnSelectExited
    char __padding6[0x7] = {};
    // private UnityEngine.AudioClip m_AudioClipForOnSelectExited
    // Size: 0x8
    // Offset: 0x1B8
    ::UnityEngine::AudioClip* m_AudioClipForOnSelectExited;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Boolean m_PlayAudioClipOnSelectCanceled
    // Size: 0x1
    // Offset: 0x1C0
    bool m_PlayAudioClipOnSelectCanceled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayAudioClipOnSelectCanceled and: m_AudioClipForOnSelectCanceled
    char __padding8[0x7] = {};
    // private UnityEngine.AudioClip m_AudioClipForOnSelectCanceled
    // Size: 0x8
    // Offset: 0x1C8
    ::UnityEngine::AudioClip* m_AudioClipForOnSelectCanceled;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Boolean m_PlayAudioClipOnHoverEntered
    // Size: 0x1
    // Offset: 0x1D0
    bool m_PlayAudioClipOnHoverEntered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayAudioClipOnHoverEntered and: m_AudioClipForOnHoverEntered
    char __padding10[0x7] = {};
    // private UnityEngine.AudioClip m_AudioClipForOnHoverEntered
    // Size: 0x8
    // Offset: 0x1D8
    ::UnityEngine::AudioClip* m_AudioClipForOnHoverEntered;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Boolean m_PlayAudioClipOnHoverExited
    // Size: 0x1
    // Offset: 0x1E0
    bool m_PlayAudioClipOnHoverExited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayAudioClipOnHoverExited and: m_AudioClipForOnHoverExited
    char __padding12[0x7] = {};
    // private UnityEngine.AudioClip m_AudioClipForOnHoverExited
    // Size: 0x8
    // Offset: 0x1E8
    ::UnityEngine::AudioClip* m_AudioClipForOnHoverExited;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Boolean m_PlayAudioClipOnHoverCanceled
    // Size: 0x1
    // Offset: 0x1F0
    bool m_PlayAudioClipOnHoverCanceled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayAudioClipOnHoverCanceled and: m_AudioClipForOnHoverCanceled
    char __padding14[0x7] = {};
    // private UnityEngine.AudioClip m_AudioClipForOnHoverCanceled
    // Size: 0x8
    // Offset: 0x1F8
    ::UnityEngine::AudioClip* m_AudioClipForOnHoverCanceled;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Boolean m_AllowHoverAudioWhileSelecting
    // Size: 0x1
    // Offset: 0x200
    bool m_AllowHoverAudioWhileSelecting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_PlayHapticsOnSelectEntered
    // Size: 0x1
    // Offset: 0x201
    bool m_PlayHapticsOnSelectEntered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayHapticsOnSelectEntered and: m_HapticSelectEnterIntensity
    char __padding17[0x2] = {};
    // private System.Single m_HapticSelectEnterIntensity
    // Size: 0x4
    // Offset: 0x204
    float m_HapticSelectEnterIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_HapticSelectEnterDuration
    // Size: 0x4
    // Offset: 0x208
    float m_HapticSelectEnterDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_PlayHapticsOnSelectExited
    // Size: 0x1
    // Offset: 0x20C
    bool m_PlayHapticsOnSelectExited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayHapticsOnSelectExited and: m_HapticSelectExitIntensity
    char __padding20[0x3] = {};
    // private System.Single m_HapticSelectExitIntensity
    // Size: 0x4
    // Offset: 0x210
    float m_HapticSelectExitIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_HapticSelectExitDuration
    // Size: 0x4
    // Offset: 0x214
    float m_HapticSelectExitDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_PlayHapticsOnSelectCanceled
    // Size: 0x1
    // Offset: 0x218
    bool m_PlayHapticsOnSelectCanceled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayHapticsOnSelectCanceled and: m_HapticSelectCancelIntensity
    char __padding23[0x3] = {};
    // private System.Single m_HapticSelectCancelIntensity
    // Size: 0x4
    // Offset: 0x21C
    float m_HapticSelectCancelIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_HapticSelectCancelDuration
    // Size: 0x4
    // Offset: 0x220
    float m_HapticSelectCancelDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_PlayHapticsOnHoverEntered
    // Size: 0x1
    // Offset: 0x224
    bool m_PlayHapticsOnHoverEntered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayHapticsOnHoverEntered and: m_HapticHoverEnterIntensity
    char __padding26[0x3] = {};
    // private System.Single m_HapticHoverEnterIntensity
    // Size: 0x4
    // Offset: 0x228
    float m_HapticHoverEnterIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_HapticHoverEnterDuration
    // Size: 0x4
    // Offset: 0x22C
    float m_HapticHoverEnterDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_PlayHapticsOnHoverExited
    // Size: 0x1
    // Offset: 0x230
    bool m_PlayHapticsOnHoverExited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayHapticsOnHoverExited and: m_HapticHoverExitIntensity
    char __padding29[0x3] = {};
    // private System.Single m_HapticHoverExitIntensity
    // Size: 0x4
    // Offset: 0x234
    float m_HapticHoverExitIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_HapticHoverExitDuration
    // Size: 0x4
    // Offset: 0x238
    float m_HapticHoverExitDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_PlayHapticsOnHoverCanceled
    // Size: 0x1
    // Offset: 0x23C
    bool m_PlayHapticsOnHoverCanceled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayHapticsOnHoverCanceled and: m_HapticHoverCancelIntensity
    char __padding32[0x3] = {};
    // private System.Single m_HapticHoverCancelIntensity
    // Size: 0x4
    // Offset: 0x240
    float m_HapticHoverCancelIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_HapticHoverCancelDuration
    // Size: 0x4
    // Offset: 0x244
    float m_HapticHoverCancelDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_AllowHoverHapticsWhileSelecting
    // Size: 0x1
    // Offset: 0x248
    bool m_AllowHoverHapticsWhileSelecting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_AllowActivate
    // Size: 0x1
    // Offset: 0x249
    bool m_AllowActivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AllowActivate and: m_Controller
    char __padding36[0x6] = {};
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseController m_Controller
    // Size: 0x8
    // Offset: 0x250
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseController* m_Controller;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseController*) == 0x8);
    // private readonly UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1<UnityEngine.XR.Interaction.Toolkit.ActivateEventArgs> m_ActivateEventArgs
    // Size: 0x8
    // Offset: 0x258
    ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<::UnityEngine::XR::Interaction::Toolkit::ActivateEventArgs*>* m_ActivateEventArgs;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<::UnityEngine::XR::Interaction::Toolkit::ActivateEventArgs*>*) == 0x8);
    // private readonly UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1<UnityEngine.XR.Interaction.Toolkit.DeactivateEventArgs> m_DeactivateEventArgs
    // Size: 0x8
    // Offset: 0x260
    ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<::UnityEngine::XR::Interaction::Toolkit::DeactivateEventArgs*>* m_DeactivateEventArgs;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<::UnityEngine::XR::Interaction::Toolkit::DeactivateEventArgs*>*) == 0x8);
    // private System.Boolean m_ToggleSelectActive
    // Size: 0x1
    // Offset: 0x268
    bool m_ToggleSelectActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ToggleSelectDeactivatedThisFrame
    // Size: 0x1
    // Offset: 0x269
    bool m_ToggleSelectDeactivatedThisFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_WaitingForSelectDeactivate
    // Size: 0x1
    // Offset: 0x26A
    bool m_WaitingForSelectDeactivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_WaitingForSelectDeactivate and: m_EffectsAudioSource
    char __padding42[0x5] = {};
    // private UnityEngine.AudioSource m_EffectsAudioSource
    // Size: 0x8
    // Offset: 0x270
    ::UnityEngine::AudioSource* m_EffectsAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> <validTargets>k__BackingField
    // Size: 0x8
    // Offset: 0x278
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* validTargets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::XR::Interaction::Toolkit::IXRActivateInteractor
    operator ::UnityEngine::XR::Interaction::Toolkit::IXRActivateInteractor() noexcept {
      return *reinterpret_cast<::UnityEngine::XR::Interaction::Toolkit::IXRActivateInteractor*>(this);
    }
    // Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRActivateInteractable> s_ActivateTargets
    static ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRActivateInteractable*>* _get_s_ActivateTargets();
    // Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRActivateInteractable> s_ActivateTargets
    static void _set_s_ActivateTargets(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRActivateInteractable*>* value);
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType m_SelectActionTrigger
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType& dyn_m_SelectActionTrigger();
    // Get instance field reference: private System.Boolean m_HideControllerOnSelect
    [[deprecated("Use field access instead!")]] bool& dyn_m_HideControllerOnSelect();
    // Get instance field reference: private System.Boolean m_AllowHoveredActivate
    [[deprecated("Use field access instead!")]] bool& dyn_m_AllowHoveredActivate();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.TargetPriorityMode m_TargetPriorityMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::TargetPriorityMode& dyn_m_TargetPriorityMode();
    // Get instance field reference: private System.Boolean m_PlayAudioClipOnSelectEntered
    [[deprecated("Use field access instead!")]] bool& dyn_m_PlayAudioClipOnSelectEntered();
    // Get instance field reference: private UnityEngine.AudioClip m_AudioClipForOnSelectEntered
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_m_AudioClipForOnSelectEntered();
    // Get instance field reference: private System.Boolean m_PlayAudioClipOnSelectExited
    [[deprecated("Use field access instead!")]] bool& dyn_m_PlayAudioClipOnSelectExited();
    // Get instance field reference: private UnityEngine.AudioClip m_AudioClipForOnSelectExited
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_m_AudioClipForOnSelectExited();
    // Get instance field reference: private System.Boolean m_PlayAudioClipOnSelectCanceled
    [[deprecated("Use field access instead!")]] bool& dyn_m_PlayAudioClipOnSelectCanceled();
    // Get instance field reference: private UnityEngine.AudioClip m_AudioClipForOnSelectCanceled
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_m_AudioClipForOnSelectCanceled();
    // Get instance field reference: private System.Boolean m_PlayAudioClipOnHoverEntered
    [[deprecated("Use field access instead!")]] bool& dyn_m_PlayAudioClipOnHoverEntered();
    // Get instance field reference: private UnityEngine.AudioClip m_AudioClipForOnHoverEntered
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_m_AudioClipForOnHoverEntered();
    // Get instance field reference: private System.Boolean m_PlayAudioClipOnHoverExited
    [[deprecated("Use field access instead!")]] bool& dyn_m_PlayAudioClipOnHoverExited();
    // Get instance field reference: private UnityEngine.AudioClip m_AudioClipForOnHoverExited
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_m_AudioClipForOnHoverExited();
    // Get instance field reference: private System.Boolean m_PlayAudioClipOnHoverCanceled
    [[deprecated("Use field access instead!")]] bool& dyn_m_PlayAudioClipOnHoverCanceled();
    // Get instance field reference: private UnityEngine.AudioClip m_AudioClipForOnHoverCanceled
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_m_AudioClipForOnHoverCanceled();
    // Get instance field reference: private System.Boolean m_AllowHoverAudioWhileSelecting
    [[deprecated("Use field access instead!")]] bool& dyn_m_AllowHoverAudioWhileSelecting();
    // Get instance field reference: private System.Boolean m_PlayHapticsOnSelectEntered
    [[deprecated("Use field access instead!")]] bool& dyn_m_PlayHapticsOnSelectEntered();
    // Get instance field reference: private System.Single m_HapticSelectEnterIntensity
    [[deprecated("Use field access instead!")]] float& dyn_m_HapticSelectEnterIntensity();
    // Get instance field reference: private System.Single m_HapticSelectEnterDuration
    [[deprecated("Use field access instead!")]] float& dyn_m_HapticSelectEnterDuration();
    // Get instance field reference: private System.Boolean m_PlayHapticsOnSelectExited
    [[deprecated("Use field access instead!")]] bool& dyn_m_PlayHapticsOnSelectExited();
    // Get instance field reference: private System.Single m_HapticSelectExitIntensity
    [[deprecated("Use field access instead!")]] float& dyn_m_HapticSelectExitIntensity();
    // Get instance field reference: private System.Single m_HapticSelectExitDuration
    [[deprecated("Use field access instead!")]] float& dyn_m_HapticSelectExitDuration();
    // Get instance field reference: private System.Boolean m_PlayHapticsOnSelectCanceled
    [[deprecated("Use field access instead!")]] bool& dyn_m_PlayHapticsOnSelectCanceled();
    // Get instance field reference: private System.Single m_HapticSelectCancelIntensity
    [[deprecated("Use field access instead!")]] float& dyn_m_HapticSelectCancelIntensity();
    // Get instance field reference: private System.Single m_HapticSelectCancelDuration
    [[deprecated("Use field access instead!")]] float& dyn_m_HapticSelectCancelDuration();
    // Get instance field reference: private System.Boolean m_PlayHapticsOnHoverEntered
    [[deprecated("Use field access instead!")]] bool& dyn_m_PlayHapticsOnHoverEntered();
    // Get instance field reference: private System.Single m_HapticHoverEnterIntensity
    [[deprecated("Use field access instead!")]] float& dyn_m_HapticHoverEnterIntensity();
    // Get instance field reference: private System.Single m_HapticHoverEnterDuration
    [[deprecated("Use field access instead!")]] float& dyn_m_HapticHoverEnterDuration();
    // Get instance field reference: private System.Boolean m_PlayHapticsOnHoverExited
    [[deprecated("Use field access instead!")]] bool& dyn_m_PlayHapticsOnHoverExited();
    // Get instance field reference: private System.Single m_HapticHoverExitIntensity
    [[deprecated("Use field access instead!")]] float& dyn_m_HapticHoverExitIntensity();
    // Get instance field reference: private System.Single m_HapticHoverExitDuration
    [[deprecated("Use field access instead!")]] float& dyn_m_HapticHoverExitDuration();
    // Get instance field reference: private System.Boolean m_PlayHapticsOnHoverCanceled
    [[deprecated("Use field access instead!")]] bool& dyn_m_PlayHapticsOnHoverCanceled();
    // Get instance field reference: private System.Single m_HapticHoverCancelIntensity
    [[deprecated("Use field access instead!")]] float& dyn_m_HapticHoverCancelIntensity();
    // Get instance field reference: private System.Single m_HapticHoverCancelDuration
    [[deprecated("Use field access instead!")]] float& dyn_m_HapticHoverCancelDuration();
    // Get instance field reference: private System.Boolean m_AllowHoverHapticsWhileSelecting
    [[deprecated("Use field access instead!")]] bool& dyn_m_AllowHoverHapticsWhileSelecting();
    // Get instance field reference: private System.Boolean m_AllowActivate
    [[deprecated("Use field access instead!")]] bool& dyn_m_AllowActivate();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseController m_Controller
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRBaseController*& dyn_m_Controller();
    // Get instance field reference: private readonly UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1<UnityEngine.XR.Interaction.Toolkit.ActivateEventArgs> m_ActivateEventArgs
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<::UnityEngine::XR::Interaction::Toolkit::ActivateEventArgs*>*& dyn_m_ActivateEventArgs();
    // Get instance field reference: private readonly UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1<UnityEngine.XR.Interaction.Toolkit.DeactivateEventArgs> m_DeactivateEventArgs
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<::UnityEngine::XR::Interaction::Toolkit::DeactivateEventArgs*>*& dyn_m_DeactivateEventArgs();
    // Get instance field reference: private System.Boolean m_ToggleSelectActive
    [[deprecated("Use field access instead!")]] bool& dyn_m_ToggleSelectActive();
    // Get instance field reference: private System.Boolean m_ToggleSelectDeactivatedThisFrame
    [[deprecated("Use field access instead!")]] bool& dyn_m_ToggleSelectDeactivatedThisFrame();
    // Get instance field reference: private System.Boolean m_WaitingForSelectDeactivate
    [[deprecated("Use field access instead!")]] bool& dyn_m_WaitingForSelectDeactivate();
    // Get instance field reference: private UnityEngine.AudioSource m_EffectsAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_m_EffectsAudioSource();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> <validTargets>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*& dyn_$validTargets$k__BackingField();
    // public UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType get_selectActionTrigger()
    // Offset: 0x53E7608
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType get_selectActionTrigger();
    // public System.Void set_selectActionTrigger(UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor/InputTriggerType value)
    // Offset: 0x53E7610
    void set_selectActionTrigger(::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType value);
    // public System.Boolean get_hideControllerOnSelect()
    // Offset: 0x53E7618
    bool get_hideControllerOnSelect();
    // public System.Void set_hideControllerOnSelect(System.Boolean value)
    // Offset: 0x53E7620
    void set_hideControllerOnSelect(bool value);
    // public System.Boolean get_allowHoveredActivate()
    // Offset: 0x53E76C0
    bool get_allowHoveredActivate();
    // public System.Void set_allowHoveredActivate(System.Boolean value)
    // Offset: 0x53E76C8
    void set_allowHoveredActivate(bool value);
    // public System.Boolean get_playAudioClipOnSelectEntered()
    // Offset: 0x53E76E4
    bool get_playAudioClipOnSelectEntered();
    // public System.Void set_playAudioClipOnSelectEntered(System.Boolean value)
    // Offset: 0x53E76EC
    void set_playAudioClipOnSelectEntered(bool value);
    // public UnityEngine.AudioClip get_audioClipForOnSelectEntered()
    // Offset: 0x53E76F8
    ::UnityEngine::AudioClip* get_audioClipForOnSelectEntered();
    // public System.Void set_audioClipForOnSelectEntered(UnityEngine.AudioClip value)
    // Offset: 0x53E7700
    void set_audioClipForOnSelectEntered(::UnityEngine::AudioClip* value);
    // public System.Boolean get_playAudioClipOnSelectExited()
    // Offset: 0x53E7710
    bool get_playAudioClipOnSelectExited();
    // public System.Void set_playAudioClipOnSelectExited(System.Boolean value)
    // Offset: 0x53E7718
    void set_playAudioClipOnSelectExited(bool value);
    // public UnityEngine.AudioClip get_audioClipForOnSelectExited()
    // Offset: 0x53E7724
    ::UnityEngine::AudioClip* get_audioClipForOnSelectExited();
    // public System.Void set_audioClipForOnSelectExited(UnityEngine.AudioClip value)
    // Offset: 0x53E772C
    void set_audioClipForOnSelectExited(::UnityEngine::AudioClip* value);
    // public System.Boolean get_playAudioClipOnSelectCanceled()
    // Offset: 0x53E773C
    bool get_playAudioClipOnSelectCanceled();
    // public System.Void set_playAudioClipOnSelectCanceled(System.Boolean value)
    // Offset: 0x53E7744
    void set_playAudioClipOnSelectCanceled(bool value);
    // public UnityEngine.AudioClip get_audioClipForOnSelectCanceled()
    // Offset: 0x53E7750
    ::UnityEngine::AudioClip* get_audioClipForOnSelectCanceled();
    // public System.Void set_audioClipForOnSelectCanceled(UnityEngine.AudioClip value)
    // Offset: 0x53E7758
    void set_audioClipForOnSelectCanceled(::UnityEngine::AudioClip* value);
    // public System.Boolean get_playAudioClipOnHoverEntered()
    // Offset: 0x53E7768
    bool get_playAudioClipOnHoverEntered();
    // public System.Void set_playAudioClipOnHoverEntered(System.Boolean value)
    // Offset: 0x53E7770
    void set_playAudioClipOnHoverEntered(bool value);
    // public UnityEngine.AudioClip get_audioClipForOnHoverEntered()
    // Offset: 0x53E777C
    ::UnityEngine::AudioClip* get_audioClipForOnHoverEntered();
    // public System.Void set_audioClipForOnHoverEntered(UnityEngine.AudioClip value)
    // Offset: 0x53E7784
    void set_audioClipForOnHoverEntered(::UnityEngine::AudioClip* value);
    // public System.Boolean get_playAudioClipOnHoverExited()
    // Offset: 0x53E7794
    bool get_playAudioClipOnHoverExited();
    // public System.Void set_playAudioClipOnHoverExited(System.Boolean value)
    // Offset: 0x53E779C
    void set_playAudioClipOnHoverExited(bool value);
    // public UnityEngine.AudioClip get_audioClipForOnHoverExited()
    // Offset: 0x53E77A8
    ::UnityEngine::AudioClip* get_audioClipForOnHoverExited();
    // public System.Void set_audioClipForOnHoverExited(UnityEngine.AudioClip value)
    // Offset: 0x53E77B0
    void set_audioClipForOnHoverExited(::UnityEngine::AudioClip* value);
    // public System.Boolean get_playAudioClipOnHoverCanceled()
    // Offset: 0x53E77C0
    bool get_playAudioClipOnHoverCanceled();
    // public System.Void set_playAudioClipOnHoverCanceled(System.Boolean value)
    // Offset: 0x53E77C8
    void set_playAudioClipOnHoverCanceled(bool value);
    // public UnityEngine.AudioClip get_audioClipForOnHoverCanceled()
    // Offset: 0x53E77D4
    ::UnityEngine::AudioClip* get_audioClipForOnHoverCanceled();
    // public System.Void set_audioClipForOnHoverCanceled(UnityEngine.AudioClip value)
    // Offset: 0x53E77DC
    void set_audioClipForOnHoverCanceled(::UnityEngine::AudioClip* value);
    // public System.Boolean get_allowHoverAudioWhileSelecting()
    // Offset: 0x53E77EC
    bool get_allowHoverAudioWhileSelecting();
    // public System.Void set_allowHoverAudioWhileSelecting(System.Boolean value)
    // Offset: 0x53E77F4
    void set_allowHoverAudioWhileSelecting(bool value);
    // public System.Boolean get_playHapticsOnSelectEntered()
    // Offset: 0x53E7800
    bool get_playHapticsOnSelectEntered();
    // public System.Void set_playHapticsOnSelectEntered(System.Boolean value)
    // Offset: 0x53E7808
    void set_playHapticsOnSelectEntered(bool value);
    // public System.Single get_hapticSelectEnterIntensity()
    // Offset: 0x53E7814
    float get_hapticSelectEnterIntensity();
    // public System.Void set_hapticSelectEnterIntensity(System.Single value)
    // Offset: 0x53E781C
    void set_hapticSelectEnterIntensity(float value);
    // public System.Single get_hapticSelectEnterDuration()
    // Offset: 0x53E7824
    float get_hapticSelectEnterDuration();
    // public System.Void set_hapticSelectEnterDuration(System.Single value)
    // Offset: 0x53E782C
    void set_hapticSelectEnterDuration(float value);
    // public System.Boolean get_playHapticsOnSelectExited()
    // Offset: 0x53E7834
    bool get_playHapticsOnSelectExited();
    // public System.Void set_playHapticsOnSelectExited(System.Boolean value)
    // Offset: 0x53E783C
    void set_playHapticsOnSelectExited(bool value);
    // public System.Single get_hapticSelectExitIntensity()
    // Offset: 0x53E7848
    float get_hapticSelectExitIntensity();
    // public System.Void set_hapticSelectExitIntensity(System.Single value)
    // Offset: 0x53E7850
    void set_hapticSelectExitIntensity(float value);
    // public System.Single get_hapticSelectExitDuration()
    // Offset: 0x53E7858
    float get_hapticSelectExitDuration();
    // public System.Void set_hapticSelectExitDuration(System.Single value)
    // Offset: 0x53E7860
    void set_hapticSelectExitDuration(float value);
    // public System.Boolean get_playHapticsOnSelectCanceled()
    // Offset: 0x53E7868
    bool get_playHapticsOnSelectCanceled();
    // public System.Void set_playHapticsOnSelectCanceled(System.Boolean value)
    // Offset: 0x53E7870
    void set_playHapticsOnSelectCanceled(bool value);
    // public System.Single get_hapticSelectCancelIntensity()
    // Offset: 0x53E787C
    float get_hapticSelectCancelIntensity();
    // public System.Void set_hapticSelectCancelIntensity(System.Single value)
    // Offset: 0x53E7884
    void set_hapticSelectCancelIntensity(float value);
    // public System.Single get_hapticSelectCancelDuration()
    // Offset: 0x53E788C
    float get_hapticSelectCancelDuration();
    // public System.Void set_hapticSelectCancelDuration(System.Single value)
    // Offset: 0x53E7894
    void set_hapticSelectCancelDuration(float value);
    // public System.Boolean get_playHapticsOnHoverEntered()
    // Offset: 0x53E789C
    bool get_playHapticsOnHoverEntered();
    // public System.Void set_playHapticsOnHoverEntered(System.Boolean value)
    // Offset: 0x53E78A4
    void set_playHapticsOnHoverEntered(bool value);
    // public System.Single get_hapticHoverEnterIntensity()
    // Offset: 0x53E78B0
    float get_hapticHoverEnterIntensity();
    // public System.Void set_hapticHoverEnterIntensity(System.Single value)
    // Offset: 0x53E78B8
    void set_hapticHoverEnterIntensity(float value);
    // public System.Single get_hapticHoverEnterDuration()
    // Offset: 0x53E78C0
    float get_hapticHoverEnterDuration();
    // public System.Void set_hapticHoverEnterDuration(System.Single value)
    // Offset: 0x53E78C8
    void set_hapticHoverEnterDuration(float value);
    // public System.Boolean get_playHapticsOnHoverExited()
    // Offset: 0x53E78D0
    bool get_playHapticsOnHoverExited();
    // public System.Void set_playHapticsOnHoverExited(System.Boolean value)
    // Offset: 0x53E78D8
    void set_playHapticsOnHoverExited(bool value);
    // public System.Single get_hapticHoverExitIntensity()
    // Offset: 0x53E78E4
    float get_hapticHoverExitIntensity();
    // public System.Void set_hapticHoverExitIntensity(System.Single value)
    // Offset: 0x53E78EC
    void set_hapticHoverExitIntensity(float value);
    // public System.Single get_hapticHoverExitDuration()
    // Offset: 0x53E78F4
    float get_hapticHoverExitDuration();
    // public System.Void set_hapticHoverExitDuration(System.Single value)
    // Offset: 0x53E78FC
    void set_hapticHoverExitDuration(float value);
    // public System.Boolean get_playHapticsOnHoverCanceled()
    // Offset: 0x53E7904
    bool get_playHapticsOnHoverCanceled();
    // public System.Void set_playHapticsOnHoverCanceled(System.Boolean value)
    // Offset: 0x53E790C
    void set_playHapticsOnHoverCanceled(bool value);
    // public System.Single get_hapticHoverCancelIntensity()
    // Offset: 0x53E7918
    float get_hapticHoverCancelIntensity();
    // public System.Void set_hapticHoverCancelIntensity(System.Single value)
    // Offset: 0x53E7920
    void set_hapticHoverCancelIntensity(float value);
    // public System.Single get_hapticHoverCancelDuration()
    // Offset: 0x53E7928
    float get_hapticHoverCancelDuration();
    // public System.Void set_hapticHoverCancelDuration(System.Single value)
    // Offset: 0x53E7930
    void set_hapticHoverCancelDuration(float value);
    // public System.Boolean get_allowHoverHapticsWhileSelecting()
    // Offset: 0x53E7938
    bool get_allowHoverHapticsWhileSelecting();
    // public System.Void set_allowHoverHapticsWhileSelecting(System.Boolean value)
    // Offset: 0x53E7940
    void set_allowHoverHapticsWhileSelecting(bool value);
    // public System.Boolean get_allowActivate()
    // Offset: 0x53E794C
    bool get_allowActivate();
    // public System.Void set_allowActivate(System.Boolean value)
    // Offset: 0x53E7954
    void set_allowActivate(bool value);
    // public UnityEngine.XR.Interaction.Toolkit.XRBaseController get_xrController()
    // Offset: 0x53E7960
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseController* get_xrController();
    // public System.Void set_xrController(UnityEngine.XR.Interaction.Toolkit.XRBaseController value)
    // Offset: 0x53E7968
    void set_xrController(::UnityEngine::XR::Interaction::Toolkit::XRBaseController* value);
    // UnityEngine.XR.Interaction.Toolkit.XRBaseController FindControllerComponent()
    // Offset: 0x53E7B68
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseController* FindControllerComponent();
    // private System.Void SendActivateEvent(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRActivateInteractable> targets)
    // Offset: 0x53E7E60
    void SendActivateEvent(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRActivateInteractable*>* targets);
    // private System.Void SendDeactivateEvent(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRActivateInteractable> targets)
    // Offset: 0x53E81AC
    void SendDeactivateEvent(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRActivateInteractable*>* targets);
    // protected System.Boolean get_isUISelectActive()
    // Offset: 0x53E86EC
    bool get_isUISelectActive();
    // public System.Boolean get_shouldActivate()
    // Offset: 0x53E8774
    bool get_shouldActivate();
    // public System.Boolean get_shouldDeactivate()
    // Offset: 0x53E882C
    bool get_shouldDeactivate();
    // public System.Void GetActivateTargets(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRActivateInteractable> targets)
    // Offset: 0x53E88E4
    void GetActivateTargets(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRActivateInteractable*>* targets);
    // private System.Boolean CanPlayHoverAudio(UnityEngine.XR.Interaction.Toolkit.IXRHoverInteractable hoveredInteractable)
    // Offset: 0x53E9070
    bool CanPlayHoverAudio(::UnityEngine::XR::Interaction::Toolkit::IXRHoverInteractable* hoveredInteractable);
    // private System.Boolean CanPlayHoverHaptics(UnityEngine.XR.Interaction.Toolkit.IXRHoverInteractable hoveredInteractable)
    // Offset: 0x53E9044
    bool CanPlayHoverHaptics(::UnityEngine::XR::Interaction::Toolkit::IXRHoverInteractable* hoveredInteractable);
    // public System.Boolean SendHapticImpulse(System.Single amplitude, System.Single duration)
    // Offset: 0x53E8DA0
    bool SendHapticImpulse(float amplitude, float duration);
    // protected System.Void PlayAudio(UnityEngine.AudioClip audioClip)
    // Offset: 0x53E91BC
    void PlayAudio(::UnityEngine::AudioClip* audioClip);
    // private System.Void CreateEffectsAudioSource()
    // Offset: 0x53E7BC4
    void CreateEffectsAudioSource();
    // private System.Void HandleSelecting()
    // Offset: 0x53E8D08
    void HandleSelecting();
    // private System.Void HandleDeselecting()
    // Offset: 0x53E8EF4
    void HandleDeselecting();
    // public System.Boolean get_playAudioClipOnSelectEnter()
    // Offset: 0x53E9280
    bool get_playAudioClipOnSelectEnter();
    // public UnityEngine.AudioClip get_audioClipForOnSelectEnter()
    // Offset: 0x53E9288
    ::UnityEngine::AudioClip* get_audioClipForOnSelectEnter();
    // public UnityEngine.AudioClip get_AudioClipForOnSelectEnter()
    // Offset: 0x53E9290
    ::UnityEngine::AudioClip* get_AudioClipForOnSelectEnter();
    // public System.Void set_AudioClipForOnSelectEnter(UnityEngine.AudioClip value)
    // Offset: 0x53E9298
    void set_AudioClipForOnSelectEnter(::UnityEngine::AudioClip* value);
    // public System.Boolean get_playAudioClipOnSelectExit()
    // Offset: 0x53E92A8
    bool get_playAudioClipOnSelectExit();
    // public UnityEngine.AudioClip get_audioClipForOnSelectExit()
    // Offset: 0x53E92B0
    ::UnityEngine::AudioClip* get_audioClipForOnSelectExit();
    // public UnityEngine.AudioClip get_AudioClipForOnSelectExit()
    // Offset: 0x53E92B8
    ::UnityEngine::AudioClip* get_AudioClipForOnSelectExit();
    // public System.Void set_AudioClipForOnSelectExit(UnityEngine.AudioClip value)
    // Offset: 0x53E92C0
    void set_AudioClipForOnSelectExit(::UnityEngine::AudioClip* value);
    // public System.Boolean get_playAudioClipOnHoverEnter()
    // Offset: 0x53E92D0
    bool get_playAudioClipOnHoverEnter();
    // public UnityEngine.AudioClip get_audioClipForOnHoverEnter()
    // Offset: 0x53E92D8
    ::UnityEngine::AudioClip* get_audioClipForOnHoverEnter();
    // public UnityEngine.AudioClip get_AudioClipForOnHoverEnter()
    // Offset: 0x53E92E0
    ::UnityEngine::AudioClip* get_AudioClipForOnHoverEnter();
    // public System.Void set_AudioClipForOnHoverEnter(UnityEngine.AudioClip value)
    // Offset: 0x53E92E8
    void set_AudioClipForOnHoverEnter(::UnityEngine::AudioClip* value);
    // public System.Boolean get_playAudioClipOnHoverExit()
    // Offset: 0x53E92F8
    bool get_playAudioClipOnHoverExit();
    // public UnityEngine.AudioClip get_audioClipForOnHoverExit()
    // Offset: 0x53E9300
    ::UnityEngine::AudioClip* get_audioClipForOnHoverExit();
    // public UnityEngine.AudioClip get_AudioClipForOnHoverExit()
    // Offset: 0x53E9308
    ::UnityEngine::AudioClip* get_AudioClipForOnHoverExit();
    // public System.Void set_AudioClipForOnHoverExit(UnityEngine.AudioClip value)
    // Offset: 0x53E9310
    void set_AudioClipForOnHoverExit(::UnityEngine::AudioClip* value);
    // public System.Boolean get_playHapticsOnSelectEnter()
    // Offset: 0x53E9320
    bool get_playHapticsOnSelectEnter();
    // public System.Boolean get_playHapticsOnSelectExit()
    // Offset: 0x53E9328
    bool get_playHapticsOnSelectExit();
    // public System.Boolean get_playHapticsOnHoverEnter()
    // Offset: 0x53E9330
    bool get_playHapticsOnHoverEnter();
    // protected System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> get_validTargets()
    // Offset: 0x53E9338
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* get_validTargets();
    // private UnityEngine.Transform UnityEngine.XR.Interaction.Toolkit.IXRInteractor.get_transform()
    // Offset: 0x53E96A4
    ::UnityEngine::Transform* UnityEngine_XR_Interaction_Toolkit_IXRInteractor_get_transform();
    // public override UnityEngine.XR.Interaction.Toolkit.TargetPriorityMode get_targetPriorityMode()
    // Offset: 0x53E76D4
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: UnityEngine.XR.Interaction.Toolkit.TargetPriorityMode XRBaseInteractor::get_targetPriorityMode()
    ::UnityEngine::XR::Interaction::Toolkit::TargetPriorityMode get_targetPriorityMode();
    // public override System.Void set_targetPriorityMode(UnityEngine.XR.Interaction.Toolkit.TargetPriorityMode value)
    // Offset: 0x53E76DC
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::set_targetPriorityMode(UnityEngine.XR.Interaction.Toolkit.TargetPriorityMode value)
    void set_targetPriorityMode(::UnityEngine::XR::Interaction::Toolkit::TargetPriorityMode value);
    // protected override System.Void Awake()
    // Offset: 0x53E7978
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::Awake()
    void Awake();
    // public override System.Void PreprocessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    // Offset: 0x53E7C58
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::PreprocessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    void PreprocessInteractor(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // public override System.Void ProcessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    // Offset: 0x53E7D30
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::ProcessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    void ProcessInteractor(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // public override System.Boolean get_isSelectActive()
    // Offset: 0x53E84F8
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Boolean XRBaseInteractor::get_isSelectActive()
    bool get_isSelectActive();
    // protected override System.Void OnSelectEntering(UnityEngine.XR.Interaction.Toolkit.SelectEnterEventArgs args)
    // Offset: 0x53E8CAC
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::OnSelectEntering(UnityEngine.XR.Interaction.Toolkit.SelectEnterEventArgs args)
    void OnSelectEntering(::UnityEngine::XR::Interaction::Toolkit::SelectEnterEventArgs* args);
    // protected override System.Void OnSelectExiting(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)
    // Offset: 0x53E8E4C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::OnSelectExiting(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)
    void OnSelectExiting(::UnityEngine::XR::Interaction::Toolkit::SelectExitEventArgs* args);
    // protected override System.Void OnHoverEntering(UnityEngine.XR.Interaction.Toolkit.HoverEnterEventArgs args)
    // Offset: 0x53E8F90
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::OnHoverEntering(UnityEngine.XR.Interaction.Toolkit.HoverEnterEventArgs args)
    void OnHoverEntering(::UnityEngine::XR::Interaction::Toolkit::HoverEnterEventArgs* args);
    // protected override System.Void OnHoverExiting(UnityEngine.XR.Interaction.Toolkit.HoverExitEventArgs args)
    // Offset: 0x53E909C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::OnHoverExiting(UnityEngine.XR.Interaction.Toolkit.HoverExitEventArgs args)
    void OnHoverExiting(::UnityEngine::XR::Interaction::Toolkit::HoverExitEventArgs* args);
    // protected System.Void .ctor()
    // Offset: 0x53E9340
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRBaseControllerInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRBaseControllerInteractor*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x53E960C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::.cctor()
    static void _cctor();
  }; // UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
  #pragma pack(pop)
  static check_size<sizeof(XRBaseControllerInteractor), 632 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*)> __UnityEngine_XR_Interaction_Toolkit_XRBaseControllerInteractorSizeCheck;
  static_assert(sizeof(XRBaseControllerInteractor) == 0x280);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType, "UnityEngine.XR.Interaction.Toolkit", "XRBaseControllerInteractor/InputTriggerType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_selectActionTrigger
// Il2CppName: get_selectActionTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_selectActionTrigger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_selectActionTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_selectActionTrigger
// Il2CppName: set_selectActionTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::InputTriggerType)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_selectActionTrigger)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseControllerInteractor/InputTriggerType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_selectActionTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hideControllerOnSelect
// Il2CppName: get_hideControllerOnSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hideControllerOnSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hideControllerOnSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hideControllerOnSelect
// Il2CppName: set_hideControllerOnSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hideControllerOnSelect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hideControllerOnSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_allowHoveredActivate
// Il2CppName: get_allowHoveredActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_allowHoveredActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_allowHoveredActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_allowHoveredActivate
// Il2CppName: set_allowHoveredActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_allowHoveredActivate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_allowHoveredActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnSelectEntered
// Il2CppName: get_playAudioClipOnSelectEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnSelectEntered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playAudioClipOnSelectEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnSelectEntered
// Il2CppName: set_playAudioClipOnSelectEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnSelectEntered)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playAudioClipOnSelectEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnSelectEntered
// Il2CppName: get_audioClipForOnSelectEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnSelectEntered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_audioClipForOnSelectEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_audioClipForOnSelectEntered
// Il2CppName: set_audioClipForOnSelectEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::AudioClip*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_audioClipForOnSelectEntered)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_audioClipForOnSelectEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnSelectExited
// Il2CppName: get_playAudioClipOnSelectExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnSelectExited)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playAudioClipOnSelectExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnSelectExited
// Il2CppName: set_playAudioClipOnSelectExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnSelectExited)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playAudioClipOnSelectExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnSelectExited
// Il2CppName: get_audioClipForOnSelectExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnSelectExited)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_audioClipForOnSelectExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_audioClipForOnSelectExited
// Il2CppName: set_audioClipForOnSelectExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::AudioClip*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_audioClipForOnSelectExited)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_audioClipForOnSelectExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnSelectCanceled
// Il2CppName: get_playAudioClipOnSelectCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnSelectCanceled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playAudioClipOnSelectCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnSelectCanceled
// Il2CppName: set_playAudioClipOnSelectCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnSelectCanceled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playAudioClipOnSelectCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnSelectCanceled
// Il2CppName: get_audioClipForOnSelectCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnSelectCanceled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_audioClipForOnSelectCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_audioClipForOnSelectCanceled
// Il2CppName: set_audioClipForOnSelectCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::AudioClip*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_audioClipForOnSelectCanceled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_audioClipForOnSelectCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnHoverEntered
// Il2CppName: get_playAudioClipOnHoverEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnHoverEntered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playAudioClipOnHoverEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnHoverEntered
// Il2CppName: set_playAudioClipOnHoverEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnHoverEntered)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playAudioClipOnHoverEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnHoverEntered
// Il2CppName: get_audioClipForOnHoverEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnHoverEntered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_audioClipForOnHoverEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_audioClipForOnHoverEntered
// Il2CppName: set_audioClipForOnHoverEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::AudioClip*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_audioClipForOnHoverEntered)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_audioClipForOnHoverEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnHoverExited
// Il2CppName: get_playAudioClipOnHoverExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnHoverExited)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playAudioClipOnHoverExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnHoverExited
// Il2CppName: set_playAudioClipOnHoverExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnHoverExited)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playAudioClipOnHoverExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnHoverExited
// Il2CppName: get_audioClipForOnHoverExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnHoverExited)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_audioClipForOnHoverExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_audioClipForOnHoverExited
// Il2CppName: set_audioClipForOnHoverExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::AudioClip*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_audioClipForOnHoverExited)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_audioClipForOnHoverExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnHoverCanceled
// Il2CppName: get_playAudioClipOnHoverCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnHoverCanceled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playAudioClipOnHoverCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnHoverCanceled
// Il2CppName: set_playAudioClipOnHoverCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnHoverCanceled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playAudioClipOnHoverCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnHoverCanceled
// Il2CppName: get_audioClipForOnHoverCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnHoverCanceled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_audioClipForOnHoverCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_audioClipForOnHoverCanceled
// Il2CppName: set_audioClipForOnHoverCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::AudioClip*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_audioClipForOnHoverCanceled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_audioClipForOnHoverCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_allowHoverAudioWhileSelecting
// Il2CppName: get_allowHoverAudioWhileSelecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_allowHoverAudioWhileSelecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_allowHoverAudioWhileSelecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_allowHoverAudioWhileSelecting
// Il2CppName: set_allowHoverAudioWhileSelecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_allowHoverAudioWhileSelecting)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_allowHoverAudioWhileSelecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnSelectEntered
// Il2CppName: get_playHapticsOnSelectEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnSelectEntered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playHapticsOnSelectEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnSelectEntered
// Il2CppName: set_playHapticsOnSelectEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnSelectEntered)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playHapticsOnSelectEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectEnterIntensity
// Il2CppName: get_hapticSelectEnterIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectEnterIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticSelectEnterIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectEnterIntensity
// Il2CppName: set_hapticSelectEnterIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectEnterIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticSelectEnterIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectEnterDuration
// Il2CppName: get_hapticSelectEnterDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectEnterDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticSelectEnterDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectEnterDuration
// Il2CppName: set_hapticSelectEnterDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectEnterDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticSelectEnterDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnSelectExited
// Il2CppName: get_playHapticsOnSelectExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnSelectExited)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playHapticsOnSelectExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnSelectExited
// Il2CppName: set_playHapticsOnSelectExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnSelectExited)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playHapticsOnSelectExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectExitIntensity
// Il2CppName: get_hapticSelectExitIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectExitIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticSelectExitIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectExitIntensity
// Il2CppName: set_hapticSelectExitIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectExitIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticSelectExitIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectExitDuration
// Il2CppName: get_hapticSelectExitDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectExitDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticSelectExitDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectExitDuration
// Il2CppName: set_hapticSelectExitDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectExitDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticSelectExitDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnSelectCanceled
// Il2CppName: get_playHapticsOnSelectCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnSelectCanceled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playHapticsOnSelectCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnSelectCanceled
// Il2CppName: set_playHapticsOnSelectCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnSelectCanceled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playHapticsOnSelectCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectCancelIntensity
// Il2CppName: get_hapticSelectCancelIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectCancelIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticSelectCancelIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectCancelIntensity
// Il2CppName: set_hapticSelectCancelIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectCancelIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticSelectCancelIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectCancelDuration
// Il2CppName: get_hapticSelectCancelDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectCancelDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticSelectCancelDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectCancelDuration
// Il2CppName: set_hapticSelectCancelDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectCancelDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticSelectCancelDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnHoverEntered
// Il2CppName: get_playHapticsOnHoverEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnHoverEntered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playHapticsOnHoverEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnHoverEntered
// Il2CppName: set_playHapticsOnHoverEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnHoverEntered)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playHapticsOnHoverEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverEnterIntensity
// Il2CppName: get_hapticHoverEnterIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverEnterIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticHoverEnterIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverEnterIntensity
// Il2CppName: set_hapticHoverEnterIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverEnterIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticHoverEnterIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverEnterDuration
// Il2CppName: get_hapticHoverEnterDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverEnterDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticHoverEnterDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverEnterDuration
// Il2CppName: set_hapticHoverEnterDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverEnterDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticHoverEnterDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnHoverExited
// Il2CppName: get_playHapticsOnHoverExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnHoverExited)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playHapticsOnHoverExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnHoverExited
// Il2CppName: set_playHapticsOnHoverExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnHoverExited)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playHapticsOnHoverExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverExitIntensity
// Il2CppName: get_hapticHoverExitIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverExitIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticHoverExitIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverExitIntensity
// Il2CppName: set_hapticHoverExitIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverExitIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticHoverExitIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverExitDuration
// Il2CppName: get_hapticHoverExitDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverExitDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticHoverExitDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverExitDuration
// Il2CppName: set_hapticHoverExitDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverExitDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticHoverExitDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnHoverCanceled
// Il2CppName: get_playHapticsOnHoverCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnHoverCanceled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playHapticsOnHoverCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnHoverCanceled
// Il2CppName: set_playHapticsOnHoverCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnHoverCanceled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playHapticsOnHoverCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverCancelIntensity
// Il2CppName: get_hapticHoverCancelIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverCancelIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticHoverCancelIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverCancelIntensity
// Il2CppName: set_hapticHoverCancelIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverCancelIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticHoverCancelIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverCancelDuration
// Il2CppName: get_hapticHoverCancelDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverCancelDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticHoverCancelDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverCancelDuration
// Il2CppName: set_hapticHoverCancelDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverCancelDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticHoverCancelDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_allowHoverHapticsWhileSelecting
// Il2CppName: get_allowHoverHapticsWhileSelecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_allowHoverHapticsWhileSelecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_allowHoverHapticsWhileSelecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_allowHoverHapticsWhileSelecting
// Il2CppName: set_allowHoverHapticsWhileSelecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_allowHoverHapticsWhileSelecting)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_allowHoverHapticsWhileSelecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_allowActivate
// Il2CppName: get_allowActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_allowActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_allowActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_allowActivate
// Il2CppName: set_allowActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_allowActivate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_allowActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_xrController
// Il2CppName: get_xrController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRBaseController* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_xrController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_xrController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_xrController
// Il2CppName: set_xrController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseController*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_xrController)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_xrController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::FindControllerComponent
// Il2CppName: FindControllerComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRBaseController* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::FindControllerComponent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "FindControllerComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::SendActivateEvent
// Il2CppName: SendActivateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRActivateInteractable*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::SendActivateEvent)> {
  static const MethodInfo* get() {
    static auto* targets = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRActivateInteractable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "SendActivateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targets});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::SendDeactivateEvent
// Il2CppName: SendDeactivateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRActivateInteractable*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::SendDeactivateEvent)> {
  static const MethodInfo* get() {
    static auto* targets = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRActivateInteractable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "SendDeactivateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targets});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_isUISelectActive
// Il2CppName: get_isUISelectActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_isUISelectActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_isUISelectActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_shouldActivate
// Il2CppName: get_shouldActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_shouldActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_shouldActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_shouldDeactivate
// Il2CppName: get_shouldDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_shouldDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_shouldDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::GetActivateTargets
// Il2CppName: GetActivateTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRActivateInteractable*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::GetActivateTargets)> {
  static const MethodInfo* get() {
    static auto* targets = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRActivateInteractable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "GetActivateTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targets});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::CanPlayHoverAudio
// Il2CppName: CanPlayHoverAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::IXRHoverInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::CanPlayHoverAudio)> {
  static const MethodInfo* get() {
    static auto* hoveredInteractable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRHoverInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "CanPlayHoverAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hoveredInteractable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::CanPlayHoverHaptics
// Il2CppName: CanPlayHoverHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::IXRHoverInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::CanPlayHoverHaptics)> {
  static const MethodInfo* get() {
    static auto* hoveredInteractable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRHoverInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "CanPlayHoverHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hoveredInteractable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::SendHapticImpulse
// Il2CppName: SendHapticImpulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float, float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::SendHapticImpulse)> {
  static const MethodInfo* get() {
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "SendHapticImpulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amplitude, duration});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::PlayAudio
// Il2CppName: PlayAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::AudioClip*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::PlayAudio)> {
  static const MethodInfo* get() {
    static auto* audioClip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "PlayAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioClip});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::CreateEffectsAudioSource
// Il2CppName: CreateEffectsAudioSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::CreateEffectsAudioSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "CreateEffectsAudioSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::HandleSelecting
// Il2CppName: HandleSelecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::HandleSelecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "HandleSelecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::HandleDeselecting
// Il2CppName: HandleDeselecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::HandleDeselecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "HandleDeselecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnSelectEnter
// Il2CppName: get_playAudioClipOnSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnSelectEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playAudioClipOnSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnSelectEnter
// Il2CppName: get_audioClipForOnSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnSelectEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_audioClipForOnSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnSelectEnter
// Il2CppName: get_AudioClipForOnSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnSelectEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_AudioClipForOnSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnSelectEnter
// Il2CppName: set_AudioClipForOnSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::AudioClip*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnSelectEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_AudioClipForOnSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnSelectExit
// Il2CppName: get_playAudioClipOnSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnSelectExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playAudioClipOnSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnSelectExit
// Il2CppName: get_audioClipForOnSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnSelectExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_audioClipForOnSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnSelectExit
// Il2CppName: get_AudioClipForOnSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnSelectExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_AudioClipForOnSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnSelectExit
// Il2CppName: set_AudioClipForOnSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::AudioClip*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnSelectExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_AudioClipForOnSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnHoverEnter
// Il2CppName: get_playAudioClipOnHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnHoverEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playAudioClipOnHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnHoverEnter
// Il2CppName: get_audioClipForOnHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnHoverEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_audioClipForOnHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnHoverEnter
// Il2CppName: get_AudioClipForOnHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnHoverEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_AudioClipForOnHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnHoverEnter
// Il2CppName: set_AudioClipForOnHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::AudioClip*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnHoverEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_AudioClipForOnHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnHoverExit
// Il2CppName: get_playAudioClipOnHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnHoverExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playAudioClipOnHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnHoverExit
// Il2CppName: get_audioClipForOnHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_audioClipForOnHoverExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_audioClipForOnHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnHoverExit
// Il2CppName: get_AudioClipForOnHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnHoverExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_AudioClipForOnHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnHoverExit
// Il2CppName: set_AudioClipForOnHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::AudioClip*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnHoverExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_AudioClipForOnHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnSelectEnter
// Il2CppName: get_playHapticsOnSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnSelectEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playHapticsOnSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnSelectExit
// Il2CppName: get_playHapticsOnSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnSelectExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playHapticsOnSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnHoverEnter
// Il2CppName: get_playHapticsOnHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnHoverEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playHapticsOnHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_validTargets
// Il2CppName: get_validTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_validTargets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_validTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::UnityEngine_XR_Interaction_Toolkit_IXRInteractor_get_transform
// Il2CppName: UnityEngine.XR.Interaction.Toolkit.IXRInteractor.get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::UnityEngine_XR_Interaction_Toolkit_IXRInteractor_get_transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "UnityEngine.XR.Interaction.Toolkit.IXRInteractor.get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_targetPriorityMode
// Il2CppName: get_targetPriorityMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::TargetPriorityMode (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_targetPriorityMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_targetPriorityMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_targetPriorityMode
// Il2CppName: set_targetPriorityMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::TargetPriorityMode)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_targetPriorityMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "TargetPriorityMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_targetPriorityMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::PreprocessInteractor
// Il2CppName: PreprocessInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::PreprocessInteractor)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "PreprocessInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::ProcessInteractor
// Il2CppName: ProcessInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::ProcessInteractor)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "ProcessInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_isSelectActive
// Il2CppName: get_isSelectActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_isSelectActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_isSelectActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnSelectEntering
// Il2CppName: OnSelectEntering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::SelectEnterEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnSelectEntering)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "SelectEnterEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "OnSelectEntering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnSelectExiting
// Il2CppName: OnSelectExiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::SelectExitEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnSelectExiting)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "SelectExitEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "OnSelectExiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnHoverEntering
// Il2CppName: OnHoverEntering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::HoverEnterEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnHoverEntering)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "HoverEnterEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "OnHoverEntering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnHoverExiting
// Il2CppName: OnHoverExiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::HoverExitEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnHoverExiting)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "HoverExitEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "OnHoverExiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
