// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable
#include "UnityEngine/XR/Interaction/Toolkit/BaseTeleportationInteractable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: TeleportingEventArgs
  class TeleportingEventArgs;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::$$c);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::$$c*, "UnityEngine.XR.Interaction.Toolkit", "BaseTeleportationInteractable/<>c");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/<>c
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class BaseTeleportationInteractable::$$c : public ::Il2CppObject {
    public:
    // Get static field: static public readonly UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/<>c <>9
    static ::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::$$c* _get_$$9();
    // Set static field: static public readonly UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/<>c <>9
    static void _set_$$9(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::$$c* value);
    // Get static field: static public System.Func`1<UnityEngine.XR.Interaction.Toolkit.TeleportingEventArgs> <>9__45_0
    static ::System::Func_1<::UnityEngine::XR::Interaction::Toolkit::TeleportingEventArgs*>* _get_$$9__45_0();
    // Set static field: static public System.Func`1<UnityEngine.XR.Interaction.Toolkit.TeleportingEventArgs> <>9__45_0
    static void _set_$$9__45_0(::System::Func_1<::UnityEngine::XR::Interaction::Toolkit::TeleportingEventArgs*>* value);
    // static private System.Void .cctor()
    // Offset: 0x5410370
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x54103D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseTeleportationInteractable::$$c* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::$$c::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseTeleportationInteractable::$$c*, creationType>()));
    }
    // UnityEngine.XR.Interaction.Toolkit.TeleportingEventArgs <.ctor>b__45_0()
    // Offset: 0x54103E0
    ::UnityEngine::XR::Interaction::Toolkit::TeleportingEventArgs* $_ctor$b__45_0();
  }; // UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/<>c
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::$$c::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::$$c::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::$$c::$_ctor$b__45_0
// Il2CppName: <.ctor>b__45_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::TeleportingEventArgs* (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::$$c::*)()>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::$$c::$_ctor$b__45_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::$$c*), "<.ctor>b__45_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
