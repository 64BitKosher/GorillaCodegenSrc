// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: CanSelectMultipleAttribute
  class CanSelectMultipleAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::CanSelectMultipleAttribute);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::CanSelectMultipleAttribute*, "UnityEngine.XR.Interaction.Toolkit", "CanSelectMultipleAttribute");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x11
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.CanSelectMultipleAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class CanSelectMultipleAttribute : public ::System::Attribute {
    public:
    public:
    // private readonly System.Boolean <allowMultiple>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool allowMultiple;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return allowMultiple;
    }
    // Get instance field reference: private readonly System.Boolean <allowMultiple>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$allowMultiple$k__BackingField();
    // public System.Boolean get_allowMultiple()
    // Offset: 0x53D2C70
    bool get_allowMultiple();
    // public System.Void .ctor(System.Boolean allowMultiple)
    // Offset: 0x53D2C78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CanSelectMultipleAttribute* New_ctor(bool allowMultiple) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::CanSelectMultipleAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CanSelectMultipleAttribute*, creationType>(allowMultiple)));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.CanSelectMultipleAttribute
  #pragma pack(pop)
  static check_size<sizeof(CanSelectMultipleAttribute), 16 + sizeof(bool)> __UnityEngine_XR_Interaction_Toolkit_CanSelectMultipleAttributeSizeCheck;
  static_assert(sizeof(CanSelectMultipleAttribute) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::CanSelectMultipleAttribute::get_allowMultiple
// Il2CppName: get_allowMultiple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::CanSelectMultipleAttribute::*)()>(&UnityEngine::XR::Interaction::Toolkit::CanSelectMultipleAttribute::get_allowMultiple)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::CanSelectMultipleAttribute*), "get_allowMultiple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::CanSelectMultipleAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
