// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
#include "UnityEngine/XR/Interaction/Toolkit/XRBaseInteractable.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/MovementType
#include "UnityEngine/XR/Interaction/Toolkit/XRBaseInteractable_MovementType.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Skipping declaration: Component because it is already included!
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::Transformers
namespace UnityEngine::XR::Interaction::Toolkit::Transformers {
  // Forward declaring type: XRBaseGrabTransformer
  class XRBaseGrabTransformer;
  // Forward declaring type: IXRGrabTransformer
  class IXRGrabTransformer;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::Utilities
namespace UnityEngine::XR::Interaction::Toolkit::Utilities {
  // Forward declaring type: SmallRegistrationList`1<T>
  template<typename T>
  class SmallRegistrationList_1;
  // Forward declaring type: TeleportationMonitor
  class TeleportationMonitor;
  // Forward declaring type: BaseRegistrationList`1<T>
  template<typename T>
  class BaseRegistrationList_1;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: IXRSelectInteractor
  class IXRSelectInteractor;
  // Skipping declaration: AttachPointCompatibilityMode because it is already included!
  // Forward declaring type: IXRInteractor
  class IXRInteractor;
  // Forward declaring type: SelectEnterEventArgs
  class SelectEnterEventArgs;
  // Forward declaring type: SelectExitEventArgs
  class SelectExitEventArgs;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling
namespace UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling {
  // Forward declaring type: LinkedPool`1<T>
  template<typename T>
  class LinkedPool_1;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRGrabInteractable
  class XRGrabInteractable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*, "UnityEngine.XR.Interaction.Toolkit", "XRGrabInteractable");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable
  // [TokenAttribute] Offset: FFFFFFFF
  // [SelectionBaseAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class XRGrabInteractable : public ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AttachPointCompatibilityMode
    struct AttachPointCompatibilityMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable/AttachPointCompatibilityMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct AttachPointCompatibilityMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: AttachPointCompatibilityMode
      constexpr AttachPointCompatibilityMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable/AttachPointCompatibilityMode Default
      static constexpr const int Default = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable/AttachPointCompatibilityMode Default
      static ::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AttachPointCompatibilityMode _get_Default();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable/AttachPointCompatibilityMode Default
      static void _set_Default(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AttachPointCompatibilityMode value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable/AttachPointCompatibilityMode Legacy
      static constexpr const int Legacy = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable/AttachPointCompatibilityMode Legacy
      static ::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AttachPointCompatibilityMode _get_Legacy();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable/AttachPointCompatibilityMode Legacy
      static void _set_Legacy(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AttachPointCompatibilityMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable/AttachPointCompatibilityMode
    #pragma pack(pop)
    static check_size<sizeof(XRGrabInteractable::AttachPointCompatibilityMode), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_XRGrabInteractable_AttachPointCompatibilityModeSizeCheck;
    static_assert(sizeof(XRGrabInteractable::AttachPointCompatibilityMode) == 0x4);
    public:
    // private UnityEngine.Transform m_AttachTransform
    // Size: 0x8
    // Offset: 0x1A0
    ::UnityEngine::Transform* m_AttachTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform m_SecondaryAttachTransform
    // Size: 0x8
    // Offset: 0x1A8
    ::UnityEngine::Transform* m_SecondaryAttachTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean m_UseDynamicAttach
    // Size: 0x1
    // Offset: 0x1B0
    bool m_UseDynamicAttach;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_MatchAttachPosition
    // Size: 0x1
    // Offset: 0x1B1
    bool m_MatchAttachPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_MatchAttachRotation
    // Size: 0x1
    // Offset: 0x1B2
    bool m_MatchAttachRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_SnapToColliderVolume
    // Size: 0x1
    // Offset: 0x1B3
    bool m_SnapToColliderVolume;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ReinitializeDynamicAttachEverySingleGrab
    // Size: 0x1
    // Offset: 0x1B4
    bool m_ReinitializeDynamicAttachEverySingleGrab;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single m_AttachEaseInTime
    // Size: 0x4
    // Offset: 0x1B8
    float m_AttachEaseInTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/MovementType m_MovementType
    // Size: 0x4
    // Offset: 0x1BC
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType m_MovementType;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType) == 0x4);
    // private System.Single m_VelocityDamping
    // Size: 0x4
    // Offset: 0x1C0
    float m_VelocityDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_VelocityScale
    // Size: 0x4
    // Offset: 0x1C4
    float m_VelocityScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_AngularVelocityDamping
    // Size: 0x4
    // Offset: 0x1C8
    float m_AngularVelocityDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_AngularVelocityScale
    // Size: 0x4
    // Offset: 0x1CC
    float m_AngularVelocityScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_TrackPosition
    // Size: 0x1
    // Offset: 0x1D0
    bool m_TrackPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_SmoothPosition
    // Size: 0x1
    // Offset: 0x1D1
    bool m_SmoothPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single m_SmoothPositionAmount
    // Size: 0x4
    // Offset: 0x1D4
    float m_SmoothPositionAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_TightenPosition
    // Size: 0x4
    // Offset: 0x1D8
    float m_TightenPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_TrackRotation
    // Size: 0x1
    // Offset: 0x1DC
    bool m_TrackRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_SmoothRotation
    // Size: 0x1
    // Offset: 0x1DD
    bool m_SmoothRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single m_SmoothRotationAmount
    // Size: 0x4
    // Offset: 0x1E0
    float m_SmoothRotationAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_TightenRotation
    // Size: 0x4
    // Offset: 0x1E4
    float m_TightenRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_ThrowOnDetach
    // Size: 0x1
    // Offset: 0x1E8
    bool m_ThrowOnDetach;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single m_ThrowSmoothingDuration
    // Size: 0x4
    // Offset: 0x1EC
    float m_ThrowSmoothingDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AnimationCurve m_ThrowSmoothingCurve
    // Size: 0x8
    // Offset: 0x1F0
    ::UnityEngine::AnimationCurve* m_ThrowSmoothingCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single m_ThrowVelocityScale
    // Size: 0x4
    // Offset: 0x1F8
    float m_ThrowVelocityScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ThrowAngularVelocityScale
    // Size: 0x4
    // Offset: 0x1FC
    float m_ThrowAngularVelocityScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_ForceGravityOnDetach
    // Size: 0x1
    // Offset: 0x200
    bool m_ForceGravityOnDetach;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_RetainTransformParent
    // Size: 0x1
    // Offset: 0x201
    bool m_RetainTransformParent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable/AttachPointCompatibilityMode m_AttachPointCompatibilityMode
    // Size: 0x4
    // Offset: 0x204
    ::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AttachPointCompatibilityMode m_AttachPointCompatibilityMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AttachPointCompatibilityMode) == 0x4);
    // private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer> m_StartingSingleGrabTransformers
    // Size: 0x8
    // Offset: 0x208
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer*>* m_StartingSingleGrabTransformers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer> m_StartingMultipleGrabTransformers
    // Size: 0x8
    // Offset: 0x210
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer*>* m_StartingMultipleGrabTransformers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer*>*) == 0x8);
    // private System.Boolean m_AddDefaultGrabTransformers
    // Size: 0x1
    // Offset: 0x218
    bool m_AddDefaultGrabTransformers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly UnityEngine.XR.Interaction.Toolkit.Utilities.SmallRegistrationList`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> m_SingleGrabTransformers
    // Size: 0x8
    // Offset: 0x220
    ::UnityEngine::XR::Interaction::Toolkit::Utilities::SmallRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>* m_SingleGrabTransformers;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Utilities::SmallRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>*) == 0x8);
    // private readonly UnityEngine.XR.Interaction.Toolkit.Utilities.SmallRegistrationList`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> m_MultipleGrabTransformers
    // Size: 0x8
    // Offset: 0x228
    ::UnityEngine::XR::Interaction::Toolkit::Utilities::SmallRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>* m_MultipleGrabTransformers;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Utilities::SmallRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> m_GrabTransformersAddedWhenGrabbed
    // Size: 0x8
    // Offset: 0x230
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>* m_GrabTransformersAddedWhenGrabbed;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>*) == 0x8);
    // private System.Boolean m_GrabCountChanged
    // Size: 0x1
    // Offset: 0x238
    bool m_GrabCountChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.ValueTuple`2<System.Int32,System.Int32> m_GrabCountBeforeAndAfterChange
    // Size: 0xFFFFFFFF
    // Offset: 0x23C
    ::System::ValueTuple_2<int, int> m_GrabCountBeforeAndAfterChange;
    // private System.Boolean m_IsProcessingGrabTransformers
    // Size: 0x1
    // Offset: 0x244
    bool m_IsProcessingGrabTransformers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Pose m_TargetPose
    // Size: 0x1C
    // Offset: 0x248
    ::UnityEngine::Pose m_TargetPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Vector3 m_TargetLocalScale
    // Size: 0xC
    // Offset: 0x264
    ::UnityEngine::Vector3 m_TargetLocalScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_CurrentAttachEaseTime
    // Size: 0x4
    // Offset: 0x270
    float m_CurrentAttachEaseTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/MovementType m_CurrentMovementType
    // Size: 0x4
    // Offset: 0x274
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType m_CurrentMovementType;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType) == 0x4);
    // private System.Boolean m_DetachInLateUpdate
    // Size: 0x1
    // Offset: 0x278
    bool m_DetachInLateUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Vector3 m_DetachVelocity
    // Size: 0xC
    // Offset: 0x27C
    ::UnityEngine::Vector3 m_DetachVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_DetachAngularVelocity
    // Size: 0xC
    // Offset: 0x288
    ::UnityEngine::Vector3 m_DetachAngularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Int32 m_ThrowSmoothingCurrentFrame
    // Size: 0x4
    // Offset: 0x294
    int m_ThrowSmoothingCurrentFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Single[] m_ThrowSmoothingFrameTimes
    // Size: 0x8
    // Offset: 0x298
    ::ArrayW<float> m_ThrowSmoothingFrameTimes;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private readonly UnityEngine.Vector3[] m_ThrowSmoothingVelocityFrames
    // Size: 0x8
    // Offset: 0x2A0
    ::ArrayW<::UnityEngine::Vector3> m_ThrowSmoothingVelocityFrames;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private readonly UnityEngine.Vector3[] m_ThrowSmoothingAngularVelocityFrames
    // Size: 0x8
    // Offset: 0x2A8
    ::ArrayW<::UnityEngine::Vector3> m_ThrowSmoothingAngularVelocityFrames;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Boolean m_ThrowSmoothingFirstUpdate
    // Size: 0x1
    // Offset: 0x2B0
    bool m_ThrowSmoothingFirstUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Pose m_LastThrowReferencePose
    // Size: 0x1C
    // Offset: 0x2B4
    ::UnityEngine::Pose m_LastThrowReferencePose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Rigidbody m_Rigidbody
    // Size: 0x8
    // Offset: 0x2D0
    ::UnityEngine::Rigidbody* m_Rigidbody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private System.Boolean m_WasKinematic
    // Size: 0x1
    // Offset: 0x2D8
    bool m_WasKinematic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_UsedGravity
    // Size: 0x1
    // Offset: 0x2D9
    bool m_UsedGravity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single m_OldDrag
    // Size: 0x4
    // Offset: 0x2DC
    float m_OldDrag;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_OldAngularDrag
    // Size: 0x4
    // Offset: 0x2E0
    float m_OldAngularDrag;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Transform m_OriginalSceneParent
    // Size: 0x8
    // Offset: 0x2E8
    ::UnityEngine::Transform* m_OriginalSceneParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.Utilities.TeleportationMonitor m_TeleportationMonitor
    // Size: 0x8
    // Offset: 0x2F0
    ::UnityEngine::XR::Interaction::Toolkit::Utilities::TeleportationMonitor* m_TeleportationMonitor;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Utilities::TeleportationMonitor*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor,UnityEngine.Transform> m_DynamicAttachTransforms
    // Size: 0x8
    // Offset: 0x2F8
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor*, ::UnityEngine::Transform*>* m_DynamicAttachTransforms;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor*, ::UnityEngine::Transform*>*) == 0x8);
    public:
    // static field const value: static private System.Single k_DefaultTighteningAmount
    static constexpr const float k_DefaultTighteningAmount = 0.5;
    // Get static field: static private System.Single k_DefaultTighteningAmount
    static float _get_k_DefaultTighteningAmount();
    // Set static field: static private System.Single k_DefaultTighteningAmount
    static void _set_k_DefaultTighteningAmount(float value);
    // static field const value: static private System.Single k_DefaultSmoothingAmount
    static constexpr const float k_DefaultSmoothingAmount = 5;
    // Get static field: static private System.Single k_DefaultSmoothingAmount
    static float _get_k_DefaultSmoothingAmount();
    // Set static field: static private System.Single k_DefaultSmoothingAmount
    static void _set_k_DefaultSmoothingAmount(float value);
    // static field const value: static private System.Single k_VelocityDamping
    static constexpr const float k_VelocityDamping = 1;
    // Get static field: static private System.Single k_VelocityDamping
    static float _get_k_VelocityDamping();
    // Set static field: static private System.Single k_VelocityDamping
    static void _set_k_VelocityDamping(float value);
    // static field const value: static private System.Single k_VelocityScale
    static constexpr const float k_VelocityScale = 1;
    // Get static field: static private System.Single k_VelocityScale
    static float _get_k_VelocityScale();
    // Set static field: static private System.Single k_VelocityScale
    static void _set_k_VelocityScale(float value);
    // static field const value: static private System.Single k_AngularVelocityDamping
    static constexpr const float k_AngularVelocityDamping = 1;
    // Get static field: static private System.Single k_AngularVelocityDamping
    static float _get_k_AngularVelocityDamping();
    // Set static field: static private System.Single k_AngularVelocityDamping
    static void _set_k_AngularVelocityDamping(float value);
    // static field const value: static private System.Single k_AngularVelocityScale
    static constexpr const float k_AngularVelocityScale = 1;
    // Get static field: static private System.Single k_AngularVelocityScale
    static float _get_k_AngularVelocityScale();
    // Set static field: static private System.Single k_AngularVelocityScale
    static void _set_k_AngularVelocityScale(float value);
    // static field const value: static private System.Int32 k_ThrowSmoothingFrameCount
    static constexpr const int k_ThrowSmoothingFrameCount = 20;
    // Get static field: static private System.Int32 k_ThrowSmoothingFrameCount
    static int _get_k_ThrowSmoothingFrameCount();
    // Set static field: static private System.Int32 k_ThrowSmoothingFrameCount
    static void _set_k_ThrowSmoothingFrameCount(int value);
    // static field const value: static private System.Single k_DefaultAttachEaseInTime
    static constexpr const float k_DefaultAttachEaseInTime = 0.15;
    // Get static field: static private System.Single k_DefaultAttachEaseInTime
    static float _get_k_DefaultAttachEaseInTime();
    // Set static field: static private System.Single k_DefaultAttachEaseInTime
    static void _set_k_DefaultAttachEaseInTime(float value);
    // static field const value: static private System.Single k_DefaultThrowSmoothingDuration
    static constexpr const float k_DefaultThrowSmoothingDuration = 0.25;
    // Get static field: static private System.Single k_DefaultThrowSmoothingDuration
    static float _get_k_DefaultThrowSmoothingDuration();
    // Set static field: static private System.Single k_DefaultThrowSmoothingDuration
    static void _set_k_DefaultThrowSmoothingDuration(float value);
    // static field const value: static private System.Single k_DefaultThrowVelocityScale
    static constexpr const float k_DefaultThrowVelocityScale = 1.5;
    // Get static field: static private System.Single k_DefaultThrowVelocityScale
    static float _get_k_DefaultThrowVelocityScale();
    // Set static field: static private System.Single k_DefaultThrowVelocityScale
    static void _set_k_DefaultThrowVelocityScale(float value);
    // static field const value: static private System.Single k_DefaultThrowAngularVelocityScale
    static constexpr const float k_DefaultThrowAngularVelocityScale = 1;
    // Get static field: static private System.Single k_DefaultThrowAngularVelocityScale
    static float _get_k_DefaultThrowAngularVelocityScale();
    // Set static field: static private System.Single k_DefaultThrowAngularVelocityScale
    static void _set_k_DefaultThrowAngularVelocityScale(float value);
    // static field const value: static private System.Single k_DeltaTimeThreshold
    static constexpr const float k_DeltaTimeThreshold = 0.001;
    // Get static field: static private System.Single k_DeltaTimeThreshold
    static float _get_k_DeltaTimeThreshold();
    // Set static field: static private System.Single k_DeltaTimeThreshold
    static void _set_k_DeltaTimeThreshold(float value);
    // Get static field: static private readonly UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1<UnityEngine.Transform> s_DynamicAttachTransformPool
    static ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<::UnityEngine::Transform*>* _get_s_DynamicAttachTransformPool();
    // Set static field: static private readonly UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1<UnityEngine.Transform> s_DynamicAttachTransformPool
    static void _set_s_DynamicAttachTransformPool(::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<::UnityEngine::Transform*>* value);
    // Get static field: static private readonly Unity.Profiling.ProfilerMarker s_ProcessGrabTransformersMarker
    static ::Unity::Profiling::ProfilerMarker _get_s_ProcessGrabTransformersMarker();
    // Set static field: static private readonly Unity.Profiling.ProfilerMarker s_ProcessGrabTransformersMarker
    static void _set_s_ProcessGrabTransformersMarker(::Unity::Profiling::ProfilerMarker value);
    // Get instance field reference: private UnityEngine.Transform m_AttachTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_AttachTransform();
    // Get instance field reference: private UnityEngine.Transform m_SecondaryAttachTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_SecondaryAttachTransform();
    // Get instance field reference: private System.Boolean m_UseDynamicAttach
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseDynamicAttach();
    // Get instance field reference: private System.Boolean m_MatchAttachPosition
    [[deprecated("Use field access instead!")]] bool& dyn_m_MatchAttachPosition();
    // Get instance field reference: private System.Boolean m_MatchAttachRotation
    [[deprecated("Use field access instead!")]] bool& dyn_m_MatchAttachRotation();
    // Get instance field reference: private System.Boolean m_SnapToColliderVolume
    [[deprecated("Use field access instead!")]] bool& dyn_m_SnapToColliderVolume();
    // Get instance field reference: private System.Boolean m_ReinitializeDynamicAttachEverySingleGrab
    [[deprecated("Use field access instead!")]] bool& dyn_m_ReinitializeDynamicAttachEverySingleGrab();
    // Get instance field reference: private System.Single m_AttachEaseInTime
    [[deprecated("Use field access instead!")]] float& dyn_m_AttachEaseInTime();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/MovementType m_MovementType
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType& dyn_m_MovementType();
    // Get instance field reference: private System.Single m_VelocityDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_VelocityDamping();
    // Get instance field reference: private System.Single m_VelocityScale
    [[deprecated("Use field access instead!")]] float& dyn_m_VelocityScale();
    // Get instance field reference: private System.Single m_AngularVelocityDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_AngularVelocityDamping();
    // Get instance field reference: private System.Single m_AngularVelocityScale
    [[deprecated("Use field access instead!")]] float& dyn_m_AngularVelocityScale();
    // Get instance field reference: private System.Boolean m_TrackPosition
    [[deprecated("Use field access instead!")]] bool& dyn_m_TrackPosition();
    // Get instance field reference: private System.Boolean m_SmoothPosition
    [[deprecated("Use field access instead!")]] bool& dyn_m_SmoothPosition();
    // Get instance field reference: private System.Single m_SmoothPositionAmount
    [[deprecated("Use field access instead!")]] float& dyn_m_SmoothPositionAmount();
    // Get instance field reference: private System.Single m_TightenPosition
    [[deprecated("Use field access instead!")]] float& dyn_m_TightenPosition();
    // Get instance field reference: private System.Boolean m_TrackRotation
    [[deprecated("Use field access instead!")]] bool& dyn_m_TrackRotation();
    // Get instance field reference: private System.Boolean m_SmoothRotation
    [[deprecated("Use field access instead!")]] bool& dyn_m_SmoothRotation();
    // Get instance field reference: private System.Single m_SmoothRotationAmount
    [[deprecated("Use field access instead!")]] float& dyn_m_SmoothRotationAmount();
    // Get instance field reference: private System.Single m_TightenRotation
    [[deprecated("Use field access instead!")]] float& dyn_m_TightenRotation();
    // Get instance field reference: private System.Boolean m_ThrowOnDetach
    [[deprecated("Use field access instead!")]] bool& dyn_m_ThrowOnDetach();
    // Get instance field reference: private System.Single m_ThrowSmoothingDuration
    [[deprecated("Use field access instead!")]] float& dyn_m_ThrowSmoothingDuration();
    // Get instance field reference: private UnityEngine.AnimationCurve m_ThrowSmoothingCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_m_ThrowSmoothingCurve();
    // Get instance field reference: private System.Single m_ThrowVelocityScale
    [[deprecated("Use field access instead!")]] float& dyn_m_ThrowVelocityScale();
    // Get instance field reference: private System.Single m_ThrowAngularVelocityScale
    [[deprecated("Use field access instead!")]] float& dyn_m_ThrowAngularVelocityScale();
    // Get instance field reference: private System.Boolean m_ForceGravityOnDetach
    [[deprecated("Use field access instead!")]] bool& dyn_m_ForceGravityOnDetach();
    // Get instance field reference: private System.Boolean m_RetainTransformParent
    [[deprecated("Use field access instead!")]] bool& dyn_m_RetainTransformParent();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable/AttachPointCompatibilityMode m_AttachPointCompatibilityMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AttachPointCompatibilityMode& dyn_m_AttachPointCompatibilityMode();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer> m_StartingSingleGrabTransformers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer*>*& dyn_m_StartingSingleGrabTransformers();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer> m_StartingMultipleGrabTransformers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer*>*& dyn_m_StartingMultipleGrabTransformers();
    // Get instance field reference: private System.Boolean m_AddDefaultGrabTransformers
    [[deprecated("Use field access instead!")]] bool& dyn_m_AddDefaultGrabTransformers();
    // Get instance field reference: private readonly UnityEngine.XR.Interaction.Toolkit.Utilities.SmallRegistrationList`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> m_SingleGrabTransformers
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Utilities::SmallRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>*& dyn_m_SingleGrabTransformers();
    // Get instance field reference: private readonly UnityEngine.XR.Interaction.Toolkit.Utilities.SmallRegistrationList`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> m_MultipleGrabTransformers
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Utilities::SmallRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>*& dyn_m_MultipleGrabTransformers();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> m_GrabTransformersAddedWhenGrabbed
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>*& dyn_m_GrabTransformersAddedWhenGrabbed();
    // Get instance field reference: private System.Boolean m_GrabCountChanged
    [[deprecated("Use field access instead!")]] bool& dyn_m_GrabCountChanged();
    // Get instance field reference: private System.ValueTuple`2<System.Int32,System.Int32> m_GrabCountBeforeAndAfterChange
    [[deprecated("Use field access instead!")]] ::System::ValueTuple_2<int, int>& dyn_m_GrabCountBeforeAndAfterChange();
    // Get instance field reference: private System.Boolean m_IsProcessingGrabTransformers
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsProcessingGrabTransformers();
    // Get instance field reference: private UnityEngine.Pose m_TargetPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_m_TargetPose();
    // Get instance field reference: private UnityEngine.Vector3 m_TargetLocalScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_TargetLocalScale();
    // Get instance field reference: private System.Single m_CurrentAttachEaseTime
    [[deprecated("Use field access instead!")]] float& dyn_m_CurrentAttachEaseTime();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/MovementType m_CurrentMovementType
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType& dyn_m_CurrentMovementType();
    // Get instance field reference: private System.Boolean m_DetachInLateUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_m_DetachInLateUpdate();
    // Get instance field reference: private UnityEngine.Vector3 m_DetachVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_DetachVelocity();
    // Get instance field reference: private UnityEngine.Vector3 m_DetachAngularVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_DetachAngularVelocity();
    // Get instance field reference: private System.Int32 m_ThrowSmoothingCurrentFrame
    [[deprecated("Use field access instead!")]] int& dyn_m_ThrowSmoothingCurrentFrame();
    // Get instance field reference: private readonly System.Single[] m_ThrowSmoothingFrameTimes
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_ThrowSmoothingFrameTimes();
    // Get instance field reference: private readonly UnityEngine.Vector3[] m_ThrowSmoothingVelocityFrames
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_ThrowSmoothingVelocityFrames();
    // Get instance field reference: private readonly UnityEngine.Vector3[] m_ThrowSmoothingAngularVelocityFrames
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_ThrowSmoothingAngularVelocityFrames();
    // Get instance field reference: private System.Boolean m_ThrowSmoothingFirstUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_m_ThrowSmoothingFirstUpdate();
    // Get instance field reference: private UnityEngine.Pose m_LastThrowReferencePose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_m_LastThrowReferencePose();
    // Get instance field reference: private UnityEngine.Rigidbody m_Rigidbody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_m_Rigidbody();
    // Get instance field reference: private System.Boolean m_WasKinematic
    [[deprecated("Use field access instead!")]] bool& dyn_m_WasKinematic();
    // Get instance field reference: private System.Boolean m_UsedGravity
    [[deprecated("Use field access instead!")]] bool& dyn_m_UsedGravity();
    // Get instance field reference: private System.Single m_OldDrag
    [[deprecated("Use field access instead!")]] float& dyn_m_OldDrag();
    // Get instance field reference: private System.Single m_OldAngularDrag
    [[deprecated("Use field access instead!")]] float& dyn_m_OldAngularDrag();
    // Get instance field reference: private UnityEngine.Transform m_OriginalSceneParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_OriginalSceneParent();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.Utilities.TeleportationMonitor m_TeleportationMonitor
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Utilities::TeleportationMonitor*& dyn_m_TeleportationMonitor();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor,UnityEngine.Transform> m_DynamicAttachTransforms
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor*, ::UnityEngine::Transform*>*& dyn_m_DynamicAttachTransforms();
    // public UnityEngine.Transform get_attachTransform()
    // Offset: 0x53DC688
    ::UnityEngine::Transform* get_attachTransform();
    // public System.Void set_attachTransform(UnityEngine.Transform value)
    // Offset: 0x53DC690
    void set_attachTransform(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_secondaryAttachTransform()
    // Offset: 0x53DC6A0
    ::UnityEngine::Transform* get_secondaryAttachTransform();
    // public System.Void set_secondaryAttachTransform(UnityEngine.Transform value)
    // Offset: 0x53DC6A8
    void set_secondaryAttachTransform(::UnityEngine::Transform* value);
    // public System.Boolean get_useDynamicAttach()
    // Offset: 0x53DC6B8
    bool get_useDynamicAttach();
    // public System.Void set_useDynamicAttach(System.Boolean value)
    // Offset: 0x53DC6C0
    void set_useDynamicAttach(bool value);
    // public System.Boolean get_matchAttachPosition()
    // Offset: 0x53DC6CC
    bool get_matchAttachPosition();
    // public System.Void set_matchAttachPosition(System.Boolean value)
    // Offset: 0x53DC6D4
    void set_matchAttachPosition(bool value);
    // public System.Boolean get_matchAttachRotation()
    // Offset: 0x53DC6E0
    bool get_matchAttachRotation();
    // public System.Void set_matchAttachRotation(System.Boolean value)
    // Offset: 0x53DC6E8
    void set_matchAttachRotation(bool value);
    // public System.Boolean get_snapToColliderVolume()
    // Offset: 0x53DC6F4
    bool get_snapToColliderVolume();
    // public System.Void set_snapToColliderVolume(System.Boolean value)
    // Offset: 0x53DC6FC
    void set_snapToColliderVolume(bool value);
    // public System.Boolean get_reinitializeDynamicAttachEverySingleGrab()
    // Offset: 0x53DC708
    bool get_reinitializeDynamicAttachEverySingleGrab();
    // public System.Void set_reinitializeDynamicAttachEverySingleGrab(System.Boolean value)
    // Offset: 0x53DC710
    void set_reinitializeDynamicAttachEverySingleGrab(bool value);
    // public System.Single get_attachEaseInTime()
    // Offset: 0x53DC71C
    float get_attachEaseInTime();
    // public System.Void set_attachEaseInTime(System.Single value)
    // Offset: 0x53DC724
    void set_attachEaseInTime(float value);
    // public UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/MovementType get_movementType()
    // Offset: 0x53DC72C
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType get_movementType();
    // public System.Void set_movementType(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/MovementType value)
    // Offset: 0x53DC734
    void set_movementType(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType value);
    // public System.Single get_velocityDamping()
    // Offset: 0x53DCA78
    float get_velocityDamping();
    // public System.Void set_velocityDamping(System.Single value)
    // Offset: 0x53DCA80
    void set_velocityDamping(float value);
    // public System.Single get_velocityScale()
    // Offset: 0x53DCA88
    float get_velocityScale();
    // public System.Void set_velocityScale(System.Single value)
    // Offset: 0x53DCA90
    void set_velocityScale(float value);
    // public System.Single get_angularVelocityDamping()
    // Offset: 0x53DCA98
    float get_angularVelocityDamping();
    // public System.Void set_angularVelocityDamping(System.Single value)
    // Offset: 0x53DCAA0
    void set_angularVelocityDamping(float value);
    // public System.Single get_angularVelocityScale()
    // Offset: 0x53DCAA8
    float get_angularVelocityScale();
    // public System.Void set_angularVelocityScale(System.Single value)
    // Offset: 0x53DCAB0
    void set_angularVelocityScale(float value);
    // public System.Boolean get_trackPosition()
    // Offset: 0x53DCAB8
    bool get_trackPosition();
    // public System.Void set_trackPosition(System.Boolean value)
    // Offset: 0x53DCAC0
    void set_trackPosition(bool value);
    // public System.Boolean get_smoothPosition()
    // Offset: 0x53DCACC
    bool get_smoothPosition();
    // public System.Void set_smoothPosition(System.Boolean value)
    // Offset: 0x53DCAD4
    void set_smoothPosition(bool value);
    // public System.Single get_smoothPositionAmount()
    // Offset: 0x53DCAE0
    float get_smoothPositionAmount();
    // public System.Void set_smoothPositionAmount(System.Single value)
    // Offset: 0x53DCAE8
    void set_smoothPositionAmount(float value);
    // public System.Single get_tightenPosition()
    // Offset: 0x53DCAF0
    float get_tightenPosition();
    // public System.Void set_tightenPosition(System.Single value)
    // Offset: 0x53DCAF8
    void set_tightenPosition(float value);
    // public System.Boolean get_trackRotation()
    // Offset: 0x53DCB00
    bool get_trackRotation();
    // public System.Void set_trackRotation(System.Boolean value)
    // Offset: 0x53DCB08
    void set_trackRotation(bool value);
    // public System.Boolean get_smoothRotation()
    // Offset: 0x53DCB14
    bool get_smoothRotation();
    // public System.Void set_smoothRotation(System.Boolean value)
    // Offset: 0x53DCB1C
    void set_smoothRotation(bool value);
    // public System.Single get_smoothRotationAmount()
    // Offset: 0x53DCB28
    float get_smoothRotationAmount();
    // public System.Void set_smoothRotationAmount(System.Single value)
    // Offset: 0x53DCB30
    void set_smoothRotationAmount(float value);
    // public System.Single get_tightenRotation()
    // Offset: 0x53DCB38
    float get_tightenRotation();
    // public System.Void set_tightenRotation(System.Single value)
    // Offset: 0x53DCB40
    void set_tightenRotation(float value);
    // public System.Boolean get_throwOnDetach()
    // Offset: 0x53DCB48
    bool get_throwOnDetach();
    // public System.Void set_throwOnDetach(System.Boolean value)
    // Offset: 0x53DCB50
    void set_throwOnDetach(bool value);
    // public System.Single get_throwSmoothingDuration()
    // Offset: 0x53DCB5C
    float get_throwSmoothingDuration();
    // public System.Void set_throwSmoothingDuration(System.Single value)
    // Offset: 0x53DCB64
    void set_throwSmoothingDuration(float value);
    // public UnityEngine.AnimationCurve get_throwSmoothingCurve()
    // Offset: 0x53DCB6C
    ::UnityEngine::AnimationCurve* get_throwSmoothingCurve();
    // public System.Void set_throwSmoothingCurve(UnityEngine.AnimationCurve value)
    // Offset: 0x53DCB74
    void set_throwSmoothingCurve(::UnityEngine::AnimationCurve* value);
    // public System.Single get_throwVelocityScale()
    // Offset: 0x53DCB84
    float get_throwVelocityScale();
    // public System.Void set_throwVelocityScale(System.Single value)
    // Offset: 0x53DCB8C
    void set_throwVelocityScale(float value);
    // public System.Single get_throwAngularVelocityScale()
    // Offset: 0x53DCB94
    float get_throwAngularVelocityScale();
    // public System.Void set_throwAngularVelocityScale(System.Single value)
    // Offset: 0x53DCB9C
    void set_throwAngularVelocityScale(float value);
    // public System.Boolean get_forceGravityOnDetach()
    // Offset: 0x53DCBA4
    bool get_forceGravityOnDetach();
    // public System.Void set_forceGravityOnDetach(System.Boolean value)
    // Offset: 0x53DCBAC
    void set_forceGravityOnDetach(bool value);
    // public System.Boolean get_retainTransformParent()
    // Offset: 0x53DCBB8
    bool get_retainTransformParent();
    // public System.Void set_retainTransformParent(System.Boolean value)
    // Offset: 0x53DCBC0
    void set_retainTransformParent(bool value);
    // public UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable/AttachPointCompatibilityMode get_attachPointCompatibilityMode()
    // Offset: 0x53DCBCC
    ::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AttachPointCompatibilityMode get_attachPointCompatibilityMode();
    // public System.Void set_attachPointCompatibilityMode(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable/AttachPointCompatibilityMode value)
    // Offset: 0x53DCBD4
    void set_attachPointCompatibilityMode(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AttachPointCompatibilityMode value);
    // public System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer> get_startingSingleGrabTransformers()
    // Offset: 0x53DCBDC
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer*>* get_startingSingleGrabTransformers();
    // public System.Void set_startingSingleGrabTransformers(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer> value)
    // Offset: 0x53DCBE4
    void set_startingSingleGrabTransformers(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer*>* value);
    // public System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer> get_startingMultipleGrabTransformers()
    // Offset: 0x53DCBF4
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer*>* get_startingMultipleGrabTransformers();
    // public System.Void set_startingMultipleGrabTransformers(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer> value)
    // Offset: 0x53DCBFC
    void set_startingMultipleGrabTransformers(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer*>* value);
    // public System.Boolean get_addDefaultGrabTransformers()
    // Offset: 0x53DCC0C
    bool get_addDefaultGrabTransformers();
    // public System.Void set_addDefaultGrabTransformers(System.Boolean value)
    // Offset: 0x53DCC14
    void set_addDefaultGrabTransformers(bool value);
    // public System.Int32 get_singleGrabTransformersCount()
    // Offset: 0x53DCC20
    int get_singleGrabTransformersCount();
    // public System.Int32 get_multipleGrabTransformersCount()
    // Offset: 0x53DCC70
    int get_multipleGrabTransformersCount();
    // public System.Void AddSingleGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer)
    // Offset: 0x53DD33C
    void AddSingleGrabTransformer(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* transformer);
    // public System.Void AddMultipleGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer)
    // Offset: 0x53DD34C
    void AddMultipleGrabTransformer(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* transformer);
    // public System.Boolean RemoveSingleGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer)
    // Offset: 0x53DE01C
    bool RemoveSingleGrabTransformer(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* transformer);
    // public System.Boolean RemoveMultipleGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer)
    // Offset: 0x53DE074
    bool RemoveMultipleGrabTransformer(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* transformer);
    // public System.Void ClearSingleGrabTransformers()
    // Offset: 0x53DD3AC
    void ClearSingleGrabTransformers();
    // public System.Void ClearMultipleGrabTransformers()
    // Offset: 0x53DD3B4
    void ClearMultipleGrabTransformers();
    // public System.Void GetSingleGrabTransformers(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> results)
    // Offset: 0x53DE110
    void GetSingleGrabTransformers(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>* results);
    // public System.Void GetMultipleGrabTransformers(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> results)
    // Offset: 0x53DE1E0
    void GetMultipleGrabTransformers(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>* results);
    // public UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer GetSingleGrabTransformerAt(System.Int32 index)
    // Offset: 0x53DE248
    ::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* GetSingleGrabTransformerAt(int index);
    // public UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer GetMultipleGrabTransformerAt(System.Int32 index)
    // Offset: 0x53DE268
    ::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* GetMultipleGrabTransformerAt(int index);
    // public System.Void MoveSingleGrabTransformerTo(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer, System.Int32 newIndex)
    // Offset: 0x53DD334
    void MoveSingleGrabTransformerTo(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* transformer, int newIndex);
    // public System.Void MoveMultipleGrabTransformerTo(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer, System.Int32 newIndex)
    // Offset: 0x53DD344
    void MoveMultipleGrabTransformerTo(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* transformer, int newIndex);
    // private System.Void AddGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer, UnityEngine.XR.Interaction.Toolkit.Utilities.BaseRegistrationList`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> grabTransformers)
    // Offset: 0x53DDEE0
    void AddGrabTransformer(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* transformer, ::UnityEngine::XR::Interaction::Toolkit::Utilities::BaseRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>* grabTransformers);
    // private System.Boolean RemoveGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer, UnityEngine.XR.Interaction.Toolkit.Utilities.BaseRegistrationList`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> grabTransformers)
    // Offset: 0x53DE024
    bool RemoveGrabTransformer(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* transformer, ::UnityEngine::XR::Interaction::Toolkit::Utilities::BaseRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>* grabTransformers);
    // private System.Void ClearGrabTransformers(UnityEngine.XR.Interaction.Toolkit.Utilities.BaseRegistrationList`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> grabTransformers)
    // Offset: 0x53DE07C
    void ClearGrabTransformers(::UnityEngine::XR::Interaction::Toolkit::Utilities::BaseRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>* grabTransformers);
    // static private System.Void GetGrabTransformers(UnityEngine.XR.Interaction.Toolkit.Utilities.BaseRegistrationList`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> grabTransformers, System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> results)
    // Offset: 0x53DE178
    static void GetGrabTransformers(::UnityEngine::XR::Interaction::Toolkit::Utilities::BaseRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>* grabTransformers, ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>* results);
    // private System.Void MoveGrabTransformerTo(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer, System.Int32 newIndex, UnityEngine.XR.Interaction.Toolkit.Utilities.BaseRegistrationList`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> grabTransformers)
    // Offset: 0x53DE288
    void MoveGrabTransformerTo(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* transformer, int newIndex, ::UnityEngine::XR::Interaction::Toolkit::Utilities::BaseRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>* grabTransformers);
    // private System.Void FlushRegistration()
    // Offset: 0x53DD354
    void FlushRegistration();
    // private System.Void InvokeGrabTransformersOnGrab()
    // Offset: 0x53DE6DC
    void InvokeGrabTransformersOnGrab();
    // private System.Void InvokeGrabTransformersProcess(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase, ref UnityEngine.Pose targetPose, ref UnityEngine.Vector3 localScale)
    // Offset: 0x53DEA4C
    void InvokeGrabTransformersProcess(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase, ByRef<::UnityEngine::Pose> targetPose, ByRef<::UnityEngine::Vector3> localScale);
    // private System.Boolean CanProcessAnySingleGrabTransformer()
    // Offset: 0x53DF6BC
    bool CanProcessAnySingleGrabTransformer();
    // private System.Void OnAddedGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer)
    // Offset: 0x53DE3F8
    void OnAddedGrabTransformer(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* transformer);
    // private System.Void OnRemovedGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer)
    // Offset: 0x53DE600
    void OnRemovedGrabTransformer(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* transformer);
    // private System.Void AddDefaultGrabTransformers()
    // Offset: 0x53DD4BC
    void AddDefaultGrabTransformers();
    // protected System.Void AddDefaultSingleGrabTransformer()
    // Offset: 0x53DF8FC
    void AddDefaultSingleGrabTransformer();
    // protected System.Void AddDefaultMultipleGrabTransformer()
    // Offset: 0x53DF9BC
    void AddDefaultMultipleGrabTransformer();
    // private UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer GetOrAddDefaultGrabTransformer()
    // Offset: 0x53DF974
    ::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* GetOrAddDefaultGrabTransformer();
    // private T GetOrAddComponent()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T GetOrAddComponent() {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetOrAddComponent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOrAddComponent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method);
    }
    // private System.Void UpdateTarget(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase, System.Single deltaTime)
    // Offset: 0x53DD9A4
    void UpdateTarget(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase, float deltaTime);
    // private System.Void StepSmoothing(UnityEngine.Pose rawTargetPose, System.Single deltaTime)
    // Offset: 0x53DFD20
    void StepSmoothing(::UnityEngine::Pose rawTargetPose, float deltaTime);
    // private System.Void PerformInstantaneousUpdate(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    // Offset: 0x53DDB90
    void PerformInstantaneousUpdate(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // private System.Void PerformKinematicUpdate(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    // Offset: 0x53DD590
    void PerformKinematicUpdate(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // private System.Void PerformVelocityTrackingUpdate(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase, System.Single deltaTime)
    // Offset: 0x53DD680
    void PerformVelocityTrackingUpdate(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase, float deltaTime);
    // private System.Void UpdateCurrentMovementType()
    // Offset: 0x53DC78C
    void UpdateCurrentMovementType();
    // private UnityEngine.Transform CreateDynamicAttachTransform(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor)
    // Offset: 0x53E0090
    ::UnityEngine::Transform* CreateDynamicAttachTransform(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor* interactor);
    // private System.Void InitializeDynamicAttachPoseInternal(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor, UnityEngine.Transform dynamicAttachTransform)
    // Offset: 0x53DFA34
    void InitializeDynamicAttachPoseInternal(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor* interactor, ::UnityEngine::Transform* dynamicAttachTransform);
    // private System.Void InitializeDynamicAttachPoseWithStatic(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor, UnityEngine.Transform dynamicAttachTransform)
    // Offset: 0x53E04B4
    void InitializeDynamicAttachPoseWithStatic(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor* interactor, ::UnityEngine::Transform* dynamicAttachTransform);
    // private System.Void ReleaseDynamicAttachTransform(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor)
    // Offset: 0x53E0360
    void ReleaseDynamicAttachTransform(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor* interactor);
    // protected System.Boolean ShouldMatchAttachPosition(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor)
    // Offset: 0x53E0738
    bool ShouldMatchAttachPosition(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor* interactor);
    // protected System.Boolean ShouldMatchAttachRotation(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor)
    // Offset: 0x53E0800
    bool ShouldMatchAttachRotation(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor* interactor);
    // protected System.Boolean ShouldSnapToColliderVolume(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor)
    // Offset: 0x53E088C
    bool ShouldSnapToColliderVolume(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor* interactor);
    // protected System.Void InitializeDynamicAttachPose(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor, UnityEngine.Transform dynamicAttachTransform)
    // Offset: 0x53E0894
    void InitializeDynamicAttachPose(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor* interactor, ::UnityEngine::Transform* dynamicAttachTransform);
    // protected System.Void Grab()
    // Offset: 0x53E0AB0
    void Grab();
    // protected System.Void Drop()
    // Offset: 0x53E0BE4
    void Drop();
    // protected System.Void Detach()
    // Offset: 0x53E0DB0
    void Detach();
    // protected System.Void SetupRigidbodyGrab(UnityEngine.Rigidbody rigidbody)
    // Offset: 0x53E0E8C
    void SetupRigidbodyGrab(::UnityEngine::Rigidbody* rigidbody);
    // protected System.Void SetupRigidbodyDrop(UnityEngine.Rigidbody rigidbody)
    // Offset: 0x53E0F40
    void SetupRigidbodyDrop(::UnityEngine::Rigidbody* rigidbody);
    // private System.Void ResetThrowSmoothing()
    // Offset: 0x53E0180
    void ResetThrowSmoothing();
    // private System.Void EndThrowSmoothing()
    // Offset: 0x53E0D30
    void EndThrowSmoothing();
    // private System.Void StepThrowSmoothing(UnityEngine.Pose targetPose, System.Single deltaTime)
    // Offset: 0x53DFA70
    void StepThrowSmoothing(::UnityEngine::Pose targetPose, float deltaTime);
    // private UnityEngine.Vector3 GetSmoothedVelocityValue(UnityEngine.Vector3[] velocityFrames)
    // Offset: 0x53E0FE4
    ::UnityEngine::Vector3 GetSmoothedVelocityValue(::ArrayW<::UnityEngine::Vector3> velocityFrames);
    // private System.Void SubscribeTeleportationProvider(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor)
    // Offset: 0x53E01E8
    void SubscribeTeleportationProvider(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor* interactor);
    // private System.Void UnsubscribeTeleportationProvider(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor)
    // Offset: 0x53E0308
    void UnsubscribeTeleportationProvider(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor* interactor);
    // private System.Void OnTeleported(UnityEngine.Pose offset)
    // Offset: 0x53E121C
    void OnTeleported(::UnityEngine::Pose offset);
    // static private UnityEngine.Transform OnCreatePooledItem()
    // Offset: 0x53E13A0
    static ::UnityEngine::Transform* OnCreatePooledItem();
    // static private System.Void OnGetPooledItem(UnityEngine.Transform item)
    // Offset: 0x53E14D4
    static void OnGetPooledItem(::UnityEngine::Transform* item);
    // static private System.Void OnReleasePooledItem(UnityEngine.Transform item)
    // Offset: 0x53E1564
    static void OnReleasePooledItem(::UnityEngine::Transform* item);
    // static private System.Void OnDestroyPooledItem(UnityEngine.Transform item)
    // Offset: 0x53E15F4
    static void OnDestroyPooledItem(::UnityEngine::Transform* item);
    // public System.Boolean get_gravityOnDetach()
    // Offset: 0x53E1698
    bool get_gravityOnDetach();
    // public System.Void set_gravityOnDetach(System.Boolean value)
    // Offset: 0x53E16A0
    void set_gravityOnDetach(bool value);
    // protected override System.Void Awake()
    // Offset: 0x53DCCC0
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::Awake()
    void Awake();
    // protected override System.Void OnDestroy()
    // Offset: 0x53DD38C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::OnDestroy()
    void OnDestroy();
    // public override System.Void ProcessInteractable(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    // Offset: 0x53DD3BC
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::ProcessInteractable(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    void ProcessInteractable(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // public override UnityEngine.Transform GetAttachTransform(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor)
    // Offset: 0x53DDC68
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: UnityEngine.Transform XRBaseInteractable::GetAttachTransform(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor)
    ::UnityEngine::Transform* GetAttachTransform(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor* interactor);
    // protected override System.Void OnSelectEntering(UnityEngine.XR.Interaction.Toolkit.SelectEnterEventArgs args)
    // Offset: 0x53DFF24
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::OnSelectEntering(UnityEngine.XR.Interaction.Toolkit.SelectEnterEventArgs args)
    void OnSelectEntering(::UnityEngine::XR::Interaction::Toolkit::SelectEnterEventArgs* args);
    // protected override System.Void OnSelectExiting(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)
    // Offset: 0x53E0204
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::OnSelectExiting(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)
    void OnSelectExiting(::UnityEngine::XR::Interaction::Toolkit::SelectExitEventArgs* args);
    // protected override System.Void OnSelectExited(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)
    // Offset: 0x53E0324
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::OnSelectExited(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)
    void OnSelectExited(::UnityEngine::XR::Interaction::Toolkit::SelectExitEventArgs* args);
    // public System.Void .ctor()
    // Offset: 0x53E16AC
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRGrabInteractable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRGrabInteractable*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x53E1950
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::.cctor()
    static void _cctor();
  }; // UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AttachPointCompatibilityMode, "UnityEngine.XR.Interaction.Toolkit", "XRGrabInteractable/AttachPointCompatibilityMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_attachTransform
// Il2CppName: get_attachTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_attachTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_attachTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_attachTransform
// Il2CppName: set_attachTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_attachTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_attachTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_secondaryAttachTransform
// Il2CppName: get_secondaryAttachTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_secondaryAttachTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_secondaryAttachTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_secondaryAttachTransform
// Il2CppName: set_secondaryAttachTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_secondaryAttachTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_secondaryAttachTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_useDynamicAttach
// Il2CppName: get_useDynamicAttach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_useDynamicAttach)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_useDynamicAttach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_useDynamicAttach
// Il2CppName: set_useDynamicAttach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_useDynamicAttach)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_useDynamicAttach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_matchAttachPosition
// Il2CppName: get_matchAttachPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_matchAttachPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_matchAttachPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_matchAttachPosition
// Il2CppName: set_matchAttachPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_matchAttachPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_matchAttachPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_matchAttachRotation
// Il2CppName: get_matchAttachRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_matchAttachRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_matchAttachRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_matchAttachRotation
// Il2CppName: set_matchAttachRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_matchAttachRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_matchAttachRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_snapToColliderVolume
// Il2CppName: get_snapToColliderVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_snapToColliderVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_snapToColliderVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_snapToColliderVolume
// Il2CppName: set_snapToColliderVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_snapToColliderVolume)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_snapToColliderVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_reinitializeDynamicAttachEverySingleGrab
// Il2CppName: get_reinitializeDynamicAttachEverySingleGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_reinitializeDynamicAttachEverySingleGrab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_reinitializeDynamicAttachEverySingleGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_reinitializeDynamicAttachEverySingleGrab
// Il2CppName: set_reinitializeDynamicAttachEverySingleGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_reinitializeDynamicAttachEverySingleGrab)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_reinitializeDynamicAttachEverySingleGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_attachEaseInTime
// Il2CppName: get_attachEaseInTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_attachEaseInTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_attachEaseInTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_attachEaseInTime
// Il2CppName: set_attachEaseInTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_attachEaseInTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_attachEaseInTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_movementType
// Il2CppName: get_movementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_movementType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_movementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_movementType
// Il2CppName: set_movementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_movementType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable/MovementType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_movementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_velocityDamping
// Il2CppName: get_velocityDamping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_velocityDamping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_velocityDamping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_velocityDamping
// Il2CppName: set_velocityDamping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_velocityDamping)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_velocityDamping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_velocityScale
// Il2CppName: get_velocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_velocityScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_velocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_velocityScale
// Il2CppName: set_velocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_velocityScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_velocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_angularVelocityDamping
// Il2CppName: get_angularVelocityDamping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_angularVelocityDamping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_angularVelocityDamping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_angularVelocityDamping
// Il2CppName: set_angularVelocityDamping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_angularVelocityDamping)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_angularVelocityDamping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_angularVelocityScale
// Il2CppName: get_angularVelocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_angularVelocityScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_angularVelocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_angularVelocityScale
// Il2CppName: set_angularVelocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_angularVelocityScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_angularVelocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_trackPosition
// Il2CppName: get_trackPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_trackPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_trackPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_trackPosition
// Il2CppName: set_trackPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_trackPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_trackPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothPosition
// Il2CppName: get_smoothPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_smoothPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothPosition
// Il2CppName: set_smoothPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_smoothPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothPositionAmount
// Il2CppName: get_smoothPositionAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothPositionAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_smoothPositionAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothPositionAmount
// Il2CppName: set_smoothPositionAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothPositionAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_smoothPositionAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_tightenPosition
// Il2CppName: get_tightenPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_tightenPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_tightenPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_tightenPosition
// Il2CppName: set_tightenPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_tightenPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_tightenPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_trackRotation
// Il2CppName: get_trackRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_trackRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_trackRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_trackRotation
// Il2CppName: set_trackRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_trackRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_trackRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothRotation
// Il2CppName: get_smoothRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_smoothRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothRotation
// Il2CppName: set_smoothRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_smoothRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothRotationAmount
// Il2CppName: get_smoothRotationAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothRotationAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_smoothRotationAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothRotationAmount
// Il2CppName: set_smoothRotationAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothRotationAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_smoothRotationAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_tightenRotation
// Il2CppName: get_tightenRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_tightenRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_tightenRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_tightenRotation
// Il2CppName: set_tightenRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_tightenRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_tightenRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwOnDetach
// Il2CppName: get_throwOnDetach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwOnDetach)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_throwOnDetach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwOnDetach
// Il2CppName: set_throwOnDetach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwOnDetach)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_throwOnDetach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwSmoothingDuration
// Il2CppName: get_throwSmoothingDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwSmoothingDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_throwSmoothingDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwSmoothingDuration
// Il2CppName: set_throwSmoothingDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwSmoothingDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_throwSmoothingDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwSmoothingCurve
// Il2CppName: get_throwSmoothingCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwSmoothingCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_throwSmoothingCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwSmoothingCurve
// Il2CppName: set_throwSmoothingCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::AnimationCurve*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwSmoothingCurve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_throwSmoothingCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwVelocityScale
// Il2CppName: get_throwVelocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwVelocityScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_throwVelocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwVelocityScale
// Il2CppName: set_throwVelocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwVelocityScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_throwVelocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwAngularVelocityScale
// Il2CppName: get_throwAngularVelocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwAngularVelocityScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_throwAngularVelocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwAngularVelocityScale
// Il2CppName: set_throwAngularVelocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwAngularVelocityScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_throwAngularVelocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_forceGravityOnDetach
// Il2CppName: get_forceGravityOnDetach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_forceGravityOnDetach)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_forceGravityOnDetach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_forceGravityOnDetach
// Il2CppName: set_forceGravityOnDetach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_forceGravityOnDetach)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_forceGravityOnDetach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_retainTransformParent
// Il2CppName: get_retainTransformParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_retainTransformParent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_retainTransformParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_retainTransformParent
// Il2CppName: set_retainTransformParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_retainTransformParent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_retainTransformParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_attachPointCompatibilityMode
// Il2CppName: get_attachPointCompatibilityMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AttachPointCompatibilityMode (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_attachPointCompatibilityMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_attachPointCompatibilityMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_attachPointCompatibilityMode
// Il2CppName: set_attachPointCompatibilityMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AttachPointCompatibilityMode)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_attachPointCompatibilityMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRGrabInteractable/AttachPointCompatibilityMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_attachPointCompatibilityMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_startingSingleGrabTransformers
// Il2CppName: get_startingSingleGrabTransformers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer*>* (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_startingSingleGrabTransformers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_startingSingleGrabTransformers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_startingSingleGrabTransformers
// Il2CppName: set_startingSingleGrabTransformers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_startingSingleGrabTransformers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "XRBaseGrabTransformer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_startingSingleGrabTransformers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_startingMultipleGrabTransformers
// Il2CppName: get_startingMultipleGrabTransformers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer*>* (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_startingMultipleGrabTransformers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_startingMultipleGrabTransformers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_startingMultipleGrabTransformers
// Il2CppName: set_startingMultipleGrabTransformers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_startingMultipleGrabTransformers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "XRBaseGrabTransformer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_startingMultipleGrabTransformers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_addDefaultGrabTransformers
// Il2CppName: get_addDefaultGrabTransformers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_addDefaultGrabTransformers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_addDefaultGrabTransformers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_addDefaultGrabTransformers
// Il2CppName: set_addDefaultGrabTransformers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_addDefaultGrabTransformers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_addDefaultGrabTransformers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_singleGrabTransformersCount
// Il2CppName: get_singleGrabTransformersCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_singleGrabTransformersCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_singleGrabTransformersCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_multipleGrabTransformersCount
// Il2CppName: get_multipleGrabTransformersCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_multipleGrabTransformersCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_multipleGrabTransformersCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AddSingleGrabTransformer
// Il2CppName: AddSingleGrabTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AddSingleGrabTransformer)> {
  static const MethodInfo* get() {
    static auto* transformer = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "AddSingleGrabTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformer});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AddMultipleGrabTransformer
// Il2CppName: AddMultipleGrabTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AddMultipleGrabTransformer)> {
  static const MethodInfo* get() {
    static auto* transformer = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "AddMultipleGrabTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformer});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::RemoveSingleGrabTransformer
// Il2CppName: RemoveSingleGrabTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::RemoveSingleGrabTransformer)> {
  static const MethodInfo* get() {
    static auto* transformer = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "RemoveSingleGrabTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformer});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::RemoveMultipleGrabTransformer
// Il2CppName: RemoveMultipleGrabTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::RemoveMultipleGrabTransformer)> {
  static const MethodInfo* get() {
    static auto* transformer = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "RemoveMultipleGrabTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformer});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ClearSingleGrabTransformers
// Il2CppName: ClearSingleGrabTransformers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ClearSingleGrabTransformers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "ClearSingleGrabTransformers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ClearMultipleGrabTransformers
// Il2CppName: ClearMultipleGrabTransformers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ClearMultipleGrabTransformers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "ClearMultipleGrabTransformers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetSingleGrabTransformers
// Il2CppName: GetSingleGrabTransformers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetSingleGrabTransformers)> {
  static const MethodInfo* get() {
    static auto* results = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "GetSingleGrabTransformers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{results});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetMultipleGrabTransformers
// Il2CppName: GetMultipleGrabTransformers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetMultipleGrabTransformers)> {
  static const MethodInfo* get() {
    static auto* results = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "GetMultipleGrabTransformers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{results});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetSingleGrabTransformerAt
// Il2CppName: GetSingleGrabTransformerAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(int)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetSingleGrabTransformerAt)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "GetSingleGrabTransformerAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetMultipleGrabTransformerAt
// Il2CppName: GetMultipleGrabTransformerAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(int)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetMultipleGrabTransformerAt)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "GetMultipleGrabTransformerAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::MoveSingleGrabTransformerTo
// Il2CppName: MoveSingleGrabTransformerTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*, int)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::MoveSingleGrabTransformerTo)> {
  static const MethodInfo* get() {
    static auto* transformer = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")->byval_arg;
    static auto* newIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "MoveSingleGrabTransformerTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformer, newIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::MoveMultipleGrabTransformerTo
// Il2CppName: MoveMultipleGrabTransformerTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*, int)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::MoveMultipleGrabTransformerTo)> {
  static const MethodInfo* get() {
    static auto* transformer = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")->byval_arg;
    static auto* newIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "MoveMultipleGrabTransformerTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformer, newIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AddGrabTransformer
// Il2CppName: AddGrabTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*, ::UnityEngine::XR::Interaction::Toolkit::Utilities::BaseRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AddGrabTransformer)> {
  static const MethodInfo* get() {
    static auto* transformer = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")->byval_arg;
    static auto* grabTransformers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Utilities", "BaseRegistrationList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "AddGrabTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformer, grabTransformers});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::RemoveGrabTransformer
// Il2CppName: RemoveGrabTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*, ::UnityEngine::XR::Interaction::Toolkit::Utilities::BaseRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::RemoveGrabTransformer)> {
  static const MethodInfo* get() {
    static auto* transformer = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")->byval_arg;
    static auto* grabTransformers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Utilities", "BaseRegistrationList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "RemoveGrabTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformer, grabTransformers});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ClearGrabTransformers
// Il2CppName: ClearGrabTransformers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::Utilities::BaseRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ClearGrabTransformers)> {
  static const MethodInfo* get() {
    static auto* grabTransformers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Utilities", "BaseRegistrationList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "ClearGrabTransformers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabTransformers});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetGrabTransformers
// Il2CppName: GetGrabTransformers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::XR::Interaction::Toolkit::Utilities::BaseRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>*, ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetGrabTransformers)> {
  static const MethodInfo* get() {
    static auto* grabTransformers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Utilities", "BaseRegistrationList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")})->byval_arg;
    static auto* results = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "GetGrabTransformers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabTransformers, results});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::MoveGrabTransformerTo
// Il2CppName: MoveGrabTransformerTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*, int, ::UnityEngine::XR::Interaction::Toolkit::Utilities::BaseRegistrationList_1<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::MoveGrabTransformerTo)> {
  static const MethodInfo* get() {
    static auto* transformer = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")->byval_arg;
    static auto* newIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* grabTransformers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Utilities", "BaseRegistrationList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "MoveGrabTransformerTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformer, newIndex, grabTransformers});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::FlushRegistration
// Il2CppName: FlushRegistration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::FlushRegistration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "FlushRegistration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::InvokeGrabTransformersOnGrab
// Il2CppName: InvokeGrabTransformersOnGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::InvokeGrabTransformersOnGrab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "InvokeGrabTransformersOnGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::InvokeGrabTransformersProcess
// Il2CppName: InvokeGrabTransformersProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase, ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::InvokeGrabTransformersProcess)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    static auto* targetPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* localScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "InvokeGrabTransformersProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase, targetPose, localScale});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::CanProcessAnySingleGrabTransformer
// Il2CppName: CanProcessAnySingleGrabTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::CanProcessAnySingleGrabTransformer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "CanProcessAnySingleGrabTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnAddedGrabTransformer
// Il2CppName: OnAddedGrabTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnAddedGrabTransformer)> {
  static const MethodInfo* get() {
    static auto* transformer = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "OnAddedGrabTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformer});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnRemovedGrabTransformer
// Il2CppName: OnRemovedGrabTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnRemovedGrabTransformer)> {
  static const MethodInfo* get() {
    static auto* transformer = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "IXRGrabTransformer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "OnRemovedGrabTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformer});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AddDefaultGrabTransformers
// Il2CppName: AddDefaultGrabTransformers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AddDefaultGrabTransformers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "AddDefaultGrabTransformers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AddDefaultSingleGrabTransformer
// Il2CppName: AddDefaultSingleGrabTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AddDefaultSingleGrabTransformer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "AddDefaultSingleGrabTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AddDefaultMultipleGrabTransformer
// Il2CppName: AddDefaultMultipleGrabTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::AddDefaultMultipleGrabTransformer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "AddDefaultMultipleGrabTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetOrAddDefaultGrabTransformer
// Il2CppName: GetOrAddDefaultGrabTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::Transformers::IXRGrabTransformer* (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetOrAddDefaultGrabTransformer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "GetOrAddDefaultGrabTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetOrAddComponent
// Il2CppName: GetOrAddComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::UpdateTarget
// Il2CppName: UpdateTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase, float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::UpdateTarget)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "UpdateTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase, deltaTime});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::StepSmoothing
// Il2CppName: StepSmoothing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::Pose, float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::StepSmoothing)> {
  static const MethodInfo* get() {
    static auto* rawTargetPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "StepSmoothing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rawTargetPose, deltaTime});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::PerformInstantaneousUpdate
// Il2CppName: PerformInstantaneousUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::PerformInstantaneousUpdate)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "PerformInstantaneousUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::PerformKinematicUpdate
// Il2CppName: PerformKinematicUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::PerformKinematicUpdate)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "PerformKinematicUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::PerformVelocityTrackingUpdate
// Il2CppName: PerformVelocityTrackingUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase, float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::PerformVelocityTrackingUpdate)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "PerformVelocityTrackingUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase, deltaTime});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::UpdateCurrentMovementType
// Il2CppName: UpdateCurrentMovementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::UpdateCurrentMovementType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "UpdateCurrentMovementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::CreateDynamicAttachTransform
// Il2CppName: CreateDynamicAttachTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::CreateDynamicAttachTransform)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRSelectInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "CreateDynamicAttachTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::InitializeDynamicAttachPoseInternal
// Il2CppName: InitializeDynamicAttachPoseInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor*, ::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::InitializeDynamicAttachPoseInternal)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRSelectInteractor")->byval_arg;
    static auto* dynamicAttachTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "InitializeDynamicAttachPoseInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, dynamicAttachTransform});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::InitializeDynamicAttachPoseWithStatic
// Il2CppName: InitializeDynamicAttachPoseWithStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor*, ::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::InitializeDynamicAttachPoseWithStatic)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRSelectInteractor")->byval_arg;
    static auto* dynamicAttachTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "InitializeDynamicAttachPoseWithStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, dynamicAttachTransform});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ReleaseDynamicAttachTransform
// Il2CppName: ReleaseDynamicAttachTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ReleaseDynamicAttachTransform)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRSelectInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "ReleaseDynamicAttachTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ShouldMatchAttachPosition
// Il2CppName: ShouldMatchAttachPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ShouldMatchAttachPosition)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRSelectInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "ShouldMatchAttachPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ShouldMatchAttachRotation
// Il2CppName: ShouldMatchAttachRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ShouldMatchAttachRotation)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRSelectInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "ShouldMatchAttachRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ShouldSnapToColliderVolume
// Il2CppName: ShouldSnapToColliderVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ShouldSnapToColliderVolume)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRSelectInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "ShouldSnapToColliderVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::InitializeDynamicAttachPose
// Il2CppName: InitializeDynamicAttachPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor*, ::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::InitializeDynamicAttachPose)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRSelectInteractor")->byval_arg;
    static auto* dynamicAttachTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "InitializeDynamicAttachPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, dynamicAttachTransform});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::Grab
// Il2CppName: Grab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::Grab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "Grab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::Drop
// Il2CppName: Drop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::Drop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "Drop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::Detach
// Il2CppName: Detach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::Detach)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "Detach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::SetupRigidbodyGrab
// Il2CppName: SetupRigidbodyGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::Rigidbody*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::SetupRigidbodyGrab)> {
  static const MethodInfo* get() {
    static auto* rigidbody = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rigidbody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "SetupRigidbodyGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rigidbody});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::SetupRigidbodyDrop
// Il2CppName: SetupRigidbodyDrop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::Rigidbody*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::SetupRigidbodyDrop)> {
  static const MethodInfo* get() {
    static auto* rigidbody = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rigidbody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "SetupRigidbodyDrop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rigidbody});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ResetThrowSmoothing
// Il2CppName: ResetThrowSmoothing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ResetThrowSmoothing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "ResetThrowSmoothing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::EndThrowSmoothing
// Il2CppName: EndThrowSmoothing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::EndThrowSmoothing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "EndThrowSmoothing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::StepThrowSmoothing
// Il2CppName: StepThrowSmoothing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::Pose, float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::StepThrowSmoothing)> {
  static const MethodInfo* get() {
    static auto* targetPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "StepThrowSmoothing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPose, deltaTime});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetSmoothedVelocityValue
// Il2CppName: GetSmoothedVelocityValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetSmoothedVelocityValue)> {
  static const MethodInfo* get() {
    static auto* velocityFrames = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "GetSmoothedVelocityValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{velocityFrames});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::SubscribeTeleportationProvider
// Il2CppName: SubscribeTeleportationProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::SubscribeTeleportationProvider)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "SubscribeTeleportationProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::UnsubscribeTeleportationProvider
// Il2CppName: UnsubscribeTeleportationProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::UnsubscribeTeleportationProvider)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "UnsubscribeTeleportationProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnTeleported
// Il2CppName: OnTeleported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::Pose)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnTeleported)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "OnTeleported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnCreatePooledItem
// Il2CppName: OnCreatePooledItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnCreatePooledItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "OnCreatePooledItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnGetPooledItem
// Il2CppName: OnGetPooledItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnGetPooledItem)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "OnGetPooledItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnReleasePooledItem
// Il2CppName: OnReleasePooledItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnReleasePooledItem)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "OnReleasePooledItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnDestroyPooledItem
// Il2CppName: OnDestroyPooledItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnDestroyPooledItem)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "OnDestroyPooledItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_gravityOnDetach
// Il2CppName: get_gravityOnDetach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_gravityOnDetach)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_gravityOnDetach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_gravityOnDetach
// Il2CppName: set_gravityOnDetach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_gravityOnDetach)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_gravityOnDetach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ProcessInteractable
// Il2CppName: ProcessInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ProcessInteractable)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "ProcessInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetAttachTransform
// Il2CppName: GetAttachTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetAttachTransform)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "GetAttachTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnSelectEntering
// Il2CppName: OnSelectEntering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::SelectEnterEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnSelectEntering)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "SelectEnterEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "OnSelectEntering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnSelectExiting
// Il2CppName: OnSelectExiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::SelectExitEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnSelectExiting)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "SelectExitEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "OnSelectExiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnSelectExited
// Il2CppName: OnSelectExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::SelectExitEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnSelectExited)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "SelectExitEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "OnSelectExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
