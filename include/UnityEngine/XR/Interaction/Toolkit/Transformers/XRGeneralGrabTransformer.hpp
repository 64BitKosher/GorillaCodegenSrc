// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer
#include "UnityEngine/XR/Interaction/Toolkit/Transformers/XRBaseGrabTransformer.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: IXRInteractor
  class IXRInteractor;
  // Forward declaring type: XRGrabInteractable
  class XRGrabInteractable;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::Transformers
namespace UnityEngine::XR::Interaction::Toolkit::Transformers {
  // Skipping declaration: ManipulationAxes because it is already included!
  // Skipping declaration: ConstrainedAxisDisplacementMode because it is already included!
  // Skipping declaration: TwoHandedRotationMode because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Transformers
namespace UnityEngine::XR::Interaction::Toolkit::Transformers {
  // Forward declaring type: XRGeneralGrabTransformer
  class XRGeneralGrabTransformer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*, "UnityEngine.XR.Interaction.Toolkit.Transformers", "XRGeneralGrabTransformer");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Transformers
namespace UnityEngine::XR::Interaction::Toolkit::Transformers {
  // Size: 0x110
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class XRGeneralGrabTransformer : public ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes
    struct ManipulationAxes;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode
    struct ConstrainedAxisDisplacementMode;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TwoHandedRotationMode
    struct TwoHandedRotationMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct ManipulationAxes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ManipulationAxes
      constexpr ManipulationAxes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes X
      static constexpr const int X = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes X
      static ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes _get_X();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes X
      static void _set_X(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes Y
      static constexpr const int Y = 2;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes Y
      static ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes _get_Y();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes Y
      static void _set_Y(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes Z
      static constexpr const int Z = 4;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes Z
      static ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes _get_Z();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes Z
      static void _set_Z(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes All
      static constexpr const int All = 7;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes All
      static ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes _get_All();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes All
      static void _set_All(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes
    #pragma pack(pop)
    static check_size<sizeof(XRGeneralGrabTransformer::ManipulationAxes), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_Transformers_XRGeneralGrabTransformer_ManipulationAxesSizeCheck;
    static_assert(sizeof(XRGeneralGrabTransformer::ManipulationAxes) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct ConstrainedAxisDisplacementMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ConstrainedAxisDisplacementMode
      constexpr ConstrainedAxisDisplacementMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode ObjectRelative
      static constexpr const int ObjectRelative = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode ObjectRelative
      static ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode _get_ObjectRelative();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode ObjectRelative
      static void _set_ObjectRelative(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode ObjectRelativeWithLockedWorldUp
      static constexpr const int ObjectRelativeWithLockedWorldUp = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode ObjectRelativeWithLockedWorldUp
      static ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode _get_ObjectRelativeWithLockedWorldUp();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode ObjectRelativeWithLockedWorldUp
      static void _set_ObjectRelativeWithLockedWorldUp(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode WorldAxisRelative
      static constexpr const int WorldAxisRelative = 2;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode WorldAxisRelative
      static ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode _get_WorldAxisRelative();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode WorldAxisRelative
      static void _set_WorldAxisRelative(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode
    #pragma pack(pop)
    static check_size<sizeof(XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_Transformers_XRGeneralGrabTransformer_ConstrainedAxisDisplacementModeSizeCheck;
    static_assert(sizeof(XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct TwoHandedRotationMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TwoHandedRotationMode
      constexpr TwoHandedRotationMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode FirstHandOnly
      static constexpr const int FirstHandOnly = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode FirstHandOnly
      static ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TwoHandedRotationMode _get_FirstHandOnly();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode FirstHandOnly
      static void _set_FirstHandOnly(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TwoHandedRotationMode value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode FirstHandDirectedTowardsSecondHand
      static constexpr const int FirstHandDirectedTowardsSecondHand = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode FirstHandDirectedTowardsSecondHand
      static ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TwoHandedRotationMode _get_FirstHandDirectedTowardsSecondHand();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode FirstHandDirectedTowardsSecondHand
      static void _set_FirstHandDirectedTowardsSecondHand(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TwoHandedRotationMode value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode TwoHandedAverage
      static constexpr const int TwoHandedAverage = 2;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode TwoHandedAverage
      static ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TwoHandedRotationMode _get_TwoHandedAverage();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode TwoHandedAverage
      static void _set_TwoHandedAverage(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TwoHandedRotationMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode
    #pragma pack(pop)
    static check_size<sizeof(XRGeneralGrabTransformer::TwoHandedRotationMode), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_Transformers_XRGeneralGrabTransformer_TwoHandedRotationModeSizeCheck;
    static_assert(sizeof(XRGeneralGrabTransformer::TwoHandedRotationMode) == 0x4);
    public:
    // private UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes m_PermittedDisplacementAxes
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes m_PermittedDisplacementAxes;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes) == 0x4);
    // private UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode m_ConstrainedAxisDisplacementMode
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode m_ConstrainedAxisDisplacementMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode) == 0x4);
    // private UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode m_TwoHandedRotationMode
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TwoHandedRotationMode m_TwoHandedRotationMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TwoHandedRotationMode) == 0x4);
    // private System.Boolean m_AllowTwoHandedScaling
    // Size: 0x1
    // Offset: 0x2C
    bool m_AllowTwoHandedScaling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AllowTwoHandedScaling and: m_ThresholdMoveRatioForScale
    char __padding3[0x3] = {};
    // private System.Single m_ThresholdMoveRatioForScale
    // Size: 0x4
    // Offset: 0x30
    float m_ThresholdMoveRatioForScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_ClampScaling
    // Size: 0x1
    // Offset: 0x34
    bool m_ClampScaling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ClampScaling and: m_MinimumScaleRatio
    char __padding5[0x3] = {};
    // private System.Single m_MinimumScaleRatio
    // Size: 0x4
    // Offset: 0x38
    float m_MinimumScaleRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MaximumScaleRatio
    // Size: 0x4
    // Offset: 0x3C
    float m_MaximumScaleRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ScaleMultiplier
    // Size: 0x4
    // Offset: 0x40
    float m_ScaleMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Pose m_OriginalObjectPose
    // Size: 0x1C
    // Offset: 0x44
    ::UnityEngine::Pose m_OriginalObjectPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose m_OffsetPose
    // Size: 0x1C
    // Offset: 0x60
    ::UnityEngine::Pose m_OffsetPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose m_OriginalInteractorPose
    // Size: 0x1C
    // Offset: 0x7C
    ::UnityEngine::Pose m_OriginalInteractorPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Vector3 m_InteractorLocalGrabPoint
    // Size: 0xC
    // Offset: 0x98
    ::UnityEngine::Vector3 m_InteractorLocalGrabPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_ObjectLocalGrabPoint
    // Size: 0xC
    // Offset: 0xA4
    ::UnityEngine::Vector3 m_ObjectLocalGrabPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.XR.Interaction.Toolkit.IXRInteractor m_OriginalInteractor
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::XR::Interaction::Toolkit::IXRInteractor* m_OriginalInteractor;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*) == 0x8);
    // private System.Int32 m_LastGrabCount
    // Size: 0x4
    // Offset: 0xB8
    int m_LastGrabCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 m_StartHandleBar
    // Size: 0xC
    // Offset: 0xBC
    ::UnityEngine::Vector3 m_StartHandleBar;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_ScaleAtGrabStart
    // Size: 0xC
    // Offset: 0xC8
    ::UnityEngine::Vector3 m_ScaleAtGrabStart;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean m_FirstFrameSinceTwoHandedGrab
    // Size: 0x1
    // Offset: 0xD4
    bool m_FirstFrameSinceTwoHandedGrab;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_FirstFrameSinceTwoHandedGrab and: m_LastTwoHandedUp
    char __padding18[0x3] = {};
    // private UnityEngine.Vector3 m_LastTwoHandedUp
    // Size: 0xC
    // Offset: 0xD8
    ::UnityEngine::Vector3 m_LastTwoHandedUp;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_InitialScale
    // Size: 0xC
    // Offset: 0xE4
    ::UnityEngine::Vector3 m_InitialScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_MinimumScale
    // Size: 0xC
    // Offset: 0xF0
    ::UnityEngine::Vector3 m_MinimumScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_MaximumScale
    // Size: 0xC
    // Offset: 0xFC
    ::UnityEngine::Vector3 m_MaximumScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode m_ConstrainedAxisDisplacementModeOnGrab
    // Size: 0x4
    // Offset: 0x108
    ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode m_ConstrainedAxisDisplacementModeOnGrab;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode) == 0x4);
    // private UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes m_PermittedDisplacementAxesOnGrab
    // Size: 0x4
    // Offset: 0x10C
    ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes m_PermittedDisplacementAxesOnGrab;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes m_PermittedDisplacementAxes
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes& dyn_m_PermittedDisplacementAxes();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode m_ConstrainedAxisDisplacementMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode& dyn_m_ConstrainedAxisDisplacementMode();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode m_TwoHandedRotationMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TwoHandedRotationMode& dyn_m_TwoHandedRotationMode();
    // Get instance field reference: private System.Boolean m_AllowTwoHandedScaling
    [[deprecated("Use field access instead!")]] bool& dyn_m_AllowTwoHandedScaling();
    // Get instance field reference: private System.Single m_ThresholdMoveRatioForScale
    [[deprecated("Use field access instead!")]] float& dyn_m_ThresholdMoveRatioForScale();
    // Get instance field reference: private System.Boolean m_ClampScaling
    [[deprecated("Use field access instead!")]] bool& dyn_m_ClampScaling();
    // Get instance field reference: private System.Single m_MinimumScaleRatio
    [[deprecated("Use field access instead!")]] float& dyn_m_MinimumScaleRatio();
    // Get instance field reference: private System.Single m_MaximumScaleRatio
    [[deprecated("Use field access instead!")]] float& dyn_m_MaximumScaleRatio();
    // Get instance field reference: private System.Single m_ScaleMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_m_ScaleMultiplier();
    // Get instance field reference: private UnityEngine.Pose m_OriginalObjectPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_m_OriginalObjectPose();
    // Get instance field reference: private UnityEngine.Pose m_OffsetPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_m_OffsetPose();
    // Get instance field reference: private UnityEngine.Pose m_OriginalInteractorPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_m_OriginalInteractorPose();
    // Get instance field reference: private UnityEngine.Vector3 m_InteractorLocalGrabPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_InteractorLocalGrabPoint();
    // Get instance field reference: private UnityEngine.Vector3 m_ObjectLocalGrabPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_ObjectLocalGrabPoint();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.IXRInteractor m_OriginalInteractor
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*& dyn_m_OriginalInteractor();
    // Get instance field reference: private System.Int32 m_LastGrabCount
    [[deprecated("Use field access instead!")]] int& dyn_m_LastGrabCount();
    // Get instance field reference: private UnityEngine.Vector3 m_StartHandleBar
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_StartHandleBar();
    // Get instance field reference: private UnityEngine.Vector3 m_ScaleAtGrabStart
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_ScaleAtGrabStart();
    // Get instance field reference: private System.Boolean m_FirstFrameSinceTwoHandedGrab
    [[deprecated("Use field access instead!")]] bool& dyn_m_FirstFrameSinceTwoHandedGrab();
    // Get instance field reference: private UnityEngine.Vector3 m_LastTwoHandedUp
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_LastTwoHandedUp();
    // Get instance field reference: private UnityEngine.Vector3 m_InitialScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_InitialScale();
    // Get instance field reference: private UnityEngine.Vector3 m_MinimumScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_MinimumScale();
    // Get instance field reference: private UnityEngine.Vector3 m_MaximumScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_MaximumScale();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode m_ConstrainedAxisDisplacementModeOnGrab
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode& dyn_m_ConstrainedAxisDisplacementModeOnGrab();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes m_PermittedDisplacementAxesOnGrab
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes& dyn_m_PermittedDisplacementAxesOnGrab();
    // public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes get_permittedDisplacementAxes()
    // Offset: 0x54285E8
    ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes get_permittedDisplacementAxes();
    // public System.Void set_permittedDisplacementAxes(UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes value)
    // Offset: 0x54285F0
    void set_permittedDisplacementAxes(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes value);
    // public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode get_constrainedAxisDisplacementMode()
    // Offset: 0x54285F8
    ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode get_constrainedAxisDisplacementMode();
    // public System.Void set_constrainedAxisDisplacementMode(UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode value)
    // Offset: 0x5428600
    void set_constrainedAxisDisplacementMode(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode value);
    // public UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode get_allowTwoHandedRotation()
    // Offset: 0x5428608
    ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TwoHandedRotationMode get_allowTwoHandedRotation();
    // public System.Void set_allowTwoHandedRotation(UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode value)
    // Offset: 0x5428610
    void set_allowTwoHandedRotation(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TwoHandedRotationMode value);
    // public System.Boolean get_allowTwoHandedScaling()
    // Offset: 0x5428618
    bool get_allowTwoHandedScaling();
    // public System.Void set_allowTwoHandedScaling(System.Boolean value)
    // Offset: 0x5428620
    void set_allowTwoHandedScaling(bool value);
    // public System.Single get_thresholdMoveRatioForScale()
    // Offset: 0x542862C
    float get_thresholdMoveRatioForScale();
    // public System.Void set_thresholdMoveRatioForScale(System.Single value)
    // Offset: 0x5428634
    void set_thresholdMoveRatioForScale(float value);
    // public System.Boolean get_clampScaling()
    // Offset: 0x542863C
    bool get_clampScaling();
    // public System.Void set_clampScaling(System.Boolean value)
    // Offset: 0x5428644
    void set_clampScaling(bool value);
    // public System.Single get_minimumScaleRatio()
    // Offset: 0x5428650
    float get_minimumScaleRatio();
    // public System.Void set_minimumScaleRatio(System.Single value)
    // Offset: 0x5428658
    void set_minimumScaleRatio(float value);
    // public System.Single get_maximumScaleRatio()
    // Offset: 0x5428680
    float get_maximumScaleRatio();
    // public System.Void set_maximumScaleRatio(System.Single value)
    // Offset: 0x5428688
    void set_maximumScaleRatio(float value);
    // public System.Single get_scaleMultiplier()
    // Offset: 0x54286B0
    float get_scaleMultiplier();
    // public System.Void set_scaleMultiplier(System.Single value)
    // Offset: 0x54286B8
    void set_scaleMultiplier(float value);
    // protected System.Void Awake()
    // Offset: 0x54286C8
    void Awake();
    // private UnityEngine.Pose ComputeAdjustedInteractorPose(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, out UnityEngine.Vector3 newHandleBar)
    // Offset: 0x5429E10
    ::UnityEngine::Pose ComputeAdjustedInteractorPose(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable* grabInteractable, ByRef<::UnityEngine::Vector3> newHandleBar);
    // private System.Void TranslateSetup(UnityEngine.Pose interactorCentroidPose, UnityEngine.Vector3 grabCentroid, UnityEngine.Pose objectPose, UnityEngine.Vector3 objectScale)
    // Offset: 0x5429B08
    void TranslateSetup(::UnityEngine::Pose interactorCentroidPose, ::UnityEngine::Vector3 grabCentroid, ::UnityEngine::Pose objectPose, ::UnityEngine::Vector3 objectScale);
    // private UnityEngine.Vector3 ComputeNewObjectPosition(UnityEngine.Pose newInteractionPose, UnityEngine.Quaternion objectRotation, UnityEngine.Vector3 objectScale, System.Boolean trackRotation)
    // Offset: 0x542A660
    ::UnityEngine::Vector3 ComputeNewObjectPosition(::UnityEngine::Pose newInteractionPose, ::UnityEngine::Quaternion objectRotation, ::UnityEngine::Vector3 objectScale, bool trackRotation);
    // private UnityEngine.Quaternion ComputeNewObjectRotation(UnityEngine.Pose newInteractionPose, System.Boolean trackRotation)
    // Offset: 0x542A77C
    ::UnityEngine::Quaternion ComputeNewObjectRotation(::UnityEngine::Pose newInteractionPose, bool trackRotation);
    // static private UnityEngine.Vector3 AdjustPositionForPermittedAxes(UnityEngine.Vector3 targetPosition, UnityEngine.Pose originalObjectPose, UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes permittedAxes, UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode axisDisplacementMode)
    // Offset: 0x5428E18
    static ::UnityEngine::Vector3 AdjustPositionForPermittedAxes(::UnityEngine::Vector3 targetPosition, ::UnityEngine::Pose originalObjectPose, ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes permittedAxes, ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode axisDisplacementMode);
    // private UnityEngine.Vector3 ComputeNewScale(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, UnityEngine.Vector3 startScale, UnityEngine.Vector3 currentScale, UnityEngine.Vector3 startHandleBar, UnityEngine.Vector3 newHandleBar)
    // Offset: 0x542A810
    ::UnityEngine::Vector3 ComputeNewScale(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable* grabInteractable, ::UnityEngine::Vector3 startScale, ::UnityEngine::Vector3 currentScale, ::UnityEngine::Vector3 startHandleBar, ::UnityEngine::Vector3 newHandleBar);
    // private System.Void UpdateTarget(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, ref UnityEngine.Pose targetPose, ref UnityEngine.Vector3 localScale)
    // Offset: 0x5428714
    void UpdateTarget(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable* grabInteractable, ByRef<::UnityEngine::Pose> targetPose, ByRef<::UnityEngine::Vector3> localScale);
    // protected override UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer/RegistrationMode get_registrationMode()
    // Offset: 0x54286C0
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer
    // Base method: UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer/RegistrationMode XRBaseGrabTransformer::get_registrationMode()
    ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer::RegistrationMode get_registrationMode();
    // public override System.Void Process(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase, ref UnityEngine.Pose targetPose, ref UnityEngine.Vector3 localScale)
    // Offset: 0x54286F8
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer
    // Base method: System.Void XRBaseGrabTransformer::Process(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase, ref UnityEngine.Pose targetPose, ref UnityEngine.Vector3 localScale)
    void Process(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable* grabInteractable, ::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase, ByRef<::UnityEngine::Pose> targetPose, ByRef<::UnityEngine::Vector3> localScale);
    // public override System.Void OnGrab(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable)
    // Offset: 0x5428848
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer
    // Base method: System.Void XRBaseGrabTransformer::OnGrab(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable)
    void OnGrab(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable* grabInteractable);
    // public override System.Void OnGrabCountChanged(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, UnityEngine.Pose targetPose, UnityEngine.Vector3 localScale)
    // Offset: 0x5429BDC
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer
    // Base method: System.Void XRBaseGrabTransformer::OnGrabCountChanged(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, UnityEngine.Pose targetPose, UnityEngine.Vector3 localScale)
    void OnGrabCountChanged(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable* grabInteractable, ::UnityEngine::Pose targetPose, ::UnityEngine::Vector3 localScale);
    // public System.Void .ctor()
    // Offset: 0x542A9DC
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer
    // Base method: System.Void XRBaseGrabTransformer::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRGeneralGrabTransformer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRGeneralGrabTransformer*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer
  #pragma pack(pop)
  static check_size<sizeof(XRGeneralGrabTransformer), 268 + sizeof(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes)> __UnityEngine_XR_Interaction_Toolkit_Transformers_XRGeneralGrabTransformerSizeCheck;
  static_assert(sizeof(XRGeneralGrabTransformer) == 0x110);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TwoHandedRotationMode, "UnityEngine.XR.Interaction.Toolkit.Transformers", "XRGeneralGrabTransformer/TwoHandedRotationMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode, "UnityEngine.XR.Interaction.Toolkit.Transformers", "XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes, "UnityEngine.XR.Interaction.Toolkit.Transformers", "XRGeneralGrabTransformer/ManipulationAxes");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_permittedDisplacementAxes
// Il2CppName: get_permittedDisplacementAxes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)()>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_permittedDisplacementAxes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "get_permittedDisplacementAxes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_permittedDisplacementAxes
// Il2CppName: set_permittedDisplacementAxes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_permittedDisplacementAxes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "XRGeneralGrabTransformer/ManipulationAxes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "set_permittedDisplacementAxes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_constrainedAxisDisplacementMode
// Il2CppName: get_constrainedAxisDisplacementMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)()>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_constrainedAxisDisplacementMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "get_constrainedAxisDisplacementMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_constrainedAxisDisplacementMode
// Il2CppName: set_constrainedAxisDisplacementMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_constrainedAxisDisplacementMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "set_constrainedAxisDisplacementMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_allowTwoHandedRotation
// Il2CppName: get_allowTwoHandedRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TwoHandedRotationMode (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)()>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_allowTwoHandedRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "get_allowTwoHandedRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_allowTwoHandedRotation
// Il2CppName: set_allowTwoHandedRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TwoHandedRotationMode)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_allowTwoHandedRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "XRGeneralGrabTransformer/TwoHandedRotationMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "set_allowTwoHandedRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_allowTwoHandedScaling
// Il2CppName: get_allowTwoHandedScaling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)()>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_allowTwoHandedScaling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "get_allowTwoHandedScaling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_allowTwoHandedScaling
// Il2CppName: set_allowTwoHandedScaling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_allowTwoHandedScaling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "set_allowTwoHandedScaling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_thresholdMoveRatioForScale
// Il2CppName: get_thresholdMoveRatioForScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)()>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_thresholdMoveRatioForScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "get_thresholdMoveRatioForScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_thresholdMoveRatioForScale
// Il2CppName: set_thresholdMoveRatioForScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_thresholdMoveRatioForScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "set_thresholdMoveRatioForScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_clampScaling
// Il2CppName: get_clampScaling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)()>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_clampScaling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "get_clampScaling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_clampScaling
// Il2CppName: set_clampScaling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_clampScaling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "set_clampScaling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_minimumScaleRatio
// Il2CppName: get_minimumScaleRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)()>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_minimumScaleRatio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "get_minimumScaleRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_minimumScaleRatio
// Il2CppName: set_minimumScaleRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_minimumScaleRatio)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "set_minimumScaleRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_maximumScaleRatio
// Il2CppName: get_maximumScaleRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)()>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_maximumScaleRatio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "get_maximumScaleRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_maximumScaleRatio
// Il2CppName: set_maximumScaleRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_maximumScaleRatio)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "set_maximumScaleRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_scaleMultiplier
// Il2CppName: get_scaleMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)()>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_scaleMultiplier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "get_scaleMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_scaleMultiplier
// Il2CppName: set_scaleMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::set_scaleMultiplier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "set_scaleMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)()>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ComputeAdjustedInteractorPose
// Il2CppName: ComputeAdjustedInteractorPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ComputeAdjustedInteractorPose)> {
  static const MethodInfo* get() {
    static auto* grabInteractable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRGrabInteractable")->byval_arg;
    static auto* newHandleBar = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "ComputeAdjustedInteractorPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabInteractable, newHandleBar});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TranslateSetup
// Il2CppName: TranslateSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(::UnityEngine::Pose, ::UnityEngine::Vector3, ::UnityEngine::Pose, ::UnityEngine::Vector3)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::TranslateSetup)> {
  static const MethodInfo* get() {
    static auto* interactorCentroidPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* grabCentroid = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* objectPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* objectScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "TranslateSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactorCentroidPose, grabCentroid, objectPose, objectScale});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ComputeNewObjectPosition
// Il2CppName: ComputeNewObjectPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(::UnityEngine::Pose, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, bool)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ComputeNewObjectPosition)> {
  static const MethodInfo* get() {
    static auto* newInteractionPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* objectRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* objectScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* trackRotation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "ComputeNewObjectPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newInteractionPose, objectRotation, objectScale, trackRotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ComputeNewObjectRotation
// Il2CppName: ComputeNewObjectRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(::UnityEngine::Pose, bool)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ComputeNewObjectRotation)> {
  static const MethodInfo* get() {
    static auto* newInteractionPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* trackRotation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "ComputeNewObjectRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newInteractionPose, trackRotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::AdjustPositionForPermittedAxes
// Il2CppName: AdjustPositionForPermittedAxes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Pose, ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ManipulationAxes, ::UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ConstrainedAxisDisplacementMode)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::AdjustPositionForPermittedAxes)> {
  static const MethodInfo* get() {
    static auto* targetPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* originalObjectPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* permittedAxes = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "XRGeneralGrabTransformer/ManipulationAxes")->byval_arg;
    static auto* axisDisplacementMode = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Transformers", "XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "AdjustPositionForPermittedAxes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPosition, originalObjectPose, permittedAxes, axisDisplacementMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ComputeNewScale
// Il2CppName: ComputeNewScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::ComputeNewScale)> {
  static const MethodInfo* get() {
    static auto* grabInteractable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRGrabInteractable")->byval_arg;
    static auto* startScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* currentScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* startHandleBar = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* newHandleBar = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "ComputeNewScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabInteractable, startScale, currentScale, startHandleBar, newHandleBar});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::UpdateTarget
// Il2CppName: UpdateTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*, ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::UpdateTarget)> {
  static const MethodInfo* get() {
    static auto* grabInteractable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRGrabInteractable")->byval_arg;
    static auto* targetPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* localScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "UpdateTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabInteractable, targetPose, localScale});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_registrationMode
// Il2CppName: get_registrationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::Transformers::XRBaseGrabTransformer::RegistrationMode (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)()>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::get_registrationMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "get_registrationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*, ::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase, ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::Process)> {
  static const MethodInfo* get() {
    static auto* grabInteractable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRGrabInteractable")->byval_arg;
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    static auto* targetPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* localScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabInteractable, updatePhase, targetPose, localScale});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::OnGrab
// Il2CppName: OnGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::OnGrab)> {
  static const MethodInfo* get() {
    static auto* grabInteractable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRGrabInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "OnGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabInteractable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::OnGrabCountChanged
// Il2CppName: OnGrabCountChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::*)(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*, ::UnityEngine::Pose, ::UnityEngine::Vector3)>(&UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::OnGrabCountChanged)> {
  static const MethodInfo* get() {
    static auto* grabInteractable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRGrabInteractable")->byval_arg;
    static auto* targetPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* localScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer*), "OnGrabCountChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabInteractable, targetPose, localScale});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Transformers::XRGeneralGrabTransformer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
