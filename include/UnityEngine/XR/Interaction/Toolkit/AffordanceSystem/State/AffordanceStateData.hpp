// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
// Completed includes
// Type namespace: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State
namespace UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State {
  // Forward declaring type: AffordanceStateData
  struct AffordanceStateData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData, "UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State", "AffordanceStateData");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State
namespace UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State {
  // Size: 0x2
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State.AffordanceStateData
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct AffordanceStateData/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData>*/ {
    public:
    public:
    // private readonly System.Byte <stateIndex>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    uint8_t stateIndex;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private readonly System.Byte <stateTransitionIncrement>k__BackingField
    // Size: 0x1
    // Offset: 0x1
    uint8_t stateTransitionIncrement;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: AffordanceStateData
    constexpr AffordanceStateData(uint8_t stateIndex_ = {}, uint8_t stateTransitionIncrement_ = {}) noexcept : stateIndex{stateIndex_}, stateTransitionIncrement{stateTransitionIncrement_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData>
    operator ::System::IEquatable_1<::UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData>*>(this);
    }
    // static field const value: static public System.Byte totalStateTransitionIncrements
    static constexpr const uint8_t totalStateTransitionIncrements = 255u;
    // Get static field: static public System.Byte totalStateTransitionIncrements
    static uint8_t _get_totalStateTransitionIncrements();
    // Set static field: static public System.Byte totalStateTransitionIncrements
    static void _set_totalStateTransitionIncrements(uint8_t value);
    // Get instance field reference: private readonly System.Byte <stateIndex>k__BackingField
    [[deprecated("Use field access instead!")]] uint8_t& dyn_$stateIndex$k__BackingField();
    // Get instance field reference: private readonly System.Byte <stateTransitionIncrement>k__BackingField
    [[deprecated("Use field access instead!")]] uint8_t& dyn_$stateTransitionIncrement$k__BackingField();
    // public System.Byte get_stateIndex()
    // Offset: 0x543D8AC
    uint8_t get_stateIndex();
    // public System.Byte get_stateTransitionIncrement()
    // Offset: 0x543D8B4
    uint8_t get_stateTransitionIncrement();
    // public System.Single get_stateTransitionAmountFloat()
    // Offset: 0x543D8BC
    float get_stateTransitionAmountFloat();
    // public System.Void .ctor(System.Byte stateIndex, System.Single transitionAmount)
    // Offset: 0x543D8D4
    AffordanceStateData(uint8_t stateIndex, float transitionAmount);
    // public System.Void .ctor(System.Byte stateIndex, System.Byte transitionIncrement)
    // Offset: 0x543D90C
    // ABORTED: conflicts with another method.  AffordanceStateData(uint8_t stateIndex, uint8_t transitionIncrement);
    // public System.Boolean Equals(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State.AffordanceStateData other)
    // Offset: 0x543D918
    bool Equals(::UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x543D940
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x543D9C4
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State.AffordanceStateData
  #pragma pack(pop)
  static check_size<sizeof(AffordanceStateData), 1 + sizeof(uint8_t)> __UnityEngine_XR_Interaction_Toolkit_AffordanceSystem_State_AffordanceStateDataSizeCheck;
  static_assert(sizeof(AffordanceStateData) == 0x2);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::get_stateIndex
// Il2CppName: get_stateIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::*)()>(&UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::get_stateIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData), "get_stateIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::get_stateTransitionIncrement
// Il2CppName: get_stateTransitionIncrement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::*)()>(&UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::get_stateTransitionIncrement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData), "get_stateTransitionIncrement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::get_stateTransitionAmountFloat
// Il2CppName: get_stateTransitionAmountFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::*)()>(&UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::get_stateTransitionAmountFloat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData), "get_stateTransitionAmountFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::AffordanceStateData
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::AffordanceStateData
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::*)(::UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData)>(&UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State", "AffordanceStateData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::*)(::Il2CppObject*)>(&UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::*)()>(&UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::AffordanceStateData), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
