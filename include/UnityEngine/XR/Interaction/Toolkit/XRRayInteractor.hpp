// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
#include "UnityEngine/XR/Interaction/Toolkit/XRBaseControllerInteractor.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.ILineRenderable
#include "UnityEngine/XR/Interaction/Toolkit/ILineRenderable.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.UI.IUIInteractor
#include "UnityEngine/XR/Interaction/Toolkit/UI/IUIInteractor.hpp"
// Including type: UnityEngine.QueryTriggerInteraction
#include "UnityEngine/QueryTriggerInteraction.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: UnityEngine.PhysicsScene
#include "UnityEngine/PhysicsScene.hpp"
// Including type: UnityEngine.EventSystems.RaycastResult
#include "UnityEngine/EventSystems/RaycastResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Skipping declaration: LineType because it is already included!
  // Forward declaring type: IXRInteractable
  class IXRInteractable;
  // Skipping declaration: HitDetectionType because it is already included!
  // Skipping declaration: QuerySnapVolumeInteraction because it is already included!
  // Skipping declaration: AnchorRotationMode because it is already included!
  // Forward declaring type: XRInteractionManager
  class XRInteractionManager;
  // Forward declaring type: XRInteractableSnapVolume
  class XRInteractableSnapVolume;
  // Forward declaring type: IXRHoverInteractable
  class IXRHoverInteractable;
  // Forward declaring type: IXRSelectInteractable
  class IXRSelectInteractable;
  // Forward declaring type: SelectEnterEventArgs
  class SelectEnterEventArgs;
  // Forward declaring type: SelectExitEventArgs
  class SelectExitEventArgs;
  // Skipping declaration: XRBaseInteractable because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector2 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Forward declaring type: RegisteredUIInteractorCache
  class RegisteredUIInteractorCache;
  // Forward declaring type: TrackedDeviceModel
  struct TrackedDeviceModel;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputAction
  class InputAction;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRRayInteractor
  class XRRayInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*, "UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x378
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class XRRayInteractor : public ::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor/*, public ::UnityEngine::XR::Interaction::Toolkit::ILineRenderable, public ::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor*/ {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RaycastHitComparer
    class RaycastHitComparer;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType
    struct LineType;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::QuerySnapVolumeInteraction
    struct QuerySnapVolumeInteraction;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType
    struct HitDetectionType;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::AnchorRotationMode
    struct AnchorRotationMode;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SamplePoint
    struct SamplePoint;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType
    // [TokenAttribute] Offset: FFFFFFFF
    struct LineType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: LineType
      constexpr LineType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType StraightLine
      static constexpr const int StraightLine = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType StraightLine
      static ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType _get_StraightLine();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType StraightLine
      static void _set_StraightLine(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType ProjectileCurve
      static constexpr const int ProjectileCurve = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType ProjectileCurve
      static ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType _get_ProjectileCurve();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType ProjectileCurve
      static void _set_ProjectileCurve(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType BezierCurve
      static constexpr const int BezierCurve = 2;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType BezierCurve
      static ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType _get_BezierCurve();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType BezierCurve
      static void _set_BezierCurve(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType
    #pragma pack(pop)
    static check_size<sizeof(XRRayInteractor::LineType), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_XRRayInteractor_LineTypeSizeCheck;
    static_assert(sizeof(XRRayInteractor::LineType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/QuerySnapVolumeInteraction
    // [TokenAttribute] Offset: FFFFFFFF
    struct QuerySnapVolumeInteraction/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: QuerySnapVolumeInteraction
      constexpr QuerySnapVolumeInteraction(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/QuerySnapVolumeInteraction Ignore
      static constexpr const int Ignore = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/QuerySnapVolumeInteraction Ignore
      static ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::QuerySnapVolumeInteraction _get_Ignore();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/QuerySnapVolumeInteraction Ignore
      static void _set_Ignore(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::QuerySnapVolumeInteraction value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/QuerySnapVolumeInteraction Collide
      static constexpr const int Collide = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/QuerySnapVolumeInteraction Collide
      static ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::QuerySnapVolumeInteraction _get_Collide();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/QuerySnapVolumeInteraction Collide
      static void _set_Collide(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::QuerySnapVolumeInteraction value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/QuerySnapVolumeInteraction
    #pragma pack(pop)
    static check_size<sizeof(XRRayInteractor::QuerySnapVolumeInteraction), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_XRRayInteractor_QuerySnapVolumeInteractionSizeCheck;
    static_assert(sizeof(XRRayInteractor::QuerySnapVolumeInteraction) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/HitDetectionType
    // [TokenAttribute] Offset: FFFFFFFF
    struct HitDetectionType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: HitDetectionType
      constexpr HitDetectionType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/HitDetectionType Raycast
      static constexpr const int Raycast = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/HitDetectionType Raycast
      static ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType _get_Raycast();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/HitDetectionType Raycast
      static void _set_Raycast(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/HitDetectionType SphereCast
      static constexpr const int SphereCast = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/HitDetectionType SphereCast
      static ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType _get_SphereCast();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/HitDetectionType SphereCast
      static void _set_SphereCast(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/HitDetectionType
    #pragma pack(pop)
    static check_size<sizeof(XRRayInteractor::HitDetectionType), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_XRRayInteractor_HitDetectionTypeSizeCheck;
    static_assert(sizeof(XRRayInteractor::HitDetectionType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/AnchorRotationMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct AnchorRotationMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: AnchorRotationMode
      constexpr AnchorRotationMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/AnchorRotationMode RotateOverTime
      static constexpr const int RotateOverTime = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/AnchorRotationMode RotateOverTime
      static ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::AnchorRotationMode _get_RotateOverTime();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/AnchorRotationMode RotateOverTime
      static void _set_RotateOverTime(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::AnchorRotationMode value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/AnchorRotationMode MatchDirection
      static constexpr const int MatchDirection = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/AnchorRotationMode MatchDirection
      static ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::AnchorRotationMode _get_MatchDirection();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/AnchorRotationMode MatchDirection
      static void _set_MatchDirection(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::AnchorRotationMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/AnchorRotationMode
    #pragma pack(pop)
    static check_size<sizeof(XRRayInteractor::AnchorRotationMode), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_XRRayInteractor_AnchorRotationModeSizeCheck;
    static_assert(sizeof(XRRayInteractor::AnchorRotationMode) == 0x4);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/SamplePoint
    // [TokenAttribute] Offset: FFFFFFFF
    struct SamplePoint/*, public ::System::ValueType*/ {
      public:
      public:
      // private UnityEngine.Vector3 <position>k__BackingField
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 position;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // private System.Single <parameter>k__BackingField
      // Size: 0x4
      // Offset: 0xC
      float parameter;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: SamplePoint
      constexpr SamplePoint(::UnityEngine::Vector3 position_ = {}, float parameter_ = {}) noexcept : position{position_}, parameter{parameter_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private UnityEngine.Vector3 <position>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$position$k__BackingField();
      // Get instance field reference: private System.Single <parameter>k__BackingField
      [[deprecated("Use field access instead!")]] float& dyn_$parameter$k__BackingField();
      // public UnityEngine.Vector3 get_position()
      // Offset: 0x53FAD74
      ::UnityEngine::Vector3 get_position();
      // public System.Void set_position(UnityEngine.Vector3 value)
      // Offset: 0x53FAD80
      void set_position(::UnityEngine::Vector3 value);
      // public System.Single get_parameter()
      // Offset: 0x53FAD8C
      float get_parameter();
      // public System.Void set_parameter(System.Single value)
      // Offset: 0x53FAD94
      void set_parameter(float value);
    }; // UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/SamplePoint
    #pragma pack(pop)
    static check_size<sizeof(XRRayInteractor::SamplePoint), 12 + sizeof(float)> __UnityEngine_XR_Interaction_Toolkit_XRRayInteractor_SamplePointSizeCheck;
    static_assert(sizeof(XRRayInteractor::SamplePoint) == 0x10);
    public:
    // private UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType m_LineType
    // Size: 0x4
    // Offset: 0x280
    ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType m_LineType;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType) == 0x4);
    // private System.Boolean m_BlendVisualLinePoints
    // Size: 0x1
    // Offset: 0x284
    bool m_BlendVisualLinePoints;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_BlendVisualLinePoints and: m_MaxRaycastDistance
    char __padding1[0x3] = {};
    // private System.Single m_MaxRaycastDistance
    // Size: 0x4
    // Offset: 0x288
    float m_MaxRaycastDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_MaxRaycastDistance and: m_RayOriginTransform
    char __padding2[0x4] = {};
    // private UnityEngine.Transform m_RayOriginTransform
    // Size: 0x8
    // Offset: 0x290
    ::UnityEngine::Transform* m_RayOriginTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform m_ReferenceFrame
    // Size: 0x8
    // Offset: 0x298
    ::UnityEngine::Transform* m_ReferenceFrame;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single m_Velocity
    // Size: 0x4
    // Offset: 0x2A0
    float m_Velocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Acceleration
    // Size: 0x4
    // Offset: 0x2A4
    float m_Acceleration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_AdditionalGroundHeight
    // Size: 0x4
    // Offset: 0x2A8
    float m_AdditionalGroundHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_AdditionalFlightTime
    // Size: 0x4
    // Offset: 0x2AC
    float m_AdditionalFlightTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_EndPointDistance
    // Size: 0x4
    // Offset: 0x2B0
    float m_EndPointDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_EndPointHeight
    // Size: 0x4
    // Offset: 0x2B4
    float m_EndPointHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ControlPointDistance
    // Size: 0x4
    // Offset: 0x2B8
    float m_ControlPointDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ControlPointHeight
    // Size: 0x4
    // Offset: 0x2BC
    float m_ControlPointHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_SampleFrequency
    // Size: 0x4
    // Offset: 0x2C0
    int m_SampleFrequency;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/HitDetectionType m_HitDetectionType
    // Size: 0x4
    // Offset: 0x2C4
    ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType m_HitDetectionType;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType) == 0x4);
    // private System.Single m_SphereCastRadius
    // Size: 0x4
    // Offset: 0x2C8
    float m_SphereCastRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.LayerMask m_RaycastMask
    // Size: 0x4
    // Offset: 0x2CC
    ::UnityEngine::LayerMask m_RaycastMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.QueryTriggerInteraction m_RaycastTriggerInteraction
    // Size: 0x4
    // Offset: 0x2D0
    ::UnityEngine::QueryTriggerInteraction m_RaycastTriggerInteraction;
    // Field size check
    static_assert(sizeof(::UnityEngine::QueryTriggerInteraction) == 0x4);
    // private UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/QuerySnapVolumeInteraction m_RaycastSnapVolumeInteraction
    // Size: 0x4
    // Offset: 0x2D4
    ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::QuerySnapVolumeInteraction m_RaycastSnapVolumeInteraction;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::QuerySnapVolumeInteraction) == 0x4);
    // private System.Boolean m_HitClosestOnly
    // Size: 0x1
    // Offset: 0x2D8
    bool m_HitClosestOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_HoverToSelect
    // Size: 0x1
    // Offset: 0x2D9
    bool m_HoverToSelect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_HoverToSelect and: m_HoverTimeToSelect
    char __padding20[0x2] = {};
    // private System.Single m_HoverTimeToSelect
    // Size: 0x4
    // Offset: 0x2DC
    float m_HoverTimeToSelect;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_AutoDeselect
    // Size: 0x1
    // Offset: 0x2E0
    bool m_AutoDeselect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AutoDeselect and: m_TimeToAutoDeselect
    char __padding22[0x3] = {};
    // private System.Single m_TimeToAutoDeselect
    // Size: 0x4
    // Offset: 0x2E4
    float m_TimeToAutoDeselect;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_EnableUIInteraction
    // Size: 0x1
    // Offset: 0x2E8
    bool m_EnableUIInteraction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_AllowAnchorControl
    // Size: 0x1
    // Offset: 0x2E9
    bool m_AllowAnchorControl;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_UseForceGrab
    // Size: 0x1
    // Offset: 0x2EA
    bool m_UseForceGrab;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UseForceGrab and: m_RotateSpeed
    char __padding26[0x1] = {};
    // private System.Single m_RotateSpeed
    // Size: 0x4
    // Offset: 0x2EC
    float m_RotateSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_TranslateSpeed
    // Size: 0x4
    // Offset: 0x2F0
    float m_TranslateSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_TranslateSpeed and: m_AnchorRotateReferenceFrame
    char __padding28[0x4] = {};
    // private UnityEngine.Transform m_AnchorRotateReferenceFrame
    // Size: 0x8
    // Offset: 0x2F8
    ::UnityEngine::Transform* m_AnchorRotateReferenceFrame;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/AnchorRotationMode m_AnchorRotationMode
    // Size: 0x4
    // Offset: 0x300
    ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::AnchorRotationMode m_AnchorRotationMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::AnchorRotationMode) == 0x4);
    // Padding between fields: m_AnchorRotationMode and: currentNearestValidTarget
    char __padding30[0x4] = {};
    // private UnityEngine.XR.Interaction.Toolkit.IXRInteractable <currentNearestValidTarget>k__BackingField
    // Size: 0x8
    // Offset: 0x308
    ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* currentNearestValidTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*) == 0x8);
    // private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> m_ValidTargets
    // Size: 0x8
    // Offset: 0x310
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>* m_ValidTargets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*) == 0x8);
    // private System.Single m_LastTimeHoveredObjectChanged
    // Size: 0x4
    // Offset: 0x318
    float m_LastTimeHoveredObjectChanged;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_PassedHoverTimeToSelect
    // Size: 0x1
    // Offset: 0x31C
    bool m_PassedHoverTimeToSelect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PassedHoverTimeToSelect and: m_LastTimeAutoSelected
    char __padding34[0x3] = {};
    // private System.Single m_LastTimeAutoSelected
    // Size: 0x4
    // Offset: 0x320
    float m_LastTimeAutoSelected;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_PassedTimeToAutoDeselect
    // Size: 0x1
    // Offset: 0x324
    bool m_PassedTimeToAutoDeselect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PassedTimeToAutoDeselect and: m_RaycastHits
    char __padding36[0x3] = {};
    // private readonly UnityEngine.RaycastHit[] m_RaycastHits
    // Size: 0x8
    // Offset: 0x328
    ::ArrayW<::UnityEngine::RaycastHit> m_RaycastHits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private System.Int32 m_RaycastHitsCount
    // Size: 0x4
    // Offset: 0x330
    int m_RaycastHitsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_RaycastHitsCount and: m_RaycastHitComparer
    char __padding38[0x4] = {};
    // private readonly UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/RaycastHitComparer m_RaycastHitComparer
    // Size: 0x8
    // Offset: 0x338
    ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RaycastHitComparer* m_RaycastHitComparer;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RaycastHitComparer*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/SamplePoint> m_SamplePoints
    // Size: 0x8
    // Offset: 0x340
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SamplePoint>* m_SamplePoints;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SamplePoint>*) == 0x8);
    // private System.Int32 m_SamplePointsFrameUpdated
    // Size: 0x4
    // Offset: 0x348
    int m_SamplePointsFrameUpdated;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_RaycastHitEndpointIndex
    // Size: 0x4
    // Offset: 0x34C
    int m_RaycastHitEndpointIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_UIRaycastHitEndpointIndex
    // Size: 0x4
    // Offset: 0x350
    int m_UIRaycastHitEndpointIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_UIRaycastHitEndpointIndex and: m_ControlPoints
    char __padding43[0x4] = {};
    // private readonly UnityEngine.Vector3[] m_ControlPoints
    // Size: 0x8
    // Offset: 0x358
    ::ArrayW<::UnityEngine::Vector3> m_ControlPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private readonly UnityEngine.Vector3[] m_HitChordControlPoints
    // Size: 0x8
    // Offset: 0x360
    ::ArrayW<::UnityEngine::Vector3> m_HitChordControlPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.PhysicsScene m_LocalPhysicsScene
    // Size: 0x4
    // Offset: 0x368
    ::UnityEngine::PhysicsScene m_LocalPhysicsScene;
    // Field size check
    static_assert(sizeof(::UnityEngine::PhysicsScene) == 0x4);
    // Padding between fields: m_LocalPhysicsScene and: m_RegisteredUIInteractorCache
    char __padding46[0x4] = {};
    // private UnityEngine.XR.Interaction.Toolkit.UI.RegisteredUIInteractorCache m_RegisteredUIInteractorCache
    // Size: 0x8
    // Offset: 0x370
    ::UnityEngine::XR::Interaction::Toolkit::UI::RegisteredUIInteractorCache* m_RegisteredUIInteractorCache;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::RegisteredUIInteractorCache*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::XR::Interaction::Toolkit::ILineRenderable
    operator ::UnityEngine::XR::Interaction::Toolkit::ILineRenderable() noexcept {
      return *reinterpret_cast<::UnityEngine::XR::Interaction::Toolkit::ILineRenderable*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor
    operator ::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor() noexcept {
      return *reinterpret_cast<::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor*>(this);
    }
    // Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> s_Results
    static ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>* _get_s_Results();
    // Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> s_Results
    static void _set_s_Results(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>* value);
    // static field const value: static private System.Int32 k_MaxRaycastHits
    static constexpr const int k_MaxRaycastHits = 10;
    // Get static field: static private System.Int32 k_MaxRaycastHits
    static int _get_k_MaxRaycastHits();
    // Set static field: static private System.Int32 k_MaxRaycastHits
    static void _set_k_MaxRaycastHits(int value);
    // static field const value: static private System.Int32 k_MinSampleFrequency
    static constexpr const int k_MinSampleFrequency = 2;
    // Get static field: static private System.Int32 k_MinSampleFrequency
    static int _get_k_MinSampleFrequency();
    // Set static field: static private System.Int32 k_MinSampleFrequency
    static void _set_k_MinSampleFrequency(int value);
    // static field const value: static private System.Int32 k_MaxSampleFrequency
    static constexpr const int k_MaxSampleFrequency = 100;
    // Get static field: static private System.Int32 k_MaxSampleFrequency
    static int _get_k_MaxSampleFrequency();
    // Set static field: static private System.Int32 k_MaxSampleFrequency
    static void _set_k_MaxSampleFrequency(int value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/SamplePoint> s_ScratchSamplePoints
    static ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SamplePoint>* _get_s_ScratchSamplePoints();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/SamplePoint> s_ScratchSamplePoints
    static void _set_s_ScratchSamplePoints(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SamplePoint>* value);
    // Get static field: static private readonly UnityEngine.Vector3[] s_ScratchControlPoints
    static ::ArrayW<::UnityEngine::Vector3> _get_s_ScratchControlPoints();
    // Set static field: static private readonly UnityEngine.Vector3[] s_ScratchControlPoints
    static void _set_s_ScratchControlPoints(::ArrayW<::UnityEngine::Vector3> value);
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType m_LineType
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType& dyn_m_LineType();
    // Get instance field reference: private System.Boolean m_BlendVisualLinePoints
    [[deprecated("Use field access instead!")]] bool& dyn_m_BlendVisualLinePoints();
    // Get instance field reference: private System.Single m_MaxRaycastDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxRaycastDistance();
    // Get instance field reference: private UnityEngine.Transform m_RayOriginTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_RayOriginTransform();
    // Get instance field reference: private UnityEngine.Transform m_ReferenceFrame
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_ReferenceFrame();
    // Get instance field reference: private System.Single m_Velocity
    [[deprecated("Use field access instead!")]] float& dyn_m_Velocity();
    // Get instance field reference: private System.Single m_Acceleration
    [[deprecated("Use field access instead!")]] float& dyn_m_Acceleration();
    // Get instance field reference: private System.Single m_AdditionalGroundHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_AdditionalGroundHeight();
    // Get instance field reference: private System.Single m_AdditionalFlightTime
    [[deprecated("Use field access instead!")]] float& dyn_m_AdditionalFlightTime();
    // Get instance field reference: private System.Single m_EndPointDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_EndPointDistance();
    // Get instance field reference: private System.Single m_EndPointHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_EndPointHeight();
    // Get instance field reference: private System.Single m_ControlPointDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_ControlPointDistance();
    // Get instance field reference: private System.Single m_ControlPointHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_ControlPointHeight();
    // Get instance field reference: private System.Int32 m_SampleFrequency
    [[deprecated("Use field access instead!")]] int& dyn_m_SampleFrequency();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/HitDetectionType m_HitDetectionType
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType& dyn_m_HitDetectionType();
    // Get instance field reference: private System.Single m_SphereCastRadius
    [[deprecated("Use field access instead!")]] float& dyn_m_SphereCastRadius();
    // Get instance field reference: private UnityEngine.LayerMask m_RaycastMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_m_RaycastMask();
    // Get instance field reference: private UnityEngine.QueryTriggerInteraction m_RaycastTriggerInteraction
    [[deprecated("Use field access instead!")]] ::UnityEngine::QueryTriggerInteraction& dyn_m_RaycastTriggerInteraction();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/QuerySnapVolumeInteraction m_RaycastSnapVolumeInteraction
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::QuerySnapVolumeInteraction& dyn_m_RaycastSnapVolumeInteraction();
    // Get instance field reference: private System.Boolean m_HitClosestOnly
    [[deprecated("Use field access instead!")]] bool& dyn_m_HitClosestOnly();
    // Get instance field reference: private System.Boolean m_HoverToSelect
    [[deprecated("Use field access instead!")]] bool& dyn_m_HoverToSelect();
    // Get instance field reference: private System.Single m_HoverTimeToSelect
    [[deprecated("Use field access instead!")]] float& dyn_m_HoverTimeToSelect();
    // Get instance field reference: private System.Boolean m_AutoDeselect
    [[deprecated("Use field access instead!")]] bool& dyn_m_AutoDeselect();
    // Get instance field reference: private System.Single m_TimeToAutoDeselect
    [[deprecated("Use field access instead!")]] float& dyn_m_TimeToAutoDeselect();
    // Get instance field reference: private System.Boolean m_EnableUIInteraction
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableUIInteraction();
    // Get instance field reference: private System.Boolean m_AllowAnchorControl
    [[deprecated("Use field access instead!")]] bool& dyn_m_AllowAnchorControl();
    // Get instance field reference: private System.Boolean m_UseForceGrab
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseForceGrab();
    // Get instance field reference: private System.Single m_RotateSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_RotateSpeed();
    // Get instance field reference: private System.Single m_TranslateSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_TranslateSpeed();
    // Get instance field reference: private UnityEngine.Transform m_AnchorRotateReferenceFrame
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_AnchorRotateReferenceFrame();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/AnchorRotationMode m_AnchorRotationMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::AnchorRotationMode& dyn_m_AnchorRotationMode();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.IXRInteractable <currentNearestValidTarget>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*& dyn_$currentNearestValidTarget$k__BackingField();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> m_ValidTargets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*& dyn_m_ValidTargets();
    // Get instance field reference: private System.Single m_LastTimeHoveredObjectChanged
    [[deprecated("Use field access instead!")]] float& dyn_m_LastTimeHoveredObjectChanged();
    // Get instance field reference: private System.Boolean m_PassedHoverTimeToSelect
    [[deprecated("Use field access instead!")]] bool& dyn_m_PassedHoverTimeToSelect();
    // Get instance field reference: private System.Single m_LastTimeAutoSelected
    [[deprecated("Use field access instead!")]] float& dyn_m_LastTimeAutoSelected();
    // Get instance field reference: private System.Boolean m_PassedTimeToAutoDeselect
    [[deprecated("Use field access instead!")]] bool& dyn_m_PassedTimeToAutoDeselect();
    // Get instance field reference: private readonly UnityEngine.RaycastHit[] m_RaycastHits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_m_RaycastHits();
    // Get instance field reference: private System.Int32 m_RaycastHitsCount
    [[deprecated("Use field access instead!")]] int& dyn_m_RaycastHitsCount();
    // Get instance field reference: private readonly UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/RaycastHitComparer m_RaycastHitComparer
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RaycastHitComparer*& dyn_m_RaycastHitComparer();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/SamplePoint> m_SamplePoints
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SamplePoint>*& dyn_m_SamplePoints();
    // Get instance field reference: private System.Int32 m_SamplePointsFrameUpdated
    [[deprecated("Use field access instead!")]] int& dyn_m_SamplePointsFrameUpdated();
    // Get instance field reference: private System.Int32 m_RaycastHitEndpointIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_RaycastHitEndpointIndex();
    // Get instance field reference: private System.Int32 m_UIRaycastHitEndpointIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_UIRaycastHitEndpointIndex();
    // Get instance field reference: private readonly UnityEngine.Vector3[] m_ControlPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_ControlPoints();
    // Get instance field reference: private readonly UnityEngine.Vector3[] m_HitChordControlPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_HitChordControlPoints();
    // Get instance field reference: private UnityEngine.PhysicsScene m_LocalPhysicsScene
    [[deprecated("Use field access instead!")]] ::UnityEngine::PhysicsScene& dyn_m_LocalPhysicsScene();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.UI.RegisteredUIInteractorCache m_RegisteredUIInteractorCache
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::RegisteredUIInteractorCache*& dyn_m_RegisteredUIInteractorCache();
    // public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType get_lineType()
    // Offset: 0x53F60AC
    ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType get_lineType();
    // public System.Void set_lineType(UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType value)
    // Offset: 0x53F60B4
    void set_lineType(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType value);
    // public System.Boolean get_blendVisualLinePoints()
    // Offset: 0x53F60BC
    bool get_blendVisualLinePoints();
    // public System.Void set_blendVisualLinePoints(System.Boolean value)
    // Offset: 0x53F60C4
    void set_blendVisualLinePoints(bool value);
    // public System.Single get_maxRaycastDistance()
    // Offset: 0x53F60D0
    float get_maxRaycastDistance();
    // public System.Void set_maxRaycastDistance(System.Single value)
    // Offset: 0x53F60D8
    void set_maxRaycastDistance(float value);
    // public UnityEngine.Transform get_rayOriginTransform()
    // Offset: 0x53F60E0
    ::UnityEngine::Transform* get_rayOriginTransform();
    // public System.Void set_rayOriginTransform(UnityEngine.Transform value)
    // Offset: 0x53F60E8
    void set_rayOriginTransform(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_referenceFrame()
    // Offset: 0x53F60F8
    ::UnityEngine::Transform* get_referenceFrame();
    // public System.Void set_referenceFrame(UnityEngine.Transform value)
    // Offset: 0x53F6100
    void set_referenceFrame(::UnityEngine::Transform* value);
    // public System.Single get_velocity()
    // Offset: 0x53F6110
    float get_velocity();
    // public System.Void set_velocity(System.Single value)
    // Offset: 0x53F6118
    void set_velocity(float value);
    // public System.Single get_acceleration()
    // Offset: 0x53F6120
    float get_acceleration();
    // public System.Void set_acceleration(System.Single value)
    // Offset: 0x53F6128
    void set_acceleration(float value);
    // public System.Single get_additionalGroundHeight()
    // Offset: 0x53F6130
    float get_additionalGroundHeight();
    // public System.Void set_additionalGroundHeight(System.Single value)
    // Offset: 0x53F6138
    void set_additionalGroundHeight(float value);
    // public System.Single get_additionalFlightTime()
    // Offset: 0x53F6140
    float get_additionalFlightTime();
    // public System.Void set_additionalFlightTime(System.Single value)
    // Offset: 0x53F6148
    void set_additionalFlightTime(float value);
    // public System.Single get_endPointDistance()
    // Offset: 0x53F6150
    float get_endPointDistance();
    // public System.Void set_endPointDistance(System.Single value)
    // Offset: 0x53F6158
    void set_endPointDistance(float value);
    // public System.Single get_endPointHeight()
    // Offset: 0x53F6160
    float get_endPointHeight();
    // public System.Void set_endPointHeight(System.Single value)
    // Offset: 0x53F6168
    void set_endPointHeight(float value);
    // public System.Single get_controlPointDistance()
    // Offset: 0x53F6170
    float get_controlPointDistance();
    // public System.Void set_controlPointDistance(System.Single value)
    // Offset: 0x53F6178
    void set_controlPointDistance(float value);
    // public System.Single get_controlPointHeight()
    // Offset: 0x53F6180
    float get_controlPointHeight();
    // public System.Void set_controlPointHeight(System.Single value)
    // Offset: 0x53F6188
    void set_controlPointHeight(float value);
    // public System.Int32 get_sampleFrequency()
    // Offset: 0x53F6190
    int get_sampleFrequency();
    // public System.Void set_sampleFrequency(System.Int32 value)
    // Offset: 0x53F6198
    void set_sampleFrequency(int value);
    // public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/HitDetectionType get_hitDetectionType()
    // Offset: 0x53F6214
    ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType get_hitDetectionType();
    // public System.Void set_hitDetectionType(UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/HitDetectionType value)
    // Offset: 0x53F621C
    void set_hitDetectionType(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType value);
    // public System.Single get_sphereCastRadius()
    // Offset: 0x53F6224
    float get_sphereCastRadius();
    // public System.Void set_sphereCastRadius(System.Single value)
    // Offset: 0x53F622C
    void set_sphereCastRadius(float value);
    // public UnityEngine.LayerMask get_raycastMask()
    // Offset: 0x53F6234
    ::UnityEngine::LayerMask get_raycastMask();
    // public System.Void set_raycastMask(UnityEngine.LayerMask value)
    // Offset: 0x53F623C
    void set_raycastMask(::UnityEngine::LayerMask value);
    // public UnityEngine.QueryTriggerInteraction get_raycastTriggerInteraction()
    // Offset: 0x53F6244
    ::UnityEngine::QueryTriggerInteraction get_raycastTriggerInteraction();
    // public System.Void set_raycastTriggerInteraction(UnityEngine.QueryTriggerInteraction value)
    // Offset: 0x53F624C
    void set_raycastTriggerInteraction(::UnityEngine::QueryTriggerInteraction value);
    // public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/QuerySnapVolumeInteraction get_raycastSnapVolumeInteraction()
    // Offset: 0x53F6254
    ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::QuerySnapVolumeInteraction get_raycastSnapVolumeInteraction();
    // public System.Void set_raycastSnapVolumeInteraction(UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/QuerySnapVolumeInteraction value)
    // Offset: 0x53F625C
    void set_raycastSnapVolumeInteraction(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::QuerySnapVolumeInteraction value);
    // public System.Boolean get_hitClosestOnly()
    // Offset: 0x53F6264
    bool get_hitClosestOnly();
    // public System.Void set_hitClosestOnly(System.Boolean value)
    // Offset: 0x53F626C
    void set_hitClosestOnly(bool value);
    // public System.Boolean get_hoverToSelect()
    // Offset: 0x53F6278
    bool get_hoverToSelect();
    // public System.Void set_hoverToSelect(System.Boolean value)
    // Offset: 0x53F6280
    void set_hoverToSelect(bool value);
    // public System.Single get_hoverTimeToSelect()
    // Offset: 0x53F628C
    float get_hoverTimeToSelect();
    // public System.Void set_hoverTimeToSelect(System.Single value)
    // Offset: 0x53F6294
    void set_hoverTimeToSelect(float value);
    // public System.Boolean get_autoDeselect()
    // Offset: 0x53F629C
    bool get_autoDeselect();
    // public System.Void set_autoDeselect(System.Boolean value)
    // Offset: 0x53F62A4
    void set_autoDeselect(bool value);
    // public System.Single get_timeToAutoDeselect()
    // Offset: 0x53F62B0
    float get_timeToAutoDeselect();
    // public System.Void set_timeToAutoDeselect(System.Single value)
    // Offset: 0x53F62B8
    void set_timeToAutoDeselect(float value);
    // public System.Boolean get_enableUIInteraction()
    // Offset: 0x53F62C0
    bool get_enableUIInteraction();
    // public System.Void set_enableUIInteraction(System.Boolean value)
    // Offset: 0x53F62C8
    void set_enableUIInteraction(bool value);
    // public System.Boolean get_allowAnchorControl()
    // Offset: 0x53F62F8
    bool get_allowAnchorControl();
    // public System.Void set_allowAnchorControl(System.Boolean value)
    // Offset: 0x53F6300
    void set_allowAnchorControl(bool value);
    // public System.Boolean get_useForceGrab()
    // Offset: 0x53F630C
    bool get_useForceGrab();
    // public System.Void set_useForceGrab(System.Boolean value)
    // Offset: 0x53F6314
    void set_useForceGrab(bool value);
    // public System.Single get_rotateSpeed()
    // Offset: 0x53F6320
    float get_rotateSpeed();
    // public System.Void set_rotateSpeed(System.Single value)
    // Offset: 0x53F6328
    void set_rotateSpeed(float value);
    // public System.Single get_translateSpeed()
    // Offset: 0x53F6330
    float get_translateSpeed();
    // public System.Void set_translateSpeed(System.Single value)
    // Offset: 0x53F6338
    void set_translateSpeed(float value);
    // public UnityEngine.Transform get_anchorRotateReferenceFrame()
    // Offset: 0x53F6340
    ::UnityEngine::Transform* get_anchorRotateReferenceFrame();
    // public System.Void set_anchorRotateReferenceFrame(UnityEngine.Transform value)
    // Offset: 0x53F6348
    void set_anchorRotateReferenceFrame(::UnityEngine::Transform* value);
    // public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/AnchorRotationMode get_anchorRotationMode()
    // Offset: 0x53F6358
    ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::AnchorRotationMode get_anchorRotationMode();
    // public System.Void set_anchorRotationMode(UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/AnchorRotationMode value)
    // Offset: 0x53F6360
    void set_anchorRotationMode(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::AnchorRotationMode value);
    // public System.Single get_angle()
    // Offset: 0x53F6368
    float get_angle();
    // protected UnityEngine.XR.Interaction.Toolkit.IXRInteractable get_currentNearestValidTarget()
    // Offset: 0x53F6754
    ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* get_currentNearestValidTarget();
    // private System.Void set_currentNearestValidTarget(UnityEngine.XR.Interaction.Toolkit.IXRInteractable value)
    // Offset: 0x53F675C
    void set_currentNearestValidTarget(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* value);
    // private UnityEngine.Transform get_effectiveRayOrigin()
    // Offset: 0x53F66D4
    ::UnityEngine::Transform* get_effectiveRayOrigin();
    // private System.Int32 get_closestAnyHitIndex()
    // Offset: 0x53F676C
    int get_closestAnyHitIndex();
    // protected System.Void OnValidate()
    // Offset: 0x53F6798
    void OnValidate();
    // protected System.Void OnDrawGizmosSelected()
    // Offset: 0x53F6E10
    void OnDrawGizmosSelected();
    // static private System.Void DrawQuadraticBezierGizmo(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2)
    // Offset: 0x53F7394
    static void DrawQuadraticBezierGizmo(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2);
    // private System.Void FindReferenceFrame()
    // Offset: 0x53F6970
    void FindReferenceFrame();
    // private System.Void CreateRayOrigin()
    // Offset: 0x53F6AF4
    void CreateRayOrigin();
    // public System.Boolean IsOverUIGameObject()
    // Offset: 0x53F759C
    bool IsOverUIGameObject();
    // public System.Boolean GetLinePoints(ref UnityEngine.Vector3[] linePoints, out System.Int32 numPoints)
    // Offset: 0x53F75BC
    bool GetLinePoints(ByRef<::ArrayW<::UnityEngine::Vector3>> linePoints, ByRef<int> numPoints);
    // static private System.Void EnsureCapacity(ref UnityEngine.Vector3[] linePoints, System.Int32 numPoints)
    // Offset: 0x53F7B6C
    static void EnsureCapacity(ByRef<::ArrayW<::UnityEngine::Vector3>> linePoints, int numPoints);
    // public System.Boolean TryGetHitInfo(out UnityEngine.Vector3 position, out UnityEngine.Vector3 normal, out System.Int32 positionInLine, out System.Boolean isValidTarget)
    // Offset: 0x53EF700
    bool TryGetHitInfo(ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Vector3> normal, ByRef<int> positionInLine, ByRef<bool> isValidTarget);
    // public System.Void UpdateUIModel(ref UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel model)
    // Offset: 0x53F85F8
    void UpdateUIModel(ByRef<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel> model);
    // public System.Boolean TryGetUIModel(out UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel model)
    // Offset: 0x53F8884
    bool TryGetUIModel(ByRef<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel> model);
    // public System.Boolean TryGetCurrent3DRaycastHit(out UnityEngine.RaycastHit raycastHit)
    // Offset: 0x53F735C
    bool TryGetCurrent3DRaycastHit(ByRef<::UnityEngine::RaycastHit> raycastHit);
    // public System.Boolean TryGetCurrent3DRaycastHit(out UnityEngine.RaycastHit raycastHit, out System.Int32 raycastEndpointIndex)
    // Offset: 0x53F88A0
    bool TryGetCurrent3DRaycastHit(ByRef<::UnityEngine::RaycastHit> raycastHit, ByRef<int> raycastEndpointIndex);
    // public System.Boolean TryGetCurrentUIRaycastResult(out UnityEngine.EventSystems.RaycastResult raycastResult)
    // Offset: 0x53F7378
    bool TryGetCurrentUIRaycastResult(ByRef<::UnityEngine::EventSystems::RaycastResult> raycastResult);
    // public System.Boolean TryGetCurrentUIRaycastResult(out UnityEngine.EventSystems.RaycastResult raycastResult, out System.Int32 raycastEndpointIndex)
    // Offset: 0x53F890C
    bool TryGetCurrentUIRaycastResult(ByRef<::UnityEngine::EventSystems::RaycastResult> raycastResult, ByRef<int> raycastEndpointIndex);
    // public System.Boolean TryGetCurrentRaycast(out System.Nullable`1<UnityEngine.RaycastHit> raycastHit, out System.Int32 raycastHitIndex, out System.Nullable`1<UnityEngine.EventSystems.RaycastResult> uiRaycastHit, out System.Int32 uiRaycastHitIndex, out System.Boolean isUIHitClosest)
    // Offset: 0x53F8400
    bool TryGetCurrentRaycast(ByRef<::System::Nullable_1<::UnityEngine::RaycastHit>> raycastHit, ByRef<int> raycastHitIndex, ByRef<::System::Nullable_1<::UnityEngine::EventSystems::RaycastResult>> uiRaycastHit, ByRef<int> uiRaycastHitIndex, ByRef<bool> isUIHitClosest);
    // private System.Void UpdateBezierControlPoints()
    // Offset: 0x53F89E4
    void UpdateBezierControlPoints();
    // static private UnityEngine.Vector3 SampleQuadraticBezierPoint(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, System.Single t)
    // Offset: 0x53F8BC4
    static ::UnityEngine::Vector3 SampleQuadraticBezierPoint(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, float t);
    // static private UnityEngine.Vector3 SampleCubicBezierPoint(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3, System.Single t)
    // Offset: 0x53F8368
    static ::UnityEngine::Vector3 SampleCubicBezierPoint(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3, float t);
    // static private System.Void ElevateQuadraticToCubicBezier(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, out UnityEngine.Vector3 c0, out UnityEngine.Vector3 c1, out UnityEngine.Vector3 c2, out UnityEngine.Vector3 c3)
    // Offset: 0x53F82E8
    static void ElevateQuadraticToCubicBezier(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ByRef<::UnityEngine::Vector3> c0, ByRef<::UnityEngine::Vector3> c1, ByRef<::UnityEngine::Vector3> c2, ByRef<::UnityEngine::Vector3> c3);
    // static private UnityEngine.Vector3 SampleProjectilePoint(UnityEngine.Vector3 initialPosition, UnityEngine.Vector3 initialVelocity, UnityEngine.Vector3 constantAcceleration, System.Single time)
    // Offset: 0x53F8C28
    static ::UnityEngine::Vector3 SampleProjectilePoint(::UnityEngine::Vector3 initialPosition, ::UnityEngine::Vector3 initialVelocity, ::UnityEngine::Vector3 constantAcceleration, float time);
    // private System.Void CalculateProjectileParameters(out UnityEngine.Vector3 initialPosition, out UnityEngine.Vector3 initialVelocity, out UnityEngine.Vector3 constantAcceleration, out System.Single flightTime)
    // Offset: 0x53F8C74
    void CalculateProjectileParameters(ByRef<::UnityEngine::Vector3> initialPosition, ByRef<::UnityEngine::Vector3> initialVelocity, ByRef<::UnityEngine::Vector3> constantAcceleration, ByRef<float> flightTime);
    // static private System.Boolean TryRead2DAxis(UnityEngine.InputSystem.InputAction action, out UnityEngine.Vector2 output)
    // Offset: 0x53F9070
    static bool TryRead2DAxis(::UnityEngine::InputSystem::InputAction* action, ByRef<::UnityEngine::Vector2> output);
    // protected System.Void RotateAnchor(UnityEngine.Transform anchor, System.Single directionAmount)
    // Offset: 0x53F90D8
    void RotateAnchor(::UnityEngine::Transform* anchor, float directionAmount);
    // protected System.Void RotateAnchor(UnityEngine.Transform anchor, UnityEngine.Vector2 direction, UnityEngine.Quaternion referenceRotation)
    // Offset: 0x53F925C
    void RotateAnchor(::UnityEngine::Transform* anchor, ::UnityEngine::Vector2 direction, ::UnityEngine::Quaternion referenceRotation);
    // protected System.Void TranslateAnchor(UnityEngine.Transform rayOrigin, UnityEngine.Transform anchor, System.Single directionAmount)
    // Offset: 0x53F9418
    void TranslateAnchor(::UnityEngine::Transform* rayOrigin, ::UnityEngine::Transform* anchor, float directionAmount);
    // private System.Void CreateSamplePointsListsIfNecessary()
    // Offset: 0x53F6818
    void CreateSamplePointsListsIfNecessary();
    // private System.Void UpdateSamplePointsIfNecessary()
    // Offset: 0x53F8838
    void UpdateSamplePointsIfNecessary();
    // private System.Void UpdateSamplePoints(System.Int32 count, System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/SamplePoint> samplePoints)
    // Offset: 0x53F7BE8
    void UpdateSamplePoints(int count, ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SamplePoint>* samplePoints);
    // private System.Void UpdateRaycastHits()
    // Offset: 0x53F95B4
    void UpdateRaycastHits();
    // private System.Void CheckCollidersBetweenPoints(UnityEngine.Vector3 from, UnityEngine.Vector3 to)
    // Offset: 0x53FA0B0
    void CheckCollidersBetweenPoints(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to);
    // static private System.Int32 FilterTriggerColliders(UnityEngine.XR.Interaction.Toolkit.XRInteractionManager interactionManager, UnityEngine.RaycastHit[] raycastHits, System.Int32 count, System.Func`2<UnityEngine.XR.Interaction.Toolkit.XRInteractableSnapVolume,System.Boolean> removeRule)
    // Offset: 0x53FA560
    static int FilterTriggerColliders(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* interactionManager, ::ArrayW<::UnityEngine::RaycastHit> raycastHits, int count, ::System::Func_2<::UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*, bool>* removeRule);
    // static private System.Void RemoveAt(T[] array, System.Int32 index, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void RemoveAt(::ArrayW<T> array, int index, int count) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RemoveAt");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor", "RemoveAt", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, index, count);
    }
    // private System.Void UpdateUIHitIndex()
    // Offset: 0x53F969C
    void UpdateUIHitIndex();
    // private System.Void CreateBezierCurve(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/SamplePoint> samplePoints, System.Int32 endSamplePointIndex, UnityEngine.Vector3[] quadraticControlPoints)
    // Offset: 0x53F8004
    void CreateBezierCurve(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SamplePoint>* samplePoints, int endSamplePointIndex, ::ArrayW<::UnityEngine::Vector3> quadraticControlPoints);
    // protected System.Single GetHoverTimeToSelect(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)
    // Offset: 0x53FA96C
    float GetHoverTimeToSelect(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* interactable);
    // protected System.Single GetTimeToAutoDeselect(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)
    // Offset: 0x53FA974
    float GetTimeToAutoDeselect(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* interactable);
    // private System.Void RestoreAttachTransform()
    // Offset: 0x53FAA9C
    void RestoreAttachTransform();
    // static private System.Int32 SanitizeSampleFrequency(System.Int32 value)
    // Offset: 0x53F6204
    static int SanitizeSampleFrequency(int value);
    // public System.Single get_Velocity()
    // Offset: 0x53FAB10
    float get_Velocity();
    // public System.Void set_Velocity(System.Single value)
    // Offset: 0x53FAB18
    void set_Velocity(float value);
    // public System.Single get_Acceleration()
    // Offset: 0x53FAB20
    float get_Acceleration();
    // public System.Void set_Acceleration(System.Single value)
    // Offset: 0x53FAB28
    void set_Acceleration(float value);
    // public System.Single get_AdditionalFlightTime()
    // Offset: 0x53FAB30
    float get_AdditionalFlightTime();
    // public System.Void set_AdditionalFlightTime(System.Single value)
    // Offset: 0x53FAB38
    void set_AdditionalFlightTime(float value);
    // public System.Single get_Angle()
    // Offset: 0x53FAB40
    float get_Angle();
    // protected UnityEngine.Transform get_originalAttachTransform()
    // Offset: 0x53FAB44
    ::UnityEngine::Transform* get_originalAttachTransform();
    // protected System.Void set_originalAttachTransform(UnityEngine.Transform value)
    // Offset: 0x53FAB4C
    void set_originalAttachTransform(::UnityEngine::Transform* value);
    // public System.Boolean GetLinePoints(ref UnityEngine.Vector3[] linePoints, ref System.Int32 numPoints, System.Int32 _)
    // Offset: 0x53FAB5C
    bool GetLinePoints(ByRef<::ArrayW<::UnityEngine::Vector3>> linePoints, ByRef<int> numPoints, int _);
    // public System.Boolean TryGetHitInfo(ref UnityEngine.Vector3 position, ref UnityEngine.Vector3 normal, ref System.Int32 positionInLine, ref System.Boolean isValidTarget, System.Int32 _)
    // Offset: 0x53FAB60
    bool TryGetHitInfo(ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Vector3> normal, ByRef<int> positionInLine, ByRef<bool> isValidTarget, int _);
    // public System.Boolean GetCurrentRaycastHit(out UnityEngine.RaycastHit raycastHit)
    // Offset: 0x53FAB64
    bool GetCurrentRaycastHit(ByRef<::UnityEngine::RaycastHit> raycastHit);
    // protected override System.Void Awake()
    // Offset: 0x53EEC3C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Void XRBaseControllerInteractor::Awake()
    void Awake();
    // protected override System.Void OnEnable()
    // Offset: 0x53F6D5C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x53F6D98
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::OnDisable()
    void OnDisable();
    // public override System.Void PreprocessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    // Offset: 0x53EEF84
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Void XRBaseControllerInteractor::PreprocessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    void PreprocessInteractor(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // public override System.Void ProcessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    // Offset: 0x53F96CC
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Void XRBaseControllerInteractor::ProcessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    void ProcessInteractor(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // public override System.Void GetValidTargets(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> targets)
    // Offset: 0x53F9D0C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::GetValidTargets(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> targets)
    void GetValidTargets(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>* targets);
    // public override System.Boolean get_isSelectActive()
    // Offset: 0x53FA878
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Boolean XRBaseControllerInteractor::get_isSelectActive()
    bool get_isSelectActive();
    // public override System.Boolean CanHover(UnityEngine.XR.Interaction.Toolkit.IXRHoverInteractable interactable)
    // Offset: 0x53FA898
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Boolean XRBaseInteractor::CanHover(UnityEngine.XR.Interaction.Toolkit.IXRHoverInteractable interactable)
    bool CanHover(::UnityEngine::XR::Interaction::Toolkit::IXRHoverInteractable* interactable);
    // public override System.Boolean CanSelect(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractable interactable)
    // Offset: 0x53FA8D4
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Boolean XRBaseInteractor::CanSelect(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractable interactable)
    bool CanSelect(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractable* interactable);
    // protected override System.Void OnSelectEntering(UnityEngine.XR.Interaction.Toolkit.SelectEnterEventArgs args)
    // Offset: 0x53FA97C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Void XRBaseControllerInteractor::OnSelectEntering(UnityEngine.XR.Interaction.Toolkit.SelectEnterEventArgs args)
    void OnSelectEntering(::UnityEngine::XR::Interaction::Toolkit::SelectEnterEventArgs* args);
    // protected override System.Void OnSelectExiting(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)
    // Offset: 0x53FAA58
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Void XRBaseControllerInteractor::OnSelectExiting(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)
    void OnSelectExiting(::UnityEngine::XR::Interaction::Toolkit::SelectExitEventArgs* args);
    // public override System.Boolean CanHover(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x53FAB80
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Boolean XRBaseInteractor::CanHover(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    bool CanHover(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // public override System.Boolean CanSelect(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x53FAB90
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Boolean XRBaseInteractor::CanSelect(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    bool CanSelect(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // public System.Void .ctor()
    // Offset: 0x53EFD48
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Void XRBaseControllerInteractor::.ctor()
    // Base method: System.Void XRBaseInteractor::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRRayInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRRayInteractor*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x53FABA8
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Void XRBaseControllerInteractor::.cctor()
    // Base method: System.Void XRBaseInteractor::.cctor()
    static void _cctor();
  }; // UnityEngine.XR.Interaction.Toolkit.XRRayInteractor
  #pragma pack(pop)
  static check_size<sizeof(XRRayInteractor), 880 + sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::RegisteredUIInteractorCache*)> __UnityEngine_XR_Interaction_Toolkit_XRRayInteractorSizeCheck;
  static_assert(sizeof(XRRayInteractor) == 0x378);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SamplePoint, "UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor/SamplePoint");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::AnchorRotationMode, "UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor/AnchorRotationMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType, "UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor/HitDetectionType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::QuerySnapVolumeInteraction, "UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor/QuerySnapVolumeInteraction");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType, "UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor/LineType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_lineType
// Il2CppName: get_lineType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_lineType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_lineType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_lineType
// Il2CppName: set_lineType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_lineType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor/LineType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_lineType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_blendVisualLinePoints
// Il2CppName: get_blendVisualLinePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_blendVisualLinePoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_blendVisualLinePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_blendVisualLinePoints
// Il2CppName: set_blendVisualLinePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_blendVisualLinePoints)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_blendVisualLinePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_maxRaycastDistance
// Il2CppName: get_maxRaycastDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_maxRaycastDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_maxRaycastDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_maxRaycastDistance
// Il2CppName: set_maxRaycastDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_maxRaycastDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_maxRaycastDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_rayOriginTransform
// Il2CppName: get_rayOriginTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_rayOriginTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_rayOriginTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_rayOriginTransform
// Il2CppName: set_rayOriginTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_rayOriginTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_rayOriginTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_referenceFrame
// Il2CppName: get_referenceFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_referenceFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_referenceFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_referenceFrame
// Il2CppName: set_referenceFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_referenceFrame)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_referenceFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_velocity
// Il2CppName: get_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_velocity
// Il2CppName: set_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_velocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_acceleration
// Il2CppName: get_acceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_acceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_acceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_acceleration
// Il2CppName: set_acceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_acceleration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_acceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_additionalGroundHeight
// Il2CppName: get_additionalGroundHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_additionalGroundHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_additionalGroundHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_additionalGroundHeight
// Il2CppName: set_additionalGroundHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_additionalGroundHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_additionalGroundHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_additionalFlightTime
// Il2CppName: get_additionalFlightTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_additionalFlightTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_additionalFlightTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_additionalFlightTime
// Il2CppName: set_additionalFlightTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_additionalFlightTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_additionalFlightTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_endPointDistance
// Il2CppName: get_endPointDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_endPointDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_endPointDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_endPointDistance
// Il2CppName: set_endPointDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_endPointDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_endPointDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_endPointHeight
// Il2CppName: get_endPointHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_endPointHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_endPointHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_endPointHeight
// Il2CppName: set_endPointHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_endPointHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_endPointHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_controlPointDistance
// Il2CppName: get_controlPointDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_controlPointDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_controlPointDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_controlPointDistance
// Il2CppName: set_controlPointDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_controlPointDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_controlPointDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_controlPointHeight
// Il2CppName: get_controlPointHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_controlPointHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_controlPointHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_controlPointHeight
// Il2CppName: set_controlPointHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_controlPointHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_controlPointHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_sampleFrequency
// Il2CppName: get_sampleFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_sampleFrequency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_sampleFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_sampleFrequency
// Il2CppName: set_sampleFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(int)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_sampleFrequency)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_sampleFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_hitDetectionType
// Il2CppName: get_hitDetectionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_hitDetectionType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_hitDetectionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_hitDetectionType
// Il2CppName: set_hitDetectionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_hitDetectionType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor/HitDetectionType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_hitDetectionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_sphereCastRadius
// Il2CppName: get_sphereCastRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_sphereCastRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_sphereCastRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_sphereCastRadius
// Il2CppName: set_sphereCastRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_sphereCastRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_sphereCastRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_raycastMask
// Il2CppName: get_raycastMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_raycastMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_raycastMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_raycastMask
// Il2CppName: set_raycastMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::LayerMask)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_raycastMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_raycastMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_raycastTriggerInteraction
// Il2CppName: get_raycastTriggerInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::QueryTriggerInteraction (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_raycastTriggerInteraction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_raycastTriggerInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_raycastTriggerInteraction
// Il2CppName: set_raycastTriggerInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::QueryTriggerInteraction)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_raycastTriggerInteraction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_raycastTriggerInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_raycastSnapVolumeInteraction
// Il2CppName: get_raycastSnapVolumeInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::QuerySnapVolumeInteraction (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_raycastSnapVolumeInteraction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_raycastSnapVolumeInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_raycastSnapVolumeInteraction
// Il2CppName: set_raycastSnapVolumeInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::QuerySnapVolumeInteraction)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_raycastSnapVolumeInteraction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor/QuerySnapVolumeInteraction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_raycastSnapVolumeInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_hitClosestOnly
// Il2CppName: get_hitClosestOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_hitClosestOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_hitClosestOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_hitClosestOnly
// Il2CppName: set_hitClosestOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_hitClosestOnly)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_hitClosestOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_hoverToSelect
// Il2CppName: get_hoverToSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_hoverToSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_hoverToSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_hoverToSelect
// Il2CppName: set_hoverToSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_hoverToSelect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_hoverToSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_hoverTimeToSelect
// Il2CppName: get_hoverTimeToSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_hoverTimeToSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_hoverTimeToSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_hoverTimeToSelect
// Il2CppName: set_hoverTimeToSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_hoverTimeToSelect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_hoverTimeToSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_autoDeselect
// Il2CppName: get_autoDeselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_autoDeselect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_autoDeselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_autoDeselect
// Il2CppName: set_autoDeselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_autoDeselect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_autoDeselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_timeToAutoDeselect
// Il2CppName: get_timeToAutoDeselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_timeToAutoDeselect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_timeToAutoDeselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_timeToAutoDeselect
// Il2CppName: set_timeToAutoDeselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_timeToAutoDeselect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_timeToAutoDeselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_enableUIInteraction
// Il2CppName: get_enableUIInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_enableUIInteraction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_enableUIInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_enableUIInteraction
// Il2CppName: set_enableUIInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_enableUIInteraction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_enableUIInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_allowAnchorControl
// Il2CppName: get_allowAnchorControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_allowAnchorControl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_allowAnchorControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_allowAnchorControl
// Il2CppName: set_allowAnchorControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_allowAnchorControl)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_allowAnchorControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_useForceGrab
// Il2CppName: get_useForceGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_useForceGrab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_useForceGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_useForceGrab
// Il2CppName: set_useForceGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_useForceGrab)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_useForceGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_rotateSpeed
// Il2CppName: get_rotateSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_rotateSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_rotateSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_rotateSpeed
// Il2CppName: set_rotateSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_rotateSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_rotateSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_translateSpeed
// Il2CppName: get_translateSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_translateSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_translateSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_translateSpeed
// Il2CppName: set_translateSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_translateSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_translateSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_anchorRotateReferenceFrame
// Il2CppName: get_anchorRotateReferenceFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_anchorRotateReferenceFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_anchorRotateReferenceFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_anchorRotateReferenceFrame
// Il2CppName: set_anchorRotateReferenceFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_anchorRotateReferenceFrame)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_anchorRotateReferenceFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_anchorRotationMode
// Il2CppName: get_anchorRotationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::AnchorRotationMode (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_anchorRotationMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_anchorRotationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_anchorRotationMode
// Il2CppName: set_anchorRotationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::AnchorRotationMode)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_anchorRotationMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor/AnchorRotationMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_anchorRotationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_angle
// Il2CppName: get_angle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_angle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_angle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_currentNearestValidTarget
// Il2CppName: get_currentNearestValidTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_currentNearestValidTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_currentNearestValidTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_currentNearestValidTarget
// Il2CppName: set_currentNearestValidTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_currentNearestValidTarget)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_currentNearestValidTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_effectiveRayOrigin
// Il2CppName: get_effectiveRayOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_effectiveRayOrigin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_effectiveRayOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_closestAnyHitIndex
// Il2CppName: get_closestAnyHitIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_closestAnyHitIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_closestAnyHitIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::DrawQuadraticBezierGizmo
// Il2CppName: DrawQuadraticBezierGizmo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::DrawQuadraticBezierGizmo)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "DrawQuadraticBezierGizmo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, p2});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::FindReferenceFrame
// Il2CppName: FindReferenceFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::FindReferenceFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "FindReferenceFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CreateRayOrigin
// Il2CppName: CreateRayOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CreateRayOrigin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "CreateRayOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::IsOverUIGameObject
// Il2CppName: IsOverUIGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::IsOverUIGameObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "IsOverUIGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetLinePoints
// Il2CppName: GetLinePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::ArrayW<::UnityEngine::Vector3>>, ByRef<int>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetLinePoints)> {
  static const MethodInfo* get() {
    static auto* linePoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->this_arg;
    static auto* numPoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "GetLinePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{linePoints, numPoints});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::EnsureCapacity
// Il2CppName: EnsureCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::ArrayW<::UnityEngine::Vector3>>, int)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::EnsureCapacity)> {
  static const MethodInfo* get() {
    static auto* linePoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->this_arg;
    static auto* numPoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "EnsureCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{linePoints, numPoints});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetHitInfo
// Il2CppName: TryGetHitInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<int>, ByRef<bool>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetHitInfo)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* normal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* positionInLine = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* isValidTarget = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "TryGetHitInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, normal, positionInLine, isValidTarget});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateUIModel
// Il2CppName: UpdateUIModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateUIModel)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceModel")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "UpdateUIModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetUIModel
// Il2CppName: TryGetUIModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetUIModel)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceModel")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "TryGetUIModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetCurrent3DRaycastHit
// Il2CppName: TryGetCurrent3DRaycastHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::RaycastHit>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetCurrent3DRaycastHit)> {
  static const MethodInfo* get() {
    static auto* raycastHit = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "TryGetCurrent3DRaycastHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{raycastHit});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetCurrent3DRaycastHit
// Il2CppName: TryGetCurrent3DRaycastHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::RaycastHit>, ByRef<int>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetCurrent3DRaycastHit)> {
  static const MethodInfo* get() {
    static auto* raycastHit = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    static auto* raycastEndpointIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "TryGetCurrent3DRaycastHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{raycastHit, raycastEndpointIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetCurrentUIRaycastResult
// Il2CppName: TryGetCurrentUIRaycastResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::EventSystems::RaycastResult>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetCurrentUIRaycastResult)> {
  static const MethodInfo* get() {
    static auto* raycastResult = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "RaycastResult")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "TryGetCurrentUIRaycastResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{raycastResult});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetCurrentUIRaycastResult
// Il2CppName: TryGetCurrentUIRaycastResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::EventSystems::RaycastResult>, ByRef<int>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetCurrentUIRaycastResult)> {
  static const MethodInfo* get() {
    static auto* raycastResult = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "RaycastResult")->this_arg;
    static auto* raycastEndpointIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "TryGetCurrentUIRaycastResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{raycastResult, raycastEndpointIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetCurrentRaycast
// Il2CppName: TryGetCurrentRaycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::System::Nullable_1<::UnityEngine::RaycastHit>>, ByRef<int>, ByRef<::System::Nullable_1<::UnityEngine::EventSystems::RaycastResult>>, ByRef<int>, ByRef<bool>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetCurrentRaycast)> {
  static const MethodInfo* get() {
    static auto* raycastHit = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")})->this_arg;
    static auto* raycastHitIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* uiRaycastHit = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "RaycastResult")})->this_arg;
    static auto* uiRaycastHitIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* isUIHitClosest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "TryGetCurrentRaycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{raycastHit, raycastHitIndex, uiRaycastHit, uiRaycastHitIndex, isUIHitClosest});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateBezierControlPoints
// Il2CppName: UpdateBezierControlPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateBezierControlPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "UpdateBezierControlPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SampleQuadraticBezierPoint
// Il2CppName: SampleQuadraticBezierPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SampleQuadraticBezierPoint)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "SampleQuadraticBezierPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, p2, t});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SampleCubicBezierPoint
// Il2CppName: SampleCubicBezierPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SampleCubicBezierPoint)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "SampleCubicBezierPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, p2, p3, t});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::ElevateQuadraticToCubicBezier
// Il2CppName: ElevateQuadraticToCubicBezier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::ElevateQuadraticToCubicBezier)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* c1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* c2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* c3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "ElevateQuadraticToCubicBezier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, p2, c0, c1, c2, c3});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SampleProjectilePoint
// Il2CppName: SampleProjectilePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SampleProjectilePoint)> {
  static const MethodInfo* get() {
    static auto* initialPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* initialVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constantAcceleration = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "SampleProjectilePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initialPosition, initialVelocity, constantAcceleration, time});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CalculateProjectileParameters
// Il2CppName: CalculateProjectileParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<float>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CalculateProjectileParameters)> {
  static const MethodInfo* get() {
    static auto* initialPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* initialVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* constantAcceleration = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* flightTime = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "CalculateProjectileParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initialPosition, initialVelocity, constantAcceleration, flightTime});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryRead2DAxis
// Il2CppName: TryRead2DAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::InputAction*, ByRef<::UnityEngine::Vector2>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryRead2DAxis)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "TryRead2DAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action, output});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RotateAnchor
// Il2CppName: RotateAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::Transform*, float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RotateAnchor)> {
  static const MethodInfo* get() {
    static auto* anchor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* directionAmount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "RotateAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor, directionAmount});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RotateAnchor
// Il2CppName: RotateAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::Transform*, ::UnityEngine::Vector2, ::UnityEngine::Quaternion)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RotateAnchor)> {
  static const MethodInfo* get() {
    static auto* anchor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* referenceRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "RotateAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor, direction, referenceRotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TranslateAnchor
// Il2CppName: TranslateAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::Transform*, ::UnityEngine::Transform*, float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TranslateAnchor)> {
  static const MethodInfo* get() {
    static auto* rayOrigin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* anchor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* directionAmount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "TranslateAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rayOrigin, anchor, directionAmount});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CreateSamplePointsListsIfNecessary
// Il2CppName: CreateSamplePointsListsIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CreateSamplePointsListsIfNecessary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "CreateSamplePointsListsIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateSamplePointsIfNecessary
// Il2CppName: UpdateSamplePointsIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateSamplePointsIfNecessary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "UpdateSamplePointsIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateSamplePoints
// Il2CppName: UpdateSamplePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SamplePoint>*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateSamplePoints)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* samplePoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor/SamplePoint")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "UpdateSamplePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count, samplePoints});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateRaycastHits
// Il2CppName: UpdateRaycastHits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateRaycastHits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "UpdateRaycastHits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CheckCollidersBetweenPoints
// Il2CppName: CheckCollidersBetweenPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CheckCollidersBetweenPoints)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "CheckCollidersBetweenPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::FilterTriggerColliders
// Il2CppName: FilterTriggerColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*, ::ArrayW<::UnityEngine::RaycastHit>, int, ::System::Func_2<::UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*, bool>*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::FilterTriggerColliders)> {
  static const MethodInfo* get() {
    static auto* interactionManager = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionManager")->byval_arg;
    static auto* raycastHits = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* removeRule = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractableSnapVolume"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "FilterTriggerColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactionManager, raycastHits, count, removeRule});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RemoveAt
// Il2CppName: RemoveAt
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateUIHitIndex
// Il2CppName: UpdateUIHitIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateUIHitIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "UpdateUIHitIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CreateBezierCurve
// Il2CppName: CreateBezierCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SamplePoint>*, int, ::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CreateBezierCurve)> {
  static const MethodInfo* get() {
    static auto* samplePoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor/SamplePoint")})->byval_arg;
    static auto* endSamplePointIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* quadraticControlPoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "CreateBezierCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samplePoints, endSamplePointIndex, quadraticControlPoints});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetHoverTimeToSelect
// Il2CppName: GetHoverTimeToSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetHoverTimeToSelect)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "GetHoverTimeToSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetTimeToAutoDeselect
// Il2CppName: GetTimeToAutoDeselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetTimeToAutoDeselect)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "GetTimeToAutoDeselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RestoreAttachTransform
// Il2CppName: RestoreAttachTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RestoreAttachTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "RestoreAttachTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SanitizeSampleFrequency
// Il2CppName: SanitizeSampleFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::SanitizeSampleFrequency)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "SanitizeSampleFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_Velocity
// Il2CppName: get_Velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_Velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_Velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_Velocity
// Il2CppName: set_Velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_Velocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_Velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_Acceleration
// Il2CppName: get_Acceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_Acceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_Acceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_Acceleration
// Il2CppName: set_Acceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_Acceleration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_Acceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_AdditionalFlightTime
// Il2CppName: get_AdditionalFlightTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_AdditionalFlightTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_AdditionalFlightTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_AdditionalFlightTime
// Il2CppName: set_AdditionalFlightTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_AdditionalFlightTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_AdditionalFlightTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_Angle
// Il2CppName: get_Angle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_Angle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_Angle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_originalAttachTransform
// Il2CppName: get_originalAttachTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_originalAttachTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_originalAttachTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_originalAttachTransform
// Il2CppName: set_originalAttachTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_originalAttachTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_originalAttachTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetLinePoints
// Il2CppName: GetLinePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::ArrayW<::UnityEngine::Vector3>>, ByRef<int>, int)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetLinePoints)> {
  static const MethodInfo* get() {
    static auto* linePoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->this_arg;
    static auto* numPoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* _ = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "GetLinePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{linePoints, numPoints, _});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetHitInfo
// Il2CppName: TryGetHitInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<int>, ByRef<bool>, int)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetHitInfo)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* normal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* positionInLine = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* isValidTarget = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* _ = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "TryGetHitInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, normal, positionInLine, isValidTarget, _});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetCurrentRaycastHit
// Il2CppName: GetCurrentRaycastHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::RaycastHit>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetCurrentRaycastHit)> {
  static const MethodInfo* get() {
    static auto* raycastHit = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "GetCurrentRaycastHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{raycastHit});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::PreprocessInteractor
// Il2CppName: PreprocessInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::PreprocessInteractor)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "PreprocessInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::ProcessInteractor
// Il2CppName: ProcessInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::ProcessInteractor)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "ProcessInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetValidTargets
// Il2CppName: GetValidTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetValidTargets)> {
  static const MethodInfo* get() {
    static auto* targets = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "GetValidTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targets});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_isSelectActive
// Il2CppName: get_isSelectActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_isSelectActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_isSelectActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CanHover
// Il2CppName: CanHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::IXRHoverInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CanHover)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRHoverInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "CanHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CanSelect
// Il2CppName: CanSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CanSelect)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRSelectInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "CanSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnSelectEntering
// Il2CppName: OnSelectEntering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::SelectEnterEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnSelectEntering)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "SelectEnterEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "OnSelectEntering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnSelectExiting
// Il2CppName: OnSelectExiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::SelectExitEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnSelectExiting)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "SelectExitEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "OnSelectExiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CanHover
// Il2CppName: CanHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CanHover)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "CanHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CanSelect
// Il2CppName: CanSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CanSelect)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "CanSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
