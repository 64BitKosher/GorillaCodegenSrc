// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.InteractionState
#include "UnityEngine/XR/Interaction/Toolkit/InteractionState.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder
#include "UnityEngine/XR/Interaction/Toolkit/XRInteractionUpdateOrder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRControllerState
  class XRControllerState;
  // Skipping declaration: UpdateType because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRBaseController
  class XRBaseController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRBaseController);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRBaseController*, "UnityEngine.XR.Interaction.Toolkit", "XRBaseController");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x9C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRBaseController
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: FFFFFFFF
  class XRBaseController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType
    struct UpdateType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType
    // [TokenAttribute] Offset: FFFFFFFF
    struct UpdateType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UpdateType
      constexpr UpdateType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType UpdateAndBeforeRender
      static constexpr const int UpdateAndBeforeRender = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType UpdateAndBeforeRender
      static ::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType _get_UpdateAndBeforeRender();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType UpdateAndBeforeRender
      static void _set_UpdateAndBeforeRender(::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType Update
      static constexpr const int Update = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType Update
      static ::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType _get_Update();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType Update
      static void _set_Update(::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType BeforeRender
      static constexpr const int BeforeRender = 2;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType BeforeRender
      static ::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType _get_BeforeRender();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType BeforeRender
      static void _set_BeforeRender(::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType Fixed
      static constexpr const int Fixed = 3;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType Fixed
      static ::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType _get_Fixed();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType Fixed
      static void _set_Fixed(::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType
    #pragma pack(pop)
    static check_size<sizeof(XRBaseController::UpdateType), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_XRBaseController_UpdateTypeSizeCheck;
    static_assert(sizeof(XRBaseController::UpdateType) == 0x4);
    public:
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType m_UpdateTrackingType
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType m_UpdateTrackingType;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType) == 0x4);
    // private System.Boolean m_EnableInputTracking
    // Size: 0x1
    // Offset: 0x24
    bool m_EnableInputTracking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_EnableInputActions
    // Size: 0x1
    // Offset: 0x25
    bool m_EnableInputActions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_EnableInputActions and: m_ModelPrefab
    char __padding2[0x2] = {};
    // private UnityEngine.Transform m_ModelPrefab
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* m_ModelPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform m_ModelParent
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* m_ModelParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform m_Model
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* m_Model;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean m_AnimateModel
    // Size: 0x1
    // Offset: 0x40
    bool m_AnimateModel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AnimateModel and: m_ModelSelectTransition
    char __padding6[0x7] = {};
    // private System.String m_ModelSelectTransition
    // Size: 0x8
    // Offset: 0x48
    ::StringW m_ModelSelectTransition;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_ModelDeSelectTransition
    // Size: 0x8
    // Offset: 0x50
    ::StringW m_ModelDeSelectTransition;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean m_HideControllerModel
    // Size: 0x1
    // Offset: 0x58
    bool m_HideControllerModel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_HideControllerModel and: m_SelectInteractionState
    char __padding9[0x3] = {};
    // private UnityEngine.XR.Interaction.Toolkit.InteractionState m_SelectInteractionState
    // Size: 0x7
    // Offset: 0x5C
    ::UnityEngine::XR::Interaction::Toolkit::InteractionState m_SelectInteractionState;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::InteractionState) == 0x7);
    // Padding between fields: m_SelectInteractionState and: m_ActivateInteractionState
    char __padding10[0x1] = {};
    // private UnityEngine.XR.Interaction.Toolkit.InteractionState m_ActivateInteractionState
    // Size: 0x7
    // Offset: 0x64
    ::UnityEngine::XR::Interaction::Toolkit::InteractionState m_ActivateInteractionState;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::InteractionState) == 0x7);
    // Padding between fields: m_ActivateInteractionState and: m_UIPressInteractionState
    char __padding11[0x1] = {};
    // private UnityEngine.XR.Interaction.Toolkit.InteractionState m_UIPressInteractionState
    // Size: 0x7
    // Offset: 0x6C
    ::UnityEngine::XR::Interaction::Toolkit::InteractionState m_UIPressInteractionState;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::InteractionState) == 0x7);
    // Padding between fields: m_UIPressInteractionState and: m_ControllerState
    char __padding12[0x5] = {};
    // private UnityEngine.XR.Interaction.Toolkit.XRControllerState m_ControllerState
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::XR::Interaction::Toolkit::XRControllerState* m_ControllerState;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRControllerState*) == 0x8);
    // private System.Boolean m_CreateControllerState
    // Size: 0x1
    // Offset: 0x80
    bool m_CreateControllerState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_CreateControllerState and: m_ModelAnimator
    char __padding14[0x7] = {};
    // private UnityEngine.Animator m_ModelAnimator
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Animator* m_ModelAnimator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // private System.Boolean m_HasWarnedAnimatorMissing
    // Size: 0x1
    // Offset: 0x90
    bool m_HasWarnedAnimatorMissing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_PerformSetup
    // Size: 0x1
    // Offset: 0x91
    bool m_PerformSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PerformSetup and: anchorControlDeadzone
    char __padding17[0x2] = {};
    // private System.Single <anchorControlDeadzone>k__BackingField
    // Size: 0x4
    // Offset: 0x94
    float anchorControlDeadzone;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <anchorControlOffAxisDeadzone>k__BackingField
    // Size: 0x4
    // Offset: 0x98
    float anchorControlOffAxisDeadzone;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType m_UpdateTrackingType
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType& dyn_m_UpdateTrackingType();
    // Get instance field reference: private System.Boolean m_EnableInputTracking
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableInputTracking();
    // Get instance field reference: private System.Boolean m_EnableInputActions
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableInputActions();
    // Get instance field reference: private UnityEngine.Transform m_ModelPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_ModelPrefab();
    // Get instance field reference: private UnityEngine.Transform m_ModelParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_ModelParent();
    // Get instance field reference: private UnityEngine.Transform m_Model
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_Model();
    // Get instance field reference: private System.Boolean m_AnimateModel
    [[deprecated("Use field access instead!")]] bool& dyn_m_AnimateModel();
    // Get instance field reference: private System.String m_ModelSelectTransition
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_ModelSelectTransition();
    // Get instance field reference: private System.String m_ModelDeSelectTransition
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_ModelDeSelectTransition();
    // Get instance field reference: private System.Boolean m_HideControllerModel
    [[deprecated("Use field access instead!")]] bool& dyn_m_HideControllerModel();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.InteractionState m_SelectInteractionState
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::InteractionState& dyn_m_SelectInteractionState();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.InteractionState m_ActivateInteractionState
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::InteractionState& dyn_m_ActivateInteractionState();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.InteractionState m_UIPressInteractionState
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::InteractionState& dyn_m_UIPressInteractionState();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRControllerState m_ControllerState
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRControllerState*& dyn_m_ControllerState();
    // Get instance field reference: private System.Boolean m_CreateControllerState
    [[deprecated("Use field access instead!")]] bool& dyn_m_CreateControllerState();
    // Get instance field reference: private UnityEngine.Animator m_ModelAnimator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_m_ModelAnimator();
    // Get instance field reference: private System.Boolean m_HasWarnedAnimatorMissing
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasWarnedAnimatorMissing();
    // Get instance field reference: private System.Boolean m_PerformSetup
    [[deprecated("Use field access instead!")]] bool& dyn_m_PerformSetup();
    // Get instance field reference: private System.Single <anchorControlDeadzone>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$anchorControlDeadzone$k__BackingField();
    // Get instance field reference: private System.Single <anchorControlOffAxisDeadzone>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$anchorControlOffAxisDeadzone$k__BackingField();
    // public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType get_updateTrackingType()
    // Offset: 0x53D3FE8
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType get_updateTrackingType();
    // public System.Void set_updateTrackingType(UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType value)
    // Offset: 0x53D3FF0
    void set_updateTrackingType(::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType value);
    // public System.Boolean get_enableInputTracking()
    // Offset: 0x53D3FF8
    bool get_enableInputTracking();
    // public System.Void set_enableInputTracking(System.Boolean value)
    // Offset: 0x53D4000
    void set_enableInputTracking(bool value);
    // public System.Boolean get_enableInputActions()
    // Offset: 0x53D400C
    bool get_enableInputActions();
    // public System.Void set_enableInputActions(System.Boolean value)
    // Offset: 0x53D4014
    void set_enableInputActions(bool value);
    // public UnityEngine.Transform get_modelPrefab()
    // Offset: 0x53D4020
    ::UnityEngine::Transform* get_modelPrefab();
    // public System.Void set_modelPrefab(UnityEngine.Transform value)
    // Offset: 0x53D4028
    void set_modelPrefab(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_modelParent()
    // Offset: 0x53D4030
    ::UnityEngine::Transform* get_modelParent();
    // public System.Void set_modelParent(UnityEngine.Transform value)
    // Offset: 0x53D4038
    void set_modelParent(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_model()
    // Offset: 0x53D40E4
    ::UnityEngine::Transform* get_model();
    // public System.Void set_model(UnityEngine.Transform value)
    // Offset: 0x53D40EC
    void set_model(::UnityEngine::Transform* value);
    // public System.Boolean get_animateModel()
    // Offset: 0x53D40F4
    bool get_animateModel();
    // public System.Void set_animateModel(System.Boolean value)
    // Offset: 0x53D40FC
    void set_animateModel(bool value);
    // public System.String get_modelSelectTransition()
    // Offset: 0x53D4108
    ::StringW get_modelSelectTransition();
    // public System.Void set_modelSelectTransition(System.String value)
    // Offset: 0x53D4110
    void set_modelSelectTransition(::StringW value);
    // public System.String get_modelDeSelectTransition()
    // Offset: 0x53D4118
    ::StringW get_modelDeSelectTransition();
    // public System.Void set_modelDeSelectTransition(System.String value)
    // Offset: 0x53D4120
    void set_modelDeSelectTransition(::StringW value);
    // public System.Boolean get_hideControllerModel()
    // Offset: 0x53D4128
    bool get_hideControllerModel();
    // public System.Void set_hideControllerModel(System.Boolean value)
    // Offset: 0x53D4130
    void set_hideControllerModel(bool value);
    // public UnityEngine.XR.Interaction.Toolkit.InteractionState get_selectInteractionState()
    // Offset: 0x53D41E0
    ::UnityEngine::XR::Interaction::Toolkit::InteractionState get_selectInteractionState();
    // public UnityEngine.XR.Interaction.Toolkit.InteractionState get_activateInteractionState()
    // Offset: 0x53D41E8
    ::UnityEngine::XR::Interaction::Toolkit::InteractionState get_activateInteractionState();
    // public UnityEngine.XR.Interaction.Toolkit.InteractionState get_uiPressInteractionState()
    // Offset: 0x53D41F0
    ::UnityEngine::XR::Interaction::Toolkit::InteractionState get_uiPressInteractionState();
    // public UnityEngine.XR.Interaction.Toolkit.XRControllerState get_currentControllerState()
    // Offset: 0x53D41F8
    ::UnityEngine::XR::Interaction::Toolkit::XRControllerState* get_currentControllerState();
    // public System.Void set_currentControllerState(UnityEngine.XR.Interaction.Toolkit.XRControllerState value)
    // Offset: 0x53D428C
    void set_currentControllerState(::UnityEngine::XR::Interaction::Toolkit::XRControllerState* value);
    // protected System.Void Awake()
    // Offset: 0x53D42AC
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x53D3130
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x53D3378
    void OnDisable();
    // protected System.Void Update()
    // Offset: 0x53D449C
    void Update();
    // private System.Void SetupModel()
    // Offset: 0x53D44A8
    void SetupModel();
    // private System.Void SetupControllerState()
    // Offset: 0x53D4210
    void SetupControllerState();
    // protected UnityEngine.GameObject GetModelPrefab()
    // Offset: 0x53D46C8
    ::UnityEngine::GameObject* GetModelPrefab();
    // protected System.Void UpdateController()
    // Offset: 0x53D4750
    void UpdateController();
    // protected System.Void OnBeforeRender()
    // Offset: 0x53D47EC
    void OnBeforeRender();
    // protected System.Void FixedUpdate()
    // Offset: 0x53D483C
    void FixedUpdate();
    // protected System.Void ApplyControllerState(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase, UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    // Offset: 0x53D4888
    void ApplyControllerState(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase, ::UnityEngine::XR::Interaction::Toolkit::XRControllerState* controllerState);
    // protected System.Void UpdateTrackingInput(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    // Offset: 0x53D38B0
    void UpdateTrackingInput(::UnityEngine::XR::Interaction::Toolkit::XRControllerState* controllerState);
    // protected System.Void UpdateInput(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    // Offset: 0x53D3CBC
    void UpdateInput(::UnityEngine::XR::Interaction::Toolkit::XRControllerState* controllerState);
    // protected System.Void UpdateControllerModelAnimation()
    // Offset: 0x53D4930
    void UpdateControllerModelAnimation();
    // public System.Boolean SendHapticImpulse(System.Single amplitude, System.Single duration)
    // Offset: 0x53D4AF4
    bool SendHapticImpulse(float amplitude, float duration);
    // public System.Boolean GetControllerState(out UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    // Offset: 0x53D4AFC
    bool GetControllerState(ByRef<::UnityEngine::XR::Interaction::Toolkit::XRControllerState*> controllerState);
    // public System.Void SetControllerState(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    // Offset: 0x53D4B30
    void SetControllerState(::UnityEngine::XR::Interaction::Toolkit::XRControllerState* controllerState);
    // public UnityEngine.Transform get_modelTransform()
    // Offset: 0x53D4B50
    ::UnityEngine::Transform* get_modelTransform();
    // public System.Void set_modelTransform(UnityEngine.Transform value)
    // Offset: 0x53D4B58
    void set_modelTransform(::UnityEngine::Transform* value);
    // public System.Single get_anchorControlDeadzone()
    // Offset: 0x53D4B5C
    float get_anchorControlDeadzone();
    // public System.Void set_anchorControlDeadzone(System.Single value)
    // Offset: 0x53D4B64
    void set_anchorControlDeadzone(float value);
    // public System.Single get_anchorControlOffAxisDeadzone()
    // Offset: 0x53D4B6C
    float get_anchorControlOffAxisDeadzone();
    // public System.Void set_anchorControlOffAxisDeadzone(System.Single value)
    // Offset: 0x53D4B74
    void set_anchorControlOffAxisDeadzone(float value);
    // protected System.Void .ctor()
    // Offset: 0x53D3FCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRBaseController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRBaseController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRBaseController*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.XRBaseController
  #pragma pack(pop)
  static check_size<sizeof(XRBaseController), 152 + sizeof(float)> __UnityEngine_XR_Interaction_Toolkit_XRBaseControllerSizeCheck;
  static_assert(sizeof(XRBaseController) == 0x9C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType, "UnityEngine.XR.Interaction.Toolkit", "XRBaseController/UpdateType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_updateTrackingType
// Il2CppName: get_updateTrackingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_updateTrackingType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_updateTrackingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_updateTrackingType
// Il2CppName: set_updateTrackingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_updateTrackingType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseController/UpdateType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_updateTrackingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_enableInputTracking
// Il2CppName: get_enableInputTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_enableInputTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_enableInputTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_enableInputTracking
// Il2CppName: set_enableInputTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_enableInputTracking)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_enableInputTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_enableInputActions
// Il2CppName: get_enableInputActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_enableInputActions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_enableInputActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_enableInputActions
// Il2CppName: set_enableInputActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_enableInputActions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_enableInputActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelPrefab
// Il2CppName: get_modelPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelPrefab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_modelPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelPrefab
// Il2CppName: set_modelPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelPrefab)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_modelPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelParent
// Il2CppName: get_modelParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelParent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_modelParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelParent
// Il2CppName: set_modelParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelParent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_modelParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_model
// Il2CppName: get_model
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_model)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_model", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_model
// Il2CppName: set_model
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_model)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_model", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_animateModel
// Il2CppName: get_animateModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_animateModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_animateModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_animateModel
// Il2CppName: set_animateModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_animateModel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_animateModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelSelectTransition
// Il2CppName: get_modelSelectTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelSelectTransition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_modelSelectTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelSelectTransition
// Il2CppName: set_modelSelectTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::StringW)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelSelectTransition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_modelSelectTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelDeSelectTransition
// Il2CppName: get_modelDeSelectTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelDeSelectTransition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_modelDeSelectTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelDeSelectTransition
// Il2CppName: set_modelDeSelectTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::StringW)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelDeSelectTransition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_modelDeSelectTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_hideControllerModel
// Il2CppName: get_hideControllerModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_hideControllerModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_hideControllerModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_hideControllerModel
// Il2CppName: set_hideControllerModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_hideControllerModel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_hideControllerModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_selectInteractionState
// Il2CppName: get_selectInteractionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::InteractionState (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_selectInteractionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_selectInteractionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_activateInteractionState
// Il2CppName: get_activateInteractionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::InteractionState (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_activateInteractionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_activateInteractionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_uiPressInteractionState
// Il2CppName: get_uiPressInteractionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::InteractionState (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_uiPressInteractionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_uiPressInteractionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_currentControllerState
// Il2CppName: get_currentControllerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRControllerState* (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_currentControllerState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_currentControllerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_currentControllerState
// Il2CppName: set_currentControllerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::XR::Interaction::Toolkit::XRControllerState*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_currentControllerState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_currentControllerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::SetupModel
// Il2CppName: SetupModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::SetupModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "SetupModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::SetupControllerState
// Il2CppName: SetupControllerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::SetupControllerState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "SetupControllerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::GetModelPrefab
// Il2CppName: GetModelPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::GetModelPrefab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "GetModelPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateController
// Il2CppName: UpdateController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "UpdateController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::OnBeforeRender
// Il2CppName: OnBeforeRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::OnBeforeRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "OnBeforeRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::ApplyControllerState
// Il2CppName: ApplyControllerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase, ::UnityEngine::XR::Interaction::Toolkit::XRControllerState*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::ApplyControllerState)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    static auto* controllerState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "ApplyControllerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase, controllerState});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateTrackingInput
// Il2CppName: UpdateTrackingInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::XR::Interaction::Toolkit::XRControllerState*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateTrackingInput)> {
  static const MethodInfo* get() {
    static auto* controllerState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "UpdateTrackingInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerState});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateInput
// Il2CppName: UpdateInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::XR::Interaction::Toolkit::XRControllerState*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateInput)> {
  static const MethodInfo* get() {
    static auto* controllerState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "UpdateInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerState});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateControllerModelAnimation
// Il2CppName: UpdateControllerModelAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateControllerModelAnimation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "UpdateControllerModelAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::SendHapticImpulse
// Il2CppName: SendHapticImpulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(float, float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::SendHapticImpulse)> {
  static const MethodInfo* get() {
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "SendHapticImpulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amplitude, duration});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::GetControllerState
// Il2CppName: GetControllerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(ByRef<::UnityEngine::XR::Interaction::Toolkit::XRControllerState*>)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::GetControllerState)> {
  static const MethodInfo* get() {
    static auto* controllerState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "GetControllerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerState});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::SetControllerState
// Il2CppName: SetControllerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::XR::Interaction::Toolkit::XRControllerState*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::SetControllerState)> {
  static const MethodInfo* get() {
    static auto* controllerState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "SetControllerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerState});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelTransform
// Il2CppName: get_modelTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_modelTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelTransform
// Il2CppName: set_modelTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_modelTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_anchorControlDeadzone
// Il2CppName: get_anchorControlDeadzone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_anchorControlDeadzone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_anchorControlDeadzone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_anchorControlDeadzone
// Il2CppName: set_anchorControlDeadzone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_anchorControlDeadzone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_anchorControlDeadzone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_anchorControlOffAxisDeadzone
// Il2CppName: get_anchorControlOffAxisDeadzone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_anchorControlOffAxisDeadzone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_anchorControlOffAxisDeadzone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_anchorControlOffAxisDeadzone
// Il2CppName: set_anchorControlOffAxisDeadzone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_anchorControlOffAxisDeadzone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_anchorControlOffAxisDeadzone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
