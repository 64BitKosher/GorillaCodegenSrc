// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.Filtering.XRTargetEvaluator
#include "UnityEngine/XR/Interaction/Toolkit/Filtering/XRTargetEvaluator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: Unity::XR::CoreUtils
namespace Unity::XR::CoreUtils {
  // Forward declaring type: XROrigin
  class XROrigin;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: IXRInteractor
  class IXRInteractor;
  // Forward declaring type: IXRInteractable
  class IXRInteractable;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Filtering
namespace UnityEngine::XR::Interaction::Toolkit::Filtering {
  // Forward declaring type: XRAngleGazeEvaluator
  class XRAngleGazeEvaluator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator*, "UnityEngine.XR.Interaction.Toolkit.Filtering", "XRAngleGazeEvaluator");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Filtering
namespace UnityEngine::XR::Interaction::Toolkit::Filtering {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Filtering.XRAngleGazeEvaluator
  // [TokenAttribute] Offset: FFFFFFFF
  class XRAngleGazeEvaluator : public ::UnityEngine::XR::Interaction::Toolkit::Filtering::XRTargetEvaluator {
    public:
    // Writing base type padding for base size: 0x2B to desired offset: 0x30
    char ___base_padding[0x5] = {};
    public:
    // private UnityEngine.Transform m_GazeTransform
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* m_GazeTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single m_MaxAngle
    // Size: 0x4
    // Offset: 0x38
    float m_MaxAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private Unity.XR.CoreUtils.XROrigin s_XROriginInstance
    static ::Unity::XR::CoreUtils::XROrigin* _get_s_XROriginInstance();
    // Set static field: static private Unity.XR.CoreUtils.XROrigin s_XROriginInstance
    static void _set_s_XROriginInstance(::Unity::XR::CoreUtils::XROrigin* value);
    // Get instance field reference: private UnityEngine.Transform m_GazeTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_GazeTransform();
    // Get instance field reference: private System.Single m_MaxAngle
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxAngle();
    // static private UnityEngine.Camera GetXROriginCamera()
    // Offset: 0x542E150
    static ::UnityEngine::Camera* GetXROriginCamera();
    // public UnityEngine.Transform get_gazeTransform()
    // Offset: 0x542E254
    ::UnityEngine::Transform* get_gazeTransform();
    // public System.Void set_gazeTransform(UnityEngine.Transform value)
    // Offset: 0x542E25C
    void set_gazeTransform(::UnityEngine::Transform* value);
    // public System.Single get_maxAngle()
    // Offset: 0x542E264
    float get_maxAngle();
    // public System.Void set_maxAngle(System.Single value)
    // Offset: 0x542E26C
    void set_maxAngle(float value);
    // private System.Void InitializeGazeTransform()
    // Offset: 0x542E28C
    void InitializeGazeTransform();
    // protected override System.Void OnEnable()
    // Offset: 0x542E39C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.Filtering.XRTargetEvaluator
    // Base method: System.Void XRTargetEvaluator::OnEnable()
    void OnEnable();
    // public override System.Void Reset()
    // Offset: 0x542E418
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.Filtering.XRTargetEvaluator
    // Base method: System.Void XRTargetEvaluator::Reset()
    void Reset();
    // protected override System.Single CalculateNormalizedScore(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, UnityEngine.XR.Interaction.Toolkit.IXRInteractable target)
    // Offset: 0x542E420
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.Filtering.XRTargetEvaluator
    // Base method: System.Single XRTargetEvaluator::CalculateNormalizedScore(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, UnityEngine.XR.Interaction.Toolkit.IXRInteractable target)
    float CalculateNormalizedScore(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor* interactor, ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* target);
    // public System.Void .ctor()
    // Offset: 0x542E728
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.Filtering.XRTargetEvaluator
    // Base method: System.Void XRTargetEvaluator::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRAngleGazeEvaluator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRAngleGazeEvaluator*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.Filtering.XRAngleGazeEvaluator
  #pragma pack(pop)
  static check_size<sizeof(XRAngleGazeEvaluator), 56 + sizeof(float)> __UnityEngine_XR_Interaction_Toolkit_Filtering_XRAngleGazeEvaluatorSizeCheck;
  static_assert(sizeof(XRAngleGazeEvaluator) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::GetXROriginCamera
// Il2CppName: GetXROriginCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::GetXROriginCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator*), "GetXROriginCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::get_gazeTransform
// Il2CppName: get_gazeTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::get_gazeTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator*), "get_gazeTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::set_gazeTransform
// Il2CppName: set_gazeTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::set_gazeTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator*), "set_gazeTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::get_maxAngle
// Il2CppName: get_maxAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::get_maxAngle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator*), "get_maxAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::set_maxAngle
// Il2CppName: set_maxAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::set_maxAngle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator*), "set_maxAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::InitializeGazeTransform
// Il2CppName: InitializeGazeTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::InitializeGazeTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator*), "InitializeGazeTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::CalculateNormalizedScore
// Il2CppName: CalculateNormalizedScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*, ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::CalculateNormalizedScore)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractor")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator*), "CalculateNormalizedScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, target});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRAngleGazeEvaluator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
