// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.Filtering.PokeStateData
#include "UnityEngine/XR/Interaction/Toolkit/Filtering/PokeStateData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::XR::CoreUtils::Bindings::Variables
namespace Unity::XR::CoreUtils::Bindings::Variables {
  // Forward declaring type: BindableVariable`1<T>
  template<typename T>
  class BindableVariable_1;
  // Forward declaring type: IReadOnlyBindableVariable`1<T>
  template<typename T>
  class IReadOnlyBindableVariable_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Bounds
  struct Bounds;
  // Forward declaring type: Pose
  struct Pose;
  // Forward declaring type: Space
  struct Space;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::Filtering
namespace UnityEngine::XR::Interaction::Toolkit::Filtering {
  // Forward declaring type: PokeThresholdData
  class PokeThresholdData;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Filtering
namespace UnityEngine::XR::Interaction::Toolkit::Filtering {
  // Forward declaring type: XRPokeLogic
  class XRPokeLogic;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*, "UnityEngine.XR.Interaction.Toolkit.Filtering", "XRPokeLogic");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Filtering
namespace UnityEngine::XR::Interaction::Toolkit::Filtering {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Filtering.XRPokeLogic
  // [TokenAttribute] Offset: FFFFFFFF
  class XRPokeLogic : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Single <interactionAxisLength>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    float interactionAxisLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: interactionAxisLength and: m_PokeStateData
    char __padding0[0x4] = {};
    // private readonly Unity.XR.CoreUtils.Bindings.Variables.BindableVariable`1<UnityEngine.XR.Interaction.Toolkit.Filtering.PokeStateData> m_PokeStateData
    // Size: 0x8
    // Offset: 0x18
    ::Unity::XR::CoreUtils::Bindings::Variables::BindableVariable_1<::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeStateData>* m_PokeStateData;
    // Field size check
    static_assert(sizeof(::Unity::XR::CoreUtils::Bindings::Variables::BindableVariable_1<::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeStateData>*) == 0x8);
    // private UnityEngine.Transform m_InitialTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* m_InitialTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.Filtering.PokeThresholdData m_PokeThresholdData
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeThresholdData* m_PokeThresholdData;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeThresholdData*) == 0x8);
    // private System.Single m_SelectEntranceVectorDotThreshold
    // Size: 0x4
    // Offset: 0x30
    float m_SelectEntranceVectorDotThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_SelectEntranceVectorDotThreshold and: m_LastHoverEnterLocalPosition
    char __padding4[0x4] = {};
    // private readonly System.Collections.Generic.Dictionary`2<System.Object,UnityEngine.Vector3> m_LastHoverEnterLocalPosition
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::UnityEngine::Vector3>* m_LastHoverEnterLocalPosition;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::UnityEngine::Vector3>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Object,UnityEngine.Transform> m_LastHoveredTransform
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::UnityEngine::Transform*>* m_LastHoveredTransform;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::UnityEngine::Transform*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Object,System.Boolean> m_HoldingHoverCheck
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, bool>* m_HoldingHoverCheck;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Il2CppObject*, bool>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // static field const value: static private System.Single k_DepthPercentActivationThreshold
    static constexpr const float k_DepthPercentActivationThreshold = 0.025;
    // Get static field: static private System.Single k_DepthPercentActivationThreshold
    static float _get_k_DepthPercentActivationThreshold();
    // Set static field: static private System.Single k_DepthPercentActivationThreshold
    static void _set_k_DepthPercentActivationThreshold(float value);
    // static field const value: static private System.Single k_SquareVelocityHoverThreshold
    static constexpr const float k_SquareVelocityHoverThreshold = 0.0002;
    // Get static field: static private System.Single k_SquareVelocityHoverThreshold
    static float _get_k_SquareVelocityHoverThreshold();
    // Set static field: static private System.Single k_SquareVelocityHoverThreshold
    static void _set_k_SquareVelocityHoverThreshold(float value);
    // Get instance field reference: private System.Single <interactionAxisLength>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$interactionAxisLength$k__BackingField();
    // Get instance field reference: private readonly Unity.XR.CoreUtils.Bindings.Variables.BindableVariable`1<UnityEngine.XR.Interaction.Toolkit.Filtering.PokeStateData> m_PokeStateData
    [[deprecated("Use field access instead!")]] ::Unity::XR::CoreUtils::Bindings::Variables::BindableVariable_1<::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeStateData>*& dyn_m_PokeStateData();
    // Get instance field reference: private UnityEngine.Transform m_InitialTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_InitialTransform();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.Filtering.PokeThresholdData m_PokeThresholdData
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeThresholdData*& dyn_m_PokeThresholdData();
    // Get instance field reference: private System.Single m_SelectEntranceVectorDotThreshold
    [[deprecated("Use field access instead!")]] float& dyn_m_SelectEntranceVectorDotThreshold();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Object,UnityEngine.Vector3> m_LastHoverEnterLocalPosition
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::UnityEngine::Vector3>*& dyn_m_LastHoverEnterLocalPosition();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Object,UnityEngine.Transform> m_LastHoveredTransform
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::UnityEngine::Transform*>*& dyn_m_LastHoveredTransform();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Object,System.Boolean> m_HoldingHoverCheck
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, bool>*& dyn_m_HoldingHoverCheck();
    // private System.Single get_interactionAxisLength()
    // Offset: 0x542D52C
    float get_interactionAxisLength();
    // private System.Void set_interactionAxisLength(System.Single value)
    // Offset: 0x542D534
    void set_interactionAxisLength(float value);
    // public Unity.XR.CoreUtils.Bindings.Variables.IReadOnlyBindableVariable`1<UnityEngine.XR.Interaction.Toolkit.Filtering.PokeStateData> get_pokeStateData()
    // Offset: 0x542D53C
    ::Unity::XR::CoreUtils::Bindings::Variables::IReadOnlyBindableVariable_1<::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeStateData>* get_pokeStateData();
    // public System.Void Initialize(UnityEngine.Transform associatedTransform, UnityEngine.XR.Interaction.Toolkit.Filtering.PokeThresholdData pokeThresholdData, UnityEngine.Collider collider)
    // Offset: 0x542D318
    void Initialize(::UnityEngine::Transform* associatedTransform, ::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeThresholdData* pokeThresholdData, ::UnityEngine::Collider* collider);
    // public System.Void SetPokeDepth(System.Single pokeDepth)
    // Offset: 0x542DB10
    void SetPokeDepth(float pokeDepth);
    // public System.Void Dispose()
    // Offset: 0x542C250
    void Dispose();
    // public System.Boolean MeetsRequirementsForSelectAction(System.Object interactor, UnityEngine.Vector3 pokableAttachPosition, UnityEngine.Vector3 pokerAttachPosition, System.Single pokeInteractionOffset, UnityEngine.Transform pokedTransform)
    // Offset: 0x542C4A0
    bool MeetsRequirementsForSelectAction(::Il2CppObject* interactor, ::UnityEngine::Vector3 pokableAttachPosition, ::UnityEngine::Vector3 pokerAttachPosition, float pokeInteractionOffset, ::UnityEngine::Transform* pokedTransform);
    // private UnityEngine.Vector3 ComputeRotatedDepthEvaluationAxis(UnityEngine.Transform associatedTransform, System.Boolean isWorldSpace)
    // Offset: 0x542DB18
    ::UnityEngine::Vector3 ComputeRotatedDepthEvaluationAxis(::UnityEngine::Transform* associatedTransform, bool isWorldSpace);
    // private System.Single ComputeInteractionAxisLength(UnityEngine.Bounds bounds)
    // Offset: 0x542D890
    float ComputeInteractionAxisLength(::UnityEngine::Bounds bounds);
    // public System.Void OnHoverEntered(System.Object interactor, UnityEngine.Pose updatedPose, UnityEngine.Transform pokedTransform)
    // Offset: 0x542CF50
    void OnHoverEntered(::Il2CppObject* interactor, ::UnityEngine::Pose updatedPose, ::UnityEngine::Transform* pokedTransform);
    // public System.Void OnHoverExited(System.Object interactor)
    // Offset: 0x542D038
    void OnHoverExited(::Il2CppObject* interactor);
    // private System.Void ResetPokeStateData(UnityEngine.Transform transform)
    // Offset: 0x542D9C4
    void ResetPokeStateData(::UnityEngine::Transform* transform);
    // static private UnityEngine.Bounds ComputeBounds(UnityEngine.Collider targetCollider, System.Boolean rotateBoundsScale, UnityEngine.Space targetSpace)
    // Offset: 0x542D544
    static ::UnityEngine::Bounds ComputeBounds(::UnityEngine::Collider* targetCollider, bool rotateBoundsScale, ::UnityEngine::Space targetSpace);
    // static private UnityEngine.Bounds BoundsLocalToWorld(UnityEngine.Bounds targetBounds, UnityEngine.Transform targetTransform, System.Boolean rotateBoundsScale)
    // Offset: 0x542DD4C
    static ::UnityEngine::Bounds BoundsLocalToWorld(::UnityEngine::Bounds targetBounds, ::UnityEngine::Transform* targetTransform, bool rotateBoundsScale);
    // public System.Void DrawGizmos()
    // Offset: 0x542DE7C
    void DrawGizmos();
    // public System.Void .ctor()
    // Offset: 0x542D164
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRPokeLogic* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRPokeLogic*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.Filtering.XRPokeLogic
  #pragma pack(pop)
  static check_size<sizeof(XRPokeLogic), 72 + sizeof(::System::Collections::Generic::Dictionary_2<::Il2CppObject*, bool>*)> __UnityEngine_XR_Interaction_Toolkit_Filtering_XRPokeLogicSizeCheck;
  static_assert(sizeof(XRPokeLogic) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::get_interactionAxisLength
// Il2CppName: get_interactionAxisLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::get_interactionAxisLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*), "get_interactionAxisLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::set_interactionAxisLength
// Il2CppName: set_interactionAxisLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::set_interactionAxisLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*), "set_interactionAxisLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::get_pokeStateData
// Il2CppName: get_pokeStateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::XR::CoreUtils::Bindings::Variables::IReadOnlyBindableVariable_1<::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeStateData>* (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::get_pokeStateData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*), "get_pokeStateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::*)(::UnityEngine::Transform*, ::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeThresholdData*, ::UnityEngine::Collider*)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::Initialize)> {
  static const MethodInfo* get() {
    static auto* associatedTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* pokeThresholdData = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Filtering", "PokeThresholdData")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{associatedTransform, pokeThresholdData, collider});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::SetPokeDepth
// Il2CppName: SetPokeDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::SetPokeDepth)> {
  static const MethodInfo* get() {
    static auto* pokeDepth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*), "SetPokeDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pokeDepth});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::MeetsRequirementsForSelectAction
// Il2CppName: MeetsRequirementsForSelectAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::*)(::Il2CppObject*, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float, ::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::MeetsRequirementsForSelectAction)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* pokableAttachPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* pokerAttachPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* pokeInteractionOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* pokedTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*), "MeetsRequirementsForSelectAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, pokableAttachPosition, pokerAttachPosition, pokeInteractionOffset, pokedTransform});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::ComputeRotatedDepthEvaluationAxis
// Il2CppName: ComputeRotatedDepthEvaluationAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::*)(::UnityEngine::Transform*, bool)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::ComputeRotatedDepthEvaluationAxis)> {
  static const MethodInfo* get() {
    static auto* associatedTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* isWorldSpace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*), "ComputeRotatedDepthEvaluationAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{associatedTransform, isWorldSpace});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::ComputeInteractionAxisLength
// Il2CppName: ComputeInteractionAxisLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::*)(::UnityEngine::Bounds)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::ComputeInteractionAxisLength)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*), "ComputeInteractionAxisLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::OnHoverEntered
// Il2CppName: OnHoverEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::*)(::Il2CppObject*, ::UnityEngine::Pose, ::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::OnHoverEntered)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* updatedPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* pokedTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*), "OnHoverEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, updatedPose, pokedTransform});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::OnHoverExited
// Il2CppName: OnHoverExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::*)(::Il2CppObject*)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::OnHoverExited)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*), "OnHoverExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::ResetPokeStateData
// Il2CppName: ResetPokeStateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::ResetPokeStateData)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*), "ResetPokeStateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::ComputeBounds
// Il2CppName: ComputeBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (*)(::UnityEngine::Collider*, bool, ::UnityEngine::Space)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::ComputeBounds)> {
  static const MethodInfo* get() {
    static auto* targetCollider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    static auto* rotateBoundsScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* targetSpace = &::il2cpp_utils::GetClassFromName("UnityEngine", "Space")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*), "ComputeBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetCollider, rotateBoundsScale, targetSpace});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::BoundsLocalToWorld
// Il2CppName: BoundsLocalToWorld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (*)(::UnityEngine::Bounds, ::UnityEngine::Transform*, bool)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::BoundsLocalToWorld)> {
  static const MethodInfo* get() {
    static auto* targetBounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* targetTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* rotateBoundsScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*), "BoundsLocalToWorld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetBounds, targetTransform, rotateBoundsScale});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::DrawGizmos
// Il2CppName: DrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::DrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*), "DrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
