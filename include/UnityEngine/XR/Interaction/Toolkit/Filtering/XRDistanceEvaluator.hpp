// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.Filtering.XRTargetEvaluator
#include "UnityEngine/XR/Interaction/Toolkit/Filtering/XRTargetEvaluator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: IXRInteractor
  class IXRInteractor;
  // Forward declaring type: IXRInteractable
  class IXRInteractable;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Filtering
namespace UnityEngine::XR::Interaction::Toolkit::Filtering {
  // Forward declaring type: XRDistanceEvaluator
  class XRDistanceEvaluator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator*, "UnityEngine.XR.Interaction.Toolkit.Filtering", "XRDistanceEvaluator");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Filtering
namespace UnityEngine::XR::Interaction::Toolkit::Filtering {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Filtering.XRDistanceEvaluator
  // [TokenAttribute] Offset: FFFFFFFF
  class XRDistanceEvaluator : public ::UnityEngine::XR::Interaction::Toolkit::Filtering::XRTargetEvaluator {
    public:
    // Writing base type padding for base size: 0x2B to desired offset: 0x2C
    char ___base_padding[0x1] = {};
    public:
    // private System.Single m_MaxDistance
    // Size: 0x4
    // Offset: 0x2C
    float m_MaxDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating conversion operator: operator float
    constexpr operator float() const noexcept {
      return m_MaxDistance;
    }
    // Get instance field reference: private System.Single m_MaxDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxDistance();
    // public System.Single get_maxDistance()
    // Offset: 0x542E750
    float get_maxDistance();
    // public System.Void set_maxDistance(System.Single value)
    // Offset: 0x542E758
    void set_maxDistance(float value);
    // public override System.Void Reset()
    // Offset: 0x542E760
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.Filtering.XRTargetEvaluator
    // Base method: System.Void XRTargetEvaluator::Reset()
    void Reset();
    // protected override System.Single CalculateNormalizedScore(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, UnityEngine.XR.Interaction.Toolkit.IXRInteractable target)
    // Offset: 0x542E8A4
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.Filtering.XRTargetEvaluator
    // Base method: System.Single XRTargetEvaluator::CalculateNormalizedScore(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, UnityEngine.XR.Interaction.Toolkit.IXRInteractable target)
    float CalculateNormalizedScore(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor* interactor, ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* target);
    // public System.Void .ctor()
    // Offset: 0x542EAD0
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.Filtering.XRTargetEvaluator
    // Base method: System.Void XRTargetEvaluator::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRDistanceEvaluator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRDistanceEvaluator*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.Filtering.XRDistanceEvaluator
  #pragma pack(pop)
  static check_size<sizeof(XRDistanceEvaluator), 44 + sizeof(float)> __UnityEngine_XR_Interaction_Toolkit_Filtering_XRDistanceEvaluatorSizeCheck;
  static_assert(sizeof(XRDistanceEvaluator) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator::get_maxDistance
// Il2CppName: get_maxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator::get_maxDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator*), "get_maxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator::set_maxDistance
// Il2CppName: set_maxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator::set_maxDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator*), "set_maxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator::CalculateNormalizedScore
// Il2CppName: CalculateNormalizedScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*, ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator::CalculateNormalizedScore)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractor")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator*), "CalculateNormalizedScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, target});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRDistanceEvaluator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
