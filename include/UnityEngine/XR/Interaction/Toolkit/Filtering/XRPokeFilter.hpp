// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.Filtering.IXRSelectFilter
#include "UnityEngine/XR/Interaction/Toolkit/Filtering/IXRSelectFilter.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.Filtering.IXRInteractionStrengthFilter
#include "UnityEngine/XR/Interaction/Toolkit/Filtering/IXRInteractionStrengthFilter.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State.IPokeStateDataProvider
#include "UnityEngine/XR/Interaction/Toolkit/AffordanceSystem/State/IPokeStateDataProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRBaseInteractable
  class XRBaseInteractable;
  // Forward declaring type: IXRSelectInteractor
  class IXRSelectInteractor;
  // Forward declaring type: IXRSelectInteractable
  class IXRSelectInteractable;
  // Forward declaring type: IXRInteractor
  class IXRInteractor;
  // Forward declaring type: IXRInteractable
  class IXRInteractable;
  // Forward declaring type: HoverEnterEventArgs
  class HoverEnterEventArgs;
  // Forward declaring type: HoverExitEventArgs
  class HoverExitEventArgs;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::Filtering
namespace UnityEngine::XR::Interaction::Toolkit::Filtering {
  // Forward declaring type: PokeThresholdDatumProperty
  class PokeThresholdDatumProperty;
  // Forward declaring type: XRPokeLogic
  class XRPokeLogic;
}
// Forward declaring namespace: Unity::XR::CoreUtils::Bindings
namespace Unity::XR::CoreUtils::Bindings {
  // Forward declaring type: BindingsGroup
  class BindingsGroup;
}
// Forward declaring namespace: Unity::XR::CoreUtils::Bindings::Variables
namespace Unity::XR::CoreUtils::Bindings::Variables {
  // Forward declaring type: IReadOnlyBindableVariable`1<T>
  template<typename T>
  class IReadOnlyBindableVariable_1;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Filtering
namespace UnityEngine::XR::Interaction::Toolkit::Filtering {
  // Forward declaring type: XRPokeFilter
  class XRPokeFilter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*, "UnityEngine.XR.Interaction.Toolkit.Filtering", "XRPokeFilter");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Filtering
namespace UnityEngine::XR::Interaction::Toolkit::Filtering {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Filtering.XRPokeFilter
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class XRPokeFilter : public ::UnityEngine::MonoBehaviour/*, public ::UnityEngine::XR::Interaction::Toolkit::Filtering::IXRSelectFilter, public ::UnityEngine::XR::Interaction::Toolkit::Filtering::IXRInteractionStrengthFilter, public ::UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::IPokeStateDataProvider*/ {
    public:
    public:
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable m_Interactable
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* m_Interactable;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*) == 0x8);
    // private UnityEngine.Collider m_PokeCollider
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Collider* m_PokeCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.Filtering.PokeThresholdDatumProperty m_PokeConfiguration
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeThresholdDatumProperty* m_PokeConfiguration;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeThresholdDatumProperty*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.Filtering.XRPokeLogic m_PokeLogic
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic* m_PokeLogic;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*) == 0x8);
    // private readonly Unity.XR.CoreUtils.Bindings.BindingsGroup m_BindingsGroup
    // Size: 0x8
    // Offset: 0x40
    ::Unity::XR::CoreUtils::Bindings::BindingsGroup* m_BindingsGroup;
    // Field size check
    static_assert(sizeof(::Unity::XR::CoreUtils::Bindings::BindingsGroup*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::XR::Interaction::Toolkit::Filtering::IXRSelectFilter
    operator ::UnityEngine::XR::Interaction::Toolkit::Filtering::IXRSelectFilter() noexcept {
      return *reinterpret_cast<::UnityEngine::XR::Interaction::Toolkit::Filtering::IXRSelectFilter*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::XR::Interaction::Toolkit::Filtering::IXRInteractionStrengthFilter
    operator ::UnityEngine::XR::Interaction::Toolkit::Filtering::IXRInteractionStrengthFilter() noexcept {
      return *reinterpret_cast<::UnityEngine::XR::Interaction::Toolkit::Filtering::IXRInteractionStrengthFilter*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::IPokeStateDataProvider
    operator ::UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::IPokeStateDataProvider() noexcept {
      return *reinterpret_cast<::UnityEngine::XR::Interaction::Toolkit::AffordanceSystem::State::IPokeStateDataProvider*>(this);
    }
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable m_Interactable
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*& dyn_m_Interactable();
    // Get instance field reference: private UnityEngine.Collider m_PokeCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_m_PokeCollider();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.Filtering.PokeThresholdDatumProperty m_PokeConfiguration
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeThresholdDatumProperty*& dyn_m_PokeConfiguration();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.Filtering.XRPokeLogic m_PokeLogic
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeLogic*& dyn_m_PokeLogic();
    // Get instance field reference: private readonly Unity.XR.CoreUtils.Bindings.BindingsGroup m_BindingsGroup
    [[deprecated("Use field access instead!")]] ::Unity::XR::CoreUtils::Bindings::BindingsGroup*& dyn_m_BindingsGroup();
    // public UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable get_pokeInteractable()
    // Offset: 0x542B6CC
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* get_pokeInteractable();
    // public System.Void set_pokeInteractable(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable value)
    // Offset: 0x542B6D4
    void set_pokeInteractable(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* value);
    // public UnityEngine.Collider get_pokeCollider()
    // Offset: 0x542B854
    ::UnityEngine::Collider* get_pokeCollider();
    // public System.Void set_pokeCollider(UnityEngine.Collider value)
    // Offset: 0x542B85C
    void set_pokeCollider(::UnityEngine::Collider* value);
    // public UnityEngine.XR.Interaction.Toolkit.Filtering.PokeThresholdDatumProperty get_pokeConfiguration()
    // Offset: 0x542B878
    ::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeThresholdDatumProperty* get_pokeConfiguration();
    // public System.Void set_pokeConfiguration(UnityEngine.XR.Interaction.Toolkit.Filtering.PokeThresholdDatumProperty value)
    // Offset: 0x542B880
    void set_pokeConfiguration(::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeThresholdDatumProperty* value);
    // public Unity.XR.CoreUtils.Bindings.Variables.IReadOnlyBindableVariable`1<UnityEngine.XR.Interaction.Toolkit.Filtering.PokeStateData> get_pokeStateData()
    // Offset: 0x542B89C
    ::Unity::XR::CoreUtils::Bindings::Variables::IReadOnlyBindableVariable_1<::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeStateData>* get_pokeStateData();
    // public System.Boolean get_canProcess()
    // Offset: 0x542B8B4
    bool get_canProcess();
    // protected System.Void Reset()
    // Offset: 0x542B8E4
    void Reset();
    // protected System.Void OnValidate()
    // Offset: 0x542B8E8
    void OnValidate();
    // protected System.Void Awake()
    // Offset: 0x542B8EC
    void Awake();
    // protected System.Void Start()
    // Offset: 0x542BC5C
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x542BF4C
    void OnDestroy();
    // protected System.Void OnDrawGizmosSelected()
    // Offset: 0x542C2A0
    void OnDrawGizmosSelected();
    // private System.Void SetupBindings()
    // Offset: 0x542BDE8
    void SetupBindings();
    // private System.Void ClearBindings()
    // Offset: 0x542C0DC
    void ClearBindings();
    // public System.Boolean Process(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor, UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractable interactable)
    // Offset: 0x542C2A4
    bool Process(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor* interactor, ::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractable* interactable);
    // public System.Single Process(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable, System.Single interactionStrength)
    // Offset: 0x542CCE0
    float Process(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor* interactor, ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* interactable, float interactionStrength);
    // private System.Void OnHoverEntered(UnityEngine.XR.Interaction.Toolkit.HoverEnterEventArgs args)
    // Offset: 0x542CE00
    void OnHoverEntered(::UnityEngine::XR::Interaction::Toolkit::HoverEnterEventArgs* args);
    // private System.Void OnHoverExited(UnityEngine.XR.Interaction.Toolkit.HoverExitEventArgs args)
    // Offset: 0x542D000
    void OnHoverExited(::UnityEngine::XR::Interaction::Toolkit::HoverExitEventArgs* args);
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable FindPokeInteractable()
    // Offset: 0x542BB34
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* FindPokeInteractable();
    // private UnityEngine.Collider FindPokeCollider()
    // Offset: 0x542BBC8
    ::UnityEngine::Collider* FindPokeCollider();
    // private System.Void Setup()
    // Offset: 0x542B6F0
    void Setup();
    // public System.Void .ctor()
    // Offset: 0x542D404
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRPokeFilter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRPokeFilter*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.Filtering.XRPokeFilter
  #pragma pack(pop)
  static check_size<sizeof(XRPokeFilter), 64 + sizeof(::Unity::XR::CoreUtils::Bindings::BindingsGroup*)> __UnityEngine_XR_Interaction_Toolkit_Filtering_XRPokeFilterSizeCheck;
  static_assert(sizeof(XRPokeFilter) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::get_pokeInteractable
// Il2CppName: get_pokeInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::get_pokeInteractable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "get_pokeInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::set_pokeInteractable
// Il2CppName: set_pokeInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::set_pokeInteractable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "set_pokeInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::get_pokeCollider
// Il2CppName: get_pokeCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::get_pokeCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "get_pokeCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::set_pokeCollider
// Il2CppName: set_pokeCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)(::UnityEngine::Collider*)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::set_pokeCollider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "set_pokeCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::get_pokeConfiguration
// Il2CppName: get_pokeConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeThresholdDatumProperty* (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::get_pokeConfiguration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "get_pokeConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::set_pokeConfiguration
// Il2CppName: set_pokeConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)(::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeThresholdDatumProperty*)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::set_pokeConfiguration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.Filtering", "PokeThresholdDatumProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "set_pokeConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::get_pokeStateData
// Il2CppName: get_pokeStateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::XR::CoreUtils::Bindings::Variables::IReadOnlyBindableVariable_1<::UnityEngine::XR::Interaction::Toolkit::Filtering::PokeStateData>* (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::get_pokeStateData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "get_pokeStateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::get_canProcess
// Il2CppName: get_canProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::get_canProcess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "get_canProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::SetupBindings
// Il2CppName: SetupBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::SetupBindings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "SetupBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::ClearBindings
// Il2CppName: ClearBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::ClearBindings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "ClearBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor*, ::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::Process)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRSelectInteractor")->byval_arg;
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRSelectInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*, ::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*, float)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::Process)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractor")->byval_arg;
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")->byval_arg;
    static auto* interactionStrength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, interactable, interactionStrength});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::OnHoverEntered
// Il2CppName: OnHoverEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)(::UnityEngine::XR::Interaction::Toolkit::HoverEnterEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::OnHoverEntered)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "HoverEnterEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "OnHoverEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::OnHoverExited
// Il2CppName: OnHoverExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)(::UnityEngine::XR::Interaction::Toolkit::HoverExitEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::OnHoverExited)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "HoverExitEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "OnHoverExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::FindPokeInteractable
// Il2CppName: FindPokeInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::FindPokeInteractable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "FindPokeInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::FindPokeCollider
// Il2CppName: FindPokeCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::FindPokeCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "FindPokeCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::*)()>(&UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Filtering::XRPokeFilter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
