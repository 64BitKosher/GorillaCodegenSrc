// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor
#include "UnityEngine/XR/Interaction/Toolkit/XRRayInteractor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRInteractableSnapVolume
  class XRInteractableSnapVolume;
  // Skipping declaration: GazeAssistanceCalculation because it is already included!
  // Forward declaring type: IXRInteractable
  class IXRInteractable;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRGazeInteractor
  class XRGazeInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*, "UnityEngine.XR.Interaction.Toolkit", "XRGazeInteractor");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x398
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class XRGazeInteractor : public ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GazeAssistanceCalculation
    struct GazeAssistanceCalculation;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor/GazeAssistanceCalculation
    // [TokenAttribute] Offset: FFFFFFFF
    struct GazeAssistanceCalculation/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GazeAssistanceCalculation
      constexpr GazeAssistanceCalculation(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor/GazeAssistanceCalculation FixedSize
      static constexpr const int FixedSize = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor/GazeAssistanceCalculation FixedSize
      static ::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GazeAssistanceCalculation _get_FixedSize();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor/GazeAssistanceCalculation FixedSize
      static void _set_FixedSize(::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GazeAssistanceCalculation value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor/GazeAssistanceCalculation ColliderSize
      static constexpr const int ColliderSize = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor/GazeAssistanceCalculation ColliderSize
      static ::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GazeAssistanceCalculation _get_ColliderSize();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor/GazeAssistanceCalculation ColliderSize
      static void _set_ColliderSize(::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GazeAssistanceCalculation value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor/GazeAssistanceCalculation
    #pragma pack(pop)
    static check_size<sizeof(XRGazeInteractor::GazeAssistanceCalculation), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_XRGazeInteractor_GazeAssistanceCalculationSizeCheck;
    static_assert(sizeof(XRGazeInteractor::GazeAssistanceCalculation) == 0x4);
    public:
    // private UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor/GazeAssistanceCalculation m_GazeAssistanceCalculation
    // Size: 0x4
    // Offset: 0x378
    ::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GazeAssistanceCalculation m_GazeAssistanceCalculation;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GazeAssistanceCalculation) == 0x4);
    // private System.Single m_GazeAssistanceColliderFixedSize
    // Size: 0x4
    // Offset: 0x37C
    float m_GazeAssistanceColliderFixedSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_GazeAssistanceColliderScale
    // Size: 0x4
    // Offset: 0x380
    float m_GazeAssistanceColliderScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_GazeAssistanceColliderScale and: m_GazeAssistanceSnapVolume
    char __padding2[0x4] = {};
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractableSnapVolume m_GazeAssistanceSnapVolume
    // Size: 0x8
    // Offset: 0x388
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume* m_GazeAssistanceSnapVolume;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*) == 0x8);
    // private System.Boolean m_GazeAssistanceDistanceScaling
    // Size: 0x1
    // Offset: 0x390
    bool m_GazeAssistanceDistanceScaling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ClampGazeAssistanceDistanceScaling
    // Size: 0x1
    // Offset: 0x391
    bool m_ClampGazeAssistanceDistanceScaling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ClampGazeAssistanceDistanceScaling and: m_GazeAssistanceDistanceScalingClampValue
    char __padding5[0x2] = {};
    // private System.Single m_GazeAssistanceDistanceScalingClampValue
    // Size: 0x4
    // Offset: 0x394
    float m_GazeAssistanceDistanceScalingClampValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor/GazeAssistanceCalculation m_GazeAssistanceCalculation
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GazeAssistanceCalculation& dyn_m_GazeAssistanceCalculation();
    // Get instance field reference: private System.Single m_GazeAssistanceColliderFixedSize
    [[deprecated("Use field access instead!")]] float& dyn_m_GazeAssistanceColliderFixedSize();
    // Get instance field reference: private System.Single m_GazeAssistanceColliderScale
    [[deprecated("Use field access instead!")]] float& dyn_m_GazeAssistanceColliderScale();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractableSnapVolume m_GazeAssistanceSnapVolume
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*& dyn_m_GazeAssistanceSnapVolume();
    // Get instance field reference: private System.Boolean m_GazeAssistanceDistanceScaling
    [[deprecated("Use field access instead!")]] bool& dyn_m_GazeAssistanceDistanceScaling();
    // Get instance field reference: private System.Boolean m_ClampGazeAssistanceDistanceScaling
    [[deprecated("Use field access instead!")]] bool& dyn_m_ClampGazeAssistanceDistanceScaling();
    // Get instance field reference: private System.Single m_GazeAssistanceDistanceScalingClampValue
    [[deprecated("Use field access instead!")]] float& dyn_m_GazeAssistanceDistanceScalingClampValue();
    // public UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor/GazeAssistanceCalculation get_gazeAssistanceCalculation()
    // Offset: 0x53EEBA4
    ::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GazeAssistanceCalculation get_gazeAssistanceCalculation();
    // public System.Void set_gazeAssistanceCalculation(UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor/GazeAssistanceCalculation value)
    // Offset: 0x53EEBAC
    void set_gazeAssistanceCalculation(::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GazeAssistanceCalculation value);
    // public System.Single get_gazeAssistanceColliderFixedSize()
    // Offset: 0x53EEBB4
    float get_gazeAssistanceColliderFixedSize();
    // public System.Void set_gazeAssistanceColliderFixedSize(System.Single value)
    // Offset: 0x53EEBBC
    void set_gazeAssistanceColliderFixedSize(float value);
    // public System.Single get_gazeAssistanceColliderScale()
    // Offset: 0x53EEBC4
    float get_gazeAssistanceColliderScale();
    // public System.Void set_gazeAssistanceColliderScale(System.Single value)
    // Offset: 0x53EEBCC
    void set_gazeAssistanceColliderScale(float value);
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractableSnapVolume get_gazeAssistanceSnapVolume()
    // Offset: 0x53EEBD4
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume* get_gazeAssistanceSnapVolume();
    // public System.Void set_gazeAssistanceSnapVolume(UnityEngine.XR.Interaction.Toolkit.XRInteractableSnapVolume value)
    // Offset: 0x53EEBDC
    void set_gazeAssistanceSnapVolume(::UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume* value);
    // public System.Boolean get_gazeAssistanceDistanceScaling()
    // Offset: 0x53EEBEC
    bool get_gazeAssistanceDistanceScaling();
    // public System.Void set_gazeAssistanceDistanceScaling(System.Boolean value)
    // Offset: 0x53EEBF4
    void set_gazeAssistanceDistanceScaling(bool value);
    // public System.Boolean get_clampGazeAssistanceDistanceScaling()
    // Offset: 0x53EEC00
    bool get_clampGazeAssistanceDistanceScaling();
    // public System.Void set_clampGazeAssistanceDistanceScaling(System.Boolean value)
    // Offset: 0x53EEC08
    void set_clampGazeAssistanceDistanceScaling(bool value);
    // public System.Single get_gazeAssistanceDistanceScalingClampValue()
    // Offset: 0x53EEC14
    float get_gazeAssistanceDistanceScalingClampValue();
    // public System.Void set_gazeAssistanceDistanceScalingClampValue(System.Single value)
    // Offset: 0x53EEC1C
    void set_gazeAssistanceDistanceScalingClampValue(float value);
    // private System.Void CreateGazeAssistanceSnapVolume()
    // Offset: 0x53EECF0
    void CreateGazeAssistanceSnapVolume();
    // protected System.Void UpdateSnapVolumeInteractable(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)
    // Offset: 0x53EF2B4
    void UpdateSnapVolumeInteractable(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* interactable);
    // private System.Single CalculateSnapColliderSize(UnityEngine.Collider interactableCollider)
    // Offset: 0x53EF9BC
    float CalculateSnapColliderSize(::UnityEngine::Collider* interactableCollider);
    // private System.Boolean CanInteract(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)
    // Offset: 0x53EF1D8
    bool CanInteract(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* interactable);
    // protected override System.Void Awake()
    // Offset: 0x53EEC24
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor
    // Base method: System.Void XRRayInteractor::Awake()
    void Awake();
    // public override System.Void PreprocessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    // Offset: 0x53EEF24
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor
    // Base method: System.Void XRRayInteractor::PreprocessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    void PreprocessInteractor(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // protected override System.Single GetHoverTimeToSelect(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)
    // Offset: 0x53EFA8C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor
    // Base method: System.Single XRRayInteractor::GetHoverTimeToSelect(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)
    float GetHoverTimeToSelect(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* interactable);
    // protected override System.Single GetTimeToAutoDeselect(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)
    // Offset: 0x53EFBB4
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor
    // Base method: System.Single XRRayInteractor::GetTimeToAutoDeselect(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)
    float GetTimeToAutoDeselect(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable* interactable);
    // public System.Void .ctor()
    // Offset: 0x53EFCE0
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor
    // Base method: System.Void XRRayInteractor::.ctor()
    // Base method: System.Void XRBaseControllerInteractor::.ctor()
    // Base method: System.Void XRBaseInteractor::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRGazeInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRGazeInteractor*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor
  #pragma pack(pop)
  static check_size<sizeof(XRGazeInteractor), 916 + sizeof(float)> __UnityEngine_XR_Interaction_Toolkit_XRGazeInteractorSizeCheck;
  static_assert(sizeof(XRGazeInteractor) == 0x398);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GazeAssistanceCalculation, "UnityEngine.XR.Interaction.Toolkit", "XRGazeInteractor/GazeAssistanceCalculation");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::get_gazeAssistanceCalculation
// Il2CppName: get_gazeAssistanceCalculation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GazeAssistanceCalculation (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::get_gazeAssistanceCalculation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "get_gazeAssistanceCalculation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::set_gazeAssistanceCalculation
// Il2CppName: set_gazeAssistanceCalculation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GazeAssistanceCalculation)>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::set_gazeAssistanceCalculation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRGazeInteractor/GazeAssistanceCalculation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "set_gazeAssistanceCalculation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::get_gazeAssistanceColliderFixedSize
// Il2CppName: get_gazeAssistanceColliderFixedSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::get_gazeAssistanceColliderFixedSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "get_gazeAssistanceColliderFixedSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::set_gazeAssistanceColliderFixedSize
// Il2CppName: set_gazeAssistanceColliderFixedSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::set_gazeAssistanceColliderFixedSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "set_gazeAssistanceColliderFixedSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::get_gazeAssistanceColliderScale
// Il2CppName: get_gazeAssistanceColliderScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::get_gazeAssistanceColliderScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "get_gazeAssistanceColliderScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::set_gazeAssistanceColliderScale
// Il2CppName: set_gazeAssistanceColliderScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::set_gazeAssistanceColliderScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "set_gazeAssistanceColliderScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::get_gazeAssistanceSnapVolume
// Il2CppName: get_gazeAssistanceSnapVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume* (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::get_gazeAssistanceSnapVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "get_gazeAssistanceSnapVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::set_gazeAssistanceSnapVolume
// Il2CppName: set_gazeAssistanceSnapVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractableSnapVolume*)>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::set_gazeAssistanceSnapVolume)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractableSnapVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "set_gazeAssistanceSnapVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::get_gazeAssistanceDistanceScaling
// Il2CppName: get_gazeAssistanceDistanceScaling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::get_gazeAssistanceDistanceScaling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "get_gazeAssistanceDistanceScaling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::set_gazeAssistanceDistanceScaling
// Il2CppName: set_gazeAssistanceDistanceScaling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::set_gazeAssistanceDistanceScaling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "set_gazeAssistanceDistanceScaling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::get_clampGazeAssistanceDistanceScaling
// Il2CppName: get_clampGazeAssistanceDistanceScaling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::get_clampGazeAssistanceDistanceScaling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "get_clampGazeAssistanceDistanceScaling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::set_clampGazeAssistanceDistanceScaling
// Il2CppName: set_clampGazeAssistanceDistanceScaling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::set_clampGazeAssistanceDistanceScaling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "set_clampGazeAssistanceDistanceScaling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::get_gazeAssistanceDistanceScalingClampValue
// Il2CppName: get_gazeAssistanceDistanceScalingClampValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::get_gazeAssistanceDistanceScalingClampValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "get_gazeAssistanceDistanceScalingClampValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::set_gazeAssistanceDistanceScalingClampValue
// Il2CppName: set_gazeAssistanceDistanceScalingClampValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::set_gazeAssistanceDistanceScalingClampValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "set_gazeAssistanceDistanceScalingClampValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::CreateGazeAssistanceSnapVolume
// Il2CppName: CreateGazeAssistanceSnapVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::CreateGazeAssistanceSnapVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "CreateGazeAssistanceSnapVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::UpdateSnapVolumeInteractable
// Il2CppName: UpdateSnapVolumeInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::UpdateSnapVolumeInteractable)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "UpdateSnapVolumeInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::CalculateSnapColliderSize
// Il2CppName: CalculateSnapColliderSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)(::UnityEngine::Collider*)>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::CalculateSnapColliderSize)> {
  static const MethodInfo* get() {
    static auto* interactableCollider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "CalculateSnapColliderSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactableCollider});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::CanInteract
// Il2CppName: CanInteract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::CanInteract)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "CanInteract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::PreprocessInteractor
// Il2CppName: PreprocessInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::PreprocessInteractor)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "PreprocessInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GetHoverTimeToSelect
// Il2CppName: GetHoverTimeToSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GetHoverTimeToSelect)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "GetHoverTimeToSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GetTimeToAutoDeselect
// Il2CppName: GetTimeToAutoDeselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::GetTimeToAutoDeselect)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor*), "GetTimeToAutoDeselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGazeInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
