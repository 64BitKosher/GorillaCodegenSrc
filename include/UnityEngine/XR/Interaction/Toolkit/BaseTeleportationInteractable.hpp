// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
#include "UnityEngine/XR/Interaction/Toolkit/XRBaseInteractable.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.IXRReticleDirectionProvider
#include "UnityEngine/XR/Interaction/Toolkit/IXRReticleDirectionProvider.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.MatchOrientation
#include "UnityEngine/XR/Interaction/Toolkit/MatchOrientation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: TeleportingEvent
  class TeleportingEvent;
  // Forward declaring type: TeleportationProvider
  class TeleportationProvider;
  // Forward declaring type: TeleportingEventArgs
  class TeleportingEventArgs;
  // Forward declaring type: IXRInteractor
  class IXRInteractor;
  // Skipping declaration: TeleportTrigger because it is already included!
  // Forward declaring type: TeleportRequest
  struct TeleportRequest;
  // Forward declaring type: XRBaseInteractor
  class XRBaseInteractor;
  // Forward declaring type: SelectEnterEventArgs
  class SelectEnterEventArgs;
  // Forward declaring type: SelectExitEventArgs
  class SelectExitEventArgs;
  // Forward declaring type: ActivateEventArgs
  class ActivateEventArgs;
  // Forward declaring type: DeactivateEventArgs
  class DeactivateEventArgs;
  // Forward declaring type: IXRSelectInteractor
  class IXRSelectInteractor;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling
namespace UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling {
  // Forward declaring type: LinkedPool`1<T>
  template<typename T>
  class LinkedPool_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RaycastHit
  struct RaycastHit;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: BaseTeleportationInteractable
  class BaseTeleportationInteractable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*, "UnityEngine.XR.Interaction.Toolkit", "BaseTeleportationInteractable");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x1D8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseTeleportationInteractable : public ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable/*, public ::UnityEngine::XR::Interaction::Toolkit::IXRReticleDirectionProvider*/ {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger
    struct TeleportTrigger;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger
    // [TokenAttribute] Offset: FFFFFFFF
    struct TeleportTrigger/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TeleportTrigger
      constexpr TeleportTrigger(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnSelectExited
      static constexpr const int OnSelectExited = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnSelectExited
      static ::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger _get_OnSelectExited();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnSelectExited
      static void _set_OnSelectExited(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnSelectEntered
      static constexpr const int OnSelectEntered = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnSelectEntered
      static ::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger _get_OnSelectEntered();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnSelectEntered
      static void _set_OnSelectEntered(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnActivated
      static constexpr const int OnActivated = 2;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnActivated
      static ::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger _get_OnActivated();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnActivated
      static void _set_OnActivated(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnDeactivated
      static constexpr const int OnDeactivated = 3;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnDeactivated
      static ::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger _get_OnDeactivated();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnDeactivated
      static void _set_OnDeactivated(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnSelectExit
      static constexpr const int OnSelectExit = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnSelectExit
      static ::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger _get_OnSelectExit();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnSelectExit
      static void _set_OnSelectExit(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnSelectEnter
      static constexpr const int OnSelectEnter = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnSelectEnter
      static ::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger _get_OnSelectEnter();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnSelectEnter
      static void _set_OnSelectEnter(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnActivate
      static constexpr const int OnActivate = 2;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnActivate
      static ::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger _get_OnActivate();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnActivate
      static void _set_OnActivate(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnDeactivate
      static constexpr const int OnDeactivate = 3;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnDeactivate
      static ::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger _get_OnDeactivate();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger OnDeactivate
      static void _set_OnDeactivate(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger
    #pragma pack(pop)
    static check_size<sizeof(BaseTeleportationInteractable::TeleportTrigger), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_BaseTeleportationInteractable_TeleportTriggerSizeCheck;
    static_assert(sizeof(BaseTeleportationInteractable::TeleportTrigger) == 0x4);
    public:
    // private UnityEngine.XR.Interaction.Toolkit.TeleportationProvider m_TeleportationProvider
    // Size: 0x8
    // Offset: 0x1A0
    ::UnityEngine::XR::Interaction::Toolkit::TeleportationProvider* m_TeleportationProvider;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::TeleportationProvider*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.MatchOrientation m_MatchOrientation
    // Size: 0x4
    // Offset: 0x1A8
    ::UnityEngine::XR::Interaction::Toolkit::MatchOrientation m_MatchOrientation;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::MatchOrientation) == 0x4);
    // private System.Boolean m_MatchDirectionalInput
    // Size: 0x1
    // Offset: 0x1AC
    bool m_MatchDirectionalInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_MatchDirectionalInput and: m_TeleportTrigger
    char __padding2[0x3] = {};
    // private UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger m_TeleportTrigger
    // Size: 0x4
    // Offset: 0x1B0
    ::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger m_TeleportTrigger;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger) == 0x4);
    // private System.Boolean m_FilterSelectionByHitNormal
    // Size: 0x1
    // Offset: 0x1B4
    bool m_FilterSelectionByHitNormal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_FilterSelectionByHitNormal and: m_UpNormalToleranceDegrees
    char __padding4[0x3] = {};
    // private System.Single m_UpNormalToleranceDegrees
    // Size: 0x4
    // Offset: 0x1B8
    float m_UpNormalToleranceDegrees;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_UpNormalToleranceDegrees and: m_Teleporting
    char __padding5[0x4] = {};
    // private UnityEngine.XR.Interaction.Toolkit.TeleportingEvent m_Teleporting
    // Size: 0x8
    // Offset: 0x1C0
    ::UnityEngine::XR::Interaction::Toolkit::TeleportingEvent* m_Teleporting;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::TeleportingEvent*) == 0x8);
    // private readonly UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1<UnityEngine.XR.Interaction.Toolkit.TeleportingEventArgs> m_TeleportingEventArgs
    // Size: 0x8
    // Offset: 0x1C8
    ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<::UnityEngine::XR::Interaction::Toolkit::TeleportingEventArgs*>* m_TeleportingEventArgs;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<::UnityEngine::XR::Interaction::Toolkit::TeleportingEventArgs*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<UnityEngine.XR.Interaction.Toolkit.IXRInteractor,UnityEngine.Vector3> m_TeleportForwardPerInteractor
    // Size: 0x8
    // Offset: 0x1D0
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*, ::UnityEngine::Vector3>* m_TeleportForwardPerInteractor;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*, ::UnityEngine::Vector3>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::XR::Interaction::Toolkit::IXRReticleDirectionProvider
    operator ::UnityEngine::XR::Interaction::Toolkit::IXRReticleDirectionProvider() noexcept {
      return *reinterpret_cast<::UnityEngine::XR::Interaction::Toolkit::IXRReticleDirectionProvider*>(this);
    }
    // static field const value: static private System.Single k_DefaultNormalToleranceDegrees
    static constexpr const float k_DefaultNormalToleranceDegrees = 30;
    // Get static field: static private System.Single k_DefaultNormalToleranceDegrees
    static float _get_k_DefaultNormalToleranceDegrees();
    // Set static field: static private System.Single k_DefaultNormalToleranceDegrees
    static void _set_k_DefaultNormalToleranceDegrees(float value);
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.TeleportationProvider m_TeleportationProvider
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::TeleportationProvider*& dyn_m_TeleportationProvider();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.MatchOrientation m_MatchOrientation
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::MatchOrientation& dyn_m_MatchOrientation();
    // Get instance field reference: private System.Boolean m_MatchDirectionalInput
    [[deprecated("Use field access instead!")]] bool& dyn_m_MatchDirectionalInput();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger m_TeleportTrigger
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger& dyn_m_TeleportTrigger();
    // Get instance field reference: private System.Boolean m_FilterSelectionByHitNormal
    [[deprecated("Use field access instead!")]] bool& dyn_m_FilterSelectionByHitNormal();
    // Get instance field reference: private System.Single m_UpNormalToleranceDegrees
    [[deprecated("Use field access instead!")]] float& dyn_m_UpNormalToleranceDegrees();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.TeleportingEvent m_Teleporting
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::TeleportingEvent*& dyn_m_Teleporting();
    // Get instance field reference: private readonly UnityEngine.XR.Interaction.Toolkit.Utilities.Pooling.LinkedPool`1<UnityEngine.XR.Interaction.Toolkit.TeleportingEventArgs> m_TeleportingEventArgs
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Utilities::Pooling::LinkedPool_1<::UnityEngine::XR::Interaction::Toolkit::TeleportingEventArgs*>*& dyn_m_TeleportingEventArgs();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.XR.Interaction.Toolkit.IXRInteractor,UnityEngine.Vector3> m_TeleportForwardPerInteractor
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*, ::UnityEngine::Vector3>*& dyn_m_TeleportForwardPerInteractor();
    // public UnityEngine.XR.Interaction.Toolkit.TeleportationProvider get_teleportationProvider()
    // Offset: 0x540EE6C
    ::UnityEngine::XR::Interaction::Toolkit::TeleportationProvider* get_teleportationProvider();
    // public System.Void set_teleportationProvider(UnityEngine.XR.Interaction.Toolkit.TeleportationProvider value)
    // Offset: 0x540EE74
    void set_teleportationProvider(::UnityEngine::XR::Interaction::Toolkit::TeleportationProvider* value);
    // public UnityEngine.XR.Interaction.Toolkit.MatchOrientation get_matchOrientation()
    // Offset: 0x540EE84
    ::UnityEngine::XR::Interaction::Toolkit::MatchOrientation get_matchOrientation();
    // public System.Void set_matchOrientation(UnityEngine.XR.Interaction.Toolkit.MatchOrientation value)
    // Offset: 0x540EE8C
    void set_matchOrientation(::UnityEngine::XR::Interaction::Toolkit::MatchOrientation value);
    // public System.Boolean get_matchDirectionalInput()
    // Offset: 0x540EE94
    bool get_matchDirectionalInput();
    // public System.Void set_matchDirectionalInput(System.Boolean value)
    // Offset: 0x540EE9C
    void set_matchDirectionalInput(bool value);
    // public UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger get_teleportTrigger()
    // Offset: 0x540EEA8
    ::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger get_teleportTrigger();
    // public System.Void set_teleportTrigger(UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable/TeleportTrigger value)
    // Offset: 0x540EEB0
    void set_teleportTrigger(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger value);
    // public System.Boolean get_filterSelectionByHitNormal()
    // Offset: 0x540EEB8
    bool get_filterSelectionByHitNormal();
    // public System.Void set_filterSelectionByHitNormal(System.Boolean value)
    // Offset: 0x540EEC0
    void set_filterSelectionByHitNormal(bool value);
    // public System.Single get_upNormalToleranceDegrees()
    // Offset: 0x540EECC
    float get_upNormalToleranceDegrees();
    // public System.Void set_upNormalToleranceDegrees(System.Single value)
    // Offset: 0x540EED4
    void set_upNormalToleranceDegrees(float value);
    // public UnityEngine.XR.Interaction.Toolkit.TeleportingEvent get_teleporting()
    // Offset: 0x540EEDC
    ::UnityEngine::XR::Interaction::Toolkit::TeleportingEvent* get_teleporting();
    // public System.Void set_teleporting(UnityEngine.XR.Interaction.Toolkit.TeleportingEvent value)
    // Offset: 0x540EEE4
    void set_teleporting(::UnityEngine::XR::Interaction::Toolkit::TeleportingEvent* value);
    // protected System.Boolean GenerateTeleportRequest(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, UnityEngine.RaycastHit raycastHit, ref UnityEngine.XR.Interaction.Toolkit.TeleportRequest teleportRequest)
    // Offset: 0x540EFBC
    bool GenerateTeleportRequest(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor* interactor, ::UnityEngine::RaycastHit raycastHit, ByRef<::UnityEngine::XR::Interaction::Toolkit::TeleportRequest> teleportRequest);
    // private System.Void SendTeleportRequest(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor)
    // Offset: 0x540EFC4
    void SendTeleportRequest(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor* interactor);
    // private System.Void UpdateTeleportRequestRotation(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, ref UnityEngine.XR.Interaction.Toolkit.TeleportRequest teleportRequest)
    // Offset: 0x540F4E4
    void UpdateTeleportRequestRotation(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor* interactor, ByRef<::UnityEngine::XR::Interaction::Toolkit::TeleportRequest> teleportRequest);
    // public System.Void GetReticleDirection(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, UnityEngine.Vector3 hitNormal, out UnityEngine.Vector3 reticleUp, out System.Nullable`1<UnityEngine.Vector3> optionalReticleForward)
    // Offset: 0x540FF80
    void GetReticleDirection(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor* interactor, ::UnityEngine::Vector3 hitNormal, ByRef<::UnityEngine::Vector3> reticleUp, ByRef<::System::Nullable_1<::UnityEngine::Vector3>> optionalReticleForward);
    // protected System.Boolean GenerateTeleportRequest(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor, UnityEngine.RaycastHit raycastHit, ref UnityEngine.XR.Interaction.Toolkit.TeleportRequest teleportRequest)
    // Offset: 0x5410120
    bool GenerateTeleportRequest(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor, ::UnityEngine::RaycastHit raycastHit, ByRef<::UnityEngine::XR::Interaction::Toolkit::TeleportRequest> teleportRequest);
    // protected override System.Void Awake()
    // Offset: 0x540EEF4
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::Awake()
    void Awake();
    // protected override System.Void Reset()
    // Offset: 0x540EFB0
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::Reset()
    void Reset();
    // public override System.Void ProcessInteractable(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    // Offset: 0x540F620
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::ProcessInteractable(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)
    void ProcessInteractable(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // protected override System.Void OnSelectEntered(UnityEngine.XR.Interaction.Toolkit.SelectEnterEventArgs args)
    // Offset: 0x540FBAC
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::OnSelectEntered(UnityEngine.XR.Interaction.Toolkit.SelectEnterEventArgs args)
    void OnSelectEntered(::UnityEngine::XR::Interaction::Toolkit::SelectEnterEventArgs* args);
    // protected override System.Void OnSelectExited(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)
    // Offset: 0x540FC00
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::OnSelectExited(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)
    void OnSelectExited(::UnityEngine::XR::Interaction::Toolkit::SelectExitEventArgs* args);
    // protected override System.Void OnActivated(UnityEngine.XR.Interaction.Toolkit.ActivateEventArgs args)
    // Offset: 0x540FC58
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::OnActivated(UnityEngine.XR.Interaction.Toolkit.ActivateEventArgs args)
    void OnActivated(::UnityEngine::XR::Interaction::Toolkit::ActivateEventArgs* args);
    // protected override System.Void OnDeactivated(UnityEngine.XR.Interaction.Toolkit.DeactivateEventArgs args)
    // Offset: 0x540FCAC
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::OnDeactivated(UnityEngine.XR.Interaction.Toolkit.DeactivateEventArgs args)
    void OnDeactivated(::UnityEngine::XR::Interaction::Toolkit::DeactivateEventArgs* args);
    // public override System.Boolean IsSelectableBy(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor)
    // Offset: 0x540FD00
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Boolean XRBaseInteractable::IsSelectableBy(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor)
    bool IsSelectableBy(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor* interactor);
    // protected System.Void .ctor()
    // Offset: 0x541016C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseTeleportationInteractable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseTeleportationInteractable*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable
  #pragma pack(pop)
  static check_size<sizeof(BaseTeleportationInteractable), 464 + sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*, ::UnityEngine::Vector3>*)> __UnityEngine_XR_Interaction_Toolkit_BaseTeleportationInteractableSizeCheck;
  static_assert(sizeof(BaseTeleportationInteractable) == 0x1D8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger, "UnityEngine.XR.Interaction.Toolkit", "BaseTeleportationInteractable/TeleportTrigger");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::get_teleportationProvider
// Il2CppName: get_teleportationProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::TeleportationProvider* (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::get_teleportationProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "get_teleportationProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::set_teleportationProvider
// Il2CppName: set_teleportationProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::TeleportationProvider*)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::set_teleportationProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "TeleportationProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "set_teleportationProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::get_matchOrientation
// Il2CppName: get_matchOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::MatchOrientation (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::get_matchOrientation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "get_matchOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::set_matchOrientation
// Il2CppName: set_matchOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::MatchOrientation)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::set_matchOrientation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "MatchOrientation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "set_matchOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::get_matchDirectionalInput
// Il2CppName: get_matchDirectionalInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::get_matchDirectionalInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "get_matchDirectionalInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::set_matchDirectionalInput
// Il2CppName: set_matchDirectionalInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::set_matchDirectionalInput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "set_matchDirectionalInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::get_teleportTrigger
// Il2CppName: get_teleportTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::get_teleportTrigger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "get_teleportTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::set_teleportTrigger
// Il2CppName: set_teleportTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::TeleportTrigger)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::set_teleportTrigger)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "BaseTeleportationInteractable/TeleportTrigger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "set_teleportTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::get_filterSelectionByHitNormal
// Il2CppName: get_filterSelectionByHitNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::get_filterSelectionByHitNormal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "get_filterSelectionByHitNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::set_filterSelectionByHitNormal
// Il2CppName: set_filterSelectionByHitNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::set_filterSelectionByHitNormal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "set_filterSelectionByHitNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::get_upNormalToleranceDegrees
// Il2CppName: get_upNormalToleranceDegrees
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::get_upNormalToleranceDegrees)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "get_upNormalToleranceDegrees", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::set_upNormalToleranceDegrees
// Il2CppName: set_upNormalToleranceDegrees
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::set_upNormalToleranceDegrees)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "set_upNormalToleranceDegrees", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::get_teleporting
// Il2CppName: get_teleporting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::TeleportingEvent* (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::get_teleporting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "get_teleporting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::set_teleporting
// Il2CppName: set_teleporting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::TeleportingEvent*)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::set_teleporting)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "TeleportingEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "set_teleporting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::GenerateTeleportRequest
// Il2CppName: GenerateTeleportRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*, ::UnityEngine::RaycastHit, ByRef<::UnityEngine::XR::Interaction::Toolkit::TeleportRequest>)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::GenerateTeleportRequest)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractor")->byval_arg;
    static auto* raycastHit = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    static auto* teleportRequest = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "TeleportRequest")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "GenerateTeleportRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, raycastHit, teleportRequest});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::SendTeleportRequest
// Il2CppName: SendTeleportRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::SendTeleportRequest)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "SendTeleportRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::UpdateTeleportRequestRotation
// Il2CppName: UpdateTeleportRequestRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*, ByRef<::UnityEngine::XR::Interaction::Toolkit::TeleportRequest>)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::UpdateTeleportRequestRotation)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractor")->byval_arg;
    static auto* teleportRequest = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "TeleportRequest")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "UpdateTeleportRequestRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, teleportRequest});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::GetReticleDirection
// Il2CppName: GetReticleDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRInteractor*, ::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, ByRef<::System::Nullable_1<::UnityEngine::Vector3>>)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::GetReticleDirection)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRInteractor")->byval_arg;
    static auto* hitNormal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* reticleUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* optionalReticleForward = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "GetReticleDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, hitNormal, reticleUp, optionalReticleForward});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::GenerateTeleportRequest
// Il2CppName: GenerateTeleportRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*, ::UnityEngine::RaycastHit, ByRef<::UnityEngine::XR::Interaction::Toolkit::TeleportRequest>)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::GenerateTeleportRequest)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    static auto* raycastHit = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    static auto* teleportRequest = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "TeleportRequest")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "GenerateTeleportRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, raycastHit, teleportRequest});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::ProcessInteractable
// Il2CppName: ProcessInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::ProcessInteractable)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "ProcessInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::OnSelectEntered
// Il2CppName: OnSelectEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::SelectEnterEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::OnSelectEntered)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "SelectEnterEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "OnSelectEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::OnSelectExited
// Il2CppName: OnSelectExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::SelectExitEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::OnSelectExited)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "SelectExitEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "OnSelectExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::OnActivated
// Il2CppName: OnActivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::ActivateEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::OnActivated)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "ActivateEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "OnActivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::OnDeactivated
// Il2CppName: OnDeactivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::DeactivateEventArgs*)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::OnDeactivated)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "DeactivateEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "OnDeactivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::IsSelectableBy
// Il2CppName: IsSelectableBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::IXRSelectInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::IsSelectableBy)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "IXRSelectInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable*), "IsSelectableBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::BaseTeleportationInteractable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
