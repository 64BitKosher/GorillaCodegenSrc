// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.ConstrainedMoveProvider
#include "UnityEngine/XR/Interaction/Toolkit/ConstrainedMoveProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: GrabMoveProvider
  class GrabMoveProvider;
  // Forward declaring type: LocomotionSystem
  class LocomotionSystem;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: TwoHandedGrabMoveProvider
  class TwoHandedGrabMoveProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*, "UnityEngine.XR.Interaction.Toolkit", "TwoHandedGrabMoveProvider");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0xC0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.TwoHandedGrabMoveProvider
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: FFFFFFFF
  class TwoHandedGrabMoveProvider : public ::UnityEngine::XR::Interaction::Toolkit::ConstrainedMoveProvider {
    public:
    public:
    // private UnityEngine.XR.Interaction.Toolkit.GrabMoveProvider m_LeftGrabMoveProvider
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::XR::Interaction::Toolkit::GrabMoveProvider* m_LeftGrabMoveProvider;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::GrabMoveProvider*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.GrabMoveProvider m_RightGrabMoveProvider
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::XR::Interaction::Toolkit::GrabMoveProvider* m_RightGrabMoveProvider;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::GrabMoveProvider*) == 0x8);
    // private System.Boolean m_OverrideSharedSettingsOnInit
    // Size: 0x1
    // Offset: 0x78
    bool m_OverrideSharedSettingsOnInit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_OverrideSharedSettingsOnInit and: m_MoveFactor
    char __padding2[0x3] = {};
    // private System.Single m_MoveFactor
    // Size: 0x4
    // Offset: 0x7C
    float m_MoveFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_RequireTwoHandsForTranslation
    // Size: 0x1
    // Offset: 0x80
    bool m_RequireTwoHandsForTranslation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_EnableRotation
    // Size: 0x1
    // Offset: 0x81
    bool m_EnableRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_EnableScaling
    // Size: 0x1
    // Offset: 0x82
    bool m_EnableScaling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_EnableScaling and: m_MinimumScale
    char __padding6[0x1] = {};
    // private System.Single m_MinimumScale
    // Size: 0x4
    // Offset: 0x84
    float m_MinimumScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MaximumScale
    // Size: 0x4
    // Offset: 0x88
    float m_MaximumScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_IsMoving
    // Size: 0x1
    // Offset: 0x8C
    bool m_IsMoving;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_IsMoving and: m_PreviousMidpointBetweenControllers
    char __padding9[0x3] = {};
    // private UnityEngine.Vector3 m_PreviousMidpointBetweenControllers
    // Size: 0xC
    // Offset: 0x90
    ::UnityEngine::Vector3 m_PreviousMidpointBetweenControllers;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_InitialOriginYaw
    // Size: 0x4
    // Offset: 0x9C
    float m_InitialOriginYaw;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 m_InitialLeftToRightDirection
    // Size: 0xC
    // Offset: 0xA0
    ::UnityEngine::Vector3 m_InitialLeftToRightDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_InitialLeftToRightOrthogonal
    // Size: 0xC
    // Offset: 0xAC
    ::UnityEngine::Vector3 m_InitialLeftToRightOrthogonal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_InitialOriginScale
    // Size: 0x4
    // Offset: 0xB8
    float m_InitialOriginScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_InitialDistanceBetweenHands
    // Size: 0x4
    // Offset: 0xBC
    float m_InitialDistanceBetweenHands;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.GrabMoveProvider m_LeftGrabMoveProvider
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::GrabMoveProvider*& dyn_m_LeftGrabMoveProvider();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.GrabMoveProvider m_RightGrabMoveProvider
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::GrabMoveProvider*& dyn_m_RightGrabMoveProvider();
    // Get instance field reference: private System.Boolean m_OverrideSharedSettingsOnInit
    [[deprecated("Use field access instead!")]] bool& dyn_m_OverrideSharedSettingsOnInit();
    // Get instance field reference: private System.Single m_MoveFactor
    [[deprecated("Use field access instead!")]] float& dyn_m_MoveFactor();
    // Get instance field reference: private System.Boolean m_RequireTwoHandsForTranslation
    [[deprecated("Use field access instead!")]] bool& dyn_m_RequireTwoHandsForTranslation();
    // Get instance field reference: private System.Boolean m_EnableRotation
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableRotation();
    // Get instance field reference: private System.Boolean m_EnableScaling
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableScaling();
    // Get instance field reference: private System.Single m_MinimumScale
    [[deprecated("Use field access instead!")]] float& dyn_m_MinimumScale();
    // Get instance field reference: private System.Single m_MaximumScale
    [[deprecated("Use field access instead!")]] float& dyn_m_MaximumScale();
    // Get instance field reference: private System.Boolean m_IsMoving
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsMoving();
    // Get instance field reference: private UnityEngine.Vector3 m_PreviousMidpointBetweenControllers
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_PreviousMidpointBetweenControllers();
    // Get instance field reference: private System.Single m_InitialOriginYaw
    [[deprecated("Use field access instead!")]] float& dyn_m_InitialOriginYaw();
    // Get instance field reference: private UnityEngine.Vector3 m_InitialLeftToRightDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_InitialLeftToRightDirection();
    // Get instance field reference: private UnityEngine.Vector3 m_InitialLeftToRightOrthogonal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_InitialLeftToRightOrthogonal();
    // Get instance field reference: private System.Single m_InitialOriginScale
    [[deprecated("Use field access instead!")]] float& dyn_m_InitialOriginScale();
    // Get instance field reference: private System.Single m_InitialDistanceBetweenHands
    [[deprecated("Use field access instead!")]] float& dyn_m_InitialDistanceBetweenHands();
    // public UnityEngine.XR.Interaction.Toolkit.GrabMoveProvider get_leftGrabMoveProvider()
    // Offset: 0x540D0E8
    ::UnityEngine::XR::Interaction::Toolkit::GrabMoveProvider* get_leftGrabMoveProvider();
    // public System.Void set_leftGrabMoveProvider(UnityEngine.XR.Interaction.Toolkit.GrabMoveProvider value)
    // Offset: 0x540D0F0
    void set_leftGrabMoveProvider(::UnityEngine::XR::Interaction::Toolkit::GrabMoveProvider* value);
    // public UnityEngine.XR.Interaction.Toolkit.GrabMoveProvider get_rightGrabMoveProvider()
    // Offset: 0x540D0F8
    ::UnityEngine::XR::Interaction::Toolkit::GrabMoveProvider* get_rightGrabMoveProvider();
    // public System.Void set_rightGrabMoveProvider(UnityEngine.XR.Interaction.Toolkit.GrabMoveProvider value)
    // Offset: 0x540D100
    void set_rightGrabMoveProvider(::UnityEngine::XR::Interaction::Toolkit::GrabMoveProvider* value);
    // public System.Boolean get_overrideSharedSettingsOnInit()
    // Offset: 0x540D108
    bool get_overrideSharedSettingsOnInit();
    // public System.Void set_overrideSharedSettingsOnInit(System.Boolean value)
    // Offset: 0x540D110
    void set_overrideSharedSettingsOnInit(bool value);
    // public System.Single get_moveFactor()
    // Offset: 0x540D11C
    float get_moveFactor();
    // public System.Void set_moveFactor(System.Single value)
    // Offset: 0x540D124
    void set_moveFactor(float value);
    // public System.Boolean get_requireTwoHandsForTranslation()
    // Offset: 0x540D12C
    bool get_requireTwoHandsForTranslation();
    // public System.Void set_requireTwoHandsForTranslation(System.Boolean value)
    // Offset: 0x540D134
    void set_requireTwoHandsForTranslation(bool value);
    // public System.Boolean get_enableRotation()
    // Offset: 0x540D140
    bool get_enableRotation();
    // public System.Void set_enableRotation(System.Boolean value)
    // Offset: 0x540D148
    void set_enableRotation(bool value);
    // public System.Boolean get_enableScaling()
    // Offset: 0x540D154
    bool get_enableScaling();
    // public System.Void set_enableScaling(System.Boolean value)
    // Offset: 0x540D15C
    void set_enableScaling(bool value);
    // public System.Single get_minimumScale()
    // Offset: 0x540D168
    float get_minimumScale();
    // public System.Void set_minimumScale(System.Single value)
    // Offset: 0x540D170
    void set_minimumScale(float value);
    // public System.Single get_maximumScale()
    // Offset: 0x540D178
    float get_maximumScale();
    // public System.Void set_maximumScale(System.Single value)
    // Offset: 0x540D180
    void set_maximumScale(float value);
    // protected System.Void OnEnable()
    // Offset: 0x540D188
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x540D388
    void OnDisable();
    // private System.Void OnBeginLocomotion(UnityEngine.XR.Interaction.Toolkit.LocomotionSystem otherSystem)
    // Offset: 0x540D7CC
    void OnBeginLocomotion(::UnityEngine::XR::Interaction::Toolkit::LocomotionSystem* otherSystem);
    // protected override UnityEngine.Vector3 ComputeDesiredMove(out System.Boolean attemptingMove)
    // Offset: 0x540D488
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.ConstrainedMoveProvider
    // Base method: UnityEngine.Vector3 ConstrainedMoveProvider::ComputeDesiredMove(out System.Boolean attemptingMove)
    ::UnityEngine::Vector3 ComputeDesiredMove(ByRef<bool> attemptingMove);
    // public System.Void .ctor()
    // Offset: 0x540DB20
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.ConstrainedMoveProvider
    // Base method: System.Void ConstrainedMoveProvider::.ctor()
    // Base method: System.Void LocomotionProvider::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TwoHandedGrabMoveProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TwoHandedGrabMoveProvider*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.TwoHandedGrabMoveProvider
  #pragma pack(pop)
  static check_size<sizeof(TwoHandedGrabMoveProvider), 188 + sizeof(float)> __UnityEngine_XR_Interaction_Toolkit_TwoHandedGrabMoveProviderSizeCheck;
  static_assert(sizeof(TwoHandedGrabMoveProvider) == 0xC0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_leftGrabMoveProvider
// Il2CppName: get_leftGrabMoveProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::GrabMoveProvider* (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_leftGrabMoveProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "get_leftGrabMoveProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_leftGrabMoveProvider
// Il2CppName: set_leftGrabMoveProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)(::UnityEngine::XR::Interaction::Toolkit::GrabMoveProvider*)>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_leftGrabMoveProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "GrabMoveProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "set_leftGrabMoveProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_rightGrabMoveProvider
// Il2CppName: get_rightGrabMoveProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::GrabMoveProvider* (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_rightGrabMoveProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "get_rightGrabMoveProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_rightGrabMoveProvider
// Il2CppName: set_rightGrabMoveProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)(::UnityEngine::XR::Interaction::Toolkit::GrabMoveProvider*)>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_rightGrabMoveProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "GrabMoveProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "set_rightGrabMoveProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_overrideSharedSettingsOnInit
// Il2CppName: get_overrideSharedSettingsOnInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_overrideSharedSettingsOnInit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "get_overrideSharedSettingsOnInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_overrideSharedSettingsOnInit
// Il2CppName: set_overrideSharedSettingsOnInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_overrideSharedSettingsOnInit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "set_overrideSharedSettingsOnInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_moveFactor
// Il2CppName: get_moveFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_moveFactor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "get_moveFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_moveFactor
// Il2CppName: set_moveFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_moveFactor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "set_moveFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_requireTwoHandsForTranslation
// Il2CppName: get_requireTwoHandsForTranslation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_requireTwoHandsForTranslation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "get_requireTwoHandsForTranslation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_requireTwoHandsForTranslation
// Il2CppName: set_requireTwoHandsForTranslation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_requireTwoHandsForTranslation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "set_requireTwoHandsForTranslation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_enableRotation
// Il2CppName: get_enableRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_enableRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "get_enableRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_enableRotation
// Il2CppName: set_enableRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_enableRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "set_enableRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_enableScaling
// Il2CppName: get_enableScaling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_enableScaling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "get_enableScaling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_enableScaling
// Il2CppName: set_enableScaling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_enableScaling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "set_enableScaling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_minimumScale
// Il2CppName: get_minimumScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_minimumScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "get_minimumScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_minimumScale
// Il2CppName: set_minimumScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_minimumScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "set_minimumScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_maximumScale
// Il2CppName: get_maximumScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::get_maximumScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "get_maximumScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_maximumScale
// Il2CppName: set_maximumScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::set_maximumScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "set_maximumScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::OnBeginLocomotion
// Il2CppName: OnBeginLocomotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)(::UnityEngine::XR::Interaction::Toolkit::LocomotionSystem*)>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::OnBeginLocomotion)> {
  static const MethodInfo* get() {
    static auto* otherSystem = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "LocomotionSystem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "OnBeginLocomotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherSystem});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::ComputeDesiredMove
// Il2CppName: ComputeDesiredMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::*)(ByRef<bool>)>(&UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::ComputeDesiredMove)> {
  static const MethodInfo* get() {
    static auto* attemptingMove = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider*), "ComputeDesiredMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attemptingMove});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TwoHandedGrabMoveProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
