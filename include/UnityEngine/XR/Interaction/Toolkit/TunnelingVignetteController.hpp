// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: VignetteParameters
  class VignetteParameters;
  // Forward declaring type: LocomotionVignetteProvider
  class LocomotionVignetteProvider;
  // Forward declaring type: ITunnelingVignetteProvider
  class ITunnelingVignetteProvider;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: TunnelingVignetteController
  class TunnelingVignetteController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController*, "UnityEngine.XR.Interaction.Toolkit", "TunnelingVignetteController");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.TunnelingVignetteController
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class TunnelingVignetteController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::ShaderPropertyLookup
    class ShaderPropertyLookup;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::ProviderRecord
    class ProviderRecord;
    public:
    // private UnityEngine.XR.Interaction.Toolkit.VignetteParameters m_DefaultParameters
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::XR::Interaction::Toolkit::VignetteParameters* m_DefaultParameters;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::VignetteParameters*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.VignetteParameters m_CurrentParameters
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::XR::Interaction::Toolkit::VignetteParameters* m_CurrentParameters;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::VignetteParameters*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.LocomotionVignetteProvider> m_LocomotionVignetteProviders
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::LocomotionVignetteProvider*>* m_LocomotionVignetteProviders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::LocomotionVignetteProvider*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.TunnelingVignetteController/ProviderRecord> m_ProviderRecords
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::ProviderRecord*>* m_ProviderRecords;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::ProviderRecord*>*) == 0x8);
    // private UnityEngine.MeshRenderer m_MeshRender
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::MeshRenderer* m_MeshRender;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.MeshFilter m_MeshFilter
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::MeshFilter* m_MeshFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // private UnityEngine.Material m_SharedMaterial
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Material* m_SharedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.MaterialPropertyBlock m_VignettePropertyBlock
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::MaterialPropertyBlock* m_VignettePropertyBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    public:
    // static field const value: static private System.String k_DefaultShader
    static constexpr const char* k_DefaultShader = "VR/TunnelingVignette";
    // Get static field: static private System.String k_DefaultShader
    static ::StringW _get_k_DefaultShader();
    // Set static field: static private System.String k_DefaultShader
    static void _set_k_DefaultShader(::StringW value);
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.VignetteParameters m_DefaultParameters
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::VignetteParameters*& dyn_m_DefaultParameters();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.VignetteParameters m_CurrentParameters
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::VignetteParameters*& dyn_m_CurrentParameters();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.LocomotionVignetteProvider> m_LocomotionVignetteProviders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::LocomotionVignetteProvider*>*& dyn_m_LocomotionVignetteProviders();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.TunnelingVignetteController/ProviderRecord> m_ProviderRecords
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::ProviderRecord*>*& dyn_m_ProviderRecords();
    // Get instance field reference: private UnityEngine.MeshRenderer m_MeshRender
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_m_MeshRender();
    // Get instance field reference: private UnityEngine.MeshFilter m_MeshFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn_m_MeshFilter();
    // Get instance field reference: private UnityEngine.Material m_SharedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_SharedMaterial();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock m_VignettePropertyBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_m_VignettePropertyBlock();
    // public UnityEngine.XR.Interaction.Toolkit.VignetteParameters get_defaultParameters()
    // Offset: 0x54118E4
    ::UnityEngine::XR::Interaction::Toolkit::VignetteParameters* get_defaultParameters();
    // public System.Void set_defaultParameters(UnityEngine.XR.Interaction.Toolkit.VignetteParameters value)
    // Offset: 0x54118EC
    void set_defaultParameters(::UnityEngine::XR::Interaction::Toolkit::VignetteParameters* value);
    // public UnityEngine.XR.Interaction.Toolkit.VignetteParameters get_currentParameters()
    // Offset: 0x54118F4
    ::UnityEngine::XR::Interaction::Toolkit::VignetteParameters* get_currentParameters();
    // public System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.LocomotionVignetteProvider> get_locomotionVignetteProviders()
    // Offset: 0x54118FC
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::LocomotionVignetteProvider*>* get_locomotionVignetteProviders();
    // public System.Void set_locomotionVignetteProviders(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.LocomotionVignetteProvider> value)
    // Offset: 0x5411904
    void set_locomotionVignetteProviders(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::LocomotionVignetteProvider*>* value);
    // public System.Void BeginTunnelingVignette(UnityEngine.XR.Interaction.Toolkit.ITunnelingVignetteProvider provider)
    // Offset: 0x541190C
    void BeginTunnelingVignette(::UnityEngine::XR::Interaction::Toolkit::ITunnelingVignetteProvider* provider);
    // public System.Void EndTunnelingVignette(UnityEngine.XR.Interaction.Toolkit.ITunnelingVignetteProvider provider)
    // Offset: 0x5411B78
    void EndTunnelingVignette(::UnityEngine::XR::Interaction::Toolkit::ITunnelingVignetteProvider* provider);
    // System.Void PreviewInEditor(UnityEngine.XR.Interaction.Toolkit.VignetteParameters previewParameters)
    // Offset: 0x5411EA4
    void PreviewInEditor(::UnityEngine::XR::Interaction::Toolkit::VignetteParameters* previewParameters);
    // protected System.Void Awake()
    // Offset: 0x5412148
    void Awake();
    // protected System.Void Reset()
    // Offset: 0x54121C8
    void Reset();
    // protected System.Void Update()
    // Offset: 0x5412258
    void Update();
    // private System.Void UpdateTunnelingVignette(UnityEngine.XR.Interaction.Toolkit.VignetteParameters parameters)
    // Offset: 0x5411F44
    void UpdateTunnelingVignette(::UnityEngine::XR::Interaction::Toolkit::VignetteParameters* parameters);
    // private System.Boolean TrySetUpMaterial()
    // Offset: 0x5412998
    bool TrySetUpMaterial();
    // public System.Void .ctor()
    // Offset: 0x5412DBC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TunnelingVignetteController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TunnelingVignetteController*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.TunnelingVignetteController
  #pragma pack(pop)
  static check_size<sizeof(TunnelingVignetteController), 88 + sizeof(::UnityEngine::MaterialPropertyBlock*)> __UnityEngine_XR_Interaction_Toolkit_TunnelingVignetteControllerSizeCheck;
  static_assert(sizeof(TunnelingVignetteController) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::get_defaultParameters
// Il2CppName: get_defaultParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::VignetteParameters* (UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::*)()>(&UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::get_defaultParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController*), "get_defaultParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::set_defaultParameters
// Il2CppName: set_defaultParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::*)(::UnityEngine::XR::Interaction::Toolkit::VignetteParameters*)>(&UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::set_defaultParameters)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "VignetteParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController*), "set_defaultParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::get_currentParameters
// Il2CppName: get_currentParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::VignetteParameters* (UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::*)()>(&UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::get_currentParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController*), "get_currentParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::get_locomotionVignetteProviders
// Il2CppName: get_locomotionVignetteProviders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::LocomotionVignetteProvider*>* (UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::*)()>(&UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::get_locomotionVignetteProviders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController*), "get_locomotionVignetteProviders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::set_locomotionVignetteProviders
// Il2CppName: set_locomotionVignetteProviders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::LocomotionVignetteProvider*>*)>(&UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::set_locomotionVignetteProviders)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "LocomotionVignetteProvider")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController*), "set_locomotionVignetteProviders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::BeginTunnelingVignette
// Il2CppName: BeginTunnelingVignette
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::*)(::UnityEngine::XR::Interaction::Toolkit::ITunnelingVignetteProvider*)>(&UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::BeginTunnelingVignette)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "ITunnelingVignetteProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController*), "BeginTunnelingVignette", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::EndTunnelingVignette
// Il2CppName: EndTunnelingVignette
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::*)(::UnityEngine::XR::Interaction::Toolkit::ITunnelingVignetteProvider*)>(&UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::EndTunnelingVignette)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "ITunnelingVignetteProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController*), "EndTunnelingVignette", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::PreviewInEditor
// Il2CppName: PreviewInEditor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::*)(::UnityEngine::XR::Interaction::Toolkit::VignetteParameters*)>(&UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::PreviewInEditor)> {
  static const MethodInfo* get() {
    static auto* previewParameters = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "VignetteParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController*), "PreviewInEditor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previewParameters});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::*)()>(&UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::*)()>(&UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::*)()>(&UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::UpdateTunnelingVignette
// Il2CppName: UpdateTunnelingVignette
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::*)(::UnityEngine::XR::Interaction::Toolkit::VignetteParameters*)>(&UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::UpdateTunnelingVignette)> {
  static const MethodInfo* get() {
    static auto* parameters = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "VignetteParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController*), "UpdateTunnelingVignette", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameters});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::TrySetUpMaterial
// Il2CppName: TrySetUpMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::*)()>(&UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::TrySetUpMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController*), "TrySetUpMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::TunnelingVignetteController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
