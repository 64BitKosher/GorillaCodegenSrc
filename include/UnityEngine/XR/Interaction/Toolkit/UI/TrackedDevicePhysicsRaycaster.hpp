// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.EventSystems.BaseRaycaster
#include "UnityEngine/EventSystems/BaseRaycaster.hpp"
// Including type: UnityEngine.QueryTriggerInteraction
#include "UnityEngine/QueryTriggerInteraction.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: UnityEngine.PhysicsScene
#include "UnityEngine/PhysicsScene.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Forward declaring type: TrackedDeviceEventData
  class TrackedDeviceEventData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Forward declaring type: TrackedDevicePhysicsRaycaster
  class TrackedDevicePhysicsRaycaster;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster*, "UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDevicePhysicsRaycaster");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.UI.TrackedDevicePhysicsRaycaster
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class TrackedDevicePhysicsRaycaster : public ::UnityEngine::EventSystems::BaseRaycaster {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::RaycastHitArraySegment
    class RaycastHitArraySegment;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::RaycastHitComparer
    class RaycastHitComparer;
    public:
    // private UnityEngine.QueryTriggerInteraction m_RaycastTriggerInteraction
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::QueryTriggerInteraction m_RaycastTriggerInteraction;
    // Field size check
    static_assert(sizeof(::UnityEngine::QueryTriggerInteraction) == 0x4);
    // private UnityEngine.LayerMask m_EventMask
    // Size: 0x4
    // Offset: 0x2C
    ::UnityEngine::LayerMask m_EventMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private System.Int32 m_MaxRayIntersections
    // Size: 0x4
    // Offset: 0x30
    int m_MaxRayIntersections;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_MaxRayIntersections and: m_EventCamera
    char __padding2[0x4] = {};
    // private UnityEngine.Camera m_EventCamera
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Camera* m_EventCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private System.Boolean m_HasWarnedEventCameraNull
    // Size: 0x1
    // Offset: 0x40
    bool m_HasWarnedEventCameraNull;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_HasWarnedEventCameraNull and: m_RaycastHits
    char __padding4[0x7] = {};
    // private UnityEngine.RaycastHit[] m_RaycastHits
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::RaycastHit> m_RaycastHits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private readonly UnityEngine.XR.Interaction.Toolkit.UI.TrackedDevicePhysicsRaycaster/RaycastHitComparer m_RaycastHitComparer
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::RaycastHitComparer* m_RaycastHitComparer;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::RaycastHitComparer*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.UI.TrackedDevicePhysicsRaycaster/RaycastHitArraySegment m_RaycastArrayWrapper
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::RaycastHitArraySegment* m_RaycastArrayWrapper;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::RaycastHitArraySegment*) == 0x8);
    // private readonly System.Collections.Generic.List`1<UnityEngine.RaycastHit> m_RaycastResultsCache
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>* m_RaycastResultsCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>*) == 0x8);
    // private UnityEngine.PhysicsScene m_LocalPhysicsScene
    // Size: 0x4
    // Offset: 0x68
    ::UnityEngine::PhysicsScene m_LocalPhysicsScene;
    // Field size check
    static_assert(sizeof(::UnityEngine::PhysicsScene) == 0x4);
    public:
    // static field const value: static private System.Int32 k_EverythingLayerMask
    static constexpr const int k_EverythingLayerMask = -1;
    // Get static field: static private System.Int32 k_EverythingLayerMask
    static int _get_k_EverythingLayerMask();
    // Set static field: static private System.Int32 k_EverythingLayerMask
    static void _set_k_EverythingLayerMask(int value);
    // Get instance field reference: private UnityEngine.QueryTriggerInteraction m_RaycastTriggerInteraction
    [[deprecated("Use field access instead!")]] ::UnityEngine::QueryTriggerInteraction& dyn_m_RaycastTriggerInteraction();
    // Get instance field reference: private UnityEngine.LayerMask m_EventMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_m_EventMask();
    // Get instance field reference: private System.Int32 m_MaxRayIntersections
    [[deprecated("Use field access instead!")]] int& dyn_m_MaxRayIntersections();
    // Get instance field reference: private UnityEngine.Camera m_EventCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_m_EventCamera();
    // Get instance field reference: private System.Boolean m_HasWarnedEventCameraNull
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasWarnedEventCameraNull();
    // Get instance field reference: private UnityEngine.RaycastHit[] m_RaycastHits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_m_RaycastHits();
    // Get instance field reference: private readonly UnityEngine.XR.Interaction.Toolkit.UI.TrackedDevicePhysicsRaycaster/RaycastHitComparer m_RaycastHitComparer
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::RaycastHitComparer*& dyn_m_RaycastHitComparer();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.UI.TrackedDevicePhysicsRaycaster/RaycastHitArraySegment m_RaycastArrayWrapper
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::RaycastHitArraySegment*& dyn_m_RaycastArrayWrapper();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.RaycastHit> m_RaycastResultsCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>*& dyn_m_RaycastResultsCache();
    // Get instance field reference: private UnityEngine.PhysicsScene m_LocalPhysicsScene
    [[deprecated("Use field access instead!")]] ::UnityEngine::PhysicsScene& dyn_m_LocalPhysicsScene();
    // public UnityEngine.QueryTriggerInteraction get_raycastTriggerInteraction()
    // Offset: 0x5420558
    ::UnityEngine::QueryTriggerInteraction get_raycastTriggerInteraction();
    // public System.Void set_raycastTriggerInteraction(UnityEngine.QueryTriggerInteraction value)
    // Offset: 0x5420560
    void set_raycastTriggerInteraction(::UnityEngine::QueryTriggerInteraction value);
    // public UnityEngine.LayerMask get_eventMask()
    // Offset: 0x5420568
    ::UnityEngine::LayerMask get_eventMask();
    // public System.Void set_eventMask(UnityEngine.LayerMask value)
    // Offset: 0x5420570
    void set_eventMask(::UnityEngine::LayerMask value);
    // public System.Int32 get_maxRayIntersections()
    // Offset: 0x5420578
    int get_maxRayIntersections();
    // public System.Void set_maxRayIntersections(System.Int32 value)
    // Offset: 0x5420580
    void set_maxRayIntersections(int value);
    // public System.Void SetEventCamera(UnityEngine.Camera newEventCamera)
    // Offset: 0x54206D4
    void SetEventCamera(::UnityEngine::Camera* newEventCamera);
    // private System.Void PerformRaycasts(UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceEventData eventData, System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> resultAppendList)
    // Offset: 0x5420778
    void PerformRaycasts(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceEventData* eventData, ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>* resultAppendList);
    // private System.Boolean PerformRaycast(UnityEngine.Vector3 from, UnityEngine.Vector3 to, UnityEngine.LayerMask layerMask, UnityEngine.Camera currentEventCamera, System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> resultAppendList)
    // Offset: 0x5420A9C
    bool PerformRaycast(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, ::UnityEngine::LayerMask layerMask, ::UnityEngine::Camera* currentEventCamera, ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>* resultAppendList);
    // public System.Void .ctor()
    // Offset: 0x5421190
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrackedDevicePhysicsRaycaster* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrackedDevicePhysicsRaycaster*, creationType>()));
    }
    // public override UnityEngine.Camera get_eventCamera()
    // Offset: 0x54205F0
    // Implemented from: UnityEngine.EventSystems.BaseRaycaster
    // Base method: UnityEngine.Camera BaseRaycaster::get_eventCamera()
    ::UnityEngine::Camera* get_eventCamera();
    // public override System.Void Raycast(UnityEngine.EventSystems.PointerEventData eventData, System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> resultAppendList)
    // Offset: 0x54206DC
    // Implemented from: UnityEngine.EventSystems.BaseRaycaster
    // Base method: System.Void BaseRaycaster::Raycast(UnityEngine.EventSystems.PointerEventData eventData, System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> resultAppendList)
    void Raycast(::UnityEngine::EventSystems::PointerEventData* eventData, ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>* resultAppendList);
    // protected override System.Void Awake()
    // Offset: 0x542097C
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::Awake()
    void Awake();
  }; // UnityEngine.XR.Interaction.Toolkit.UI.TrackedDevicePhysicsRaycaster
  #pragma pack(pop)
  static check_size<sizeof(TrackedDevicePhysicsRaycaster), 104 + sizeof(::UnityEngine::PhysicsScene)> __UnityEngine_XR_Interaction_Toolkit_UI_TrackedDevicePhysicsRaycasterSizeCheck;
  static_assert(sizeof(TrackedDevicePhysicsRaycaster) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::get_raycastTriggerInteraction
// Il2CppName: get_raycastTriggerInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::QueryTriggerInteraction (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::get_raycastTriggerInteraction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster*), "get_raycastTriggerInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::set_raycastTriggerInteraction
// Il2CppName: set_raycastTriggerInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::*)(::UnityEngine::QueryTriggerInteraction)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::set_raycastTriggerInteraction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster*), "set_raycastTriggerInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::get_eventMask
// Il2CppName: get_eventMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::get_eventMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster*), "get_eventMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::set_eventMask
// Il2CppName: set_eventMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::*)(::UnityEngine::LayerMask)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::set_eventMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster*), "set_eventMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::get_maxRayIntersections
// Il2CppName: get_maxRayIntersections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::get_maxRayIntersections)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster*), "get_maxRayIntersections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::set_maxRayIntersections
// Il2CppName: set_maxRayIntersections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::*)(int)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::set_maxRayIntersections)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster*), "set_maxRayIntersections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::SetEventCamera
// Il2CppName: SetEventCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::*)(::UnityEngine::Camera*)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::SetEventCamera)> {
  static const MethodInfo* get() {
    static auto* newEventCamera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster*), "SetEventCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newEventCamera});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::PerformRaycasts
// Il2CppName: PerformRaycasts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::*)(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceEventData*, ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>*)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::PerformRaycasts)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceEventData")->byval_arg;
    static auto* resultAppendList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "RaycastResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster*), "PerformRaycasts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData, resultAppendList});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::PerformRaycast
// Il2CppName: PerformRaycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::LayerMask, ::UnityEngine::Camera*, ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>*)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::PerformRaycast)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    static auto* currentEventCamera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* resultAppendList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "RaycastResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster*), "PerformRaycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, layerMask, currentEventCamera, resultAppendList});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::get_eventCamera
// Il2CppName: get_eventCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::get_eventCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster*), "get_eventCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::*)(::UnityEngine::EventSystems::PointerEventData*, ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>*)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::Raycast)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    static auto* resultAppendList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "RaycastResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster*), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData, resultAppendList});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDevicePhysicsRaycaster*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
