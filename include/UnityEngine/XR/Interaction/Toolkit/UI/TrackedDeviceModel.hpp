// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState
#include "UnityEngine/XR/Interaction/Toolkit/UI/ButtonDeltaState.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.EventSystems.RaycastResult
#include "UnityEngine/EventSystems/RaycastResult.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.UI.UIInteractionType
#include "UnityEngine/XR/Interaction/Toolkit/UI/UIInteractionType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Skipping declaration: ImplementationData because it is already included!
  // Forward declaring type: TrackedDeviceEventData
  class TrackedDeviceEventData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Forward declaring type: TrackedDeviceModel
  struct TrackedDeviceModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel, "UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceModel");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Size: 0x13C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel
  // [TokenAttribute] Offset: FFFFFFFF
  struct TrackedDeviceModel/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::ImplementationData
    struct ImplementationData;
    // Size: 0x90
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel/ImplementationData
    // [TokenAttribute] Offset: FFFFFFFF
    struct ImplementationData/*, public ::System::ValueType*/ {
      public:
      public:
      // private System.Collections.Generic.List`1<UnityEngine.GameObject> <hoverTargets>k__BackingField
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* hoverTargets;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
      // private UnityEngine.GameObject <pointerTarget>k__BackingField
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::GameObject* pointerTarget;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private System.Boolean <isDragging>k__BackingField
      // Size: 0x1
      // Offset: 0x10
      bool isDragging;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: isDragging and: pressedTime
      char __padding2[0x3] = {};
      // private System.Single <pressedTime>k__BackingField
      // Size: 0x4
      // Offset: 0x14
      float pressedTime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private UnityEngine.Vector2 <position>k__BackingField
      // Size: 0x8
      // Offset: 0x18
      ::UnityEngine::Vector2 position;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
      // private UnityEngine.Vector2 <pressedPosition>k__BackingField
      // Size: 0x8
      // Offset: 0x20
      ::UnityEngine::Vector2 pressedPosition;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
      // private UnityEngine.EventSystems.RaycastResult <pressedRaycast>k__BackingField
      // Size: 0x50
      // Offset: 0x28
      ::UnityEngine::EventSystems::RaycastResult pressedRaycast;
      // Field size check
      static_assert(sizeof(::UnityEngine::EventSystems::RaycastResult) == 0x50);
      // private UnityEngine.GameObject <pressedGameObject>k__BackingField
      // Size: 0x8
      // Offset: 0x78
      ::UnityEngine::GameObject* pressedGameObject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private UnityEngine.GameObject <pressedGameObjectRaw>k__BackingField
      // Size: 0x8
      // Offset: 0x80
      ::UnityEngine::GameObject* pressedGameObjectRaw;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private UnityEngine.GameObject <draggedGameObject>k__BackingField
      // Size: 0x8
      // Offset: 0x88
      ::UnityEngine::GameObject* draggedGameObject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      public:
      // Creating value type constructor for type: ImplementationData
      constexpr ImplementationData(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* hoverTargets_ = {}, ::UnityEngine::GameObject* pointerTarget_ = {}, bool isDragging_ = {}, float pressedTime_ = {}, ::UnityEngine::Vector2 position_ = {}, ::UnityEngine::Vector2 pressedPosition_ = {}, ::UnityEngine::EventSystems::RaycastResult pressedRaycast_ = {}, ::UnityEngine::GameObject* pressedGameObject_ = {}, ::UnityEngine::GameObject* pressedGameObjectRaw_ = {}, ::UnityEngine::GameObject* draggedGameObject_ = {}) noexcept : hoverTargets{hoverTargets_}, pointerTarget{pointerTarget_}, isDragging{isDragging_}, pressedTime{pressedTime_}, position{position_}, pressedPosition{pressedPosition_}, pressedRaycast{pressedRaycast_}, pressedGameObject{pressedGameObject_}, pressedGameObjectRaw{pressedGameObjectRaw_}, draggedGameObject{draggedGameObject_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.GameObject> <hoverTargets>k__BackingField
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_$hoverTargets$k__BackingField();
      // Get instance field reference: private UnityEngine.GameObject <pointerTarget>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$pointerTarget$k__BackingField();
      // Get instance field reference: private System.Boolean <isDragging>k__BackingField
      [[deprecated("Use field access instead!")]] bool& dyn_$isDragging$k__BackingField();
      // Get instance field reference: private System.Single <pressedTime>k__BackingField
      [[deprecated("Use field access instead!")]] float& dyn_$pressedTime$k__BackingField();
      // Get instance field reference: private UnityEngine.Vector2 <position>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$position$k__BackingField();
      // Get instance field reference: private UnityEngine.Vector2 <pressedPosition>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$pressedPosition$k__BackingField();
      // Get instance field reference: private UnityEngine.EventSystems.RaycastResult <pressedRaycast>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::RaycastResult& dyn_$pressedRaycast$k__BackingField();
      // Get instance field reference: private UnityEngine.GameObject <pressedGameObject>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$pressedGameObject$k__BackingField();
      // Get instance field reference: private UnityEngine.GameObject <pressedGameObjectRaw>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$pressedGameObjectRaw$k__BackingField();
      // Get instance field reference: private UnityEngine.GameObject <draggedGameObject>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$draggedGameObject$k__BackingField();
      // public System.Collections.Generic.List`1<UnityEngine.GameObject> get_hoverTargets()
      // Offset: 0x5420490
      ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* get_hoverTargets();
      // public System.Void set_hoverTargets(System.Collections.Generic.List`1<UnityEngine.GameObject> value)
      // Offset: 0x5420498
      void set_hoverTargets(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* value);
      // public UnityEngine.GameObject get_pointerTarget()
      // Offset: 0x54204A0
      ::UnityEngine::GameObject* get_pointerTarget();
      // public System.Void set_pointerTarget(UnityEngine.GameObject value)
      // Offset: 0x54204A8
      void set_pointerTarget(::UnityEngine::GameObject* value);
      // public System.Boolean get_isDragging()
      // Offset: 0x54204B0
      bool get_isDragging();
      // public System.Void set_isDragging(System.Boolean value)
      // Offset: 0x54204B8
      void set_isDragging(bool value);
      // public System.Single get_pressedTime()
      // Offset: 0x54204C4
      float get_pressedTime();
      // public System.Void set_pressedTime(System.Single value)
      // Offset: 0x54204CC
      void set_pressedTime(float value);
      // public UnityEngine.Vector2 get_position()
      // Offset: 0x54204D4
      ::UnityEngine::Vector2 get_position();
      // public System.Void set_position(UnityEngine.Vector2 value)
      // Offset: 0x54204DC
      void set_position(::UnityEngine::Vector2 value);
      // public UnityEngine.Vector2 get_pressedPosition()
      // Offset: 0x54204E4
      ::UnityEngine::Vector2 get_pressedPosition();
      // public System.Void set_pressedPosition(UnityEngine.Vector2 value)
      // Offset: 0x54204EC
      void set_pressedPosition(::UnityEngine::Vector2 value);
      // public UnityEngine.EventSystems.RaycastResult get_pressedRaycast()
      // Offset: 0x54204F4
      ::UnityEngine::EventSystems::RaycastResult get_pressedRaycast();
      // public System.Void set_pressedRaycast(UnityEngine.EventSystems.RaycastResult value)
      // Offset: 0x5420504
      void set_pressedRaycast(::UnityEngine::EventSystems::RaycastResult value);
      // public UnityEngine.GameObject get_pressedGameObject()
      // Offset: 0x5420528
      ::UnityEngine::GameObject* get_pressedGameObject();
      // public System.Void set_pressedGameObject(UnityEngine.GameObject value)
      // Offset: 0x5420530
      void set_pressedGameObject(::UnityEngine::GameObject* value);
      // public UnityEngine.GameObject get_pressedGameObjectRaw()
      // Offset: 0x5420538
      ::UnityEngine::GameObject* get_pressedGameObjectRaw();
      // public System.Void set_pressedGameObjectRaw(UnityEngine.GameObject value)
      // Offset: 0x5420540
      void set_pressedGameObjectRaw(::UnityEngine::GameObject* value);
      // public UnityEngine.GameObject get_draggedGameObject()
      // Offset: 0x5420548
      ::UnityEngine::GameObject* get_draggedGameObject();
      // public System.Void set_draggedGameObject(UnityEngine.GameObject value)
      // Offset: 0x5420550
      void set_draggedGameObject(::UnityEngine::GameObject* value);
      // public System.Void Reset()
      // Offset: 0x541FF5C
      void Reset();
    }; // UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel/ImplementationData
    #pragma pack(pop)
    static check_size<sizeof(TrackedDeviceModel::ImplementationData), 136 + sizeof(::UnityEngine::GameObject*)> __UnityEngine_XR_Interaction_Toolkit_UI_TrackedDeviceModel_ImplementationDataSizeCheck;
    static_assert(sizeof(TrackedDeviceModel::ImplementationData) == 0x90);
    public:
    // private UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel/ImplementationData m_ImplementationData
    // Size: 0x90
    // Offset: 0x0
    ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::ImplementationData m_ImplementationData;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::ImplementationData) == 0x90);
    // private readonly System.Int32 <pointerId>k__BackingField
    // Size: 0x4
    // Offset: 0x90
    int pointerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_SelectDown
    // Size: 0x1
    // Offset: 0x94
    bool m_SelectDown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_SelectDown and: selectDelta
    char __padding2[0x3] = {};
    // private UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState <selectDelta>k__BackingField
    // Size: 0x4
    // Offset: 0x98
    ::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState selectDelta;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState) == 0x4);
    // private System.Boolean <changedThisFrame>k__BackingField
    // Size: 0x1
    // Offset: 0x9C
    bool changedThisFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: changedThisFrame and: m_Position
    char __padding4[0x3] = {};
    // private UnityEngine.Vector3 m_Position
    // Size: 0xC
    // Offset: 0xA0
    ::UnityEngine::Vector3 m_Position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: m_Position and: positionGetter
    char __padding5[0x4] = {};
    // private System.Func`1<UnityEngine.Vector3> <positionGetter>k__BackingField
    // Size: 0x8
    // Offset: 0xB0
    ::System::Func_1<::UnityEngine::Vector3>* positionGetter;
    // Field size check
    static_assert(sizeof(::System::Func_1<::UnityEngine::Vector3>*) == 0x8);
    // private UnityEngine.Quaternion m_Orientation
    // Size: 0x10
    // Offset: 0xB8
    ::UnityEngine::Quaternion m_Orientation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> m_RaycastPoints
    // Size: 0x8
    // Offset: 0xC8
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* m_RaycastPoints;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // private UnityEngine.EventSystems.RaycastResult <currentRaycast>k__BackingField
    // Size: 0x50
    // Offset: 0xD0
    ::UnityEngine::EventSystems::RaycastResult currentRaycast;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventSystems::RaycastResult) == 0x50);
    // private System.Int32 <currentRaycastEndpointIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x120
    int currentRaycastEndpointIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.LayerMask m_RaycastLayerMask
    // Size: 0x4
    // Offset: 0x124
    ::UnityEngine::LayerMask m_RaycastLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.Vector2 m_ScrollDelta
    // Size: 0x8
    // Offset: 0x128
    ::UnityEngine::Vector2 m_ScrollDelta;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single m_PokeDepth
    // Size: 0x4
    // Offset: 0x130
    float m_PokeDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.XR.Interaction.Toolkit.UI.UIInteractionType m_InteractionType
    // Size: 0x4
    // Offset: 0x134
    ::UnityEngine::XR::Interaction::Toolkit::UI::UIInteractionType m_InteractionType;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::UIInteractionType) == 0x4);
    // private System.Single m_MaxRaycastDistance
    // Size: 0x4
    // Offset: 0x138
    float m_MaxRaycastDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: TrackedDeviceModel
    constexpr TrackedDeviceModel(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::ImplementationData m_ImplementationData_ = {}, int pointerId_ = {}, bool m_SelectDown_ = {}, ::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState selectDelta_ = {}, bool changedThisFrame_ = {}, ::UnityEngine::Vector3 m_Position_ = {}, ::System::Func_1<::UnityEngine::Vector3>* positionGetter_ = {}, ::UnityEngine::Quaternion m_Orientation_ = {}, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* m_RaycastPoints_ = {}, ::UnityEngine::EventSystems::RaycastResult currentRaycast_ = {}, int currentRaycastEndpointIndex_ = {}, ::UnityEngine::LayerMask m_RaycastLayerMask_ = {}, ::UnityEngine::Vector2 m_ScrollDelta_ = {}, float m_PokeDepth_ = {}, ::UnityEngine::XR::Interaction::Toolkit::UI::UIInteractionType m_InteractionType_ = {}, float m_MaxRaycastDistance_ = {}) noexcept : m_ImplementationData{m_ImplementationData_}, pointerId{pointerId_}, m_SelectDown{m_SelectDown_}, selectDelta{selectDelta_}, changedThisFrame{changedThisFrame_}, m_Position{m_Position_}, positionGetter{positionGetter_}, m_Orientation{m_Orientation_}, m_RaycastPoints{m_RaycastPoints_}, currentRaycast{currentRaycast_}, currentRaycastEndpointIndex{currentRaycastEndpointIndex_}, m_RaycastLayerMask{m_RaycastLayerMask_}, m_ScrollDelta{m_ScrollDelta_}, m_PokeDepth{m_PokeDepth_}, m_InteractionType{m_InteractionType_}, m_MaxRaycastDistance{m_MaxRaycastDistance_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static private System.Single k_DefaultMaxRaycastDistance
    static constexpr const float k_DefaultMaxRaycastDistance = 1000;
    // Get static field: static private System.Single k_DefaultMaxRaycastDistance
    static float _get_k_DefaultMaxRaycastDistance();
    // Set static field: static private System.Single k_DefaultMaxRaycastDistance
    static void _set_k_DefaultMaxRaycastDistance(float value);
    // Get static field: static private readonly UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel <invalid>k__BackingField
    static ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel _get_$invalid$k__BackingField();
    // Set static field: static private readonly UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel <invalid>k__BackingField
    static void _set_$invalid$k__BackingField(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel value);
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel/ImplementationData m_ImplementationData
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::ImplementationData& dyn_m_ImplementationData();
    // Get instance field reference: private readonly System.Int32 <pointerId>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$pointerId$k__BackingField();
    // Get instance field reference: private System.Boolean m_SelectDown
    [[deprecated("Use field access instead!")]] bool& dyn_m_SelectDown();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState <selectDelta>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState& dyn_$selectDelta$k__BackingField();
    // Get instance field reference: private System.Boolean <changedThisFrame>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$changedThisFrame$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 m_Position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Position();
    // Get instance field reference: private System.Func`1<UnityEngine.Vector3> <positionGetter>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Func_1<::UnityEngine::Vector3>*& dyn_$positionGetter$k__BackingField();
    // Get instance field reference: private UnityEngine.Quaternion m_Orientation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_Orientation();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector3> m_RaycastPoints
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_m_RaycastPoints();
    // Get instance field reference: private UnityEngine.EventSystems.RaycastResult <currentRaycast>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::RaycastResult& dyn_$currentRaycast$k__BackingField();
    // Get instance field reference: private System.Int32 <currentRaycastEndpointIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$currentRaycastEndpointIndex$k__BackingField();
    // Get instance field reference: private UnityEngine.LayerMask m_RaycastLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_m_RaycastLayerMask();
    // Get instance field reference: private UnityEngine.Vector2 m_ScrollDelta
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_ScrollDelta();
    // Get instance field reference: private System.Single m_PokeDepth
    [[deprecated("Use field access instead!")]] float& dyn_m_PokeDepth();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.UI.UIInteractionType m_InteractionType
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::UIInteractionType& dyn_m_InteractionType();
    // Get instance field reference: private System.Single m_MaxRaycastDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxRaycastDistance();
    // UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel/ImplementationData get_implementationData()
    // Offset: 0x541FA58
    ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::ImplementationData get_implementationData();
    // public System.Int32 get_pointerId()
    // Offset: 0x541FA68
    int get_pointerId();
    // public System.Boolean get_select()
    // Offset: 0x541FA70
    bool get_select();
    // public System.Void set_select(System.Boolean value)
    // Offset: 0x541FA78
    void set_select(bool value);
    // public UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState get_selectDelta()
    // Offset: 0x541FAAC
    ::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState get_selectDelta();
    // private System.Void set_selectDelta(UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState value)
    // Offset: 0x541FAB4
    void set_selectDelta(::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState value);
    // public System.Boolean get_changedThisFrame()
    // Offset: 0x541FABC
    bool get_changedThisFrame();
    // private System.Void set_changedThisFrame(System.Boolean value)
    // Offset: 0x541FAC4
    void set_changedThisFrame(bool value);
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x541FAD0
    ::UnityEngine::Vector3 get_position();
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x541FB00
    void set_position(::UnityEngine::Vector3 value);
    // System.Func`1<UnityEngine.Vector3> get_positionGetter()
    // Offset: 0x541FB4C
    ::System::Func_1<::UnityEngine::Vector3>* get_positionGetter();
    // System.Void set_positionGetter(System.Func`1<UnityEngine.Vector3> value)
    // Offset: 0x541FB54
    void set_positionGetter(::System::Func_1<::UnityEngine::Vector3>* value);
    // public UnityEngine.Quaternion get_orientation()
    // Offset: 0x541FB5C
    ::UnityEngine::Quaternion get_orientation();
    // public System.Void set_orientation(UnityEngine.Quaternion value)
    // Offset: 0x541FB68
    void set_orientation(::UnityEngine::Quaternion value);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> get_raycastPoints()
    // Offset: 0x541FBB0
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* get_raycastPoints();
    // public System.Void set_raycastPoints(System.Collections.Generic.List`1<UnityEngine.Vector3> value)
    // Offset: 0x541FBB8
    void set_raycastPoints(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* value);
    // public UnityEngine.EventSystems.RaycastResult get_currentRaycast()
    // Offset: 0x541FC2C
    ::UnityEngine::EventSystems::RaycastResult get_currentRaycast();
    // private System.Void set_currentRaycast(UnityEngine.EventSystems.RaycastResult value)
    // Offset: 0x541FC3C
    void set_currentRaycast(::UnityEngine::EventSystems::RaycastResult value);
    // public System.Int32 get_currentRaycastEndpointIndex()
    // Offset: 0x541FC60
    int get_currentRaycastEndpointIndex();
    // private System.Void set_currentRaycastEndpointIndex(System.Int32 value)
    // Offset: 0x541FC68
    void set_currentRaycastEndpointIndex(int value);
    // public UnityEngine.LayerMask get_raycastLayerMask()
    // Offset: 0x541FC70
    ::UnityEngine::LayerMask get_raycastLayerMask();
    // public System.Void set_raycastLayerMask(UnityEngine.LayerMask value)
    // Offset: 0x541FC78
    void set_raycastLayerMask(::UnityEngine::LayerMask value);
    // public UnityEngine.Vector2 get_scrollDelta()
    // Offset: 0x541FCC4
    ::UnityEngine::Vector2 get_scrollDelta();
    // public System.Void set_scrollDelta(UnityEngine.Vector2 value)
    // Offset: 0x541FCD0
    void set_scrollDelta(::UnityEngine::Vector2 value);
    // System.Single get_pokeDepth()
    // Offset: 0x541FD10
    float get_pokeDepth();
    // System.Void set_pokeDepth(System.Single value)
    // Offset: 0x541FD18
    void set_pokeDepth(float value);
    // UnityEngine.XR.Interaction.Toolkit.UI.UIInteractionType get_interactionType()
    // Offset: 0x541FD38
    ::UnityEngine::XR::Interaction::Toolkit::UI::UIInteractionType get_interactionType();
    // System.Void set_interactionType(UnityEngine.XR.Interaction.Toolkit.UI.UIInteractionType value)
    // Offset: 0x541FD40
    void set_interactionType(::UnityEngine::XR::Interaction::Toolkit::UI::UIInteractionType value);
    // public System.Void .ctor(System.Int32 pointerId)
    // Offset: 0x541FD5C
    TrackedDeviceModel(int pointerId);
    // public System.Void Reset(System.Boolean resetImplementation)
    // Offset: 0x541FE14
    void Reset(bool resetImplementation);
    // public System.Void OnFrameFinished()
    // Offset: 0x54200BC
    void OnFrameFinished();
    // public System.Void CopyTo(UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceEventData eventData)
    // Offset: 0x5420114
    void CopyTo(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceEventData* eventData);
    // public System.Void CopyFrom(UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceEventData eventData)
    // Offset: 0x5420258
    void CopyFrom(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceEventData* eventData);
    // static UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel get_invalid()
    // Offset: 0x542039C
    static ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel get_invalid();
    // public System.Single get_maxRaycastDistance()
    // Offset: 0x54203FC
    float get_maxRaycastDistance();
    // public System.Void set_maxRaycastDistance(System.Single value)
    // Offset: 0x5420404
    void set_maxRaycastDistance(float value);
    // static private System.Void .cctor()
    // Offset: 0x542040C
    static void _cctor();
  }; // UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel
  #pragma pack(pop)
  static check_size<sizeof(TrackedDeviceModel), 312 + sizeof(float)> __UnityEngine_XR_Interaction_Toolkit_UI_TrackedDeviceModelSizeCheck;
  static_assert(sizeof(TrackedDeviceModel) == 0x13C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::ImplementationData, "UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceModel/ImplementationData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_implementationData
// Il2CppName: get_implementationData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::ImplementationData (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_implementationData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_implementationData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_pointerId
// Il2CppName: get_pointerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_pointerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_pointerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_select
// Il2CppName: get_select
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_select)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_select", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_select
// Il2CppName: set_select
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_select)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "set_select", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_selectDelta
// Il2CppName: get_selectDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_selectDelta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_selectDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_selectDelta
// Il2CppName: set_selectDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_selectDelta)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "ButtonDeltaState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "set_selectDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_changedThisFrame
// Il2CppName: get_changedThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_changedThisFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_changedThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_changedThisFrame
// Il2CppName: set_changedThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_changedThisFrame)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "set_changedThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(::UnityEngine::Vector3)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_positionGetter
// Il2CppName: get_positionGetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_1<::UnityEngine::Vector3>* (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_positionGetter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_positionGetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_positionGetter
// Il2CppName: set_positionGetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(::System::Func_1<::UnityEngine::Vector3>*)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_positionGetter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "set_positionGetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_orientation
// Il2CppName: get_orientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_orientation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_orientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_orientation
// Il2CppName: set_orientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(::UnityEngine::Quaternion)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_orientation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "set_orientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_raycastPoints
// Il2CppName: get_raycastPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>* (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_raycastPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_raycastPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_raycastPoints
// Il2CppName: set_raycastPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_raycastPoints)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "set_raycastPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_currentRaycast
// Il2CppName: get_currentRaycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::EventSystems::RaycastResult (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_currentRaycast)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_currentRaycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_currentRaycast
// Il2CppName: set_currentRaycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(::UnityEngine::EventSystems::RaycastResult)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_currentRaycast)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "RaycastResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "set_currentRaycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_currentRaycastEndpointIndex
// Il2CppName: get_currentRaycastEndpointIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_currentRaycastEndpointIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_currentRaycastEndpointIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_currentRaycastEndpointIndex
// Il2CppName: set_currentRaycastEndpointIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(int)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_currentRaycastEndpointIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "set_currentRaycastEndpointIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_raycastLayerMask
// Il2CppName: get_raycastLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_raycastLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_raycastLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_raycastLayerMask
// Il2CppName: set_raycastLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(::UnityEngine::LayerMask)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_raycastLayerMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "set_raycastLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_scrollDelta
// Il2CppName: get_scrollDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_scrollDelta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_scrollDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_scrollDelta
// Il2CppName: set_scrollDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(::UnityEngine::Vector2)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_scrollDelta)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "set_scrollDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_pokeDepth
// Il2CppName: get_pokeDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_pokeDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_pokeDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_pokeDepth
// Il2CppName: set_pokeDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_pokeDepth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "set_pokeDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_interactionType
// Il2CppName: get_interactionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::UI::UIInteractionType (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_interactionType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_interactionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_interactionType
// Il2CppName: set_interactionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(::UnityEngine::XR::Interaction::Toolkit::UI::UIInteractionType)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_interactionType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "UIInteractionType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "set_interactionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::TrackedDeviceModel
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::Reset)> {
  static const MethodInfo* get() {
    static auto* resetImplementation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resetImplementation});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::OnFrameFinished
// Il2CppName: OnFrameFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::OnFrameFinished)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "OnFrameFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceEventData*)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::CopyTo)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceEventData*)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_invalid
// Il2CppName: get_invalid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel (*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_invalid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_invalid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_maxRaycastDistance
// Il2CppName: get_maxRaycastDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::get_maxRaycastDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "get_maxRaycastDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_maxRaycastDistance
// Il2CppName: set_maxRaycastDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::set_maxRaycastDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), "set_maxRaycastDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
