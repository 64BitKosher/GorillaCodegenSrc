// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: Unity::XR::CoreUtils::Bindings
namespace Unity::XR::CoreUtils::Bindings {
  // Forward declaring type: BindingsGroup
  class BindingsGroup;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::Utilities::Tweenables::Primitives
namespace UnityEngine::XR::Interaction::Toolkit::Utilities::Tweenables::Primitives {
  // Forward declaring type: Vector3TweenableVariable
  class Vector3TweenableVariable;
  // Forward declaring type: QuaternionTweenableVariable
  class QuaternionTweenableVariable;
}
// Forward declaring namespace: Unity::Mathematics
namespace Unity::Mathematics {
  // Forward declaring type: float3
  struct float3;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Forward declaring type: LazyFollow
  class LazyFollow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*, "UnityEngine.XR.Interaction.Toolkit.UI", "LazyFollow");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Size: 0x84
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.UI.LazyFollow
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class LazyFollow : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform m_Target
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* m_Target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 m_TargetOffset
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 m_TargetOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_MovementSpeed
    // Size: 0x4
    // Offset: 0x34
    float m_MovementSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_SnapOnEnable
    // Size: 0x1
    // Offset: 0x38
    bool m_SnapOnEnable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_SnapOnEnable and: m_MinDistanceAllowed
    char __padding3[0x3] = {};
    // private System.Single m_MinDistanceAllowed
    // Size: 0x4
    // Offset: 0x3C
    float m_MinDistanceAllowed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MaxDistanceAllowed
    // Size: 0x4
    // Offset: 0x40
    float m_MaxDistanceAllowed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MinAngleAllowed
    // Size: 0x4
    // Offset: 0x44
    float m_MinAngleAllowed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MaxAngleAllowed
    // Size: 0x4
    // Offset: 0x48
    float m_MaxAngleAllowed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_TimeUntilThresholdReachesMaxDistance
    // Size: 0x4
    // Offset: 0x4C
    float m_TimeUntilThresholdReachesMaxDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_TimeUntilThresholdReachesMaxAngle
    // Size: 0x4
    // Offset: 0x50
    float m_TimeUntilThresholdReachesMaxAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_TimeUntilThresholdReachesMaxAngle and: m_BindingsGroup
    char __padding9[0x4] = {};
    // private readonly Unity.XR.CoreUtils.Bindings.BindingsGroup m_BindingsGroup
    // Size: 0x8
    // Offset: 0x58
    ::Unity::XR::CoreUtils::Bindings::BindingsGroup* m_BindingsGroup;
    // Field size check
    static_assert(sizeof(::Unity::XR::CoreUtils::Bindings::BindingsGroup*) == 0x8);
    // private UnityEngine.Vector3 m_LastTargetPosition
    // Size: 0xC
    // Offset: 0x60
    ::UnityEngine::Vector3 m_LastTargetPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: m_LastTargetPosition and: m_Vector3TweenableVariable
    char __padding11[0x4] = {};
    // private UnityEngine.XR.Interaction.Toolkit.Utilities.Tweenables.Primitives.Vector3TweenableVariable m_Vector3TweenableVariable
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::XR::Interaction::Toolkit::Utilities::Tweenables::Primitives::Vector3TweenableVariable* m_Vector3TweenableVariable;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Utilities::Tweenables::Primitives::Vector3TweenableVariable*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.Utilities.Tweenables.Primitives.QuaternionTweenableVariable m_QuaternionTweenableVariable
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::XR::Interaction::Toolkit::Utilities::Tweenables::Primitives::QuaternionTweenableVariable* m_QuaternionTweenableVariable;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::Utilities::Tweenables::Primitives::QuaternionTweenableVariable*) == 0x8);
    // private System.Single m_LastUpdateTime
    // Size: 0x4
    // Offset: 0x80
    float m_LastUpdateTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Transform m_Target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_Target();
    // Get instance field reference: private UnityEngine.Vector3 m_TargetOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_TargetOffset();
    // Get instance field reference: private System.Single m_MovementSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_MovementSpeed();
    // Get instance field reference: private System.Boolean m_SnapOnEnable
    [[deprecated("Use field access instead!")]] bool& dyn_m_SnapOnEnable();
    // Get instance field reference: private System.Single m_MinDistanceAllowed
    [[deprecated("Use field access instead!")]] float& dyn_m_MinDistanceAllowed();
    // Get instance field reference: private System.Single m_MaxDistanceAllowed
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxDistanceAllowed();
    // Get instance field reference: private System.Single m_MinAngleAllowed
    [[deprecated("Use field access instead!")]] float& dyn_m_MinAngleAllowed();
    // Get instance field reference: private System.Single m_MaxAngleAllowed
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxAngleAllowed();
    // Get instance field reference: private System.Single m_TimeUntilThresholdReachesMaxDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_TimeUntilThresholdReachesMaxDistance();
    // Get instance field reference: private System.Single m_TimeUntilThresholdReachesMaxAngle
    [[deprecated("Use field access instead!")]] float& dyn_m_TimeUntilThresholdReachesMaxAngle();
    // Get instance field reference: private readonly Unity.XR.CoreUtils.Bindings.BindingsGroup m_BindingsGroup
    [[deprecated("Use field access instead!")]] ::Unity::XR::CoreUtils::Bindings::BindingsGroup*& dyn_m_BindingsGroup();
    // Get instance field reference: private UnityEngine.Vector3 m_LastTargetPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_LastTargetPosition();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.Utilities.Tweenables.Primitives.Vector3TweenableVariable m_Vector3TweenableVariable
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Utilities::Tweenables::Primitives::Vector3TweenableVariable*& dyn_m_Vector3TweenableVariable();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.Utilities.Tweenables.Primitives.QuaternionTweenableVariable m_QuaternionTweenableVariable
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::Utilities::Tweenables::Primitives::QuaternionTweenableVariable*& dyn_m_QuaternionTweenableVariable();
    // Get instance field reference: private System.Single m_LastUpdateTime
    [[deprecated("Use field access instead!")]] float& dyn_m_LastUpdateTime();
    // public UnityEngine.Transform get_target()
    // Offset: 0x541A0E0
    ::UnityEngine::Transform* get_target();
    // public System.Void set_target(UnityEngine.Transform value)
    // Offset: 0x541A0E8
    void set_target(::UnityEngine::Transform* value);
    // public UnityEngine.Vector3 get_targetOffset()
    // Offset: 0x541A0F0
    ::UnityEngine::Vector3 get_targetOffset();
    // public System.Void set_targetOffset(UnityEngine.Vector3 value)
    // Offset: 0x541A0FC
    void set_targetOffset(::UnityEngine::Vector3 value);
    // public System.Single get_movementSpeed()
    // Offset: 0x541A108
    float get_movementSpeed();
    // public System.Void set_movementSpeed(System.Single value)
    // Offset: 0x541A110
    void set_movementSpeed(float value);
    // public System.Boolean get_snapOnEnable()
    // Offset: 0x541A118
    bool get_snapOnEnable();
    // public System.Void set_snapOnEnable(System.Boolean value)
    // Offset: 0x541A120
    void set_snapOnEnable(bool value);
    // public System.Single get_minDistanceAllowed()
    // Offset: 0x541A12C
    float get_minDistanceAllowed();
    // public System.Void set_minDistanceAllowed(System.Single value)
    // Offset: 0x541A134
    void set_minDistanceAllowed(float value);
    // public System.Single get_maxDistanceAllowed()
    // Offset: 0x541A13C
    float get_maxDistanceAllowed();
    // public System.Void set_maxDistanceAllowed(System.Single value)
    // Offset: 0x541A144
    void set_maxDistanceAllowed(float value);
    // public System.Single get_minAngleAllowed()
    // Offset: 0x541A14C
    float get_minAngleAllowed();
    // public System.Void set_minAngleAllowed(System.Single value)
    // Offset: 0x541A154
    void set_minAngleAllowed(float value);
    // public System.Single get_maxAngleAllowed()
    // Offset: 0x541A15C
    float get_maxAngleAllowed();
    // public System.Void set_maxAngleAllowed(System.Single value)
    // Offset: 0x541A164
    void set_maxAngleAllowed(float value);
    // public System.Single get_timeUntilThresholdReachesMaxDistance()
    // Offset: 0x541A16C
    float get_timeUntilThresholdReachesMaxDistance();
    // public System.Void set_timeUntilThresholdReachesMaxDistance(System.Single value)
    // Offset: 0x541A174
    void set_timeUntilThresholdReachesMaxDistance(float value);
    // public System.Single get_timeUntilThresholdReachesMaxAngle()
    // Offset: 0x541A17C
    float get_timeUntilThresholdReachesMaxAngle();
    // public System.Void set_timeUntilThresholdReachesMaxAngle(System.Single value)
    // Offset: 0x541A184
    void set_timeUntilThresholdReachesMaxAngle(float value);
    // private UnityEngine.Vector3 get_m_TargetPosition()
    // Offset: 0x541A18C
    ::UnityEngine::Vector3 get_m_TargetPosition();
    // protected System.Boolean TryGetThresholdTargetPosition(out UnityEngine.Vector3 newTarget)
    // Offset: 0x541A1F0
    bool TryGetThresholdTargetPosition(ByRef<::UnityEngine::Vector3> newTarget);
    // protected System.Boolean TryGetThresholdTargetRotation(out UnityEngine.Quaternion newTarget)
    // Offset: 0x541A32C
    bool TryGetThresholdTargetRotation(ByRef<::UnityEngine::Quaternion> newTarget);
    // protected System.Void Awake()
    // Offset: 0x541A50C
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x541A5A4
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x541A8EC
    void OnDisable();
    // protected System.Void OnDestroy()
    // Offset: 0x541A908
    void OnDestroy();
    // protected System.Void LateUpdate()
    // Offset: 0x541A960
    void LateUpdate();
    // private System.Void UpdatePosition(Unity.Mathematics.float3 position)
    // Offset: 0x541AB1C
    void UpdatePosition(::Unity::Mathematics::float3 position);
    // private System.Void UpdateRotation(UnityEngine.Quaternion rotation)
    // Offset: 0x541AB74
    void UpdateRotation(::UnityEngine::Quaternion rotation);
    // public System.Void .ctor()
    // Offset: 0x541ABC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LazyFollow* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LazyFollow*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.UI.LazyFollow
  #pragma pack(pop)
  static check_size<sizeof(LazyFollow), 128 + sizeof(float)> __UnityEngine_XR_Interaction_Toolkit_UI_LazyFollowSizeCheck;
  static_assert(sizeof(LazyFollow) == 0x84);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_target
// Il2CppName: get_target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_target)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "get_target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_target
// Il2CppName: set_target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_target)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "set_target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_targetOffset
// Il2CppName: get_targetOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_targetOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "get_targetOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_targetOffset
// Il2CppName: set_targetOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)(::UnityEngine::Vector3)>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_targetOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "set_targetOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_movementSpeed
// Il2CppName: get_movementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_movementSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "get_movementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_movementSpeed
// Il2CppName: set_movementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_movementSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "set_movementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_snapOnEnable
// Il2CppName: get_snapOnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_snapOnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "get_snapOnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_snapOnEnable
// Il2CppName: set_snapOnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_snapOnEnable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "set_snapOnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_minDistanceAllowed
// Il2CppName: get_minDistanceAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_minDistanceAllowed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "get_minDistanceAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_minDistanceAllowed
// Il2CppName: set_minDistanceAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_minDistanceAllowed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "set_minDistanceAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_maxDistanceAllowed
// Il2CppName: get_maxDistanceAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_maxDistanceAllowed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "get_maxDistanceAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_maxDistanceAllowed
// Il2CppName: set_maxDistanceAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_maxDistanceAllowed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "set_maxDistanceAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_minAngleAllowed
// Il2CppName: get_minAngleAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_minAngleAllowed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "get_minAngleAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_minAngleAllowed
// Il2CppName: set_minAngleAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_minAngleAllowed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "set_minAngleAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_maxAngleAllowed
// Il2CppName: get_maxAngleAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_maxAngleAllowed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "get_maxAngleAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_maxAngleAllowed
// Il2CppName: set_maxAngleAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_maxAngleAllowed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "set_maxAngleAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_timeUntilThresholdReachesMaxDistance
// Il2CppName: get_timeUntilThresholdReachesMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_timeUntilThresholdReachesMaxDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "get_timeUntilThresholdReachesMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_timeUntilThresholdReachesMaxDistance
// Il2CppName: set_timeUntilThresholdReachesMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_timeUntilThresholdReachesMaxDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "set_timeUntilThresholdReachesMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_timeUntilThresholdReachesMaxAngle
// Il2CppName: get_timeUntilThresholdReachesMaxAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_timeUntilThresholdReachesMaxAngle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "get_timeUntilThresholdReachesMaxAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_timeUntilThresholdReachesMaxAngle
// Il2CppName: set_timeUntilThresholdReachesMaxAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::set_timeUntilThresholdReachesMaxAngle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "set_timeUntilThresholdReachesMaxAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_m_TargetPosition
// Il2CppName: get_m_TargetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::get_m_TargetPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "get_m_TargetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::TryGetThresholdTargetPosition
// Il2CppName: TryGetThresholdTargetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::TryGetThresholdTargetPosition)> {
  static const MethodInfo* get() {
    static auto* newTarget = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "TryGetThresholdTargetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newTarget});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::TryGetThresholdTargetRotation
// Il2CppName: TryGetThresholdTargetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)(ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::TryGetThresholdTargetRotation)> {
  static const MethodInfo* get() {
    static auto* newTarget = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "TryGetThresholdTargetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newTarget});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::UpdatePosition
// Il2CppName: UpdatePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)(::Unity::Mathematics::float3)>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::UpdatePosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "UpdatePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::UpdateRotation
// Il2CppName: UpdateRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::*)(::UnityEngine::Quaternion)>(&UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::UpdateRotation)> {
  static const MethodInfo* get() {
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow*), "UpdateRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::LazyFollow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
