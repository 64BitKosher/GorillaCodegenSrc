// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ResourceManagement.ResourceProviders.IAssetBundleResource
#include "UnityEngine/ResourceManagement/ResourceProviders/IAssetBundleResource.hpp"
// Including type: UnityEngine.ResourceManagement.IUpdateReceiver
#include "UnityEngine/ResourceManagement/IUpdateReceiver.hpp"
// Including type: UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle
#include "UnityEngine/ResourceManagement/ResourceProviders/ProvideHandle.hpp"
// Including type: UnityEngine.ResourceManagement.Util.BundleSource
#include "UnityEngine/ResourceManagement/Util/BundleSource.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::ResourceManagement::ResourceProviders
namespace UnityEngine::ResourceManagement::ResourceProviders {
  // Forward declaring type: AssetBundleRequestOptions
  class AssetBundleRequestOptions;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AssetBundle
  class AssetBundle;
  // Forward declaring type: AsyncOperation
  class AsyncOperation;
  // Forward declaring type: AssetBundleUnloadOperation
  class AssetBundleUnloadOperation;
  // Forward declaring type: AssetBundleRequest
  class AssetBundleRequest;
}
// Forward declaring namespace: UnityEngine::ResourceManagement
namespace UnityEngine::ResourceManagement {
  // Forward declaring type: WebRequestQueueOperation
  class WebRequestQueueOperation;
  // Forward declaring type: ResourceManager
  class ResourceManager;
}
// Forward declaring namespace: UnityEngine::Networking
namespace UnityEngine::Networking {
  // Forward declaring type: UnityWebRequest
  class UnityWebRequest;
  // Forward declaring type: UnityWebRequestAsyncOperation
  class UnityWebRequestAsyncOperation;
}
// Forward declaring namespace: UnityEngine::ResourceManagement::ResourceLocations
namespace UnityEngine::ResourceManagement::ResourceLocations {
  // Forward declaring type: IResourceLocation
  class IResourceLocation;
}
// Forward declaring namespace: UnityEngine::ResourceManagement::AsyncOperations
namespace UnityEngine::ResourceManagement::AsyncOperations {
  // Skipping declaration: DownloadStatus because it is already included!
}
// Forward declaring namespace: UnityEngine::ResourceManagement::Profiling
namespace UnityEngine::ResourceManagement::Profiling {
  // Forward declaring type: ContentStatus
  struct ContentStatus;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: UnityEngine.ResourceManagement.ResourceProviders
namespace UnityEngine::ResourceManagement::ResourceProviders {
  // Forward declaring type: AssetBundleResource
  class AssetBundleResource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*, "UnityEngine.ResourceManagement.ResourceProviders", "AssetBundleResource");
// Type namespace: UnityEngine.ResourceManagement.ResourceProviders
namespace UnityEngine::ResourceManagement::ResourceProviders {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ResourceManagement.ResourceProviders.AssetBundleResource
  // [TokenAttribute] Offset: FFFFFFFF
  class AssetBundleResource : public ::Il2CppObject/*, public ::UnityEngine::ResourceManagement::ResourceProviders::IAssetBundleResource, public ::UnityEngine::ResourceManagement::IUpdateReceiver*/ {
    public:
    // Nested type: ::UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::LoadType
    struct LoadType;
    public:
    // private UnityEngine.AssetBundle m_AssetBundle
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::AssetBundle* m_AssetBundle;
    // Field size check
    static_assert(sizeof(::UnityEngine::AssetBundle*) == 0x8);
    // private UnityEngine.AsyncOperation m_RequestOperation
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AsyncOperation* m_RequestOperation;
    // Field size check
    static_assert(sizeof(::UnityEngine::AsyncOperation*) == 0x8);
    // UnityEngine.ResourceManagement.WebRequestQueueOperation m_WebRequestQueueOperation
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::ResourceManagement::WebRequestQueueOperation* m_WebRequestQueueOperation;
    // Field size check
    static_assert(sizeof(::UnityEngine::ResourceManagement::WebRequestQueueOperation*) == 0x8);
    // UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle m_ProvideHandle
    // Size: 0x18
    // Offset: 0x28
    ::UnityEngine::ResourceManagement::ResourceProviders::ProvideHandle m_ProvideHandle;
    // Field size check
    static_assert(sizeof(::UnityEngine::ResourceManagement::ResourceProviders::ProvideHandle) == 0x18);
    // UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions m_Options
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::ResourceManagement::ResourceProviders::AssetBundleRequestOptions* m_Options;
    // Field size check
    static_assert(sizeof(::UnityEngine::ResourceManagement::ResourceProviders::AssetBundleRequestOptions*) == 0x8);
    // private System.Boolean m_RequestCompletedCallbackCalled
    // Size: 0x1
    // Offset: 0x48
    bool m_RequestCompletedCallbackCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RequestCompletedCallbackCalled and: m_Retries
    char __padding5[0x3] = {};
    // private System.Int32 m_Retries
    // Size: 0x4
    // Offset: 0x4C
    int m_Retries;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.ResourceManagement.Util.BundleSource m_Source
    // Size: 0x4
    // Offset: 0x50
    ::UnityEngine::ResourceManagement::Util::BundleSource m_Source;
    // Field size check
    static_assert(sizeof(::UnityEngine::ResourceManagement::Util::BundleSource) == 0x4);
    // Padding between fields: m_Source and: m_BytesToDownload
    char __padding7[0x4] = {};
    // private System.Int64 m_BytesToDownload
    // Size: 0x8
    // Offset: 0x58
    int64_t m_BytesToDownload;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 m_DownloadedBytes
    // Size: 0x8
    // Offset: 0x60
    int64_t m_DownloadedBytes;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean m_Completed
    // Size: 0x1
    // Offset: 0x68
    bool m_Completed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Completed and: m_UnloadOperation
    char __padding10[0x7] = {};
    // private UnityEngine.AssetBundleUnloadOperation m_UnloadOperation
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::AssetBundleUnloadOperation* m_UnloadOperation;
    // Field size check
    static_assert(sizeof(::UnityEngine::AssetBundleUnloadOperation*) == 0x8);
    // private System.String m_TransformedInternalId
    // Size: 0x8
    // Offset: 0x78
    ::StringW m_TransformedInternalId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.AssetBundleRequest m_PreloadRequest
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::AssetBundleRequest* m_PreloadRequest;
    // Field size check
    static_assert(sizeof(::UnityEngine::AssetBundleRequest*) == 0x8);
    // private System.Boolean m_PreloadCompleted
    // Size: 0x1
    // Offset: 0x88
    bool m_PreloadCompleted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PreloadCompleted and: m_LastDownloadedByteCount
    char __padding14[0x7] = {};
    // private System.UInt64 m_LastDownloadedByteCount
    // Size: 0x8
    // Offset: 0x90
    uint64_t m_LastDownloadedByteCount;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.Single m_TimeoutTimer
    // Size: 0x4
    // Offset: 0x98
    float m_TimeoutTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_TimeoutOverFrames
    // Size: 0x4
    // Offset: 0x9C
    int m_TimeoutOverFrames;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::ResourceManagement::ResourceProviders::IAssetBundleResource
    operator ::UnityEngine::ResourceManagement::ResourceProviders::IAssetBundleResource() noexcept {
      return *reinterpret_cast<::UnityEngine::ResourceManagement::ResourceProviders::IAssetBundleResource*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::ResourceManagement::IUpdateReceiver
    operator ::UnityEngine::ResourceManagement::IUpdateReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ResourceManagement::IUpdateReceiver*>(this);
    }
    // static field const value: static private System.Int32 k_WaitForWebRequestMainThreadSleep
    static constexpr const int k_WaitForWebRequestMainThreadSleep = 1;
    // Get static field: static private System.Int32 k_WaitForWebRequestMainThreadSleep
    static int _get_k_WaitForWebRequestMainThreadSleep();
    // Set static field: static private System.Int32 k_WaitForWebRequestMainThreadSleep
    static void _set_k_WaitForWebRequestMainThreadSleep(int value);
    // Get instance field reference: private UnityEngine.AssetBundle m_AssetBundle
    [[deprecated("Use field access instead!")]] ::UnityEngine::AssetBundle*& dyn_m_AssetBundle();
    // Get instance field reference: private UnityEngine.AsyncOperation m_RequestOperation
    [[deprecated("Use field access instead!")]] ::UnityEngine::AsyncOperation*& dyn_m_RequestOperation();
    // Get instance field reference: UnityEngine.ResourceManagement.WebRequestQueueOperation m_WebRequestQueueOperation
    [[deprecated("Use field access instead!")]] ::UnityEngine::ResourceManagement::WebRequestQueueOperation*& dyn_m_WebRequestQueueOperation();
    // Get instance field reference: UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle m_ProvideHandle
    [[deprecated("Use field access instead!")]] ::UnityEngine::ResourceManagement::ResourceProviders::ProvideHandle& dyn_m_ProvideHandle();
    // Get instance field reference: UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions m_Options
    [[deprecated("Use field access instead!")]] ::UnityEngine::ResourceManagement::ResourceProviders::AssetBundleRequestOptions*& dyn_m_Options();
    // Get instance field reference: private System.Boolean m_RequestCompletedCallbackCalled
    [[deprecated("Use field access instead!")]] bool& dyn_m_RequestCompletedCallbackCalled();
    // Get instance field reference: private System.Int32 m_Retries
    [[deprecated("Use field access instead!")]] int& dyn_m_Retries();
    // Get instance field reference: private UnityEngine.ResourceManagement.Util.BundleSource m_Source
    [[deprecated("Use field access instead!")]] ::UnityEngine::ResourceManagement::Util::BundleSource& dyn_m_Source();
    // Get instance field reference: private System.Int64 m_BytesToDownload
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_BytesToDownload();
    // Get instance field reference: private System.Int64 m_DownloadedBytes
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_DownloadedBytes();
    // Get instance field reference: private System.Boolean m_Completed
    [[deprecated("Use field access instead!")]] bool& dyn_m_Completed();
    // Get instance field reference: private UnityEngine.AssetBundleUnloadOperation m_UnloadOperation
    [[deprecated("Use field access instead!")]] ::UnityEngine::AssetBundleUnloadOperation*& dyn_m_UnloadOperation();
    // Get instance field reference: private System.String m_TransformedInternalId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_TransformedInternalId();
    // Get instance field reference: private UnityEngine.AssetBundleRequest m_PreloadRequest
    [[deprecated("Use field access instead!")]] ::UnityEngine::AssetBundleRequest*& dyn_m_PreloadRequest();
    // Get instance field reference: private System.Boolean m_PreloadCompleted
    [[deprecated("Use field access instead!")]] bool& dyn_m_PreloadCompleted();
    // Get instance field reference: private System.UInt64 m_LastDownloadedByteCount
    [[deprecated("Use field access instead!")]] uint64_t& dyn_m_LastDownloadedByteCount();
    // Get instance field reference: private System.Single m_TimeoutTimer
    [[deprecated("Use field access instead!")]] float& dyn_m_TimeoutTimer();
    // Get instance field reference: private System.Int32 m_TimeoutOverFrames
    [[deprecated("Use field access instead!")]] int& dyn_m_TimeoutOverFrames();
    // private System.Boolean get_HasTimedOut()
    // Offset: 0x533236C
    bool get_HasTimedOut();
    // System.Int64 get_BytesToDownload()
    // Offset: 0x53323AC
    int64_t get_BytesToDownload();
    // UnityEngine.Networking.UnityWebRequest CreateWebRequest(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation loc)
    // Offset: 0x53324B0
    ::UnityEngine::Networking::UnityWebRequest* CreateWebRequest(::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation* loc);
    // UnityEngine.Networking.UnityWebRequest CreateWebRequest(System.String url)
    // Offset: 0x53324D8
    ::UnityEngine::Networking::UnityWebRequest* CreateWebRequest(::StringW url);
    // public UnityEngine.AssetBundleRequest GetAssetPreloadRequest()
    // Offset: 0x5332858
    ::UnityEngine::AssetBundleRequest* GetAssetPreloadRequest();
    // private System.Single PercentComplete()
    // Offset: 0x53329A8
    float PercentComplete();
    // private UnityEngine.ResourceManagement.AsyncOperations.DownloadStatus GetDownloadStatus()
    // Offset: 0x53329C0
    ::UnityEngine::ResourceManagement::AsyncOperations::DownloadStatus GetDownloadStatus();
    // public UnityEngine.AssetBundle GetAssetBundle()
    // Offset: 0x533298C
    ::UnityEngine::AssetBundle* GetAssetBundle();
    // private System.Void AddBundleToProfiler(UnityEngine.ResourceManagement.Profiling.ContentStatus status, UnityEngine.ResourceManagement.Util.BundleSource source)
    // Offset: 0x5332718
    void AddBundleToProfiler(::UnityEngine::ResourceManagement::Profiling::ContentStatus status, ::UnityEngine::ResourceManagement::Util::BundleSource source);
    // private System.Void RemoveBundleFromProfiler()
    // Offset: 0x53331A8
    void RemoveBundleFromProfiler();
    // private System.Void OnUnloadOperationComplete(UnityEngine.AsyncOperation op)
    // Offset: 0x5333214
    void OnUnloadOperationComplete(::UnityEngine::AsyncOperation* op);
    // public System.Void Start(UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle provideHandle, UnityEngine.AssetBundleUnloadOperation unloadOp)
    // Offset: 0x53333B0
    void Start(::UnityEngine::ResourceManagement::ResourceProviders::ProvideHandle provideHandle, ::UnityEngine::AssetBundleUnloadOperation* unloadOp);
    // private System.Boolean WaitForCompletionHandler()
    // Offset: 0x533391C
    bool WaitForCompletionHandler();
    // private System.Void AddCallbackInvokeIfDone(UnityEngine.AsyncOperation operation, System.Action`1<UnityEngine.AsyncOperation> callback)
    // Offset: 0x53343AC
    void AddCallbackInvokeIfDone(::UnityEngine::AsyncOperation* operation, ::System::Action_1<::UnityEngine::AsyncOperation*>* callback);
    // static public System.Void GetLoadInfo(UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle handle, out UnityEngine.ResourceManagement.ResourceProviders.AssetBundleResource/LoadType loadType, out System.String path)
    // Offset: 0x533440C
    static void GetLoadInfo(::UnityEngine::ResourceManagement::ResourceProviders::ProvideHandle handle, ByRef<::UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::LoadType> loadType, ByRef<::StringW> path);
    // static System.Void GetLoadInfo(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation location, UnityEngine.ResourceManagement.ResourceManager resourceManager, out UnityEngine.ResourceManagement.ResourceProviders.AssetBundleResource/LoadType loadType, out System.String path)
    // Offset: 0x533443C
    static void GetLoadInfo(::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation* location, ::UnityEngine::ResourceManagement::ResourceManager* resourceManager, ByRef<::UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::LoadType> loadType, ByRef<::StringW> path);
    // private System.Void BeginOperation()
    // Offset: 0x5333234
    void BeginOperation();
    // private System.Void LoadLocalBundle()
    // Offset: 0x53346B4
    void LoadLocalBundle();
    // UnityEngine.ResourceManagement.WebRequestQueueOperation EnqueueWebRequest(System.String internalId)
    // Offset: 0x5334784
    ::UnityEngine::ResourceManagement::WebRequestQueueOperation* EnqueueWebRequest(::StringW internalId);
    // System.Void AddBeginWebRequestHandler(UnityEngine.ResourceManagement.WebRequestQueueOperation webRequestQueueOperation)
    // Offset: 0x5334894
    void AddBeginWebRequestHandler(::UnityEngine::ResourceManagement::WebRequestQueueOperation* webRequestQueueOperation);
    // private System.Void BeginWebRequestOperation(UnityEngine.AsyncOperation asyncOp)
    // Offset: 0x53349B4
    void BeginWebRequestOperation(::UnityEngine::AsyncOperation* asyncOp);
    // public System.Void Update(System.Single unscaledDeltaTime)
    // Offset: 0x5334AC8
    void Update(float unscaledDeltaTime);
    // private System.Void LocalRequestOperationCompleted(UnityEngine.AsyncOperation op)
    // Offset: 0x5334304
    void LocalRequestOperationCompleted(::UnityEngine::AsyncOperation* op);
    // private System.Void CompleteBundleLoad(UnityEngine.AssetBundle bundle)
    // Offset: 0x5334BE8
    void CompleteBundleLoad(::UnityEngine::AssetBundle* bundle);
    // private System.Void WebRequestOperationCompleted(UnityEngine.AsyncOperation op)
    // Offset: 0x5333CA4
    void WebRequestOperationCompleted(::UnityEngine::AsyncOperation* op);
    // public System.Boolean Unload(out UnityEngine.AssetBundleUnloadOperation unloadOp)
    // Offset: 0x5334D44
    bool Unload(ByRef<::UnityEngine::AssetBundleUnloadOperation*> unloadOp);
    // public System.Void .ctor()
    // Offset: 0x5334E28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AssetBundleResource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AssetBundleResource*, creationType>()));
    }
    // private System.Void <GetAssetPreloadRequest>b__26_0(UnityEngine.AsyncOperation operation)
    // Offset: 0x5334E30
    void $GetAssetPreloadRequest$b__26_0(::UnityEngine::AsyncOperation* operation);
    // private System.Void <AddBeginWebRequestHandler>b__41_0(UnityEngine.Networking.UnityWebRequestAsyncOperation asyncOp)
    // Offset: 0x5334E3C
    void $AddBeginWebRequestHandler$b__41_0(::UnityEngine::Networking::UnityWebRequestAsyncOperation* asyncOp);
  }; // UnityEngine.ResourceManagement.ResourceProviders.AssetBundleResource
  #pragma pack(pop)
  static check_size<sizeof(AssetBundleResource), 156 + sizeof(int)> __UnityEngine_ResourceManagement_ResourceProviders_AssetBundleResourceSizeCheck;
  static_assert(sizeof(AssetBundleResource) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::get_HasTimedOut
// Il2CppName: get_HasTimedOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)()>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::get_HasTimedOut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "get_HasTimedOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::get_BytesToDownload
// Il2CppName: get_BytesToDownload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)()>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::get_BytesToDownload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "get_BytesToDownload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::CreateWebRequest
// Il2CppName: CreateWebRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Networking::UnityWebRequest* (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::CreateWebRequest)> {
  static const MethodInfo* get() {
    static auto* loc = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceLocations", "IResourceLocation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "CreateWebRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loc});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::CreateWebRequest
// Il2CppName: CreateWebRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Networking::UnityWebRequest* (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(::StringW)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::CreateWebRequest)> {
  static const MethodInfo* get() {
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "CreateWebRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{url});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::GetAssetPreloadRequest
// Il2CppName: GetAssetPreloadRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AssetBundleRequest* (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)()>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::GetAssetPreloadRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "GetAssetPreloadRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::PercentComplete
// Il2CppName: PercentComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)()>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::PercentComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "PercentComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::GetDownloadStatus
// Il2CppName: GetDownloadStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ResourceManagement::AsyncOperations::DownloadStatus (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)()>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::GetDownloadStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "GetDownloadStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::GetAssetBundle
// Il2CppName: GetAssetBundle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AssetBundle* (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)()>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::GetAssetBundle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "GetAssetBundle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::AddBundleToProfiler
// Il2CppName: AddBundleToProfiler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(::UnityEngine::ResourceManagement::Profiling::ContentStatus, ::UnityEngine::ResourceManagement::Util::BundleSource)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::AddBundleToProfiler)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.Profiling", "ContentStatus")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.Util", "BundleSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "AddBundleToProfiler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status, source});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::RemoveBundleFromProfiler
// Il2CppName: RemoveBundleFromProfiler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)()>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::RemoveBundleFromProfiler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "RemoveBundleFromProfiler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::OnUnloadOperationComplete
// Il2CppName: OnUnloadOperationComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(::UnityEngine::AsyncOperation*)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::OnUnloadOperationComplete)> {
  static const MethodInfo* get() {
    static auto* op = &::il2cpp_utils::GetClassFromName("UnityEngine", "AsyncOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "OnUnloadOperationComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(::UnityEngine::ResourceManagement::ResourceProviders::ProvideHandle, ::UnityEngine::AssetBundleUnloadOperation*)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::Start)> {
  static const MethodInfo* get() {
    static auto* provideHandle = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceProviders", "ProvideHandle")->byval_arg;
    static auto* unloadOp = &::il2cpp_utils::GetClassFromName("UnityEngine", "AssetBundleUnloadOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provideHandle, unloadOp});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::WaitForCompletionHandler
// Il2CppName: WaitForCompletionHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)()>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::WaitForCompletionHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "WaitForCompletionHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::AddCallbackInvokeIfDone
// Il2CppName: AddCallbackInvokeIfDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(::UnityEngine::AsyncOperation*, ::System::Action_1<::UnityEngine::AsyncOperation*>*)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::AddCallbackInvokeIfDone)> {
  static const MethodInfo* get() {
    static auto* operation = &::il2cpp_utils::GetClassFromName("UnityEngine", "AsyncOperation")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "AsyncOperation")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "AddCallbackInvokeIfDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operation, callback});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::GetLoadInfo
// Il2CppName: GetLoadInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::ResourceManagement::ResourceProviders::ProvideHandle, ByRef<::UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::LoadType>, ByRef<::StringW>)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::GetLoadInfo)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceProviders", "ProvideHandle")->byval_arg;
    static auto* loadType = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceProviders", "AssetBundleResource/LoadType")->this_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "GetLoadInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, loadType, path});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::GetLoadInfo
// Il2CppName: GetLoadInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*, ::UnityEngine::ResourceManagement::ResourceManager*, ByRef<::UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::LoadType>, ByRef<::StringW>)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::GetLoadInfo)> {
  static const MethodInfo* get() {
    static auto* location = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceLocations", "IResourceLocation")->byval_arg;
    static auto* resourceManager = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement", "ResourceManager")->byval_arg;
    static auto* loadType = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceProviders", "AssetBundleResource/LoadType")->this_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "GetLoadInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{location, resourceManager, loadType, path});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::BeginOperation
// Il2CppName: BeginOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)()>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::BeginOperation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "BeginOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::LoadLocalBundle
// Il2CppName: LoadLocalBundle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)()>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::LoadLocalBundle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "LoadLocalBundle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::EnqueueWebRequest
// Il2CppName: EnqueueWebRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ResourceManagement::WebRequestQueueOperation* (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(::StringW)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::EnqueueWebRequest)> {
  static const MethodInfo* get() {
    static auto* internalId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "EnqueueWebRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{internalId});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::AddBeginWebRequestHandler
// Il2CppName: AddBeginWebRequestHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(::UnityEngine::ResourceManagement::WebRequestQueueOperation*)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::AddBeginWebRequestHandler)> {
  static const MethodInfo* get() {
    static auto* webRequestQueueOperation = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement", "WebRequestQueueOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "AddBeginWebRequestHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{webRequestQueueOperation});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::BeginWebRequestOperation
// Il2CppName: BeginWebRequestOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(::UnityEngine::AsyncOperation*)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::BeginWebRequestOperation)> {
  static const MethodInfo* get() {
    static auto* asyncOp = &::il2cpp_utils::GetClassFromName("UnityEngine", "AsyncOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "BeginWebRequestOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncOp});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(float)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::Update)> {
  static const MethodInfo* get() {
    static auto* unscaledDeltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unscaledDeltaTime});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::LocalRequestOperationCompleted
// Il2CppName: LocalRequestOperationCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(::UnityEngine::AsyncOperation*)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::LocalRequestOperationCompleted)> {
  static const MethodInfo* get() {
    static auto* op = &::il2cpp_utils::GetClassFromName("UnityEngine", "AsyncOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "LocalRequestOperationCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::CompleteBundleLoad
// Il2CppName: CompleteBundleLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(::UnityEngine::AssetBundle*)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::CompleteBundleLoad)> {
  static const MethodInfo* get() {
    static auto* bundle = &::il2cpp_utils::GetClassFromName("UnityEngine", "AssetBundle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "CompleteBundleLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bundle});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::WebRequestOperationCompleted
// Il2CppName: WebRequestOperationCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(::UnityEngine::AsyncOperation*)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::WebRequestOperationCompleted)> {
  static const MethodInfo* get() {
    static auto* op = &::il2cpp_utils::GetClassFromName("UnityEngine", "AsyncOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "WebRequestOperationCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::Unload
// Il2CppName: Unload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(ByRef<::UnityEngine::AssetBundleUnloadOperation*>)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::Unload)> {
  static const MethodInfo* get() {
    static auto* unloadOp = &::il2cpp_utils::GetClassFromName("UnityEngine", "AssetBundleUnloadOperation")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "Unload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unloadOp});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::$GetAssetPreloadRequest$b__26_0
// Il2CppName: <GetAssetPreloadRequest>b__26_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(::UnityEngine::AsyncOperation*)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::$GetAssetPreloadRequest$b__26_0)> {
  static const MethodInfo* get() {
    static auto* operation = &::il2cpp_utils::GetClassFromName("UnityEngine", "AsyncOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "<GetAssetPreloadRequest>b__26_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operation});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::$AddBeginWebRequestHandler$b__41_0
// Il2CppName: <AddBeginWebRequestHandler>b__41_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::*)(::UnityEngine::Networking::UnityWebRequestAsyncOperation*)>(&UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource::$AddBeginWebRequestHandler$b__41_0)> {
  static const MethodInfo* get() {
    static auto* asyncOp = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "UnityWebRequestAsyncOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceProviders::AssetBundleResource*), "<AddBeginWebRequestHandler>b__41_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncOp});
  }
};
