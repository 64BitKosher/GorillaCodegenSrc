// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ResourceManagement.Util.BinaryStorageBuffer
#include "UnityEngine/ResourceManagement/Util/BinaryStorageBuffer.hpp"
// Including type: UnityEngine.Hash128
#include "UnityEngine/Hash128.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::ResourceManagement::Util
namespace UnityEngine::ResourceManagement::Util {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*, "UnityEngine.ResourceManagement.Util", "BinaryStorageBuffer/Writer");
// Type namespace: UnityEngine.ResourceManagement.Util
namespace UnityEngine::ResourceManagement::Util {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ResourceManagement.Util.BinaryStorageBuffer/Writer
  // [TokenAttribute] Offset: FFFFFFFF
  class BinaryStorageBuffer::Writer : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Chunk
    class Chunk;
    // Nested type: ::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::StringParts
    struct StringParts;
    // Size: 0xD
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.ResourceManagement.Util.BinaryStorageBuffer/Writer/StringParts
    // [TokenAttribute] Offset: FFFFFFFF
    struct StringParts/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String str
      // Size: 0x8
      // Offset: 0x0
      ::StringW str;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.UInt32 dataSize
      // Size: 0x4
      // Offset: 0x8
      uint dataSize;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public System.Boolean isUnicode
      // Size: 0x1
      // Offset: 0xC
      bool isUnicode;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: StringParts
      constexpr StringParts(::StringW str_ = {}, uint dataSize_ = {}, bool isUnicode_ = {}) noexcept : str{str_}, dataSize{dataSize_}, isUnicode{isUnicode_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String str
      [[deprecated("Use field access instead!")]] ::StringW& dyn_str();
      // Get instance field reference: public System.UInt32 dataSize
      [[deprecated("Use field access instead!")]] uint& dyn_dataSize();
      // Get instance field reference: public System.Boolean isUnicode
      [[deprecated("Use field access instead!")]] bool& dyn_isUnicode();
    }; // UnityEngine.ResourceManagement.Util.BinaryStorageBuffer/Writer/StringParts
    #pragma pack(pop)
    static check_size<sizeof(BinaryStorageBuffer::Writer::StringParts), 12 + sizeof(bool)> __UnityEngine_ResourceManagement_Util_BinaryStorageBuffer_Writer_StringPartsSizeCheck;
    static_assert(sizeof(BinaryStorageBuffer::Writer::StringParts) == 0xD);
    public:
    // private System.UInt32 totalBytes
    // Size: 0x4
    // Offset: 0x10
    uint totalBytes;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 defaulChunkSize
    // Size: 0x4
    // Offset: 0x14
    uint defaulChunkSize;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Collections.Generic.List`1<UnityEngine.ResourceManagement.Util.BinaryStorageBuffer/Writer/Chunk> chunks
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Chunk*>* chunks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Chunk*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Hash128,System.UInt32> existingValues
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Hash128, uint>* existingValues;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Hash128, uint>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Type,UnityEngine.ResourceManagement.Util.BinaryStorageBuffer/ISerializationAdapter> serializationAdapters
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::System::Type*, ::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::ISerializationAdapter*>* serializationAdapters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::ISerializationAdapter*>*) == 0x8);
    public:
    // Get instance field reference: private System.UInt32 totalBytes
    [[deprecated("Use field access instead!")]] uint& dyn_totalBytes();
    // Get instance field reference: private System.UInt32 defaulChunkSize
    [[deprecated("Use field access instead!")]] uint& dyn_defaulChunkSize();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.ResourceManagement.Util.BinaryStorageBuffer/Writer/Chunk> chunks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Chunk*>*& dyn_chunks();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Hash128,System.UInt32> existingValues
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Hash128, uint>*& dyn_existingValues();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Type,UnityEngine.ResourceManagement.Util.BinaryStorageBuffer/ISerializationAdapter> serializationAdapters
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Type*, ::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::ISerializationAdapter*>*& dyn_serializationAdapters();
    // public System.UInt32 get_Length()
    // Offset: 0x532D5B0
    uint get_Length();
    // public System.Void .ctor(System.Int32 chunkSize, params UnityEngine.ResourceManagement.Util.BinaryStorageBuffer/ISerializationAdapter[] adapters)
    // Offset: 0x532D5B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BinaryStorageBuffer::Writer* New_ctor(int chunkSize, ::ArrayW<::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::ISerializationAdapter*> adapters) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BinaryStorageBuffer::Writer*, creationType>(chunkSize, adapters)));
    }
    // private UnityEngine.ResourceManagement.Util.BinaryStorageBuffer/Writer/Chunk FindChunkWithSpace(System.UInt32 length)
    // Offset: 0x532D884
    ::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Chunk* FindChunkWithSpace(uint length);
    // private System.UInt32 WriteInternal(System.Void* pData, System.UInt32 dataSize, System.Boolean prefixSize)
    // Offset: 0x532DA38
    uint WriteInternal(void* pData, uint dataSize, bool prefixSize);
    // private System.UInt32 ReserveInternal(System.UInt32 dataSize, System.Boolean prefixSize)
    // Offset: 0x532DBE8
    uint ReserveInternal(uint dataSize, bool prefixSize);
    // private System.Void WriteInternal(System.UInt32 id, System.Void* pData, System.UInt32 dataSize, System.Boolean prefixSize)
    // Offset: 0x532DC40
    void WriteInternal(uint id, void* pData, uint dataSize, bool prefixSize);
    // public System.UInt32 Reserve()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    uint Reserve() {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Reserve");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reserve", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___generic__method);
    }
    // public System.UInt32 Write(in T val)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    uint Write(ByRef<T> val) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Write");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___generic__method, byref(val));
    }
    // public System.UInt32 Write(T val)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    uint Write_(T val) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Write");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___generic__method, val);
    }
    // public System.UInt32 Write(System.UInt32 offset, in T val)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    uint Write(uint offset, ByRef<T> val) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Write");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(val)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___generic__method, offset, byref(val));
    }
    // public System.UInt32 Write(System.UInt32 offset, T val)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    uint Write_(uint offset, T val) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Write");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(val)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___generic__method, offset, val);
    }
    // public System.UInt32 Reserve(System.UInt32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    uint Reserve(uint count) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Reserve");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reserve", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___generic__method, count);
    }
    // public System.UInt32 Write(T[] values, System.Boolean hashElements)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    uint Write(::ArrayW<T> values, bool hashElements) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Write");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(hashElements)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___generic__method, values, hashElements);
    }
    // public System.UInt32 Write(System.UInt32 offset, T[] values, System.Boolean hashElements)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    uint Write(uint offset, ::ArrayW<T> values, bool hashElements) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Write");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(hashElements)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___generic__method, offset, values, hashElements);
    }
    // public System.UInt32 WriteObjects(System.Collections.Generic.IEnumerable`1<T> objs, System.Boolean serizalizeTypeData)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    uint WriteObjects(::System::Collections::Generic::IEnumerable_1<T>* objs, bool serizalizeTypeData) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteObjects");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteObjects", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(objs), ::il2cpp_utils::ExtractType(serizalizeTypeData)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___generic__method, objs, serizalizeTypeData);
    }
    // public System.UInt32 WriteObject(System.Object obj, System.Boolean serializeTypeData)
    // Offset: 0x532DEC0
    uint WriteObject(::Il2CppObject* obj, bool serializeTypeData);
    // public System.UInt32 WriteString(System.String str, System.Char sep)
    // Offset: 0x532C5B8
    uint WriteString(::StringW str, ::Il2CppChar sep);
    // private System.UInt32 WriteStringInternal(System.String val, System.Text.Encoding enc)
    // Offset: 0x532E244
    uint WriteStringInternal(::StringW val, ::System::Text::Encoding* enc);
    // public System.Byte[] SerializeToByteArray()
    // Offset: 0x532E2A0
    ::ArrayW<uint8_t> SerializeToByteArray();
    // public System.UInt32 SerializeToStream(System.IO.Stream str)
    // Offset: 0x532E4EC
    uint SerializeToStream(::System::IO::Stream* str);
    // static private System.Boolean IsUnicode(System.String str)
    // Offset: 0x532E66C
    static bool IsUnicode(::StringW str);
    // private System.UInt32 WriteAutoEncodedString(System.String str)
    // Offset: 0x532E1A4
    uint WriteAutoEncodedString(::StringW str);
    // private System.UInt32 WriteUnicodeString(System.String str)
    // Offset: 0x532E6D8
    uint WriteUnicodeString(::StringW str);
    // static private System.UInt32 ComputeStringSize(System.String str, out System.Boolean isUnicode)
    // Offset: 0x532E710
    static uint ComputeStringSize(::StringW str, ByRef<bool> isUnicode);
    // private System.UInt32 RecurseDynamicStringParts(UnityEngine.ResourceManagement.Util.BinaryStorageBuffer/Writer/StringParts[] parts, System.Int32 index, System.Char sep, System.UInt32 minSize)
    // Offset: 0x532E764
    uint RecurseDynamicStringParts(::ArrayW<::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::StringParts> parts, int index, ::Il2CppChar sep, uint minSize);
    // private System.UInt32 WriteDynamicString(System.String str, System.Char sep)
    // Offset: 0x532E008
    uint WriteDynamicString(::StringW str, ::Il2CppChar sep);
  }; // UnityEngine.ResourceManagement.Util.BinaryStorageBuffer/Writer
  #pragma pack(pop)
  static check_size<sizeof(BinaryStorageBuffer::Writer), 40 + sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::ISerializationAdapter*>*)> __UnityEngine_ResourceManagement_Util_BinaryStorageBuffer_WriterSizeCheck;
  static_assert(sizeof(BinaryStorageBuffer::Writer) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::StringParts, "UnityEngine.ResourceManagement.Util", "BinaryStorageBuffer/Writer/StringParts");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::*)()>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::FindChunkWithSpace
// Il2CppName: FindChunkWithSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Chunk* (UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::*)(uint)>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::FindChunkWithSpace)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "FindChunkWithSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteInternal
// Il2CppName: WriteInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::*)(void*, uint, bool)>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteInternal)> {
  static const MethodInfo* get() {
    static auto* pData = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* dataSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* prefixSize = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "WriteInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pData, dataSize, prefixSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::ReserveInternal
// Il2CppName: ReserveInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::*)(uint, bool)>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::ReserveInternal)> {
  static const MethodInfo* get() {
    static auto* dataSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* prefixSize = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "ReserveInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataSize, prefixSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteInternal
// Il2CppName: WriteInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::*)(uint, void*, uint, bool)>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteInternal)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pData = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* dataSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* prefixSize = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "WriteInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, pData, dataSize, prefixSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Reserve
// Il2CppName: Reserve
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Write
// Il2CppName: Write
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Write_
// Il2CppName: Write
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Write
// Il2CppName: Write
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Write_
// Il2CppName: Write
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Reserve
// Il2CppName: Reserve
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Write
// Il2CppName: Write
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::Write
// Il2CppName: Write
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteObjects
// Il2CppName: WriteObjects
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteObject
// Il2CppName: WriteObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::*)(::Il2CppObject*, bool)>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteObject)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* serializeTypeData = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "WriteObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, serializeTypeData});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::*)(::StringW, ::Il2CppChar)>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteString)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sep = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, sep});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteStringInternal
// Il2CppName: WriteStringInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::*)(::StringW, ::System::Text::Encoding*)>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteStringInternal)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* enc = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "WriteStringInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val, enc});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::SerializeToByteArray
// Il2CppName: SerializeToByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::*)()>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::SerializeToByteArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "SerializeToByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::SerializeToStream
// Il2CppName: SerializeToStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::*)(::System::IO::Stream*)>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::SerializeToStream)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "SerializeToStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::IsUnicode
// Il2CppName: IsUnicode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::IsUnicode)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "IsUnicode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteAutoEncodedString
// Il2CppName: WriteAutoEncodedString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::*)(::StringW)>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteAutoEncodedString)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "WriteAutoEncodedString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteUnicodeString
// Il2CppName: WriteUnicodeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::*)(::StringW)>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteUnicodeString)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "WriteUnicodeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::ComputeStringSize
// Il2CppName: ComputeStringSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::StringW, ByRef<bool>)>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::ComputeStringSize)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isUnicode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "ComputeStringSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, isUnicode});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::RecurseDynamicStringParts
// Il2CppName: RecurseDynamicStringParts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::*)(::ArrayW<::UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::StringParts>, int, ::Il2CppChar, uint)>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::RecurseDynamicStringParts)> {
  static const MethodInfo* get() {
    static auto* parts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.Util", "BinaryStorageBuffer/Writer/StringParts"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sep = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* minSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "RecurseDynamicStringParts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parts, index, sep, minSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteDynamicString
// Il2CppName: WriteDynamicString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::*)(::StringW, ::Il2CppChar)>(&UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer::WriteDynamicString)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sep = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::Util::BinaryStorageBuffer::Writer*), "WriteDynamicString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, sep});
  }
};
