// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::ResourceManagement::Util
namespace UnityEngine::ResourceManagement::Util {
  // Skipping declaration: Entry because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: LinkedList`1<T>
  template<typename T>
  class LinkedList_1;
  // Forward declaring type: LinkedListNode`1<T>
  template<typename T>
  class LinkedListNode_1;
}
// Completed forward declares
// Type namespace: UnityEngine.ResourceManagement.Util
namespace UnityEngine::ResourceManagement::Util {
  // Forward declaring type: LRUCache`2<TKey, TValue>
  template<typename TKey, typename TValue>
  struct LRUCache_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::UnityEngine::ResourceManagement::Util::LRUCache_2, "UnityEngine.ResourceManagement.Util", "LRUCache`2");
// Type namespace: UnityEngine.ResourceManagement.Util
namespace UnityEngine::ResourceManagement::Util {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ResourceManagement.Util.LRUCache`2
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TKey, typename TValue>
  struct LRUCache_2/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::ResourceManagement::Util::LRUCache_2::Entry<TKey, TValue>
    struct Entry;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.ResourceManagement.Util.LRUCache`2/Entry
    // [TokenAttribute] Offset: FFFFFFFF
    struct Entry : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::IEquatable_1<typename ::UnityEngine::ResourceManagement::Util::LRUCache_2<TKey, TValue>::Entry>*/ {
      public:
      using declaring_type = LRUCache_2<TKey, TValue>;
      static constexpr std::string_view NESTED_NAME = "Entry";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // public System.Collections.Generic.LinkedListNode`1<TKey> lruNode
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::LinkedListNode_1<TKey>* lruNode;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::LinkedListNode_1<TKey>*) == 0x8);
      // public TValue Value
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TValue Value;
      public:
      // Creating value type constructor for type: Entry
      constexpr Entry(::System::Collections::Generic::LinkedListNode_1<TKey>* lruNode_ = {}, TValue Value_ = {}) noexcept : lruNode{lruNode_}, Value{Value_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::IEquatable_1<typename ::UnityEngine::ResourceManagement::Util::LRUCache_2<TKey, TValue>::Entry>
      operator ::System::IEquatable_1<typename ::UnityEngine::ResourceManagement::Util::LRUCache_2<TKey, TValue>::Entry>() noexcept {
        return *reinterpret_cast<::System::IEquatable_1<typename ::UnityEngine::ResourceManagement::Util::LRUCache_2<TKey, TValue>::Entry>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Collections.Generic.LinkedListNode`1<TKey> lruNode
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::LinkedListNode_1<TKey>*& dyn_lruNode() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::LRUCache_2::Entry::dyn_lruNode");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lruNode"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::LinkedListNode_1<TKey>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public TValue Value
      [[deprecated("Use field access instead!")]] TValue& dyn_Value() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::LRUCache_2::Entry::dyn_Value");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Value"))->offset;
        return *reinterpret_cast<TValue*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Boolean Equals(UnityEngine.ResourceManagement.Util.LRUCache`2/Entry<TKey,TValue> other)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool Equals(typename ::UnityEngine::ResourceManagement::Util::LRUCache_2<TKey, TValue>::Entry other) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::LRUCache_2::Entry::Equals");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::ResourceManagement::Util::LRUCache_2<TKey, TValue>::Entry), -1)));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
      }
      // public override System.Int32 GetHashCode()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.ValueType
      // Base method: System.Int32 ValueType::GetHashCode()
      int GetHashCode() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::LRUCache_2::Entry::GetHashCode");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
      }
    }; // UnityEngine.ResourceManagement.Util.LRUCache`2/Entry
    // Could not write size check! Type: UnityEngine.ResourceManagement.Util.LRUCache`2/Entry is generic, or has no fields that are valid for size checks!
    public:
    // private System.Int32 entryLimit
    // Size: 0x4
    // Offset: 0x0
    int entryLimit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.Dictionary`2<TKey,UnityEngine.ResourceManagement.Util.LRUCache`2/Entry<TKey,TValue>> cache
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Dictionary_2<TKey, typename ::UnityEngine::ResourceManagement::Util::LRUCache_2<TKey, TValue>::Entry>* cache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<TKey, typename ::UnityEngine::ResourceManagement::Util::LRUCache_2<TKey, TValue>::Entry>*) == 0x8);
    // private System.Collections.Generic.LinkedList`1<TKey> lru
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::LinkedList_1<TKey>* lru;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::LinkedList_1<TKey>*) == 0x8);
    public:
    // Creating value type constructor for type: LRUCache_2
    constexpr LRUCache_2(int entryLimit_ = {}, ::System::Collections::Generic::Dictionary_2<TKey, typename ::UnityEngine::ResourceManagement::Util::LRUCache_2<TKey, TValue>::Entry>* cache_ = {}, ::System::Collections::Generic::LinkedList_1<TKey>* lru_ = {}) noexcept : entryLimit{entryLimit_}, cache{cache_}, lru{lru_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 entryLimit
    [[deprecated("Use field access instead!")]] int& dyn_entryLimit() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::LRUCache_2::dyn_entryLimit");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "entryLimit"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.Dictionary`2<TKey,UnityEngine.ResourceManagement.Util.LRUCache`2/Entry<TKey,TValue>> cache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<TKey, typename ::UnityEngine::ResourceManagement::Util::LRUCache_2<TKey, TValue>::Entry>*& dyn_cache() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::LRUCache_2::dyn_cache");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cache"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<TKey, typename ::UnityEngine::ResourceManagement::Util::LRUCache_2<TKey, TValue>::Entry>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.LinkedList`1<TKey> lru
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::LinkedList_1<TKey>*& dyn_lru() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::LRUCache_2::dyn_lru");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lru"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::LinkedList_1<TKey>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.Int32 limit)
    // Offset: 0xFFFFFFFFFFFFFFFF
    LRUCache_2(int limit) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::LRUCache_2::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(limit)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, limit);
    }
    // public System.Boolean TryAdd(TKey id, TValue obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryAdd(TKey id, TValue obj) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::LRUCache_2::TryAdd");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryAdd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(obj)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, id, obj);
    }
    // public System.Boolean TryGet(TKey offset, out TValue val)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGet(TKey offset, ByRef<TValue> val) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::Util::LRUCache_2::TryGet");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractIndependentType<TValue&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, offset, byref(val));
    }
  }; // UnityEngine.ResourceManagement.Util.LRUCache`2
  // Could not write size check! Type: UnityEngine.ResourceManagement.Util.LRUCache`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
