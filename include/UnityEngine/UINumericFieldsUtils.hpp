// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ExpressionEvaluator
#include "UnityEngine/ExpressionEvaluator.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: UINumericFieldsUtils
  class UINumericFieldsUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UINumericFieldsUtils);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UINumericFieldsUtils*, "UnityEngine", "UINumericFieldsUtils");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UINumericFieldsUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class UINumericFieldsUtils : public ::Il2CppObject {
    public:
    // Get static field: static public readonly System.String k_AllowedCharactersForFloat
    static ::StringW _get_k_AllowedCharactersForFloat();
    // Set static field: static public readonly System.String k_AllowedCharactersForFloat
    static void _set_k_AllowedCharactersForFloat(::StringW value);
    // Get static field: static public readonly System.String k_AllowedCharactersForInt
    static ::StringW _get_k_AllowedCharactersForInt();
    // Set static field: static public readonly System.String k_AllowedCharactersForInt
    static void _set_k_AllowedCharactersForInt(::StringW value);
    // Get static field: static public readonly System.String k_DoubleFieldFormatString
    static ::StringW _get_k_DoubleFieldFormatString();
    // Set static field: static public readonly System.String k_DoubleFieldFormatString
    static void _set_k_DoubleFieldFormatString(::StringW value);
    // Get static field: static public readonly System.String k_FloatFieldFormatString
    static ::StringW _get_k_FloatFieldFormatString();
    // Set static field: static public readonly System.String k_FloatFieldFormatString
    static void _set_k_FloatFieldFormatString(::StringW value);
    // Get static field: static public readonly System.String k_IntFieldFormatString
    static ::StringW _get_k_IntFieldFormatString();
    // Set static field: static public readonly System.String k_IntFieldFormatString
    static void _set_k_IntFieldFormatString(::StringW value);
    // static public System.Boolean TryConvertStringToDouble(System.String str, out System.Double value, out UnityEngine.ExpressionEvaluator/Expression expr)
    // Offset: 0x54CED48
    static bool TryConvertStringToDouble(::StringW str, ByRef<double> value, ByRef<::UnityEngine::ExpressionEvaluator::Expression*> expr);
    // static public System.Boolean TryConvertStringToDouble(System.String str, System.String initialValueAsString, out System.Double value)
    // Offset: 0x54CEEE4
    static bool TryConvertStringToDouble(::StringW str, ::StringW initialValueAsString, ByRef<double> value);
    // static public System.Boolean TryConvertStringToFloat(System.String str, System.String initialValueAsString, out System.Single value)
    // Offset: 0x54CEFEC
    static bool TryConvertStringToFloat(::StringW str, ::StringW initialValueAsString, ByRef<float> value);
    // static public System.Boolean TryConvertStringToLong(System.String str, out System.Int64 value, out UnityEngine.ExpressionEvaluator/Expression expr)
    // Offset: 0x54CF080
    static bool TryConvertStringToLong(::StringW str, ByRef<int64_t> value, ByRef<::UnityEngine::ExpressionEvaluator::Expression*> expr);
    // static public System.Boolean TryConvertStringToLong(System.String str, System.String initialValueAsString, out System.Int64 value)
    // Offset: 0x54CF104
    static bool TryConvertStringToLong(::StringW str, ::StringW initialValueAsString, ByRef<int64_t> value);
    // static public System.Boolean TryConvertStringToULong(System.String str, out System.UInt64 value, out UnityEngine.ExpressionEvaluator/Expression expr)
    // Offset: 0x54CF208
    static bool TryConvertStringToULong(::StringW str, ByRef<uint64_t> value, ByRef<::UnityEngine::ExpressionEvaluator::Expression*> expr);
    // static public System.Boolean TryConvertStringToULong(System.String str, System.String initialValueAsString, out System.UInt64 value)
    // Offset: 0x54CF28C
    static bool TryConvertStringToULong(::StringW str, ::StringW initialValueAsString, ByRef<uint64_t> value);
    // static public System.Boolean TryConvertStringToInt(System.String str, System.String initialValueAsString, out System.Int32 value)
    // Offset: 0x54CF390
    static bool TryConvertStringToInt(::StringW str, ::StringW initialValueAsString, ByRef<int> value);
    // static public System.Boolean TryConvertStringToUInt(System.String str, System.String initialValueAsString, out System.UInt32 value)
    // Offset: 0x54CF42C
    static bool TryConvertStringToUInt(::StringW str, ::StringW initialValueAsString, ByRef<uint> value);
    // static private System.Void .cctor()
    // Offset: 0x54CF4C8
    static void _cctor();
  }; // UnityEngine.UINumericFieldsUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UINumericFieldsUtils::TryConvertStringToDouble
// Il2CppName: TryConvertStringToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<double>, ByRef<::UnityEngine::ExpressionEvaluator::Expression*>)>(&UnityEngine::UINumericFieldsUtils::TryConvertStringToDouble)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    static auto* expr = &::il2cpp_utils::GetClassFromName("UnityEngine", "ExpressionEvaluator/Expression")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UINumericFieldsUtils*), "TryConvertStringToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, value, expr});
  }
};
// Writing MetadataGetter for method: UnityEngine::UINumericFieldsUtils::TryConvertStringToDouble
// Il2CppName: TryConvertStringToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ByRef<double>)>(&UnityEngine::UINumericFieldsUtils::TryConvertStringToDouble)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* initialValueAsString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UINumericFieldsUtils*), "TryConvertStringToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, initialValueAsString, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UINumericFieldsUtils::TryConvertStringToFloat
// Il2CppName: TryConvertStringToFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ByRef<float>)>(&UnityEngine::UINumericFieldsUtils::TryConvertStringToFloat)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* initialValueAsString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UINumericFieldsUtils*), "TryConvertStringToFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, initialValueAsString, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UINumericFieldsUtils::TryConvertStringToLong
// Il2CppName: TryConvertStringToLong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<int64_t>, ByRef<::UnityEngine::ExpressionEvaluator::Expression*>)>(&UnityEngine::UINumericFieldsUtils::TryConvertStringToLong)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* expr = &::il2cpp_utils::GetClassFromName("UnityEngine", "ExpressionEvaluator/Expression")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UINumericFieldsUtils*), "TryConvertStringToLong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, value, expr});
  }
};
// Writing MetadataGetter for method: UnityEngine::UINumericFieldsUtils::TryConvertStringToLong
// Il2CppName: TryConvertStringToLong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ByRef<int64_t>)>(&UnityEngine::UINumericFieldsUtils::TryConvertStringToLong)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* initialValueAsString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UINumericFieldsUtils*), "TryConvertStringToLong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, initialValueAsString, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UINumericFieldsUtils::TryConvertStringToULong
// Il2CppName: TryConvertStringToULong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<uint64_t>, ByRef<::UnityEngine::ExpressionEvaluator::Expression*>)>(&UnityEngine::UINumericFieldsUtils::TryConvertStringToULong)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* expr = &::il2cpp_utils::GetClassFromName("UnityEngine", "ExpressionEvaluator/Expression")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UINumericFieldsUtils*), "TryConvertStringToULong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, value, expr});
  }
};
// Writing MetadataGetter for method: UnityEngine::UINumericFieldsUtils::TryConvertStringToULong
// Il2CppName: TryConvertStringToULong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ByRef<uint64_t>)>(&UnityEngine::UINumericFieldsUtils::TryConvertStringToULong)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* initialValueAsString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UINumericFieldsUtils*), "TryConvertStringToULong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, initialValueAsString, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UINumericFieldsUtils::TryConvertStringToInt
// Il2CppName: TryConvertStringToInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ByRef<int>)>(&UnityEngine::UINumericFieldsUtils::TryConvertStringToInt)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* initialValueAsString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UINumericFieldsUtils*), "TryConvertStringToInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, initialValueAsString, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UINumericFieldsUtils::TryConvertStringToUInt
// Il2CppName: TryConvertStringToUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ByRef<uint>)>(&UnityEngine::UINumericFieldsUtils::TryConvertStringToUInt)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* initialValueAsString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UINumericFieldsUtils*), "TryConvertStringToUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, initialValueAsString, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UINumericFieldsUtils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UINumericFieldsUtils::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UINumericFieldsUtils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
