// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BaseTreeViewController
#include "UnityEngine/UIElements/BaseTreeViewController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: MultiColumnController
  class MultiColumnController;
  // Forward declaring type: Columns
  class Columns;
  // Forward declaring type: SortColumnDescriptions
  class SortColumnDescriptions;
  // Forward declaring type: SortColumnDescription
  class SortColumnDescription;
  // Forward declaring type: ReusableCollectionItem
  class ReusableCollectionItem;
  // Forward declaring type: VisualElement
  class VisualElement;
}
// Forward declaring namespace: UnityEngine::UIElements::Internal
namespace UnityEngine::UIElements::Internal {
  // Forward declaring type: MultiColumnCollectionHeader
  class MultiColumnCollectionHeader;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: MultiColumnTreeViewController
  class MultiColumnTreeViewController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::MultiColumnTreeViewController);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::MultiColumnTreeViewController*, "UnityEngine.UIElements", "MultiColumnTreeViewController");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.MultiColumnTreeViewController
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiColumnTreeViewController : public ::UnityEngine::UIElements::BaseTreeViewController {
    public:
    public:
    // private UnityEngine.UIElements.MultiColumnController m_ColumnController
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::UIElements::MultiColumnController* m_ColumnController;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::MultiColumnController*) == 0x8);
    public:
    // Creating conversion operator: operator ::UnityEngine::UIElements::MultiColumnController*
    constexpr operator ::UnityEngine::UIElements::MultiColumnController*() const noexcept {
      return m_ColumnController;
    }
    // Get instance field reference: private UnityEngine.UIElements.MultiColumnController m_ColumnController
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::MultiColumnController*& dyn_m_ColumnController();
    // public UnityEngine.UIElements.MultiColumnController get_columnController()
    // Offset: 0x559FB80
    ::UnityEngine::UIElements::MultiColumnController* get_columnController();
    // UnityEngine.UIElements.Internal.MultiColumnCollectionHeader get_header()
    // Offset: 0x559FB88
    ::UnityEngine::UIElements::Internal::MultiColumnCollectionHeader* get_header();
    // protected System.Void .ctor(UnityEngine.UIElements.Columns columns, UnityEngine.UIElements.SortColumnDescriptions sortDescriptions, System.Collections.Generic.List`1<UnityEngine.UIElements.SortColumnDescription> sortedColumns)
    // Offset: 0x559FBA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiColumnTreeViewController* New_ctor(::UnityEngine::UIElements::Columns* columns, ::UnityEngine::UIElements::SortColumnDescriptions* sortDescriptions, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::SortColumnDescription*>* sortedColumns) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MultiColumnTreeViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiColumnTreeViewController*, creationType>(columns, sortDescriptions, sortedColumns)));
    }
    // override System.Void InvokeMakeItem(UnityEngine.UIElements.ReusableCollectionItem reusableItem)
    // Offset: 0x559FC54
    // Implemented from: UnityEngine.UIElements.BaseTreeViewController
    // Base method: System.Void BaseTreeViewController::InvokeMakeItem(UnityEngine.UIElements.ReusableCollectionItem reusableItem)
    void InvokeMakeItem(::UnityEngine::UIElements::ReusableCollectionItem* reusableItem);
    // protected override UnityEngine.UIElements.VisualElement MakeItem()
    // Offset: 0x55A0104
    // Implemented from: UnityEngine.UIElements.CollectionViewController
    // Base method: UnityEngine.UIElements.VisualElement CollectionViewController::MakeItem()
    ::UnityEngine::UIElements::VisualElement* MakeItem();
    // protected override System.Void BindItem(UnityEngine.UIElements.VisualElement element, System.Int32 index)
    // Offset: 0x55A0120
    // Implemented from: UnityEngine.UIElements.CollectionViewController
    // Base method: System.Void CollectionViewController::BindItem(UnityEngine.UIElements.VisualElement element, System.Int32 index)
    void BindItem(::UnityEngine::UIElements::VisualElement* element, int index);
    // protected override System.Void UnbindItem(UnityEngine.UIElements.VisualElement element, System.Int32 index)
    // Offset: 0x55A01A8
    // Implemented from: UnityEngine.UIElements.CollectionViewController
    // Base method: System.Void CollectionViewController::UnbindItem(UnityEngine.UIElements.VisualElement element, System.Int32 index)
    void UnbindItem(::UnityEngine::UIElements::VisualElement* element, int index);
    // protected override System.Void DestroyItem(UnityEngine.UIElements.VisualElement element)
    // Offset: 0x55A01C4
    // Implemented from: UnityEngine.UIElements.CollectionViewController
    // Base method: System.Void CollectionViewController::DestroyItem(UnityEngine.UIElements.VisualElement element)
    void DestroyItem(::UnityEngine::UIElements::VisualElement* element);
    // protected override System.Void PrepareView()
    // Offset: 0x55A01E0
    // Implemented from: UnityEngine.UIElements.CollectionViewController
    // Base method: System.Void CollectionViewController::PrepareView()
    void PrepareView();
    // public override System.Void Dispose()
    // Offset: 0x55A0204
    // Implemented from: UnityEngine.UIElements.CollectionViewController
    // Base method: System.Void CollectionViewController::Dispose()
    void Dispose();
  }; // UnityEngine.UIElements.MultiColumnTreeViewController
  #pragma pack(pop)
  static check_size<sizeof(MultiColumnTreeViewController), 88 + sizeof(::UnityEngine::UIElements::MultiColumnController*)> __UnityEngine_UIElements_MultiColumnTreeViewControllerSizeCheck;
  static_assert(sizeof(MultiColumnTreeViewController) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::MultiColumnTreeViewController::get_columnController
// Il2CppName: get_columnController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::MultiColumnController* (UnityEngine::UIElements::MultiColumnTreeViewController::*)()>(&UnityEngine::UIElements::MultiColumnTreeViewController::get_columnController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MultiColumnTreeViewController*), "get_columnController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MultiColumnTreeViewController::get_header
// Il2CppName: get_header
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Internal::MultiColumnCollectionHeader* (UnityEngine::UIElements::MultiColumnTreeViewController::*)()>(&UnityEngine::UIElements::MultiColumnTreeViewController::get_header)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MultiColumnTreeViewController*), "get_header", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MultiColumnTreeViewController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::MultiColumnTreeViewController::InvokeMakeItem
// Il2CppName: InvokeMakeItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MultiColumnTreeViewController::*)(::UnityEngine::UIElements::ReusableCollectionItem*)>(&UnityEngine::UIElements::MultiColumnTreeViewController::InvokeMakeItem)> {
  static const MethodInfo* get() {
    static auto* reusableItem = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ReusableCollectionItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MultiColumnTreeViewController*), "InvokeMakeItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reusableItem});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MultiColumnTreeViewController::MakeItem
// Il2CppName: MakeItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::MultiColumnTreeViewController::*)()>(&UnityEngine::UIElements::MultiColumnTreeViewController::MakeItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MultiColumnTreeViewController*), "MakeItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MultiColumnTreeViewController::BindItem
// Il2CppName: BindItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MultiColumnTreeViewController::*)(::UnityEngine::UIElements::VisualElement*, int)>(&UnityEngine::UIElements::MultiColumnTreeViewController::BindItem)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MultiColumnTreeViewController*), "BindItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element, index});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MultiColumnTreeViewController::UnbindItem
// Il2CppName: UnbindItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MultiColumnTreeViewController::*)(::UnityEngine::UIElements::VisualElement*, int)>(&UnityEngine::UIElements::MultiColumnTreeViewController::UnbindItem)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MultiColumnTreeViewController*), "UnbindItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element, index});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MultiColumnTreeViewController::DestroyItem
// Il2CppName: DestroyItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MultiColumnTreeViewController::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::MultiColumnTreeViewController::DestroyItem)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MultiColumnTreeViewController*), "DestroyItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MultiColumnTreeViewController::PrepareView
// Il2CppName: PrepareView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MultiColumnTreeViewController::*)()>(&UnityEngine::UIElements::MultiColumnTreeViewController::PrepareView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MultiColumnTreeViewController*), "PrepareView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MultiColumnTreeViewController::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MultiColumnTreeViewController::*)()>(&UnityEngine::UIElements::MultiColumnTreeViewController::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MultiColumnTreeViewController*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
