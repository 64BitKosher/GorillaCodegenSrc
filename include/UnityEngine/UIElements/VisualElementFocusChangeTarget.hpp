// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.FocusChangeDirection
#include "UnityEngine/UIElements/FocusChangeDirection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Focusable
  class Focusable;
  // Forward declaring type: ObjectPool`1<T>
  template<typename T>
  class ObjectPool_1;
  // Forward declaring type: FocusController
  class FocusController;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElementFocusChangeTarget
  class VisualElementFocusChangeTarget;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::VisualElementFocusChangeTarget);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualElementFocusChangeTarget*, "UnityEngine.UIElements", "VisualElementFocusChangeTarget");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.VisualElementFocusChangeTarget
  // [TokenAttribute] Offset: FFFFFFFF
  class VisualElementFocusChangeTarget : public ::UnityEngine::UIElements::FocusChangeDirection {
    public:
    // Writing base type padding for base size: 0x14 to desired offset: 0x18
    char ___base_padding[0x4] = {};
    // Nested type: ::UnityEngine::UIElements::VisualElementFocusChangeTarget::$$c
    class $$c;
    public:
    // private UnityEngine.UIElements.Focusable <target>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::Focusable* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Focusable*) == 0x8);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get static field: static private readonly UnityEngine.UIElements.ObjectPool`1<UnityEngine.UIElements.VisualElementFocusChangeTarget> Pool
    static ::UnityEngine::UIElements::ObjectPool_1<::UnityEngine::UIElements::VisualElementFocusChangeTarget*>* _get_Pool();
    // Set static field: static private readonly UnityEngine.UIElements.ObjectPool`1<UnityEngine.UIElements.VisualElementFocusChangeTarget> Pool
    static void _set_Pool(::UnityEngine::UIElements::ObjectPool_1<::UnityEngine::UIElements::VisualElementFocusChangeTarget*>* value);
    // Get instance field reference: private UnityEngine.UIElements.Focusable <target>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Focusable*& dyn_$target$k__BackingField();
    // static public UnityEngine.UIElements.VisualElementFocusChangeTarget GetPooled(UnityEngine.UIElements.Focusable target)
    // Offset: 0x55C22F4
    static ::UnityEngine::UIElements::VisualElementFocusChangeTarget* GetPooled(::UnityEngine::UIElements::Focusable* target);
    // public System.Void .ctor()
    // Offset: 0x55C2458
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisualElementFocusChangeTarget* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VisualElementFocusChangeTarget::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisualElementFocusChangeTarget*, creationType>()));
    }
    // public UnityEngine.UIElements.Focusable get_target()
    // Offset: 0x55C24F8
    ::UnityEngine::UIElements::Focusable* get_target();
    // private System.Void set_target(UnityEngine.UIElements.Focusable value)
    // Offset: 0x55C2500
    void set_target(::UnityEngine::UIElements::Focusable* value);
    // protected override System.Void Dispose()
    // Offset: 0x55C238C
    // Implemented from: UnityEngine.UIElements.FocusChangeDirection
    // Base method: System.Void FocusChangeDirection::Dispose()
    void Dispose();
    // override System.Void ApplyTo(UnityEngine.UIElements.FocusController focusController, UnityEngine.UIElements.Focusable f)
    // Offset: 0x55C241C
    // Implemented from: UnityEngine.UIElements.FocusChangeDirection
    // Base method: System.Void FocusChangeDirection::ApplyTo(UnityEngine.UIElements.FocusController focusController, UnityEngine.UIElements.Focusable f)
    void ApplyTo(::UnityEngine::UIElements::FocusController* focusController, ::UnityEngine::UIElements::Focusable* f);
    // static private System.Void .cctor()
    // Offset: 0x55C2508
    // Implemented from: UnityEngine.UIElements.FocusChangeDirection
    // Base method: System.Void FocusChangeDirection::.cctor()
    static void _cctor();
  }; // UnityEngine.UIElements.VisualElementFocusChangeTarget
  #pragma pack(pop)
  static check_size<sizeof(VisualElementFocusChangeTarget), 24 + sizeof(::UnityEngine::UIElements::Focusable*)> __UnityEngine_UIElements_VisualElementFocusChangeTargetSizeCheck;
  static_assert(sizeof(VisualElementFocusChangeTarget) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementFocusChangeTarget::GetPooled
// Il2CppName: GetPooled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElementFocusChangeTarget* (*)(::UnityEngine::UIElements::Focusable*)>(&UnityEngine::UIElements::VisualElementFocusChangeTarget::GetPooled)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementFocusChangeTarget*), "GetPooled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementFocusChangeTarget::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementFocusChangeTarget::get_target
// Il2CppName: get_target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Focusable* (UnityEngine::UIElements::VisualElementFocusChangeTarget::*)()>(&UnityEngine::UIElements::VisualElementFocusChangeTarget::get_target)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementFocusChangeTarget*), "get_target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementFocusChangeTarget::set_target
// Il2CppName: set_target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementFocusChangeTarget::*)(::UnityEngine::UIElements::Focusable*)>(&UnityEngine::UIElements::VisualElementFocusChangeTarget::set_target)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementFocusChangeTarget*), "set_target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementFocusChangeTarget::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementFocusChangeTarget::*)()>(&UnityEngine::UIElements::VisualElementFocusChangeTarget::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementFocusChangeTarget*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementFocusChangeTarget::ApplyTo
// Il2CppName: ApplyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementFocusChangeTarget::*)(::UnityEngine::UIElements::FocusController*, ::UnityEngine::UIElements::Focusable*)>(&UnityEngine::UIElements::VisualElementFocusChangeTarget::ApplyTo)> {
  static const MethodInfo* get() {
    static auto* focusController = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "FocusController")->byval_arg;
    static auto* f = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementFocusChangeTarget*), "ApplyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focusController, f});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementFocusChangeTarget::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::VisualElementFocusChangeTarget::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementFocusChangeTarget*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
