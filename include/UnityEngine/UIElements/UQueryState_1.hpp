// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.UIElements.RuleMatcher
#include "UnityEngine/UIElements/RuleMatcher.hpp"
// Including type: UnityEngine.UIElements.UQuery
#include "UnityEngine/UIElements/UQuery.hpp"
// Including type: UnityEngine.UIElements.UQuery/UQueryMatcher
#include "UnityEngine/UIElements/UQuery_UQueryMatcher.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Skipping declaration: ListQueryMatcher`1 because it is already included!
  // Skipping declaration: ActionQueryMatcher because it is already included!
  // Skipping declaration: Enumerator because it is already included!
  // Forward declaring type: VisualElement
  class VisualElement;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: UQueryState`1<T>
  template<typename T>
  struct UQueryState_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::UnityEngine::UIElements::UQueryState_1, "UnityEngine.UIElements", "UQueryState`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.UQueryState`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  struct UQueryState_1/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerable_1<T>, public ::System::IEquatable_1<::UnityEngine::UIElements::UQueryState_1<T>>*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::UQueryState_1::ListQueryMatcher_1<T, TElement>
    template<typename TElement>
    class ListQueryMatcher_1;
    // Nested type: ::UnityEngine::UIElements::UQueryState_1::ActionQueryMatcher<T>
    class ActionQueryMatcher;
    // Nested type: ::UnityEngine::UIElements::UQueryState_1::Enumerator<T>
    struct Enumerator;
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.UIElements.UQueryState`1/ListQueryMatcher`1
    // [TokenAttribute] Offset: FFFFFFFF
    template<typename TElement>
    class ListQueryMatcher_1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::UnityEngine::UIElements::UQuery::UQueryMatcher {
      public:
      using declaring_type = UQueryState_1<T>;
      static constexpr std::string_view NESTED_NAME = "ListQueryMatcher`1";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private System.Collections.Generic.List`1<TElement> <matches>k__BackingField
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::List_1<TElement>* matches;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<TElement>*) == 0x8);
      public:
      // Deleting conversion operator: operator ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>*
      constexpr operator ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>*() const noexcept = delete;
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.List`1<TElement> <matches>k__BackingField
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<TElement>*& dyn_$matches$k__BackingField() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::ListQueryMatcher_1::dyn_$matches$k__BackingField");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<matches>k__BackingField"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::List_1<TElement>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Collections.Generic.List`1<TElement> get_matches()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::List_1<TElement>* get_matches() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::ListQueryMatcher_1::get_matches");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_matches", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<TElement>*, false>(this, ___internal__method);
      }
      // public System.Void set_matches(System.Collections.Generic.List`1<TElement> value)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void set_matches(::System::Collections::Generic::List_1<TElement>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::ListQueryMatcher_1::set_matches");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_matches", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
      }
      // public System.Void Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::ListQueryMatcher_1::Reset");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // protected override System.Boolean OnRuleMatchedElement(UnityEngine.UIElements.RuleMatcher matcher, UnityEngine.UIElements.VisualElement element)
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: UnityEngine.UIElements.UQuery/UQueryMatcher
      // Base method: System.Boolean UQueryMatcher::OnRuleMatchedElement(UnityEngine.UIElements.RuleMatcher matcher, UnityEngine.UIElements.VisualElement element)
      bool OnRuleMatchedElement(::UnityEngine::UIElements::RuleMatcher matcher, ::UnityEngine::UIElements::VisualElement* element) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::ListQueryMatcher_1::OnRuleMatchedElement");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::UQuery::UQueryMatcher*), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, matcher, element);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: UnityEngine.UIElements.UQuery/UQueryMatcher
      // Base method: System.Void UQueryMatcher::.ctor()
      // Base method: System.Void HierarchyTraversal::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename UQueryState_1<T>::ListQueryMatcher_1<TElement>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::ListQueryMatcher_1::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename UQueryState_1<T>::ListQueryMatcher_1<TElement>*, creationType>()));
      }
    }; // UnityEngine.UIElements.UQueryState`1/ListQueryMatcher`1
    // Could not write size check! Type: UnityEngine.UIElements.UQueryState`1/ListQueryMatcher`1 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.UIElements.UQueryState`1/ActionQueryMatcher
    // [TokenAttribute] Offset: FFFFFFFF
    class ActionQueryMatcher : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::UnityEngine::UIElements::UQuery::UQueryMatcher {
      public:
      using declaring_type = UQueryState_1<T>;
      static constexpr std::string_view NESTED_NAME = "ActionQueryMatcher";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private System.Action`1<T> <callBack>k__BackingField
      // Size: 0x8
      // Offset: 0x0
      ::System::Action_1<T>* callBack;
      // Field size check
      static_assert(sizeof(::System::Action_1<T>*) == 0x8);
      public:
      // Deleting conversion operator: operator ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>*
      constexpr operator ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>*() const noexcept = delete;
      // Autogenerated instance field getter
      // Get instance field: private System.Action`1<T> <callBack>k__BackingField
      [[deprecated("Use field access instead!")]] ::System::Action_1<T>*& dyn_$callBack$k__BackingField() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::ActionQueryMatcher::dyn_$callBack$k__BackingField");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<callBack>k__BackingField"))->offset;
        return *reinterpret_cast<::System::Action_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Action`1<T> get_callBack()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Action_1<T>* get_callBack() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::ActionQueryMatcher::get_callBack");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_callBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::System::Action_1<T>*, false>(this, ___internal__method);
      }
      // protected override System.Boolean OnRuleMatchedElement(UnityEngine.UIElements.RuleMatcher matcher, UnityEngine.UIElements.VisualElement element)
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: UnityEngine.UIElements.UQuery/UQueryMatcher
      // Base method: System.Boolean UQueryMatcher::OnRuleMatchedElement(UnityEngine.UIElements.RuleMatcher matcher, UnityEngine.UIElements.VisualElement element)
      bool OnRuleMatchedElement(::UnityEngine::UIElements::RuleMatcher matcher, ::UnityEngine::UIElements::VisualElement* element) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::ActionQueryMatcher::OnRuleMatchedElement");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::UQuery::UQueryMatcher*), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, matcher, element);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: UnityEngine.UIElements.UQuery/UQueryMatcher
      // Base method: System.Void UQueryMatcher::.ctor()
      // Base method: System.Void HierarchyTraversal::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename UQueryState_1<T>::ActionQueryMatcher* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::ActionQueryMatcher::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename UQueryState_1<T>::ActionQueryMatcher*, creationType>()));
      }
    }; // UnityEngine.UIElements.UQueryState`1/ActionQueryMatcher
    // Could not write size check! Type: UnityEngine.UIElements.UQueryState`1/ActionQueryMatcher is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.UQueryState`1/Enumerator
    // [TokenAttribute] Offset: FFFFFFFF
    struct Enumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<T>*/ {
      public:
      using declaring_type = UQueryState_1<T>;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // private System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElement> iterationList
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>* iterationList;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>*) == 0x8);
      // private System.Int32 currentIndex
      // Size: 0x4
      // Offset: 0x0
      int currentIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Enumerator
      constexpr Enumerator(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>* iterationList_ = {}, int currentIndex_ = {}) noexcept : iterationList{iterationList_}, currentIndex{currentIndex_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<T>
      operator ::System::Collections::Generic::IEnumerator_1<T>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElement> iterationList
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>*& dyn_iterationList() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::Enumerator::dyn_iterationList");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "iterationList"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 currentIndex
      [[deprecated("Use field access instead!")]] int& dyn_currentIndex() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::Enumerator::dyn_currentIndex");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentIndex"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void .ctor(UnityEngine.UIElements.UQueryState`1<T> queryState)
      // Offset: 0xFFFFFFFFFFFFFFFF
      Enumerator(::UnityEngine::UIElements::UQueryState_1<T> queryState) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::Enumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(queryState)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, queryState);
      }
      // public T get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      T get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::Enumerator::get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::UIElements::UQueryState_1<T>::Enumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::Enumerator::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::UIElements::UQueryState_1<T>::Enumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::Enumerator::MoveNext");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::UIElements::UQueryState_1<T>::Enumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Void Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::Enumerator::Reset");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::UIElements::UQueryState_1<T>::Enumerator), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::Enumerator::Dispose");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::UIElements::UQueryState_1<T>::Enumerator), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // UnityEngine.UIElements.UQueryState`1/Enumerator
    // Could not write size check! Type: UnityEngine.UIElements.UQueryState`1/Enumerator is generic, or has no fields that are valid for size checks!
    public:
    // private readonly UnityEngine.UIElements.VisualElement m_Element
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::VisualElement* m_Element;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // readonly System.Collections.Generic.List`1<UnityEngine.UIElements.RuleMatcher> m_Matchers
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>* m_Matchers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>*) == 0x8);
    public:
    // Creating value type constructor for type: UQueryState_1
    constexpr UQueryState_1(::UnityEngine::UIElements::VisualElement* m_Element_ = {}, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>* m_Matchers_ = {}) noexcept : m_Element{m_Element_}, m_Matchers{m_Matchers_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<T>
    operator ::System::Collections::Generic::IEnumerable_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<T>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::UQueryState_1<T>>
    operator ::System::IEquatable_1<::UnityEngine::UIElements::UQueryState_1<T>>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::UQueryState_1<T>>*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private UnityEngine.UIElements.UQueryState`1/ActionQueryMatcher<T> s_Action
    static typename ::UnityEngine::UIElements::UQueryState_1<T>::ActionQueryMatcher* _get_s_Action() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::_get_s_Action");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::UQueryState_1<T>::ActionQueryMatcher*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<UQueryState_1<T>>::get(), "s_Action"));
    }
    // Autogenerated static field setter
    // Set static field: static private UnityEngine.UIElements.UQueryState`1/ActionQueryMatcher<T> s_Action
    static void _set_s_Action(typename ::UnityEngine::UIElements::UQueryState_1<T>::ActionQueryMatcher* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::_set_s_Action");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<UQueryState_1<T>>::get(), "s_Action", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly UnityEngine.UIElements.UQueryState`1/ListQueryMatcher`1<T,T> s_List
    static typename ::UnityEngine::UIElements::UQueryState_1<T>::ListQueryMatcher_1<T>* _get_s_List() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::_get_s_List");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::UQueryState_1<T>::ListQueryMatcher_1<T>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<UQueryState_1<T>>::get(), "s_List"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly UnityEngine.UIElements.UQueryState`1/ListQueryMatcher`1<T,T> s_List
    static void _set_s_List(typename ::UnityEngine::UIElements::UQueryState_1<T>::ListQueryMatcher_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::_set_s_List");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<UQueryState_1<T>>::get(), "s_List", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly UnityEngine.UIElements.UQueryState`1/ListQueryMatcher`1<T,UnityEngine.UIElements.VisualElement> s_EnumerationList
    static typename ::UnityEngine::UIElements::UQueryState_1<T>::ListQueryMatcher_1<::UnityEngine::UIElements::VisualElement*>* _get_s_EnumerationList() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::_get_s_EnumerationList");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::UQueryState_1<T>::ListQueryMatcher_1<::UnityEngine::UIElements::VisualElement*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<UQueryState_1<T>>::get(), "s_EnumerationList"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly UnityEngine.UIElements.UQueryState`1/ListQueryMatcher`1<T,UnityEngine.UIElements.VisualElement> s_EnumerationList
    static void _set_s_EnumerationList(typename ::UnityEngine::UIElements::UQueryState_1<T>::ListQueryMatcher_1<::UnityEngine::UIElements::VisualElement*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::_set_s_EnumerationList");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<UQueryState_1<T>>::get(), "s_EnumerationList", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly UnityEngine.UIElements.VisualElement m_Element
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_Element() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::dyn_m_Element");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Element"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::VisualElement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: readonly System.Collections.Generic.List`1<UnityEngine.UIElements.RuleMatcher> m_Matchers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>*& dyn_m_Matchers() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::dyn_m_Matchers");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Matchers"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // System.Void .ctor(UnityEngine.UIElements.VisualElement element, System.Collections.Generic.List`1<UnityEngine.UIElements.RuleMatcher> matchers)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // ABORTED: conflicts with another method.  UQueryState_1(::UnityEngine::UIElements::VisualElement* element, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>* matchers)
    // public UnityEngine.UIElements.UQueryState`1<T> RebuildOn(UnityEngine.UIElements.VisualElement element)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::UQueryState_1<T> RebuildOn(::UnityEngine::UIElements::VisualElement* element) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::RebuildOn");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "RebuildOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::UQueryState_1<T>, false>(this, ___internal__method, element);
    }
    // private T Single(UnityEngine.UIElements.UQuery/SingleQueryMatcher matcher)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Single(::UnityEngine::UIElements::UQuery::SingleQueryMatcher* matcher) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::Single");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Single", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(matcher)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, matcher);
    }
    // public T First()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T First() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::First");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "First", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public UnityEngine.UIElements.UQueryState`1/Enumerator<T> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::UnityEngine::UIElements::UQueryState_1<T>::Enumerator GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::UIElements::UQueryState_1<T>::Enumerator, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable$T$_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::System.Collections.Generic.IEnumerable<T>.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::UIElements::UQueryState_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::UIElements::UQueryState_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // public System.Boolean Equals(UnityEngine.UIElements.UQueryState`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Equals(::UnityEngine::UIElements::UQueryState_1<T> other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::UIElements::UQueryState_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<UQueryState_1<T>>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQueryState_1::GetHashCode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
  }; // UnityEngine.UIElements.UQueryState`1
  // Could not write size check! Type: UnityEngine.UIElements.UQueryState`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
