// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.TimerState
#include "UnityEngine/UIElements/TimerState.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: IVisualElementScheduledItem
  class IVisualElementScheduledItem;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: IVisualElementScheduler
  class IVisualElementScheduler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::IVisualElementScheduler);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::IVisualElementScheduler*, "UnityEngine.UIElements", "IVisualElementScheduler");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.IVisualElementScheduler
  // [TokenAttribute] Offset: FFFFFFFF
  class IVisualElementScheduler {
    public:
    // public UnityEngine.UIElements.IVisualElementScheduledItem Execute(System.Action`1<UnityEngine.UIElements.TimerState> timerUpdateEvent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::IVisualElementScheduledItem* Execute(::System::Action_1<::UnityEngine::UIElements::TimerState>* timerUpdateEvent);
    // public UnityEngine.UIElements.IVisualElementScheduledItem Execute(System.Action updateEvent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::IVisualElementScheduledItem* Execute(::System::Action* updateEvent);
  }; // UnityEngine.UIElements.IVisualElementScheduler
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::IVisualElementScheduler::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IVisualElementScheduledItem* (UnityEngine::UIElements::IVisualElementScheduler::*)(::System::Action_1<::UnityEngine::UIElements::TimerState>*)>(&UnityEngine::UIElements::IVisualElementScheduler::Execute)> {
  static const MethodInfo* get() {
    static auto* timerUpdateEvent = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TimerState")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::IVisualElementScheduler*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timerUpdateEvent});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::IVisualElementScheduler::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IVisualElementScheduledItem* (UnityEngine::UIElements::IVisualElementScheduler::*)(::System::Action*)>(&UnityEngine::UIElements::IVisualElementScheduler::Execute)> {
  static const MethodInfo* get() {
    static auto* updateEvent = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::IVisualElementScheduler*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateEvent});
  }
};
