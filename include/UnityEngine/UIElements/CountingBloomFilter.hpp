// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: CountingBloomFilter
  struct CountingBloomFilter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::CountingBloomFilter, "UnityEngine.UIElements", "CountingBloomFilter");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x1
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.CountingBloomFilter
  // [TokenAttribute] Offset: FFFFFFFF
  struct CountingBloomFilter/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::CountingBloomFilter::$m_Counters$e__FixedBuffer
    struct $m_Counters$e__FixedBuffer;
    // Size: 0x1
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.CountingBloomFilter/<m_Counters>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    struct $m_Counters$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Byte FixedElementField
      // Size: 0x1
      // Offset: 0x0
      uint8_t FixedElementField;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: $m_Counters$e__FixedBuffer
      constexpr $m_Counters$e__FixedBuffer(uint8_t FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Byte FixedElementField
      [[deprecated("Use field access instead!")]] uint8_t& dyn_FixedElementField();
    }; // UnityEngine.UIElements.CountingBloomFilter/<m_Counters>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(CountingBloomFilter::$m_Counters$e__FixedBuffer), 0 + sizeof(uint8_t)> __UnityEngine_UIElements_CountingBloomFilter_$m_Counters$e__FixedBufferSizeCheck;
    static_assert(sizeof(CountingBloomFilter::$m_Counters$e__FixedBuffer) == 0x1);
    public:
    // private UnityEngine.UIElements.CountingBloomFilter/<m_Counters>e__FixedBuffer m_Counters
    // Size: 0x1
    // Offset: 0x0
    ::UnityEngine::UIElements::CountingBloomFilter::$m_Counters$e__FixedBuffer m_Counters;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::CountingBloomFilter::$m_Counters$e__FixedBuffer) == 0x1);
    public:
    // Creating value type constructor for type: CountingBloomFilter
    constexpr CountingBloomFilter(::UnityEngine::UIElements::CountingBloomFilter::$m_Counters$e__FixedBuffer m_Counters_ = {}) noexcept : m_Counters{m_Counters_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::UIElements::CountingBloomFilter::$m_Counters$e__FixedBuffer
    constexpr operator ::UnityEngine::UIElements::CountingBloomFilter::$m_Counters$e__FixedBuffer() const noexcept {
      return m_Counters;
    }
    // Get instance field reference: private UnityEngine.UIElements.CountingBloomFilter/<m_Counters>e__FixedBuffer m_Counters
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::CountingBloomFilter::$m_Counters$e__FixedBuffer& dyn_m_Counters();
    // private System.Void AdjustSlot(System.UInt32 index, System.Boolean increment)
    // Offset: 0x5636174
    void AdjustSlot(uint index, bool increment);
    // private System.UInt32 Hash1(System.UInt32 hash)
    // Offset: 0x56361A0
    uint Hash1(uint hash);
    // private System.UInt32 Hash2(System.UInt32 hash)
    // Offset: 0x56361A8
    uint Hash2(uint hash);
    // private System.Boolean IsSlotEmpty(System.UInt32 index)
    // Offset: 0x56361B0
    bool IsSlotEmpty(uint index);
    // public System.Void InsertHash(System.UInt32 hash)
    // Offset: 0x56361C0
    void InsertHash(uint hash);
    // public System.Void RemoveHash(System.UInt32 hash)
    // Offset: 0x56361F8
    void RemoveHash(uint hash);
    // public System.Boolean ContainsHash(System.UInt32 hash)
    // Offset: 0x5636228
    bool ContainsHash(uint hash);
  }; // UnityEngine.UIElements.CountingBloomFilter
  #pragma pack(pop)
  static check_size<sizeof(CountingBloomFilter), 0 + sizeof(::UnityEngine::UIElements::CountingBloomFilter::$m_Counters$e__FixedBuffer)> __UnityEngine_UIElements_CountingBloomFilterSizeCheck;
  static_assert(sizeof(CountingBloomFilter) == 0x1);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::CountingBloomFilter::$m_Counters$e__FixedBuffer, "UnityEngine.UIElements", "CountingBloomFilter/<m_Counters>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::CountingBloomFilter::AdjustSlot
// Il2CppName: AdjustSlot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::CountingBloomFilter::*)(uint, bool)>(&UnityEngine::UIElements::CountingBloomFilter::AdjustSlot)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* increment = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CountingBloomFilter), "AdjustSlot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, increment});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CountingBloomFilter::Hash1
// Il2CppName: Hash1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::UIElements::CountingBloomFilter::*)(uint)>(&UnityEngine::UIElements::CountingBloomFilter::Hash1)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CountingBloomFilter), "Hash1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CountingBloomFilter::Hash2
// Il2CppName: Hash2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::UIElements::CountingBloomFilter::*)(uint)>(&UnityEngine::UIElements::CountingBloomFilter::Hash2)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CountingBloomFilter), "Hash2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CountingBloomFilter::IsSlotEmpty
// Il2CppName: IsSlotEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::CountingBloomFilter::*)(uint)>(&UnityEngine::UIElements::CountingBloomFilter::IsSlotEmpty)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CountingBloomFilter), "IsSlotEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CountingBloomFilter::InsertHash
// Il2CppName: InsertHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::CountingBloomFilter::*)(uint)>(&UnityEngine::UIElements::CountingBloomFilter::InsertHash)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CountingBloomFilter), "InsertHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CountingBloomFilter::RemoveHash
// Il2CppName: RemoveHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::CountingBloomFilter::*)(uint)>(&UnityEngine::UIElements::CountingBloomFilter::RemoveHash)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CountingBloomFilter), "RemoveHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CountingBloomFilter::ContainsHash
// Il2CppName: ContainsHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::CountingBloomFilter::*)(uint)>(&UnityEngine::UIElements::CountingBloomFilter::ContainsHash)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CountingBloomFilter), "ContainsHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
