// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.UIElements.VectorImageVertex
#include "UnityEngine/UIElements/VectorImageVertex.hpp"
// Including type: UnityEngine.UIElements.GradientSettings
#include "UnityEngine/UIElements/GradientSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VectorImage
  class VectorImage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::VectorImage);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VectorImage*, "UnityEngine.UIElements", "VectorImage");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.VectorImage
  // [TokenAttribute] Offset: FFFFFFFF
  class VectorImage : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // System.Int32 version
    // Size: 0x4
    // Offset: 0x18
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: version and: atlas
    char __padding0[0x4] = {};
    // UnityEngine.Texture2D atlas
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Texture2D* atlas;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // UnityEngine.UIElements.VectorImageVertex[] vertices
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::UIElements::VectorImageVertex> vertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UIElements::VectorImageVertex>) == 0x8);
    // System.UInt16[] indices
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<uint16_t> indices;
    // Field size check
    static_assert(sizeof(::ArrayW<uint16_t>) == 0x8);
    // UnityEngine.UIElements.GradientSettings[] settings
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::UIElements::GradientSettings> settings;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UIElements::GradientSettings>) == 0x8);
    // UnityEngine.Vector2 size
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Vector2 size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: System.Int32 version
    [[deprecated("Use field access instead!")]] int& dyn_version();
    // Get instance field reference: UnityEngine.Texture2D atlas
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_atlas();
    // Get instance field reference: UnityEngine.UIElements.VectorImageVertex[] vertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UIElements::VectorImageVertex>& dyn_vertices();
    // Get instance field reference: System.UInt16[] indices
    [[deprecated("Use field access instead!")]] ::ArrayW<uint16_t>& dyn_indices();
    // Get instance field reference: UnityEngine.UIElements.GradientSettings[] settings
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UIElements::GradientSettings>& dyn_settings();
    // Get instance field reference: UnityEngine.Vector2 size
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_size();
    // public System.Single get_width()
    // Offset: 0x55C0CC0
    float get_width();
    // public System.Single get_height()
    // Offset: 0x55C0CC8
    float get_height();
    // public System.Void .ctor()
    // Offset: 0x55C0CD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VectorImage* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VectorImage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VectorImage*, creationType>()));
    }
  }; // UnityEngine.UIElements.VectorImage
  #pragma pack(pop)
  static check_size<sizeof(VectorImage), 64 + sizeof(::UnityEngine::Vector2)> __UnityEngine_UIElements_VectorImageSizeCheck;
  static_assert(sizeof(VectorImage) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::VectorImage::get_width
// Il2CppName: get_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::VectorImage::*)()>(&UnityEngine::UIElements::VectorImage::get_width)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VectorImage*), "get_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VectorImage::get_height
// Il2CppName: get_height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::VectorImage::*)()>(&UnityEngine::UIElements::VectorImage::get_height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VectorImage*), "get_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VectorImage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
