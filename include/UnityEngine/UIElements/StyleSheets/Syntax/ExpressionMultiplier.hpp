// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplierType
#include "UnityEngine/UIElements/StyleSheets/Syntax/ExpressionMultiplierType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements.StyleSheets.Syntax
namespace UnityEngine::UIElements::StyleSheets::Syntax {
  // Forward declaring type: ExpressionMultiplier
  struct ExpressionMultiplier;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier, "UnityEngine.UIElements.StyleSheets.Syntax", "ExpressionMultiplier");
// Type namespace: UnityEngine.UIElements.StyleSheets.Syntax
namespace UnityEngine::UIElements::StyleSheets::Syntax {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplier
  // [TokenAttribute] Offset: FFFFFFFF
  struct ExpressionMultiplier/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplierType m_Type
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplierType m_Type;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplierType) == 0x4);
    // public System.Int32 min
    // Size: 0x4
    // Offset: 0x4
    int min;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 max
    // Size: 0x4
    // Offset: 0x8
    int max;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ExpressionMultiplier
    constexpr ExpressionMultiplier(::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplierType m_Type_ = {}, int min_ = {}, int max_ = {}) noexcept : m_Type{m_Type_}, min{min_}, max{max_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 Infinity
    static constexpr const int Infinity = 100;
    // Get static field: static public System.Int32 Infinity
    static int _get_Infinity();
    // Set static field: static public System.Int32 Infinity
    static void _set_Infinity(int value);
    // Get instance field reference: private UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplierType m_Type
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplierType& dyn_m_Type();
    // Get instance field reference: public System.Int32 min
    [[deprecated("Use field access instead!")]] int& dyn_min();
    // Get instance field reference: public System.Int32 max
    [[deprecated("Use field access instead!")]] int& dyn_max();
    // public UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplierType get_type()
    // Offset: 0x5600F9C
    ::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplierType get_type();
    // public System.Void set_type(UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplierType value)
    // Offset: 0x56024A8
    void set_type(::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplierType value);
    // public System.Void .ctor(UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplierType type)
    // Offset: 0x5602498
    ExpressionMultiplier(::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplierType type);
    // private System.Void SetType(UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplierType value)
    // Offset: 0x56024AC
    void SetType(::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplierType value);
  }; // UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplier
  #pragma pack(pop)
  static check_size<sizeof(ExpressionMultiplier), 8 + sizeof(int)> __UnityEngine_UIElements_StyleSheets_Syntax_ExpressionMultiplierSizeCheck;
  static_assert(sizeof(ExpressionMultiplier) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier::get_type
// Il2CppName: get_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplierType (UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier::*)()>(&UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier::get_type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier), "get_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier::set_type
// Il2CppName: set_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier::*)(::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplierType)>(&UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier::set_type)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.StyleSheets.Syntax", "ExpressionMultiplierType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier), "set_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier::ExpressionMultiplier
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier::SetType
// Il2CppName: SetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier::*)(::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplierType)>(&UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier::SetType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.StyleSheets.Syntax", "ExpressionMultiplierType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier), "SetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
