// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.StyleSheets.Syntax.ExpressionType
#include "UnityEngine/UIElements/StyleSheets/Syntax/ExpressionType.hpp"
// Including type: UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplier
#include "UnityEngine/UIElements/StyleSheets/Syntax/ExpressionMultiplier.hpp"
// Including type: UnityEngine.UIElements.StyleSheets.Syntax.DataType
#include "UnityEngine/UIElements/StyleSheets/Syntax/DataType.hpp"
// Including type: UnityEngine.UIElements.StyleSheets.Syntax.ExpressionCombinator
#include "UnityEngine/UIElements/StyleSheets/Syntax/ExpressionCombinator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements.StyleSheets.Syntax
namespace UnityEngine::UIElements::StyleSheets::Syntax {
  // Forward declaring type: Expression
  class Expression;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::StyleSheets::Syntax::Expression);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::StyleSheets::Syntax::Expression*, "UnityEngine.UIElements.StyleSheets.Syntax", "Expression");
// Type namespace: UnityEngine.UIElements.StyleSheets.Syntax
namespace UnityEngine::UIElements::StyleSheets::Syntax {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.StyleSheets.Syntax.Expression
  // [TokenAttribute] Offset: FFFFFFFF
  class Expression : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.UIElements.StyleSheets.Syntax.ExpressionType type
    // Size: 0x4
    // Offset: 0x10
    ::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionType type;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionType) == 0x4);
    // public UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplier multiplier
    // Size: 0xC
    // Offset: 0x14
    ::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier multiplier;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier) == 0xC);
    // public UnityEngine.UIElements.StyleSheets.Syntax.DataType dataType
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::UIElements::StyleSheets::Syntax::DataType dataType;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleSheets::Syntax::DataType) == 0x4);
    // public UnityEngine.UIElements.StyleSheets.Syntax.ExpressionCombinator combinator
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionCombinator combinator;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionCombinator) == 0x4);
    // public UnityEngine.UIElements.StyleSheets.Syntax.Expression[] subExpressions
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::UIElements::StyleSheets::Syntax::Expression*> subExpressions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UIElements::StyleSheets::Syntax::Expression*>) == 0x8);
    // public System.String keyword
    // Size: 0x8
    // Offset: 0x30
    ::StringW keyword;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.UIElements.StyleSheets.Syntax.ExpressionType type
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionType& dyn_type();
    // Get instance field reference: public UnityEngine.UIElements.StyleSheets.Syntax.ExpressionMultiplier multiplier
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionMultiplier& dyn_multiplier();
    // Get instance field reference: public UnityEngine.UIElements.StyleSheets.Syntax.DataType dataType
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleSheets::Syntax::DataType& dyn_dataType();
    // Get instance field reference: public UnityEngine.UIElements.StyleSheets.Syntax.ExpressionCombinator combinator
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionCombinator& dyn_combinator();
    // Get instance field reference: public UnityEngine.UIElements.StyleSheets.Syntax.Expression[] subExpressions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UIElements::StyleSheets::Syntax::Expression*>& dyn_subExpressions();
    // Get instance field reference: public System.String keyword
    [[deprecated("Use field access instead!")]] ::StringW& dyn_keyword();
    // public System.Void .ctor(UnityEngine.UIElements.StyleSheets.Syntax.ExpressionType type)
    // Offset: 0x560243C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Expression* New_ctor(::UnityEngine::UIElements::StyleSheets::Syntax::ExpressionType type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleSheets::Syntax::Expression::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Expression*, creationType>(type)));
    }
  }; // UnityEngine.UIElements.StyleSheets.Syntax.Expression
  #pragma pack(pop)
  static check_size<sizeof(Expression), 48 + sizeof(::StringW)> __UnityEngine_UIElements_StyleSheets_Syntax_ExpressionSizeCheck;
  static_assert(sizeof(Expression) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleSheets::Syntax::Expression::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
