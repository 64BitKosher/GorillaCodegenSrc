// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Sprite
  class Sprite;
  // Forward declaring type: RenderTexture
  class RenderTexture;
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VectorImage
  class VectorImage;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.StyleSheets
namespace UnityEngine::UIElements::StyleSheets {
  // Forward declaring type: ImageSource
  struct ImageSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::StyleSheets::ImageSource, "UnityEngine.UIElements.StyleSheets", "ImageSource");
// Type namespace: UnityEngine.UIElements.StyleSheets
namespace UnityEngine::UIElements::StyleSheets {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.StyleSheets.ImageSource
  // [TokenAttribute] Offset: FFFFFFFF
  struct ImageSource/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Texture2D texture
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Texture2D* texture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public UnityEngine.Sprite sprite
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Sprite* sprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // public UnityEngine.UIElements.VectorImage vectorImage
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::VectorImage* vectorImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VectorImage*) == 0x8);
    // public UnityEngine.RenderTexture renderTexture
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::RenderTexture* renderTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    public:
    // Creating value type constructor for type: ImageSource
    constexpr ImageSource(::UnityEngine::Texture2D* texture_ = {}, ::UnityEngine::Sprite* sprite_ = {}, ::UnityEngine::UIElements::VectorImage* vectorImage_ = {}, ::UnityEngine::RenderTexture* renderTexture_ = {}) noexcept : texture{texture_}, sprite{sprite_}, vectorImage{vectorImage_}, renderTexture{renderTexture_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Texture2D texture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_texture();
    // Get instance field reference: public UnityEngine.Sprite sprite
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn_sprite();
    // Get instance field reference: public UnityEngine.UIElements.VectorImage vectorImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VectorImage*& dyn_vectorImage();
    // Get instance field reference: public UnityEngine.RenderTexture renderTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_renderTexture();
    // public System.Boolean IsNull()
    // Offset: 0x55F9E54
    bool IsNull();
  }; // UnityEngine.UIElements.StyleSheets.ImageSource
  #pragma pack(pop)
  static check_size<sizeof(ImageSource), 24 + sizeof(::UnityEngine::RenderTexture*)> __UnityEngine_UIElements_StyleSheets_ImageSourceSizeCheck;
  static_assert(sizeof(ImageSource) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleSheets::ImageSource::IsNull
// Il2CppName: IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::StyleSheets::ImageSource::*)()>(&UnityEngine::UIElements::StyleSheets::ImageSource::IsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StyleSheets::ImageSource), "IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
