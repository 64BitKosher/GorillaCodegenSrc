// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: StyleSheet
  class StyleSheet;
  // Forward declaring type: StyleComplexSelector
  class StyleComplexSelector;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.StyleSheets
namespace UnityEngine::UIElements::StyleSheets {
  // Forward declaring type: SelectorMatchRecord
  struct SelectorMatchRecord;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::StyleSheets::SelectorMatchRecord, "UnityEngine.UIElements.StyleSheets", "SelectorMatchRecord");
// Type namespace: UnityEngine.UIElements.StyleSheets
namespace UnityEngine::UIElements::StyleSheets {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.StyleSheets.SelectorMatchRecord
  // [TokenAttribute] Offset: FFFFFFFF
  struct SelectorMatchRecord/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.UIElements.StyleSheet sheet
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::StyleSheet* sheet;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleSheet*) == 0x8);
    // public System.Int32 styleSheetIndexInStack
    // Size: 0x4
    // Offset: 0x8
    int styleSheetIndexInStack;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: styleSheetIndexInStack and: complexSelector
    char __padding1[0x4] = {};
    // public UnityEngine.UIElements.StyleComplexSelector complexSelector
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::StyleComplexSelector* complexSelector;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleComplexSelector*) == 0x8);
    public:
    // Creating value type constructor for type: SelectorMatchRecord
    constexpr SelectorMatchRecord(::UnityEngine::UIElements::StyleSheet* sheet_ = {}, int styleSheetIndexInStack_ = {}, ::UnityEngine::UIElements::StyleComplexSelector* complexSelector_ = {}) noexcept : sheet{sheet_}, styleSheetIndexInStack{styleSheetIndexInStack_}, complexSelector{complexSelector_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.UIElements.StyleSheet sheet
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleSheet*& dyn_sheet();
    // Get instance field reference: public System.Int32 styleSheetIndexInStack
    [[deprecated("Use field access instead!")]] int& dyn_styleSheetIndexInStack();
    // Get instance field reference: public UnityEngine.UIElements.StyleComplexSelector complexSelector
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleComplexSelector*& dyn_complexSelector();
    // public System.Void .ctor(UnityEngine.UIElements.StyleSheet sheet, System.Int32 styleSheetIndexInStack)
    // Offset: 0x55FDF28
    SelectorMatchRecord(::UnityEngine::UIElements::StyleSheet* sheet, int styleSheetIndexInStack);
    // static public System.Int32 Compare(UnityEngine.UIElements.StyleSheets.SelectorMatchRecord a, UnityEngine.UIElements.StyleSheets.SelectorMatchRecord b)
    // Offset: 0x55FDF54
    static int Compare(::UnityEngine::UIElements::StyleSheets::SelectorMatchRecord a, ::UnityEngine::UIElements::StyleSheets::SelectorMatchRecord b);
  }; // UnityEngine.UIElements.StyleSheets.SelectorMatchRecord
  #pragma pack(pop)
  static check_size<sizeof(SelectorMatchRecord), 16 + sizeof(::UnityEngine::UIElements::StyleComplexSelector*)> __UnityEngine_UIElements_StyleSheets_SelectorMatchRecordSizeCheck;
  static_assert(sizeof(SelectorMatchRecord) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleSheets::SelectorMatchRecord::SelectorMatchRecord
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleSheets::SelectorMatchRecord::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::UIElements::StyleSheets::SelectorMatchRecord, ::UnityEngine::UIElements::StyleSheets::SelectorMatchRecord)>(&UnityEngine::UIElements::StyleSheets::SelectorMatchRecord::Compare)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.StyleSheets", "SelectorMatchRecord")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.StyleSheets", "SelectorMatchRecord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StyleSheets::SelectorMatchRecord), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
