// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.PseudoStates
#include "UnityEngine/UIElements/PseudoStates.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements.StyleSheets
namespace UnityEngine::UIElements::StyleSheets {
  // Forward declaring type: MatchResultInfo
  struct MatchResultInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::StyleSheets::MatchResultInfo, "UnityEngine.UIElements.StyleSheets", "MatchResultInfo");
// Type namespace: UnityEngine.UIElements.StyleSheets
namespace UnityEngine::UIElements::StyleSheets {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.StyleSheets.MatchResultInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct MatchResultInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly System.Boolean success
    // Size: 0x1
    // Offset: 0x0
    bool success;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: success and: triggerPseudoMask
    char __padding0[0x3] = {};
    // public readonly UnityEngine.UIElements.PseudoStates triggerPseudoMask
    // Size: 0x4
    // Offset: 0x4
    ::UnityEngine::UIElements::PseudoStates triggerPseudoMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::PseudoStates) == 0x4);
    // public readonly UnityEngine.UIElements.PseudoStates dependencyPseudoMask
    // Size: 0x4
    // Offset: 0x8
    ::UnityEngine::UIElements::PseudoStates dependencyPseudoMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::PseudoStates) == 0x4);
    public:
    // Creating value type constructor for type: MatchResultInfo
    constexpr MatchResultInfo(bool success_ = {}, ::UnityEngine::UIElements::PseudoStates triggerPseudoMask_ = {}, ::UnityEngine::UIElements::PseudoStates dependencyPseudoMask_ = {}) noexcept : success{success_}, triggerPseudoMask{triggerPseudoMask_}, dependencyPseudoMask{dependencyPseudoMask_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly System.Boolean success
    [[deprecated("Use field access instead!")]] bool& dyn_success();
    // Get instance field reference: public readonly UnityEngine.UIElements.PseudoStates triggerPseudoMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::PseudoStates& dyn_triggerPseudoMask();
    // Get instance field reference: public readonly UnityEngine.UIElements.PseudoStates dependencyPseudoMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::PseudoStates& dyn_dependencyPseudoMask();
    // public System.Void .ctor(System.Boolean success, UnityEngine.UIElements.PseudoStates triggerPseudoMask, UnityEngine.UIElements.PseudoStates dependencyPseudoMask)
    // Offset: 0x55FDF18
    // ABORTED: conflicts with another method.  MatchResultInfo(bool success, ::UnityEngine::UIElements::PseudoStates triggerPseudoMask, ::UnityEngine::UIElements::PseudoStates dependencyPseudoMask);
  }; // UnityEngine.UIElements.StyleSheets.MatchResultInfo
  #pragma pack(pop)
  static check_size<sizeof(MatchResultInfo), 8 + sizeof(::UnityEngine::UIElements::PseudoStates)> __UnityEngine_UIElements_StyleSheets_MatchResultInfoSizeCheck;
  static_assert(sizeof(MatchResultInfo) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleSheets::MatchResultInfo::MatchResultInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
