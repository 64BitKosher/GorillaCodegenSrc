// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BindableElement
#include "UnityEngine/UIElements/BindableElement.hpp"
// Including type: UnityEngine.UIElements.INotifyValueChanged`1
#include "UnityEngine/UIElements/INotifyValueChanged_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Toggle
  class Toggle;
  // Forward declaring type: AttachToPanelEvent
  class AttachToPanelEvent;
  // Forward declaring type: ChangeEvent`1<T>
  template<typename T>
  class ChangeEvent_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Foldout
  class Foldout;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::Foldout);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::Foldout*, "UnityEngine.UIElements", "Foldout");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.Foldout
  // [TokenAttribute] Offset: FFFFFFFF
  class Foldout : public ::UnityEngine::UIElements::BindableElement/*, public ::UnityEngine::UIElements::INotifyValueChanged_1<bool>*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::Foldout::UxmlFactory
    class UxmlFactory;
    // Nested type: ::UnityEngine::UIElements::Foldout::UxmlTraits
    class UxmlTraits;
    public:
    // private UnityEngine.UIElements.Toggle m_Toggle
    // Size: 0x8
    // Offset: 0x3D0
    ::UnityEngine::UIElements::Toggle* m_Toggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Toggle*) == 0x8);
    // private UnityEngine.UIElements.VisualElement m_Container
    // Size: 0x8
    // Offset: 0x3D8
    ::UnityEngine::UIElements::VisualElement* m_Container;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private System.Boolean m_Value
    // Size: 0x1
    // Offset: 0x3E0
    bool m_Value;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::INotifyValueChanged_1<bool>
    operator ::UnityEngine::UIElements::INotifyValueChanged_1<bool>() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::INotifyValueChanged_1<bool>*>(this);
    }
    // Get static field: static public readonly System.String ussClassName
    static ::StringW _get_ussClassName();
    // Set static field: static public readonly System.String ussClassName
    static void _set_ussClassName(::StringW value);
    // Get static field: static public readonly System.String toggleUssClassName
    static ::StringW _get_toggleUssClassName();
    // Set static field: static public readonly System.String toggleUssClassName
    static void _set_toggleUssClassName(::StringW value);
    // Get static field: static public readonly System.String contentUssClassName
    static ::StringW _get_contentUssClassName();
    // Set static field: static public readonly System.String contentUssClassName
    static void _set_contentUssClassName(::StringW value);
    // Get static field: static public readonly System.String inputUssClassName
    static ::StringW _get_inputUssClassName();
    // Set static field: static public readonly System.String inputUssClassName
    static void _set_inputUssClassName(::StringW value);
    // Get static field: static public readonly System.String checkmarkUssClassName
    static ::StringW _get_checkmarkUssClassName();
    // Set static field: static public readonly System.String checkmarkUssClassName
    static void _set_checkmarkUssClassName(::StringW value);
    // Get static field: static public readonly System.String textUssClassName
    static ::StringW _get_textUssClassName();
    // Set static field: static public readonly System.String textUssClassName
    static void _set_textUssClassName(::StringW value);
    // Get static field: static readonly System.String toggleInspectorUssClassName
    static ::StringW _get_toggleInspectorUssClassName();
    // Set static field: static readonly System.String toggleInspectorUssClassName
    static void _set_toggleInspectorUssClassName(::StringW value);
    // Get static field: static readonly System.String ussFoldoutDepthClassName
    static ::StringW _get_ussFoldoutDepthClassName();
    // Set static field: static readonly System.String ussFoldoutDepthClassName
    static void _set_ussFoldoutDepthClassName(::StringW value);
    // Get static field: static readonly System.Int32 ussFoldoutMaxDepth
    static int _get_ussFoldoutMaxDepth();
    // Set static field: static readonly System.Int32 ussFoldoutMaxDepth
    static void _set_ussFoldoutMaxDepth(int value);
    // Get instance field reference: private UnityEngine.UIElements.Toggle m_Toggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Toggle*& dyn_m_Toggle();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement m_Container
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_Container();
    // Get instance field reference: private System.Boolean m_Value
    [[deprecated("Use field access instead!")]] bool& dyn_m_Value();
    // public System.Void set_text(System.String value)
    // Offset: 0x55B7818
    void set_text(::StringW value);
    // public System.Boolean get_value()
    // Offset: 0x55B7940
    bool get_value();
    // public System.Void set_value(System.Boolean value)
    // Offset: 0x55B7948
    void set_value(bool value);
    // public System.Void SetValueWithoutNotify(System.Boolean newValue)
    // Offset: 0x55B7B54
    void SetValueWithoutNotify(bool newValue);
    // private System.Void OnAttachToPanel(UnityEngine.UIElements.AttachToPanelEvent evt)
    // Offset: 0x55B8014
    void OnAttachToPanel(::UnityEngine::UIElements::AttachToPanelEvent* evt);
    // private System.Void <.ctor>b__26_0(UnityEngine.UIElements.ChangeEvent`1<System.Boolean> evt)
    // Offset: 0x55B8470
    void $_ctor$b__26_0(::UnityEngine::UIElements::ChangeEvent_1<bool>* evt);
    // public override UnityEngine.UIElements.VisualElement get_contentContainer()
    // Offset: 0x55B7810
    // Implemented from: UnityEngine.UIElements.VisualElement
    // Base method: UnityEngine.UIElements.VisualElement VisualElement::get_contentContainer()
    ::UnityEngine::UIElements::VisualElement* get_contentContainer();
    // override System.Void OnViewDataReady()
    // Offset: 0x55B7C98
    // Implemented from: UnityEngine.UIElements.VisualElement
    // Base method: System.Void VisualElement::OnViewDataReady()
    void OnViewDataReady();
    // public System.Void .ctor()
    // Offset: 0x55B7CD8
    // Implemented from: UnityEngine.UIElements.BindableElement
    // Base method: System.Void BindableElement::.ctor()
    // Base method: System.Void VisualElement::.ctor()
    // Base method: System.Void Focusable::.ctor()
    // Base method: System.Void CallbackEventHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Foldout* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Foldout::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Foldout*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x55B81F4
    // Implemented from: UnityEngine.UIElements.VisualElement
    // Base method: System.Void VisualElement::.cctor()
    static void _cctor();
  }; // UnityEngine.UIElements.Foldout
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::Foldout::set_text
// Il2CppName: set_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Foldout::*)(::StringW)>(&UnityEngine::UIElements::Foldout::set_text)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Foldout*), "set_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Foldout::get_value
// Il2CppName: get_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::Foldout::*)()>(&UnityEngine::UIElements::Foldout::get_value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Foldout*), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Foldout::set_value
// Il2CppName: set_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Foldout::*)(bool)>(&UnityEngine::UIElements::Foldout::set_value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Foldout*), "set_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Foldout::SetValueWithoutNotify
// Il2CppName: SetValueWithoutNotify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Foldout::*)(bool)>(&UnityEngine::UIElements::Foldout::SetValueWithoutNotify)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Foldout*), "SetValueWithoutNotify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Foldout::OnAttachToPanel
// Il2CppName: OnAttachToPanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Foldout::*)(::UnityEngine::UIElements::AttachToPanelEvent*)>(&UnityEngine::UIElements::Foldout::OnAttachToPanel)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "AttachToPanelEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Foldout*), "OnAttachToPanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Foldout::$_ctor$b__26_0
// Il2CppName: <.ctor>b__26_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Foldout::*)(::UnityEngine::UIElements::ChangeEvent_1<bool>*)>(&UnityEngine::UIElements::Foldout::$_ctor$b__26_0)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ChangeEvent`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Foldout*), "<.ctor>b__26_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Foldout::get_contentContainer
// Il2CppName: get_contentContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::Foldout::*)()>(&UnityEngine::UIElements::Foldout::get_contentContainer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Foldout*), "get_contentContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Foldout::OnViewDataReady
// Il2CppName: OnViewDataReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Foldout::*)()>(&UnityEngine::UIElements::Foldout::OnViewDataReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Foldout*), "OnViewDataReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Foldout::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::Foldout::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::Foldout::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Foldout*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
