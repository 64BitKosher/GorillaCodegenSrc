// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.IVisualTreeUpdater
#include "UnityEngine/UIElements/IVisualTreeUpdater.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: BaseVisualElementPanel
  class BaseVisualElementPanel;
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: VersionChangeType
  struct VersionChangeType;
}
// Forward declaring namespace: Unity::Profiling
namespace Unity::Profiling {
  // Forward declaring type: ProfilerMarker
  struct ProfilerMarker;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: BaseVisualTreeUpdater
  class BaseVisualTreeUpdater;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::BaseVisualTreeUpdater);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::BaseVisualTreeUpdater*, "UnityEngine.UIElements", "BaseVisualTreeUpdater");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.BaseVisualTreeUpdater
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseVisualTreeUpdater : public ::Il2CppObject/*, public ::UnityEngine::UIElements::IVisualTreeUpdater*/ {
    public:
    public:
    // private System.Action`1<UnityEngine.UIElements.BaseVisualElementPanel> panelChanged
    // Size: 0x8
    // Offset: 0x10
    ::System::Action_1<::UnityEngine::UIElements::BaseVisualElementPanel*>* panelChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::UIElements::BaseVisualElementPanel*>*) == 0x8);
    // private UnityEngine.UIElements.BaseVisualElementPanel m_Panel
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::BaseVisualElementPanel* m_Panel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BaseVisualElementPanel*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IVisualTreeUpdater
    operator ::UnityEngine::UIElements::IVisualTreeUpdater() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IVisualTreeUpdater*>(this);
    }
    // Get instance field reference: private System.Action`1<UnityEngine.UIElements.BaseVisualElementPanel> panelChanged
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::UIElements::BaseVisualElementPanel*>*& dyn_panelChanged();
    // Get instance field reference: private UnityEngine.UIElements.BaseVisualElementPanel m_Panel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BaseVisualElementPanel*& dyn_m_Panel();
    // public System.Void add_panelChanged(System.Action`1<UnityEngine.UIElements.BaseVisualElementPanel> value)
    // Offset: 0x55C8E0C
    void add_panelChanged(::System::Action_1<::UnityEngine::UIElements::BaseVisualElementPanel*>* value);
    // public System.Void remove_panelChanged(System.Action`1<UnityEngine.UIElements.BaseVisualElementPanel> value)
    // Offset: 0x55C8EBC
    void remove_panelChanged(::System::Action_1<::UnityEngine::UIElements::BaseVisualElementPanel*>* value);
    // public UnityEngine.UIElements.BaseVisualElementPanel get_panel()
    // Offset: 0x55C53D8
    ::UnityEngine::UIElements::BaseVisualElementPanel* get_panel();
    // public System.Void set_panel(UnityEngine.UIElements.BaseVisualElementPanel value)
    // Offset: 0x55C8F6C
    void set_panel(::UnityEngine::UIElements::BaseVisualElementPanel* value);
    // public UnityEngine.UIElements.VisualElement get_visualTree()
    // Offset: 0x55C6AA8
    ::UnityEngine::UIElements::VisualElement* get_visualTree();
    // public Unity.Profiling.ProfilerMarker get_profilerMarker()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Unity::Profiling::ProfilerMarker get_profilerMarker();
    // public System.Void Dispose()
    // Offset: 0x55C8FB8
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x55C9024
    void Dispose(bool disposing);
    // public System.Void Update()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Update();
    // public System.Void OnVersionChanged(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.VersionChangeType versionChangeType)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnVersionChanged(::UnityEngine::UIElements::VisualElement* ve, ::UnityEngine::UIElements::VersionChangeType versionChangeType);
    // protected System.Void .ctor()
    // Offset: 0x55C54C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseVisualTreeUpdater* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseVisualTreeUpdater::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseVisualTreeUpdater*, creationType>()));
    }
  }; // UnityEngine.UIElements.BaseVisualTreeUpdater
  #pragma pack(pop)
  static check_size<sizeof(BaseVisualTreeUpdater), 24 + sizeof(::UnityEngine::UIElements::BaseVisualElementPanel*)> __UnityEngine_UIElements_BaseVisualTreeUpdaterSizeCheck;
  static_assert(sizeof(BaseVisualTreeUpdater) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeUpdater::add_panelChanged
// Il2CppName: add_panelChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseVisualTreeUpdater::*)(::System::Action_1<::UnityEngine::UIElements::BaseVisualElementPanel*>*)>(&UnityEngine::UIElements::BaseVisualTreeUpdater::add_panelChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "BaseVisualElementPanel")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeUpdater*), "add_panelChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeUpdater::remove_panelChanged
// Il2CppName: remove_panelChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseVisualTreeUpdater::*)(::System::Action_1<::UnityEngine::UIElements::BaseVisualElementPanel*>*)>(&UnityEngine::UIElements::BaseVisualTreeUpdater::remove_panelChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "BaseVisualElementPanel")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeUpdater*), "remove_panelChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeUpdater::get_panel
// Il2CppName: get_panel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::BaseVisualElementPanel* (UnityEngine::UIElements::BaseVisualTreeUpdater::*)()>(&UnityEngine::UIElements::BaseVisualTreeUpdater::get_panel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeUpdater*), "get_panel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeUpdater::set_panel
// Il2CppName: set_panel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseVisualTreeUpdater::*)(::UnityEngine::UIElements::BaseVisualElementPanel*)>(&UnityEngine::UIElements::BaseVisualTreeUpdater::set_panel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "BaseVisualElementPanel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeUpdater*), "set_panel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeUpdater::get_visualTree
// Il2CppName: get_visualTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::BaseVisualTreeUpdater::*)()>(&UnityEngine::UIElements::BaseVisualTreeUpdater::get_visualTree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeUpdater*), "get_visualTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeUpdater::get_profilerMarker
// Il2CppName: get_profilerMarker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Profiling::ProfilerMarker (UnityEngine::UIElements::BaseVisualTreeUpdater::*)()>(&UnityEngine::UIElements::BaseVisualTreeUpdater::get_profilerMarker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeUpdater*), "get_profilerMarker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeUpdater::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseVisualTreeUpdater::*)()>(&UnityEngine::UIElements::BaseVisualTreeUpdater::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeUpdater*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeUpdater::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseVisualTreeUpdater::*)(bool)>(&UnityEngine::UIElements::BaseVisualTreeUpdater::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeUpdater*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeUpdater::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseVisualTreeUpdater::*)()>(&UnityEngine::UIElements::BaseVisualTreeUpdater::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeUpdater*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeUpdater::OnVersionChanged
// Il2CppName: OnVersionChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseVisualTreeUpdater::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::VersionChangeType)>(&UnityEngine::UIElements::BaseVisualTreeUpdater::OnVersionChanged)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* versionChangeType = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VersionChangeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeUpdater*), "OnVersionChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, versionChangeType});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeUpdater::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
