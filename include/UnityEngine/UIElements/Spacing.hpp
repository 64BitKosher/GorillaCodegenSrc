// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rect
  struct Rect;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Spacing
  struct Spacing;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::Spacing, "UnityEngine.UIElements", "Spacing");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.Spacing
  // [TokenAttribute] Offset: FFFFFFFF
  struct Spacing/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single left
    // Size: 0x4
    // Offset: 0x0
    float left;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single top
    // Size: 0x4
    // Offset: 0x4
    float top;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single right
    // Size: 0x4
    // Offset: 0x8
    float right;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single bottom
    // Size: 0x4
    // Offset: 0xC
    float bottom;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: Spacing
    constexpr Spacing(float left_ = {}, float top_ = {}, float right_ = {}, float bottom_ = {}) noexcept : left{left_}, top{top_}, right{right_}, bottom{bottom_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single left
    [[deprecated("Use field access instead!")]] float& dyn_left();
    // Get instance field reference: public System.Single top
    [[deprecated("Use field access instead!")]] float& dyn_top();
    // Get instance field reference: public System.Single right
    [[deprecated("Use field access instead!")]] float& dyn_right();
    // Get instance field reference: public System.Single bottom
    [[deprecated("Use field access instead!")]] float& dyn_bottom();
    // public System.Single get_horizontal()
    // Offset: 0x568BE08
    float get_horizontal();
    // public System.Single get_vertical()
    // Offset: 0x568BE18
    float get_vertical();
    // public System.Void .ctor(System.Single left, System.Single top, System.Single right, System.Single bottom)
    // Offset: 0x568BE28
    // ABORTED: conflicts with another method.  Spacing(float left, float top, float right, float bottom);
  }; // UnityEngine.UIElements.Spacing
  #pragma pack(pop)
  static check_size<sizeof(Spacing), 12 + sizeof(float)> __UnityEngine_UIElements_SpacingSizeCheck;
  static_assert(sizeof(Spacing) == 0x10);
  // static public UnityEngine.Rect op_Subtraction(UnityEngine.Rect r, UnityEngine.UIElements.Spacing a)
  // Offset: 0x568BE34
  ::UnityEngine::Rect operator-(const ::UnityEngine::Rect& r, const ::UnityEngine::UIElements::Spacing& a);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::Spacing::get_horizontal
// Il2CppName: get_horizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::Spacing::*)()>(&UnityEngine::UIElements::Spacing::get_horizontal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Spacing), "get_horizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Spacing::get_vertical
// Il2CppName: get_vertical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::Spacing::*)()>(&UnityEngine::UIElements::Spacing::get_vertical)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Spacing), "get_vertical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Spacing::Spacing
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::Spacing::operator-
// Il2CppName: op_Subtraction
// Cannot perform method pointer template specialization from operators!
