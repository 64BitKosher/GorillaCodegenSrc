// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BaseField`1
#include "UnityEngine/UIElements/BaseField_1.hpp"
// Including type: UnityEngine.EnumData
#include "UnityEngine/EnumData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TextElement
  class TextElement;
  // Skipping declaration: VisualElement because it is already included!
  // Forward declaring type: IGenericMenu
  class IGenericMenu;
  // Forward declaring type: PointerDownEvent
  class PointerDownEvent;
  // Forward declaring type: PointerMoveEvent
  class PointerMoveEvent;
  // Forward declaring type: PointerEventBase`1<T>
  template<typename T>
  class PointerEventBase_1;
  // Forward declaring type: NavigationSubmitEvent
  class NavigationSubmitEvent;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: Enum because it is already included!
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: EnumField
  class EnumField;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::EnumField);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::EnumField*, "UnityEngine.UIElements", "EnumField");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.EnumField
  // [TokenAttribute] Offset: FFFFFFFF
  // [MovedFromAttribute] Offset: FFFFFFFF
  class EnumField : public ::UnityEngine::UIElements::BaseField_1<::System::Enum*> {
    public:
    // Nested type: ::UnityEngine::UIElements::EnumField::UxmlFactory
    class UxmlFactory;
    // Nested type: ::UnityEngine::UIElements::EnumField::UxmlTraits
    class UxmlTraits;
    // Nested type: ::UnityEngine::UIElements::EnumField::$$c
    class $$c;
    public:
    // private System.Type m_EnumType
    // Size: 0x8
    // Offset: 0x428
    ::System::Type* m_EnumType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.Boolean m_IncludeObsoleteValues
    // Size: 0x1
    // Offset: 0x430
    bool m_IncludeObsoleteValues;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.UIElements.TextElement m_TextElement
    // Size: 0x8
    // Offset: 0x438
    ::UnityEngine::UIElements::TextElement* m_TextElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::TextElement*) == 0x8);
    // private UnityEngine.UIElements.VisualElement m_ArrowElement
    // Size: 0x8
    // Offset: 0x440
    ::UnityEngine::UIElements::VisualElement* m_ArrowElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.EnumData m_EnumData
    // Size: 0x3A
    // Offset: 0x448
    ::UnityEngine::EnumData m_EnumData;
    // Field size check
    static_assert(sizeof(::UnityEngine::EnumData) == 0x3A);
    // System.Func`1<UnityEngine.UIElements.IGenericMenu> createMenuCallback
    // Size: 0x8
    // Offset: 0x488
    ::System::Func_1<::UnityEngine::UIElements::IGenericMenu*>* createMenuCallback;
    // Field size check
    static_assert(sizeof(::System::Func_1<::UnityEngine::UIElements::IGenericMenu*>*) == 0x8);
    public:
    // Get static field: static public readonly System.String ussClassName
    static ::StringW _get_ussClassName();
    // Set static field: static public readonly System.String ussClassName
    static void _set_ussClassName(::StringW value);
    // Get static field: static public readonly System.String textUssClassName
    static ::StringW _get_textUssClassName();
    // Set static field: static public readonly System.String textUssClassName
    static void _set_textUssClassName(::StringW value);
    // Get static field: static public readonly System.String arrowUssClassName
    static ::StringW _get_arrowUssClassName();
    // Set static field: static public readonly System.String arrowUssClassName
    static void _set_arrowUssClassName(::StringW value);
    // Get static field: static public readonly System.String labelUssClassName
    static ::StringW _get_labelUssClassName();
    // Set static field: static public readonly System.String labelUssClassName
    static void _set_labelUssClassName(::StringW value);
    // Get static field: static public readonly System.String inputUssClassName
    static ::StringW _get_inputUssClassName();
    // Set static field: static public readonly System.String inputUssClassName
    static void _set_inputUssClassName(::StringW value);
    // Get instance field reference: private System.Type m_EnumType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_m_EnumType();
    // Get instance field reference: private System.Boolean m_IncludeObsoleteValues
    [[deprecated("Use field access instead!")]] bool& dyn_m_IncludeObsoleteValues();
    // Get instance field reference: private UnityEngine.UIElements.TextElement m_TextElement
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::TextElement*& dyn_m_TextElement();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement m_ArrowElement
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_ArrowElement();
    // Get instance field reference: private UnityEngine.EnumData m_EnumData
    [[deprecated("Use field access instead!")]] ::UnityEngine::EnumData& dyn_m_EnumData();
    // Get instance field reference: System.Func`1<UnityEngine.UIElements.IGenericMenu> createMenuCallback
    [[deprecated("Use field access instead!")]] ::System::Func_1<::UnityEngine::UIElements::IGenericMenu*>*& dyn_createMenuCallback();
    // System.Boolean get_includeObsoleteValues()
    // Offset: 0x55B56D0
    bool get_includeObsoleteValues();
    // private System.Void Initialize(System.Enum defaultValue)
    // Offset: 0x55B56D8
    void Initialize(::System::Enum* defaultValue);
    // public System.Void .ctor(System.String label, System.Enum defaultValue)
    // Offset: 0x55B5898
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnumField* New_ctor(::StringW label, ::System::Enum* defaultValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::EnumField::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnumField*, creationType>(label, defaultValue)));
    }
    // public System.Void Init(System.Enum defaultValue)
    // Offset: 0x55B5884
    void Init(::System::Enum* defaultValue);
    // public System.Void Init(System.Enum defaultValue, System.Boolean includeObsoleteValues)
    // Offset: 0x55B5BE8
    void Init(::System::Enum* defaultValue, bool includeObsoleteValues);
    // System.Void PopulateDataFromType(System.Type enumType)
    // Offset: 0x55B5CEC
    void PopulateDataFromType(::System::Type* enumType);
    // public System.Void SetValueWithoutNotify(System.Enum newValue)
    // Offset: 0x55B5E94
    void SetValueWithoutNotify(::System::Enum* newValue);
    // private System.Void UpdateValueLabel(System.Enum value)
    // Offset: 0x55B5DA8
    void UpdateValueLabel(::System::Enum* value);
    // private System.Void OnPointerDownEvent(UnityEngine.UIElements.PointerDownEvent evt)
    // Offset: 0x55B5F74
    void OnPointerDownEvent(::UnityEngine::UIElements::PointerDownEvent* evt);
    // private System.Void OnPointerMoveEvent(UnityEngine.UIElements.PointerMoveEvent evt)
    // Offset: 0x55B5FCC
    void OnPointerMoveEvent(::UnityEngine::UIElements::PointerMoveEvent* evt);
    // private System.Boolean ContainsPointer(System.Int32 pointerId)
    // Offset: 0x55B6058
    bool ContainsPointer(int pointerId);
    // private System.Void ProcessPointerDown(UnityEngine.UIElements.PointerEventBase`1<T> evt)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void ProcessPointerDown(::UnityEngine::UIElements::PointerEventBase_1<T>* evt) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::UIElements::PointerEventBase_1<T>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::EnumField::ProcessPointerDown");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessPointerDown", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, evt);
    }
    // private System.Void OnNavigationSubmit(UnityEngine.UIElements.NavigationSubmitEvent evt)
    // Offset: 0x55B60DC
    void OnNavigationSubmit(::UnityEngine::UIElements::NavigationSubmitEvent* evt);
    // private System.Void ShowMenu()
    // Offset: 0x55B6100
    void ShowMenu();
    // private System.Void ChangeValueFromMenu(System.Object menuItem)
    // Offset: 0x55B6764
    void ChangeValueFromMenu(::Il2CppObject* menuItem);
    // private System.Void <ShowMenu>b__33_0(System.Object contentView)
    // Offset: 0x55B6A8C
    void $ShowMenu$b__33_0(::Il2CppObject* contentView);
    // public System.Void .ctor()
    // Offset: 0x55B588C
    // Implemented from: UnityEngine.UIElements.BindableElement
    // Base method: System.Void BindableElement::.ctor()
    // Base method: System.Void VisualElement::.ctor()
    // Base method: System.Void Focusable::.ctor()
    // Base method: System.Void CallbackEventHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnumField* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::EnumField::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnumField*, creationType>()));
    }
    // protected override System.Void UpdateMixedValueContent()
    // Offset: 0x55B67F0
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: System.Void BaseField_1::UpdateMixedValueContent()
    void UpdateMixedValueContent();
    // static private System.Void .cctor()
    // Offset: 0x55B6900
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: System.Void BaseField_1::.cctor()
    // Base method: System.Void VisualElement::.cctor()
    static void _cctor();
  }; // UnityEngine.UIElements.EnumField
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::get_includeObsoleteValues
// Il2CppName: get_includeObsoleteValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::EnumField::*)()>(&UnityEngine::UIElements::EnumField::get_includeObsoleteValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), "get_includeObsoleteValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::EnumField::*)(::System::Enum*)>(&UnityEngine::UIElements::EnumField::Initialize)> {
  static const MethodInfo* get() {
    static auto* defaultValue = &::il2cpp_utils::GetClassFromName("System", "Enum")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{defaultValue});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::EnumField::*)(::System::Enum*)>(&UnityEngine::UIElements::EnumField::Init)> {
  static const MethodInfo* get() {
    static auto* defaultValue = &::il2cpp_utils::GetClassFromName("System", "Enum")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{defaultValue});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::EnumField::*)(::System::Enum*, bool)>(&UnityEngine::UIElements::EnumField::Init)> {
  static const MethodInfo* get() {
    static auto* defaultValue = &::il2cpp_utils::GetClassFromName("System", "Enum")->byval_arg;
    static auto* includeObsoleteValues = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{defaultValue, includeObsoleteValues});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::PopulateDataFromType
// Il2CppName: PopulateDataFromType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::EnumField::*)(::System::Type*)>(&UnityEngine::UIElements::EnumField::PopulateDataFromType)> {
  static const MethodInfo* get() {
    static auto* enumType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), "PopulateDataFromType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enumType});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::SetValueWithoutNotify
// Il2CppName: SetValueWithoutNotify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::EnumField::*)(::System::Enum*)>(&UnityEngine::UIElements::EnumField::SetValueWithoutNotify)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Enum")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), "SetValueWithoutNotify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::UpdateValueLabel
// Il2CppName: UpdateValueLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::EnumField::*)(::System::Enum*)>(&UnityEngine::UIElements::EnumField::UpdateValueLabel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Enum")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), "UpdateValueLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::OnPointerDownEvent
// Il2CppName: OnPointerDownEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::EnumField::*)(::UnityEngine::UIElements::PointerDownEvent*)>(&UnityEngine::UIElements::EnumField::OnPointerDownEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "PointerDownEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), "OnPointerDownEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::OnPointerMoveEvent
// Il2CppName: OnPointerMoveEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::EnumField::*)(::UnityEngine::UIElements::PointerMoveEvent*)>(&UnityEngine::UIElements::EnumField::OnPointerMoveEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "PointerMoveEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), "OnPointerMoveEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::ContainsPointer
// Il2CppName: ContainsPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::EnumField::*)(int)>(&UnityEngine::UIElements::EnumField::ContainsPointer)> {
  static const MethodInfo* get() {
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), "ContainsPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::ProcessPointerDown
// Il2CppName: ProcessPointerDown
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::OnNavigationSubmit
// Il2CppName: OnNavigationSubmit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::EnumField::*)(::UnityEngine::UIElements::NavigationSubmitEvent*)>(&UnityEngine::UIElements::EnumField::OnNavigationSubmit)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "NavigationSubmitEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), "OnNavigationSubmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::ShowMenu
// Il2CppName: ShowMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::EnumField::*)()>(&UnityEngine::UIElements::EnumField::ShowMenu)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), "ShowMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::ChangeValueFromMenu
// Il2CppName: ChangeValueFromMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::EnumField::*)(::Il2CppObject*)>(&UnityEngine::UIElements::EnumField::ChangeValueFromMenu)> {
  static const MethodInfo* get() {
    static auto* menuItem = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), "ChangeValueFromMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{menuItem});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::$ShowMenu$b__33_0
// Il2CppName: <ShowMenu>b__33_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::EnumField::*)(::Il2CppObject*)>(&UnityEngine::UIElements::EnumField::$ShowMenu$b__33_0)> {
  static const MethodInfo* get() {
    static auto* contentView = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), "<ShowMenu>b__33_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentView});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::UpdateMixedValueContent
// Il2CppName: UpdateMixedValueContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::EnumField::*)()>(&UnityEngine::UIElements::EnumField::UpdateMixedValueContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), "UpdateMixedValueContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EnumField::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::EnumField::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EnumField*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
