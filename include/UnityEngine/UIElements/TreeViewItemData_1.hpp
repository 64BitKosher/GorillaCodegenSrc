// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TreeViewItemData`1<T>
  template<typename T>
  struct TreeViewItemData_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::UnityEngine::UIElements::TreeViewItemData_1, "UnityEngine.UIElements", "TreeViewItemData`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.TreeViewItemData`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  template<typename T>
  struct TreeViewItemData_1/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Int32 <id>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly T m_Data
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T m_Data;
    // private readonly System.Collections.Generic.IList`1<UnityEngine.UIElements.TreeViewItemData`1<T>> m_Children
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IList_1<::UnityEngine::UIElements::TreeViewItemData_1<T>>* m_Children;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IList_1<::UnityEngine::UIElements::TreeViewItemData_1<T>>*) == 0x8);
    public:
    // Creating value type constructor for type: TreeViewItemData_1
    constexpr TreeViewItemData_1(int id_ = {}, T m_Data_ = {}, ::System::Collections::Generic::IList_1<::UnityEngine::UIElements::TreeViewItemData_1<T>>* m_Children_ = {}) noexcept : id{id_}, m_Data{m_Data_}, m_Children{m_Children_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 <id>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$id$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeViewItemData_1::dyn_$id$k__BackingField");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<id>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly T m_Data
    [[deprecated("Use field access instead!")]] T& dyn_m_Data() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeViewItemData_1::dyn_m_Data");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Data"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.IList`1<UnityEngine.UIElements.TreeViewItemData`1<T>> m_Children
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IList_1<::UnityEngine::UIElements::TreeViewItemData_1<T>>*& dyn_m_Children() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeViewItemData_1::dyn_m_Children");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Children"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IList_1<::UnityEngine::UIElements::TreeViewItemData_1<T>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_id()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_id() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeViewItemData_1::get_id");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public T get_data()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_data() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeViewItemData_1::get_data");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Collections.Generic.IEnumerable`1<UnityEngine.UIElements.TreeViewItemData`1<T>> get_children()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<::UnityEngine::UIElements::TreeViewItemData_1<T>>* get_children() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeViewItemData_1::get_children");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_children", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::UIElements::TreeViewItemData_1<T>>*, false>(this, ___internal__method);
    }
    // public System.Boolean get_hasChildren()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_hasChildren() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeViewItemData_1::get_hasChildren");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_hasChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // System.Void InsertChild(UnityEngine.UIElements.TreeViewItemData`1<T> child, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InsertChild(::UnityEngine::UIElements::TreeViewItemData_1<T> child, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeViewItemData_1::InsertChild");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InsertChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(child), ::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, child, index);
    }
    // System.Void RemoveChild(System.Int32 childId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveChild(int childId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeViewItemData_1::RemoveChild");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "RemoveChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childId)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, childId);
    }
    // System.Int32 GetChildIndex(System.Int32 itemId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetChildIndex(int itemId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeViewItemData_1::GetChildIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetChildIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(itemId)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, itemId);
    }
    // System.Void ReplaceChild(UnityEngine.UIElements.TreeViewItemData`1<T> newChild)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ReplaceChild(::UnityEngine::UIElements::TreeViewItemData_1<T> newChild) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeViewItemData_1::ReplaceChild");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ReplaceChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newChild)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newChild);
    }
  }; // UnityEngine.UIElements.TreeViewItemData`1
  // Could not write size check! Type: UnityEngine.UIElements.TreeViewItemData`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
