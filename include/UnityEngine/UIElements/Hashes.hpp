// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Hashes
  struct Hashes;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::Hashes, "UnityEngine.UIElements", "Hashes");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.Hashes
  // [TokenAttribute] Offset: FFFFFFFF
  struct Hashes/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::Hashes::$hashes$e__FixedBuffer
    struct $hashes$e__FixedBuffer;
    // Size: 0x4
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.Hashes/<hashes>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    struct $hashes$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 FixedElementField
      // Size: 0x4
      // Offset: 0x0
      int FixedElementField;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: $hashes$e__FixedBuffer
      constexpr $hashes$e__FixedBuffer(int FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Int32 FixedElementField
      [[deprecated("Use field access instead!")]] int& dyn_FixedElementField();
    }; // UnityEngine.UIElements.Hashes/<hashes>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(Hashes::$hashes$e__FixedBuffer), 0 + sizeof(int)> __UnityEngine_UIElements_Hashes_$hashes$e__FixedBufferSizeCheck;
    static_assert(sizeof(Hashes::$hashes$e__FixedBuffer) == 0x4);
    public:
    // public UnityEngine.UIElements.Hashes/<hashes>e__FixedBuffer hashes
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::UIElements::Hashes::$hashes$e__FixedBuffer hashes;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Hashes::$hashes$e__FixedBuffer) == 0x4);
    public:
    // Creating value type constructor for type: Hashes
    constexpr Hashes(::UnityEngine::UIElements::Hashes::$hashes$e__FixedBuffer hashes_ = {}) noexcept : hashes{hashes_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::UIElements::Hashes::$hashes$e__FixedBuffer
    constexpr operator ::UnityEngine::UIElements::Hashes::$hashes$e__FixedBuffer() const noexcept {
      return hashes;
    }
    // static field const value: static public System.Int32 kSize
    static constexpr const int kSize = 4;
    // Get static field: static public System.Int32 kSize
    static int _get_kSize();
    // Set static field: static public System.Int32 kSize
    static void _set_kSize(int value);
    // Get instance field reference: public UnityEngine.UIElements.Hashes/<hashes>e__FixedBuffer hashes
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Hashes::$hashes$e__FixedBuffer& dyn_hashes();
  }; // UnityEngine.UIElements.Hashes
  #pragma pack(pop)
  static check_size<sizeof(Hashes), 0 + sizeof(::UnityEngine::UIElements::Hashes::$hashes$e__FixedBuffer)> __UnityEngine_UIElements_HashesSizeCheck;
  static_assert(sizeof(Hashes) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::Hashes::$hashes$e__FixedBuffer, "UnityEngine.UIElements", "Hashes/<hashes>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
