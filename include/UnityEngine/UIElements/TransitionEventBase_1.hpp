// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.EventBase`1
#include "UnityEngine/UIElements/EventBase_1.hpp"
// Including type: UnityEngine.UIElements.StylePropertyNameCollection
#include "UnityEngine/UIElements/StylePropertyNameCollection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TransitionEventBase`1<T>
  template<typename T>
  class TransitionEventBase_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::TransitionEventBase_1, "UnityEngine.UIElements", "TransitionEventBase`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.TransitionEventBase`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [EventCategoryAttribute] Offset: FFFFFFFF
  template<typename T>
  class TransitionEventBase_1 : public ::UnityEngine::UIElements::EventBase_1<T> {
    public:
    public:
    // private readonly UnityEngine.UIElements.StylePropertyNameCollection <stylePropertyNames>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::StylePropertyNameCollection stylePropertyNames;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StylePropertyNameCollection) == 0x8);
    // private System.Double <elapsedTime>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    double elapsedTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Autogenerated instance field getter
    // Get instance field: private readonly UnityEngine.UIElements.StylePropertyNameCollection <stylePropertyNames>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StylePropertyNameCollection& dyn_$stylePropertyNames$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TransitionEventBase_1::dyn_$stylePropertyNames$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<stylePropertyNames>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::StylePropertyNameCollection*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Double <elapsedTime>k__BackingField
    [[deprecated("Use field access instead!")]] double& dyn_$elapsedTime$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TransitionEventBase_1::dyn_$elapsedTime$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<elapsedTime>k__BackingField"))->offset;
      return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public UnityEngine.UIElements.StylePropertyNameCollection get_stylePropertyNames()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::StylePropertyNameCollection get_stylePropertyNames() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TransitionEventBase_1::get_stylePropertyNames");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::TransitionEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::StylePropertyNameCollection, false>(this, ___internal__method);
    }
    // protected System.Void set_elapsedTime(System.Double value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_elapsedTime(double value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TransitionEventBase_1::set_elapsedTime");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_elapsedTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // static public T GetPooled(UnityEngine.UIElements.StylePropertyName stylePropertyName, System.Double elapsedTime)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T GetPooled(::UnityEngine::UIElements::StylePropertyName stylePropertyName, double elapsedTime) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TransitionEventBase_1::GetPooled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TransitionEventBase_1<T>*>::get(), "GetPooled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stylePropertyName), ::il2cpp_utils::ExtractType(elapsedTime)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, stylePropertyName, elapsedTime);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase`1
    // Base method: System.Void EventBase_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransitionEventBase_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TransitionEventBase_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransitionEventBase_1<T>*, creationType>()));
    }
    // protected override System.Void Init()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase`1
    // Base method: System.Void EventBase_1::Init()
    void Init() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TransitionEventBase_1::Init");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::EventBase_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void LocalInit()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase
    // Base method: System.Void EventBase::LocalInit()
    void LocalInit() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TransitionEventBase_1::LocalInit");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // UnityEngine.UIElements.TransitionEventBase`1
  // Could not write size check! Type: UnityEngine.UIElements.TransitionEventBase`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
