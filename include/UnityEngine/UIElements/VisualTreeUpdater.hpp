// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.UIElements.VisualTreeUpdatePhase
#include "UnityEngine/UIElements/VisualTreeUpdatePhase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: BaseVisualElementPanel
  class BaseVisualElementPanel;
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: VersionChangeType
  struct VersionChangeType;
  // Forward declaring type: IVisualTreeUpdater
  class IVisualTreeUpdater;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualTreeUpdater
  class VisualTreeUpdater;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::VisualTreeUpdater);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualTreeUpdater*, "UnityEngine.UIElements", "VisualTreeUpdater");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.VisualTreeUpdater
  // [TokenAttribute] Offset: FFFFFFFF
  class VisualTreeUpdater : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::VisualTreeUpdater::UpdaterArray
    class UpdaterArray;
    public:
    // private UnityEngine.UIElements.BaseVisualElementPanel m_Panel
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::BaseVisualElementPanel* m_Panel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BaseVisualElementPanel*) == 0x8);
    // private UnityEngine.UIElements.VisualTreeUpdater/UpdaterArray m_UpdaterArray
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::VisualTreeUpdater::UpdaterArray* m_UpdaterArray;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualTreeUpdater::UpdaterArray*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private UnityEngine.UIElements.BaseVisualElementPanel m_Panel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BaseVisualElementPanel*& dyn_m_Panel();
    // Get instance field reference: private UnityEngine.UIElements.VisualTreeUpdater/UpdaterArray m_UpdaterArray
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualTreeUpdater::UpdaterArray*& dyn_m_UpdaterArray();
    // public System.Void .ctor(UnityEngine.UIElements.BaseVisualElementPanel panel)
    // Offset: 0x55C8780
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisualTreeUpdater* New_ctor(::UnityEngine::UIElements::BaseVisualElementPanel* panel) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VisualTreeUpdater::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisualTreeUpdater*, creationType>(panel)));
    }
    // public System.Void Dispose()
    // Offset: 0x55C89AC
    void Dispose();
    // public System.Void UpdateVisualTreePhase(UnityEngine.UIElements.VisualTreeUpdatePhase phase)
    // Offset: 0x55C8AA8
    void UpdateVisualTreePhase(::UnityEngine::UIElements::VisualTreeUpdatePhase phase);
    // public System.Void OnVersionChanged(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.VersionChangeType versionChangeType)
    // Offset: 0x55C8CA4
    void OnVersionChanged(::UnityEngine::UIElements::VisualElement* ve, ::UnityEngine::UIElements::VersionChangeType versionChangeType);
    // public System.Void SetUpdater(UnityEngine.UIElements.VisualTreeUpdatePhase phase)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetUpdater(::UnityEngine::UIElements::VisualTreeUpdatePhase phase) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::UnityEngine::UIElements::IVisualTreeUpdater>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VisualTreeUpdater::SetUpdater");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUpdater", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(phase)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, phase);
    }
    // public UnityEngine.UIElements.IVisualTreeUpdater GetUpdater(UnityEngine.UIElements.VisualTreeUpdatePhase phase)
    // Offset: 0x55C8D8C
    ::UnityEngine::UIElements::IVisualTreeUpdater* GetUpdater(::UnityEngine::UIElements::VisualTreeUpdatePhase phase);
    // private System.Void SetDefaultUpdaters()
    // Offset: 0x55C8870
    void SetDefaultUpdaters();
  }; // UnityEngine.UIElements.VisualTreeUpdater
  #pragma pack(pop)
  static check_size<sizeof(VisualTreeUpdater), 24 + sizeof(::UnityEngine::UIElements::VisualTreeUpdater::UpdaterArray*)> __UnityEngine_UIElements_VisualTreeUpdaterSizeCheck;
  static_assert(sizeof(VisualTreeUpdater) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeUpdater::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeUpdater::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeUpdater::*)()>(&UnityEngine::UIElements::VisualTreeUpdater::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeUpdater*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeUpdater::UpdateVisualTreePhase
// Il2CppName: UpdateVisualTreePhase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeUpdater::*)(::UnityEngine::UIElements::VisualTreeUpdatePhase)>(&UnityEngine::UIElements::VisualTreeUpdater::UpdateVisualTreePhase)> {
  static const MethodInfo* get() {
    static auto* phase = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualTreeUpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeUpdater*), "UpdateVisualTreePhase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{phase});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeUpdater::OnVersionChanged
// Il2CppName: OnVersionChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeUpdater::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::VersionChangeType)>(&UnityEngine::UIElements::VisualTreeUpdater::OnVersionChanged)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* versionChangeType = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VersionChangeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeUpdater*), "OnVersionChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, versionChangeType});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeUpdater::SetUpdater
// Il2CppName: SetUpdater
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeUpdater::GetUpdater
// Il2CppName: GetUpdater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IVisualTreeUpdater* (UnityEngine::UIElements::VisualTreeUpdater::*)(::UnityEngine::UIElements::VisualTreeUpdatePhase)>(&UnityEngine::UIElements::VisualTreeUpdater::GetUpdater)> {
  static const MethodInfo* get() {
    static auto* phase = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualTreeUpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeUpdater*), "GetUpdater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{phase});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeUpdater::SetDefaultUpdaters
// Il2CppName: SetDefaultUpdaters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeUpdater::*)()>(&UnityEngine::UIElements::VisualTreeUpdater::SetDefaultUpdaters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeUpdater*), "SetDefaultUpdaters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
