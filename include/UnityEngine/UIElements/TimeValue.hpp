// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.UIElements.TimeUnit
#include "UnityEngine/UIElements/TimeUnit.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TimeValue
  struct TimeValue;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::TimeValue, "UnityEngine.UIElements", "TimeValue");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.TimeValue
  // [TokenAttribute] Offset: FFFFFFFF
  struct TimeValue/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::UIElements::TimeValue>*/ {
    public:
    public:
    // private System.Single m_Value
    // Size: 0x4
    // Offset: 0x0
    float m_Value;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.UIElements.TimeUnit m_Unit
    // Size: 0x4
    // Offset: 0x4
    ::UnityEngine::UIElements::TimeUnit m_Unit;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::TimeUnit) == 0x4);
    public:
    // Creating value type constructor for type: TimeValue
    constexpr TimeValue(float m_Value_ = {}, ::UnityEngine::UIElements::TimeUnit m_Unit_ = {}) noexcept : m_Value{m_Value_}, m_Unit{m_Unit_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::TimeValue>
    operator ::System::IEquatable_1<::UnityEngine::UIElements::TimeValue>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::TimeValue>*>(this);
    }
    // Get instance field reference: private System.Single m_Value
    [[deprecated("Use field access instead!")]] float& dyn_m_Value();
    // Get instance field reference: private UnityEngine.UIElements.TimeUnit m_Unit
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::TimeUnit& dyn_m_Unit();
    // public System.Single get_value()
    // Offset: 0x56AAA48
    float get_value();
    // public UnityEngine.UIElements.TimeUnit get_unit()
    // Offset: 0x56AAA50
    ::UnityEngine::UIElements::TimeUnit get_unit();
    // public System.Void .ctor(System.Single value)
    // Offset: 0x56AAA58
    TimeValue(float value);
    // public System.Void .ctor(System.Single value, UnityEngine.UIElements.TimeUnit unit)
    // Offset: 0x56AAA64
    // ABORTED: conflicts with another method.  TimeValue(float value, ::UnityEngine::UIElements::TimeUnit unit);
    // public System.Boolean Equals(UnityEngine.UIElements.TimeValue other)
    // Offset: 0x56AAAC8
    bool Equals(::UnityEngine::UIElements::TimeValue other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x56AAAF0
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x56AAB7C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x56AABA4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.UIElements.TimeValue
  #pragma pack(pop)
  static check_size<sizeof(TimeValue), 4 + sizeof(::UnityEngine::UIElements::TimeUnit)> __UnityEngine_UIElements_TimeValueSizeCheck;
  static_assert(sizeof(TimeValue) == 0x8);
  // static public System.Boolean op_Equality(UnityEngine.UIElements.TimeValue lhs, UnityEngine.UIElements.TimeValue rhs)
  // Offset: 0x56AAA78
  bool operator ==(const ::UnityEngine::UIElements::TimeValue& lhs, const ::UnityEngine::UIElements::TimeValue& rhs);
  // static public System.Boolean op_Inequality(UnityEngine.UIElements.TimeValue lhs, UnityEngine.UIElements.TimeValue rhs)
  // Offset: 0x56AAAA0
  bool operator !=(const ::UnityEngine::UIElements::TimeValue& lhs, const ::UnityEngine::UIElements::TimeValue& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::TimeValue::get_value
// Il2CppName: get_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::TimeValue::*)()>(&UnityEngine::UIElements::TimeValue::get_value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TimeValue), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TimeValue::get_unit
// Il2CppName: get_unit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::TimeUnit (UnityEngine::UIElements::TimeValue::*)()>(&UnityEngine::UIElements::TimeValue::get_unit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TimeValue), "get_unit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TimeValue::TimeValue
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::TimeValue::TimeValue
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::TimeValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::TimeValue::*)(::UnityEngine::UIElements::TimeValue)>(&UnityEngine::UIElements::TimeValue::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TimeValue")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TimeValue), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TimeValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::TimeValue::*)(::Il2CppObject*)>(&UnityEngine::UIElements::TimeValue::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TimeValue), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TimeValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::TimeValue::*)()>(&UnityEngine::UIElements::TimeValue::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TimeValue), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TimeValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::UIElements::TimeValue::*)()>(&UnityEngine::UIElements::TimeValue::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TimeValue), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TimeValue::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::UIElements::TimeValue::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
