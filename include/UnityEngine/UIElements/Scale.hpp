// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Scale
  struct Scale;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::Scale, "UnityEngine.UIElements", "Scale");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0xD
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.Scale
  // [TokenAttribute] Offset: FFFFFFFF
  struct Scale/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::UIElements::Scale>*/ {
    public:
    public:
    // private UnityEngine.Vector3 m_Scale
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 m_Scale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean m_IsNone
    // Size: 0x1
    // Offset: 0xC
    bool m_IsNone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: Scale
    constexpr Scale(::UnityEngine::Vector3 m_Scale_ = {}, bool m_IsNone_ = {}) noexcept : m_Scale{m_Scale_}, m_IsNone{m_IsNone_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::Scale>
    operator ::System::IEquatable_1<::UnityEngine::UIElements::Scale>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::Scale>*>(this);
    }
    // Get instance field reference: private UnityEngine.Vector3 m_Scale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Scale();
    // Get instance field reference: private System.Boolean m_IsNone
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsNone();
    // public System.Void .ctor(UnityEngine.Vector3 scale)
    // Offset: 0x56A816C
    Scale(::UnityEngine::Vector3 scale);
    // static UnityEngine.UIElements.Scale Initial()
    // Offset: 0x56A8278
    static ::UnityEngine::UIElements::Scale Initial();
    // static public UnityEngine.UIElements.Scale None()
    // Offset: 0x56A82D4
    static ::UnityEngine::UIElements::Scale None();
    // public UnityEngine.Vector3 get_value()
    // Offset: 0x56A82EC
    ::UnityEngine::Vector3 get_value();
    // public System.Boolean Equals(UnityEngine.UIElements.Scale other)
    // Offset: 0x56A834C
    bool Equals(::UnityEngine::UIElements::Scale other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x56A83A0
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x56A6780
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x56A845C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.UIElements.Scale
  #pragma pack(pop)
  static check_size<sizeof(Scale), 12 + sizeof(bool)> __UnityEngine_UIElements_ScaleSizeCheck;
  static_assert(sizeof(Scale) == 0xD);
  // static public System.Boolean op_Equality(UnityEngine.UIElements.Scale lhs, UnityEngine.UIElements.Scale rhs)
  // Offset: 0x56A648C
  bool operator ==(const ::UnityEngine::UIElements::Scale& lhs, const ::UnityEngine::UIElements::Scale& rhs);
  // static public System.Boolean op_Inequality(UnityEngine.UIElements.Scale lhs, UnityEngine.UIElements.Scale rhs)
  // Offset: 0x56A82F8
  bool operator !=(const ::UnityEngine::UIElements::Scale& lhs, const ::UnityEngine::UIElements::Scale& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::Scale::Scale
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::Scale::Initial
// Il2CppName: Initial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Scale (*)()>(&UnityEngine::UIElements::Scale::Initial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Scale), "Initial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Scale::None
// Il2CppName: None
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Scale (*)()>(&UnityEngine::UIElements::Scale::None)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Scale), "None", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Scale::get_value
// Il2CppName: get_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::UIElements::Scale::*)()>(&UnityEngine::UIElements::Scale::get_value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Scale), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Scale::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::Scale::*)(::UnityEngine::UIElements::Scale)>(&UnityEngine::UIElements::Scale::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Scale")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Scale), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Scale::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::Scale::*)(::Il2CppObject*)>(&UnityEngine::UIElements::Scale::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Scale), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Scale::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::Scale::*)()>(&UnityEngine::UIElements::Scale::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Scale), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Scale::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::UIElements::Scale::*)()>(&UnityEngine::UIElements::Scale::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Scale), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Scale::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::UIElements::Scale::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
