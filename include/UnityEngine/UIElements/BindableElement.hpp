// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.VisualElement
#include "UnityEngine/UIElements/VisualElement.hpp"
// Including type: UnityEngine.UIElements.IBindable
#include "UnityEngine/UIElements/IBindable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: IBinding
  class IBinding;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: BindableElement
  class BindableElement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::BindableElement);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::BindableElement*, "UnityEngine.UIElements", "BindableElement");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.BindableElement
  // [TokenAttribute] Offset: FFFFFFFF
  class BindableElement : public ::UnityEngine::UIElements::VisualElement/*, public ::UnityEngine::UIElements::IBindable*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::BindableElement::UxmlFactory
    class UxmlFactory;
    // Nested type: ::UnityEngine::UIElements::BindableElement::UxmlTraits
    class UxmlTraits;
    public:
    // private UnityEngine.UIElements.IBinding <binding>k__BackingField
    // Size: 0x8
    // Offset: 0x3C0
    ::UnityEngine::UIElements::IBinding* binding;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::IBinding*) == 0x8);
    // private System.String <bindingPath>k__BackingField
    // Size: 0x8
    // Offset: 0x3C8
    ::StringW bindingPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IBindable
    operator ::UnityEngine::UIElements::IBindable() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IBindable*>(this);
    }
    // Get instance field reference: private UnityEngine.UIElements.IBinding <binding>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::IBinding*& dyn_$binding$k__BackingField();
    // Get instance field reference: private System.String <bindingPath>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$bindingPath$k__BackingField();
    // public UnityEngine.UIElements.IBinding get_binding()
    // Offset: 0x55937A8
    ::UnityEngine::UIElements::IBinding* get_binding();
    // public System.Void set_bindingPath(System.String value)
    // Offset: 0x55937B0
    void set_bindingPath(::StringW value);
    // public System.Void .ctor()
    // Offset: 0x55937C0
    // Implemented from: UnityEngine.UIElements.VisualElement
    // Base method: System.Void VisualElement::.ctor()
    // Base method: System.Void Focusable::.ctor()
    // Base method: System.Void CallbackEventHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BindableElement* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BindableElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BindableElement*, creationType>()));
    }
  }; // UnityEngine.UIElements.BindableElement
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::BindableElement::get_binding
// Il2CppName: get_binding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IBinding* (UnityEngine::UIElements::BindableElement::*)()>(&UnityEngine::UIElements::BindableElement::get_binding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BindableElement*), "get_binding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BindableElement::set_bindingPath
// Il2CppName: set_bindingPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BindableElement::*)(::StringW)>(&UnityEngine::UIElements::BindableElement::set_bindingPath)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BindableElement*), "set_bindingPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BindableElement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
