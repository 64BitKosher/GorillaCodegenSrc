// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.StartDragArgs
#include "UnityEngine/UIElements/StartDragArgs.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: ReusableCollectionItem
  class ReusableCollectionItem;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: IDragAndDropController`1<TArgs>
  template<typename TArgs>
  class IDragAndDropController_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::IDragAndDropController_1, "UnityEngine.UIElements", "IDragAndDropController`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.IDragAndDropController`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TArgs>
  class IDragAndDropController_1 {
    public:
    // public System.Boolean CanStartDrag(System.Collections.Generic.IEnumerable`1<System.Int32> itemIds)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool CanStartDrag(::System::Collections::Generic::IEnumerable_1<int>* itemIds) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::IDragAndDropController_1::CanStartDrag");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::IDragAndDropController_1<TArgs>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, itemIds);
    }
    // public UnityEngine.UIElements.StartDragArgs SetupDragAndDrop(System.Collections.Generic.IEnumerable`1<System.Int32> itemIds, System.Boolean skipText)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::StartDragArgs SetupDragAndDrop(::System::Collections::Generic::IEnumerable_1<int>* itemIds, bool skipText) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::IDragAndDropController_1::SetupDragAndDrop");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::IDragAndDropController_1<TArgs>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::StartDragArgs, false>(this, ___internal__method, itemIds, skipText);
    }
    // public UnityEngine.UIElements.DragVisualMode HandleDragAndDrop(TArgs args)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::DragVisualMode HandleDragAndDrop(TArgs args) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::IDragAndDropController_1::HandleDragAndDrop");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::IDragAndDropController_1<TArgs>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::DragVisualMode, false>(this, ___internal__method, args);
    }
    // public System.Void OnDrop(TArgs args)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDrop(TArgs args) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::IDragAndDropController_1::OnDrop");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::IDragAndDropController_1<TArgs>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, args);
    }
    // public System.Void DragCleanup()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void DragCleanup() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::IDragAndDropController_1::DragCleanup");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::IDragAndDropController_1<TArgs>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void HandleAutoExpand(UnityEngine.UIElements.ReusableCollectionItem item, UnityEngine.Vector2 pointerPosition)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void HandleAutoExpand(::UnityEngine::UIElements::ReusableCollectionItem* item, ::UnityEngine::Vector2 pointerPosition) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::IDragAndDropController_1::HandleAutoExpand");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::IDragAndDropController_1<TArgs>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item, pointerPosition);
    }
    // public System.Collections.Generic.IEnumerable`1<System.Int32> GetSortedSelectedIds()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<int>* GetSortedSelectedIds() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::IDragAndDropController_1::GetSortedSelectedIds");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::IDragAndDropController_1<TArgs>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<int>*, false>(this, ___internal__method);
    }
  }; // UnityEngine.UIElements.IDragAndDropController`1
  // Could not write size check! Type: UnityEngine.UIElements.IDragAndDropController`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
