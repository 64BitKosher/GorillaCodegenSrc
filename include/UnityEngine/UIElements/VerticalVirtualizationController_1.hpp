// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.CollectionVirtualizationController
#include "UnityEngine/UIElements/CollectionVirtualizationController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Skipping declaration: <>c because it is already included!
  // Forward declaring type: ReusableCollectionItem
  class ReusableCollectionItem;
  // Forward declaring type: BaseVerticalCollectionView
  class BaseVerticalCollectionView;
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: SerializedVirtualizationData
  class SerializedVirtualizationData;
}
// Forward declaring namespace: UnityEngine::Pool
namespace UnityEngine::Pool {
  // Forward declaring type: ObjectPool`1<T>
  template<typename T>
  class ObjectPool_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VerticalVirtualizationController`1<T>
  template<typename T>
  class VerticalVirtualizationController_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::VerticalVirtualizationController_1, "UnityEngine.UIElements", "VerticalVirtualizationController`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.VerticalVirtualizationController`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class VerticalVirtualizationController_1 : public ::UnityEngine::UIElements::CollectionVirtualizationController {
    public:
    // Nested type: ::UnityEngine::UIElements::VerticalVirtualizationController_1::$$c<T>
    class $$c;
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.UIElements.VerticalVirtualizationController`1/<>c
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = VerticalVirtualizationController_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c";
      static constexpr bool IS_VALUE_TYPE = false;
      // Autogenerated static field getter
      // Get static field: static public readonly UnityEngine.UIElements.VerticalVirtualizationController`1/<>c<T> <>9
      static typename ::UnityEngine::UIElements::VerticalVirtualizationController_1<T>::$$c* _get_$$9() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::$$c::_get_$$9");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::VerticalVirtualizationController_1<T>::$$c*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename VerticalVirtualizationController_1<T>::$$c*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly UnityEngine.UIElements.VerticalVirtualizationController`1/<>c<T> <>9
      static void _set_$$9(typename ::UnityEngine::UIElements::VerticalVirtualizationController_1<T>::$$c* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::$$c::_set_$$9");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename VerticalVirtualizationController_1<T>::$$c*>::get(), "<>9", value)));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Func`1<T> <>9__30_0
      static ::System::Func_1<T>* _get_$$9__30_0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::$$c::_get_$$9__30_0");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_1<T>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename VerticalVirtualizationController_1<T>::$$c*>::get(), "<>9__30_0")));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Func`1<T> <>9__30_0
      static void _set_$$9__30_0(::System::Func_1<T>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::$$c::_set_$$9__30_0");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename VerticalVirtualizationController_1<T>::$$c*>::get(), "<>9__30_0", value)));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Action`1<T> <>9__30_1
      static ::System::Action_1<T>* _get_$$9__30_1() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::$$c::_get_$$9__30_1");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<T>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename VerticalVirtualizationController_1<T>::$$c*>::get(), "<>9__30_1")));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Action`1<T> <>9__30_1
      static void _set_$$9__30_1(::System::Action_1<T>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::$$c::_set_$$9__30_1");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename VerticalVirtualizationController_1<T>::$$c*>::get(), "<>9__30_1", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::$$c::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename VerticalVirtualizationController_1<T>::$$c*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename VerticalVirtualizationController_1<T>::$$c* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::$$c::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename VerticalVirtualizationController_1<T>::$$c*, creationType>()));
      }
      // T <.ctor>b__30_0()
      // Offset: 0xFFFFFFFFFFFFFFFF
      T $_ctor$b__30_0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::$$c::<.ctor>b__30_0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__30_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
      }
      // System.Void <.ctor>b__30_1(T i)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $_ctor$b__30_1(T i) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::$$c::<.ctor>b__30_1");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__30_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, i);
      }
    }; // UnityEngine.UIElements.VerticalVirtualizationController`1/<>c
    // Could not write size check! Type: UnityEngine.UIElements.VerticalVirtualizationController`1/<>c is generic, or has no fields that are valid for size checks!
    public:
    // private readonly UnityEngine.Pool.ObjectPool`1<T> m_Pool
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Pool::ObjectPool_1<T>* m_Pool;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pool::ObjectPool_1<T>*) == 0x8);
    // protected UnityEngine.UIElements.BaseVerticalCollectionView m_CollectionView
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::BaseVerticalCollectionView* m_CollectionView;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BaseVerticalCollectionView*) == 0x8);
    // protected System.Collections.Generic.List`1<T> m_ActiveItems
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<T>* m_ActiveItems;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<T>*) == 0x8);
    // protected T m_DraggedItem
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T m_DraggedItem;
    // private System.Int32 m_LastFocusedElementIndex
    // Size: 0x4
    // Offset: 0x0
    int m_LastFocusedElementIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.List`1<System.Int32> m_LastFocusedElementTreeChildIndexes
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<int>* m_LastFocusedElementTreeChildIndexes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // protected readonly System.Func`2<T,System.Boolean> m_VisibleItemPredicateDelegate
    // Size: 0x8
    // Offset: 0x0
    ::System::Func_2<T, bool>* m_VisibleItemPredicateDelegate;
    // Field size check
    static_assert(sizeof(::System::Func_2<T, bool>*) == 0x8);
    // protected System.Collections.Generic.List`1<T> m_ScrollInsertionList
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<T>* m_ScrollInsertionList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<T>*) == 0x8);
    // private UnityEngine.UIElements.VisualElement m_EmptyRows
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::VisualElement* m_EmptyRows;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    public:
    // Deleting conversion operator: operator ::UnityEngine::UIElements::ScrollView*
    constexpr operator ::UnityEngine::UIElements::ScrollView*() const noexcept = delete;
    // Autogenerated instance field getter
    // Get instance field: private readonly UnityEngine.Pool.ObjectPool`1<T> m_Pool
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pool::ObjectPool_1<T>*& dyn_m_Pool() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::dyn_m_Pool");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Pool"))->offset;
      return *reinterpret_cast<::UnityEngine::Pool::ObjectPool_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected UnityEngine.UIElements.BaseVerticalCollectionView m_CollectionView
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BaseVerticalCollectionView*& dyn_m_CollectionView() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::dyn_m_CollectionView");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CollectionView"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::BaseVerticalCollectionView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Collections.Generic.List`1<T> m_ActiveItems
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<T>*& dyn_m_ActiveItems() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::dyn_m_ActiveItems");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ActiveItems"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected T m_DraggedItem
    [[deprecated("Use field access instead!")]] T& dyn_m_DraggedItem() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::dyn_m_DraggedItem");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DraggedItem"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 m_LastFocusedElementIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_LastFocusedElementIndex() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::dyn_m_LastFocusedElementIndex");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LastFocusedElementIndex"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.List`1<System.Int32> m_LastFocusedElementTreeChildIndexes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_m_LastFocusedElementTreeChildIndexes() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::dyn_m_LastFocusedElementTreeChildIndexes");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LastFocusedElementTreeChildIndexes"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected readonly System.Func`2<T,System.Boolean> m_VisibleItemPredicateDelegate
    [[deprecated("Use field access instead!")]] ::System::Func_2<T, bool>*& dyn_m_VisibleItemPredicateDelegate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::dyn_m_VisibleItemPredicateDelegate");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_VisibleItemPredicateDelegate"))->offset;
      return *reinterpret_cast<::System::Func_2<T, bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Collections.Generic.List`1<T> m_ScrollInsertionList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<T>*& dyn_m_ScrollInsertionList() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::dyn_m_ScrollInsertionList");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ScrollInsertionList"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.VisualElement m_EmptyRows
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_EmptyRows() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::dyn_m_EmptyRows");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_EmptyRows"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::VisualElement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // System.Int32 get_itemsCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_itemsCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::get_itemsCount");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_itemsCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // protected System.Boolean VisibleItemPredicate(T i)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool VisibleItemPredicate(T i) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::VisibleItemPredicate");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::VerticalVirtualizationController_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, i);
    }
    // T get_firstVisibleItem()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_firstVisibleItem() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::get_firstVisibleItem");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_firstVisibleItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // T get_lastVisibleItem()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_lastVisibleItem() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::get_lastVisibleItem");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lastVisibleItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // protected UnityEngine.UIElements.SerializedVirtualizationData get_serializedData()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::SerializedVirtualizationData* get_serializedData() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::get_serializedData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::SerializedVirtualizationData*, false>(this, ___internal__method);
    }
    // protected System.Single get_lastHeight()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_lastHeight() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::get_lastHeight");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lastHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
    // protected System.Boolean get_alwaysRebindOnRefresh()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_alwaysRebindOnRefresh() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::get_alwaysRebindOnRefresh");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::VerticalVirtualizationController_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // protected System.Void .ctor(UnityEngine.UIElements.BaseVerticalCollectionView collectionView)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VerticalVirtualizationController_1<T>* New_ctor(::UnityEngine::UIElements::BaseVerticalCollectionView* collectionView) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VerticalVirtualizationController_1<T>*, creationType>(collectionView)));
    }
    // protected System.Void Setup(T recycledItem, System.Int32 newIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Setup(T recycledItem, int newIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::Setup");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(recycledItem), ::il2cpp_utils::ExtractType(newIndex)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, recycledItem, newIndex);
    }
    // private System.Void HandleFocus(UnityEngine.UIElements.ReusableCollectionItem recycledItem, System.Int32 previousIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void HandleFocus(::UnityEngine::UIElements::ReusableCollectionItem* recycledItem, int previousIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::HandleFocus");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(recycledItem), ::il2cpp_utils::ExtractType(previousIndex)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, recycledItem, previousIndex);
    }
    // T GetOrMakeItemAtIndex(System.Int32 activeItemIndex, System.Int32 scrollViewIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T GetOrMakeItemAtIndex(int activeItemIndex, int scrollViewIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::GetOrMakeItemAtIndex");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::VerticalVirtualizationController_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, activeItemIndex, scrollViewIndex);
    }
    // System.Void ReleaseItem(System.Int32 activeItemsIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ReleaseItem(int activeItemsIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::ReleaseItem");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::VerticalVirtualizationController_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, activeItemsIndex);
    }
    // protected System.Int32 GetDraggedIndex()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetDraggedIndex() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::GetDraggedIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDraggedIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public override System.Collections.Generic.IEnumerable`1<UnityEngine.UIElements.ReusableCollectionItem> get_activeItems()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.CollectionVirtualizationController
    // Base method: System.Collections.Generic.IEnumerable`1<UnityEngine.UIElements.ReusableCollectionItem> CollectionVirtualizationController::get_activeItems()
    ::System::Collections::Generic::IEnumerable_1<::UnityEngine::UIElements::ReusableCollectionItem*>* get_activeItems() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::get_activeItems");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::CollectionVirtualizationController*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::UIElements::ReusableCollectionItem*>*, false>(this, ___internal__method);
    }
    // public override System.Int32 get_visibleItemCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.CollectionVirtualizationController
    // Base method: System.Int32 CollectionVirtualizationController::get_visibleItemCount()
    int get_visibleItemCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::get_visibleItemCount");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::CollectionVirtualizationController*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public override System.Int32 get_firstVisibleIndex()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.CollectionVirtualizationController
    // Base method: System.Int32 CollectionVirtualizationController::get_firstVisibleIndex()
    int get_firstVisibleIndex() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::get_firstVisibleIndex");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::CollectionVirtualizationController*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // protected override System.Void set_firstVisibleIndex(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.CollectionVirtualizationController
    // Base method: System.Void CollectionVirtualizationController::set_firstVisibleIndex(System.Int32 value)
    void set_firstVisibleIndex(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::set_firstVisibleIndex");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::CollectionVirtualizationController*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public override System.Void Refresh(System.Boolean rebuild)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.CollectionVirtualizationController
    // Base method: System.Void CollectionVirtualizationController::Refresh(System.Boolean rebuild)
    void Refresh(bool rebuild) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::Refresh");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::CollectionVirtualizationController*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rebuild);
    }
    // public override System.Void OnFocus(UnityEngine.UIElements.VisualElement leafTarget)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.CollectionVirtualizationController
    // Base method: System.Void CollectionVirtualizationController::OnFocus(UnityEngine.UIElements.VisualElement leafTarget)
    void OnFocus(::UnityEngine::UIElements::VisualElement* leafTarget) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::OnFocus");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::CollectionVirtualizationController*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, leafTarget);
    }
    // public override System.Void OnBlur(UnityEngine.UIElements.VisualElement willFocus)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.CollectionVirtualizationController
    // Base method: System.Void CollectionVirtualizationController::OnBlur(UnityEngine.UIElements.VisualElement willFocus)
    void OnBlur(::UnityEngine::UIElements::VisualElement* willFocus) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::OnBlur");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::CollectionVirtualizationController*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, willFocus);
    }
    // public override System.Void UpdateBackground()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.CollectionVirtualizationController
    // Base method: System.Void CollectionVirtualizationController::UpdateBackground()
    void UpdateBackground() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::UpdateBackground");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::CollectionVirtualizationController*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // override System.Void StartDragItem(UnityEngine.UIElements.ReusableCollectionItem item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.CollectionVirtualizationController
    // Base method: System.Void CollectionVirtualizationController::StartDragItem(UnityEngine.UIElements.ReusableCollectionItem item)
    void StartDragItem(::UnityEngine::UIElements::ReusableCollectionItem* item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::StartDragItem");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::CollectionVirtualizationController*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // override System.Void EndDrag(System.Int32 dropIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.CollectionVirtualizationController
    // Base method: System.Void CollectionVirtualizationController::EndDrag(System.Int32 dropIndex)
    void EndDrag(int dropIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VerticalVirtualizationController_1::EndDrag");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::CollectionVirtualizationController*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dropIndex);
    }
  }; // UnityEngine.UIElements.VerticalVirtualizationController`1
  // Could not write size check! Type: UnityEngine.UIElements.VerticalVirtualizationController`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
