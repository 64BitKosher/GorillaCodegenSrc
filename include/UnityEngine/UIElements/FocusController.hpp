// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Focusable
  class Focusable;
  // Forward declaring type: IFocusRing
  class IFocusRing;
  // Forward declaring type: TextElement
  class TextElement;
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: FocusChangeDirection
  class FocusChangeDirection;
  // Forward declaring type: DispatchMode
  struct DispatchMode;
  // Forward declaring type: EventBase
  class EventBase;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: FocusController
  class FocusController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::FocusController);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::FocusController*, "UnityEngine.UIElements", "FocusController");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.FocusController
  // [TokenAttribute] Offset: FFFFFFFF
  class FocusController : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::UIElements::FocusController::FocusedElement
    struct FocusedElement;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.FocusController/FocusedElement
    // [TokenAttribute] Offset: FFFFFFFF
    struct FocusedElement/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.UIElements.VisualElement m_SubTreeRoot
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::UIElements::VisualElement* m_SubTreeRoot;
      // Field size check
      static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
      // public UnityEngine.UIElements.Focusable m_FocusedElement
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::UIElements::Focusable* m_FocusedElement;
      // Field size check
      static_assert(sizeof(::UnityEngine::UIElements::Focusable*) == 0x8);
      public:
      // Creating value type constructor for type: FocusedElement
      constexpr FocusedElement(::UnityEngine::UIElements::VisualElement* m_SubTreeRoot_ = {}, ::UnityEngine::UIElements::Focusable* m_FocusedElement_ = {}) noexcept : m_SubTreeRoot{m_SubTreeRoot_}, m_FocusedElement{m_FocusedElement_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.UIElements.VisualElement m_SubTreeRoot
      [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_SubTreeRoot();
      // Get instance field reference: public UnityEngine.UIElements.Focusable m_FocusedElement
      [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Focusable*& dyn_m_FocusedElement();
    }; // UnityEngine.UIElements.FocusController/FocusedElement
    #pragma pack(pop)
    static check_size<sizeof(FocusController::FocusedElement), 8 + sizeof(::UnityEngine::UIElements::Focusable*)> __UnityEngine_UIElements_FocusController_FocusedElementSizeCheck;
    static_assert(sizeof(FocusController::FocusedElement) == 0x10);
    public:
    // private readonly UnityEngine.UIElements.IFocusRing <focusRing>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::IFocusRing* focusRing;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::IFocusRing*) == 0x8);
    // private UnityEngine.UIElements.TextElement m_SelectedTextElement
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::TextElement* m_SelectedTextElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::TextElement*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.FocusController/FocusedElement> m_FocusedElements
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::FocusController::FocusedElement>* m_FocusedElements;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::FocusController::FocusedElement>*) == 0x8);
    // private UnityEngine.UIElements.Focusable m_LastFocusedElement
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UIElements::Focusable* m_LastFocusedElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Focusable*) == 0x8);
    // UnityEngine.UIElements.Focusable m_LastPendingFocusedElement
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UIElements::Focusable* m_LastPendingFocusedElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Focusable*) == 0x8);
    // private System.Int32 m_PendingFocusCount
    // Size: 0x4
    // Offset: 0x38
    int m_PendingFocusCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <imguiKeyboardControl>k__BackingField
    // Size: 0x4
    // Offset: 0x3C
    int imguiKeyboardControl;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private readonly UnityEngine.UIElements.IFocusRing <focusRing>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::IFocusRing*& dyn_$focusRing$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.TextElement m_SelectedTextElement
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::TextElement*& dyn_m_SelectedTextElement();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.FocusController/FocusedElement> m_FocusedElements
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::FocusController::FocusedElement>*& dyn_m_FocusedElements();
    // Get instance field reference: private UnityEngine.UIElements.Focusable m_LastFocusedElement
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Focusable*& dyn_m_LastFocusedElement();
    // Get instance field reference: UnityEngine.UIElements.Focusable m_LastPendingFocusedElement
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Focusable*& dyn_m_LastPendingFocusedElement();
    // Get instance field reference: private System.Int32 m_PendingFocusCount
    [[deprecated("Use field access instead!")]] int& dyn_m_PendingFocusCount();
    // Get instance field reference: private System.Int32 <imguiKeyboardControl>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$imguiKeyboardControl$k__BackingField();
    // public System.Void .ctor(UnityEngine.UIElements.IFocusRing focusRing)
    // Offset: 0x565994C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FocusController* New_ctor(::UnityEngine::UIElements::IFocusRing* focusRing) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::FocusController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FocusController*, creationType>(focusRing)));
    }
    // private UnityEngine.UIElements.IFocusRing get_focusRing()
    // Offset: 0x56599F4
    ::UnityEngine::UIElements::IFocusRing* get_focusRing();
    // System.Void set_selectedTextElement(UnityEngine.UIElements.TextElement value)
    // Offset: 0x56599FC
    void set_selectedTextElement(::UnityEngine::UIElements::TextElement* value);
    // public UnityEngine.UIElements.Focusable get_focusedElement()
    // Offset: 0x5659AD8
    ::UnityEngine::UIElements::Focusable* get_focusedElement();
    // System.Boolean IsFocused(UnityEngine.UIElements.Focusable f)
    // Offset: 0x5659D6C
    bool IsFocused(::UnityEngine::UIElements::Focusable* f);
    // UnityEngine.UIElements.Focusable GetRetargetedFocusedElement(UnityEngine.UIElements.VisualElement retargetAgainst)
    // Offset: 0x5659B1C
    ::UnityEngine::UIElements::Focusable* GetRetargetedFocusedElement(::UnityEngine::UIElements::VisualElement* retargetAgainst);
    // UnityEngine.UIElements.Focusable GetLeafFocusedElement()
    // Offset: 0x5647320
    ::UnityEngine::UIElements::Focusable* GetLeafFocusedElement();
    // private System.Boolean IsLocalElement(UnityEngine.UIElements.Focusable f)
    // Offset: 0x5659D30
    bool IsLocalElement(::UnityEngine::UIElements::Focusable* f);
    // System.Boolean IsPendingFocus(UnityEngine.UIElements.Focusable f)
    // Offset: 0x5659EF8
    bool IsPendingFocus(::UnityEngine::UIElements::Focusable* f);
    // System.Void SetFocusToLastFocusedElement()
    // Offset: 0x5659FC4
    void SetFocusToLastFocusedElement();
    // System.Void BlurLastFocusedElement()
    // Offset: 0x565A04C
    void BlurLastFocusedElement();
    // System.Void DoFocusChange(UnityEngine.UIElements.Focusable f)
    // Offset: 0x565A0F4
    void DoFocusChange(::UnityEngine::UIElements::Focusable* f);
    // System.Void ProcessPendingFocusChange(UnityEngine.UIElements.Focusable f)
    // Offset: 0x564BA20
    void ProcessPendingFocusChange(::UnityEngine::UIElements::Focusable* f);
    // UnityEngine.UIElements.Focusable FocusNextInDirection(UnityEngine.UIElements.FocusChangeDirection direction)
    // Offset: 0x565A2B4
    ::UnityEngine::UIElements::Focusable* FocusNextInDirection(::UnityEngine::UIElements::FocusChangeDirection* direction);
    // private System.Void AboutToReleaseFocus(UnityEngine.UIElements.Focusable focusable, UnityEngine.UIElements.Focusable willGiveFocusTo, UnityEngine.UIElements.FocusChangeDirection direction, UnityEngine.UIElements.DispatchMode dispatchMode)
    // Offset: 0x565A3A0
    void AboutToReleaseFocus(::UnityEngine::UIElements::Focusable* focusable, ::UnityEngine::UIElements::Focusable* willGiveFocusTo, ::UnityEngine::UIElements::FocusChangeDirection* direction, ::UnityEngine::UIElements::DispatchMode dispatchMode);
    // private System.Void ReleaseFocus(UnityEngine.UIElements.Focusable focusable, UnityEngine.UIElements.Focusable willGiveFocusTo, UnityEngine.UIElements.FocusChangeDirection direction, UnityEngine.UIElements.DispatchMode dispatchMode)
    // Offset: 0x565A560
    void ReleaseFocus(::UnityEngine::UIElements::Focusable* focusable, ::UnityEngine::UIElements::Focusable* willGiveFocusTo, ::UnityEngine::UIElements::FocusChangeDirection* direction, ::UnityEngine::UIElements::DispatchMode dispatchMode);
    // private System.Void AboutToGrabFocus(UnityEngine.UIElements.Focusable focusable, UnityEngine.UIElements.Focusable willTakeFocusFrom, UnityEngine.UIElements.FocusChangeDirection direction, UnityEngine.UIElements.DispatchMode dispatchMode)
    // Offset: 0x565A720
    void AboutToGrabFocus(::UnityEngine::UIElements::Focusable* focusable, ::UnityEngine::UIElements::Focusable* willTakeFocusFrom, ::UnityEngine::UIElements::FocusChangeDirection* direction, ::UnityEngine::UIElements::DispatchMode dispatchMode);
    // private System.Void GrabFocus(UnityEngine.UIElements.Focusable focusable, UnityEngine.UIElements.Focusable willTakeFocusFrom, UnityEngine.UIElements.FocusChangeDirection direction, System.Boolean bIsFocusDelegated, UnityEngine.UIElements.DispatchMode dispatchMode)
    // Offset: 0x565A8E0
    void GrabFocus(::UnityEngine::UIElements::Focusable* focusable, ::UnityEngine::UIElements::Focusable* willTakeFocusFrom, ::UnityEngine::UIElements::FocusChangeDirection* direction, bool bIsFocusDelegated, ::UnityEngine::UIElements::DispatchMode dispatchMode);
    // System.Void Blur(UnityEngine.UIElements.Focusable focusable, System.Boolean bIsFocusDelegated, UnityEngine.UIElements.DispatchMode dispatchMode)
    // Offset: 0x5658FB4
    void Blur(::UnityEngine::UIElements::Focusable* focusable, bool bIsFocusDelegated, ::UnityEngine::UIElements::DispatchMode dispatchMode);
    // System.Void SwitchFocus(UnityEngine.UIElements.Focusable newFocusedElement, System.Boolean bIsFocusDelegated, UnityEngine.UIElements.DispatchMode dispatchMode)
    // Offset: 0x5658EC4
    void SwitchFocus(::UnityEngine::UIElements::Focusable* newFocusedElement, bool bIsFocusDelegated, ::UnityEngine::UIElements::DispatchMode dispatchMode);
    // System.Void SwitchFocus(UnityEngine.UIElements.Focusable newFocusedElement, UnityEngine.UIElements.FocusChangeDirection direction, System.Boolean bIsFocusDelegated, UnityEngine.UIElements.DispatchMode dispatchMode)
    // Offset: 0x56595AC
    void SwitchFocus(::UnityEngine::UIElements::Focusable* newFocusedElement, ::UnityEngine::UIElements::FocusChangeDirection* direction, bool bIsFocusDelegated, ::UnityEngine::UIElements::DispatchMode dispatchMode);
    // System.Void SwitchFocusOnEvent(UnityEngine.UIElements.EventBase e)
    // Offset: 0x56591A8
    void SwitchFocusOnEvent(::UnityEngine::UIElements::EventBase* e);
    // System.Void ReevaluateFocus()
    // Offset: 0x565AAAC
    void ReevaluateFocus();
    // System.Boolean GetFocusableParentForPointerEvent(UnityEngine.UIElements.Focusable target, out UnityEngine.UIElements.Focusable effectiveTarget)
    // Offset: 0x565AB64
    bool GetFocusableParentForPointerEvent(::UnityEngine::UIElements::Focusable* target, ByRef<::UnityEngine::UIElements::Focusable*> effectiveTarget);
    // System.Int32 get_imguiKeyboardControl()
    // Offset: 0x565AC9C
    int get_imguiKeyboardControl();
    // System.Void set_imguiKeyboardControl(System.Int32 value)
    // Offset: 0x565ACA4
    void set_imguiKeyboardControl(int value);
    // System.Void SyncIMGUIFocus(System.Int32 imguiKeyboardControlID, UnityEngine.UIElements.Focusable imguiContainerHavingKeyboardControl, System.Boolean forceSwitch)
    // Offset: 0x565ACAC
    void SyncIMGUIFocus(int imguiKeyboardControlID, ::UnityEngine::UIElements::Focusable* imguiContainerHavingKeyboardControl, bool forceSwitch);
  }; // UnityEngine.UIElements.FocusController
  #pragma pack(pop)
  static check_size<sizeof(FocusController), 60 + sizeof(int)> __UnityEngine_UIElements_FocusControllerSizeCheck;
  static_assert(sizeof(FocusController) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::FocusController::FocusedElement, "UnityEngine.UIElements", "FocusController/FocusedElement");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::get_focusRing
// Il2CppName: get_focusRing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IFocusRing* (UnityEngine::UIElements::FocusController::*)()>(&UnityEngine::UIElements::FocusController::get_focusRing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "get_focusRing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::set_selectedTextElement
// Il2CppName: set_selectedTextElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::TextElement*)>(&UnityEngine::UIElements::FocusController::set_selectedTextElement)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TextElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "set_selectedTextElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::get_focusedElement
// Il2CppName: get_focusedElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Focusable* (UnityEngine::UIElements::FocusController::*)()>(&UnityEngine::UIElements::FocusController::get_focusedElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "get_focusedElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::IsFocused
// Il2CppName: IsFocused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::Focusable*)>(&UnityEngine::UIElements::FocusController::IsFocused)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "IsFocused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::GetRetargetedFocusedElement
// Il2CppName: GetRetargetedFocusedElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Focusable* (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::FocusController::GetRetargetedFocusedElement)> {
  static const MethodInfo* get() {
    static auto* retargetAgainst = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "GetRetargetedFocusedElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{retargetAgainst});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::GetLeafFocusedElement
// Il2CppName: GetLeafFocusedElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Focusable* (UnityEngine::UIElements::FocusController::*)()>(&UnityEngine::UIElements::FocusController::GetLeafFocusedElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "GetLeafFocusedElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::IsLocalElement
// Il2CppName: IsLocalElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::Focusable*)>(&UnityEngine::UIElements::FocusController::IsLocalElement)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "IsLocalElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::IsPendingFocus
// Il2CppName: IsPendingFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::Focusable*)>(&UnityEngine::UIElements::FocusController::IsPendingFocus)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "IsPendingFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::SetFocusToLastFocusedElement
// Il2CppName: SetFocusToLastFocusedElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)()>(&UnityEngine::UIElements::FocusController::SetFocusToLastFocusedElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "SetFocusToLastFocusedElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::BlurLastFocusedElement
// Il2CppName: BlurLastFocusedElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)()>(&UnityEngine::UIElements::FocusController::BlurLastFocusedElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "BlurLastFocusedElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::DoFocusChange
// Il2CppName: DoFocusChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::Focusable*)>(&UnityEngine::UIElements::FocusController::DoFocusChange)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "DoFocusChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::ProcessPendingFocusChange
// Il2CppName: ProcessPendingFocusChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::Focusable*)>(&UnityEngine::UIElements::FocusController::ProcessPendingFocusChange)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "ProcessPendingFocusChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::FocusNextInDirection
// Il2CppName: FocusNextInDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Focusable* (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::FocusChangeDirection*)>(&UnityEngine::UIElements::FocusController::FocusNextInDirection)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "FocusChangeDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "FocusNextInDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::AboutToReleaseFocus
// Il2CppName: AboutToReleaseFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::Focusable*, ::UnityEngine::UIElements::Focusable*, ::UnityEngine::UIElements::FocusChangeDirection*, ::UnityEngine::UIElements::DispatchMode)>(&UnityEngine::UIElements::FocusController::AboutToReleaseFocus)> {
  static const MethodInfo* get() {
    static auto* focusable = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* willGiveFocusTo = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "FocusChangeDirection")->byval_arg;
    static auto* dispatchMode = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "DispatchMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "AboutToReleaseFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focusable, willGiveFocusTo, direction, dispatchMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::ReleaseFocus
// Il2CppName: ReleaseFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::Focusable*, ::UnityEngine::UIElements::Focusable*, ::UnityEngine::UIElements::FocusChangeDirection*, ::UnityEngine::UIElements::DispatchMode)>(&UnityEngine::UIElements::FocusController::ReleaseFocus)> {
  static const MethodInfo* get() {
    static auto* focusable = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* willGiveFocusTo = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "FocusChangeDirection")->byval_arg;
    static auto* dispatchMode = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "DispatchMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "ReleaseFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focusable, willGiveFocusTo, direction, dispatchMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::AboutToGrabFocus
// Il2CppName: AboutToGrabFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::Focusable*, ::UnityEngine::UIElements::Focusable*, ::UnityEngine::UIElements::FocusChangeDirection*, ::UnityEngine::UIElements::DispatchMode)>(&UnityEngine::UIElements::FocusController::AboutToGrabFocus)> {
  static const MethodInfo* get() {
    static auto* focusable = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* willTakeFocusFrom = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "FocusChangeDirection")->byval_arg;
    static auto* dispatchMode = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "DispatchMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "AboutToGrabFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focusable, willTakeFocusFrom, direction, dispatchMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::GrabFocus
// Il2CppName: GrabFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::Focusable*, ::UnityEngine::UIElements::Focusable*, ::UnityEngine::UIElements::FocusChangeDirection*, bool, ::UnityEngine::UIElements::DispatchMode)>(&UnityEngine::UIElements::FocusController::GrabFocus)> {
  static const MethodInfo* get() {
    static auto* focusable = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* willTakeFocusFrom = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "FocusChangeDirection")->byval_arg;
    static auto* bIsFocusDelegated = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* dispatchMode = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "DispatchMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "GrabFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focusable, willTakeFocusFrom, direction, bIsFocusDelegated, dispatchMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::Blur
// Il2CppName: Blur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::Focusable*, bool, ::UnityEngine::UIElements::DispatchMode)>(&UnityEngine::UIElements::FocusController::Blur)> {
  static const MethodInfo* get() {
    static auto* focusable = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* bIsFocusDelegated = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* dispatchMode = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "DispatchMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "Blur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focusable, bIsFocusDelegated, dispatchMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::SwitchFocus
// Il2CppName: SwitchFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::Focusable*, bool, ::UnityEngine::UIElements::DispatchMode)>(&UnityEngine::UIElements::FocusController::SwitchFocus)> {
  static const MethodInfo* get() {
    static auto* newFocusedElement = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* bIsFocusDelegated = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* dispatchMode = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "DispatchMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "SwitchFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newFocusedElement, bIsFocusDelegated, dispatchMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::SwitchFocus
// Il2CppName: SwitchFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::Focusable*, ::UnityEngine::UIElements::FocusChangeDirection*, bool, ::UnityEngine::UIElements::DispatchMode)>(&UnityEngine::UIElements::FocusController::SwitchFocus)> {
  static const MethodInfo* get() {
    static auto* newFocusedElement = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "FocusChangeDirection")->byval_arg;
    static auto* bIsFocusDelegated = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* dispatchMode = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "DispatchMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "SwitchFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newFocusedElement, direction, bIsFocusDelegated, dispatchMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::SwitchFocusOnEvent
// Il2CppName: SwitchFocusOnEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::FocusController::SwitchFocusOnEvent)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "SwitchFocusOnEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::ReevaluateFocus
// Il2CppName: ReevaluateFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)()>(&UnityEngine::UIElements::FocusController::ReevaluateFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "ReevaluateFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::GetFocusableParentForPointerEvent
// Il2CppName: GetFocusableParentForPointerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::FocusController::*)(::UnityEngine::UIElements::Focusable*, ByRef<::UnityEngine::UIElements::Focusable*>)>(&UnityEngine::UIElements::FocusController::GetFocusableParentForPointerEvent)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* effectiveTarget = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "GetFocusableParentForPointerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, effectiveTarget});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::get_imguiKeyboardControl
// Il2CppName: get_imguiKeyboardControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::FocusController::*)()>(&UnityEngine::UIElements::FocusController::get_imguiKeyboardControl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "get_imguiKeyboardControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::set_imguiKeyboardControl
// Il2CppName: set_imguiKeyboardControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)(int)>(&UnityEngine::UIElements::FocusController::set_imguiKeyboardControl)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "set_imguiKeyboardControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusController::SyncIMGUIFocus
// Il2CppName: SyncIMGUIFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusController::*)(int, ::UnityEngine::UIElements::Focusable*, bool)>(&UnityEngine::UIElements::FocusController::SyncIMGUIFocus)> {
  static const MethodInfo* get() {
    static auto* imguiKeyboardControlID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* imguiContainerHavingKeyboardControl = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* forceSwitch = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusController*), "SyncIMGUIFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{imguiKeyboardControlID, imguiContainerHavingKeyboardControl, forceSwitch});
  }
};
