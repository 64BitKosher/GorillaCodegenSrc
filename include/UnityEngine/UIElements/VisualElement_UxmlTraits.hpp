// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.VisualElement
#include "UnityEngine/UIElements/VisualElement.hpp"
// Including type: UnityEngine.UIElements.UxmlTraits
#include "UnityEngine/UIElements/UxmlTraits.hpp"
// Including type: UnityEngine.UIElements.UsageHints
#include "UnityEngine/UIElements/UsageHints.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: UxmlStringAttributeDescription
  class UxmlStringAttributeDescription;
  // Forward declaring type: UxmlEnumAttributeDescription`1<T>
  template<typename T>
  class UxmlEnumAttributeDescription_1;
  // Forward declaring type: UxmlIntAttributeDescription
  class UxmlIntAttributeDescription;
  // Forward declaring type: UxmlBoolAttributeDescription
  class UxmlBoolAttributeDescription;
  // Forward declaring type: IUxmlAttributes
  class IUxmlAttributes;
  // Forward declaring type: CreationContext
  struct CreationContext;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::VisualElement::UxmlTraits);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualElement::UxmlTraits*, "UnityEngine.UIElements", "VisualElement/UxmlTraits");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.VisualElement/UxmlTraits
  // [TokenAttribute] Offset: FFFFFFFF
  class VisualElement::UxmlTraits : public ::UnityEngine::UIElements::UxmlTraits {
    public:
    // Writing base type padding for base size: 0x11 to desired offset: 0x18
    char ___base_padding[0x7] = {};
    public:
    // protected UnityEngine.UIElements.UxmlStringAttributeDescription m_Name
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_Name;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlStringAttributeDescription m_ViewDataKey
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_ViewDataKey;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    // protected UnityEngine.UIElements.UxmlEnumAttributeDescription`1<UnityEngine.UIElements.PickingMode> m_PickingMode
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UIElements::UxmlEnumAttributeDescription_1<::UnityEngine::UIElements::PickingMode>* m_PickingMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlEnumAttributeDescription_1<::UnityEngine::UIElements::PickingMode>*) == 0x8);
    // private UnityEngine.UIElements.UxmlStringAttributeDescription m_Tooltip
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_Tooltip;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlEnumAttributeDescription`1<UnityEngine.UIElements.UsageHints> m_UsageHints
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UIElements::UxmlEnumAttributeDescription_1<::UnityEngine::UIElements::UsageHints>* m_UsageHints;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlEnumAttributeDescription_1<::UnityEngine::UIElements::UsageHints>*) == 0x8);
    // private UnityEngine.UIElements.UxmlIntAttributeDescription <focusIndex>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::UIElements::UxmlIntAttributeDescription* focusIndex;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlIntAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlIntAttributeDescription m_TabIndex
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::UIElements::UxmlIntAttributeDescription* m_TabIndex;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlIntAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlBoolAttributeDescription <focusable>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UIElements::UxmlBoolAttributeDescription* focusable;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlBoolAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlStringAttributeDescription m_Class
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_Class;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlStringAttributeDescription m_ContentContainer
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_ContentContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlStringAttributeDescription m_Style
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_Style;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    public:
    // Deleting conversion operator: operator bool
    constexpr operator bool() const noexcept = delete;
    // Get instance field reference: protected UnityEngine.UIElements.UxmlStringAttributeDescription m_Name
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_Name();
    // Get instance field reference: private UnityEngine.UIElements.UxmlStringAttributeDescription m_ViewDataKey
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_ViewDataKey();
    // Get instance field reference: protected UnityEngine.UIElements.UxmlEnumAttributeDescription`1<UnityEngine.UIElements.PickingMode> m_PickingMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlEnumAttributeDescription_1<::UnityEngine::UIElements::PickingMode>*& dyn_m_PickingMode();
    // Get instance field reference: private UnityEngine.UIElements.UxmlStringAttributeDescription m_Tooltip
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_Tooltip();
    // Get instance field reference: private UnityEngine.UIElements.UxmlEnumAttributeDescription`1<UnityEngine.UIElements.UsageHints> m_UsageHints
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlEnumAttributeDescription_1<::UnityEngine::UIElements::UsageHints>*& dyn_m_UsageHints();
    // Get instance field reference: private UnityEngine.UIElements.UxmlIntAttributeDescription <focusIndex>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlIntAttributeDescription*& dyn_$focusIndex$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.UxmlIntAttributeDescription m_TabIndex
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlIntAttributeDescription*& dyn_m_TabIndex();
    // Get instance field reference: private UnityEngine.UIElements.UxmlBoolAttributeDescription <focusable>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlBoolAttributeDescription*& dyn_$focusable$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.UxmlStringAttributeDescription m_Class
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_Class();
    // Get instance field reference: private UnityEngine.UIElements.UxmlStringAttributeDescription m_ContentContainer
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_ContentContainer();
    // Get instance field reference: private UnityEngine.UIElements.UxmlStringAttributeDescription m_Style
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_Style();
    // protected UnityEngine.UIElements.UxmlIntAttributeDescription get_focusIndex()
    // Offset: 0x56A2554
    ::UnityEngine::UIElements::UxmlIntAttributeDescription* get_focusIndex();
    // protected UnityEngine.UIElements.UxmlBoolAttributeDescription get_focusable()
    // Offset: 0x56A255C
    ::UnityEngine::UIElements::UxmlBoolAttributeDescription* get_focusable();
    // public override System.Void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc)
    // Offset: 0x56A2564
    // Implemented from: UnityEngine.UIElements.UxmlTraits
    // Base method: System.Void UxmlTraits::Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc)
    void Init(::UnityEngine::UIElements::VisualElement* ve, ::UnityEngine::UIElements::IUxmlAttributes* bag, ::UnityEngine::UIElements::CreationContext cc);
    // public System.Void .ctor()
    // Offset: 0x56A2800
    // Implemented from: UnityEngine.UIElements.UxmlTraits
    // Base method: System.Void UxmlTraits::.ctor()
    // Base method: System.Void BaseUxmlTraits::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisualElement::UxmlTraits* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VisualElement::UxmlTraits::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisualElement::UxmlTraits*, creationType>()));
    }
  }; // UnityEngine.UIElements.VisualElement/UxmlTraits
  #pragma pack(pop)
  static check_size<sizeof(VisualElement::UxmlTraits), 104 + sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*)> __UnityEngine_UIElements_VisualElement_UxmlTraitsSizeCheck;
  static_assert(sizeof(VisualElement::UxmlTraits) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::UxmlTraits::get_focusIndex
// Il2CppName: get_focusIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UxmlIntAttributeDescription* (UnityEngine::UIElements::VisualElement::UxmlTraits::*)()>(&UnityEngine::UIElements::VisualElement::UxmlTraits::get_focusIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::UxmlTraits*), "get_focusIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::UxmlTraits::get_focusable
// Il2CppName: get_focusable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UxmlBoolAttributeDescription* (UnityEngine::UIElements::VisualElement::UxmlTraits::*)()>(&UnityEngine::UIElements::VisualElement::UxmlTraits::get_focusable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::UxmlTraits*), "get_focusable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::UxmlTraits::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElement::UxmlTraits::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::IUxmlAttributes*, ::UnityEngine::UIElements::CreationContext)>(&UnityEngine::UIElements::VisualElement::UxmlTraits::Init)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* bag = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "IUxmlAttributes")->byval_arg;
    static auto* cc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "CreationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::UxmlTraits*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, bag, cc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::UxmlTraits::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
