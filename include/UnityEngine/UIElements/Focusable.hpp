// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.CallbackEventHandler
#include "UnityEngine/UIElements/CallbackEventHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: FocusController
  class FocusController;
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: EventBase
  class EventBase;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Focusable
  class Focusable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::Focusable);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::Focusable*, "UnityEngine.UIElements", "Focusable");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x2A
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.Focusable
  // [TokenAttribute] Offset: FFFFFFFF
  class Focusable : public ::UnityEngine::UIElements::CallbackEventHandler {
    public:
    public:
    // private System.Boolean <focusable>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool focusable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: focusable and: tabIndex
    char __padding0[0x3] = {};
    // private System.Int32 <tabIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    int tabIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_DelegatesFocus
    // Size: 0x1
    // Offset: 0x28
    bool m_DelegatesFocus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ExcludeFromFocusRing
    // Size: 0x1
    // Offset: 0x29
    bool m_ExcludeFromFocusRing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Boolean <focusable>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$focusable$k__BackingField();
    // Get instance field reference: private System.Int32 <tabIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$tabIndex$k__BackingField();
    // Get instance field reference: private System.Boolean m_DelegatesFocus
    [[deprecated("Use field access instead!")]] bool& dyn_m_DelegatesFocus();
    // Get instance field reference: private System.Boolean m_ExcludeFromFocusRing
    [[deprecated("Use field access instead!")]] bool& dyn_m_ExcludeFromFocusRing();
    // public UnityEngine.UIElements.FocusController get_focusController()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::FocusController* get_focusController();
    // public System.Boolean get_focusable()
    // Offset: 0x5658C5C
    bool get_focusable();
    // public System.Void set_focusable(System.Boolean value)
    // Offset: 0x5658C64
    void set_focusable(bool value);
    // public System.Int32 get_tabIndex()
    // Offset: 0x5658C70
    int get_tabIndex();
    // public System.Void set_tabIndex(System.Int32 value)
    // Offset: 0x5658C78
    void set_tabIndex(int value);
    // public System.Boolean get_delegatesFocus()
    // Offset: 0x5658C80
    bool get_delegatesFocus();
    // public System.Void set_delegatesFocus(System.Boolean value)
    // Offset: 0x5658C88
    void set_delegatesFocus(bool value);
    // System.Boolean get_excludeFromFocusRing()
    // Offset: 0x5658C94
    bool get_excludeFromFocusRing();
    // System.Void set_excludeFromFocusRing(System.Boolean value)
    // Offset: 0x5658C9C
    void set_excludeFromFocusRing(bool value);
    // public System.Boolean get_canGrabFocus()
    // Offset: 0x5658D7C
    bool get_canGrabFocus();
    // public System.Void Focus()
    // Offset: 0x5658D84
    void Focus();
    // public System.Void Blur()
    // Offset: 0x5658F7C
    void Blur();
    // System.Void BlurImmediately()
    // Offset: 0x565900C
    void BlurImmediately();
    // private UnityEngine.UIElements.Focusable GetFocusDelegate()
    // Offset: 0x5658E34
    ::UnityEngine::UIElements::Focusable* GetFocusDelegate();
    // static private UnityEngine.UIElements.Focusable GetFirstFocusableChild(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x5659044
    static ::UnityEngine::UIElements::Focusable* GetFirstFocusableChild(::UnityEngine::UIElements::VisualElement* ve);
    // private System.Void ProcessEvent(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x5659164
    void ProcessEvent(::UnityEngine::UIElements::EventBase* evt);
    // protected System.Void .ctor()
    // Offset: 0x5658C34
    // Implemented from: UnityEngine.UIElements.CallbackEventHandler
    // Base method: System.Void CallbackEventHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Focusable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Focusable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Focusable*, creationType>()));
    }
    // protected override System.Void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x5659160
    // Implemented from: UnityEngine.UIElements.CallbackEventHandler
    // Base method: System.Void CallbackEventHandler::ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt)
    void ExecuteDefaultAction(::UnityEngine::UIElements::EventBase* evt);
    // override System.Void ExecuteDefaultActionDisabled(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x56591A4
    // Implemented from: UnityEngine.UIElements.CallbackEventHandler
    // Base method: System.Void CallbackEventHandler::ExecuteDefaultActionDisabled(UnityEngine.UIElements.EventBase evt)
    void ExecuteDefaultActionDisabled(::UnityEngine::UIElements::EventBase* evt);
  }; // UnityEngine.UIElements.Focusable
  #pragma pack(pop)
  static check_size<sizeof(Focusable), 41 + sizeof(bool)> __UnityEngine_UIElements_FocusableSizeCheck;
  static_assert(sizeof(Focusable) == 0x2A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::get_focusController
// Il2CppName: get_focusController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::FocusController* (UnityEngine::UIElements::Focusable::*)()>(&UnityEngine::UIElements::Focusable::get_focusController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "get_focusController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::get_focusable
// Il2CppName: get_focusable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::Focusable::*)()>(&UnityEngine::UIElements::Focusable::get_focusable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "get_focusable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::set_focusable
// Il2CppName: set_focusable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Focusable::*)(bool)>(&UnityEngine::UIElements::Focusable::set_focusable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "set_focusable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::get_tabIndex
// Il2CppName: get_tabIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::Focusable::*)()>(&UnityEngine::UIElements::Focusable::get_tabIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "get_tabIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::set_tabIndex
// Il2CppName: set_tabIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Focusable::*)(int)>(&UnityEngine::UIElements::Focusable::set_tabIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "set_tabIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::get_delegatesFocus
// Il2CppName: get_delegatesFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::Focusable::*)()>(&UnityEngine::UIElements::Focusable::get_delegatesFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "get_delegatesFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::set_delegatesFocus
// Il2CppName: set_delegatesFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Focusable::*)(bool)>(&UnityEngine::UIElements::Focusable::set_delegatesFocus)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "set_delegatesFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::get_excludeFromFocusRing
// Il2CppName: get_excludeFromFocusRing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::Focusable::*)()>(&UnityEngine::UIElements::Focusable::get_excludeFromFocusRing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "get_excludeFromFocusRing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::set_excludeFromFocusRing
// Il2CppName: set_excludeFromFocusRing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Focusable::*)(bool)>(&UnityEngine::UIElements::Focusable::set_excludeFromFocusRing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "set_excludeFromFocusRing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::get_canGrabFocus
// Il2CppName: get_canGrabFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::Focusable::*)()>(&UnityEngine::UIElements::Focusable::get_canGrabFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "get_canGrabFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::Focus
// Il2CppName: Focus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Focusable::*)()>(&UnityEngine::UIElements::Focusable::Focus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "Focus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::Blur
// Il2CppName: Blur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Focusable::*)()>(&UnityEngine::UIElements::Focusable::Blur)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "Blur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::BlurImmediately
// Il2CppName: BlurImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Focusable::*)()>(&UnityEngine::UIElements::Focusable::BlurImmediately)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "BlurImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::GetFocusDelegate
// Il2CppName: GetFocusDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Focusable* (UnityEngine::UIElements::Focusable::*)()>(&UnityEngine::UIElements::Focusable::GetFocusDelegate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "GetFocusDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::GetFirstFocusableChild
// Il2CppName: GetFirstFocusableChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Focusable* (*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::Focusable::GetFirstFocusableChild)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "GetFirstFocusableChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::ProcessEvent
// Il2CppName: ProcessEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Focusable::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::Focusable::ProcessEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "ProcessEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::ExecuteDefaultAction
// Il2CppName: ExecuteDefaultAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Focusable::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::Focusable::ExecuteDefaultAction)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "ExecuteDefaultAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Focusable::ExecuteDefaultActionDisabled
// Il2CppName: ExecuteDefaultActionDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Focusable::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::Focusable::ExecuteDefaultActionDisabled)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Focusable*), "ExecuteDefaultActionDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
