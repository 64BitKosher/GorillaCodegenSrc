// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.PointerManipulator
#include "UnityEngine/UIElements/PointerManipulator.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: EventBase
  class EventBase;
  // Forward declaring type: IVisualElementScheduledItem
  class IVisualElementScheduledItem;
  // Forward declaring type: InvokePolicy
  struct InvokePolicy;
  // Forward declaring type: TimerState
  struct TimerState;
  // Forward declaring type: MouseDownEvent
  class MouseDownEvent;
  // Forward declaring type: MouseMoveEvent
  class MouseMoveEvent;
  // Forward declaring type: MouseUpEvent
  class MouseUpEvent;
  // Forward declaring type: MouseCaptureOutEvent
  class MouseCaptureOutEvent;
  // Forward declaring type: PointerDownEvent
  class PointerDownEvent;
  // Forward declaring type: PointerMoveEvent
  class PointerMoveEvent;
  // Forward declaring type: PointerUpEvent
  class PointerUpEvent;
  // Forward declaring type: PointerCancelEvent
  class PointerCancelEvent;
  // Forward declaring type: PointerCaptureOutEvent
  class PointerCaptureOutEvent;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Clickable
  class Clickable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::Clickable);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::Clickable*, "UnityEngine.UIElements", "Clickable");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.Clickable
  // [TokenAttribute] Offset: FFFFFFFF
  class Clickable : public ::UnityEngine::UIElements::PointerManipulator {
    public:
    public:
    // private System.Action`1<UnityEngine.UIElements.EventBase> clickedWithEventInfo
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<::UnityEngine::UIElements::EventBase*>* clickedWithEventInfo;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::UIElements::EventBase*>*) == 0x8);
    // private System.Action clicked
    // Size: 0x8
    // Offset: 0x38
    ::System::Action* clicked;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private readonly System.Int64 m_Delay
    // Size: 0x8
    // Offset: 0x40
    int64_t m_Delay;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private readonly System.Int64 m_Interval
    // Size: 0x8
    // Offset: 0x48
    int64_t m_Interval;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean <active>k__BackingField
    // Size: 0x1
    // Offset: 0x50
    bool active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: active and: lastMousePosition
    char __padding4[0x3] = {};
    // private UnityEngine.Vector2 <lastMousePosition>k__BackingField
    // Size: 0x8
    // Offset: 0x54
    ::UnityEngine::Vector2 lastMousePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Int32 m_ActivePointerId
    // Size: 0x4
    // Offset: 0x5C
    int m_ActivePointerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_AcceptClicksIfDisabled
    // Size: 0x1
    // Offset: 0x60
    bool m_AcceptClicksIfDisabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AcceptClicksIfDisabled and: m_Repeater
    char __padding7[0x7] = {};
    // private UnityEngine.UIElements.IVisualElementScheduledItem m_Repeater
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::UIElements::IVisualElementScheduledItem* m_Repeater;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::IVisualElementScheduledItem*) == 0x8);
    public:
    // Get instance field reference: private System.Action`1<UnityEngine.UIElements.EventBase> clickedWithEventInfo
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::UIElements::EventBase*>*& dyn_clickedWithEventInfo();
    // Get instance field reference: private System.Action clicked
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_clicked();
    // Get instance field reference: private readonly System.Int64 m_Delay
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_Delay();
    // Get instance field reference: private readonly System.Int64 m_Interval
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_Interval();
    // Get instance field reference: private System.Boolean <active>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$active$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector2 <lastMousePosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$lastMousePosition$k__BackingField();
    // Get instance field reference: private System.Int32 m_ActivePointerId
    [[deprecated("Use field access instead!")]] int& dyn_m_ActivePointerId();
    // Get instance field reference: private System.Boolean m_AcceptClicksIfDisabled
    [[deprecated("Use field access instead!")]] bool& dyn_m_AcceptClicksIfDisabled();
    // Get instance field reference: private UnityEngine.UIElements.IVisualElementScheduledItem m_Repeater
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::IVisualElementScheduledItem*& dyn_m_Repeater();
    // public System.Void add_clickedWithEventInfo(System.Action`1<UnityEngine.UIElements.EventBase> value)
    // Offset: 0x559647C
    void add_clickedWithEventInfo(::System::Action_1<::UnityEngine::UIElements::EventBase*>* value);
    // public System.Void remove_clickedWithEventInfo(System.Action`1<UnityEngine.UIElements.EventBase> value)
    // Offset: 0x559652C
    void remove_clickedWithEventInfo(::System::Action_1<::UnityEngine::UIElements::EventBase*>* value);
    // protected System.Boolean get_active()
    // Offset: 0x55965DC
    bool get_active();
    // protected System.Void set_active(System.Boolean value)
    // Offset: 0x55965E4
    void set_active(bool value);
    // public UnityEngine.Vector2 get_lastMousePosition()
    // Offset: 0x55965F0
    ::UnityEngine::Vector2 get_lastMousePosition();
    // private System.Void set_lastMousePosition(UnityEngine.Vector2 value)
    // Offset: 0x55965F8
    void set_lastMousePosition(::UnityEngine::Vector2 value);
    // System.Boolean get_acceptClicksIfDisabled()
    // Offset: 0x5596600
    bool get_acceptClicksIfDisabled();
    // System.Void set_acceptClicksIfDisabled(System.Boolean value)
    // Offset: 0x5596608
    void set_acceptClicksIfDisabled(bool value);
    // private UnityEngine.UIElements.InvokePolicy get_invokePolicy()
    // Offset: 0x5596658
    ::UnityEngine::UIElements::InvokePolicy get_invokePolicy();
    // public System.Void .ctor(System.Action handler, System.Int64 delay, System.Int64 interval)
    // Offset: 0x5596660
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Clickable* New_ctor(::System::Action* handler, int64_t delay, int64_t interval) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Clickable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Clickable*, creationType>(handler, delay, interval)));
    }
    // public System.Void .ctor(System.Action`1<UnityEngine.UIElements.EventBase> handler)
    // Offset: 0x5596764
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Clickable* New_ctor(::System::Action_1<::UnityEngine::UIElements::EventBase*>* handler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Clickable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Clickable*, creationType>(handler)));
    }
    // public System.Void .ctor(System.Action handler)
    // Offset: 0x559668C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Clickable* New_ctor(::System::Action* handler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Clickable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Clickable*, creationType>(handler)));
    }
    // private System.Void OnTimer(UnityEngine.UIElements.TimerState timerState)
    // Offset: 0x5596838
    void OnTimer(::UnityEngine::UIElements::TimerState timerState);
    // private System.Boolean IsRepeatable()
    // Offset: 0x5596908
    bool IsRepeatable();
    // protected System.Void OnMouseDown(UnityEngine.UIElements.MouseDownEvent evt)
    // Offset: 0x55973D8
    void OnMouseDown(::UnityEngine::UIElements::MouseDownEvent* evt);
    // protected System.Void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent evt)
    // Offset: 0x5597494
    void OnMouseMove(::UnityEngine::UIElements::MouseMoveEvent* evt);
    // protected System.Void OnMouseUp(UnityEngine.UIElements.MouseUpEvent evt)
    // Offset: 0x5597500
    void OnMouseUp(::UnityEngine::UIElements::MouseUpEvent* evt);
    // private System.Void OnMouseCaptureOut(UnityEngine.UIElements.MouseCaptureOutEvent evt)
    // Offset: 0x55975C4
    void OnMouseCaptureOut(::UnityEngine::UIElements::MouseCaptureOutEvent* evt);
    // private System.Void OnPointerDown(UnityEngine.UIElements.PointerDownEvent evt)
    // Offset: 0x5597648
    void OnPointerDown(::UnityEngine::UIElements::PointerDownEvent* evt);
    // private System.Void OnPointerMove(UnityEngine.UIElements.PointerMoveEvent evt)
    // Offset: 0x5597778
    void OnPointerMove(::UnityEngine::UIElements::PointerMoveEvent* evt);
    // private System.Void OnPointerUp(UnityEngine.UIElements.PointerUpEvent evt)
    // Offset: 0x5597898
    void OnPointerUp(::UnityEngine::UIElements::PointerUpEvent* evt);
    // private System.Void OnPointerCancel(UnityEngine.UIElements.PointerCancelEvent evt)
    // Offset: 0x55979D0
    void OnPointerCancel(::UnityEngine::UIElements::PointerCancelEvent* evt);
    // private System.Void OnPointerCaptureOut(UnityEngine.UIElements.PointerCaptureOutEvent evt)
    // Offset: 0x5597AC0
    void OnPointerCaptureOut(::UnityEngine::UIElements::PointerCaptureOutEvent* evt);
    // private System.Boolean ContainsPointer(System.Int32 pointerId)
    // Offset: 0x559692C
    bool ContainsPointer(int pointerId);
    // static private System.Boolean IsNotMouseEvent(System.Int32 pointerId)
    // Offset: 0x5597A5C
    static bool IsNotMouseEvent(int pointerId);
    // protected System.Void Invoke(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x55969AC
    void Invoke(::UnityEngine::UIElements::EventBase* evt);
    // System.Void SimulateSingleClick(UnityEngine.UIElements.EventBase evt, System.Int32 delayMs)
    // Offset: 0x5597B38
    void SimulateSingleClick(::UnityEngine::UIElements::EventBase* evt, int delayMs);
    // protected System.Void ProcessDownEvent(UnityEngine.UIElements.EventBase evt, UnityEngine.Vector2 localPosition, System.Int32 pointerId)
    // Offset: 0x5597D04
    void ProcessDownEvent(::UnityEngine::UIElements::EventBase* evt, ::UnityEngine::Vector2 localPosition, int pointerId);
    // protected System.Void ProcessMoveEvent(UnityEngine.UIElements.EventBase evt, UnityEngine.Vector2 localPosition)
    // Offset: 0x55980A4
    void ProcessMoveEvent(::UnityEngine::UIElements::EventBase* evt, ::UnityEngine::Vector2 localPosition);
    // protected System.Void ProcessUpEvent(UnityEngine.UIElements.EventBase evt, UnityEngine.Vector2 localPosition, System.Int32 pointerId)
    // Offset: 0x5598110
    void ProcessUpEvent(::UnityEngine::UIElements::EventBase* evt, ::UnityEngine::Vector2 localPosition, int pointerId);
    // protected System.Void ProcessCancelEvent(UnityEngine.UIElements.EventBase evt, System.Int32 pointerId)
    // Offset: 0x55982C8
    void ProcessCancelEvent(::UnityEngine::UIElements::EventBase* evt, int pointerId);
    // private System.Void <SimulateSingleClick>b__43_0()
    // Offset: 0x559843C
    void $SimulateSingleClick$b__43_0();
    // protected override System.Void RegisterCallbacksOnTarget()
    // Offset: 0x5596A04
    // Implemented from: UnityEngine.UIElements.Manipulator
    // Base method: System.Void Manipulator::RegisterCallbacksOnTarget()
    void RegisterCallbacksOnTarget();
    // protected override System.Void UnregisterCallbacksFromTarget()
    // Offset: 0x5596F00
    // Implemented from: UnityEngine.UIElements.Manipulator
    // Base method: System.Void Manipulator::UnregisterCallbacksFromTarget()
    void UnregisterCallbacksFromTarget();
  }; // UnityEngine.UIElements.Clickable
  #pragma pack(pop)
  static check_size<sizeof(Clickable), 104 + sizeof(::UnityEngine::UIElements::IVisualElementScheduledItem*)> __UnityEngine_UIElements_ClickableSizeCheck;
  static_assert(sizeof(Clickable) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::add_clickedWithEventInfo
// Il2CppName: add_clickedWithEventInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::System::Action_1<::UnityEngine::UIElements::EventBase*>*)>(&UnityEngine::UIElements::Clickable::add_clickedWithEventInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "add_clickedWithEventInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::remove_clickedWithEventInfo
// Il2CppName: remove_clickedWithEventInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::System::Action_1<::UnityEngine::UIElements::EventBase*>*)>(&UnityEngine::UIElements::Clickable::remove_clickedWithEventInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "remove_clickedWithEventInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::get_active
// Il2CppName: get_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::Clickable::*)()>(&UnityEngine::UIElements::Clickable::get_active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "get_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::set_active
// Il2CppName: set_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(bool)>(&UnityEngine::UIElements::Clickable::set_active)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "set_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::get_lastMousePosition
// Il2CppName: get_lastMousePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::UIElements::Clickable::*)()>(&UnityEngine::UIElements::Clickable::get_lastMousePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "get_lastMousePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::set_lastMousePosition
// Il2CppName: set_lastMousePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::Vector2)>(&UnityEngine::UIElements::Clickable::set_lastMousePosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "set_lastMousePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::get_acceptClicksIfDisabled
// Il2CppName: get_acceptClicksIfDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::Clickable::*)()>(&UnityEngine::UIElements::Clickable::get_acceptClicksIfDisabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "get_acceptClicksIfDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::set_acceptClicksIfDisabled
// Il2CppName: set_acceptClicksIfDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(bool)>(&UnityEngine::UIElements::Clickable::set_acceptClicksIfDisabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "set_acceptClicksIfDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::get_invokePolicy
// Il2CppName: get_invokePolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::InvokePolicy (UnityEngine::UIElements::Clickable::*)()>(&UnityEngine::UIElements::Clickable::get_invokePolicy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "get_invokePolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::OnTimer
// Il2CppName: OnTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::TimerState)>(&UnityEngine::UIElements::Clickable::OnTimer)> {
  static const MethodInfo* get() {
    static auto* timerState = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TimerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "OnTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timerState});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::IsRepeatable
// Il2CppName: IsRepeatable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::Clickable::*)()>(&UnityEngine::UIElements::Clickable::IsRepeatable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "IsRepeatable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::OnMouseDown
// Il2CppName: OnMouseDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::MouseDownEvent*)>(&UnityEngine::UIElements::Clickable::OnMouseDown)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MouseDownEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "OnMouseDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::OnMouseMove
// Il2CppName: OnMouseMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::MouseMoveEvent*)>(&UnityEngine::UIElements::Clickable::OnMouseMove)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MouseMoveEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "OnMouseMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::OnMouseUp
// Il2CppName: OnMouseUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::MouseUpEvent*)>(&UnityEngine::UIElements::Clickable::OnMouseUp)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MouseUpEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "OnMouseUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::OnMouseCaptureOut
// Il2CppName: OnMouseCaptureOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::MouseCaptureOutEvent*)>(&UnityEngine::UIElements::Clickable::OnMouseCaptureOut)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MouseCaptureOutEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "OnMouseCaptureOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::OnPointerDown
// Il2CppName: OnPointerDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::PointerDownEvent*)>(&UnityEngine::UIElements::Clickable::OnPointerDown)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "PointerDownEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "OnPointerDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::OnPointerMove
// Il2CppName: OnPointerMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::PointerMoveEvent*)>(&UnityEngine::UIElements::Clickable::OnPointerMove)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "PointerMoveEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "OnPointerMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::OnPointerUp
// Il2CppName: OnPointerUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::PointerUpEvent*)>(&UnityEngine::UIElements::Clickable::OnPointerUp)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "PointerUpEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "OnPointerUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::OnPointerCancel
// Il2CppName: OnPointerCancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::PointerCancelEvent*)>(&UnityEngine::UIElements::Clickable::OnPointerCancel)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "PointerCancelEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "OnPointerCancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::OnPointerCaptureOut
// Il2CppName: OnPointerCaptureOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::PointerCaptureOutEvent*)>(&UnityEngine::UIElements::Clickable::OnPointerCaptureOut)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "PointerCaptureOutEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "OnPointerCaptureOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::ContainsPointer
// Il2CppName: ContainsPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::Clickable::*)(int)>(&UnityEngine::UIElements::Clickable::ContainsPointer)> {
  static const MethodInfo* get() {
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "ContainsPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::IsNotMouseEvent
// Il2CppName: IsNotMouseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&UnityEngine::UIElements::Clickable::IsNotMouseEvent)> {
  static const MethodInfo* get() {
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "IsNotMouseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::Clickable::Invoke)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::SimulateSingleClick
// Il2CppName: SimulateSingleClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::EventBase*, int)>(&UnityEngine::UIElements::Clickable::SimulateSingleClick)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    static auto* delayMs = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "SimulateSingleClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt, delayMs});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::ProcessDownEvent
// Il2CppName: ProcessDownEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::EventBase*, ::UnityEngine::Vector2, int)>(&UnityEngine::UIElements::Clickable::ProcessDownEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "ProcessDownEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt, localPosition, pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::ProcessMoveEvent
// Il2CppName: ProcessMoveEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::EventBase*, ::UnityEngine::Vector2)>(&UnityEngine::UIElements::Clickable::ProcessMoveEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "ProcessMoveEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt, localPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::ProcessUpEvent
// Il2CppName: ProcessUpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::EventBase*, ::UnityEngine::Vector2, int)>(&UnityEngine::UIElements::Clickable::ProcessUpEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "ProcessUpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt, localPosition, pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::ProcessCancelEvent
// Il2CppName: ProcessCancelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)(::UnityEngine::UIElements::EventBase*, int)>(&UnityEngine::UIElements::Clickable::ProcessCancelEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "ProcessCancelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt, pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::$SimulateSingleClick$b__43_0
// Il2CppName: <SimulateSingleClick>b__43_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)()>(&UnityEngine::UIElements::Clickable::$SimulateSingleClick$b__43_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "<SimulateSingleClick>b__43_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::RegisterCallbacksOnTarget
// Il2CppName: RegisterCallbacksOnTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)()>(&UnityEngine::UIElements::Clickable::RegisterCallbacksOnTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "RegisterCallbacksOnTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Clickable::UnregisterCallbacksFromTarget
// Il2CppName: UnregisterCallbacksFromTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Clickable::*)()>(&UnityEngine::UIElements::Clickable::UnregisterCallbacksFromTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Clickable*), "UnregisterCallbacksFromTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
