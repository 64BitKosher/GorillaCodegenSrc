// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.Clickable
#include "UnityEngine/UIElements/Clickable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Skipping declaration: DragDirection because it is already included!
  // Forward declaring type: BaseSlider`1<TValueType>
  template<typename TValueType>
  class BaseSlider_1;
  // Forward declaring type: EventBase
  class EventBase;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IComparable`1 because it is already included!
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: ClampedDragger`1<T>
  template<typename T>
  class ClampedDragger_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::ClampedDragger_1, "UnityEngine.UIElements", "ClampedDragger`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.ClampedDragger`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class ClampedDragger_1 : public ::UnityEngine::UIElements::Clickable {
    public:
    // Nested type: ::UnityEngine::UIElements::ClampedDragger_1::DragDirection<T>
    struct DragDirection;
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.UIElements.ClampedDragger`1/DragDirection
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct DragDirection : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::Enum*/ {
      public:
      using declaring_type = ClampedDragger_1<T>*;
      static constexpr std::string_view NESTED_NAME = "DragDirection";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DragDirection
      constexpr DragDirection(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // Autogenerated static field getter
      // Get static field: static public UnityEngine.UIElements.ClampedDragger`1/DragDirection<T> None
      static typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection _get_None() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::DragDirection::_get_None");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ClampedDragger_1<T>::DragDirection>::get(), "None"));
      }
      // Autogenerated static field setter
      // Set static field: static public UnityEngine.UIElements.ClampedDragger`1/DragDirection<T> None
      static void _set_None(typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::DragDirection::_set_None");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ClampedDragger_1<T>::DragDirection>::get(), "None", value));
      }
      // Autogenerated static field getter
      // Get static field: static public UnityEngine.UIElements.ClampedDragger`1/DragDirection<T> LowToHigh
      static typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection _get_LowToHigh() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::DragDirection::_get_LowToHigh");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ClampedDragger_1<T>::DragDirection>::get(), "LowToHigh"));
      }
      // Autogenerated static field setter
      // Set static field: static public UnityEngine.UIElements.ClampedDragger`1/DragDirection<T> LowToHigh
      static void _set_LowToHigh(typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::DragDirection::_set_LowToHigh");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ClampedDragger_1<T>::DragDirection>::get(), "LowToHigh", value));
      }
      // Autogenerated static field getter
      // Get static field: static public UnityEngine.UIElements.ClampedDragger`1/DragDirection<T> HighToLow
      static typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection _get_HighToLow() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::DragDirection::_get_HighToLow");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ClampedDragger_1<T>::DragDirection>::get(), "HighToLow"));
      }
      // Autogenerated static field setter
      // Set static field: static public UnityEngine.UIElements.ClampedDragger`1/DragDirection<T> HighToLow
      static void _set_HighToLow(typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::DragDirection::_set_HighToLow");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ClampedDragger_1<T>::DragDirection>::get(), "HighToLow", value));
      }
      // Autogenerated static field getter
      // Get static field: static public UnityEngine.UIElements.ClampedDragger`1/DragDirection<T> Free
      static typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection _get_Free() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::DragDirection::_get_Free");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ClampedDragger_1<T>::DragDirection>::get(), "Free"));
      }
      // Autogenerated static field setter
      // Set static field: static public UnityEngine.UIElements.ClampedDragger`1/DragDirection<T> Free
      static void _set_Free(typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::DragDirection::_set_Free");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ClampedDragger_1<T>::DragDirection>::get(), "Free", value));
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::DragDirection::dyn_value__");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
    }; // UnityEngine.UIElements.ClampedDragger`1/DragDirection
    // Could not write size check! Type: UnityEngine.UIElements.ClampedDragger`1/DragDirection is generic, or has no fields that are valid for size checks!
    public:
    // private System.Action dragging
    // Size: 0x8
    // Offset: 0x0
    ::System::Action* dragging;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private UnityEngine.UIElements.ClampedDragger`1/DragDirection<T> <dragDirection>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection dragDirection;
    // private UnityEngine.UIElements.BaseSlider`1<T> <slider>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::BaseSlider_1<T>* slider;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BaseSlider_1<T>*) == 0x8);
    // private UnityEngine.Vector2 <startMousePosition>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Vector2 startMousePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private System.Action dragging
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_dragging() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::dyn_dragging");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dragging"))->offset;
      return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.ClampedDragger`1/DragDirection<T> <dragDirection>k__BackingField
    [[deprecated("Use field access instead!")]] typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection& dyn_$dragDirection$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::dyn_$dragDirection$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<dragDirection>k__BackingField"))->offset;
      return *reinterpret_cast<typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.BaseSlider`1<T> <slider>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BaseSlider_1<T>*& dyn_$slider$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::dyn_$slider$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<slider>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::BaseSlider_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Vector2 <startMousePosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$startMousePosition$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::dyn_$startMousePosition$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<startMousePosition>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void add_dragging(System.Action value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_dragging(::System::Action* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::add_dragging");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_dragging", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_dragging(System.Action value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_dragging(::System::Action* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::remove_dragging");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_dragging", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public UnityEngine.UIElements.ClampedDragger`1/DragDirection<T> get_dragDirection()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection get_dragDirection() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::get_dragDirection");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dragDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection, false>(this, ___internal__method);
    }
    // public System.Void set_dragDirection(UnityEngine.UIElements.ClampedDragger`1/DragDirection<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_dragDirection(typename ::UnityEngine::UIElements::ClampedDragger_1<T>::DragDirection value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::set_dragDirection");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dragDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // private System.Void set_slider(UnityEngine.UIElements.BaseSlider`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_slider(::UnityEngine::UIElements::BaseSlider_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::set_slider");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_slider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public UnityEngine.Vector2 get_startMousePosition()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector2 get_startMousePosition() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::get_startMousePosition");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startMousePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
    }
    // private System.Void set_startMousePosition(UnityEngine.Vector2 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_startMousePosition(::UnityEngine::Vector2 value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::set_startMousePosition");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_startMousePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public UnityEngine.Vector2 get_delta()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector2 get_delta() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::get_delta");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_delta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
    }
    // public System.Void .ctor(UnityEngine.UIElements.BaseSlider`1<T> slider, System.Action clickHandler, System.Action dragHandler)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClampedDragger_1<T>* New_ctor(::UnityEngine::UIElements::BaseSlider_1<T>* slider, ::System::Action* clickHandler, ::System::Action* dragHandler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClampedDragger_1<T>*, creationType>(slider, clickHandler, dragHandler)));
    }
    // protected override System.Void ProcessDownEvent(UnityEngine.UIElements.EventBase evt, UnityEngine.Vector2 localPosition, System.Int32 pointerId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.Clickable
    // Base method: System.Void Clickable::ProcessDownEvent(UnityEngine.UIElements.EventBase evt, UnityEngine.Vector2 localPosition, System.Int32 pointerId)
    void ProcessDownEvent(::UnityEngine::UIElements::EventBase* evt, ::UnityEngine::Vector2 localPosition, int pointerId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::ProcessDownEvent");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::Clickable*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt, localPosition, pointerId);
    }
    // protected override System.Void ProcessMoveEvent(UnityEngine.UIElements.EventBase evt, UnityEngine.Vector2 localPosition)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.Clickable
    // Base method: System.Void Clickable::ProcessMoveEvent(UnityEngine.UIElements.EventBase evt, UnityEngine.Vector2 localPosition)
    void ProcessMoveEvent(::UnityEngine::UIElements::EventBase* evt, ::UnityEngine::Vector2 localPosition) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClampedDragger_1::ProcessMoveEvent");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::Clickable*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt, localPosition);
    }
  }; // UnityEngine.UIElements.ClampedDragger`1
  // Could not write size check! Type: UnityEngine.UIElements.ClampedDragger`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
