// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.VisualElement
#include "UnityEngine/UIElements/VisualElement.hpp"
// Including type: UnityEngine.ScaleMode
#include "UnityEngine/ScaleMode.hpp"
// Including type: UnityEngine.UIElements.CustomStyleProperty`1
#include "UnityEngine/UIElements/CustomStyleProperty_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VectorImage
  class VectorImage;
  // Forward declaring type: MeshGenerationContext
  class MeshGenerationContext;
  // Forward declaring type: CustomStyleResolvedEvent
  class CustomStyleResolvedEvent;
  // Forward declaring type: ICustomStyle
  class ICustomStyle;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Sprite
  class Sprite;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Skipping declaration: Vector2 because it is already included!
  // Forward declaring type: Object
  class Object;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Image
  class Image;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::Image);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::Image*, "UnityEngine.UIElements", "Image");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.Image
  // [TokenAttribute] Offset: FFFFFFFF
  class Image : public ::UnityEngine::UIElements::VisualElement {
    public:
    // Nested type: ::UnityEngine::UIElements::Image::UxmlFactory
    class UxmlFactory;
    // Nested type: ::UnityEngine::UIElements::Image::UxmlTraits
    class UxmlTraits;
    public:
    // private UnityEngine.ScaleMode m_ScaleMode
    // Size: 0x4
    // Offset: 0x3C0
    ::UnityEngine::ScaleMode m_ScaleMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::ScaleMode) == 0x4);
    // private UnityEngine.Texture m_Image
    // Size: 0x8
    // Offset: 0x3C8
    ::UnityEngine::Texture* m_Image;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // private UnityEngine.Sprite m_Sprite
    // Size: 0x8
    // Offset: 0x3D0
    ::UnityEngine::Sprite* m_Sprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private UnityEngine.UIElements.VectorImage m_VectorImage
    // Size: 0x8
    // Offset: 0x3D8
    ::UnityEngine::UIElements::VectorImage* m_VectorImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VectorImage*) == 0x8);
    // private UnityEngine.Rect m_UV
    // Size: 0x10
    // Offset: 0x3E0
    ::UnityEngine::Rect m_UV;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private UnityEngine.Color m_TintColor
    // Size: 0x10
    // Offset: 0x3F0
    ::UnityEngine::Color m_TintColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // System.Boolean m_ImageIsInline
    // Size: 0x1
    // Offset: 0x400
    bool m_ImageIsInline;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ScaleModeIsInline
    // Size: 0x1
    // Offset: 0x401
    bool m_ScaleModeIsInline;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_TintColorIsInline
    // Size: 0x1
    // Offset: 0x402
    bool m_TintColorIsInline;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static public readonly System.String ussClassName
    static ::StringW _get_ussClassName();
    // Set static field: static public readonly System.String ussClassName
    static void _set_ussClassName(::StringW value);
    // Get static field: static private UnityEngine.UIElements.CustomStyleProperty`1<UnityEngine.Texture2D> s_ImageProperty
    static ::UnityEngine::UIElements::CustomStyleProperty_1<::UnityEngine::Texture2D*> _get_s_ImageProperty();
    // Set static field: static private UnityEngine.UIElements.CustomStyleProperty`1<UnityEngine.Texture2D> s_ImageProperty
    static void _set_s_ImageProperty(::UnityEngine::UIElements::CustomStyleProperty_1<::UnityEngine::Texture2D*> value);
    // Get static field: static private UnityEngine.UIElements.CustomStyleProperty`1<UnityEngine.Sprite> s_SpriteProperty
    static ::UnityEngine::UIElements::CustomStyleProperty_1<::UnityEngine::Sprite*> _get_s_SpriteProperty();
    // Set static field: static private UnityEngine.UIElements.CustomStyleProperty`1<UnityEngine.Sprite> s_SpriteProperty
    static void _set_s_SpriteProperty(::UnityEngine::UIElements::CustomStyleProperty_1<::UnityEngine::Sprite*> value);
    // Get static field: static private UnityEngine.UIElements.CustomStyleProperty`1<UnityEngine.UIElements.VectorImage> s_VectorImageProperty
    static ::UnityEngine::UIElements::CustomStyleProperty_1<::UnityEngine::UIElements::VectorImage*> _get_s_VectorImageProperty();
    // Set static field: static private UnityEngine.UIElements.CustomStyleProperty`1<UnityEngine.UIElements.VectorImage> s_VectorImageProperty
    static void _set_s_VectorImageProperty(::UnityEngine::UIElements::CustomStyleProperty_1<::UnityEngine::UIElements::VectorImage*> value);
    // Get static field: static private UnityEngine.UIElements.CustomStyleProperty`1<System.String> s_ScaleModeProperty
    static ::UnityEngine::UIElements::CustomStyleProperty_1<::StringW> _get_s_ScaleModeProperty();
    // Set static field: static private UnityEngine.UIElements.CustomStyleProperty`1<System.String> s_ScaleModeProperty
    static void _set_s_ScaleModeProperty(::UnityEngine::UIElements::CustomStyleProperty_1<::StringW> value);
    // Get static field: static private UnityEngine.UIElements.CustomStyleProperty`1<UnityEngine.Color> s_TintColorProperty
    static ::UnityEngine::UIElements::CustomStyleProperty_1<::UnityEngine::Color> _get_s_TintColorProperty();
    // Set static field: static private UnityEngine.UIElements.CustomStyleProperty`1<UnityEngine.Color> s_TintColorProperty
    static void _set_s_TintColorProperty(::UnityEngine::UIElements::CustomStyleProperty_1<::UnityEngine::Color> value);
    // Get instance field reference: private UnityEngine.ScaleMode m_ScaleMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::ScaleMode& dyn_m_ScaleMode();
    // Get instance field reference: private UnityEngine.Texture m_Image
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_m_Image();
    // Get instance field reference: private UnityEngine.Sprite m_Sprite
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn_m_Sprite();
    // Get instance field reference: private UnityEngine.UIElements.VectorImage m_VectorImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VectorImage*& dyn_m_VectorImage();
    // Get instance field reference: private UnityEngine.Rect m_UV
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_m_UV();
    // Get instance field reference: private UnityEngine.Color m_TintColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_TintColor();
    // Get instance field reference: System.Boolean m_ImageIsInline
    [[deprecated("Use field access instead!")]] bool& dyn_m_ImageIsInline();
    // Get instance field reference: private System.Boolean m_ScaleModeIsInline
    [[deprecated("Use field access instead!")]] bool& dyn_m_ScaleModeIsInline();
    // Get instance field reference: private System.Boolean m_TintColorIsInline
    [[deprecated("Use field access instead!")]] bool& dyn_m_TintColorIsInline();
    // public UnityEngine.Texture get_image()
    // Offset: 0x55BC840
    ::UnityEngine::Texture* get_image();
    // public System.Void set_image(UnityEngine.Texture value)
    // Offset: 0x55BC848
    void set_image(::UnityEngine::Texture* value);
    // public UnityEngine.Sprite get_sprite()
    // Offset: 0x55BC92C
    ::UnityEngine::Sprite* get_sprite();
    // public System.Void set_sprite(UnityEngine.Sprite value)
    // Offset: 0x55BC934
    void set_sprite(::UnityEngine::Sprite* value);
    // public UnityEngine.UIElements.VectorImage get_vectorImage()
    // Offset: 0x55BCA18
    ::UnityEngine::UIElements::VectorImage* get_vectorImage();
    // public System.Void set_vectorImage(UnityEngine.UIElements.VectorImage value)
    // Offset: 0x55BCA20
    void set_vectorImage(::UnityEngine::UIElements::VectorImage* value);
    // public UnityEngine.Rect get_sourceRect()
    // Offset: 0x55BCB04
    ::UnityEngine::Rect get_sourceRect();
    // public UnityEngine.Rect get_uv()
    // Offset: 0x55BCCA8
    ::UnityEngine::Rect get_uv();
    // public System.Void set_uv(UnityEngine.Rect value)
    // Offset: 0x55BCCBC
    void set_uv(::UnityEngine::Rect value);
    // public UnityEngine.ScaleMode get_scaleMode()
    // Offset: 0x55BCD04
    ::UnityEngine::ScaleMode get_scaleMode();
    // public UnityEngine.Color get_tintColor()
    // Offset: 0x55BCD0C
    ::UnityEngine::Color get_tintColor();
    // private UnityEngine.Vector2 GetTextureDisplaySize(UnityEngine.Texture texture)
    // Offset: 0x55BCEE8
    ::UnityEngine::Vector2 GetTextureDisplaySize(::UnityEngine::Texture* texture);
    // private UnityEngine.Vector2 GetTextureDisplaySize(UnityEngine.Sprite sprite)
    // Offset: 0x55BCFC4
    ::UnityEngine::Vector2 GetTextureDisplaySize(::UnityEngine::Sprite* sprite);
    // private System.Void OnGenerateVisualContent(UnityEngine.UIElements.MeshGenerationContext mgc)
    // Offset: 0x55BD304
    void OnGenerateVisualContent(::UnityEngine::UIElements::MeshGenerationContext* mgc);
    // private System.Void OnCustomStyleResolved(UnityEngine.UIElements.CustomStyleResolvedEvent e)
    // Offset: 0x55BD7C8
    void OnCustomStyleResolved(::UnityEngine::UIElements::CustomStyleResolvedEvent* e);
    // private System.Void ReadCustomProperties(UnityEngine.UIElements.ICustomStyle customStyleProvider)
    // Offset: 0x55BD7F4
    void ReadCustomProperties(::UnityEngine::UIElements::ICustomStyle* customStyleProvider);
    // private System.Void SetProperty(T0 src, ref T0 dst, ref T1 alt0, ref T2 alt1)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T0, class T1, class T2>
    void SetProperty(T0 src, ByRef<T0> dst, ByRef<T1> alt0, ByRef<T2> alt1) {
      static_assert(std::is_convertible_v<T0, ::UnityEngine::Object*>);
      static_assert(std::is_convertible_v<T1, ::UnityEngine::Object*>);
      static_assert(std::is_convertible_v<T2, ::UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Image::SetProperty");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dst), ::il2cpp_utils::ExtractType(alt0), ::il2cpp_utils::ExtractType(alt1)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, src, byref(dst), byref(alt0), byref(alt1));
    }
    // private System.Void ClearProperty()
    // Offset: 0x55BDC44
    void ClearProperty();
    // private System.Void SetScaleMode(UnityEngine.ScaleMode mode)
    // Offset: 0x55BDC80
    void SetScaleMode(::UnityEngine::ScaleMode mode);
    // private System.Void SetTintColor(UnityEngine.Color color)
    // Offset: 0x55BDCA4
    void SetTintColor(::UnityEngine::Color color);
    // private UnityEngine.Rect GetSourceRect()
    // Offset: 0x55BCB08
    ::UnityEngine::Rect GetSourceRect();
    // public System.Void .ctor()
    // Offset: 0x55BCD20
    // Implemented from: UnityEngine.UIElements.VisualElement
    // Base method: System.Void VisualElement::.ctor()
    // Base method: System.Void Focusable::.ctor()
    // Base method: System.Void CallbackEventHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Image* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Image::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Image*, creationType>()));
    }
    // protected internal override UnityEngine.Vector2 DoMeasure(System.Single desiredWidth, UnityEngine.UIElements.VisualElement/MeasureMode widthMode, System.Single desiredHeight, UnityEngine.UIElements.VisualElement/MeasureMode heightMode)
    // Offset: 0x55BD0F4
    // Implemented from: UnityEngine.UIElements.VisualElement
    // Base method: UnityEngine.Vector2 VisualElement::DoMeasure(System.Single desiredWidth, UnityEngine.UIElements.VisualElement/MeasureMode widthMode, System.Single desiredHeight, UnityEngine.UIElements.VisualElement/MeasureMode heightMode)
    ::UnityEngine::Vector2 DoMeasure(float desiredWidth, ::UnityEngine::UIElements::VisualElement::MeasureMode widthMode, float desiredHeight, ::UnityEngine::UIElements::VisualElement::MeasureMode heightMode);
    // static private System.Void .cctor()
    // Offset: 0x55BDD10
    // Implemented from: UnityEngine.UIElements.VisualElement
    // Base method: System.Void VisualElement::.cctor()
    static void _cctor();
  }; // UnityEngine.UIElements.Image
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::get_image
// Il2CppName: get_image
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture* (UnityEngine::UIElements::Image::*)()>(&UnityEngine::UIElements::Image::get_image)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "get_image", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::set_image
// Il2CppName: set_image
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Image::*)(::UnityEngine::Texture*)>(&UnityEngine::UIElements::Image::set_image)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "set_image", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::get_sprite
// Il2CppName: get_sprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (UnityEngine::UIElements::Image::*)()>(&UnityEngine::UIElements::Image::get_sprite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "get_sprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::set_sprite
// Il2CppName: set_sprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Image::*)(::UnityEngine::Sprite*)>(&UnityEngine::UIElements::Image::set_sprite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "set_sprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::get_vectorImage
// Il2CppName: get_vectorImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VectorImage* (UnityEngine::UIElements::Image::*)()>(&UnityEngine::UIElements::Image::get_vectorImage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "get_vectorImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::set_vectorImage
// Il2CppName: set_vectorImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Image::*)(::UnityEngine::UIElements::VectorImage*)>(&UnityEngine::UIElements::Image::set_vectorImage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VectorImage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "set_vectorImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::get_sourceRect
// Il2CppName: get_sourceRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (UnityEngine::UIElements::Image::*)()>(&UnityEngine::UIElements::Image::get_sourceRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "get_sourceRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::get_uv
// Il2CppName: get_uv
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (UnityEngine::UIElements::Image::*)()>(&UnityEngine::UIElements::Image::get_uv)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "get_uv", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::set_uv
// Il2CppName: set_uv
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Image::*)(::UnityEngine::Rect)>(&UnityEngine::UIElements::Image::set_uv)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "set_uv", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::get_scaleMode
// Il2CppName: get_scaleMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ScaleMode (UnityEngine::UIElements::Image::*)()>(&UnityEngine::UIElements::Image::get_scaleMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "get_scaleMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::get_tintColor
// Il2CppName: get_tintColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::UIElements::Image::*)()>(&UnityEngine::UIElements::Image::get_tintColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "get_tintColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::GetTextureDisplaySize
// Il2CppName: GetTextureDisplaySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::UIElements::Image::*)(::UnityEngine::Texture*)>(&UnityEngine::UIElements::Image::GetTextureDisplaySize)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "GetTextureDisplaySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::GetTextureDisplaySize
// Il2CppName: GetTextureDisplaySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::UIElements::Image::*)(::UnityEngine::Sprite*)>(&UnityEngine::UIElements::Image::GetTextureDisplaySize)> {
  static const MethodInfo* get() {
    static auto* sprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "GetTextureDisplaySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sprite});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::OnGenerateVisualContent
// Il2CppName: OnGenerateVisualContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Image::*)(::UnityEngine::UIElements::MeshGenerationContext*)>(&UnityEngine::UIElements::Image::OnGenerateVisualContent)> {
  static const MethodInfo* get() {
    static auto* mgc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MeshGenerationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "OnGenerateVisualContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mgc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::OnCustomStyleResolved
// Il2CppName: OnCustomStyleResolved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Image::*)(::UnityEngine::UIElements::CustomStyleResolvedEvent*)>(&UnityEngine::UIElements::Image::OnCustomStyleResolved)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "CustomStyleResolvedEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "OnCustomStyleResolved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::ReadCustomProperties
// Il2CppName: ReadCustomProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Image::*)(::UnityEngine::UIElements::ICustomStyle*)>(&UnityEngine::UIElements::Image::ReadCustomProperties)> {
  static const MethodInfo* get() {
    static auto* customStyleProvider = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ICustomStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "ReadCustomProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{customStyleProvider});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::SetProperty
// Il2CppName: SetProperty
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::ClearProperty
// Il2CppName: ClearProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Image::*)()>(&UnityEngine::UIElements::Image::ClearProperty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "ClearProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::SetScaleMode
// Il2CppName: SetScaleMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Image::*)(::UnityEngine::ScaleMode)>(&UnityEngine::UIElements::Image::SetScaleMode)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ScaleMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "SetScaleMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::SetTintColor
// Il2CppName: SetTintColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Image::*)(::UnityEngine::Color)>(&UnityEngine::UIElements::Image::SetTintColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "SetTintColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::GetSourceRect
// Il2CppName: GetSourceRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (UnityEngine::UIElements::Image::*)()>(&UnityEngine::UIElements::Image::GetSourceRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "GetSourceRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::DoMeasure
// Il2CppName: DoMeasure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::UIElements::Image::*)(float, ::UnityEngine::UIElements::VisualElement::MeasureMode, float, ::UnityEngine::UIElements::VisualElement::MeasureMode)>(&UnityEngine::UIElements::Image::DoMeasure)> {
  static const MethodInfo* get() {
    static auto* desiredWidth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* widthMode = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement/MeasureMode")->byval_arg;
    static auto* desiredHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* heightMode = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement/MeasureMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), "DoMeasure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desiredWidth, widthMode, desiredHeight, heightMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Image::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::Image::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Image*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
