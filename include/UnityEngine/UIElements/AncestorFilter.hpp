// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.CountingBloomFilter
#include "UnityEngine/UIElements/CountingBloomFilter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: StyleComplexSelector
  class StyleComplexSelector;
  // Forward declaring type: VisualElement
  class VisualElement;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: AncestorFilter
  class AncestorFilter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::AncestorFilter);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::AncestorFilter*, "UnityEngine.UIElements", "AncestorFilter");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x4018
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.AncestorFilter
  // [TokenAttribute] Offset: FFFFFFFF
  class AncestorFilter : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.UIElements.CountingBloomFilter m_CountingBloomFilter
    // Size: 0x1
    // Offset: 0x10
    ::UnityEngine::UIElements::CountingBloomFilter m_CountingBloomFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::CountingBloomFilter) == 0x1);
    // Padding between fields: m_CountingBloomFilter and: m_HashStack
    char __padding0[0x3FFF] = {};
    // private System.Collections.Generic.Stack`1<System.Int32> m_HashStack
    // Size: 0x8
    // Offset: 0x4010
    ::System::Collections::Generic::Stack_1<int>* m_HashStack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<int>*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.UIElements.CountingBloomFilter m_CountingBloomFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::CountingBloomFilter& dyn_m_CountingBloomFilter();
    // Get instance field reference: private System.Collections.Generic.Stack`1<System.Int32> m_HashStack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<int>*& dyn_m_HashStack();
    // public System.Void .ctor()
    // Offset: 0x5636250
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AncestorFilter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::AncestorFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AncestorFilter*, creationType>()));
    }
    // private System.Void AddHash(System.Int32 hash)
    // Offset: 0x56362E0
    void AddHash(int hash);
    // public System.Boolean IsCandidate(UnityEngine.UIElements.StyleComplexSelector complexSel)
    // Offset: 0x5636374
    bool IsCandidate(::UnityEngine::UIElements::StyleComplexSelector* complexSel);
    // public System.Void PushElement(UnityEngine.UIElements.VisualElement element)
    // Offset: 0x56363CC
    void PushElement(::UnityEngine::UIElements::VisualElement* element);
    // public System.Void PopElement()
    // Offset: 0x56365FC
    void PopElement();
  }; // UnityEngine.UIElements.AncestorFilter
  #pragma pack(pop)
  static check_size<sizeof(AncestorFilter), 16400 + sizeof(::System::Collections::Generic::Stack_1<int>*)> __UnityEngine_UIElements_AncestorFilterSizeCheck;
  static_assert(sizeof(AncestorFilter) == 0x4018);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::AncestorFilter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::AncestorFilter::AddHash
// Il2CppName: AddHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::AncestorFilter::*)(int)>(&UnityEngine::UIElements::AncestorFilter::AddHash)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::AncestorFilter*), "AddHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::AncestorFilter::IsCandidate
// Il2CppName: IsCandidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::AncestorFilter::*)(::UnityEngine::UIElements::StyleComplexSelector*)>(&UnityEngine::UIElements::AncestorFilter::IsCandidate)> {
  static const MethodInfo* get() {
    static auto* complexSel = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "StyleComplexSelector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::AncestorFilter*), "IsCandidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{complexSel});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::AncestorFilter::PushElement
// Il2CppName: PushElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::AncestorFilter::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::AncestorFilter::PushElement)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::AncestorFilter*), "PushElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::AncestorFilter::PopElement
// Il2CppName: PopElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::AncestorFilter::*)()>(&UnityEngine::UIElements::AncestorFilter::PopElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::AncestorFilter*), "PopElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
