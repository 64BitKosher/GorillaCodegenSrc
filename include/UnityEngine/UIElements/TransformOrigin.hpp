// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.UIElements.Length
#include "UnityEngine/UIElements/Length.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TransformOrigin
  struct TransformOrigin;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::TransformOrigin, "UnityEngine.UIElements", "TransformOrigin");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.TransformOrigin
  // [TokenAttribute] Offset: FFFFFFFF
  struct TransformOrigin/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::UIElements::TransformOrigin>*/ {
    public:
    public:
    // private UnityEngine.UIElements.Length m_X
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::Length m_X;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // private UnityEngine.UIElements.Length m_Y
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::UIElements::Length m_Y;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // private System.Single m_Z
    // Size: 0x4
    // Offset: 0x10
    float m_Z;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: TransformOrigin
    constexpr TransformOrigin(::UnityEngine::UIElements::Length m_X_ = {}, ::UnityEngine::UIElements::Length m_Y_ = {}, float m_Z_ = {}) noexcept : m_X{m_X_}, m_Y{m_Y_}, m_Z{m_Z_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::TransformOrigin>
    operator ::System::IEquatable_1<::UnityEngine::UIElements::TransformOrigin>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::TransformOrigin>*>(this);
    }
    // Get instance field reference: private UnityEngine.UIElements.Length m_X
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_m_X();
    // Get instance field reference: private UnityEngine.UIElements.Length m_Y
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_m_Y();
    // Get instance field reference: private System.Single m_Z
    [[deprecated("Use field access instead!")]] float& dyn_m_Z();
    // public System.Void .ctor(UnityEngine.UIElements.Length x, UnityEngine.UIElements.Length y, System.Single z)
    // Offset: 0x56AAC9C
    // ABORTED: conflicts with another method.  TransformOrigin(::UnityEngine::UIElements::Length x, ::UnityEngine::UIElements::Length y, float z);
    // static public UnityEngine.UIElements.TransformOrigin Initial()
    // Offset: 0x56AACA8
    static ::UnityEngine::UIElements::TransformOrigin Initial();
    // public UnityEngine.UIElements.Length get_x()
    // Offset: 0x56AACC0
    ::UnityEngine::UIElements::Length get_x();
    // public System.Void set_x(UnityEngine.UIElements.Length value)
    // Offset: 0x56AACC8
    void set_x(::UnityEngine::UIElements::Length value);
    // public UnityEngine.UIElements.Length get_y()
    // Offset: 0x56AACD0
    ::UnityEngine::UIElements::Length get_y();
    // public System.Void set_y(UnityEngine.UIElements.Length value)
    // Offset: 0x56AACD8
    void set_y(::UnityEngine::UIElements::Length value);
    // public System.Single get_z()
    // Offset: 0x56AACE0
    float get_z();
    // public System.Boolean Equals(UnityEngine.UIElements.TransformOrigin other)
    // Offset: 0x56AAD54
    bool Equals(::UnityEngine::UIElements::TransformOrigin other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x56AADC0
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x56A67D0
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x56AAE90
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.UIElements.TransformOrigin
  #pragma pack(pop)
  static check_size<sizeof(TransformOrigin), 16 + sizeof(float)> __UnityEngine_UIElements_TransformOriginSizeCheck;
  static_assert(sizeof(TransformOrigin) == 0x14);
  // static public System.Boolean op_Equality(UnityEngine.UIElements.TransformOrigin lhs, UnityEngine.UIElements.TransformOrigin rhs)
  // Offset: 0x56A64E0
  bool operator ==(const ::UnityEngine::UIElements::TransformOrigin& lhs, const ::UnityEngine::UIElements::TransformOrigin& rhs);
  // static public System.Boolean op_Inequality(UnityEngine.UIElements.TransformOrigin lhs, UnityEngine.UIElements.TransformOrigin rhs)
  // Offset: 0x56AACE8
  bool operator !=(const ::UnityEngine::UIElements::TransformOrigin& lhs, const ::UnityEngine::UIElements::TransformOrigin& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformOrigin::TransformOrigin
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformOrigin::Initial
// Il2CppName: Initial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::TransformOrigin (*)()>(&UnityEngine::UIElements::TransformOrigin::Initial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransformOrigin), "Initial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformOrigin::get_x
// Il2CppName: get_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Length (UnityEngine::UIElements::TransformOrigin::*)()>(&UnityEngine::UIElements::TransformOrigin::get_x)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransformOrigin), "get_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformOrigin::set_x
// Il2CppName: set_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TransformOrigin::*)(::UnityEngine::UIElements::Length)>(&UnityEngine::UIElements::TransformOrigin::set_x)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Length")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransformOrigin), "set_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformOrigin::get_y
// Il2CppName: get_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Length (UnityEngine::UIElements::TransformOrigin::*)()>(&UnityEngine::UIElements::TransformOrigin::get_y)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransformOrigin), "get_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformOrigin::set_y
// Il2CppName: set_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TransformOrigin::*)(::UnityEngine::UIElements::Length)>(&UnityEngine::UIElements::TransformOrigin::set_y)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Length")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransformOrigin), "set_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformOrigin::get_z
// Il2CppName: get_z
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::TransformOrigin::*)()>(&UnityEngine::UIElements::TransformOrigin::get_z)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransformOrigin), "get_z", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformOrigin::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::TransformOrigin::*)(::UnityEngine::UIElements::TransformOrigin)>(&UnityEngine::UIElements::TransformOrigin::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TransformOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransformOrigin), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformOrigin::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::TransformOrigin::*)(::Il2CppObject*)>(&UnityEngine::UIElements::TransformOrigin::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransformOrigin), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformOrigin::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::TransformOrigin::*)()>(&UnityEngine::UIElements::TransformOrigin::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransformOrigin), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformOrigin::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::UIElements::TransformOrigin::*)()>(&UnityEngine::UIElements::TransformOrigin::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransformOrigin), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformOrigin::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformOrigin::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
