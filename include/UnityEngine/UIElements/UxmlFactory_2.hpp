// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BaseUxmlFactory`2
#include "UnityEngine/UIElements/BaseUxmlFactory_2.hpp"
// Including type: UnityEngine.UIElements.IUxmlFactory
#include "UnityEngine/UIElements/IUxmlFactory.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: UxmlTraits
  class UxmlTraits;
  // Forward declaring type: IUxmlAttributes
  class IUxmlAttributes;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: UxmlFactory`2<TCreatedType, TTraits>
  template<typename TCreatedType, typename TTraits>
  class UxmlFactory_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::UxmlFactory_2, "UnityEngine.UIElements", "UxmlFactory`2");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.UxmlFactory`2
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TCreatedType, typename TTraits>
  class UxmlFactory_2 : public ::UnityEngine::UIElements::BaseUxmlFactory_2<TCreatedType, TTraits>/*, public ::UnityEngine::UIElements::IUxmlFactory*/ {
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IUxmlFactory
    operator ::UnityEngine::UIElements::IUxmlFactory() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IUxmlFactory*>(this);
    }
    // public UnityEngine.UIElements.VisualElement Create(UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::VisualElement* Create(::UnityEngine::UIElements::IUxmlAttributes* bag, ::UnityEngine::UIElements::CreationContext cc) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UxmlFactory_2::Create");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::UxmlFactory_2<TCreatedType, TTraits>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::VisualElement*, false>(this, ___internal__method, bag, cc);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.BaseUxmlFactory`2
    // Base method: System.Void BaseUxmlFactory_2::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UxmlFactory_2<TCreatedType, TTraits>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UxmlFactory_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UxmlFactory_2<TCreatedType, TTraits>*, creationType>()));
    }
  }; // UnityEngine.UIElements.UxmlFactory`2
  // Could not write size check! Type: UnityEngine.UIElements.UxmlFactory`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
