// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BindableElement
#include "UnityEngine/UIElements/BindableElement.hpp"
// Including type: UnityEngine.UIElements.INotifyValueChanged`1
#include "UnityEngine/UIElements/INotifyValueChanged_1.hpp"
// Including type: UnityEngine.UIElements.CustomStyleProperty`1
#include "UnityEngine/UIElements/CustomStyleProperty_1.hpp"
// Including type: UnityEngine.UIElements.BindableElement/UxmlTraits
#include "UnityEngine/UIElements/BindableElement_UxmlTraits.hpp"
// Including type: UnityEngine.UIElements.CreationContext
#include "UnityEngine/UIElements/CreationContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Skipping declaration: UxmlTraits because it is already included!
  // Forward declaring type: UxmlStringAttributeDescription
  class UxmlStringAttributeDescription;
  // Forward declaring type: Label
  class Label;
  // Forward declaring type: AttachToPanelEvent
  class AttachToPanelEvent;
  // Forward declaring type: DetachFromPanelEvent
  class DetachFromPanelEvent;
  // Forward declaring type: CustomStyleResolvedEvent
  class CustomStyleResolvedEvent;
  // Forward declaring type: GeometryChangedEvent
  class GeometryChangedEvent;
  // Forward declaring type: IUxmlAttributes
  class IUxmlAttributes;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: BaseField`1<TValueType>
  template<typename TValueType>
  class BaseField_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::BaseField_1, "UnityEngine.UIElements", "BaseField`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.BaseField`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TValueType>
  class BaseField_1 : public ::UnityEngine::UIElements::BindableElement/*, public ::UnityEngine::UIElements::INotifyValueChanged_1<TValueType>*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::BaseField_1::UxmlTraits<TValueType>
    class UxmlTraits;
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.UIElements.BaseField`1/UxmlTraits
    // [TokenAttribute] Offset: FFFFFFFF
    class UxmlTraits : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::UnityEngine::UIElements::BindableElement::UxmlTraits {
      public:
      using declaring_type = BaseField_1<TValueType>*;
      static constexpr std::string_view NESTED_NAME = "UxmlTraits";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private UnityEngine.UIElements.UxmlStringAttributeDescription m_Label
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_Label;
      // Field size check
      static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
      public:
      // Autogenerated instance field getter
      // Get instance field: private UnityEngine.UIElements.UxmlStringAttributeDescription m_Label
      [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_Label() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::UxmlTraits::dyn_m_Label");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Label"))->offset;
        return *reinterpret_cast<::UnityEngine::UIElements::UxmlStringAttributeDescription**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // static System.Collections.Generic.List`1<System.String> ParseChoiceList(System.String choicesFromBag)
      // Offset: 0xFFFFFFFFFFFFFFFF
      static ::System::Collections::Generic::List_1<::StringW>* ParseChoiceList(::StringW choicesFromBag) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::UxmlTraits::ParseChoiceList");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BaseField_1<TValueType>::UxmlTraits*>::get(), "ParseChoiceList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(choicesFromBag)})));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::StringW>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, choicesFromBag);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: UnityEngine.UIElements.BindableElement/UxmlTraits
      // Base method: System.Void UxmlTraits::.ctor()
      // Base method: System.Void UxmlTraits::.ctor()
      // Base method: System.Void UxmlTraits::.ctor()
      // Base method: System.Void BaseUxmlTraits::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename BaseField_1<TValueType>::UxmlTraits* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::UxmlTraits::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename BaseField_1<TValueType>::UxmlTraits*, creationType>()));
      }
      // public override System.Void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc)
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: UnityEngine.UIElements.BindableElement/UxmlTraits
      // Base method: System.Void UxmlTraits::Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc)
      void Init(::UnityEngine::UIElements::VisualElement* ve, ::UnityEngine::UIElements::IUxmlAttributes* bag, ::UnityEngine::UIElements::CreationContext cc) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::UxmlTraits::Init");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BindableElement::UxmlTraits*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ve, bag, cc);
      }
    }; // UnityEngine.UIElements.BaseField`1/UxmlTraits
    // Could not write size check! Type: UnityEngine.UIElements.BaseField`1/UxmlTraits is generic, or has no fields that are valid for size checks!
    public:
    // private System.Single m_LabelWidthRatio
    // Size: 0x4
    // Offset: 0x0
    float m_LabelWidthRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_LabelExtraPadding
    // Size: 0x4
    // Offset: 0x0
    float m_LabelExtraPadding;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_LabelBaseMinWidth
    // Size: 0x4
    // Offset: 0x0
    float m_LabelBaseMinWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_LabelExtraContextWidth
    // Size: 0x4
    // Offset: 0x0
    float m_LabelExtraContextWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.UIElements.VisualElement m_VisualInput
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::VisualElement* m_VisualInput;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private TValueType m_Value
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    TValueType m_Value;
    // private System.Func`2<TValueType,TValueType> onValidateValue
    // Size: 0x8
    // Offset: 0x0
    ::System::Func_2<TValueType, TValueType>* onValidateValue;
    // Field size check
    static_assert(sizeof(::System::Func_2<TValueType, TValueType>*) == 0x8);
    // private UnityEngine.UIElements.Label <labelElement>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::Label* labelElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Label*) == 0x8);
    // private System.Boolean m_ShowMixedValue
    // Size: 0x1
    // Offset: 0x0
    bool m_ShowMixedValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.UIElements.Label m_MixedValueLabel
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::Label* m_MixedValueLabel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Label*) == 0x8);
    // private System.Boolean m_SkipValidation
    // Size: 0x1
    // Offset: 0x0
    bool m_SkipValidation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.UIElements.VisualElement m_CachedContextWidthElement
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::VisualElement* m_CachedContextWidthElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.VisualElement m_CachedInspectorElement
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::VisualElement* m_CachedInspectorElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::INotifyValueChanged_1<TValueType>
    operator ::UnityEngine::UIElements::INotifyValueChanged_1<TValueType>() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::INotifyValueChanged_1<TValueType>*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String ussClassName
    static ::StringW _get_ussClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_get_ussClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "ussClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String ussClassName
    static void _set_ussClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_set_ussClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "ussClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String labelUssClassName
    static ::StringW _get_labelUssClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_get_labelUssClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "labelUssClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String labelUssClassName
    static void _set_labelUssClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_set_labelUssClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "labelUssClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String inputUssClassName
    static ::StringW _get_inputUssClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_get_inputUssClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "inputUssClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String inputUssClassName
    static void _set_inputUssClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_set_inputUssClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "inputUssClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String noLabelVariantUssClassName
    static ::StringW _get_noLabelVariantUssClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_get_noLabelVariantUssClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "noLabelVariantUssClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String noLabelVariantUssClassName
    static void _set_noLabelVariantUssClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_set_noLabelVariantUssClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "noLabelVariantUssClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String labelDraggerVariantUssClassName
    static ::StringW _get_labelDraggerVariantUssClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_get_labelDraggerVariantUssClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "labelDraggerVariantUssClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String labelDraggerVariantUssClassName
    static void _set_labelDraggerVariantUssClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_set_labelDraggerVariantUssClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "labelDraggerVariantUssClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String mixedValueLabelUssClassName
    static ::StringW _get_mixedValueLabelUssClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_get_mixedValueLabelUssClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "mixedValueLabelUssClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String mixedValueLabelUssClassName
    static void _set_mixedValueLabelUssClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_set_mixedValueLabelUssClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "mixedValueLabelUssClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String alignedFieldUssClassName
    static ::StringW _get_alignedFieldUssClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_get_alignedFieldUssClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "alignedFieldUssClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String alignedFieldUssClassName
    static void _set_alignedFieldUssClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_set_alignedFieldUssClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "alignedFieldUssClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly System.String inspectorFieldUssClassName
    static ::StringW _get_inspectorFieldUssClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_get_inspectorFieldUssClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "inspectorFieldUssClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly System.String inspectorFieldUssClassName
    static void _set_inspectorFieldUssClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_set_inspectorFieldUssClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "inspectorFieldUssClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static protected internal readonly System.String mixedValueString
    static ::StringW _get_mixedValueString() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_get_mixedValueString");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "mixedValueString"));
    }
    // Autogenerated static field setter
    // Set static field: static protected internal readonly System.String mixedValueString
    static void _set_mixedValueString(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_set_mixedValueString");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "mixedValueString", value));
    }
    // Autogenerated static field getter
    // Get static field: static protected internal readonly UnityEngine.PropertyName serializedPropertyCopyName
    static ::UnityEngine::PropertyName _get_serializedPropertyCopyName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_get_serializedPropertyCopyName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::PropertyName>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "serializedPropertyCopyName"));
    }
    // Autogenerated static field setter
    // Set static field: static protected internal readonly UnityEngine.PropertyName serializedPropertyCopyName
    static void _set_serializedPropertyCopyName(::UnityEngine::PropertyName value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_set_serializedPropertyCopyName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "serializedPropertyCopyName", value));
    }
    // Autogenerated static field getter
    // Get static field: static private UnityEngine.UIElements.CustomStyleProperty`1<System.Single> s_LabelWidthRatioProperty
    static ::UnityEngine::UIElements::CustomStyleProperty_1<float> _get_s_LabelWidthRatioProperty() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_get_s_LabelWidthRatioProperty");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::UIElements::CustomStyleProperty_1<float>>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "s_LabelWidthRatioProperty"));
    }
    // Autogenerated static field setter
    // Set static field: static private UnityEngine.UIElements.CustomStyleProperty`1<System.Single> s_LabelWidthRatioProperty
    static void _set_s_LabelWidthRatioProperty(::UnityEngine::UIElements::CustomStyleProperty_1<float> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_set_s_LabelWidthRatioProperty");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "s_LabelWidthRatioProperty", value));
    }
    // Autogenerated static field getter
    // Get static field: static private UnityEngine.UIElements.CustomStyleProperty`1<System.Single> s_LabelExtraPaddingProperty
    static ::UnityEngine::UIElements::CustomStyleProperty_1<float> _get_s_LabelExtraPaddingProperty() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_get_s_LabelExtraPaddingProperty");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::UIElements::CustomStyleProperty_1<float>>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "s_LabelExtraPaddingProperty"));
    }
    // Autogenerated static field setter
    // Set static field: static private UnityEngine.UIElements.CustomStyleProperty`1<System.Single> s_LabelExtraPaddingProperty
    static void _set_s_LabelExtraPaddingProperty(::UnityEngine::UIElements::CustomStyleProperty_1<float> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_set_s_LabelExtraPaddingProperty");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "s_LabelExtraPaddingProperty", value));
    }
    // Autogenerated static field getter
    // Get static field: static private UnityEngine.UIElements.CustomStyleProperty`1<System.Single> s_LabelBaseMinWidthProperty
    static ::UnityEngine::UIElements::CustomStyleProperty_1<float> _get_s_LabelBaseMinWidthProperty() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_get_s_LabelBaseMinWidthProperty");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::UIElements::CustomStyleProperty_1<float>>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "s_LabelBaseMinWidthProperty"));
    }
    // Autogenerated static field setter
    // Set static field: static private UnityEngine.UIElements.CustomStyleProperty`1<System.Single> s_LabelBaseMinWidthProperty
    static void _set_s_LabelBaseMinWidthProperty(::UnityEngine::UIElements::CustomStyleProperty_1<float> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_set_s_LabelBaseMinWidthProperty");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "s_LabelBaseMinWidthProperty", value));
    }
    // Autogenerated static field getter
    // Get static field: static private UnityEngine.UIElements.CustomStyleProperty`1<System.Single> s_LabelExtraContextWidthProperty
    static ::UnityEngine::UIElements::CustomStyleProperty_1<float> _get_s_LabelExtraContextWidthProperty() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_get_s_LabelExtraContextWidthProperty");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::UIElements::CustomStyleProperty_1<float>>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "s_LabelExtraContextWidthProperty"));
    }
    // Autogenerated static field setter
    // Set static field: static private UnityEngine.UIElements.CustomStyleProperty`1<System.Single> s_LabelExtraContextWidthProperty
    static void _set_s_LabelExtraContextWidthProperty(::UnityEngine::UIElements::CustomStyleProperty_1<float> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::_set_s_LabelExtraContextWidthProperty");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), "s_LabelExtraContextWidthProperty", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Single m_LabelWidthRatio
    [[deprecated("Use field access instead!")]] float& dyn_m_LabelWidthRatio() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::dyn_m_LabelWidthRatio");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LabelWidthRatio"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Single m_LabelExtraPadding
    [[deprecated("Use field access instead!")]] float& dyn_m_LabelExtraPadding() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::dyn_m_LabelExtraPadding");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LabelExtraPadding"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Single m_LabelBaseMinWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_LabelBaseMinWidth() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::dyn_m_LabelBaseMinWidth");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LabelBaseMinWidth"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Single m_LabelExtraContextWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_LabelExtraContextWidth() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::dyn_m_LabelExtraContextWidth");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LabelExtraContextWidth"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.VisualElement m_VisualInput
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_VisualInput() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::dyn_m_VisualInput");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_VisualInput"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::VisualElement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private TValueType m_Value
    [[deprecated("Use field access instead!")]] TValueType& dyn_m_Value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::dyn_m_Value");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Value"))->offset;
      return *reinterpret_cast<TValueType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Func`2<TValueType,TValueType> onValidateValue
    [[deprecated("Use field access instead!")]] ::System::Func_2<TValueType, TValueType>*& dyn_onValidateValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::dyn_onValidateValue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onValidateValue"))->offset;
      return *reinterpret_cast<::System::Func_2<TValueType, TValueType>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.Label <labelElement>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Label*& dyn_$labelElement$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::dyn_$labelElement$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<labelElement>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::Label**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean m_ShowMixedValue
    [[deprecated("Use field access instead!")]] bool& dyn_m_ShowMixedValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::dyn_m_ShowMixedValue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ShowMixedValue"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.Label m_MixedValueLabel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Label*& dyn_m_MixedValueLabel() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::dyn_m_MixedValueLabel");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MixedValueLabel"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::Label**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean m_SkipValidation
    [[deprecated("Use field access instead!")]] bool& dyn_m_SkipValidation() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::dyn_m_SkipValidation");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SkipValidation"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.VisualElement m_CachedContextWidthElement
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_CachedContextWidthElement() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::dyn_m_CachedContextWidthElement");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CachedContextWidthElement"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::VisualElement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.VisualElement m_CachedInspectorElement
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_CachedInspectorElement() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::dyn_m_CachedInspectorElement");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CachedInspectorElement"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::VisualElement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // UnityEngine.UIElements.VisualElement get_visualInput()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::VisualElement* get_visualInput() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::get_visualInput");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_visualInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::VisualElement*, false>(this, ___internal__method);
    }
    // System.Void set_visualInput(UnityEngine.UIElements.VisualElement value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_visualInput(::UnityEngine::UIElements::VisualElement* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::set_visualInput");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_visualInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // protected TValueType get_rawValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValueType get_rawValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::get_rawValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rawValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<TValueType, false>(this, ___internal__method);
    }
    // protected System.Void set_rawValue(TValueType value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_rawValue(TValueType value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::set_rawValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rawValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // System.Void add_onValidateValue(System.Func`2<TValueType,TValueType> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_onValidateValue(::System::Func_2<TValueType, TValueType>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::add_onValidateValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onValidateValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // System.Void remove_onValidateValue(System.Func`2<TValueType,TValueType> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_onValidateValue(::System::Func_2<TValueType, TValueType>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::remove_onValidateValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onValidateValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public TValueType get_value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValueType get_value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::get_value");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<TValueType, false>(this, ___internal__method);
    }
    // public System.Void set_value(TValueType value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_value(TValueType value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::set_value");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public UnityEngine.UIElements.Label get_labelElement()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::Label* get_labelElement() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::get_labelElement");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_labelElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::Label*, false>(this, ___internal__method);
    }
    // private System.Void set_labelElement(UnityEngine.UIElements.Label value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_labelElement(::UnityEngine::UIElements::Label* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::set_labelElement");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_labelElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.String get_label()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_label() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::get_label");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // public System.Void set_label(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_label(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::set_label");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_label", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Boolean get_showMixedValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_showMixedValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::get_showMixedValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void set_showMixedValue(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_showMixedValue(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::set_showMixedValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // protected UnityEngine.UIElements.Label get_mixedValueLabel()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::Label* get_mixedValueLabel() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::get_mixedValueLabel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixedValueLabel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::Label*, false>(this, ___internal__method);
    }
    // System.Void .ctor(System.String label)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseField_1<TValueType>* New_ctor(::StringW label) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseField_1<TValueType>*, creationType>(label)));
    }
    // protected System.Void .ctor(System.String label, UnityEngine.UIElements.VisualElement visualInput)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseField_1<TValueType>* New_ctor(::StringW label, ::UnityEngine::UIElements::VisualElement* visualInput) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseField_1<TValueType>*, creationType>(label, visualInput)));
    }
    // private System.Void OnAttachToPanel(UnityEngine.UIElements.AttachToPanelEvent e)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnAttachToPanel(::UnityEngine::UIElements::AttachToPanelEvent* e) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::OnAttachToPanel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAttachToPanel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
    }
    // private System.Void OnDetachFromPanel(UnityEngine.UIElements.DetachFromPanelEvent e)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDetachFromPanel(::UnityEngine::UIElements::DetachFromPanelEvent* e) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::OnDetachFromPanel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDetachFromPanel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
    }
    // private System.Void OnCustomStyleResolved(UnityEngine.UIElements.CustomStyleResolvedEvent evt)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnCustomStyleResolved(::UnityEngine::UIElements::CustomStyleResolvedEvent* evt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::OnCustomStyleResolved");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCustomStyleResolved", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt);
    }
    // private System.Void OnInspectorFieldGeometryChanged(UnityEngine.UIElements.GeometryChangedEvent e)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnInspectorFieldGeometryChanged(::UnityEngine::UIElements::GeometryChangedEvent* e) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::OnInspectorFieldGeometryChanged");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInspectorFieldGeometryChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
    }
    // private System.Void AlignLabel()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AlignLabel() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::AlignLabel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AlignLabel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // TValueType ValidatedValue(TValueType value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValueType ValidatedValue(TValueType value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::ValidatedValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidatedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<TValueType, false>(this, ___internal__method, value);
    }
    // protected System.Void UpdateMixedValueContent()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateMixedValueContent() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::UpdateMixedValueContent");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void SetValueWithoutNotify(TValueType newValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetValueWithoutNotify(TValueType newValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::SetValueWithoutNotify");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newValue);
    }
    // override System.Void OnViewDataReady()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.VisualElement
    // Base method: System.Void VisualElement::OnViewDataReady()
    void OnViewDataReady() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::OnViewDataReady");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::VisualElement*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // override UnityEngine.Rect GetTooltipRect()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.VisualElement
    // Base method: UnityEngine.Rect VisualElement::GetTooltipRect()
    ::UnityEngine::Rect GetTooltipRect() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::GetTooltipRect");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::VisualElement*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rect, false>(this, ___internal__method);
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.VisualElement
    // Base method: System.Void VisualElement::.cctor()
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseField_1::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseField_1<TValueType>*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
  }; // UnityEngine.UIElements.BaseField`1
  // Could not write size check! Type: UnityEngine.UIElements.BaseField`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
