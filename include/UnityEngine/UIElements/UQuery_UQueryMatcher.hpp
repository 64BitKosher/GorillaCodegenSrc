// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UQuery
#include "UnityEngine/UIElements/UQuery.hpp"
// Including type: UnityEngine.UIElements.StyleSheets.HierarchyTraversal
#include "UnityEngine/UIElements/StyleSheets/HierarchyTraversal.hpp"
// Including type: UnityEngine.UIElements.RuleMatcher
#include "UnityEngine/UIElements/RuleMatcher.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::UIElements::StyleSheets
namespace UnityEngine::UIElements::StyleSheets {
  // Forward declaring type: MatchResultInfo
  struct MatchResultInfo;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UQuery::UQueryMatcher);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UQuery::UQueryMatcher*, "UnityEngine.UIElements", "UQuery/UQueryMatcher");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UQuery/UQueryMatcher
  // [TokenAttribute] Offset: FFFFFFFF
  class UQuery::UQueryMatcher : public ::UnityEngine::UIElements::StyleSheets::HierarchyTraversal {
    public:
    // Nested type: ::UnityEngine::UIElements::UQuery::UQueryMatcher::$$c
    class $$c;
    public:
    // System.Collections.Generic.List`1<UnityEngine.UIElements.RuleMatcher> m_Matchers
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>* m_Matchers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>*
    constexpr operator ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>*() const noexcept {
      return m_Matchers;
    }
    // Get instance field reference: System.Collections.Generic.List`1<UnityEngine.UIElements.RuleMatcher> m_Matchers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>*& dyn_m_Matchers();
    // protected System.Boolean OnRuleMatchedElement(UnityEngine.UIElements.RuleMatcher matcher, UnityEngine.UIElements.VisualElement element)
    // Offset: 0x56C37EC
    bool OnRuleMatchedElement(::UnityEngine::UIElements::RuleMatcher matcher, ::UnityEngine::UIElements::VisualElement* element);
    // static private System.Void NoProcessResult(UnityEngine.UIElements.VisualElement e, UnityEngine.UIElements.StyleSheets.MatchResultInfo i)
    // Offset: 0x56C37F4
    static void NoProcessResult(::UnityEngine::UIElements::VisualElement* e, ::UnityEngine::UIElements::StyleSheets::MatchResultInfo i);
    // public System.Void Run(UnityEngine.UIElements.VisualElement root, System.Collections.Generic.List`1<UnityEngine.UIElements.RuleMatcher> matchers)
    // Offset: 0x56C39F8
    void Run(::UnityEngine::UIElements::VisualElement* root, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>* matchers);
    // protected System.Void .ctor()
    // Offset: 0x56C37DC
    // Implemented from: UnityEngine.UIElements.StyleSheets.HierarchyTraversal
    // Base method: System.Void HierarchyTraversal::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UQuery::UQueryMatcher* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQuery::UQueryMatcher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UQuery::UQueryMatcher*, creationType>()));
    }
    // public override System.Void Traverse(UnityEngine.UIElements.VisualElement element)
    // Offset: 0x56C37E4
    // Implemented from: UnityEngine.UIElements.StyleSheets.HierarchyTraversal
    // Base method: System.Void HierarchyTraversal::Traverse(UnityEngine.UIElements.VisualElement element)
    void Traverse(::UnityEngine::UIElements::VisualElement* element);
    // public override System.Void TraverseRecursive(UnityEngine.UIElements.VisualElement element, System.Int32 depth)
    // Offset: 0x56C37F8
    // Implemented from: UnityEngine.UIElements.StyleSheets.HierarchyTraversal
    // Base method: System.Void HierarchyTraversal::TraverseRecursive(UnityEngine.UIElements.VisualElement element, System.Int32 depth)
    void TraverseRecursive(::UnityEngine::UIElements::VisualElement* element, int depth);
  }; // UnityEngine.UIElements.UQuery/UQueryMatcher
  #pragma pack(pop)
  static check_size<sizeof(UQuery::UQueryMatcher), 16 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>*)> __UnityEngine_UIElements_UQuery_UQueryMatcherSizeCheck;
  static_assert(sizeof(UQuery::UQueryMatcher) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UQuery::UQueryMatcher::OnRuleMatchedElement
// Il2CppName: OnRuleMatchedElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UQuery::UQueryMatcher::*)(::UnityEngine::UIElements::RuleMatcher, ::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UQuery::UQueryMatcher::OnRuleMatchedElement)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "RuleMatcher")->byval_arg;
    static auto* element = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UQuery::UQueryMatcher*), "OnRuleMatchedElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher, element});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UQuery::UQueryMatcher::NoProcessResult
// Il2CppName: NoProcessResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::StyleSheets::MatchResultInfo)>(&UnityEngine::UIElements::UQuery::UQueryMatcher::NoProcessResult)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.StyleSheets", "MatchResultInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UQuery::UQueryMatcher*), "NoProcessResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, i});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UQuery::UQueryMatcher::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UQuery::UQueryMatcher::*)(::UnityEngine::UIElements::VisualElement*, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>*)>(&UnityEngine::UIElements::UQuery::UQueryMatcher::Run)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* matchers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "RuleMatcher")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UQuery::UQueryMatcher*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, matchers});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UQuery::UQueryMatcher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::UQuery::UQueryMatcher::Traverse
// Il2CppName: Traverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UQuery::UQueryMatcher::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UQuery::UQueryMatcher::Traverse)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UQuery::UQueryMatcher*), "Traverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UQuery::UQueryMatcher::TraverseRecursive
// Il2CppName: TraverseRecursive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UQuery::UQueryMatcher::*)(::UnityEngine::UIElements::VisualElement*, int)>(&UnityEngine::UIElements::UQuery::UQueryMatcher::TraverseRecursive)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UQuery::UQueryMatcher*), "TraverseRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element, depth});
  }
};
