// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.IEventHandler
#include "UnityEngine/UIElements/IEventHandler.hpp"
// Including type: UnityEngine.UIElements.TrickleDown
#include "UnityEngine/UIElements/TrickleDown.hpp"
// Including type: UnityEngine.UIElements.InvokePolicy
#include "UnityEngine/UIElements/InvokePolicy.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: EventCallbackRegistry
  class EventCallbackRegistry;
  // Forward declaring type: EventBase`1<T>
  template<typename T>
  class EventBase_1;
  // Forward declaring type: EventCallback`1<TEventType>
  template<typename TEventType>
  class EventCallback_1;
  // Forward declaring type: EventBase
  class EventBase;
  // Forward declaring type: DispatchMode
  struct DispatchMode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: CallbackEventHandler
  class CallbackEventHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::CallbackEventHandler);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::CallbackEventHandler*, "UnityEngine.UIElements", "CallbackEventHandler");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.CallbackEventHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class CallbackEventHandler : public ::Il2CppObject/*, public ::UnityEngine::UIElements::IEventHandler*/ {
    public:
    public:
    // System.Boolean isIMGUIContainer
    // Size: 0x1
    // Offset: 0x10
    bool isIMGUIContainer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isIMGUIContainer and: m_CallbackRegistry
    char __padding0[0x7] = {};
    // private UnityEngine.UIElements.EventCallbackRegistry m_CallbackRegistry
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::EventCallbackRegistry* m_CallbackRegistry;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::EventCallbackRegistry*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IEventHandler
    operator ::UnityEngine::UIElements::IEventHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IEventHandler*>(this);
    }
    // static field const value: static System.String ExecuteDefaultActionName
    static constexpr const char* ExecuteDefaultActionName = "ExecuteDefaultAction";
    // Get static field: static System.String ExecuteDefaultActionName
    static ::StringW _get_ExecuteDefaultActionName();
    // Set static field: static System.String ExecuteDefaultActionName
    static void _set_ExecuteDefaultActionName(::StringW value);
    // static field const value: static System.String ExecuteDefaultActionAtTargetName
    static constexpr const char* ExecuteDefaultActionAtTargetName = "ExecuteDefaultActionAtTarget";
    // Get static field: static System.String ExecuteDefaultActionAtTargetName
    static ::StringW _get_ExecuteDefaultActionAtTargetName();
    // Set static field: static System.String ExecuteDefaultActionAtTargetName
    static void _set_ExecuteDefaultActionAtTargetName(::StringW value);
    // Get instance field reference: System.Boolean isIMGUIContainer
    [[deprecated("Use field access instead!")]] bool& dyn_isIMGUIContainer();
    // Get instance field reference: private UnityEngine.UIElements.EventCallbackRegistry m_CallbackRegistry
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::EventCallbackRegistry*& dyn_m_CallbackRegistry();
    // public System.Void RegisterCallback(UnityEngine.UIElements.EventCallback`1<TEventType> callback, UnityEngine.UIElements.TrickleDown useTrickleDown)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEventType>
    void RegisterCallback(::UnityEngine::UIElements::EventCallback_1<TEventType>* callback, ::UnityEngine::UIElements::TrickleDown useTrickleDown) {
      static_assert(std::is_convertible_v<TEventType, ::UnityEngine::UIElements::EventBase_1<TEventType>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::CallbackEventHandler::RegisterCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEventType>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(useTrickleDown)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEventType>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, callback, useTrickleDown);
    }
    // private System.Void AddEventCategories()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEventType>
    void AddEventCategories() {
      static_assert(std::is_convertible_v<TEventType, ::UnityEngine::UIElements::EventBase_1<TEventType>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::CallbackEventHandler::AddEventCategories");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEventCategories", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEventType>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEventType>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method);
    }
    // System.Void RegisterCallback(UnityEngine.UIElements.EventCallback`1<TEventType> callback, UnityEngine.UIElements.InvokePolicy invokePolicy, UnityEngine.UIElements.TrickleDown useTrickleDown)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEventType>
    void RegisterCallback(::UnityEngine::UIElements::EventCallback_1<TEventType>* callback, ::UnityEngine::UIElements::InvokePolicy invokePolicy, ::UnityEngine::UIElements::TrickleDown useTrickleDown) {
      static_assert(std::is_convertible_v<TEventType, ::UnityEngine::UIElements::EventBase_1<TEventType>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::CallbackEventHandler::RegisterCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEventType>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(invokePolicy), ::il2cpp_utils::ExtractType(useTrickleDown)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEventType>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, callback, invokePolicy, useTrickleDown);
    }
    // public System.Void UnregisterCallback(UnityEngine.UIElements.EventCallback`1<TEventType> callback, UnityEngine.UIElements.TrickleDown useTrickleDown)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEventType>
    void UnregisterCallback(::UnityEngine::UIElements::EventCallback_1<TEventType>* callback, ::UnityEngine::UIElements::TrickleDown useTrickleDown) {
      static_assert(std::is_convertible_v<TEventType, ::UnityEngine::UIElements::EventBase_1<TEventType>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::CallbackEventHandler::UnregisterCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEventType>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(useTrickleDown)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEventType>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, callback, useTrickleDown);
    }
    // public System.Void SendEvent(UnityEngine.UIElements.EventBase e)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SendEvent(::UnityEngine::UIElements::EventBase* e);
    // System.Void SendEvent(UnityEngine.UIElements.EventBase e, UnityEngine.UIElements.DispatchMode dispatchMode)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SendEvent(::UnityEngine::UIElements::EventBase* e, ::UnityEngine::UIElements::DispatchMode dispatchMode);
    // System.Void HandleEventAtTargetPhase(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x564B29C
    void HandleEventAtTargetPhase(::UnityEngine::UIElements::EventBase* evt);
    // System.Void HandleEventAtTargetAndDefaultPhase(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x564B314
    void HandleEventAtTargetAndDefaultPhase(::UnityEngine::UIElements::EventBase* evt);
    // System.Void HandleEventAtCurrentTargetAndPhase(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x564B308
    void HandleEventAtCurrentTargetAndPhase(::UnityEngine::UIElements::EventBase* evt);
    // private System.Void UnityEngine.UIElements.IEventHandler.HandleEvent(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x564B354
    void UnityEngine_UIElements_IEventHandler_HandleEvent(::UnityEngine::UIElements::EventBase* evt);
    // public System.Void HandleEvent(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x564B360
    void HandleEvent(::UnityEngine::UIElements::EventBase* evt);
    // public System.Boolean HasTrickleDownHandlers()
    // Offset: 0x564B600
    bool HasTrickleDownHandlers();
    // public System.Boolean HasBubbleUpHandlers()
    // Offset: 0x564B628
    bool HasBubbleUpHandlers();
    // protected System.Void ExecuteDefaultActionAtTarget(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x564B650
    void ExecuteDefaultActionAtTarget(::UnityEngine::UIElements::EventBase* evt);
    // protected System.Void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x564B654
    void ExecuteDefaultAction(::UnityEngine::UIElements::EventBase* evt);
    // System.Void ExecuteDefaultActionDisabledAtTarget(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x564B658
    void ExecuteDefaultActionDisabledAtTarget(::UnityEngine::UIElements::EventBase* evt);
    // System.Void ExecuteDefaultActionDisabled(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x564B65C
    void ExecuteDefaultActionDisabled(::UnityEngine::UIElements::EventBase* evt);
    // protected System.Void .ctor()
    // Offset: 0x564B660
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CallbackEventHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::CallbackEventHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CallbackEventHandler*, creationType>()));
    }
  }; // UnityEngine.UIElements.CallbackEventHandler
  #pragma pack(pop)
  static check_size<sizeof(CallbackEventHandler), 24 + sizeof(::UnityEngine::UIElements::EventCallbackRegistry*)> __UnityEngine_UIElements_CallbackEventHandlerSizeCheck;
  static_assert(sizeof(CallbackEventHandler) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::RegisterCallback
// Il2CppName: RegisterCallback
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::AddEventCategories
// Il2CppName: AddEventCategories
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::RegisterCallback
// Il2CppName: RegisterCallback
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::UnregisterCallback
// Il2CppName: UnregisterCallback
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::SendEvent
// Il2CppName: SendEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::CallbackEventHandler::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::CallbackEventHandler::SendEvent)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CallbackEventHandler*), "SendEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::SendEvent
// Il2CppName: SendEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::CallbackEventHandler::*)(::UnityEngine::UIElements::EventBase*, ::UnityEngine::UIElements::DispatchMode)>(&UnityEngine::UIElements::CallbackEventHandler::SendEvent)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    static auto* dispatchMode = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "DispatchMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CallbackEventHandler*), "SendEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, dispatchMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::HandleEventAtTargetPhase
// Il2CppName: HandleEventAtTargetPhase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::CallbackEventHandler::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::CallbackEventHandler::HandleEventAtTargetPhase)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CallbackEventHandler*), "HandleEventAtTargetPhase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::HandleEventAtTargetAndDefaultPhase
// Il2CppName: HandleEventAtTargetAndDefaultPhase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::CallbackEventHandler::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::CallbackEventHandler::HandleEventAtTargetAndDefaultPhase)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CallbackEventHandler*), "HandleEventAtTargetAndDefaultPhase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::HandleEventAtCurrentTargetAndPhase
// Il2CppName: HandleEventAtCurrentTargetAndPhase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::CallbackEventHandler::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::CallbackEventHandler::HandleEventAtCurrentTargetAndPhase)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CallbackEventHandler*), "HandleEventAtCurrentTargetAndPhase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::UnityEngine_UIElements_IEventHandler_HandleEvent
// Il2CppName: UnityEngine.UIElements.IEventHandler.HandleEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::CallbackEventHandler::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::CallbackEventHandler::UnityEngine_UIElements_IEventHandler_HandleEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CallbackEventHandler*), "UnityEngine.UIElements.IEventHandler.HandleEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::HandleEvent
// Il2CppName: HandleEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::CallbackEventHandler::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::CallbackEventHandler::HandleEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CallbackEventHandler*), "HandleEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::HasTrickleDownHandlers
// Il2CppName: HasTrickleDownHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::CallbackEventHandler::*)()>(&UnityEngine::UIElements::CallbackEventHandler::HasTrickleDownHandlers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CallbackEventHandler*), "HasTrickleDownHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::HasBubbleUpHandlers
// Il2CppName: HasBubbleUpHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::CallbackEventHandler::*)()>(&UnityEngine::UIElements::CallbackEventHandler::HasBubbleUpHandlers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CallbackEventHandler*), "HasBubbleUpHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::ExecuteDefaultActionAtTarget
// Il2CppName: ExecuteDefaultActionAtTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::CallbackEventHandler::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::CallbackEventHandler::ExecuteDefaultActionAtTarget)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CallbackEventHandler*), "ExecuteDefaultActionAtTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::ExecuteDefaultAction
// Il2CppName: ExecuteDefaultAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::CallbackEventHandler::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::CallbackEventHandler::ExecuteDefaultAction)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CallbackEventHandler*), "ExecuteDefaultAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::ExecuteDefaultActionDisabledAtTarget
// Il2CppName: ExecuteDefaultActionDisabledAtTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::CallbackEventHandler::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::CallbackEventHandler::ExecuteDefaultActionDisabledAtTarget)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CallbackEventHandler*), "ExecuteDefaultActionDisabledAtTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::ExecuteDefaultActionDisabled
// Il2CppName: ExecuteDefaultActionDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::CallbackEventHandler::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::CallbackEventHandler::ExecuteDefaultActionDisabled)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::CallbackEventHandler*), "ExecuteDefaultActionDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::CallbackEventHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
