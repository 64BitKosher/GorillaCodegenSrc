// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BaseField`1
#include "UnityEngine/UIElements/BaseField_1.hpp"
// Including type: UnityEngine.BoundsInt
#include "UnityEngine/BoundsInt.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Vector3IntField
  class Vector3IntField;
  // Forward declaring type: ChangeEvent`1<T>
  template<typename T>
  class ChangeEvent_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: BoundsIntField
  class BoundsIntField;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::BoundsIntField);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::BoundsIntField*, "UnityEngine.UIElements", "BoundsIntField");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.BoundsIntField
  // [TokenAttribute] Offset: FFFFFFFF
  // [MovedFromAttribute] Offset: FFFFFFFF
  class BoundsIntField : public ::UnityEngine::UIElements::BaseField_1<::UnityEngine::BoundsInt> {
    public:
    // Nested type: ::UnityEngine::UIElements::BoundsIntField::UxmlFactory
    class UxmlFactory;
    // Nested type: ::UnityEngine::UIElements::BoundsIntField::UxmlTraits
    class UxmlTraits;
    public:
    // private UnityEngine.UIElements.Vector3IntField m_PositionField
    // Size: 0x8
    // Offset: 0x438
    ::UnityEngine::UIElements::Vector3IntField* m_PositionField;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Vector3IntField*) == 0x8);
    // private UnityEngine.UIElements.Vector3IntField m_SizeField
    // Size: 0x8
    // Offset: 0x440
    ::UnityEngine::UIElements::Vector3IntField* m_SizeField;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Vector3IntField*) == 0x8);
    public:
    // Get static field: static public readonly System.String ussClassName
    static ::StringW _get_ussClassName();
    // Set static field: static public readonly System.String ussClassName
    static void _set_ussClassName(::StringW value);
    // Get static field: static public readonly System.String labelUssClassName
    static ::StringW _get_labelUssClassName();
    // Set static field: static public readonly System.String labelUssClassName
    static void _set_labelUssClassName(::StringW value);
    // Get static field: static public readonly System.String inputUssClassName
    static ::StringW _get_inputUssClassName();
    // Set static field: static public readonly System.String inputUssClassName
    static void _set_inputUssClassName(::StringW value);
    // Get static field: static public readonly System.String positionUssClassName
    static ::StringW _get_positionUssClassName();
    // Set static field: static public readonly System.String positionUssClassName
    static void _set_positionUssClassName(::StringW value);
    // Get static field: static public readonly System.String sizeUssClassName
    static ::StringW _get_sizeUssClassName();
    // Set static field: static public readonly System.String sizeUssClassName
    static void _set_sizeUssClassName(::StringW value);
    // Get instance field reference: private UnityEngine.UIElements.Vector3IntField m_PositionField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Vector3IntField*& dyn_m_PositionField();
    // Get instance field reference: private UnityEngine.UIElements.Vector3IntField m_SizeField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Vector3IntField*& dyn_m_SizeField();
    // public System.Void SetValueWithoutNotify(UnityEngine.BoundsInt newValue)
    // Offset: 0x55AE4BC
    void SetValueWithoutNotify(::UnityEngine::BoundsInt newValue);
    // private System.Void <.ctor>b__10_0(UnityEngine.UIElements.ChangeEvent`1<UnityEngine.Vector3Int> e)
    // Offset: 0x55AE7B8
    void $_ctor$b__10_0(::UnityEngine::UIElements::ChangeEvent_1<::UnityEngine::Vector3Int>* e);
    // private System.Void <.ctor>b__10_1(UnityEngine.UIElements.ChangeEvent`1<UnityEngine.Vector3Int> e)
    // Offset: 0x55AE864
    void $_ctor$b__10_1(::UnityEngine::UIElements::ChangeEvent_1<::UnityEngine::Vector3Int>* e);
    // public System.Void .ctor()
    // Offset: 0x55ADFFC
    // Implemented from: UnityEngine.UIElements.BindableElement
    // Base method: System.Void BindableElement::.ctor()
    // Base method: System.Void VisualElement::.ctor()
    // Base method: System.Void Focusable::.ctor()
    // Base method: System.Void CallbackEventHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoundsIntField* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BoundsIntField::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoundsIntField*, creationType>()));
    }
    // public System.Void .ctor(System.String label)
    // Offset: 0x55AE004
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: System.Void BaseField_1::.ctor(System.String label)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoundsIntField* New_ctor(::StringW label) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BoundsIntField::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoundsIntField*, creationType>(label)));
    }
    // protected override System.Void UpdateMixedValueContent()
    // Offset: 0x55AE5B8
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: System.Void BaseField_1::UpdateMixedValueContent()
    void UpdateMixedValueContent();
    // static private System.Void .cctor()
    // Offset: 0x55AE62C
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: System.Void BaseField_1::.cctor()
    // Base method: System.Void VisualElement::.cctor()
    static void _cctor();
  }; // UnityEngine.UIElements.BoundsIntField
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::BoundsIntField::SetValueWithoutNotify
// Il2CppName: SetValueWithoutNotify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BoundsIntField::*)(::UnityEngine::BoundsInt)>(&UnityEngine::UIElements::BoundsIntField::SetValueWithoutNotify)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "BoundsInt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BoundsIntField*), "SetValueWithoutNotify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BoundsIntField::$_ctor$b__10_0
// Il2CppName: <.ctor>b__10_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BoundsIntField::*)(::UnityEngine::UIElements::ChangeEvent_1<::UnityEngine::Vector3Int>*)>(&UnityEngine::UIElements::BoundsIntField::$_ctor$b__10_0)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ChangeEvent`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3Int")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BoundsIntField*), "<.ctor>b__10_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BoundsIntField::$_ctor$b__10_1
// Il2CppName: <.ctor>b__10_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BoundsIntField::*)(::UnityEngine::UIElements::ChangeEvent_1<::UnityEngine::Vector3Int>*)>(&UnityEngine::UIElements::BoundsIntField::$_ctor$b__10_1)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ChangeEvent`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3Int")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BoundsIntField*), "<.ctor>b__10_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BoundsIntField::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::BoundsIntField::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::BoundsIntField::UpdateMixedValueContent
// Il2CppName: UpdateMixedValueContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BoundsIntField::*)()>(&UnityEngine::UIElements::BoundsIntField::UpdateMixedValueContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BoundsIntField*), "UpdateMixedValueContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BoundsIntField::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::BoundsIntField::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BoundsIntField*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
