// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.VisualTreeAsset
#include "UnityEngine/UIElements/VisualTreeAsset.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualTreeAsset::SlotUsageEntry, "UnityEngine.UIElements", "VisualTreeAsset/SlotUsageEntry");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.VisualTreeAsset/SlotUsageEntry
  // [TokenAttribute] Offset: FFFFFFFF
  struct VisualTreeAsset::SlotUsageEntry/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String slotName
    // Size: 0x8
    // Offset: 0x0
    ::StringW slotName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 assetId
    // Size: 0x4
    // Offset: 0x8
    int assetId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: SlotUsageEntry
    constexpr SlotUsageEntry(::StringW slotName_ = {}, int assetId_ = {}) noexcept : slotName{slotName_}, assetId{assetId_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String slotName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_slotName();
    // Get instance field reference: public System.Int32 assetId
    [[deprecated("Use field access instead!")]] int& dyn_assetId();
  }; // UnityEngine.UIElements.VisualTreeAsset/SlotUsageEntry
  #pragma pack(pop)
  static check_size<sizeof(VisualTreeAsset::SlotUsageEntry), 8 + sizeof(int)> __UnityEngine_UIElements_VisualTreeAsset_SlotUsageEntrySizeCheck;
  static_assert(sizeof(VisualTreeAsset::SlotUsageEntry) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
