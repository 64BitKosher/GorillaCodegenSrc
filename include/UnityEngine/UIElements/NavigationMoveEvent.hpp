// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.NavigationEventBase`1
#include "UnityEngine/UIElements/NavigationEventBase_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Skipping declaration: Direction because it is already included!
  // Skipping declaration: NavigationDeviceType because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: EventModifiers because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: NavigationMoveEvent
  class NavigationMoveEvent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::NavigationMoveEvent);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::NavigationMoveEvent*, "UnityEngine.UIElements", "NavigationMoveEvent");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.NavigationMoveEvent
  // [TokenAttribute] Offset: FFFFFFFF
  class NavigationMoveEvent : public ::UnityEngine::UIElements::NavigationEventBase_1<::UnityEngine::UIElements::NavigationMoveEvent*> {
    public:
    // Nested type: ::UnityEngine::UIElements::NavigationMoveEvent::Direction
    struct Direction;
    // Nested type: ::UnityEngine::UIElements::NavigationMoveEvent::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UIElements.NavigationMoveEvent/Direction
    // [TokenAttribute] Offset: FFFFFFFF
    struct Direction/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Direction
      constexpr Direction(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UIElements.NavigationMoveEvent/Direction None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.UIElements.NavigationMoveEvent/Direction None
      static ::UnityEngine::UIElements::NavigationMoveEvent::Direction _get_None();
      // Set static field: static public UnityEngine.UIElements.NavigationMoveEvent/Direction None
      static void _set_None(::UnityEngine::UIElements::NavigationMoveEvent::Direction value);
      // static field const value: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Left
      static constexpr const int Left = 1;
      // Get static field: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Left
      static ::UnityEngine::UIElements::NavigationMoveEvent::Direction _get_Left();
      // Set static field: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Left
      static void _set_Left(::UnityEngine::UIElements::NavigationMoveEvent::Direction value);
      // static field const value: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Up
      static constexpr const int Up = 2;
      // Get static field: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Up
      static ::UnityEngine::UIElements::NavigationMoveEvent::Direction _get_Up();
      // Set static field: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Up
      static void _set_Up(::UnityEngine::UIElements::NavigationMoveEvent::Direction value);
      // static field const value: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Right
      static constexpr const int Right = 3;
      // Get static field: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Right
      static ::UnityEngine::UIElements::NavigationMoveEvent::Direction _get_Right();
      // Set static field: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Right
      static void _set_Right(::UnityEngine::UIElements::NavigationMoveEvent::Direction value);
      // static field const value: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Down
      static constexpr const int Down = 4;
      // Get static field: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Down
      static ::UnityEngine::UIElements::NavigationMoveEvent::Direction _get_Down();
      // Set static field: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Down
      static void _set_Down(::UnityEngine::UIElements::NavigationMoveEvent::Direction value);
      // static field const value: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Next
      static constexpr const int Next = 5;
      // Get static field: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Next
      static ::UnityEngine::UIElements::NavigationMoveEvent::Direction _get_Next();
      // Set static field: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Next
      static void _set_Next(::UnityEngine::UIElements::NavigationMoveEvent::Direction value);
      // static field const value: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Previous
      static constexpr const int Previous = 6;
      // Get static field: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Previous
      static ::UnityEngine::UIElements::NavigationMoveEvent::Direction _get_Previous();
      // Set static field: static public UnityEngine.UIElements.NavigationMoveEvent/Direction Previous
      static void _set_Previous(::UnityEngine::UIElements::NavigationMoveEvent::Direction value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.UIElements.NavigationMoveEvent/Direction
    #pragma pack(pop)
    static check_size<sizeof(NavigationMoveEvent::Direction), 0 + sizeof(int)> __UnityEngine_UIElements_NavigationMoveEvent_DirectionSizeCheck;
    static_assert(sizeof(NavigationMoveEvent::Direction) == 0x4);
    public:
    // private UnityEngine.UIElements.NavigationMoveEvent/Direction <direction>k__BackingField
    // Size: 0x4
    // Offset: 0x8C
    ::UnityEngine::UIElements::NavigationMoveEvent::Direction direction;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::NavigationMoveEvent::Direction) == 0x4);
    // private UnityEngine.Vector2 <move>k__BackingField
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Vector2 move;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.UIElements.NavigationMoveEvent/Direction <direction>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::NavigationMoveEvent::Direction& dyn_$direction$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector2 <move>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$move$k__BackingField();
    // static UnityEngine.UIElements.NavigationMoveEvent/Direction DetermineMoveDirection(System.Single x, System.Single y, System.Single deadZone)
    // Offset: 0x56526A0
    static ::UnityEngine::UIElements::NavigationMoveEvent::Direction DetermineMoveDirection(float x, float y, float deadZone);
    // public UnityEngine.UIElements.NavigationMoveEvent/Direction get_direction()
    // Offset: 0x56526F4
    ::UnityEngine::UIElements::NavigationMoveEvent::Direction get_direction();
    // private System.Void set_direction(UnityEngine.UIElements.NavigationMoveEvent/Direction value)
    // Offset: 0x56526FC
    void set_direction(::UnityEngine::UIElements::NavigationMoveEvent::Direction value);
    // private System.Void set_move(UnityEngine.Vector2 value)
    // Offset: 0x5652704
    void set_move(::UnityEngine::Vector2 value);
    // static public UnityEngine.UIElements.NavigationMoveEvent GetPooled(UnityEngine.Vector2 moveVector, UnityEngine.EventModifiers modifiers)
    // Offset: 0x565270C
    static ::UnityEngine::UIElements::NavigationMoveEvent* GetPooled(::UnityEngine::Vector2 moveVector, ::UnityEngine::EventModifiers modifiers);
    // static UnityEngine.UIElements.NavigationMoveEvent GetPooled(UnityEngine.Vector2 moveVector, UnityEngine.UIElements.NavigationDeviceType deviceType, UnityEngine.EventModifiers modifiers)
    // Offset: 0x564DC7C
    static ::UnityEngine::UIElements::NavigationMoveEvent* GetPooled(::UnityEngine::Vector2 moveVector, ::UnityEngine::UIElements::NavigationDeviceType deviceType, ::UnityEngine::EventModifiers modifiers);
    // static public UnityEngine.UIElements.NavigationMoveEvent GetPooled(UnityEngine.UIElements.NavigationMoveEvent/Direction direction, UnityEngine.EventModifiers modifiers)
    // Offset: 0x565280C
    static ::UnityEngine::UIElements::NavigationMoveEvent* GetPooled(::UnityEngine::UIElements::NavigationMoveEvent::Direction direction, ::UnityEngine::EventModifiers modifiers);
    // static UnityEngine.UIElements.NavigationMoveEvent GetPooled(UnityEngine.UIElements.NavigationMoveEvent/Direction direction, UnityEngine.UIElements.NavigationDeviceType deviceType, UnityEngine.EventModifiers modifiers)
    // Offset: 0x564DBD0
    static ::UnityEngine::UIElements::NavigationMoveEvent* GetPooled(::UnityEngine::UIElements::NavigationMoveEvent::Direction direction, ::UnityEngine::UIElements::NavigationDeviceType deviceType, ::UnityEngine::EventModifiers modifiers);
    // static private System.Void .cctor()
    // Offset: 0x56525BC
    // Implemented from: UnityEngine.UIElements.EventBase`1
    // Base method: System.Void EventBase_1::.cctor()
    static void _cctor();
    // protected override System.Void Init()
    // Offset: 0x56528B4
    // Implemented from: UnityEngine.UIElements.NavigationEventBase`1
    // Base method: System.Void NavigationEventBase_1::Init()
    void Init();
    // public System.Void .ctor()
    // Offset: 0x5652958
    // Implemented from: UnityEngine.UIElements.NavigationEventBase`1
    // Base method: System.Void NavigationEventBase_1::.ctor()
    // Base method: System.Void EventBase_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavigationMoveEvent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::NavigationMoveEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavigationMoveEvent*, creationType>()));
    }
    // private System.Void LocalInit()
    // Offset: 0x5652904
    // Implemented from: UnityEngine.UIElements.NavigationEventBase`1
    // Base method: System.Void NavigationEventBase_1::LocalInit()
    // Base method: System.Void EventBase::LocalInit()
    void LocalInit();
  }; // UnityEngine.UIElements.NavigationMoveEvent
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::NavigationMoveEvent::Direction, "UnityEngine.UIElements", "NavigationMoveEvent/Direction");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigationMoveEvent::DetermineMoveDirection
// Il2CppName: DetermineMoveDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::NavigationMoveEvent::Direction (*)(float, float, float)>(&UnityEngine::UIElements::NavigationMoveEvent::DetermineMoveDirection)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deadZone = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigationMoveEvent*), "DetermineMoveDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, deadZone});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigationMoveEvent::get_direction
// Il2CppName: get_direction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::NavigationMoveEvent::Direction (UnityEngine::UIElements::NavigationMoveEvent::*)()>(&UnityEngine::UIElements::NavigationMoveEvent::get_direction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigationMoveEvent*), "get_direction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigationMoveEvent::set_direction
// Il2CppName: set_direction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::NavigationMoveEvent::*)(::UnityEngine::UIElements::NavigationMoveEvent::Direction)>(&UnityEngine::UIElements::NavigationMoveEvent::set_direction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "NavigationMoveEvent/Direction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigationMoveEvent*), "set_direction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigationMoveEvent::set_move
// Il2CppName: set_move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::NavigationMoveEvent::*)(::UnityEngine::Vector2)>(&UnityEngine::UIElements::NavigationMoveEvent::set_move)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigationMoveEvent*), "set_move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigationMoveEvent::GetPooled
// Il2CppName: GetPooled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::NavigationMoveEvent* (*)(::UnityEngine::Vector2, ::UnityEngine::EventModifiers)>(&UnityEngine::UIElements::NavigationMoveEvent::GetPooled)> {
  static const MethodInfo* get() {
    static auto* moveVector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* modifiers = &::il2cpp_utils::GetClassFromName("UnityEngine", "EventModifiers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigationMoveEvent*), "GetPooled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{moveVector, modifiers});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigationMoveEvent::GetPooled
// Il2CppName: GetPooled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::NavigationMoveEvent* (*)(::UnityEngine::Vector2, ::UnityEngine::UIElements::NavigationDeviceType, ::UnityEngine::EventModifiers)>(&UnityEngine::UIElements::NavigationMoveEvent::GetPooled)> {
  static const MethodInfo* get() {
    static auto* moveVector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* deviceType = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "NavigationDeviceType")->byval_arg;
    static auto* modifiers = &::il2cpp_utils::GetClassFromName("UnityEngine", "EventModifiers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigationMoveEvent*), "GetPooled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{moveVector, deviceType, modifiers});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigationMoveEvent::GetPooled
// Il2CppName: GetPooled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::NavigationMoveEvent* (*)(::UnityEngine::UIElements::NavigationMoveEvent::Direction, ::UnityEngine::EventModifiers)>(&UnityEngine::UIElements::NavigationMoveEvent::GetPooled)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "NavigationMoveEvent/Direction")->byval_arg;
    static auto* modifiers = &::il2cpp_utils::GetClassFromName("UnityEngine", "EventModifiers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigationMoveEvent*), "GetPooled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, modifiers});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigationMoveEvent::GetPooled
// Il2CppName: GetPooled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::NavigationMoveEvent* (*)(::UnityEngine::UIElements::NavigationMoveEvent::Direction, ::UnityEngine::UIElements::NavigationDeviceType, ::UnityEngine::EventModifiers)>(&UnityEngine::UIElements::NavigationMoveEvent::GetPooled)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "NavigationMoveEvent/Direction")->byval_arg;
    static auto* deviceType = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "NavigationDeviceType")->byval_arg;
    static auto* modifiers = &::il2cpp_utils::GetClassFromName("UnityEngine", "EventModifiers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigationMoveEvent*), "GetPooled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, deviceType, modifiers});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigationMoveEvent::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::NavigationMoveEvent::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigationMoveEvent*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigationMoveEvent::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::NavigationMoveEvent::*)()>(&UnityEngine::UIElements::NavigationMoveEvent::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigationMoveEvent*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigationMoveEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigationMoveEvent::LocalInit
// Il2CppName: LocalInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::NavigationMoveEvent::*)()>(&UnityEngine::UIElements::NavigationMoveEvent::LocalInit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigationMoveEvent*), "LocalInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
