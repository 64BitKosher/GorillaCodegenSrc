// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: EventBase
  class EventBase;
  // Forward declaring type: VisualElement
  class VisualElement;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: ClickDetector
  class ClickDetector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::ClickDetector);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::ClickDetector*, "UnityEngine.UIElements", "ClickDetector");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.ClickDetector
  // [TokenAttribute] Offset: FFFFFFFF
  class ClickDetector : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::UIElements::ClickDetector::ButtonClickStatus
    class ButtonClickStatus;
    public:
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.ClickDetector/ButtonClickStatus> m_ClickStatus
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::ClickDetector::ButtonClickStatus*>* m_ClickStatus;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::ClickDetector::ButtonClickStatus*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::UnityEngine::UIElements::ClickDetector::ButtonClickStatus*>*
    constexpr operator ::System::Collections::Generic::List_1<::UnityEngine::UIElements::ClickDetector::ButtonClickStatus*>*() const noexcept {
      return m_ClickStatus;
    }
    // Get static field: static private System.Int32 <s_DoubleClickTime>k__BackingField
    static int _get_$s_DoubleClickTime$k__BackingField();
    // Set static field: static private System.Int32 <s_DoubleClickTime>k__BackingField
    static void _set_$s_DoubleClickTime$k__BackingField(int value);
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.ClickDetector/ButtonClickStatus> m_ClickStatus
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::ClickDetector::ButtonClickStatus*>*& dyn_m_ClickStatus();
    // static System.Int32 get_s_DoubleClickTime()
    // Offset: 0x5595158
    static int get_s_DoubleClickTime();
    // static System.Void set_s_DoubleClickTime(System.Int32 value)
    // Offset: 0x55951B0
    static void set_s_DoubleClickTime(int value);
    // public System.Void .ctor()
    // Offset: 0x559520C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClickDetector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ClickDetector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClickDetector*, creationType>()));
    }
    // private System.Void StartClickTracking(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x559547C
    void StartClickTracking(::UnityEngine::UIElements::EventBase* evt);
    // private System.Void SendClickEvent(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x5595768
    void SendClickEvent(::UnityEngine::UIElements::EventBase* evt);
    // private System.Void CancelClickTracking(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x5595CBC
    void CancelClickTracking(::UnityEngine::UIElements::EventBase* evt);
    // public System.Void ProcessEvent(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x5595DB8
    void ProcessEvent(::UnityEngine::UIElements::EventBase* evt);
    // static private System.Boolean ContainsPointer(UnityEngine.UIElements.VisualElement element, UnityEngine.Vector2 position)
    // Offset: 0x5595B7C
    static bool ContainsPointer(::UnityEngine::UIElements::VisualElement* element, ::UnityEngine::Vector2 position);
    // System.Void Cleanup(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x55962D4
    void Cleanup(::UnityEngine::UIElements::VisualElement* ve);
    // static private System.Void .cctor()
    // Offset: 0x5596430
    static void _cctor();
  }; // UnityEngine.UIElements.ClickDetector
  #pragma pack(pop)
  static check_size<sizeof(ClickDetector), 16 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::ClickDetector::ButtonClickStatus*>*)> __UnityEngine_UIElements_ClickDetectorSizeCheck;
  static_assert(sizeof(ClickDetector) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::ClickDetector::get_s_DoubleClickTime
// Il2CppName: get_s_DoubleClickTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::UIElements::ClickDetector::get_s_DoubleClickTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ClickDetector*), "get_s_DoubleClickTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ClickDetector::set_s_DoubleClickTime
// Il2CppName: set_s_DoubleClickTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&UnityEngine::UIElements::ClickDetector::set_s_DoubleClickTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ClickDetector*), "set_s_DoubleClickTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ClickDetector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::ClickDetector::StartClickTracking
// Il2CppName: StartClickTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ClickDetector::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::ClickDetector::StartClickTracking)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ClickDetector*), "StartClickTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ClickDetector::SendClickEvent
// Il2CppName: SendClickEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ClickDetector::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::ClickDetector::SendClickEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ClickDetector*), "SendClickEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ClickDetector::CancelClickTracking
// Il2CppName: CancelClickTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ClickDetector::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::ClickDetector::CancelClickTracking)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ClickDetector*), "CancelClickTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ClickDetector::ProcessEvent
// Il2CppName: ProcessEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ClickDetector::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::ClickDetector::ProcessEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ClickDetector*), "ProcessEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ClickDetector::ContainsPointer
// Il2CppName: ContainsPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::Vector2)>(&UnityEngine::UIElements::ClickDetector::ContainsPointer)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ClickDetector*), "ContainsPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element, position});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ClickDetector::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ClickDetector::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::ClickDetector::Cleanup)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ClickDetector*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ClickDetector::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::ClickDetector::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ClickDetector*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
