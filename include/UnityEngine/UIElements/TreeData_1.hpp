// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.TreeViewItemData`1
#include "UnityEngine/UIElements/TreeViewItemData_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TreeData`1<T>
  template<typename T>
  struct TreeData_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::UnityEngine::UIElements::TreeData_1, "UnityEngine.UIElements", "TreeData`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.TreeData`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  template<typename T>
  struct TreeData_1/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Collections.Generic.IList`1<System.Int32> m_RootItemIds
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IList_1<int>* m_RootItemIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IList_1<int>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.UIElements.TreeViewItemData`1<T>> m_Tree
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::UIElements::TreeViewItemData_1<T>>* m_Tree;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::UIElements::TreeViewItemData_1<T>>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> m_ParentIds
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Dictionary_2<int, int>* m_ParentIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<System.Int32>> m_ChildrenIds
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<int>*>* m_ChildrenIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<int>*>*) == 0x8);
    public:
    // Creating value type constructor for type: TreeData_1
    constexpr TreeData_1(::System::Collections::Generic::IList_1<int>* m_RootItemIds_ = {}, ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::UIElements::TreeViewItemData_1<T>>* m_Tree_ = {}, ::System::Collections::Generic::Dictionary_2<int, int>* m_ParentIds_ = {}, ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<int>*>* m_ChildrenIds_ = {}) noexcept : m_RootItemIds{m_RootItemIds_}, m_Tree{m_Tree_}, m_ParentIds{m_ParentIds_}, m_ChildrenIds{m_ChildrenIds_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.IList`1<System.Int32> m_RootItemIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IList_1<int>*& dyn_m_RootItemIds() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeData_1::dyn_m_RootItemIds");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RootItemIds"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IList_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.UIElements.TreeViewItemData`1<T>> m_Tree
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::UIElements::TreeViewItemData_1<T>>*& dyn_m_Tree() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeData_1::dyn_m_Tree");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Tree"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::UIElements::TreeViewItemData_1<T>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> m_ParentIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn_m_ParentIds() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeData_1::dyn_m_ParentIds");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ParentIds"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<int, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<System.Int32>> m_ChildrenIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<int>*>*& dyn_m_ChildrenIds() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeData_1::dyn_m_ChildrenIds");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ChildrenIds"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<int>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Collections.Generic.IEnumerable`1<System.Int32> get_rootItemIds()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<int>* get_rootItemIds() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeData_1::get_rootItemIds");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_rootItemIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<int>*, false>(this, ___internal__method);
    }
    // public System.Void .ctor(System.Collections.Generic.IList`1<UnityEngine.UIElements.TreeViewItemData`1<T>> rootItems)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TreeData_1(::System::Collections::Generic::IList_1<::UnityEngine::UIElements::TreeViewItemData_1<T>>* rootItems) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeData_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootItems)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rootItems);
    }
    // public UnityEngine.UIElements.TreeViewItemData`1<T> GetDataForId(System.Int32 id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::TreeViewItemData_1<T> GetDataForId(int id) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeData_1::GetDataForId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetDataForId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::TreeViewItemData_1<T>, false>(this, ___internal__method, id);
    }
    // public System.Int32 GetParentId(System.Int32 id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetParentId(int id) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeData_1::GetParentId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetParentId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, id);
    }
    // public System.Void Move(System.Int32 id, System.Int32 newParentId, System.Int32 childIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Move(int id, int newParentId, int childIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeData_1::Move");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Move", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(newParentId), ::il2cpp_utils::ExtractType(childIndex)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, id, newParentId, childIndex);
    }
    // public System.Boolean HasAncestor(System.Int32 childId, System.Int32 ancestorId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool HasAncestor(int childId, int ancestorId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeData_1::HasAncestor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasAncestor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childId), ::il2cpp_utils::ExtractType(ancestorId)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, childId, ancestorId);
    }
    // private System.Void AddItemToParent(UnityEngine.UIElements.TreeViewItemData`1<T> item, System.Int32 parentId, System.Int32 childIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddItemToParent(::UnityEngine::UIElements::TreeViewItemData_1<T> item, int parentId, int childIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeData_1::AddItemToParent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AddItemToParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item), ::il2cpp_utils::ExtractType(parentId), ::il2cpp_utils::ExtractType(childIndex)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item, parentId, childIndex);
    }
    // private System.Void RemoveFromParent(System.Int32 id, System.Int32 parentId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveFromParent(int id, int parentId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeData_1::RemoveFromParent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "RemoveFromParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(parentId)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, id, parentId);
    }
    // private System.Void UpdateParentTree(UnityEngine.UIElements.TreeViewItemData`1<T> current)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateParentTree(::UnityEngine::UIElements::TreeViewItemData_1<T> current) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeData_1::UpdateParentTree");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "UpdateParentTree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, current);
    }
    // private System.Void RefreshTree(System.Collections.Generic.IList`1<UnityEngine.UIElements.TreeViewItemData`1<T>> rootItems)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RefreshTree(::System::Collections::Generic::IList_1<::UnityEngine::UIElements::TreeViewItemData_1<T>>* rootItems) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeData_1::RefreshTree");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "RefreshTree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootItems)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rootItems);
    }
    // private System.Void BuildTree(System.Collections.Generic.IEnumerable`1<UnityEngine.UIElements.TreeViewItemData`1<T>> items, System.Boolean isRoot)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void BuildTree(::System::Collections::Generic::IEnumerable_1<::UnityEngine::UIElements::TreeViewItemData_1<T>>* items, bool isRoot) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TreeData_1::BuildTree");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "BuildTree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(items), ::il2cpp_utils::ExtractType(isRoot)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, items, isRoot);
    }
  }; // UnityEngine.UIElements.TreeData`1
  // Could not write size check! Type: UnityEngine.UIElements.TreeData`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
