// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.IStyleDataGroup`1
#include "UnityEngine/UIElements/IStyleDataGroup_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.UIElements.Rotate
#include "UnityEngine/UIElements/Rotate.hpp"
// Including type: UnityEngine.UIElements.Scale
#include "UnityEngine/UIElements/Scale.hpp"
// Including type: UnityEngine.UIElements.TransformOrigin
#include "UnityEngine/UIElements/TransformOrigin.hpp"
// Including type: UnityEngine.UIElements.Translate
#include "UnityEngine/UIElements/Translate.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TransformData
  struct TransformData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::TransformData, "UnityEngine.UIElements", "TransformData");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x51
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.TransformData
  // [TokenAttribute] Offset: FFFFFFFF
  struct TransformData/*, public ::System::ValueType, public ::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::TransformData>, public ::System::IEquatable_1<::UnityEngine::UIElements::TransformData>*/ {
    public:
    public:
    // public UnityEngine.UIElements.Rotate rotate
    // Size: 0x15
    // Offset: 0x0
    ::UnityEngine::UIElements::Rotate rotate;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Rotate) == 0x15);
    // Padding between fields: rotate and: scale
    char __padding0[0x3] = {};
    // public UnityEngine.UIElements.Scale scale
    // Size: 0xD
    // Offset: 0x18
    ::UnityEngine::UIElements::Scale scale;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Scale) == 0xD);
    // Padding between fields: scale and: transformOrigin
    char __padding1[0x3] = {};
    // public UnityEngine.UIElements.TransformOrigin transformOrigin
    // Size: 0x14
    // Offset: 0x28
    ::UnityEngine::UIElements::TransformOrigin transformOrigin;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::TransformOrigin) == 0x14);
    // public UnityEngine.UIElements.Translate translate
    // Size: 0x15
    // Offset: 0x3C
    ::UnityEngine::UIElements::Translate translate;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Translate) == 0x15);
    public:
    // Creating value type constructor for type: TransformData
    constexpr TransformData(::UnityEngine::UIElements::Rotate rotate_ = {}, ::UnityEngine::UIElements::Scale scale_ = {}, ::UnityEngine::UIElements::TransformOrigin transformOrigin_ = {}, ::UnityEngine::UIElements::Translate translate_ = {}) noexcept : rotate{rotate_}, scale{scale_}, transformOrigin{transformOrigin_}, translate{translate_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::TransformData>
    operator ::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::TransformData>() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::TransformData>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::TransformData>
    operator ::System::IEquatable_1<::UnityEngine::UIElements::TransformData>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::TransformData>*>(this);
    }
    // Get instance field reference: public UnityEngine.UIElements.Rotate rotate
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Rotate& dyn_rotate();
    // Get instance field reference: public UnityEngine.UIElements.Scale scale
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Scale& dyn_scale();
    // Get instance field reference: public UnityEngine.UIElements.TransformOrigin transformOrigin
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::TransformOrigin& dyn_transformOrigin();
    // Get instance field reference: public UnityEngine.UIElements.Translate translate
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Translate& dyn_translate();
    // public UnityEngine.UIElements.TransformData Copy()
    // Offset: 0x56A6250
    ::UnityEngine::UIElements::TransformData Copy();
    // public System.Void CopyFrom(ref UnityEngine.UIElements.TransformData other)
    // Offset: 0x56A626C
    void CopyFrom(ByRef<::UnityEngine::UIElements::TransformData> other);
    // public System.Boolean Equals(UnityEngine.UIElements.TransformData other)
    // Offset: 0x56A65BC
    bool Equals(::UnityEngine::UIElements::TransformData other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x56A6600
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x56A66A0
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.UIElements.TransformData
  #pragma pack(pop)
  static check_size<sizeof(TransformData), 60 + sizeof(::UnityEngine::UIElements::Translate)> __UnityEngine_UIElements_TransformDataSizeCheck;
  static_assert(sizeof(TransformData) == 0x51);
  // static public System.Boolean op_Equality(UnityEngine.UIElements.TransformData lhs, UnityEngine.UIElements.TransformData rhs)
  // Offset: 0x56A6280
  bool operator ==(const ::UnityEngine::UIElements::TransformData& lhs, const ::UnityEngine::UIElements::TransformData& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformData::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::TransformData (UnityEngine::UIElements::TransformData::*)()>(&UnityEngine::UIElements::TransformData::Copy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransformData), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformData::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TransformData::*)(ByRef<::UnityEngine::UIElements::TransformData>)>(&UnityEngine::UIElements::TransformData::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TransformData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransformData), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::TransformData::*)(::UnityEngine::UIElements::TransformData)>(&UnityEngine::UIElements::TransformData::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TransformData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransformData), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::TransformData::*)(::Il2CppObject*)>(&UnityEngine::UIElements::TransformData::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransformData), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformData::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::TransformData::*)()>(&UnityEngine::UIElements::TransformData::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransformData), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransformData::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
