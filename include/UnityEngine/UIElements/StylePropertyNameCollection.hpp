// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.UIElements.StylePropertyName
#include "UnityEngine/UIElements/StylePropertyName.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: StylePropertyNameCollection
  struct StylePropertyNameCollection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::StylePropertyNameCollection, "UnityEngine.UIElements", "StylePropertyNameCollection");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.StylePropertyNameCollection
  // [TokenAttribute] Offset: FFFFFFFF
  struct StylePropertyNameCollection/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerable_1<::UnityEngine::UIElements::StylePropertyName>*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::StylePropertyNameCollection::Enumerator
    struct Enumerator;
    public:
    // System.Collections.Generic.List`1<UnityEngine.UIElements.StylePropertyName> propertiesList
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>* propertiesList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>*) == 0x8);
    public:
    // Creating value type constructor for type: StylePropertyNameCollection
    constexpr StylePropertyNameCollection(::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>* propertiesList_ = {}) noexcept : propertiesList{propertiesList_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::UnityEngine::UIElements::StylePropertyName>
    operator ::System::Collections::Generic::IEnumerable_1<::UnityEngine::UIElements::StylePropertyName>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::UIElements::StylePropertyName>*>(this);
    }
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>*
    constexpr operator ::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>*() const noexcept {
      return propertiesList;
    }
    // Get instance field reference: System.Collections.Generic.List`1<UnityEngine.UIElements.StylePropertyName> propertiesList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>*& dyn_propertiesList();
    // System.Void .ctor(System.Collections.Generic.List`1<UnityEngine.UIElements.StylePropertyName> list)
    // Offset: 0x5657EA4
    // ABORTED: conflicts with another method.  StylePropertyNameCollection(::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>* list);
    // public UnityEngine.UIElements.StylePropertyNameCollection/Enumerator GetEnumerator()
    // Offset: 0x5657EAC
    ::UnityEngine::UIElements::StylePropertyNameCollection::Enumerator GetEnumerator();
    // private System.Collections.Generic.IEnumerator`1<UnityEngine.UIElements.StylePropertyName> System.Collections.Generic.IEnumerable<UnityEngine.UIElements.StylePropertyName>.GetEnumerator()
    // Offset: 0x5657F44
    ::System::Collections::Generic::IEnumerator_1<::UnityEngine::UIElements::StylePropertyName>* System_Collections_Generic_IEnumerable$UnityEngine_UIElements_StylePropertyName$_GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x5657FAC
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
  }; // UnityEngine.UIElements.StylePropertyNameCollection
  #pragma pack(pop)
  static check_size<sizeof(StylePropertyNameCollection), 0 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>*)> __UnityEngine_UIElements_StylePropertyNameCollectionSizeCheck;
  static_assert(sizeof(StylePropertyNameCollection) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::StylePropertyNameCollection::StylePropertyNameCollection
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::StylePropertyNameCollection::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::StylePropertyNameCollection::Enumerator (UnityEngine::UIElements::StylePropertyNameCollection::*)()>(&UnityEngine::UIElements::StylePropertyNameCollection::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StylePropertyNameCollection), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StylePropertyNameCollection::System_Collections_Generic_IEnumerable$UnityEngine_UIElements_StylePropertyName$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.StylePropertyName>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::UIElements::StylePropertyName>* (UnityEngine::UIElements::StylePropertyNameCollection::*)()>(&UnityEngine::UIElements::StylePropertyNameCollection::System_Collections_Generic_IEnumerable$UnityEngine_UIElements_StylePropertyName$_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StylePropertyNameCollection), "System.Collections.Generic.IEnumerable<UnityEngine.UIElements.StylePropertyName>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StylePropertyNameCollection::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (UnityEngine::UIElements::StylePropertyNameCollection::*)()>(&UnityEngine::UIElements::StylePropertyNameCollection::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StylePropertyNameCollection), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
