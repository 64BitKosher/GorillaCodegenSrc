// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.CollectionViewController
#include "UnityEngine/UIElements/CollectionViewController.hpp"
// Including type: UnityEngine.UIElements.TreeItem
#include "UnityEngine/UIElements/TreeItem.hpp"
// Including type: UnityEngine.UIElements.TreeViewItemWrapper
#include "UnityEngine/UIElements/TreeViewItemWrapper.hpp"
// Including type: Unity.Profiling.ProfilerMarker
#include "Unity/Profiling/ProfilerMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: BaseTreeView
  class BaseTreeView;
  // Forward declaring type: ReusableTreeViewItem
  class ReusableTreeViewItem;
  // Forward declaring type: PointerUpEvent
  class PointerUpEvent;
  // Forward declaring type: ChangeEvent`1<T>
  template<typename T>
  class ChangeEvent_1;
  // Forward declaring type: ReusableCollectionItem
  class ReusableCollectionItem;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IList
  class IList;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: BaseTreeViewController
  class BaseTreeViewController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::BaseTreeViewController);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::BaseTreeViewController*, "UnityEngine.UIElements", "BaseTreeViewController");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.BaseTreeViewController
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseTreeViewController : public ::UnityEngine::UIElements::CollectionViewController {
    public:
    // Nested type: ::UnityEngine::UIElements::BaseTreeViewController::$$c__DisplayClass20_0
    class $$c__DisplayClass20_0;
    public:
    // private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.UIElements.TreeItem> m_TreeItems
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::UIElements::TreeItem>* m_TreeItems;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::UIElements::TreeItem>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> m_RootIndices
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<int>* m_RootIndices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.TreeViewItemWrapper> m_ItemWrappers
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TreeViewItemWrapper>* m_ItemWrappers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::TreeViewItemWrapper>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.Int32> m_TreeItemIdsWithItemWrappers
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::HashSet_1<int>* m_TreeItemIdsWithItemWrappers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<int>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.TreeViewItemWrapper> m_WrapperInsertionList
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TreeViewItemWrapper>* m_WrapperInsertionList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::TreeViewItemWrapper>*) == 0x8);
    public:
    // Get static field: static private readonly Unity.Profiling.ProfilerMarker K_ExpandItemByIndex
    static ::Unity::Profiling::ProfilerMarker _get_K_ExpandItemByIndex();
    // Set static field: static private readonly Unity.Profiling.ProfilerMarker K_ExpandItemByIndex
    static void _set_K_ExpandItemByIndex(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private readonly Unity.Profiling.ProfilerMarker k_CreateWrappers
    static ::Unity::Profiling::ProfilerMarker _get_k_CreateWrappers();
    // Set static field: static private readonly Unity.Profiling.ProfilerMarker k_CreateWrappers
    static void _set_k_CreateWrappers(::Unity::Profiling::ProfilerMarker value);
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.UIElements.TreeItem> m_TreeItems
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::UIElements::TreeItem>*& dyn_m_TreeItems();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> m_RootIndices
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_m_RootIndices();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.TreeViewItemWrapper> m_ItemWrappers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TreeViewItemWrapper>*& dyn_m_ItemWrappers();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.Int32> m_TreeItemIdsWithItemWrappers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& dyn_m_TreeItemIdsWithItemWrappers();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.TreeViewItemWrapper> m_WrapperInsertionList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TreeViewItemWrapper>*& dyn_m_WrapperInsertionList();
    // protected UnityEngine.UIElements.BaseTreeView get_baseTreeView()
    // Offset: 0x559AA7C
    ::UnityEngine::UIElements::BaseTreeView* get_baseTreeView();
    // public System.Void RebuildTree()
    // Offset: 0x559AB4C
    void RebuildTree();
    // public System.Collections.Generic.IEnumerable`1<System.Int32> GetRootItemIds()
    // Offset: 0x559B080
    ::System::Collections::Generic::IEnumerable_1<int>* GetRootItemIds();
    // public System.Collections.Generic.IEnumerable`1<System.Int32> GetAllItemIds(System.Collections.Generic.IEnumerable`1<System.Int32> rootIds)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<int>* GetAllItemIds(::System::Collections::Generic::IEnumerable_1<int>* rootIds);
    // public System.Int32 GetParentId(System.Int32 id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetParentId(int id);
    // public System.Collections.Generic.IEnumerable`1<System.Int32> GetChildrenIds(System.Int32 id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<int>* GetChildrenIds(int id);
    // public System.Void Move(System.Int32 id, System.Int32 newParentId, System.Int32 childIndex, System.Boolean rebuildTree)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Move(int id, int newParentId, int childIndex, bool rebuildTree);
    // System.Void PostInitRegistration(UnityEngine.UIElements.ReusableTreeViewItem treeItem)
    // Offset: 0x559B138
    void PostInitRegistration(::UnityEngine::UIElements::ReusableTreeViewItem* treeItem);
    // private System.Void OnItemPointerUp(UnityEngine.UIElements.PointerUpEvent evt)
    // Offset: 0x559BAA8
    void OnItemPointerUp(::UnityEngine::UIElements::PointerUpEvent* evt);
    // private System.Void OnToggleValueChanged(UnityEngine.UIElements.ChangeEvent`1<System.Boolean> evt)
    // Offset: 0x559C178
    void OnToggleValueChanged(::UnityEngine::UIElements::ChangeEvent_1<bool>* evt);
    // public System.Boolean HasChildren(System.Int32 id)
    // Offset: 0x559D500
    bool HasChildren(int id);
    // System.Boolean Exists(System.Int32 id)
    // Offset: 0x559D588
    bool Exists(int id);
    // public System.Boolean HasChildrenByIndex(System.Int32 index)
    // Offset: 0x559B5D0
    bool HasChildrenByIndex(int index);
    // public System.Collections.Generic.IEnumerable`1<System.Int32> GetChildrenIdsByIndex(System.Int32 index)
    // Offset: 0x559C0D4
    ::System::Collections::Generic::IEnumerable_1<int>* GetChildrenIdsByIndex(int index);
    // public System.Int32 GetChildIndexForId(System.Int32 id)
    // Offset: 0x559D5E0
    int GetChildIndexForId(int id);
    // System.Int32 GetIndentationDepth(System.Int32 id)
    // Offset: 0x559D960
    int GetIndentationDepth(int id);
    // System.Int32 GetIndentationDepthByIndex(System.Int32 index)
    // Offset: 0x559B4C4
    int GetIndentationDepthByIndex(int index);
    // System.Boolean CanChangeExpandedState(System.Int32 id)
    // Offset: 0x559D9C8
    bool CanChangeExpandedState(int id);
    // public System.Boolean IsExpanded(System.Int32 id)
    // Offset: 0x559D9D0
    bool IsExpanded(int id);
    // public System.Boolean IsExpandedByIndex(System.Int32 index)
    // Offset: 0x559B4FC
    bool IsExpandedByIndex(int index);
    // public System.Void ExpandItemByIndex(System.Int32 index, System.Boolean expandAllChildren, System.Boolean refresh)
    // Offset: 0x559C7F0
    void ExpandItemByIndex(int index, bool expandAllChildren, bool refresh);
    // public System.Void ExpandItem(System.Int32 id, System.Boolean expandAllChildren, System.Boolean refresh)
    // Offset: 0x559E070
    void ExpandItem(int id, bool expandAllChildren, bool refresh);
    // public System.Void CollapseItemByIndex(System.Int32 index, System.Boolean collapseAllChildren)
    // Offset: 0x559C2C0
    void CollapseItemByIndex(int index, bool collapseAllChildren);
    // public System.Void CollapseItem(System.Int32 id, System.Boolean collapseAllChildren)
    // Offset: 0x559E258
    void CollapseItem(int id, bool collapseAllChildren);
    // System.Void RegenerateWrappers()
    // Offset: 0x559AFC0
    void RegenerateWrappers();
    // private System.Void CreateWrappers(System.Collections.Generic.IEnumerable`1<System.Int32> treeViewItemIds, System.Int32 depth, ref System.Collections.Generic.List`1<UnityEngine.UIElements.TreeViewItemWrapper> wrappers)
    // Offset: 0x559DA34
    void CreateWrappers(::System::Collections::Generic::IEnumerable_1<int>* treeViewItemIds, int depth, ByRef<::System::Collections::Generic::List_1<::UnityEngine::UIElements::TreeViewItemWrapper>*> wrappers);
    // private System.Boolean IsIndexValid(System.Int32 index)
    // Offset: 0x559D4A0
    bool IsIndexValid(int index);
    // System.Void RaiseItemParentChanged(System.Int32 id, System.Int32 newParentId)
    // Offset: 0x559E3D4
    void RaiseItemParentChanged(int id, int newParentId);
    // static private System.Void .cctor()
    // Offset: 0x559E598
    static void _cctor();
    // public override System.Collections.IList get_itemsSource()
    // Offset: 0x559AAF8
    // Implemented from: UnityEngine.UIElements.CollectionViewController
    // Base method: System.Collections.IList CollectionViewController::get_itemsSource()
    ::System::Collections::IList* get_itemsSource();
    // public override System.Void set_itemsSource(System.Collections.IList value)
    // Offset: 0x559AB00
    // Implemented from: UnityEngine.UIElements.CollectionViewController
    // Base method: System.Void CollectionViewController::set_itemsSource(System.Collections.IList value)
    void set_itemsSource(::System::Collections::IList* value);
    // override System.Void InvokeMakeItem(UnityEngine.UIElements.ReusableCollectionItem reusableItem)
    // Offset: 0x559B088
    // Implemented from: UnityEngine.UIElements.CollectionViewController
    // Base method: System.Void CollectionViewController::InvokeMakeItem(UnityEngine.UIElements.ReusableCollectionItem reusableItem)
    void InvokeMakeItem(::UnityEngine::UIElements::ReusableCollectionItem* reusableItem);
    // override System.Void InvokeBindItem(UnityEngine.UIElements.ReusableCollectionItem reusableItem, System.Int32 index)
    // Offset: 0x559B3B4
    // Implemented from: UnityEngine.UIElements.CollectionViewController
    // Base method: System.Void CollectionViewController::InvokeBindItem(UnityEngine.UIElements.ReusableCollectionItem reusableItem, System.Int32 index)
    void InvokeBindItem(::UnityEngine::UIElements::ReusableCollectionItem* reusableItem, int index);
    // override System.Void InvokeDestroyItem(UnityEngine.UIElements.ReusableCollectionItem reusableItem)
    // Offset: 0x559B690
    // Implemented from: UnityEngine.UIElements.CollectionViewController
    // Base method: System.Void CollectionViewController::InvokeDestroyItem(UnityEngine.UIElements.ReusableCollectionItem reusableItem)
    void InvokeDestroyItem(::UnityEngine::UIElements::ReusableCollectionItem* reusableItem);
    // public override System.Int32 GetIndexForId(System.Int32 id)
    // Offset: 0x559D304
    // Implemented from: UnityEngine.UIElements.CollectionViewController
    // Base method: System.Int32 CollectionViewController::GetIndexForId(System.Int32 id)
    int GetIndexForId(int id);
    // public override System.Int32 GetIdForIndex(System.Int32 index)
    // Offset: 0x559D3FC
    // Implemented from: UnityEngine.UIElements.CollectionViewController
    // Base method: System.Int32 CollectionViewController::GetIdForIndex(System.Int32 index)
    int GetIdForIndex(int index);
    // protected System.Void .ctor()
    // Offset: 0x559E3F0
    // Implemented from: UnityEngine.UIElements.CollectionViewController
    // Base method: System.Void CollectionViewController::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseTreeViewController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseTreeViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseTreeViewController*, creationType>()));
    }
  }; // UnityEngine.UIElements.BaseTreeViewController
  #pragma pack(pop)
  static check_size<sizeof(BaseTreeViewController), 80 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::TreeViewItemWrapper>*)> __UnityEngine_UIElements_BaseTreeViewControllerSizeCheck;
  static_assert(sizeof(BaseTreeViewController) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::get_baseTreeView
// Il2CppName: get_baseTreeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::BaseTreeView* (UnityEngine::UIElements::BaseTreeViewController::*)()>(&UnityEngine::UIElements::BaseTreeViewController::get_baseTreeView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "get_baseTreeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::RebuildTree
// Il2CppName: RebuildTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)()>(&UnityEngine::UIElements::BaseTreeViewController::RebuildTree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "RebuildTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::GetRootItemIds
// Il2CppName: GetRootItemIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<int>* (UnityEngine::UIElements::BaseTreeViewController::*)()>(&UnityEngine::UIElements::BaseTreeViewController::GetRootItemIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "GetRootItemIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::GetAllItemIds
// Il2CppName: GetAllItemIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<int>* (UnityEngine::UIElements::BaseTreeViewController::*)(::System::Collections::Generic::IEnumerable_1<int>*)>(&UnityEngine::UIElements::BaseTreeViewController::GetAllItemIds)> {
  static const MethodInfo* get() {
    static auto* rootIds = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "GetAllItemIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rootIds});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::GetParentId
// Il2CppName: GetParentId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::BaseTreeViewController::*)(int)>(&UnityEngine::UIElements::BaseTreeViewController::GetParentId)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "GetParentId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::GetChildrenIds
// Il2CppName: GetChildrenIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<int>* (UnityEngine::UIElements::BaseTreeViewController::*)(int)>(&UnityEngine::UIElements::BaseTreeViewController::GetChildrenIds)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "GetChildrenIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::Move
// Il2CppName: Move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)(int, int, int, bool)>(&UnityEngine::UIElements::BaseTreeViewController::Move)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newParentId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* childIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rebuildTree = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "Move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, newParentId, childIndex, rebuildTree});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::PostInitRegistration
// Il2CppName: PostInitRegistration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)(::UnityEngine::UIElements::ReusableTreeViewItem*)>(&UnityEngine::UIElements::BaseTreeViewController::PostInitRegistration)> {
  static const MethodInfo* get() {
    static auto* treeItem = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ReusableTreeViewItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "PostInitRegistration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{treeItem});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::OnItemPointerUp
// Il2CppName: OnItemPointerUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)(::UnityEngine::UIElements::PointerUpEvent*)>(&UnityEngine::UIElements::BaseTreeViewController::OnItemPointerUp)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "PointerUpEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "OnItemPointerUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::OnToggleValueChanged
// Il2CppName: OnToggleValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)(::UnityEngine::UIElements::ChangeEvent_1<bool>*)>(&UnityEngine::UIElements::BaseTreeViewController::OnToggleValueChanged)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ChangeEvent`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "OnToggleValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::HasChildren
// Il2CppName: HasChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::BaseTreeViewController::*)(int)>(&UnityEngine::UIElements::BaseTreeViewController::HasChildren)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "HasChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::Exists
// Il2CppName: Exists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::BaseTreeViewController::*)(int)>(&UnityEngine::UIElements::BaseTreeViewController::Exists)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "Exists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::HasChildrenByIndex
// Il2CppName: HasChildrenByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::BaseTreeViewController::*)(int)>(&UnityEngine::UIElements::BaseTreeViewController::HasChildrenByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "HasChildrenByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::GetChildrenIdsByIndex
// Il2CppName: GetChildrenIdsByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<int>* (UnityEngine::UIElements::BaseTreeViewController::*)(int)>(&UnityEngine::UIElements::BaseTreeViewController::GetChildrenIdsByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "GetChildrenIdsByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::GetChildIndexForId
// Il2CppName: GetChildIndexForId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::BaseTreeViewController::*)(int)>(&UnityEngine::UIElements::BaseTreeViewController::GetChildIndexForId)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "GetChildIndexForId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::GetIndentationDepth
// Il2CppName: GetIndentationDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::BaseTreeViewController::*)(int)>(&UnityEngine::UIElements::BaseTreeViewController::GetIndentationDepth)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "GetIndentationDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::GetIndentationDepthByIndex
// Il2CppName: GetIndentationDepthByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::BaseTreeViewController::*)(int)>(&UnityEngine::UIElements::BaseTreeViewController::GetIndentationDepthByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "GetIndentationDepthByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::CanChangeExpandedState
// Il2CppName: CanChangeExpandedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::BaseTreeViewController::*)(int)>(&UnityEngine::UIElements::BaseTreeViewController::CanChangeExpandedState)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "CanChangeExpandedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::IsExpanded
// Il2CppName: IsExpanded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::BaseTreeViewController::*)(int)>(&UnityEngine::UIElements::BaseTreeViewController::IsExpanded)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "IsExpanded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::IsExpandedByIndex
// Il2CppName: IsExpandedByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::BaseTreeViewController::*)(int)>(&UnityEngine::UIElements::BaseTreeViewController::IsExpandedByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "IsExpandedByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::ExpandItemByIndex
// Il2CppName: ExpandItemByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)(int, bool, bool)>(&UnityEngine::UIElements::BaseTreeViewController::ExpandItemByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* expandAllChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* refresh = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "ExpandItemByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, expandAllChildren, refresh});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::ExpandItem
// Il2CppName: ExpandItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)(int, bool, bool)>(&UnityEngine::UIElements::BaseTreeViewController::ExpandItem)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* expandAllChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* refresh = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "ExpandItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, expandAllChildren, refresh});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::CollapseItemByIndex
// Il2CppName: CollapseItemByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)(int, bool)>(&UnityEngine::UIElements::BaseTreeViewController::CollapseItemByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* collapseAllChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "CollapseItemByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, collapseAllChildren});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::CollapseItem
// Il2CppName: CollapseItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)(int, bool)>(&UnityEngine::UIElements::BaseTreeViewController::CollapseItem)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* collapseAllChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "CollapseItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, collapseAllChildren});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::RegenerateWrappers
// Il2CppName: RegenerateWrappers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)()>(&UnityEngine::UIElements::BaseTreeViewController::RegenerateWrappers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "RegenerateWrappers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::CreateWrappers
// Il2CppName: CreateWrappers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)(::System::Collections::Generic::IEnumerable_1<int>*, int, ByRef<::System::Collections::Generic::List_1<::UnityEngine::UIElements::TreeViewItemWrapper>*>)>(&UnityEngine::UIElements::BaseTreeViewController::CreateWrappers)> {
  static const MethodInfo* get() {
    static auto* treeViewItemIds = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wrappers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TreeViewItemWrapper")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "CreateWrappers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{treeViewItemIds, depth, wrappers});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::IsIndexValid
// Il2CppName: IsIndexValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::BaseTreeViewController::*)(int)>(&UnityEngine::UIElements::BaseTreeViewController::IsIndexValid)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "IsIndexValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::RaiseItemParentChanged
// Il2CppName: RaiseItemParentChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)(int, int)>(&UnityEngine::UIElements::BaseTreeViewController::RaiseItemParentChanged)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newParentId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "RaiseItemParentChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, newParentId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::BaseTreeViewController::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::get_itemsSource
// Il2CppName: get_itemsSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IList* (UnityEngine::UIElements::BaseTreeViewController::*)()>(&UnityEngine::UIElements::BaseTreeViewController::get_itemsSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "get_itemsSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::set_itemsSource
// Il2CppName: set_itemsSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)(::System::Collections::IList*)>(&UnityEngine::UIElements::BaseTreeViewController::set_itemsSource)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Collections", "IList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "set_itemsSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::InvokeMakeItem
// Il2CppName: InvokeMakeItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)(::UnityEngine::UIElements::ReusableCollectionItem*)>(&UnityEngine::UIElements::BaseTreeViewController::InvokeMakeItem)> {
  static const MethodInfo* get() {
    static auto* reusableItem = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ReusableCollectionItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "InvokeMakeItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reusableItem});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::InvokeBindItem
// Il2CppName: InvokeBindItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)(::UnityEngine::UIElements::ReusableCollectionItem*, int)>(&UnityEngine::UIElements::BaseTreeViewController::InvokeBindItem)> {
  static const MethodInfo* get() {
    static auto* reusableItem = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ReusableCollectionItem")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "InvokeBindItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reusableItem, index});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::InvokeDestroyItem
// Il2CppName: InvokeDestroyItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseTreeViewController::*)(::UnityEngine::UIElements::ReusableCollectionItem*)>(&UnityEngine::UIElements::BaseTreeViewController::InvokeDestroyItem)> {
  static const MethodInfo* get() {
    static auto* reusableItem = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ReusableCollectionItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "InvokeDestroyItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reusableItem});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::GetIndexForId
// Il2CppName: GetIndexForId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::BaseTreeViewController::*)(int)>(&UnityEngine::UIElements::BaseTreeViewController::GetIndexForId)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "GetIndexForId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::GetIdForIndex
// Il2CppName: GetIdForIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::BaseTreeViewController::*)(int)>(&UnityEngine::UIElements::BaseTreeViewController::GetIdForIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseTreeViewController*), "GetIdForIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseTreeViewController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
