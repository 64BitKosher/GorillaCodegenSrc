// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.VisualElement
#include "UnityEngine/UIElements/VisualElement.hpp"
// Including type: UnityEngine.UIElements.ScheduledItem
#include "UnityEngine/UIElements/ScheduledItem.hpp"
// Including type: UnityEngine.UIElements.IVisualElementScheduledItem
#include "UnityEngine/UIElements/IVisualElementScheduledItem.hpp"
// Including type: UnityEngine.UIElements.IVisualElementPanelActivatable
#include "UnityEngine/UIElements/IVisualElementPanelActivatable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElementPanelActivator
  class VisualElementPanelActivator;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem*, "UnityEngine.UIElements", "VisualElement/BaseVisualElementScheduledItem");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.VisualElement/BaseVisualElementScheduledItem
  // [TokenAttribute] Offset: FFFFFFFF
  class VisualElement::BaseVisualElementScheduledItem : public ::UnityEngine::UIElements::ScheduledItem/*, public ::UnityEngine::UIElements::IVisualElementScheduledItem, public ::UnityEngine::UIElements::IVisualElementPanelActivatable*/ {
    public:
    public:
    // private UnityEngine.UIElements.VisualElement <element>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UIElements::VisualElement* element;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // public System.Boolean isScheduled
    // Size: 0x1
    // Offset: 0x40
    bool isScheduled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isScheduled and: m_Activator
    char __padding1[0x7] = {};
    // private UnityEngine.UIElements.VisualElementPanelActivator m_Activator
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::UIElements::VisualElementPanelActivator* m_Activator;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElementPanelActivator*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IVisualElementScheduledItem
    operator ::UnityEngine::UIElements::IVisualElementScheduledItem() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IVisualElementScheduledItem*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IVisualElementPanelActivatable
    operator ::UnityEngine::UIElements::IVisualElementPanelActivatable() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IVisualElementPanelActivatable*>(this);
    }
    // Get instance field reference: private UnityEngine.UIElements.VisualElement <element>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_$element$k__BackingField();
    // Get instance field reference: public System.Boolean isScheduled
    [[deprecated("Use field access instead!")]] bool& dyn_isScheduled();
    // Get instance field reference: private UnityEngine.UIElements.VisualElementPanelActivator m_Activator
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElementPanelActivator*& dyn_m_Activator();
    // public UnityEngine.UIElements.VisualElement get_element()
    // Offset: 0x56A3F38
    ::UnityEngine::UIElements::VisualElement* get_element();
    // private System.Void set_element(UnityEngine.UIElements.VisualElement value)
    // Offset: 0x56A3F40
    void set_element(::UnityEngine::UIElements::VisualElement* value);
    // protected System.Void .ctor(UnityEngine.UIElements.VisualElement handler)
    // Offset: 0x56A3F48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisualElement::BaseVisualElementScheduledItem* New_ctor(::UnityEngine::UIElements::VisualElement* handler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisualElement::BaseVisualElementScheduledItem*, creationType>(handler)));
    }
    // public UnityEngine.UIElements.IVisualElementScheduledItem StartingIn(System.Int64 delayMs)
    // Offset: 0x56A3FFC
    ::UnityEngine::UIElements::IVisualElementScheduledItem* StartingIn(int64_t delayMs);
    // public UnityEngine.UIElements.IVisualElementScheduledItem Every(System.Int64 intervalMs)
    // Offset: 0x56A4004
    ::UnityEngine::UIElements::IVisualElementScheduledItem* Every(int64_t intervalMs);
    // public System.Void Resume()
    // Offset: 0x56A40F4
    void Resume();
    // public System.Void Pause()
    // Offset: 0x56A4114
    void Pause();
    // public System.Void ExecuteLater(System.Int64 delayMs)
    // Offset: 0x56A4134
    void ExecuteLater(int64_t delayMs);
    // public System.Void OnPanelActivate()
    // Offset: 0x56A4170
    void OnPanelActivate();
    // public System.Void OnPanelDeactivate()
    // Offset: 0x56A4260
    void OnPanelDeactivate();
    // public System.Boolean CanBeActivated()
    // Offset: 0x56A433C
    bool CanBeActivated();
    // override System.Void OnItemUnscheduled()
    // Offset: 0x56A40B4
    // Implemented from: UnityEngine.UIElements.ScheduledItem
    // Base method: System.Void ScheduledItem::OnItemUnscheduled()
    void OnItemUnscheduled();
  }; // UnityEngine.UIElements.VisualElement/BaseVisualElementScheduledItem
  #pragma pack(pop)
  static check_size<sizeof(VisualElement::BaseVisualElementScheduledItem), 72 + sizeof(::UnityEngine::UIElements::VisualElementPanelActivator*)> __UnityEngine_UIElements_VisualElement_BaseVisualElementScheduledItemSizeCheck;
  static_assert(sizeof(VisualElement::BaseVisualElementScheduledItem) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::get_element
// Il2CppName: get_element
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::*)()>(&UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::get_element)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem*), "get_element", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::set_element
// Il2CppName: set_element
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::set_element)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem*), "set_element", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::StartingIn
// Il2CppName: StartingIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IVisualElementScheduledItem* (UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::*)(int64_t)>(&UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::StartingIn)> {
  static const MethodInfo* get() {
    static auto* delayMs = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem*), "StartingIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delayMs});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::Every
// Il2CppName: Every
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IVisualElementScheduledItem* (UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::*)(int64_t)>(&UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::Every)> {
  static const MethodInfo* get() {
    static auto* intervalMs = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem*), "Every", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{intervalMs});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::Resume
// Il2CppName: Resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::*)()>(&UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::Resume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem*), "Resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::*)()>(&UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::Pause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::ExecuteLater
// Il2CppName: ExecuteLater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::*)(int64_t)>(&UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::ExecuteLater)> {
  static const MethodInfo* get() {
    static auto* delayMs = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem*), "ExecuteLater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delayMs});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::OnPanelActivate
// Il2CppName: OnPanelActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::*)()>(&UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::OnPanelActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem*), "OnPanelActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::OnPanelDeactivate
// Il2CppName: OnPanelDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::*)()>(&UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::OnPanelDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem*), "OnPanelDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::CanBeActivated
// Il2CppName: CanBeActivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::*)()>(&UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::CanBeActivated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem*), "CanBeActivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::OnItemUnscheduled
// Il2CppName: OnItemUnscheduled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::*)()>(&UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem::OnItemUnscheduled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::BaseVisualElementScheduledItem*), "OnItemUnscheduled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
