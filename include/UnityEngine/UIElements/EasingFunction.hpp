// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.UIElements.EasingMode
#include "UnityEngine/UIElements/EasingMode.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: EasingFunction
  struct EasingFunction;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::EasingFunction, "UnityEngine.UIElements", "EasingFunction");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.EasingFunction
  // [TokenAttribute] Offset: FFFFFFFF
  struct EasingFunction/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::UIElements::EasingFunction>*/ {
    public:
    public:
    // private UnityEngine.UIElements.EasingMode m_Mode
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::UIElements::EasingMode m_Mode;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::EasingMode) == 0x4);
    public:
    // Creating value type constructor for type: EasingFunction
    constexpr EasingFunction(::UnityEngine::UIElements::EasingMode m_Mode_ = {}) noexcept : m_Mode{m_Mode_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::EasingFunction>
    operator ::System::IEquatable_1<::UnityEngine::UIElements::EasingFunction>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::EasingFunction>*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::UIElements::EasingMode
    constexpr operator ::UnityEngine::UIElements::EasingMode() const noexcept {
      return m_Mode;
    }
    // Get instance field reference: private UnityEngine.UIElements.EasingMode m_Mode
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::EasingMode& dyn_m_Mode();
    // public UnityEngine.UIElements.EasingMode get_mode()
    // Offset: 0x568EA78
    ::UnityEngine::UIElements::EasingMode get_mode();
    // public System.Void .ctor(UnityEngine.UIElements.EasingMode mode)
    // Offset: 0x568EA80
    // ABORTED: conflicts with another method.  EasingFunction(::UnityEngine::UIElements::EasingMode mode);
    // public System.Boolean Equals(UnityEngine.UIElements.EasingFunction other)
    // Offset: 0x568EA94
    bool Equals(::UnityEngine::UIElements::EasingFunction other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x568EAA4
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.String ToString()
    // Offset: 0x568EB1C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Int32 GetHashCode()
    // Offset: 0x568D7C0
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.UIElements.EasingFunction
  #pragma pack(pop)
  static check_size<sizeof(EasingFunction), 0 + sizeof(::UnityEngine::UIElements::EasingMode)> __UnityEngine_UIElements_EasingFunctionSizeCheck;
  static_assert(sizeof(EasingFunction) == 0x4);
  // static public System.Boolean op_Equality(UnityEngine.UIElements.EasingFunction lhs, UnityEngine.UIElements.EasingFunction rhs)
  // Offset: 0x568EA88
  bool operator ==(const ::UnityEngine::UIElements::EasingFunction& lhs, const ::UnityEngine::UIElements::EasingFunction& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::EasingFunction::get_mode
// Il2CppName: get_mode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::EasingMode (UnityEngine::UIElements::EasingFunction::*)()>(&UnityEngine::UIElements::EasingFunction::get_mode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EasingFunction), "get_mode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EasingFunction::EasingFunction
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::EasingFunction::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::EasingFunction::*)(::UnityEngine::UIElements::EasingFunction)>(&UnityEngine::UIElements::EasingFunction::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EasingFunction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EasingFunction), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EasingFunction::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::EasingFunction::*)(::Il2CppObject*)>(&UnityEngine::UIElements::EasingFunction::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EasingFunction), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EasingFunction::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::UIElements::EasingFunction::*)()>(&UnityEngine::UIElements::EasingFunction::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EasingFunction), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EasingFunction::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::EasingFunction::*)()>(&UnityEngine::UIElements::EasingFunction::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EasingFunction), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EasingFunction::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
