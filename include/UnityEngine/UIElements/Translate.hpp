// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.UIElements.Length
#include "UnityEngine/UIElements/Length.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Translate
  struct Translate;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::Translate, "UnityEngine.UIElements", "Translate");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x15
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.Translate
  // [TokenAttribute] Offset: FFFFFFFF
  struct Translate/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::UIElements::Translate>*/ {
    public:
    public:
    // private UnityEngine.UIElements.Length m_X
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::Length m_X;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // private UnityEngine.UIElements.Length m_Y
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::UIElements::Length m_Y;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // private System.Single m_Z
    // Size: 0x4
    // Offset: 0x10
    float m_Z;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_isNone
    // Size: 0x1
    // Offset: 0x14
    bool m_isNone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: Translate
    constexpr Translate(::UnityEngine::UIElements::Length m_X_ = {}, ::UnityEngine::UIElements::Length m_Y_ = {}, float m_Z_ = {}, bool m_isNone_ = {}) noexcept : m_X{m_X_}, m_Y{m_Y_}, m_Z{m_Z_}, m_isNone{m_isNone_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::Translate>
    operator ::System::IEquatable_1<::UnityEngine::UIElements::Translate>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::Translate>*>(this);
    }
    // Get instance field reference: private UnityEngine.UIElements.Length m_X
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_m_X();
    // Get instance field reference: private UnityEngine.UIElements.Length m_Y
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_m_Y();
    // Get instance field reference: private System.Single m_Z
    [[deprecated("Use field access instead!")]] float& dyn_m_Z();
    // Get instance field reference: private System.Boolean m_isNone
    [[deprecated("Use field access instead!")]] bool& dyn_m_isNone();
    // public System.Void .ctor(UnityEngine.UIElements.Length x, UnityEngine.UIElements.Length y, System.Single z)
    // Offset: 0x56AB014
    Translate(::UnityEngine::UIElements::Length x, ::UnityEngine::UIElements::Length y, float z);
    // static public UnityEngine.UIElements.Translate None()
    // Offset: 0x56AA9F8
    static ::UnityEngine::UIElements::Translate None();
    // public UnityEngine.UIElements.Length get_x()
    // Offset: 0x56AB024
    ::UnityEngine::UIElements::Length get_x();
    // public System.Void set_x(UnityEngine.UIElements.Length value)
    // Offset: 0x56AB02C
    void set_x(::UnityEngine::UIElements::Length value);
    // public UnityEngine.UIElements.Length get_y()
    // Offset: 0x56AB034
    ::UnityEngine::UIElements::Length get_y();
    // public System.Void set_y(UnityEngine.UIElements.Length value)
    // Offset: 0x56AB03C
    void set_y(::UnityEngine::UIElements::Length value);
    // public System.Single get_z()
    // Offset: 0x56AB044
    float get_z();
    // public System.Boolean Equals(UnityEngine.UIElements.Translate other)
    // Offset: 0x56AB0C4
    bool Equals(::UnityEngine::UIElements::Translate other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x56AB140
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x56A6844
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x56AB1D0
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.UIElements.Translate
  #pragma pack(pop)
  static check_size<sizeof(Translate), 20 + sizeof(bool)> __UnityEngine_UIElements_TranslateSizeCheck;
  static_assert(sizeof(Translate) == 0x15);
  // static public System.Boolean op_Equality(UnityEngine.UIElements.Translate lhs, UnityEngine.UIElements.Translate rhs)
  // Offset: 0x56A6540
  bool operator ==(const ::UnityEngine::UIElements::Translate& lhs, const ::UnityEngine::UIElements::Translate& rhs);
  // static public System.Boolean op_Inequality(UnityEngine.UIElements.Translate lhs, UnityEngine.UIElements.Translate rhs)
  // Offset: 0x56AB04C
  bool operator !=(const ::UnityEngine::UIElements::Translate& lhs, const ::UnityEngine::UIElements::Translate& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::Translate::Translate
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::Translate::None
// Il2CppName: None
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Translate (*)()>(&UnityEngine::UIElements::Translate::None)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Translate), "None", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Translate::get_x
// Il2CppName: get_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Length (UnityEngine::UIElements::Translate::*)()>(&UnityEngine::UIElements::Translate::get_x)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Translate), "get_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Translate::set_x
// Il2CppName: set_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Translate::*)(::UnityEngine::UIElements::Length)>(&UnityEngine::UIElements::Translate::set_x)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Length")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Translate), "set_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Translate::get_y
// Il2CppName: get_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Length (UnityEngine::UIElements::Translate::*)()>(&UnityEngine::UIElements::Translate::get_y)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Translate), "get_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Translate::set_y
// Il2CppName: set_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Translate::*)(::UnityEngine::UIElements::Length)>(&UnityEngine::UIElements::Translate::set_y)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Length")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Translate), "set_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Translate::get_z
// Il2CppName: get_z
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::Translate::*)()>(&UnityEngine::UIElements::Translate::get_z)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Translate), "get_z", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Translate::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::Translate::*)(::UnityEngine::UIElements::Translate)>(&UnityEngine::UIElements::Translate::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Translate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Translate), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Translate::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::Translate::*)(::Il2CppObject*)>(&UnityEngine::UIElements::Translate::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Translate), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Translate::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::Translate::*)()>(&UnityEngine::UIElements::Translate::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Translate), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Translate::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::UIElements::Translate::*)()>(&UnityEngine::UIElements::Translate::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Translate), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Translate::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::UIElements::Translate::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
