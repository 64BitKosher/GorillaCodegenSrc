// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.IFocusRing
#include "UnityEngine/UIElements/IFocusRing.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: VisualElementFocusRing
  class VisualElementFocusRing;
  // Forward declaring type: FocusChangeDirection
  class FocusChangeDirection;
  // Forward declaring type: FocusController
  class FocusController;
  // Forward declaring type: Focusable
  class Focusable;
  // Forward declaring type: EventBase
  class EventBase;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: NavigateFocusRing
  class NavigateFocusRing;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::NavigateFocusRing);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::NavigateFocusRing*, "UnityEngine.UIElements", "NavigateFocusRing");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.NavigateFocusRing
  // [TokenAttribute] Offset: FFFFFFFF
  class NavigateFocusRing : public ::Il2CppObject/*, public ::UnityEngine::UIElements::IFocusRing*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection
    class ChangeDirection;
    // Nested type: ::UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal
    struct FocusableHierarchyTraversal;
    public:
    // private readonly UnityEngine.UIElements.VisualElement m_Root
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::VisualElement* m_Root;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private readonly UnityEngine.UIElements.VisualElementFocusRing m_Ring
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::VisualElementFocusRing* m_Ring;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElementFocusRing*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IFocusRing
    operator ::UnityEngine::UIElements::IFocusRing() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IFocusRing*>(this);
    }
    // Get static field: static public readonly UnityEngine.UIElements.NavigateFocusRing/ChangeDirection Left
    static ::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection* _get_Left();
    // Set static field: static public readonly UnityEngine.UIElements.NavigateFocusRing/ChangeDirection Left
    static void _set_Left(::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection* value);
    // Get static field: static public readonly UnityEngine.UIElements.NavigateFocusRing/ChangeDirection Right
    static ::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection* _get_Right();
    // Set static field: static public readonly UnityEngine.UIElements.NavigateFocusRing/ChangeDirection Right
    static void _set_Right(::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection* value);
    // Get static field: static public readonly UnityEngine.UIElements.NavigateFocusRing/ChangeDirection Up
    static ::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection* _get_Up();
    // Set static field: static public readonly UnityEngine.UIElements.NavigateFocusRing/ChangeDirection Up
    static void _set_Up(::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection* value);
    // Get static field: static public readonly UnityEngine.UIElements.NavigateFocusRing/ChangeDirection Down
    static ::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection* _get_Down();
    // Set static field: static public readonly UnityEngine.UIElements.NavigateFocusRing/ChangeDirection Down
    static void _set_Down(::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection* value);
    // Get static field: static public readonly UnityEngine.UIElements.FocusChangeDirection Next
    static ::UnityEngine::UIElements::FocusChangeDirection* _get_Next();
    // Set static field: static public readonly UnityEngine.UIElements.FocusChangeDirection Next
    static void _set_Next(::UnityEngine::UIElements::FocusChangeDirection* value);
    // Get static field: static public readonly UnityEngine.UIElements.FocusChangeDirection Previous
    static ::UnityEngine::UIElements::FocusChangeDirection* _get_Previous();
    // Set static field: static public readonly UnityEngine.UIElements.FocusChangeDirection Previous
    static void _set_Previous(::UnityEngine::UIElements::FocusChangeDirection* value);
    // Get instance field reference: private readonly UnityEngine.UIElements.VisualElement m_Root
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_Root();
    // Get instance field reference: private readonly UnityEngine.UIElements.VisualElementFocusRing m_Ring
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElementFocusRing*& dyn_m_Ring();
    // private UnityEngine.UIElements.FocusController get_focusController()
    // Offset: 0x565AE64
    ::UnityEngine::UIElements::FocusController* get_focusController();
    // public System.Void .ctor(UnityEngine.UIElements.VisualElement root)
    // Offset: 0x565AE88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavigateFocusRing* New_ctor(::UnityEngine::UIElements::VisualElement* root) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::NavigateFocusRing::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavigateFocusRing*, creationType>(root)));
    }
    // public UnityEngine.UIElements.FocusChangeDirection GetFocusChangeDirection(UnityEngine.UIElements.Focusable currentFocusable, UnityEngine.UIElements.EventBase e)
    // Offset: 0x565AF18
    ::UnityEngine::UIElements::FocusChangeDirection* GetFocusChangeDirection(::UnityEngine::UIElements::Focusable* currentFocusable, ::UnityEngine::UIElements::EventBase* e);
    // public UnityEngine.UIElements.Focusable GetNextFocusable(UnityEngine.UIElements.Focusable currentFocusable, UnityEngine.UIElements.FocusChangeDirection direction)
    // Offset: 0x565B27C
    ::UnityEngine::UIElements::Focusable* GetNextFocusable(::UnityEngine::UIElements::Focusable* currentFocusable, ::UnityEngine::UIElements::FocusChangeDirection* direction);
    // private UnityEngine.UIElements.Focusable GetNextFocusable2D(UnityEngine.UIElements.Focusable currentFocusable, UnityEngine.UIElements.NavigateFocusRing/ChangeDirection direction)
    // Offset: 0x565B3D0
    ::UnityEngine::UIElements::Focusable* GetNextFocusable2D(::UnityEngine::UIElements::Focusable* currentFocusable, ::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection* direction);
    // static private System.Boolean IsActive(UnityEngine.UIElements.VisualElement v)
    // Offset: 0x565B904
    static bool IsActive(::UnityEngine::UIElements::VisualElement* v);
    // static private System.Boolean IsNavigable(UnityEngine.UIElements.Focusable focusable)
    // Offset: 0x565B9DC
    static bool IsNavigable(::UnityEngine::UIElements::Focusable* focusable);
    // static private System.Void .cctor()
    // Offset: 0x565BA2C
    static void _cctor();
  }; // UnityEngine.UIElements.NavigateFocusRing
  #pragma pack(pop)
  static check_size<sizeof(NavigateFocusRing), 24 + sizeof(::UnityEngine::UIElements::VisualElementFocusRing*)> __UnityEngine_UIElements_NavigateFocusRingSizeCheck;
  static_assert(sizeof(NavigateFocusRing) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigateFocusRing::get_focusController
// Il2CppName: get_focusController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::FocusController* (UnityEngine::UIElements::NavigateFocusRing::*)()>(&UnityEngine::UIElements::NavigateFocusRing::get_focusController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigateFocusRing*), "get_focusController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigateFocusRing::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigateFocusRing::GetFocusChangeDirection
// Il2CppName: GetFocusChangeDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::FocusChangeDirection* (UnityEngine::UIElements::NavigateFocusRing::*)(::UnityEngine::UIElements::Focusable*, ::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::NavigateFocusRing::GetFocusChangeDirection)> {
  static const MethodInfo* get() {
    static auto* currentFocusable = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigateFocusRing*), "GetFocusChangeDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentFocusable, e});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigateFocusRing::GetNextFocusable
// Il2CppName: GetNextFocusable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Focusable* (UnityEngine::UIElements::NavigateFocusRing::*)(::UnityEngine::UIElements::Focusable*, ::UnityEngine::UIElements::FocusChangeDirection*)>(&UnityEngine::UIElements::NavigateFocusRing::GetNextFocusable)> {
  static const MethodInfo* get() {
    static auto* currentFocusable = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "FocusChangeDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigateFocusRing*), "GetNextFocusable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentFocusable, direction});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigateFocusRing::GetNextFocusable2D
// Il2CppName: GetNextFocusable2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Focusable* (UnityEngine::UIElements::NavigateFocusRing::*)(::UnityEngine::UIElements::Focusable*, ::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection*)>(&UnityEngine::UIElements::NavigateFocusRing::GetNextFocusable2D)> {
  static const MethodInfo* get() {
    static auto* currentFocusable = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "NavigateFocusRing/ChangeDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigateFocusRing*), "GetNextFocusable2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentFocusable, direction});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigateFocusRing::IsActive
// Il2CppName: IsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::NavigateFocusRing::IsActive)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigateFocusRing*), "IsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigateFocusRing::IsNavigable
// Il2CppName: IsNavigable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::UIElements::Focusable*)>(&UnityEngine::UIElements::NavigateFocusRing::IsNavigable)> {
  static const MethodInfo* get() {
    static auto* focusable = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigateFocusRing*), "IsNavigable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focusable});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigateFocusRing::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::NavigateFocusRing::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigateFocusRing*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
