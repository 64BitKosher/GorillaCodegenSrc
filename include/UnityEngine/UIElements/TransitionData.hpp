// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.IStyleDataGroup`1
#include "UnityEngine/UIElements/IStyleDataGroup_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.UIElements.TimeValue
#include "UnityEngine/UIElements/TimeValue.hpp"
// Including type: UnityEngine.UIElements.StylePropertyName
#include "UnityEngine/UIElements/StylePropertyName.hpp"
// Including type: UnityEngine.UIElements.EasingFunction
#include "UnityEngine/UIElements/EasingFunction.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TransitionData
  struct TransitionData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::TransitionData, "UnityEngine.UIElements", "TransitionData");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.TransitionData
  // [TokenAttribute] Offset: FFFFFFFF
  struct TransitionData/*, public ::System::ValueType, public ::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::TransitionData>, public ::System::IEquatable_1<::UnityEngine::UIElements::TransitionData>*/ {
    public:
    public:
    // public System.Collections.Generic.List`1<UnityEngine.UIElements.TimeValue> transitionDelay
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TimeValue>* transitionDelay;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::TimeValue>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.UIElements.TimeValue> transitionDuration
    // Size: 0x8
    // Offset: 0x8
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TimeValue>* transitionDuration;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::TimeValue>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.UIElements.StylePropertyName> transitionProperty
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>* transitionProperty;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.UIElements.EasingFunction> transitionTimingFunction
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::EasingFunction>* transitionTimingFunction;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::EasingFunction>*) == 0x8);
    public:
    // Creating value type constructor for type: TransitionData
    constexpr TransitionData(::System::Collections::Generic::List_1<::UnityEngine::UIElements::TimeValue>* transitionDelay_ = {}, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TimeValue>* transitionDuration_ = {}, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>* transitionProperty_ = {}, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::EasingFunction>* transitionTimingFunction_ = {}) noexcept : transitionDelay{transitionDelay_}, transitionDuration{transitionDuration_}, transitionProperty{transitionProperty_}, transitionTimingFunction{transitionTimingFunction_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::TransitionData>
    operator ::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::TransitionData>() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::TransitionData>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::TransitionData>
    operator ::System::IEquatable_1<::UnityEngine::UIElements::TransitionData>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::TransitionData>*>(this);
    }
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.UIElements.TimeValue> transitionDelay
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TimeValue>*& dyn_transitionDelay();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.UIElements.TimeValue> transitionDuration
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TimeValue>*& dyn_transitionDuration();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.UIElements.StylePropertyName> transitionProperty
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>*& dyn_transitionProperty();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.UIElements.EasingFunction> transitionTimingFunction
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::EasingFunction>*& dyn_transitionTimingFunction();
    // public UnityEngine.UIElements.TransitionData Copy()
    // Offset: 0x56A68B8
    ::UnityEngine::UIElements::TransitionData Copy();
    // public System.Void CopyFrom(ref UnityEngine.UIElements.TransitionData other)
    // Offset: 0x56A6A50
    void CopyFrom(ByRef<::UnityEngine::UIElements::TransitionData> other);
    // public System.Boolean Equals(UnityEngine.UIElements.TransitionData other)
    // Offset: 0x56A6BFC
    bool Equals(::UnityEngine::UIElements::TransitionData other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x56A6C48
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x56A6CF8
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.UIElements.TransitionData
  #pragma pack(pop)
  static check_size<sizeof(TransitionData), 24 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::EasingFunction>*)> __UnityEngine_UIElements_TransitionDataSizeCheck;
  static_assert(sizeof(TransitionData) == 0x20);
  // static public System.Boolean op_Equality(UnityEngine.UIElements.TransitionData lhs, UnityEngine.UIElements.TransitionData rhs)
  // Offset: 0x56A6BB0
  bool operator ==(const ::UnityEngine::UIElements::TransitionData& lhs, const ::UnityEngine::UIElements::TransitionData& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::TransitionData::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::TransitionData (UnityEngine::UIElements::TransitionData::*)()>(&UnityEngine::UIElements::TransitionData::Copy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransitionData), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransitionData::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TransitionData::*)(ByRef<::UnityEngine::UIElements::TransitionData>)>(&UnityEngine::UIElements::TransitionData::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TransitionData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransitionData), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransitionData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::TransitionData::*)(::UnityEngine::UIElements::TransitionData)>(&UnityEngine::UIElements::TransitionData::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TransitionData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransitionData), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransitionData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::TransitionData::*)(::Il2CppObject*)>(&UnityEngine::UIElements::TransitionData::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransitionData), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransitionData::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::TransitionData::*)()>(&UnityEngine::UIElements::TransitionData::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TransitionData), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TransitionData::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
