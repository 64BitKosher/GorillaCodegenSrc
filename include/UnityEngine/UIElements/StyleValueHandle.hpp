// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.StyleValueType
#include "UnityEngine/UIElements/StyleValueType.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: StyleValueHandle
  struct StyleValueHandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::StyleValueHandle, "UnityEngine.UIElements", "StyleValueHandle");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.StyleValueHandle
  // [TokenAttribute] Offset: FFFFFFFF
  struct StyleValueHandle/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.UIElements.StyleValueType m_ValueType
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::UIElements::StyleValueType m_ValueType;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleValueType) == 0x4);
    // System.Int32 valueIndex
    // Size: 0x4
    // Offset: 0x4
    int valueIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: StyleValueHandle
    constexpr StyleValueHandle(::UnityEngine::UIElements::StyleValueType m_ValueType_ = {}, int valueIndex_ = {}) noexcept : m_ValueType{m_ValueType_}, valueIndex{valueIndex_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private UnityEngine.UIElements.StyleValueType m_ValueType
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleValueType& dyn_m_ValueType();
    // Get instance field reference: System.Int32 valueIndex
    [[deprecated("Use field access instead!")]] int& dyn_valueIndex();
    // public UnityEngine.UIElements.StyleValueType get_valueType()
    // Offset: 0x56A48E4
    ::UnityEngine::UIElements::StyleValueType get_valueType();
    // System.Void set_valueType(UnityEngine.UIElements.StyleValueType value)
    // Offset: 0x56B26A8
    void set_valueType(::UnityEngine::UIElements::StyleValueType value);
  }; // UnityEngine.UIElements.StyleValueHandle
  #pragma pack(pop)
  static check_size<sizeof(StyleValueHandle), 4 + sizeof(int)> __UnityEngine_UIElements_StyleValueHandleSizeCheck;
  static_assert(sizeof(StyleValueHandle) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleValueHandle::get_valueType
// Il2CppName: get_valueType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::StyleValueType (UnityEngine::UIElements::StyleValueHandle::*)()>(&UnityEngine::UIElements::StyleValueHandle::get_valueType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StyleValueHandle), "get_valueType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleValueHandle::set_valueType
// Il2CppName: set_valueType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::StyleValueHandle::*)(::UnityEngine::UIElements::StyleValueType)>(&UnityEngine::UIElements::StyleValueHandle::set_valueType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "StyleValueType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StyleValueHandle), "set_valueType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
