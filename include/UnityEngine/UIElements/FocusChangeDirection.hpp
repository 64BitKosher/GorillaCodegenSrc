// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: FocusController
  class FocusController;
  // Forward declaring type: Focusable
  class Focusable;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: FocusChangeDirection
  class FocusChangeDirection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::FocusChangeDirection);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::FocusChangeDirection*, "UnityEngine.UIElements", "FocusChangeDirection");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.FocusChangeDirection
  // [TokenAttribute] Offset: FFFFFFFF
  class FocusChangeDirection : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private readonly System.Int32 m_Value
    // Size: 0x4
    // Offset: 0x10
    int m_Value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return m_Value;
    }
    // Get static field: static private readonly UnityEngine.UIElements.FocusChangeDirection <unspecified>k__BackingField
    static ::UnityEngine::UIElements::FocusChangeDirection* _get_$unspecified$k__BackingField();
    // Set static field: static private readonly UnityEngine.UIElements.FocusChangeDirection <unspecified>k__BackingField
    static void _set_$unspecified$k__BackingField(::UnityEngine::UIElements::FocusChangeDirection* value);
    // Get static field: static private readonly UnityEngine.UIElements.FocusChangeDirection <none>k__BackingField
    static ::UnityEngine::UIElements::FocusChangeDirection* _get_$none$k__BackingField();
    // Set static field: static private readonly UnityEngine.UIElements.FocusChangeDirection <none>k__BackingField
    static void _set_$none$k__BackingField(::UnityEngine::UIElements::FocusChangeDirection* value);
    // Get static field: static private readonly UnityEngine.UIElements.FocusChangeDirection <lastValue>k__BackingField
    static ::UnityEngine::UIElements::FocusChangeDirection* _get_$lastValue$k__BackingField();
    // Set static field: static private readonly UnityEngine.UIElements.FocusChangeDirection <lastValue>k__BackingField
    static void _set_$lastValue$k__BackingField(::UnityEngine::UIElements::FocusChangeDirection* value);
    // Get instance field reference: private readonly System.Int32 m_Value
    [[deprecated("Use field access instead!")]] int& dyn_m_Value();
    // static public UnityEngine.UIElements.FocusChangeDirection get_unspecified()
    // Offset: 0x5659438
    static ::UnityEngine::UIElements::FocusChangeDirection* get_unspecified();
    // static public UnityEngine.UIElements.FocusChangeDirection get_none()
    // Offset: 0x5659490
    static ::UnityEngine::UIElements::FocusChangeDirection* get_none();
    // static protected UnityEngine.UIElements.FocusChangeDirection get_lastValue()
    // Offset: 0x56594E8
    static ::UnityEngine::UIElements::FocusChangeDirection* get_lastValue();
    // protected System.Void .ctor(System.Int32 value)
    // Offset: 0x5659540
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FocusChangeDirection* New_ctor(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::FocusChangeDirection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FocusChangeDirection*, creationType>(value)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x5659574
    void System_IDisposable_Dispose();
    // protected System.Void Dispose()
    // Offset: 0x5659580
    void Dispose();
    // System.Void ApplyTo(UnityEngine.UIElements.FocusController focusController, UnityEngine.UIElements.Focusable f)
    // Offset: 0x5659584
    void ApplyTo(::UnityEngine::UIElements::FocusController* focusController, ::UnityEngine::UIElements::Focusable* f);
    // static private System.Void .cctor()
    // Offset: 0x565986C
    static void _cctor();
  }; // UnityEngine.UIElements.FocusChangeDirection
  #pragma pack(pop)
  static check_size<sizeof(FocusChangeDirection), 16 + sizeof(int)> __UnityEngine_UIElements_FocusChangeDirectionSizeCheck;
  static_assert(sizeof(FocusChangeDirection) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusChangeDirection::get_unspecified
// Il2CppName: get_unspecified
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::FocusChangeDirection* (*)()>(&UnityEngine::UIElements::FocusChangeDirection::get_unspecified)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusChangeDirection*), "get_unspecified", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusChangeDirection::get_none
// Il2CppName: get_none
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::FocusChangeDirection* (*)()>(&UnityEngine::UIElements::FocusChangeDirection::get_none)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusChangeDirection*), "get_none", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusChangeDirection::get_lastValue
// Il2CppName: get_lastValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::FocusChangeDirection* (*)()>(&UnityEngine::UIElements::FocusChangeDirection::get_lastValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusChangeDirection*), "get_lastValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusChangeDirection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusChangeDirection::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusChangeDirection::*)()>(&UnityEngine::UIElements::FocusChangeDirection::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusChangeDirection*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusChangeDirection::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusChangeDirection::*)()>(&UnityEngine::UIElements::FocusChangeDirection::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusChangeDirection*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusChangeDirection::ApplyTo
// Il2CppName: ApplyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::FocusChangeDirection::*)(::UnityEngine::UIElements::FocusController*, ::UnityEngine::UIElements::Focusable*)>(&UnityEngine::UIElements::FocusChangeDirection::ApplyTo)> {
  static const MethodInfo* get() {
    static auto* focusController = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "FocusController")->byval_arg;
    static auto* f = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Focusable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusChangeDirection*), "ApplyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focusController, f});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::FocusChangeDirection::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::FocusChangeDirection::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::FocusChangeDirection*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
