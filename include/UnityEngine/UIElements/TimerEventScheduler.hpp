// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.IScheduler
#include "UnityEngine/UIElements/IScheduler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: ScheduledItem
  class ScheduledItem;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TimerEventScheduler
  class TimerEventScheduler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::TimerEventScheduler);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::TimerEventScheduler*, "UnityEngine.UIElements", "TimerEventScheduler");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.TimerEventScheduler
  // [TokenAttribute] Offset: FFFFFFFF
  class TimerEventScheduler : public ::Il2CppObject/*, public ::UnityEngine::UIElements::IScheduler*/ {
    public:
    public:
    // private readonly System.Collections.Generic.List`1<UnityEngine.UIElements.ScheduledItem> m_ScheduledItems
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::ScheduledItem*>* m_ScheduledItems;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::ScheduledItem*>*) == 0x8);
    // private System.Boolean m_TransactionMode
    // Size: 0x1
    // Offset: 0x18
    bool m_TransactionMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_TransactionMode and: m_ScheduleTransactions
    char __padding1[0x7] = {};
    // private readonly System.Collections.Generic.List`1<UnityEngine.UIElements.ScheduledItem> m_ScheduleTransactions
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::ScheduledItem*>* m_ScheduleTransactions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::ScheduledItem*>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<UnityEngine.UIElements.ScheduledItem> m_UnscheduleTransactions
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::ScheduledItem*>* m_UnscheduleTransactions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::ScheduledItem*>*) == 0x8);
    // System.Boolean disableThrottling
    // Size: 0x1
    // Offset: 0x30
    bool disableThrottling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disableThrottling and: m_LastUpdatedIndex
    char __padding4[0x3] = {};
    // private System.Int32 m_LastUpdatedIndex
    // Size: 0x4
    // Offset: 0x34
    int m_LastUpdatedIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IScheduler
    operator ::UnityEngine::UIElements::IScheduler() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IScheduler*>(this);
    }
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.UIElements.ScheduledItem> m_ScheduledItems
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::ScheduledItem*>*& dyn_m_ScheduledItems();
    // Get instance field reference: private System.Boolean m_TransactionMode
    [[deprecated("Use field access instead!")]] bool& dyn_m_TransactionMode();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.UIElements.ScheduledItem> m_ScheduleTransactions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::ScheduledItem*>*& dyn_m_ScheduleTransactions();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<UnityEngine.UIElements.ScheduledItem> m_UnscheduleTransactions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::ScheduledItem*>*& dyn_m_UnscheduleTransactions();
    // Get instance field reference: System.Boolean disableThrottling
    [[deprecated("Use field access instead!")]] bool& dyn_disableThrottling();
    // Get instance field reference: private System.Int32 m_LastUpdatedIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_LastUpdatedIndex();
    // public System.Void Schedule(UnityEngine.UIElements.ScheduledItem item)
    // Offset: 0x568B570
    void Schedule(::UnityEngine::UIElements::ScheduledItem* item);
    // private System.Boolean RemovedScheduledItemAt(System.Int32 index)
    // Offset: 0x568B73C
    bool RemovedScheduledItemAt(int index);
    // public System.Void Unschedule(UnityEngine.UIElements.ScheduledItem item)
    // Offset: 0x568B7B8
    void Unschedule(::UnityEngine::UIElements::ScheduledItem* item);
    // private System.Boolean PrivateUnSchedule(UnityEngine.UIElements.ScheduledItem sItem)
    // Offset: 0x568B948
    bool PrivateUnSchedule(::UnityEngine::UIElements::ScheduledItem* sItem);
    // public System.Void UpdateScheduledEvents()
    // Offset: 0x568B9E8
    void UpdateScheduledEvents();
    // public System.Void .ctor()
    // Offset: 0x568BCFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimerEventScheduler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TimerEventScheduler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimerEventScheduler*, creationType>()));
    }
  }; // UnityEngine.UIElements.TimerEventScheduler
  #pragma pack(pop)
  static check_size<sizeof(TimerEventScheduler), 52 + sizeof(int)> __UnityEngine_UIElements_TimerEventSchedulerSizeCheck;
  static_assert(sizeof(TimerEventScheduler) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::TimerEventScheduler::Schedule
// Il2CppName: Schedule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TimerEventScheduler::*)(::UnityEngine::UIElements::ScheduledItem*)>(&UnityEngine::UIElements::TimerEventScheduler::Schedule)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ScheduledItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TimerEventScheduler*), "Schedule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TimerEventScheduler::RemovedScheduledItemAt
// Il2CppName: RemovedScheduledItemAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::TimerEventScheduler::*)(int)>(&UnityEngine::UIElements::TimerEventScheduler::RemovedScheduledItemAt)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TimerEventScheduler*), "RemovedScheduledItemAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TimerEventScheduler::Unschedule
// Il2CppName: Unschedule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TimerEventScheduler::*)(::UnityEngine::UIElements::ScheduledItem*)>(&UnityEngine::UIElements::TimerEventScheduler::Unschedule)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ScheduledItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TimerEventScheduler*), "Unschedule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TimerEventScheduler::PrivateUnSchedule
// Il2CppName: PrivateUnSchedule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::TimerEventScheduler::*)(::UnityEngine::UIElements::ScheduledItem*)>(&UnityEngine::UIElements::TimerEventScheduler::PrivateUnSchedule)> {
  static const MethodInfo* get() {
    static auto* sItem = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ScheduledItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TimerEventScheduler*), "PrivateUnSchedule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sItem});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TimerEventScheduler::UpdateScheduledEvents
// Il2CppName: UpdateScheduledEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TimerEventScheduler::*)()>(&UnityEngine::UIElements::TimerEventScheduler::UpdateScheduledEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TimerEventScheduler*), "UpdateScheduledEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TimerEventScheduler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
