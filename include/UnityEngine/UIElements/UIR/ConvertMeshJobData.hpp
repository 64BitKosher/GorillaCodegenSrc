// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: ConvertMeshJobData
  struct ConvertMeshJobData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::ConvertMeshJobData, "UnityEngine.UIElements.UIR", "ConvertMeshJobData");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x94
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.UIR.ConvertMeshJobData
  // [TokenAttribute] Offset: FFFFFFFF
  struct ConvertMeshJobData/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr vertSrc
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr vertSrc;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr vertDst
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr vertDst;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.Int32 vertCount
    // Size: 0x4
    // Offset: 0x10
    int vertCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Matrix4x4 transform
    // Size: 0x40
    // Offset: 0x14
    ::UnityEngine::Matrix4x4 transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // public System.Int32 transformUVs
    // Size: 0x4
    // Offset: 0x54
    int transformUVs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Color32 xformClipPages
    // Size: 0x4
    // Offset: 0x58
    ::UnityEngine::Color32 xformClipPages;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // public UnityEngine.Color32 ids
    // Size: 0x4
    // Offset: 0x5C
    ::UnityEngine::Color32 ids;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // public UnityEngine.Color32 addFlags
    // Size: 0x4
    // Offset: 0x60
    ::UnityEngine::Color32 addFlags;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // public UnityEngine.Color32 opacityPage
    // Size: 0x4
    // Offset: 0x64
    ::UnityEngine::Color32 opacityPage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // public UnityEngine.Color32 textCoreSettingsPage
    // Size: 0x4
    // Offset: 0x68
    ::UnityEngine::Color32 textCoreSettingsPage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // public System.Int32 isText
    // Size: 0x4
    // Offset: 0x6C
    int isText;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single textureId
    // Size: 0x4
    // Offset: 0x70
    float textureId;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: textureId and: indexSrc
    char __padding11[0x4] = {};
    // public System.IntPtr indexSrc
    // Size: 0x8
    // Offset: 0x78
    ::System::IntPtr indexSrc;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr indexDst
    // Size: 0x8
    // Offset: 0x80
    ::System::IntPtr indexDst;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.Int32 indexCount
    // Size: 0x4
    // Offset: 0x88
    int indexCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 indexOffset
    // Size: 0x4
    // Offset: 0x8C
    int indexOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 flipIndices
    // Size: 0x4
    // Offset: 0x90
    int flipIndices;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ConvertMeshJobData
    constexpr ConvertMeshJobData(::System::IntPtr vertSrc_ = {}, ::System::IntPtr vertDst_ = {}, int vertCount_ = {}, ::UnityEngine::Matrix4x4 transform_ = {}, int transformUVs_ = {}, ::UnityEngine::Color32 xformClipPages_ = {}, ::UnityEngine::Color32 ids_ = {}, ::UnityEngine::Color32 addFlags_ = {}, ::UnityEngine::Color32 opacityPage_ = {}, ::UnityEngine::Color32 textCoreSettingsPage_ = {}, int isText_ = {}, float textureId_ = {}, ::System::IntPtr indexSrc_ = {}, ::System::IntPtr indexDst_ = {}, int indexCount_ = {}, int indexOffset_ = {}, int flipIndices_ = {}) noexcept : vertSrc{vertSrc_}, vertDst{vertDst_}, vertCount{vertCount_}, transform{transform_}, transformUVs{transformUVs_}, xformClipPages{xformClipPages_}, ids{ids_}, addFlags{addFlags_}, opacityPage{opacityPage_}, textCoreSettingsPage{textCoreSettingsPage_}, isText{isText_}, textureId{textureId_}, indexSrc{indexSrc_}, indexDst{indexDst_}, indexCount{indexCount_}, indexOffset{indexOffset_}, flipIndices{flipIndices_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.IntPtr vertSrc
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_vertSrc();
    // Get instance field reference: public System.IntPtr vertDst
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_vertDst();
    // Get instance field reference: public System.Int32 vertCount
    [[deprecated("Use field access instead!")]] int& dyn_vertCount();
    // Get instance field reference: public UnityEngine.Matrix4x4 transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_transform();
    // Get instance field reference: public System.Int32 transformUVs
    [[deprecated("Use field access instead!")]] int& dyn_transformUVs();
    // Get instance field reference: public UnityEngine.Color32 xformClipPages
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_xformClipPages();
    // Get instance field reference: public UnityEngine.Color32 ids
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_ids();
    // Get instance field reference: public UnityEngine.Color32 addFlags
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_addFlags();
    // Get instance field reference: public UnityEngine.Color32 opacityPage
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_opacityPage();
    // Get instance field reference: public UnityEngine.Color32 textCoreSettingsPage
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_textCoreSettingsPage();
    // Get instance field reference: public System.Int32 isText
    [[deprecated("Use field access instead!")]] int& dyn_isText();
    // Get instance field reference: public System.Single textureId
    [[deprecated("Use field access instead!")]] float& dyn_textureId();
    // Get instance field reference: public System.IntPtr indexSrc
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_indexSrc();
    // Get instance field reference: public System.IntPtr indexDst
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_indexDst();
    // Get instance field reference: public System.Int32 indexCount
    [[deprecated("Use field access instead!")]] int& dyn_indexCount();
    // Get instance field reference: public System.Int32 indexOffset
    [[deprecated("Use field access instead!")]] int& dyn_indexOffset();
    // Get instance field reference: public System.Int32 flipIndices
    [[deprecated("Use field access instead!")]] int& dyn_flipIndices();
  }; // UnityEngine.UIElements.UIR.ConvertMeshJobData
  #pragma pack(pop)
  static check_size<sizeof(ConvertMeshJobData), 144 + sizeof(int)> __UnityEngine_UIElements_UIR_ConvertMeshJobDataSizeCheck;
  static_assert(sizeof(ConvertMeshJobData) == 0x94);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
