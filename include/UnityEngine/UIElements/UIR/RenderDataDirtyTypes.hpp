// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: RenderDataDirtyTypes
  struct RenderDataDirtyTypes;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::RenderDataDirtyTypes, "UnityEngine.UIElements.UIR", "RenderDataDirtyTypes");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UIR.RenderDataDirtyTypes
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  struct RenderDataDirtyTypes/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: RenderDataDirtyTypes
    constexpr RenderDataDirtyTypes(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes None
    static constexpr const int None = 0;
    // Get static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes None
    static ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes _get_None();
    // Set static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes None
    static void _set_None(::UnityEngine::UIElements::UIR::RenderDataDirtyTypes value);
    // static field const value: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes Transform
    static constexpr const int Transform = 1;
    // Get static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes Transform
    static ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes _get_Transform();
    // Set static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes Transform
    static void _set_Transform(::UnityEngine::UIElements::UIR::RenderDataDirtyTypes value);
    // static field const value: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes ClipRectSize
    static constexpr const int ClipRectSize = 2;
    // Get static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes ClipRectSize
    static ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes _get_ClipRectSize();
    // Set static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes ClipRectSize
    static void _set_ClipRectSize(::UnityEngine::UIElements::UIR::RenderDataDirtyTypes value);
    // static field const value: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes Clipping
    static constexpr const int Clipping = 4;
    // Get static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes Clipping
    static ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes _get_Clipping();
    // Set static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes Clipping
    static void _set_Clipping(::UnityEngine::UIElements::UIR::RenderDataDirtyTypes value);
    // static field const value: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes ClippingHierarchy
    static constexpr const int ClippingHierarchy = 8;
    // Get static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes ClippingHierarchy
    static ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes _get_ClippingHierarchy();
    // Set static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes ClippingHierarchy
    static void _set_ClippingHierarchy(::UnityEngine::UIElements::UIR::RenderDataDirtyTypes value);
    // static field const value: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes Visuals
    static constexpr const int Visuals = 16;
    // Get static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes Visuals
    static ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes _get_Visuals();
    // Set static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes Visuals
    static void _set_Visuals(::UnityEngine::UIElements::UIR::RenderDataDirtyTypes value);
    // static field const value: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes VisualsHierarchy
    static constexpr const int VisualsHierarchy = 32;
    // Get static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes VisualsHierarchy
    static ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes _get_VisualsHierarchy();
    // Set static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes VisualsHierarchy
    static void _set_VisualsHierarchy(::UnityEngine::UIElements::UIR::RenderDataDirtyTypes value);
    // static field const value: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes VisualsOpacityId
    static constexpr const int VisualsOpacityId = 64;
    // Get static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes VisualsOpacityId
    static ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes _get_VisualsOpacityId();
    // Set static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes VisualsOpacityId
    static void _set_VisualsOpacityId(::UnityEngine::UIElements::UIR::RenderDataDirtyTypes value);
    // static field const value: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes Opacity
    static constexpr const int Opacity = 128;
    // Get static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes Opacity
    static ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes _get_Opacity();
    // Set static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes Opacity
    static void _set_Opacity(::UnityEngine::UIElements::UIR::RenderDataDirtyTypes value);
    // static field const value: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes OpacityHierarchy
    static constexpr const int OpacityHierarchy = 256;
    // Get static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes OpacityHierarchy
    static ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes _get_OpacityHierarchy();
    // Set static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes OpacityHierarchy
    static void _set_OpacityHierarchy(::UnityEngine::UIElements::UIR::RenderDataDirtyTypes value);
    // static field const value: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes Color
    static constexpr const int Color = 512;
    // Get static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes Color
    static ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes _get_Color();
    // Set static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes Color
    static void _set_Color(::UnityEngine::UIElements::UIR::RenderDataDirtyTypes value);
    // static field const value: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes AllVisuals
    static constexpr const int AllVisuals = 112;
    // Get static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes AllVisuals
    static ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes _get_AllVisuals();
    // Set static field: static public UnityEngine.UIElements.UIR.RenderDataDirtyTypes AllVisuals
    static void _set_AllVisuals(::UnityEngine::UIElements::UIR::RenderDataDirtyTypes value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // UnityEngine.UIElements.UIR.RenderDataDirtyTypes
  #pragma pack(pop)
  static check_size<sizeof(RenderDataDirtyTypes), 0 + sizeof(int)> __UnityEngine_UIElements_UIR_RenderDataDirtyTypesSizeCheck;
  static_assert(sizeof(RenderDataDirtyTypes) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
