// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UIR.BestFitAllocator
#include "UnityEngine/UIElements/UIR/BestFitAllocator.hpp"
// Including type: UnityEngine.UIElements.UIR.LinkedPoolItem`1
#include "UnityEngine/UIElements/UIR/LinkedPoolItem_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIR::BestFitAllocator::Block);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::BestFitAllocator::Block*, "UnityEngine.UIElements.UIR", "BestFitAllocator/Block");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.UIR.BestFitAllocator/Block
  // [TokenAttribute] Offset: FFFFFFFF
  class BestFitAllocator::Block : public ::UnityEngine::UIElements::UIR::LinkedPoolItem_1<::UnityEngine::UIElements::UIR::BestFitAllocator::Block*> {
    public:
    public:
    // public System.UInt32 start
    // Size: 0x4
    // Offset: 0x18
    uint start;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 end
    // Size: 0x4
    // Offset: 0x1C
    uint end;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public UnityEngine.UIElements.UIR.BestFitAllocator/Block prev
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UIElements::UIR::BestFitAllocator::Block* prev;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BestFitAllocator::Block*) == 0x8);
    // public UnityEngine.UIElements.UIR.BestFitAllocator/Block next
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UIElements::UIR::BestFitAllocator::Block* next;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BestFitAllocator::Block*) == 0x8);
    // public UnityEngine.UIElements.UIR.BestFitAllocator/Block prevAvailable
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UIElements::UIR::BestFitAllocator::Block* prevAvailable;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BestFitAllocator::Block*) == 0x8);
    // public UnityEngine.UIElements.UIR.BestFitAllocator/Block nextAvailable
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UIElements::UIR::BestFitAllocator::Block* nextAvailable;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BestFitAllocator::Block*) == 0x8);
    // public System.Boolean allocated
    // Size: 0x1
    // Offset: 0x40
    bool allocated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.UInt32 start
    [[deprecated("Use field access instead!")]] uint& dyn_start();
    // Get instance field reference: public System.UInt32 end
    [[deprecated("Use field access instead!")]] uint& dyn_end();
    // Get instance field reference: public UnityEngine.UIElements.UIR.BestFitAllocator/Block prev
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BestFitAllocator::Block*& dyn_prev();
    // Get instance field reference: public UnityEngine.UIElements.UIR.BestFitAllocator/Block next
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BestFitAllocator::Block*& dyn_next();
    // Get instance field reference: public UnityEngine.UIElements.UIR.BestFitAllocator/Block prevAvailable
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BestFitAllocator::Block*& dyn_prevAvailable();
    // Get instance field reference: public UnityEngine.UIElements.UIR.BestFitAllocator/Block nextAvailable
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BestFitAllocator::Block*& dyn_nextAvailable();
    // Get instance field reference: public System.Boolean allocated
    [[deprecated("Use field access instead!")]] bool& dyn_allocated();
    // public System.UInt32 get_size()
    // Offset: 0x55DFC70
    uint get_size();
    // public System.Void .ctor()
    // Offset: 0x55E01F0
    // Implemented from: UnityEngine.UIElements.UIR.LinkedPoolItem`1
    // Base method: System.Void LinkedPoolItem_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BestFitAllocator::Block* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::BestFitAllocator::Block::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BestFitAllocator::Block*, creationType>()));
    }
  }; // UnityEngine.UIElements.UIR.BestFitAllocator/Block
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BestFitAllocator::Block::get_size
// Il2CppName: get_size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::UIElements::UIR::BestFitAllocator::Block::*)()>(&UnityEngine::UIElements::UIR::BestFitAllocator::Block::get_size)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BestFitAllocator::Block*), "get_size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BestFitAllocator::Block::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
