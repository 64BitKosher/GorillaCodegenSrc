// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: BMPAlloc
  struct BMPAlloc;
  // Forward declaring type: BaseShaderInfoStorage
  class BaseShaderInfoStorage;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: BitmapAllocator32
  struct BitmapAllocator32;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::BitmapAllocator32, "UnityEngine.UIElements.UIR", "BitmapAllocator32");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.UIR.BitmapAllocator32
  // [TokenAttribute] Offset: FFFFFFFF
  struct BitmapAllocator32/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::UIR::BitmapAllocator32::Page
    struct Page;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.UIR.BitmapAllocator32/Page
    // [TokenAttribute] Offset: FFFFFFFF
    struct Page/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.UInt16 x
      // Size: 0x2
      // Offset: 0x0
      uint16_t x;
      // Field size check
      static_assert(sizeof(uint16_t) == 0x2);
      // public System.UInt16 y
      // Size: 0x2
      // Offset: 0x2
      uint16_t y;
      // Field size check
      static_assert(sizeof(uint16_t) == 0x2);
      // public System.Int32 freeSlots
      // Size: 0x4
      // Offset: 0x4
      int freeSlots;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Page
      constexpr Page(uint16_t x_ = {}, uint16_t y_ = {}, int freeSlots_ = {}) noexcept : x{x_}, y{y_}, freeSlots{freeSlots_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.UInt16 x
      [[deprecated("Use field access instead!")]] uint16_t& dyn_x();
      // Get instance field reference: public System.UInt16 y
      [[deprecated("Use field access instead!")]] uint16_t& dyn_y();
      // Get instance field reference: public System.Int32 freeSlots
      [[deprecated("Use field access instead!")]] int& dyn_freeSlots();
    }; // UnityEngine.UIElements.UIR.BitmapAllocator32/Page
    #pragma pack(pop)
    static check_size<sizeof(BitmapAllocator32::Page), 4 + sizeof(int)> __UnityEngine_UIElements_UIR_BitmapAllocator32_PageSizeCheck;
    static_assert(sizeof(BitmapAllocator32::Page) == 0x8);
    public:
    // private System.Int32 m_PageHeight
    // Size: 0x4
    // Offset: 0x0
    int m_PageHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_PageHeight and: m_Pages
    char __padding0[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.BitmapAllocator32/Page> m_Pages
    // Size: 0x8
    // Offset: 0x8
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::BitmapAllocator32::Page>* m_Pages;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::BitmapAllocator32::Page>*) == 0x8);
    // private System.Collections.Generic.List`1<System.UInt32> m_AllocMap
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<uint>* m_AllocMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<uint>*) == 0x8);
    // private System.Int32 m_EntryWidth
    // Size: 0x4
    // Offset: 0x18
    int m_EntryWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_EntryHeight
    // Size: 0x4
    // Offset: 0x1C
    int m_EntryHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: BitmapAllocator32
    constexpr BitmapAllocator32(int m_PageHeight_ = {}, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::BitmapAllocator32::Page>* m_Pages_ = {}, ::System::Collections::Generic::List_1<uint>* m_AllocMap_ = {}, int m_EntryWidth_ = {}, int m_EntryHeight_ = {}) noexcept : m_PageHeight{m_PageHeight_}, m_Pages{m_Pages_}, m_AllocMap{m_AllocMap_}, m_EntryWidth{m_EntryWidth_}, m_EntryHeight{m_EntryHeight_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int32 m_PageHeight
    [[deprecated("Use field access instead!")]] int& dyn_m_PageHeight();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.BitmapAllocator32/Page> m_Pages
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::BitmapAllocator32::Page>*& dyn_m_Pages();
    // Get instance field reference: private System.Collections.Generic.List`1<System.UInt32> m_AllocMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<uint>*& dyn_m_AllocMap();
    // Get instance field reference: private System.Int32 m_EntryWidth
    [[deprecated("Use field access instead!")]] int& dyn_m_EntryWidth();
    // Get instance field reference: private System.Int32 m_EntryHeight
    [[deprecated("Use field access instead!")]] int& dyn_m_EntryHeight();
    // public System.Void Construct(System.Int32 pageHeight, System.Int32 entryWidth, System.Int32 entryHeight)
    // Offset: 0x55D5270
    void Construct(int pageHeight, int entryWidth, int entryHeight);
    // public System.Void ForceFirstAlloc(System.UInt16 firstPageX, System.UInt16 firstPageY)
    // Offset: 0x55D5398
    void ForceFirstAlloc(uint16_t firstPageX, uint16_t firstPageY);
    // public UnityEngine.UIElements.UIR.BMPAlloc Allocate(UnityEngine.UIElements.UIR.BaseShaderInfoStorage storage)
    // Offset: 0x55D5558
    ::UnityEngine::UIElements::UIR::BMPAlloc Allocate(::UnityEngine::UIElements::UIR::BaseShaderInfoStorage* storage);
    // public System.Void Free(UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x55D5A48
    void Free(::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // public System.Int32 get_entryWidth()
    // Offset: 0x55D5B8C
    int get_entryWidth();
    // public System.Int32 get_entryHeight()
    // Offset: 0x55D5B94
    int get_entryHeight();
    // System.Void GetAllocPageAtlasLocation(System.Int32 page, out System.UInt16 x, out System.UInt16 y)
    // Offset: 0x55D5B9C
    void GetAllocPageAtlasLocation(int page, ByRef<uint16_t> x, ByRef<uint16_t> y);
    // static private System.Byte CountTrailingZeroes(System.UInt32 val)
    // Offset: 0x55D59E4
    static uint8_t CountTrailingZeroes(uint val);
  }; // UnityEngine.UIElements.UIR.BitmapAllocator32
  #pragma pack(pop)
  static check_size<sizeof(BitmapAllocator32), 28 + sizeof(int)> __UnityEngine_UIElements_UIR_BitmapAllocator32SizeCheck;
  static_assert(sizeof(BitmapAllocator32) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::BitmapAllocator32::Page, "UnityEngine.UIElements.UIR", "BitmapAllocator32/Page");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BitmapAllocator32::Construct
// Il2CppName: Construct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::BitmapAllocator32::*)(int, int, int)>(&UnityEngine::UIElements::UIR::BitmapAllocator32::Construct)> {
  static const MethodInfo* get() {
    static auto* pageHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* entryWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* entryHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BitmapAllocator32), "Construct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pageHeight, entryWidth, entryHeight});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BitmapAllocator32::ForceFirstAlloc
// Il2CppName: ForceFirstAlloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::BitmapAllocator32::*)(uint16_t, uint16_t)>(&UnityEngine::UIElements::UIR::BitmapAllocator32::ForceFirstAlloc)> {
  static const MethodInfo* get() {
    static auto* firstPageX = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* firstPageY = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BitmapAllocator32), "ForceFirstAlloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstPageX, firstPageY});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BitmapAllocator32::Allocate
// Il2CppName: Allocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::BMPAlloc (UnityEngine::UIElements::UIR::BitmapAllocator32::*)(::UnityEngine::UIElements::UIR::BaseShaderInfoStorage*)>(&UnityEngine::UIElements::UIR::BitmapAllocator32::Allocate)> {
  static const MethodInfo* get() {
    static auto* storage = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BaseShaderInfoStorage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BitmapAllocator32), "Allocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{storage});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BitmapAllocator32::Free
// Il2CppName: Free
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::BitmapAllocator32::*)(::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::BitmapAllocator32::Free)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BitmapAllocator32), "Free", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BitmapAllocator32::get_entryWidth
// Il2CppName: get_entryWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UIR::BitmapAllocator32::*)()>(&UnityEngine::UIElements::UIR::BitmapAllocator32::get_entryWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BitmapAllocator32), "get_entryWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BitmapAllocator32::get_entryHeight
// Il2CppName: get_entryHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UIR::BitmapAllocator32::*)()>(&UnityEngine::UIElements::UIR::BitmapAllocator32::get_entryHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BitmapAllocator32), "get_entryHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BitmapAllocator32::GetAllocPageAtlasLocation
// Il2CppName: GetAllocPageAtlasLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::BitmapAllocator32::*)(int, ByRef<uint16_t>, ByRef<uint16_t>)>(&UnityEngine::UIElements::UIR::BitmapAllocator32::GetAllocPageAtlasLocation)> {
  static const MethodInfo* get() {
    static auto* page = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BitmapAllocator32), "GetAllocPageAtlasLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{page, x, y});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BitmapAllocator32::CountTrailingZeroes
// Il2CppName: CountTrailingZeroes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(uint)>(&UnityEngine::UIElements::UIR::BitmapAllocator32::CountTrailingZeroes)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BitmapAllocator32), "CountTrailingZeroes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
