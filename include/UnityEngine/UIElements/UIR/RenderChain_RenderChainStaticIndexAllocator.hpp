// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UIR.RenderChain
#include "UnityEngine/UIElements/UIR/RenderChain.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::RenderChain::RenderChainStaticIndexAllocator, "UnityEngine.UIElements.UIR", "RenderChain/RenderChainStaticIndexAllocator");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.UIR.RenderChain/RenderChainStaticIndexAllocator
  // [TokenAttribute] Offset: FFFFFFFF
  struct RenderChain::RenderChainStaticIndexAllocator/*, public ::System::ValueType*/ {
    public:
    // Creating value type constructor for type: RenderChainStaticIndexAllocator
    constexpr RenderChainStaticIndexAllocator() noexcept {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.RenderChain> renderChains
    static ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::RenderChain*>* _get_renderChains();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.RenderChain> renderChains
    static void _set_renderChains(::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::RenderChain*>* value);
    // static public System.Int32 AllocateIndex(UnityEngine.UIElements.UIR.RenderChain renderChain)
    // Offset: 0x55D26E4
    static int AllocateIndex(::UnityEngine::UIElements::UIR::RenderChain* renderChain);
    // static public System.Void FreeIndex(System.Int32 index)
    // Offset: 0x55D2838
    static void FreeIndex(int index);
    // static public UnityEngine.UIElements.UIR.RenderChain AccessIndex(System.Int32 index)
    // Offset: 0x55D28BC
    static ::UnityEngine::UIElements::UIR::RenderChain* AccessIndex(int index);
    // static private System.Void .cctor()
    // Offset: 0x55D293C
    static void _cctor();
  }; // UnityEngine.UIElements.UIR.RenderChain/RenderChainStaticIndexAllocator
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::RenderChainStaticIndexAllocator::AllocateIndex
// Il2CppName: AllocateIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::UIElements::UIR::RenderChain*)>(&UnityEngine::UIElements::UIR::RenderChain::RenderChainStaticIndexAllocator::AllocateIndex)> {
  static const MethodInfo* get() {
    static auto* renderChain = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "RenderChain")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain::RenderChainStaticIndexAllocator), "AllocateIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderChain});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::RenderChainStaticIndexAllocator::FreeIndex
// Il2CppName: FreeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&UnityEngine::UIElements::UIR::RenderChain::RenderChainStaticIndexAllocator::FreeIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain::RenderChainStaticIndexAllocator), "FreeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::RenderChainStaticIndexAllocator::AccessIndex
// Il2CppName: AccessIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::RenderChain* (*)(int)>(&UnityEngine::UIElements::UIR::RenderChain::RenderChainStaticIndexAllocator::AccessIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain::RenderChainStaticIndexAllocator), "AccessIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::RenderChainStaticIndexAllocator::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::UIR::RenderChain::RenderChainStaticIndexAllocator::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain::RenderChainStaticIndexAllocator), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
