// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.UIR.BitmapAllocator32
#include "UnityEngine/UIElements/UIR/BitmapAllocator32.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.UIElements.UIR.Transform3x4
#include "UnityEngine/UIElements/UIR/Transform3x4.hpp"
// Including type: UnityEngine.Vector2Int
#include "UnityEngine/Vector2Int.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.UIElements.UIR.TextCoreSettings
#include "UnityEngine/UIElements/UIR/TextCoreSettings.hpp"
// Including type: UnityEngine.UIElements.UIR.BMPAlloc
#include "UnityEngine/UIElements/UIR/BMPAlloc.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: BaseShaderInfoStorage
  class BaseShaderInfoStorage;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectInt
  struct RectInt;
  // Forward declaring type: Texture
  class Texture;
  // Skipping declaration: Color because it is already included!
  // Forward declaring type: Color32
  struct Color32;
}
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: NativeSlice`1<T>
  template<typename T>
  struct NativeSlice_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: UIRVEShaderInfoAllocator
  struct UIRVEShaderInfoAllocator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator, "UnityEngine.UIElements.UIR", "UIRVEShaderInfoAllocator");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.UIR.UIRVEShaderInfoAllocator
  // [TokenAttribute] Offset: FFFFFFFF
  struct UIRVEShaderInfoAllocator/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.UIElements.UIR.BaseShaderInfoStorage m_Storage
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UIR::BaseShaderInfoStorage* m_Storage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BaseShaderInfoStorage*) == 0x8);
    // private UnityEngine.UIElements.UIR.BitmapAllocator32 m_TransformAllocator
    // Size: 0x20
    // Offset: 0x8
    ::UnityEngine::UIElements::UIR::BitmapAllocator32 m_TransformAllocator;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BitmapAllocator32) == 0x20);
    // private UnityEngine.UIElements.UIR.BitmapAllocator32 m_ClipRectAllocator
    // Size: 0x20
    // Offset: 0x28
    ::UnityEngine::UIElements::UIR::BitmapAllocator32 m_ClipRectAllocator;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BitmapAllocator32) == 0x20);
    // private UnityEngine.UIElements.UIR.BitmapAllocator32 m_OpacityAllocator
    // Size: 0x20
    // Offset: 0x48
    ::UnityEngine::UIElements::UIR::BitmapAllocator32 m_OpacityAllocator;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BitmapAllocator32) == 0x20);
    // private UnityEngine.UIElements.UIR.BitmapAllocator32 m_ColorAllocator
    // Size: 0x20
    // Offset: 0x68
    ::UnityEngine::UIElements::UIR::BitmapAllocator32 m_ColorAllocator;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BitmapAllocator32) == 0x20);
    // private UnityEngine.UIElements.UIR.BitmapAllocator32 m_TextSettingsAllocator
    // Size: 0x20
    // Offset: 0x88
    ::UnityEngine::UIElements::UIR::BitmapAllocator32 m_TextSettingsAllocator;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BitmapAllocator32) == 0x20);
    // private System.Boolean m_StorageReallyCreated
    // Size: 0x1
    // Offset: 0xA8
    bool m_StorageReallyCreated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_VertexTexturingEnabled
    // Size: 0x1
    // Offset: 0xA9
    bool m_VertexTexturingEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Unity.Collections.NativeArray`1<UnityEngine.UIElements.UIR.Transform3x4> m_Transforms
    // Size: 0xFFFFFFFF
    // Offset: 0xB0
    ::Unity::Collections::NativeArray_1<::UnityEngine::UIElements::UIR::Transform3x4> m_Transforms;
    // private Unity.Collections.NativeArray`1<UnityEngine.Vector4> m_ClipRects
    // Size: 0xFFFFFFFF
    // Offset: 0xC0
    ::Unity::Collections::NativeArray_1<::UnityEngine::Vector4> m_ClipRects;
    public:
    // Creating value type constructor for type: UIRVEShaderInfoAllocator
    constexpr UIRVEShaderInfoAllocator(::UnityEngine::UIElements::UIR::BaseShaderInfoStorage* m_Storage_ = {}, ::UnityEngine::UIElements::UIR::BitmapAllocator32 m_TransformAllocator_ = {}, ::UnityEngine::UIElements::UIR::BitmapAllocator32 m_ClipRectAllocator_ = {}, ::UnityEngine::UIElements::UIR::BitmapAllocator32 m_OpacityAllocator_ = {}, ::UnityEngine::UIElements::UIR::BitmapAllocator32 m_ColorAllocator_ = {}, ::UnityEngine::UIElements::UIR::BitmapAllocator32 m_TextSettingsAllocator_ = {}, bool m_StorageReallyCreated_ = {}, bool m_VertexTexturingEnabled_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::UIElements::UIR::Transform3x4> m_Transforms_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Vector4> m_ClipRects_ = {}) noexcept : m_Storage{m_Storage_}, m_TransformAllocator{m_TransformAllocator_}, m_ClipRectAllocator{m_ClipRectAllocator_}, m_OpacityAllocator{m_OpacityAllocator_}, m_ColorAllocator{m_ColorAllocator_}, m_TextSettingsAllocator{m_TextSettingsAllocator_}, m_StorageReallyCreated{m_StorageReallyCreated_}, m_VertexTexturingEnabled{m_VertexTexturingEnabled_}, m_Transforms{m_Transforms_}, m_ClipRects{m_ClipRects_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static readonly UnityEngine.Vector2Int identityTransformTexel
    static ::UnityEngine::Vector2Int _get_identityTransformTexel();
    // Set static field: static readonly UnityEngine.Vector2Int identityTransformTexel
    static void _set_identityTransformTexel(::UnityEngine::Vector2Int value);
    // Get static field: static readonly UnityEngine.Vector2Int infiniteClipRectTexel
    static ::UnityEngine::Vector2Int _get_infiniteClipRectTexel();
    // Set static field: static readonly UnityEngine.Vector2Int infiniteClipRectTexel
    static void _set_infiniteClipRectTexel(::UnityEngine::Vector2Int value);
    // Get static field: static readonly UnityEngine.Vector2Int fullOpacityTexel
    static ::UnityEngine::Vector2Int _get_fullOpacityTexel();
    // Set static field: static readonly UnityEngine.Vector2Int fullOpacityTexel
    static void _set_fullOpacityTexel(::UnityEngine::Vector2Int value);
    // Get static field: static readonly UnityEngine.Vector2Int clearColorTexel
    static ::UnityEngine::Vector2Int _get_clearColorTexel();
    // Set static field: static readonly UnityEngine.Vector2Int clearColorTexel
    static void _set_clearColorTexel(::UnityEngine::Vector2Int value);
    // Get static field: static readonly UnityEngine.Vector2Int defaultTextCoreSettingsTexel
    static ::UnityEngine::Vector2Int _get_defaultTextCoreSettingsTexel();
    // Set static field: static readonly UnityEngine.Vector2Int defaultTextCoreSettingsTexel
    static void _set_defaultTextCoreSettingsTexel(::UnityEngine::Vector2Int value);
    // Get static field: static readonly UnityEngine.Matrix4x4 identityTransformValue
    static ::UnityEngine::Matrix4x4 _get_identityTransformValue();
    // Set static field: static readonly UnityEngine.Matrix4x4 identityTransformValue
    static void _set_identityTransformValue(::UnityEngine::Matrix4x4 value);
    // Get static field: static readonly UnityEngine.Vector4 identityTransformRow0Value
    static ::UnityEngine::Vector4 _get_identityTransformRow0Value();
    // Set static field: static readonly UnityEngine.Vector4 identityTransformRow0Value
    static void _set_identityTransformRow0Value(::UnityEngine::Vector4 value);
    // Get static field: static readonly UnityEngine.Vector4 identityTransformRow1Value
    static ::UnityEngine::Vector4 _get_identityTransformRow1Value();
    // Set static field: static readonly UnityEngine.Vector4 identityTransformRow1Value
    static void _set_identityTransformRow1Value(::UnityEngine::Vector4 value);
    // Get static field: static readonly UnityEngine.Vector4 identityTransformRow2Value
    static ::UnityEngine::Vector4 _get_identityTransformRow2Value();
    // Set static field: static readonly UnityEngine.Vector4 identityTransformRow2Value
    static void _set_identityTransformRow2Value(::UnityEngine::Vector4 value);
    // Get static field: static readonly UnityEngine.Vector4 infiniteClipRectValue
    static ::UnityEngine::Vector4 _get_infiniteClipRectValue();
    // Set static field: static readonly UnityEngine.Vector4 infiniteClipRectValue
    static void _set_infiniteClipRectValue(::UnityEngine::Vector4 value);
    // Get static field: static readonly UnityEngine.Vector4 fullOpacityValue
    static ::UnityEngine::Vector4 _get_fullOpacityValue();
    // Set static field: static readonly UnityEngine.Vector4 fullOpacityValue
    static void _set_fullOpacityValue(::UnityEngine::Vector4 value);
    // Get static field: static readonly UnityEngine.Vector4 clearColorValue
    static ::UnityEngine::Vector4 _get_clearColorValue();
    // Set static field: static readonly UnityEngine.Vector4 clearColorValue
    static void _set_clearColorValue(::UnityEngine::Vector4 value);
    // Get static field: static readonly UnityEngine.UIElements.UIR.TextCoreSettings defaultTextCoreSettingsValue
    static ::UnityEngine::UIElements::UIR::TextCoreSettings _get_defaultTextCoreSettingsValue();
    // Set static field: static readonly UnityEngine.UIElements.UIR.TextCoreSettings defaultTextCoreSettingsValue
    static void _set_defaultTextCoreSettingsValue(::UnityEngine::UIElements::UIR::TextCoreSettings value);
    // Get static field: static public readonly UnityEngine.UIElements.UIR.BMPAlloc identityTransform
    static ::UnityEngine::UIElements::UIR::BMPAlloc _get_identityTransform();
    // Set static field: static public readonly UnityEngine.UIElements.UIR.BMPAlloc identityTransform
    static void _set_identityTransform(::UnityEngine::UIElements::UIR::BMPAlloc value);
    // Get static field: static public readonly UnityEngine.UIElements.UIR.BMPAlloc infiniteClipRect
    static ::UnityEngine::UIElements::UIR::BMPAlloc _get_infiniteClipRect();
    // Set static field: static public readonly UnityEngine.UIElements.UIR.BMPAlloc infiniteClipRect
    static void _set_infiniteClipRect(::UnityEngine::UIElements::UIR::BMPAlloc value);
    // Get static field: static public readonly UnityEngine.UIElements.UIR.BMPAlloc fullOpacity
    static ::UnityEngine::UIElements::UIR::BMPAlloc _get_fullOpacity();
    // Set static field: static public readonly UnityEngine.UIElements.UIR.BMPAlloc fullOpacity
    static void _set_fullOpacity(::UnityEngine::UIElements::UIR::BMPAlloc value);
    // Get static field: static public readonly UnityEngine.UIElements.UIR.BMPAlloc clearColor
    static ::UnityEngine::UIElements::UIR::BMPAlloc _get_clearColor();
    // Set static field: static public readonly UnityEngine.UIElements.UIR.BMPAlloc clearColor
    static void _set_clearColor(::UnityEngine::UIElements::UIR::BMPAlloc value);
    // Get static field: static public readonly UnityEngine.UIElements.UIR.BMPAlloc defaultTextCoreSettings
    static ::UnityEngine::UIElements::UIR::BMPAlloc _get_defaultTextCoreSettings();
    // Set static field: static public readonly UnityEngine.UIElements.UIR.BMPAlloc defaultTextCoreSettings
    static void _set_defaultTextCoreSettings(::UnityEngine::UIElements::UIR::BMPAlloc value);
    // Get instance field reference: private UnityEngine.UIElements.UIR.BaseShaderInfoStorage m_Storage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BaseShaderInfoStorage*& dyn_m_Storage();
    // Get instance field reference: private UnityEngine.UIElements.UIR.BitmapAllocator32 m_TransformAllocator
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BitmapAllocator32& dyn_m_TransformAllocator();
    // Get instance field reference: private UnityEngine.UIElements.UIR.BitmapAllocator32 m_ClipRectAllocator
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BitmapAllocator32& dyn_m_ClipRectAllocator();
    // Get instance field reference: private UnityEngine.UIElements.UIR.BitmapAllocator32 m_OpacityAllocator
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BitmapAllocator32& dyn_m_OpacityAllocator();
    // Get instance field reference: private UnityEngine.UIElements.UIR.BitmapAllocator32 m_ColorAllocator
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BitmapAllocator32& dyn_m_ColorAllocator();
    // Get instance field reference: private UnityEngine.UIElements.UIR.BitmapAllocator32 m_TextSettingsAllocator
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BitmapAllocator32& dyn_m_TextSettingsAllocator();
    // Get instance field reference: private System.Boolean m_StorageReallyCreated
    [[deprecated("Use field access instead!")]] bool& dyn_m_StorageReallyCreated();
    // Get instance field reference: private System.Boolean m_VertexTexturingEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_m_VertexTexturingEnabled();
    // Get instance field reference: private Unity.Collections.NativeArray`1<UnityEngine.UIElements.UIR.Transform3x4> m_Transforms
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::UIElements::UIR::Transform3x4>& dyn_m_Transforms();
    // Get instance field reference: private Unity.Collections.NativeArray`1<UnityEngine.Vector4> m_ClipRects
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Vector4>& dyn_m_ClipRects();
    // static private System.Int32 get_pageWidth()
    // Offset: 0x55D5C14
    static int get_pageWidth();
    // static private System.Int32 get_pageHeight()
    // Offset: 0x55D5C1C
    static int get_pageHeight();
    // static private UnityEngine.Vector2Int AllocToTexelCoord(ref UnityEngine.UIElements.UIR.BitmapAllocator32 allocator, UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x55D5C24
    static ::UnityEngine::Vector2Int AllocToTexelCoord(ByRef<::UnityEngine::UIElements::UIR::BitmapAllocator32> allocator, ::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // static private System.Int32 AllocToConstantBufferIndex(UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x55D5C74
    static int AllocToConstantBufferIndex(::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // static private System.Boolean AtlasRectMatchesPage(ref UnityEngine.UIElements.UIR.BitmapAllocator32 allocator, UnityEngine.UIElements.UIR.BMPAlloc defAlloc, UnityEngine.RectInt atlasRect)
    // Offset: 0x55D5CD4
    static bool AtlasRectMatchesPage(ByRef<::UnityEngine::UIElements::UIR::BitmapAllocator32> allocator, ::UnityEngine::UIElements::UIR::BMPAlloc defAlloc, ::UnityEngine::RectInt atlasRect);
    // public Unity.Collections.NativeSlice`1<UnityEngine.UIElements.UIR.Transform3x4> get_transformConstants()
    // Offset: 0x55D5E3C
    ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::UIR::Transform3x4> get_transformConstants();
    // public Unity.Collections.NativeSlice`1<UnityEngine.Vector4> get_clipRectConstants()
    // Offset: 0x55D5E84
    ::Unity::Collections::NativeSlice_1<::UnityEngine::Vector4> get_clipRectConstants();
    // public UnityEngine.Texture get_atlas()
    // Offset: 0x55D5ECC
    ::UnityEngine::Texture* get_atlas();
    // public System.Void Construct()
    // Offset: 0x55D65DC
    void Construct();
    // private System.Void ReallyCreateStorage()
    // Offset: 0x55D6A7C
    void ReallyCreateStorage();
    // public System.Void Dispose()
    // Offset: 0x55D76D4
    void Dispose();
    // public System.Void IssuePendingStorageChanges()
    // Offset: 0x55D7788
    void IssuePendingStorageChanges();
    // public UnityEngine.UIElements.UIR.BMPAlloc AllocTransform()
    // Offset: 0x55D77A0
    ::UnityEngine::UIElements::UIR::BMPAlloc AllocTransform();
    // public UnityEngine.UIElements.UIR.BMPAlloc AllocClipRect()
    // Offset: 0x55D7888
    ::UnityEngine::UIElements::UIR::BMPAlloc AllocClipRect();
    // public UnityEngine.UIElements.UIR.BMPAlloc AllocOpacity()
    // Offset: 0x55D7970
    ::UnityEngine::UIElements::UIR::BMPAlloc AllocOpacity();
    // public UnityEngine.UIElements.UIR.BMPAlloc AllocColor()
    // Offset: 0x55D7998
    ::UnityEngine::UIElements::UIR::BMPAlloc AllocColor();
    // public UnityEngine.UIElements.UIR.BMPAlloc AllocTextCoreSettings(UnityEngine.UIElements.UIR.TextCoreSettings settings)
    // Offset: 0x55D79C0
    ::UnityEngine::UIElements::UIR::BMPAlloc AllocTextCoreSettings(::UnityEngine::UIElements::UIR::TextCoreSettings settings);
    // public System.Void SetTransformValue(UnityEngine.UIElements.UIR.BMPAlloc alloc, UnityEngine.Matrix4x4 xform)
    // Offset: 0x55D6E90
    void SetTransformValue(::UnityEngine::UIElements::UIR::BMPAlloc alloc, ::UnityEngine::Matrix4x4 xform);
    // public System.Void SetClipRectValue(UnityEngine.UIElements.UIR.BMPAlloc alloc, UnityEngine.Vector4 clipRect)
    // Offset: 0x55D70A8
    void SetClipRectValue(::UnityEngine::UIElements::UIR::BMPAlloc alloc, ::UnityEngine::Vector4 clipRect);
    // public System.Void SetOpacityValue(UnityEngine.UIElements.UIR.BMPAlloc alloc, System.Single opacity)
    // Offset: 0x55D71E0
    void SetOpacityValue(::UnityEngine::UIElements::UIR::BMPAlloc alloc, float opacity);
    // public System.Void SetColorValue(UnityEngine.UIElements.UIR.BMPAlloc alloc, UnityEngine.Color color, System.Boolean isEditorContext)
    // Offset: 0x55D72BC
    void SetColorValue(::UnityEngine::UIElements::UIR::BMPAlloc alloc, ::UnityEngine::Color color, bool isEditorContext);
    // public System.Void SetTextCoreSettingValue(UnityEngine.UIElements.UIR.BMPAlloc alloc, UnityEngine.UIElements.UIR.TextCoreSettings settings, System.Boolean isEditorContext)
    // Offset: 0x55D7420
    void SetTextCoreSettingValue(::UnityEngine::UIElements::UIR::BMPAlloc alloc, ::UnityEngine::UIElements::UIR::TextCoreSettings settings, bool isEditorContext);
    // public System.Void FreeTransform(UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x55D79E8
    void FreeTransform(::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // public System.Void FreeClipRect(UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x55D7A5C
    void FreeClipRect(::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // public System.Void FreeOpacity(UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x55D7AD0
    void FreeOpacity(::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // public System.Void FreeColor(UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x55D7B44
    void FreeColor(::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // public System.Void FreeTextCoreSettings(UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x55D7BB8
    void FreeTextCoreSettings(::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // public UnityEngine.Color32 TransformAllocToVertexData(UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x55D7C2C
    ::UnityEngine::Color32 TransformAllocToVertexData(::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // public UnityEngine.Color32 ClipRectAllocToVertexData(UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x55D7D3C
    ::UnityEngine::Color32 ClipRectAllocToVertexData(::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // public UnityEngine.Color32 OpacityAllocToVertexData(UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x55D7E4C
    ::UnityEngine::Color32 OpacityAllocToVertexData(::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // public UnityEngine.Color32 ColorAllocToVertexData(UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x55D7F48
    ::UnityEngine::Color32 ColorAllocToVertexData(::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // public UnityEngine.Color32 TextCoreSettingsToVertexData(UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x55D8044
    ::UnityEngine::Color32 TextCoreSettingsToVertexData(::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // static private System.Void .cctor()
    // Offset: 0x55D8140
    static void _cctor();
  }; // UnityEngine.UIElements.UIR.UIRVEShaderInfoAllocator
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::get_pageWidth
// Il2CppName: get_pageWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::get_pageWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "get_pageWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::get_pageHeight
// Il2CppName: get_pageHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::get_pageHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "get_pageHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AllocToTexelCoord
// Il2CppName: AllocToTexelCoord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2Int (*)(ByRef<::UnityEngine::UIElements::UIR::BitmapAllocator32>, ::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AllocToTexelCoord)> {
  static const MethodInfo* get() {
    static auto* allocator = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BitmapAllocator32")->this_arg;
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "AllocToTexelCoord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allocator, alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AllocToConstantBufferIndex
// Il2CppName: AllocToConstantBufferIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AllocToConstantBufferIndex)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "AllocToConstantBufferIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AtlasRectMatchesPage
// Il2CppName: AtlasRectMatchesPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::UIElements::UIR::BitmapAllocator32>, ::UnityEngine::UIElements::UIR::BMPAlloc, ::UnityEngine::RectInt)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AtlasRectMatchesPage)> {
  static const MethodInfo* get() {
    static auto* allocator = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BitmapAllocator32")->this_arg;
    static auto* defAlloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    static auto* atlasRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectInt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "AtlasRectMatchesPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allocator, defAlloc, atlasRect});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::get_transformConstants
// Il2CppName: get_transformConstants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::UIR::Transform3x4> (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)()>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::get_transformConstants)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "get_transformConstants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::get_clipRectConstants
// Il2CppName: get_clipRectConstants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeSlice_1<::UnityEngine::Vector4> (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)()>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::get_clipRectConstants)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "get_clipRectConstants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::get_atlas
// Il2CppName: get_atlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture* (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)()>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::get_atlas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "get_atlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::Construct
// Il2CppName: Construct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)()>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::Construct)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "Construct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::ReallyCreateStorage
// Il2CppName: ReallyCreateStorage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)()>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::ReallyCreateStorage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "ReallyCreateStorage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)()>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::IssuePendingStorageChanges
// Il2CppName: IssuePendingStorageChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)()>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::IssuePendingStorageChanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "IssuePendingStorageChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AllocTransform
// Il2CppName: AllocTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::BMPAlloc (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)()>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AllocTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "AllocTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AllocClipRect
// Il2CppName: AllocClipRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::BMPAlloc (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)()>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AllocClipRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "AllocClipRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AllocOpacity
// Il2CppName: AllocOpacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::BMPAlloc (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)()>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AllocOpacity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "AllocOpacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AllocColor
// Il2CppName: AllocColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::BMPAlloc (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)()>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AllocColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "AllocColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AllocTextCoreSettings
// Il2CppName: AllocTextCoreSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::BMPAlloc (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::TextCoreSettings)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::AllocTextCoreSettings)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "TextCoreSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "AllocTextCoreSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::SetTransformValue
// Il2CppName: SetTransformValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::BMPAlloc, ::UnityEngine::Matrix4x4)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::SetTransformValue)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    static auto* xform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "SetTransformValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc, xform});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::SetClipRectValue
// Il2CppName: SetClipRectValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::BMPAlloc, ::UnityEngine::Vector4)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::SetClipRectValue)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    static auto* clipRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "SetClipRectValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc, clipRect});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::SetOpacityValue
// Il2CppName: SetOpacityValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::BMPAlloc, float)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::SetOpacityValue)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    static auto* opacity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "SetOpacityValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc, opacity});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::SetColorValue
// Il2CppName: SetColorValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::BMPAlloc, ::UnityEngine::Color, bool)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::SetColorValue)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* isEditorContext = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "SetColorValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc, color, isEditorContext});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::SetTextCoreSettingValue
// Il2CppName: SetTextCoreSettingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::BMPAlloc, ::UnityEngine::UIElements::UIR::TextCoreSettings, bool)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::SetTextCoreSettingValue)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "TextCoreSettings")->byval_arg;
    static auto* isEditorContext = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "SetTextCoreSettingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc, settings, isEditorContext});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::FreeTransform
// Il2CppName: FreeTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::FreeTransform)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "FreeTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::FreeClipRect
// Il2CppName: FreeClipRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::FreeClipRect)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "FreeClipRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::FreeOpacity
// Il2CppName: FreeOpacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::FreeOpacity)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "FreeOpacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::FreeColor
// Il2CppName: FreeColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::FreeColor)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "FreeColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::FreeTextCoreSettings
// Il2CppName: FreeTextCoreSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::FreeTextCoreSettings)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "FreeTextCoreSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::TransformAllocToVertexData
// Il2CppName: TransformAllocToVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::TransformAllocToVertexData)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "TransformAllocToVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::ClipRectAllocToVertexData
// Il2CppName: ClipRectAllocToVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::ClipRectAllocToVertexData)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "ClipRectAllocToVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::OpacityAllocToVertexData
// Il2CppName: OpacityAllocToVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::OpacityAllocToVertexData)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "OpacityAllocToVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::ColorAllocToVertexData
// Il2CppName: ColorAllocToVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::ColorAllocToVertexData)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "ColorAllocToVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::TextCoreSettingsToVertexData
// Il2CppName: TextCoreSettingsToVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::*)(::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::TextCoreSettingsToVertexData)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), "TextCoreSettingsToVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
