// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: Alloc
  struct Alloc;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: BestFitAllocator
  class BestFitAllocator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIR::BestFitAllocator);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::BestFitAllocator*, "UnityEngine.UIElements.UIR", "BestFitAllocator");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UIR.BestFitAllocator
  // [TokenAttribute] Offset: FFFFFFFF
  class BestFitAllocator : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::UIElements::UIR::BestFitAllocator::BlockPool
    class BlockPool;
    // Nested type: ::UnityEngine::UIElements::UIR::BestFitAllocator::Block
    class Block;
    public:
    // private readonly System.UInt32 <totalSize>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    uint totalSize;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: totalSize and: m_FirstBlock
    char __padding0[0x4] = {};
    // private UnityEngine.UIElements.UIR.BestFitAllocator/Block m_FirstBlock
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::UIR::BestFitAllocator::Block* m_FirstBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BestFitAllocator::Block*) == 0x8);
    // private UnityEngine.UIElements.UIR.BestFitAllocator/Block m_FirstAvailableBlock
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UIElements::UIR::BestFitAllocator::Block* m_FirstAvailableBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BestFitAllocator::Block*) == 0x8);
    // private UnityEngine.UIElements.UIR.BestFitAllocator/BlockPool m_BlockPool
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UIElements::UIR::BestFitAllocator::BlockPool* m_BlockPool;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BestFitAllocator::BlockPool*) == 0x8);
    // private System.UInt32 m_HighWatermark
    // Size: 0x4
    // Offset: 0x30
    uint m_HighWatermark;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Get instance field reference: private readonly System.UInt32 <totalSize>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$totalSize$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.UIR.BestFitAllocator/Block m_FirstBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BestFitAllocator::Block*& dyn_m_FirstBlock();
    // Get instance field reference: private UnityEngine.UIElements.UIR.BestFitAllocator/Block m_FirstAvailableBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BestFitAllocator::Block*& dyn_m_FirstAvailableBlock();
    // Get instance field reference: private UnityEngine.UIElements.UIR.BestFitAllocator/BlockPool m_BlockPool
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BestFitAllocator::BlockPool*& dyn_m_BlockPool();
    // Get instance field reference: private System.UInt32 m_HighWatermark
    [[deprecated("Use field access instead!")]] uint& dyn_m_HighWatermark();
    // public System.Void .ctor(System.UInt32 size)
    // Offset: 0x55DF850
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BestFitAllocator* New_ctor(uint size) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::BestFitAllocator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BestFitAllocator*, creationType>(size)));
    }
    // public System.UInt32 get_totalSize()
    // Offset: 0x55DFA18
    uint get_totalSize();
    // public System.UInt32 get_highWatermark()
    // Offset: 0x55DFA20
    uint get_highWatermark();
    // public UnityEngine.UIElements.UIR.Alloc Allocate(System.UInt32 size)
    // Offset: 0x55DFA28
    ::UnityEngine::UIElements::UIR::Alloc Allocate(uint size);
    // public System.Void Free(UnityEngine.UIElements.UIR.Alloc alloc)
    // Offset: 0x55DFDF0
    void Free(::UnityEngine::UIElements::UIR::Alloc alloc);
    // private UnityEngine.UIElements.UIR.BestFitAllocator/Block CoalesceBlockWithPrevious(UnityEngine.UIElements.UIR.BestFitAllocator/Block block)
    // Offset: 0x55E007C
    ::UnityEngine::UIElements::UIR::BestFitAllocator::Block* CoalesceBlockWithPrevious(::UnityEngine::UIElements::UIR::BestFitAllocator::Block* block);
    // private UnityEngine.UIElements.UIR.BestFitAllocator/Block BestFitFindAvailableBlock(System.UInt32 size)
    // Offset: 0x55DFC2C
    ::UnityEngine::UIElements::UIR::BestFitAllocator::Block* BestFitFindAvailableBlock(uint size);
    // private System.Void SplitBlock(UnityEngine.UIElements.UIR.BestFitAllocator/Block block, System.UInt32 size)
    // Offset: 0x55DFC7C
    void SplitBlock(::UnityEngine::UIElements::UIR::BestFitAllocator::Block* block, uint size);
  }; // UnityEngine.UIElements.UIR.BestFitAllocator
  #pragma pack(pop)
  static check_size<sizeof(BestFitAllocator), 48 + sizeof(uint)> __UnityEngine_UIElements_UIR_BestFitAllocatorSizeCheck;
  static_assert(sizeof(BestFitAllocator) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BestFitAllocator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BestFitAllocator::get_totalSize
// Il2CppName: get_totalSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::UIElements::UIR::BestFitAllocator::*)()>(&UnityEngine::UIElements::UIR::BestFitAllocator::get_totalSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BestFitAllocator*), "get_totalSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BestFitAllocator::get_highWatermark
// Il2CppName: get_highWatermark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::UIElements::UIR::BestFitAllocator::*)()>(&UnityEngine::UIElements::UIR::BestFitAllocator::get_highWatermark)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BestFitAllocator*), "get_highWatermark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BestFitAllocator::Allocate
// Il2CppName: Allocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::Alloc (UnityEngine::UIElements::UIR::BestFitAllocator::*)(uint)>(&UnityEngine::UIElements::UIR::BestFitAllocator::Allocate)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BestFitAllocator*), "Allocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BestFitAllocator::Free
// Il2CppName: Free
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::BestFitAllocator::*)(::UnityEngine::UIElements::UIR::Alloc)>(&UnityEngine::UIElements::UIR::BestFitAllocator::Free)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "Alloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BestFitAllocator*), "Free", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BestFitAllocator::CoalesceBlockWithPrevious
// Il2CppName: CoalesceBlockWithPrevious
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::BestFitAllocator::Block* (UnityEngine::UIElements::UIR::BestFitAllocator::*)(::UnityEngine::UIElements::UIR::BestFitAllocator::Block*)>(&UnityEngine::UIElements::UIR::BestFitAllocator::CoalesceBlockWithPrevious)> {
  static const MethodInfo* get() {
    static auto* block = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BestFitAllocator/Block")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BestFitAllocator*), "CoalesceBlockWithPrevious", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BestFitAllocator::BestFitFindAvailableBlock
// Il2CppName: BestFitFindAvailableBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::BestFitAllocator::Block* (UnityEngine::UIElements::UIR::BestFitAllocator::*)(uint)>(&UnityEngine::UIElements::UIR::BestFitAllocator::BestFitFindAvailableBlock)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BestFitAllocator*), "BestFitFindAvailableBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BestFitAllocator::SplitBlock
// Il2CppName: SplitBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::BestFitAllocator::*)(::UnityEngine::UIElements::UIR::BestFitAllocator::Block*, uint)>(&UnityEngine::UIElements::UIR::BestFitAllocator::SplitBlock)> {
  static const MethodInfo* get() {
    static auto* block = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BestFitAllocator/Block")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BestFitAllocator*), "SplitBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block, size});
  }
};
