// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.UIElements.UIR.TextureEntry
#include "UnityEngine/UIElements/UIR/TextureEntry.hpp"
// Including type: UnityEngine.UIElements.UIR.ChainBuilderStats
#include "UnityEngine/UIElements/UIR/ChainBuilderStats.hpp"
// Including type: UnityEngine.UIElements.Vertex
#include "UnityEngine/UIElements/Vertex.hpp"
// Including type: UnityEngine.UIElements.UIR.UIRVEShaderInfoAllocator
#include "UnityEngine/UIElements/UIR/UIRVEShaderInfoAllocator.hpp"
// Including type: Unity.Profiling.ProfilerMarker
#include "Unity/Profiling/ProfilerMarker.hpp"
// Including type: Unity.Collections.NativeSlice`1
#include "Unity/Collections/NativeSlice_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: LinkedPool`1<T>
  template<typename T>
  class LinkedPool_1;
  // Forward declaring type: RenderChainCommand
  class RenderChainCommand;
  // Forward declaring type: BasicNodePool`1<T>
  template<typename T>
  class BasicNodePool_1;
  // Forward declaring type: OpacityIdAccelerator
  class OpacityIdAccelerator;
  // Forward declaring type: UIRenderDevice
  class UIRenderDevice;
  // Forward declaring type: VectorImageManager
  class VectorImageManager;
  // Forward declaring type: TempAllocator`1<T>
  template<typename T>
  class TempAllocator_1;
  // Forward declaring type: JobManager
  class JobManager;
  // Skipping declaration: RenderNodeData because it is already included!
  // Forward declaring type: RenderDataDirtyTypes
  struct RenderDataDirtyTypes;
  // Forward declaring type: RenderDataDirtyTypeClasses
  struct RenderDataDirtyTypeClasses;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TextureRegistry
  class TextureRegistry;
  // Forward declaring type: BaseVisualElementPanel
  class BaseVisualElementPanel;
  // Forward declaring type: AtlasBase
  class AtlasBase;
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: BaseRuntimePanel
  class BaseRuntimePanel;
  // Skipping declaration: TextureId because it is already included!
}
// Forward declaring namespace: UnityEngine::UIElements::UIR::Implementation
namespace UnityEngine::UIElements::UIR::Implementation {
  // Forward declaring type: UIRStylePainter
  class UIRStylePainter;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Skipping declaration: IntPtr because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: RenderChain
  class RenderChain;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIR::RenderChain);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::RenderChain*, "UnityEngine.UIElements.UIR", "RenderChain");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.UIR.RenderChain
  // [TokenAttribute] Offset: FFFFFFFF
  class RenderChain : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::UIR::RenderChain::DepthOrderedDirtyTracking
    struct DepthOrderedDirtyTracking;
    // Nested type: ::UnityEngine::UIElements::UIR::RenderChain::RenderChainStaticIndexAllocator
    struct RenderChainStaticIndexAllocator;
    // Nested type: ::UnityEngine::UIElements::UIR::RenderChain::RenderNodeData
    struct RenderNodeData;
    // Nested type: ::UnityEngine::UIElements::UIR::RenderChain::$$c
    class $$c;
    // Size: 0x24
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.UIR.RenderChain/DepthOrderedDirtyTracking
    // [TokenAttribute] Offset: FFFFFFFF
    struct DepthOrderedDirtyTracking/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElement> heads
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>* heads;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>*) == 0x8);
      // public System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElement> tails
      // Size: 0x8
      // Offset: 0x8
      ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>* tails;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>*) == 0x8);
      // public System.Int32[] minDepths
      // Size: 0x8
      // Offset: 0x10
      ::ArrayW<int> minDepths;
      // Field size check
      static_assert(sizeof(::ArrayW<int>) == 0x8);
      // public System.Int32[] maxDepths
      // Size: 0x8
      // Offset: 0x18
      ::ArrayW<int> maxDepths;
      // Field size check
      static_assert(sizeof(::ArrayW<int>) == 0x8);
      // public System.UInt32 dirtyID
      // Size: 0x4
      // Offset: 0x20
      uint dirtyID;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      public:
      // Creating value type constructor for type: DepthOrderedDirtyTracking
      constexpr DepthOrderedDirtyTracking(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>* heads_ = {}, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>* tails_ = {}, ::ArrayW<int> minDepths_ = ::ArrayW<int>(static_cast<void*>(nullptr)), ::ArrayW<int> maxDepths_ = ::ArrayW<int>(static_cast<void*>(nullptr)), uint dirtyID_ = {}) noexcept : heads{heads_}, tails{tails_}, minDepths{minDepths_}, maxDepths{maxDepths_}, dirtyID{dirtyID_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElement> heads
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>*& dyn_heads();
      // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElement> tails
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>*& dyn_tails();
      // Get instance field reference: public System.Int32[] minDepths
      [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_minDepths();
      // Get instance field reference: public System.Int32[] maxDepths
      [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_maxDepths();
      // Get instance field reference: public System.UInt32 dirtyID
      [[deprecated("Use field access instead!")]] uint& dyn_dirtyID();
      // public System.Void EnsureFits(System.Int32 maxDepth)
      // Offset: 0x55D1808
      void EnsureFits(int maxDepth);
      // public System.Void RegisterDirty(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.UIR.RenderDataDirtyTypes dirtyTypes, UnityEngine.UIElements.UIR.RenderDataDirtyTypeClasses dirtyTypeClass)
      // Offset: 0x55D10F8
      void RegisterDirty(::UnityEngine::UIElements::VisualElement* ve, ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes dirtyTypes, ::UnityEngine::UIElements::UIR::RenderDataDirtyTypeClasses dirtyTypeClass);
      // public System.Void ClearDirty(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.UIR.RenderDataDirtyTypes dirtyTypesInverse)
      // Offset: 0x55CF9F4
      void ClearDirty(::UnityEngine::UIElements::VisualElement* ve, ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes dirtyTypesInverse);
      // public System.Void Reset()
      // Offset: 0x55CEEBC
      void Reset();
    }; // UnityEngine.UIElements.UIR.RenderChain/DepthOrderedDirtyTracking
    #pragma pack(pop)
    static check_size<sizeof(RenderChain::DepthOrderedDirtyTracking), 32 + sizeof(uint)> __UnityEngine_UIElements_UIR_RenderChain_DepthOrderedDirtyTrackingSizeCheck;
    static_assert(sizeof(RenderChain::DepthOrderedDirtyTracking) == 0x24);
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.UIR.RenderChain/RenderNodeData
    // [TokenAttribute] Offset: FFFFFFFF
    struct RenderNodeData/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Material standardMaterial
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Material* standardMaterial;
      // Field size check
      static_assert(sizeof(::UnityEngine::Material*) == 0x8);
      // public UnityEngine.Material initialMaterial
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::Material* initialMaterial;
      // Field size check
      static_assert(sizeof(::UnityEngine::Material*) == 0x8);
      // public UnityEngine.MaterialPropertyBlock matPropBlock
      // Size: 0x8
      // Offset: 0x10
      ::UnityEngine::MaterialPropertyBlock* matPropBlock;
      // Field size check
      static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
      // public UnityEngine.UIElements.UIR.RenderChainCommand firstCommand
      // Size: 0x8
      // Offset: 0x18
      ::UnityEngine::UIElements::UIR::RenderChainCommand* firstCommand;
      // Field size check
      static_assert(sizeof(::UnityEngine::UIElements::UIR::RenderChainCommand*) == 0x8);
      // public UnityEngine.UIElements.UIR.UIRenderDevice device
      // Size: 0x8
      // Offset: 0x20
      ::UnityEngine::UIElements::UIR::UIRenderDevice* device;
      // Field size check
      static_assert(sizeof(::UnityEngine::UIElements::UIR::UIRenderDevice*) == 0x8);
      // public UnityEngine.Texture vectorAtlas
      // Size: 0x8
      // Offset: 0x28
      ::UnityEngine::Texture* vectorAtlas;
      // Field size check
      static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
      // public UnityEngine.Texture shaderInfoAtlas
      // Size: 0x8
      // Offset: 0x30
      ::UnityEngine::Texture* shaderInfoAtlas;
      // Field size check
      static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
      // public System.Single dpiScale
      // Size: 0x4
      // Offset: 0x38
      float dpiScale;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public Unity.Collections.NativeSlice`1<UnityEngine.UIElements.UIR.Transform3x4> transformConstants
      // Size: 0xFFFFFFFF
      // Offset: 0x40
      ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::UIR::Transform3x4> transformConstants;
      // public Unity.Collections.NativeSlice`1<UnityEngine.Vector4> clipRectConstants
      // Size: 0xFFFFFFFF
      // Offset: 0x50
      ::Unity::Collections::NativeSlice_1<::UnityEngine::Vector4> clipRectConstants;
      public:
      // Creating value type constructor for type: RenderNodeData
      constexpr RenderNodeData(::UnityEngine::Material* standardMaterial_ = {}, ::UnityEngine::Material* initialMaterial_ = {}, ::UnityEngine::MaterialPropertyBlock* matPropBlock_ = {}, ::UnityEngine::UIElements::UIR::RenderChainCommand* firstCommand_ = {}, ::UnityEngine::UIElements::UIR::UIRenderDevice* device_ = {}, ::UnityEngine::Texture* vectorAtlas_ = {}, ::UnityEngine::Texture* shaderInfoAtlas_ = {}, float dpiScale_ = {}, ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::UIR::Transform3x4> transformConstants_ = {}, ::Unity::Collections::NativeSlice_1<::UnityEngine::Vector4> clipRectConstants_ = {}) noexcept : standardMaterial{standardMaterial_}, initialMaterial{initialMaterial_}, matPropBlock{matPropBlock_}, firstCommand{firstCommand_}, device{device_}, vectorAtlas{vectorAtlas_}, shaderInfoAtlas{shaderInfoAtlas_}, dpiScale{dpiScale_}, transformConstants{transformConstants_}, clipRectConstants{clipRectConstants_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Material standardMaterial
      [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_standardMaterial();
      // Get instance field reference: public UnityEngine.Material initialMaterial
      [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_initialMaterial();
      // Get instance field reference: public UnityEngine.MaterialPropertyBlock matPropBlock
      [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_matPropBlock();
      // Get instance field reference: public UnityEngine.UIElements.UIR.RenderChainCommand firstCommand
      [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::RenderChainCommand*& dyn_firstCommand();
      // Get instance field reference: public UnityEngine.UIElements.UIR.UIRenderDevice device
      [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::UIRenderDevice*& dyn_device();
      // Get instance field reference: public UnityEngine.Texture vectorAtlas
      [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_vectorAtlas();
      // Get instance field reference: public UnityEngine.Texture shaderInfoAtlas
      [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_shaderInfoAtlas();
      // Get instance field reference: public System.Single dpiScale
      [[deprecated("Use field access instead!")]] float& dyn_dpiScale();
      // Get instance field reference: public Unity.Collections.NativeSlice`1<UnityEngine.UIElements.UIR.Transform3x4> transformConstants
      [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::UIR::Transform3x4>& dyn_transformConstants();
      // Get instance field reference: public Unity.Collections.NativeSlice`1<UnityEngine.Vector4> clipRectConstants
      [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeSlice_1<::UnityEngine::Vector4>& dyn_clipRectConstants();
    }; // UnityEngine.UIElements.UIR.RenderChain/RenderNodeData
    // WARNING Not writing size check since size may be invalid!
    public:
    // private UnityEngine.UIElements.UIR.RenderChainCommand m_FirstCommand
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::UIR::RenderChainCommand* m_FirstCommand;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::RenderChainCommand*) == 0x8);
    // private UnityEngine.UIElements.UIR.RenderChain/DepthOrderedDirtyTracking m_DirtyTracker
    // Size: 0x24
    // Offset: 0x18
    ::UnityEngine::UIElements::UIR::RenderChain::DepthOrderedDirtyTracking m_DirtyTracker;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::RenderChain::DepthOrderedDirtyTracking) == 0x24);
    // private UnityEngine.UIElements.UIR.LinkedPool`1<UnityEngine.UIElements.UIR.RenderChainCommand> m_CommandPool
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::UIElements::UIR::LinkedPool_1<::UnityEngine::UIElements::UIR::RenderChainCommand*>* m_CommandPool;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::LinkedPool_1<::UnityEngine::UIElements::UIR::RenderChainCommand*>*) == 0x8);
    // private UnityEngine.UIElements.UIR.BasicNodePool`1<UnityEngine.UIElements.UIR.TextureEntry> m_TexturePool
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::UIElements::UIR::BasicNodePool_1<::UnityEngine::UIElements::UIR::TextureEntry>* m_TexturePool;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BasicNodePool_1<::UnityEngine::UIElements::UIR::TextureEntry>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.RenderChain/RenderNodeData> m_RenderNodesData
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::RenderChain::RenderNodeData>* m_RenderNodesData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::RenderChain::RenderNodeData>*) == 0x8);
    // private UnityEngine.Shader m_DefaultShader
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Shader* m_DefaultShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_DefaultWorldSpaceShader
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Shader* m_DefaultWorldSpaceShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Material m_DefaultMat
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Material* m_DefaultMat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material m_DefaultWorldSpaceMat
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Material* m_DefaultWorldSpaceMat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Boolean m_BlockDirtyRegistration
    // Size: 0x1
    // Offset: 0x78
    bool m_BlockDirtyRegistration;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 m_StaticIndex
    // Size: 0x4
    // Offset: 0x7C
    int m_StaticIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_ActiveRenderNodes
    // Size: 0x4
    // Offset: 0x80
    int m_ActiveRenderNodes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_CustomMaterialCommands
    // Size: 0x4
    // Offset: 0x84
    int m_CustomMaterialCommands;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.UIElements.UIR.ChainBuilderStats m_Stats
    // Size: 0x60
    // Offset: 0x88
    ::UnityEngine::UIElements::UIR::ChainBuilderStats m_Stats;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::ChainBuilderStats) == 0x60);
    // private System.UInt32 m_StatsElementsAdded
    // Size: 0x4
    // Offset: 0xE8
    uint m_StatsElementsAdded;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_StatsElementsRemoved
    // Size: 0x4
    // Offset: 0xEC
    uint m_StatsElementsRemoved;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private UnityEngine.UIElements.TextureRegistry m_TextureRegistry
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::UIElements::TextureRegistry* m_TextureRegistry;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::TextureRegistry*) == 0x8);
    // private UnityEngine.UIElements.UIR.OpacityIdAccelerator <opacityIdAccelerator>k__BackingField
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::UIElements::UIR::OpacityIdAccelerator* opacityIdAccelerator;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::OpacityIdAccelerator*) == 0x8);
    // private System.Boolean <disposed>k__BackingField
    // Size: 0x1
    // Offset: 0x100
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.UIElements.BaseVisualElementPanel <panel>k__BackingField
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::UIElements::BaseVisualElementPanel* panel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BaseVisualElementPanel*) == 0x8);
    // private UnityEngine.UIElements.UIR.UIRenderDevice <device>k__BackingField
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::UIElements::UIR::UIRenderDevice* device;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::UIRenderDevice*) == 0x8);
    // private UnityEngine.UIElements.AtlasBase <atlas>k__BackingField
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::UIElements::AtlasBase* atlas;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::AtlasBase*) == 0x8);
    // private UnityEngine.UIElements.UIR.VectorImageManager <vectorImageManager>k__BackingField
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::UIElements::UIR::VectorImageManager* vectorImageManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::VectorImageManager*) == 0x8);
    // private UnityEngine.UIElements.UIR.TempAllocator`1<UnityEngine.UIElements.Vertex> <vertsPool>k__BackingField
    // Size: 0x8
    // Offset: 0x128
    ::UnityEngine::UIElements::UIR::TempAllocator_1<::UnityEngine::UIElements::Vertex>* vertsPool;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::TempAllocator_1<::UnityEngine::UIElements::Vertex>*) == 0x8);
    // private UnityEngine.UIElements.UIR.TempAllocator`1<System.UInt16> <indicesPool>k__BackingField
    // Size: 0x8
    // Offset: 0x130
    ::UnityEngine::UIElements::UIR::TempAllocator_1<uint16_t>* indicesPool;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::TempAllocator_1<uint16_t>*) == 0x8);
    // private UnityEngine.UIElements.UIR.JobManager <jobManager>k__BackingField
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::UIElements::UIR::JobManager* jobManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::JobManager*) == 0x8);
    // UnityEngine.UIElements.UIR.UIRVEShaderInfoAllocator shaderInfoAllocator
    // Size: 0xFFFFFFFF
    // Offset: 0x140
    ::UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator shaderInfoAllocator;
    // private UnityEngine.UIElements.UIR.Implementation.UIRStylePainter <painter>k__BackingField
    // Size: 0x8
    // Offset: 0x210
    ::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter* painter;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*) == 0x8);
    // private System.Boolean <drawStats>k__BackingField
    // Size: 0x1
    // Offset: 0x218
    bool drawStats;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <drawInCameras>k__BackingField
    // Size: 0x1
    // Offset: 0x219
    bool drawInCameras;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private Unity.Profiling.ProfilerMarker s_MarkerProcess
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerProcess();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_MarkerProcess
    static void _set_s_MarkerProcess(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker s_MarkerClipProcessing
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerClipProcessing();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_MarkerClipProcessing
    static void _set_s_MarkerClipProcessing(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker s_MarkerOpacityProcessing
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerOpacityProcessing();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_MarkerOpacityProcessing
    static void _set_s_MarkerOpacityProcessing(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker s_MarkerColorsProcessing
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerColorsProcessing();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_MarkerColorsProcessing
    static void _set_s_MarkerColorsProcessing(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker s_MarkerTransformProcessing
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerTransformProcessing();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_MarkerTransformProcessing
    static void _set_s_MarkerTransformProcessing(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker s_MarkerVisualsProcessing
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerVisualsProcessing();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_MarkerVisualsProcessing
    static void _set_s_MarkerVisualsProcessing(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker s_MarkerTextRegen
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerTextRegen();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_MarkerTextRegen
    static void _set_s_MarkerTextRegen(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static System.Action OnPreRender
    static ::System::Action* _get_OnPreRender();
    // Set static field: static System.Action OnPreRender
    static void _set_OnPreRender(::System::Action* value);
    // Get instance field reference: private UnityEngine.UIElements.UIR.RenderChainCommand m_FirstCommand
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::RenderChainCommand*& dyn_m_FirstCommand();
    // Get instance field reference: private UnityEngine.UIElements.UIR.RenderChain/DepthOrderedDirtyTracking m_DirtyTracker
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::RenderChain::DepthOrderedDirtyTracking& dyn_m_DirtyTracker();
    // Get instance field reference: private UnityEngine.UIElements.UIR.LinkedPool`1<UnityEngine.UIElements.UIR.RenderChainCommand> m_CommandPool
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::LinkedPool_1<::UnityEngine::UIElements::UIR::RenderChainCommand*>*& dyn_m_CommandPool();
    // Get instance field reference: private UnityEngine.UIElements.UIR.BasicNodePool`1<UnityEngine.UIElements.UIR.TextureEntry> m_TexturePool
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BasicNodePool_1<::UnityEngine::UIElements::UIR::TextureEntry>*& dyn_m_TexturePool();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.RenderChain/RenderNodeData> m_RenderNodesData
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::RenderChain::RenderNodeData>*& dyn_m_RenderNodesData();
    // Get instance field reference: private UnityEngine.Shader m_DefaultShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_DefaultShader();
    // Get instance field reference: private UnityEngine.Shader m_DefaultWorldSpaceShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_DefaultWorldSpaceShader();
    // Get instance field reference: private UnityEngine.Material m_DefaultMat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_DefaultMat();
    // Get instance field reference: private UnityEngine.Material m_DefaultWorldSpaceMat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_DefaultWorldSpaceMat();
    // Get instance field reference: private System.Boolean m_BlockDirtyRegistration
    [[deprecated("Use field access instead!")]] bool& dyn_m_BlockDirtyRegistration();
    // Get instance field reference: private System.Int32 m_StaticIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_StaticIndex();
    // Get instance field reference: private System.Int32 m_ActiveRenderNodes
    [[deprecated("Use field access instead!")]] int& dyn_m_ActiveRenderNodes();
    // Get instance field reference: private System.Int32 m_CustomMaterialCommands
    [[deprecated("Use field access instead!")]] int& dyn_m_CustomMaterialCommands();
    // Get instance field reference: private UnityEngine.UIElements.UIR.ChainBuilderStats m_Stats
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::ChainBuilderStats& dyn_m_Stats();
    // Get instance field reference: private System.UInt32 m_StatsElementsAdded
    [[deprecated("Use field access instead!")]] uint& dyn_m_StatsElementsAdded();
    // Get instance field reference: private System.UInt32 m_StatsElementsRemoved
    [[deprecated("Use field access instead!")]] uint& dyn_m_StatsElementsRemoved();
    // Get instance field reference: private UnityEngine.UIElements.TextureRegistry m_TextureRegistry
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::TextureRegistry*& dyn_m_TextureRegistry();
    // Get instance field reference: private UnityEngine.UIElements.UIR.OpacityIdAccelerator <opacityIdAccelerator>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::OpacityIdAccelerator*& dyn_$opacityIdAccelerator$k__BackingField();
    // Get instance field reference: private System.Boolean <disposed>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$disposed$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.BaseVisualElementPanel <panel>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BaseVisualElementPanel*& dyn_$panel$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.UIR.UIRenderDevice <device>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::UIRenderDevice*& dyn_$device$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.AtlasBase <atlas>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::AtlasBase*& dyn_$atlas$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.UIR.VectorImageManager <vectorImageManager>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::VectorImageManager*& dyn_$vectorImageManager$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.UIR.TempAllocator`1<UnityEngine.UIElements.Vertex> <vertsPool>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::TempAllocator_1<::UnityEngine::UIElements::Vertex>*& dyn_$vertsPool$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.UIR.TempAllocator`1<System.UInt16> <indicesPool>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::TempAllocator_1<uint16_t>*& dyn_$indicesPool$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.UIR.JobManager <jobManager>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::JobManager*& dyn_$jobManager$k__BackingField();
    // Get instance field reference: UnityEngine.UIElements.UIR.UIRVEShaderInfoAllocator shaderInfoAllocator
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::UIRVEShaderInfoAllocator& dyn_shaderInfoAllocator();
    // Get instance field reference: private UnityEngine.UIElements.UIR.Implementation.UIRStylePainter <painter>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*& dyn_$painter$k__BackingField();
    // Get instance field reference: private System.Boolean <drawStats>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$drawStats$k__BackingField();
    // Get instance field reference: private System.Boolean <drawInCameras>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$drawInCameras$k__BackingField();
    // public UnityEngine.UIElements.UIR.OpacityIdAccelerator get_opacityIdAccelerator()
    // Offset: 0x55CE3B0
    ::UnityEngine::UIElements::UIR::OpacityIdAccelerator* get_opacityIdAccelerator();
    // private System.Void set_opacityIdAccelerator(UnityEngine.UIElements.UIR.OpacityIdAccelerator value)
    // Offset: 0x55CE3B8
    void set_opacityIdAccelerator(::UnityEngine::UIElements::UIR::OpacityIdAccelerator* value);
    // static private System.Void .cctor()
    // Offset: 0x55CE3C0
    static void _cctor();
    // public System.Void .ctor(UnityEngine.UIElements.BaseVisualElementPanel panel)
    // Offset: 0x55CE66C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RenderChain* New_ctor(::UnityEngine::UIElements::BaseVisualElementPanel* panel) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::RenderChain::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RenderChain*, creationType>(panel)));
    }
    // private System.Void Constructor(UnityEngine.UIElements.BaseVisualElementPanel panelObj, UnityEngine.UIElements.UIR.UIRenderDevice deviceObj, UnityEngine.UIElements.AtlasBase atlas, UnityEngine.UIElements.UIR.VectorImageManager vectorImageMan)
    // Offset: 0x55CEA10
    void Constructor(::UnityEngine::UIElements::BaseVisualElementPanel* panelObj, ::UnityEngine::UIElements::UIR::UIRenderDevice* deviceObj, ::UnityEngine::UIElements::AtlasBase* atlas, ::UnityEngine::UIElements::UIR::VectorImageManager* vectorImageMan);
    // private System.Void Destructor()
    // Offset: 0x55CEF34
    void Destructor();
    // protected System.Boolean get_disposed()
    // Offset: 0x55CF348
    bool get_disposed();
    // private System.Void set_disposed(System.Boolean value)
    // Offset: 0x55CF350
    void set_disposed(bool value);
    // public System.Void Dispose()
    // Offset: 0x55CF35C
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x55CF3CC
    void Dispose(bool disposing);
    // public System.Void ProcessChanges()
    // Offset: 0x55CF3F8
    void ProcessChanges();
    // public System.Void Render()
    // Offset: 0x55CFBC8
    void Render();
    // public System.Void UIEOnChildAdded(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x55D0A3C
    void UIEOnChildAdded(::UnityEngine::UIElements::VisualElement* ve);
    // public System.Void UIEOnChildrenReordered(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x55D0DB0
    void UIEOnChildrenReordered(::UnityEngine::UIElements::VisualElement* ve);
    // public System.Void UIEOnChildRemoving(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x55D0F60
    void UIEOnChildRemoving(::UnityEngine::UIElements::VisualElement* ve);
    // public System.Void UIEOnRenderHintsChanged(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x55D105C
    void UIEOnRenderHintsChanged(::UnityEngine::UIElements::VisualElement* ve);
    // public System.Void UIEOnClippingChanged(UnityEngine.UIElements.VisualElement ve, System.Boolean hierarchical)
    // Offset: 0x55D0C0C
    void UIEOnClippingChanged(::UnityEngine::UIElements::VisualElement* ve, bool hierarchical);
    // public System.Void UIEOnOpacityChanged(UnityEngine.UIElements.VisualElement ve, System.Boolean hierarchical)
    // Offset: 0x55D0C98
    void UIEOnOpacityChanged(::UnityEngine::UIElements::VisualElement* ve, bool hierarchical);
    // public System.Void UIEOnColorChanged(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x55D12D0
    void UIEOnColorChanged(::UnityEngine::UIElements::VisualElement* ve);
    // public System.Void UIEOnTransformOrSizeChanged(UnityEngine.UIElements.VisualElement ve, System.Boolean transformChanged, System.Boolean clipRectSizeChanged)
    // Offset: 0x55D1350
    void UIEOnTransformOrSizeChanged(::UnityEngine::UIElements::VisualElement* ve, bool transformChanged, bool clipRectSizeChanged);
    // public System.Void UIEOnVisualsChanged(UnityEngine.UIElements.VisualElement ve, System.Boolean hierarchical)
    // Offset: 0x55D0D24
    void UIEOnVisualsChanged(::UnityEngine::UIElements::VisualElement* ve, bool hierarchical);
    // public System.Void UIEOnOpacityIdChanged(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x55D13E0
    void UIEOnOpacityIdChanged(::UnityEngine::UIElements::VisualElement* ve);
    // UnityEngine.UIElements.BaseVisualElementPanel get_panel()
    // Offset: 0x55D1460
    ::UnityEngine::UIElements::BaseVisualElementPanel* get_panel();
    // private System.Void set_panel(UnityEngine.UIElements.BaseVisualElementPanel value)
    // Offset: 0x55D1468
    void set_panel(::UnityEngine::UIElements::BaseVisualElementPanel* value);
    // UnityEngine.UIElements.UIR.UIRenderDevice get_device()
    // Offset: 0x55D1478
    ::UnityEngine::UIElements::UIR::UIRenderDevice* get_device();
    // private System.Void set_device(UnityEngine.UIElements.UIR.UIRenderDevice value)
    // Offset: 0x55D1480
    void set_device(::UnityEngine::UIElements::UIR::UIRenderDevice* value);
    // UnityEngine.UIElements.AtlasBase get_atlas()
    // Offset: 0x55D1490
    ::UnityEngine::UIElements::AtlasBase* get_atlas();
    // private System.Void set_atlas(UnityEngine.UIElements.AtlasBase value)
    // Offset: 0x55D1498
    void set_atlas(::UnityEngine::UIElements::AtlasBase* value);
    // UnityEngine.UIElements.UIR.VectorImageManager get_vectorImageManager()
    // Offset: 0x55D14A8
    ::UnityEngine::UIElements::UIR::VectorImageManager* get_vectorImageManager();
    // private System.Void set_vectorImageManager(UnityEngine.UIElements.UIR.VectorImageManager value)
    // Offset: 0x55D14B0
    void set_vectorImageManager(::UnityEngine::UIElements::UIR::VectorImageManager* value);
    // UnityEngine.UIElements.UIR.TempAllocator`1<UnityEngine.UIElements.Vertex> get_vertsPool()
    // Offset: 0x55D14C0
    ::UnityEngine::UIElements::UIR::TempAllocator_1<::UnityEngine::UIElements::Vertex>* get_vertsPool();
    // private System.Void set_vertsPool(UnityEngine.UIElements.UIR.TempAllocator`1<UnityEngine.UIElements.Vertex> value)
    // Offset: 0x55D14C8
    void set_vertsPool(::UnityEngine::UIElements::UIR::TempAllocator_1<::UnityEngine::UIElements::Vertex>* value);
    // UnityEngine.UIElements.UIR.TempAllocator`1<System.UInt16> get_indicesPool()
    // Offset: 0x55D14D8
    ::UnityEngine::UIElements::UIR::TempAllocator_1<uint16_t>* get_indicesPool();
    // private System.Void set_indicesPool(UnityEngine.UIElements.UIR.TempAllocator`1<System.UInt16> value)
    // Offset: 0x55D14E0
    void set_indicesPool(::UnityEngine::UIElements::UIR::TempAllocator_1<uint16_t>* value);
    // UnityEngine.UIElements.UIR.JobManager get_jobManager()
    // Offset: 0x55D14F0
    ::UnityEngine::UIElements::UIR::JobManager* get_jobManager();
    // private System.Void set_jobManager(UnityEngine.UIElements.UIR.JobManager value)
    // Offset: 0x55D14F8
    void set_jobManager(::UnityEngine::UIElements::UIR::JobManager* value);
    // UnityEngine.UIElements.UIR.Implementation.UIRStylePainter get_painter()
    // Offset: 0x55D1508
    ::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter* get_painter();
    // private System.Void set_painter(UnityEngine.UIElements.UIR.Implementation.UIRStylePainter value)
    // Offset: 0x55D1510
    void set_painter(::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter* value);
    // System.Boolean get_drawStats()
    // Offset: 0x55D1520
    bool get_drawStats();
    // System.Void set_drawStats(System.Boolean value)
    // Offset: 0x55D1528
    void set_drawStats(bool value);
    // System.Boolean get_drawInCameras()
    // Offset: 0x55D1534
    bool get_drawInCameras();
    // private System.Void set_drawInCameras(System.Boolean value)
    // Offset: 0x55D153C
    void set_drawInCameras(bool value);
    // System.Void set_defaultShader(UnityEngine.Shader value)
    // Offset: 0x55D1548
    void set_defaultShader(::UnityEngine::Shader* value);
    // System.Void set_defaultWorldSpaceShader(UnityEngine.Shader value)
    // Offset: 0x55D1620
    void set_defaultWorldSpaceShader(::UnityEngine::Shader* value);
    // UnityEngine.Material GetStandardMaterial()
    // Offset: 0x55CFEB0
    ::UnityEngine::Material* GetStandardMaterial();
    // UnityEngine.Material GetStandardWorldSpaceMaterial()
    // Offset: 0x55D16F8
    ::UnityEngine::Material* GetStandardWorldSpaceMaterial();
    // System.Void EnsureFitsDepth(System.Int32 depth)
    // Offset: 0x55D1800
    void EnsureFitsDepth(int depth);
    // System.Void ChildWillBeRemoved(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x55D1934
    void ChildWillBeRemoved(::UnityEngine::UIElements::VisualElement* ve);
    // UnityEngine.UIElements.UIR.RenderChainCommand AllocCommand()
    // Offset: 0x55D19E8
    ::UnityEngine::UIElements::UIR::RenderChainCommand* AllocCommand();
    // System.Void FreeCommand(UnityEngine.UIElements.UIR.RenderChainCommand cmd)
    // Offset: 0x55D1A50
    void FreeCommand(::UnityEngine::UIElements::UIR::RenderChainCommand* cmd);
    // System.Void OnRenderCommandAdded(UnityEngine.UIElements.UIR.RenderChainCommand command)
    // Offset: 0x55D1B00
    void OnRenderCommandAdded(::UnityEngine::UIElements::UIR::RenderChainCommand* command);
    // System.Void OnRenderCommandsRemoved(UnityEngine.UIElements.UIR.RenderChainCommand firstCommand, UnityEngine.UIElements.UIR.RenderChainCommand lastCommand)
    // Offset: 0x55D1B98
    void OnRenderCommandsRemoved(::UnityEngine::UIElements::UIR::RenderChainCommand* firstCommand, ::UnityEngine::UIElements::UIR::RenderChainCommand* lastCommand);
    // static private UnityEngine.UIElements.UIR.RenderChain/RenderNodeData AccessRenderNodeData(System.IntPtr obj)
    // Offset: 0x55D1BC8
    static ::UnityEngine::UIElements::UIR::RenderChain::RenderNodeData AccessRenderNodeData(::System::IntPtr obj);
    // static private System.Void OnRenderNodeExecute(System.IntPtr obj)
    // Offset: 0x55D1CA0
    static void OnRenderNodeExecute(::System::IntPtr obj);
    // static private System.Void OnRegisterIntermediateRenderers(UnityEngine.Camera camera)
    // Offset: 0x55D1D48
    static void OnRegisterIntermediateRenderers(::UnityEngine::Camera* camera);
    // static private System.Void OnRegisterIntermediateRendererMat(UnityEngine.UIElements.BaseRuntimePanel rtp, UnityEngine.UIElements.UIR.RenderChain renderChain, ref UnityEngine.UIElements.UIR.RenderChain/RenderNodeData rnd, UnityEngine.Camera camera, System.Int32 sameDistanceSortPriority)
    // Offset: 0x55D21EC
    static void OnRegisterIntermediateRendererMat(::UnityEngine::UIElements::BaseRuntimePanel* rtp, ::UnityEngine::UIElements::UIR::RenderChain* renderChain, ByRef<::UnityEngine::UIElements::UIR::RenderChain::RenderNodeData> rnd, ::UnityEngine::Camera* camera, int sameDistanceSortPriority);
    // System.Void RepaintTexturedElements()
    // Offset: 0x55D2544
    void RepaintTexturedElements();
    // public System.Void AppendTexture(UnityEngine.UIElements.VisualElement ve, UnityEngine.Texture src, UnityEngine.UIElements.TextureId id, System.Boolean isAtlas)
    // Offset: 0x55D2624
    void AppendTexture(::UnityEngine::UIElements::VisualElement* ve, ::UnityEngine::Texture* src, ::UnityEngine::UIElements::TextureId id, bool isAtlas);
    // public System.Void ResetTextures(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x55CF230
    void ResetTextures(::UnityEngine::UIElements::VisualElement* ve);
    // private System.Void DrawStats()
    // Offset: 0x55CFFB8
    void DrawStats();
    // static private UnityEngine.UIElements.VisualElement GetFirstElementInPanel(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x55CF1E8
    static ::UnityEngine::UIElements::VisualElement* GetFirstElementInPanel(::UnityEngine::UIElements::VisualElement* ve);
  }; // UnityEngine.UIElements.UIR.RenderChain
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::RenderChain::RenderNodeData, "UnityEngine.UIElements.UIR", "RenderChain/RenderNodeData");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::RenderChain::DepthOrderedDirtyTracking, "UnityEngine.UIElements.UIR", "RenderChain/DepthOrderedDirtyTracking");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::get_opacityIdAccelerator
// Il2CppName: get_opacityIdAccelerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::OpacityIdAccelerator* (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::get_opacityIdAccelerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "get_opacityIdAccelerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::set_opacityIdAccelerator
// Il2CppName: set_opacityIdAccelerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::UIR::OpacityIdAccelerator*)>(&UnityEngine::UIElements::UIR::RenderChain::set_opacityIdAccelerator)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "OpacityIdAccelerator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "set_opacityIdAccelerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::UIR::RenderChain::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::Constructor
// Il2CppName: Constructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::BaseVisualElementPanel*, ::UnityEngine::UIElements::UIR::UIRenderDevice*, ::UnityEngine::UIElements::AtlasBase*, ::UnityEngine::UIElements::UIR::VectorImageManager*)>(&UnityEngine::UIElements::UIR::RenderChain::Constructor)> {
  static const MethodInfo* get() {
    static auto* panelObj = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "BaseVisualElementPanel")->byval_arg;
    static auto* deviceObj = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "UIRenderDevice")->byval_arg;
    static auto* atlas = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "AtlasBase")->byval_arg;
    static auto* vectorImageMan = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "VectorImageManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "Constructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{panelObj, deviceObj, atlas, vectorImageMan});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::Destructor
// Il2CppName: Destructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::Destructor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "Destructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::get_disposed
// Il2CppName: get_disposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::get_disposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "get_disposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::set_disposed
// Il2CppName: set_disposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(bool)>(&UnityEngine::UIElements::UIR::RenderChain::set_disposed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "set_disposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(bool)>(&UnityEngine::UIElements::UIR::RenderChain::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::ProcessChanges
// Il2CppName: ProcessChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::ProcessChanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "ProcessChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::Render)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::UIEOnChildAdded
// Il2CppName: UIEOnChildAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UIR::RenderChain::UIEOnChildAdded)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "UIEOnChildAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::UIEOnChildrenReordered
// Il2CppName: UIEOnChildrenReordered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UIR::RenderChain::UIEOnChildrenReordered)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "UIEOnChildrenReordered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::UIEOnChildRemoving
// Il2CppName: UIEOnChildRemoving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UIR::RenderChain::UIEOnChildRemoving)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "UIEOnChildRemoving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::UIEOnRenderHintsChanged
// Il2CppName: UIEOnRenderHintsChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UIR::RenderChain::UIEOnRenderHintsChanged)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "UIEOnRenderHintsChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::UIEOnClippingChanged
// Il2CppName: UIEOnClippingChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::VisualElement*, bool)>(&UnityEngine::UIElements::UIR::RenderChain::UIEOnClippingChanged)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* hierarchical = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "UIEOnClippingChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, hierarchical});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::UIEOnOpacityChanged
// Il2CppName: UIEOnOpacityChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::VisualElement*, bool)>(&UnityEngine::UIElements::UIR::RenderChain::UIEOnOpacityChanged)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* hierarchical = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "UIEOnOpacityChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, hierarchical});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::UIEOnColorChanged
// Il2CppName: UIEOnColorChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UIR::RenderChain::UIEOnColorChanged)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "UIEOnColorChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::UIEOnTransformOrSizeChanged
// Il2CppName: UIEOnTransformOrSizeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::VisualElement*, bool, bool)>(&UnityEngine::UIElements::UIR::RenderChain::UIEOnTransformOrSizeChanged)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* transformChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* clipRectSizeChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "UIEOnTransformOrSizeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, transformChanged, clipRectSizeChanged});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::UIEOnVisualsChanged
// Il2CppName: UIEOnVisualsChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::VisualElement*, bool)>(&UnityEngine::UIElements::UIR::RenderChain::UIEOnVisualsChanged)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* hierarchical = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "UIEOnVisualsChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, hierarchical});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::UIEOnOpacityIdChanged
// Il2CppName: UIEOnOpacityIdChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UIR::RenderChain::UIEOnOpacityIdChanged)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "UIEOnOpacityIdChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::get_panel
// Il2CppName: get_panel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::BaseVisualElementPanel* (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::get_panel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "get_panel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::set_panel
// Il2CppName: set_panel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::BaseVisualElementPanel*)>(&UnityEngine::UIElements::UIR::RenderChain::set_panel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "BaseVisualElementPanel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "set_panel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::get_device
// Il2CppName: get_device
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::UIRenderDevice* (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::get_device)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "get_device", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::set_device
// Il2CppName: set_device
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::UIR::UIRenderDevice*)>(&UnityEngine::UIElements::UIR::RenderChain::set_device)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "UIRenderDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "set_device", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::get_atlas
// Il2CppName: get_atlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::AtlasBase* (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::get_atlas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "get_atlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::set_atlas
// Il2CppName: set_atlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::AtlasBase*)>(&UnityEngine::UIElements::UIR::RenderChain::set_atlas)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "AtlasBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "set_atlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::get_vectorImageManager
// Il2CppName: get_vectorImageManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::VectorImageManager* (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::get_vectorImageManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "get_vectorImageManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::set_vectorImageManager
// Il2CppName: set_vectorImageManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::UIR::VectorImageManager*)>(&UnityEngine::UIElements::UIR::RenderChain::set_vectorImageManager)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "VectorImageManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "set_vectorImageManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::get_vertsPool
// Il2CppName: get_vertsPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::TempAllocator_1<::UnityEngine::UIElements::Vertex>* (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::get_vertsPool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "get_vertsPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::set_vertsPool
// Il2CppName: set_vertsPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::UIR::TempAllocator_1<::UnityEngine::UIElements::Vertex>*)>(&UnityEngine::UIElements::UIR::RenderChain::set_vertsPool)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "TempAllocator`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Vertex")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "set_vertsPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::get_indicesPool
// Il2CppName: get_indicesPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::TempAllocator_1<uint16_t>* (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::get_indicesPool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "get_indicesPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::set_indicesPool
// Il2CppName: set_indicesPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::UIR::TempAllocator_1<uint16_t>*)>(&UnityEngine::UIElements::UIR::RenderChain::set_indicesPool)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "TempAllocator`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "set_indicesPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::get_jobManager
// Il2CppName: get_jobManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::JobManager* (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::get_jobManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "get_jobManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::set_jobManager
// Il2CppName: set_jobManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::UIR::JobManager*)>(&UnityEngine::UIElements::UIR::RenderChain::set_jobManager)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "JobManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "set_jobManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::get_painter
// Il2CppName: get_painter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter* (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::get_painter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "get_painter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::set_painter
// Il2CppName: set_painter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*)>(&UnityEngine::UIElements::UIR::RenderChain::set_painter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR.Implementation", "UIRStylePainter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "set_painter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::get_drawStats
// Il2CppName: get_drawStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::get_drawStats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "get_drawStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::set_drawStats
// Il2CppName: set_drawStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(bool)>(&UnityEngine::UIElements::UIR::RenderChain::set_drawStats)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "set_drawStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::get_drawInCameras
// Il2CppName: get_drawInCameras
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::get_drawInCameras)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "get_drawInCameras", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::set_drawInCameras
// Il2CppName: set_drawInCameras
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(bool)>(&UnityEngine::UIElements::UIR::RenderChain::set_drawInCameras)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "set_drawInCameras", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::set_defaultShader
// Il2CppName: set_defaultShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::Shader*)>(&UnityEngine::UIElements::UIR::RenderChain::set_defaultShader)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Shader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "set_defaultShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::set_defaultWorldSpaceShader
// Il2CppName: set_defaultWorldSpaceShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::Shader*)>(&UnityEngine::UIElements::UIR::RenderChain::set_defaultWorldSpaceShader)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Shader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "set_defaultWorldSpaceShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::GetStandardMaterial
// Il2CppName: GetStandardMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::GetStandardMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "GetStandardMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::GetStandardWorldSpaceMaterial
// Il2CppName: GetStandardWorldSpaceMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::GetStandardWorldSpaceMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "GetStandardWorldSpaceMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::EnsureFitsDepth
// Il2CppName: EnsureFitsDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(int)>(&UnityEngine::UIElements::UIR::RenderChain::EnsureFitsDepth)> {
  static const MethodInfo* get() {
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "EnsureFitsDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{depth});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::ChildWillBeRemoved
// Il2CppName: ChildWillBeRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UIR::RenderChain::ChildWillBeRemoved)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "ChildWillBeRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::AllocCommand
// Il2CppName: AllocCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::RenderChainCommand* (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::AllocCommand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "AllocCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::FreeCommand
// Il2CppName: FreeCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::UIR::RenderChainCommand*)>(&UnityEngine::UIElements::UIR::RenderChain::FreeCommand)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "RenderChainCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "FreeCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::OnRenderCommandAdded
// Il2CppName: OnRenderCommandAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::UIR::RenderChainCommand*)>(&UnityEngine::UIElements::UIR::RenderChain::OnRenderCommandAdded)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "RenderChainCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "OnRenderCommandAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::OnRenderCommandsRemoved
// Il2CppName: OnRenderCommandsRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::UIR::RenderChainCommand*, ::UnityEngine::UIElements::UIR::RenderChainCommand*)>(&UnityEngine::UIElements::UIR::RenderChain::OnRenderCommandsRemoved)> {
  static const MethodInfo* get() {
    static auto* firstCommand = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "RenderChainCommand")->byval_arg;
    static auto* lastCommand = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "RenderChainCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "OnRenderCommandsRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstCommand, lastCommand});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::AccessRenderNodeData
// Il2CppName: AccessRenderNodeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::RenderChain::RenderNodeData (*)(::System::IntPtr)>(&UnityEngine::UIElements::UIR::RenderChain::AccessRenderNodeData)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "AccessRenderNodeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::OnRenderNodeExecute
// Il2CppName: OnRenderNodeExecute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&UnityEngine::UIElements::UIR::RenderChain::OnRenderNodeExecute)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "OnRenderNodeExecute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::OnRegisterIntermediateRenderers
// Il2CppName: OnRegisterIntermediateRenderers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*)>(&UnityEngine::UIElements::UIR::RenderChain::OnRegisterIntermediateRenderers)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "OnRegisterIntermediateRenderers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::OnRegisterIntermediateRendererMat
// Il2CppName: OnRegisterIntermediateRendererMat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UIElements::BaseRuntimePanel*, ::UnityEngine::UIElements::UIR::RenderChain*, ByRef<::UnityEngine::UIElements::UIR::RenderChain::RenderNodeData>, ::UnityEngine::Camera*, int)>(&UnityEngine::UIElements::UIR::RenderChain::OnRegisterIntermediateRendererMat)> {
  static const MethodInfo* get() {
    static auto* rtp = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "BaseRuntimePanel")->byval_arg;
    static auto* renderChain = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "RenderChain")->byval_arg;
    static auto* rnd = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "RenderChain/RenderNodeData")->this_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* sameDistanceSortPriority = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "OnRegisterIntermediateRendererMat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rtp, renderChain, rnd, camera, sameDistanceSortPriority});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::RepaintTexturedElements
// Il2CppName: RepaintTexturedElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::RepaintTexturedElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "RepaintTexturedElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::AppendTexture
// Il2CppName: AppendTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::Texture*, ::UnityEngine::UIElements::TextureId, bool)>(&UnityEngine::UIElements::UIR::RenderChain::AppendTexture)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TextureId")->byval_arg;
    static auto* isAtlas = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "AppendTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, src, id, isAtlas});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::ResetTextures
// Il2CppName: ResetTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UIR::RenderChain::ResetTextures)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "ResetTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::DrawStats
// Il2CppName: DrawStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChain::*)()>(&UnityEngine::UIElements::UIR::RenderChain::DrawStats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "DrawStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChain::GetFirstElementInPanel
// Il2CppName: GetFirstElementInPanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UIR::RenderChain::GetFirstElementInPanel)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChain*), "GetFirstElementInPanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
