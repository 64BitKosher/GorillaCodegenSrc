// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.TextureId
#include "UnityEngine/UIElements/TextureId.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TextureRegistry
  class TextureRegistry;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: TextureSlotManager
  class TextureSlotManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIR::TextureSlotManager);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::TextureSlotManager*, "UnityEngine.UIElements.UIR", "TextureSlotManager");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UIR.TextureSlotManager
  // [TokenAttribute] Offset: FFFFFFFF
  class TextureSlotManager : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.UIElements.TextureId[] m_Textures
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::UIElements::TextureId> m_Textures;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UIElements::TextureId>) == 0x8);
    // private System.Int32[] m_Tickets
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> m_Tickets;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32 m_CurrentTicket
    // Size: 0x4
    // Offset: 0x20
    int m_CurrentTicket;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_FirstUsedTicket
    // Size: 0x4
    // Offset: 0x24
    int m_FirstUsedTicket;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector4[] m_GpuTextures
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Vector4> m_GpuTextures;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private System.Int32 <FreeSlots>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    int FreeSlots;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: FreeSlots and: textureRegistry
    char __padding5[0x4] = {};
    // UnityEngine.UIElements.TextureRegistry textureRegistry
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UIElements::TextureRegistry* textureRegistry;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::TextureRegistry*) == 0x8);
    public:
    // Get static field: static readonly System.Int32 k_SlotCount
    static int _get_k_SlotCount();
    // Set static field: static readonly System.Int32 k_SlotCount
    static void _set_k_SlotCount(int value);
    // Get static field: static readonly System.Int32 k_SlotSize
    static int _get_k_SlotSize();
    // Set static field: static readonly System.Int32 k_SlotSize
    static void _set_k_SlotSize(int value);
    // Get static field: static readonly System.Int32[] slotIds
    static ::ArrayW<int> _get_slotIds();
    // Set static field: static readonly System.Int32[] slotIds
    static void _set_slotIds(::ArrayW<int> value);
    // Get static field: static readonly System.Int32 textureTableId
    static int _get_textureTableId();
    // Set static field: static readonly System.Int32 textureTableId
    static void _set_textureTableId(int value);
    // Get instance field reference: private UnityEngine.UIElements.TextureId[] m_Textures
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UIElements::TextureId>& dyn_m_Textures();
    // Get instance field reference: private System.Int32[] m_Tickets
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_m_Tickets();
    // Get instance field reference: private System.Int32 m_CurrentTicket
    [[deprecated("Use field access instead!")]] int& dyn_m_CurrentTicket();
    // Get instance field reference: private System.Int32 m_FirstUsedTicket
    [[deprecated("Use field access instead!")]] int& dyn_m_FirstUsedTicket();
    // Get instance field reference: private UnityEngine.Vector4[] m_GpuTextures
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_GpuTextures();
    // Get instance field reference: private System.Int32 <FreeSlots>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$FreeSlots$k__BackingField();
    // Get instance field reference: UnityEngine.UIElements.TextureRegistry textureRegistry
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::TextureRegistry*& dyn_textureRegistry();
    // static private System.Void .cctor()
    // Offset: 0x55D455C
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x55D48E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextureSlotManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TextureSlotManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextureSlotManager*, creationType>()));
    }
    // public System.Void Reset()
    // Offset: 0x55D4A78
    void Reset();
    // public System.Void StartNewBatch()
    // Offset: 0x55D4C9C
    void StartNewBatch();
    // public System.Int32 IndexOf(UnityEngine.UIElements.TextureId id)
    // Offset: 0x55D4D08
    int IndexOf(::UnityEngine::UIElements::TextureId id);
    // public System.Void MarkUsed(System.Int32 slotIndex)
    // Offset: 0x55D4DDC
    void MarkUsed(int slotIndex);
    // public System.Int32 get_FreeSlots()
    // Offset: 0x55D4E34
    int get_FreeSlots();
    // private System.Void set_FreeSlots(System.Int32 value)
    // Offset: 0x55D4E3C
    void set_FreeSlots(int value);
    // public System.Int32 FindOldestSlot()
    // Offset: 0x55D4E44
    int FindOldestSlot();
    // public System.Void Bind(UnityEngine.UIElements.TextureId id, System.Single sdfScale, System.Int32 slot, UnityEngine.MaterialPropertyBlock mat)
    // Offset: 0x55D4F14
    void Bind(::UnityEngine::UIElements::TextureId id, float sdfScale, int slot, ::UnityEngine::MaterialPropertyBlock* mat);
    // public System.Void SetGpuData(System.Int32 slotIndex, UnityEngine.UIElements.TextureId id, System.Int32 textureWidth, System.Int32 textureHeight, System.Single sdfScale)
    // Offset: 0x55D4B94
    void SetGpuData(int slotIndex, ::UnityEngine::UIElements::TextureId id, int textureWidth, int textureHeight, float sdfScale);
  }; // UnityEngine.UIElements.UIR.TextureSlotManager
  #pragma pack(pop)
  static check_size<sizeof(TextureSlotManager), 56 + sizeof(::UnityEngine::UIElements::TextureRegistry*)> __UnityEngine_UIElements_UIR_TextureSlotManagerSizeCheck;
  static_assert(sizeof(TextureSlotManager) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureSlotManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::UIR::TextureSlotManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureSlotManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureSlotManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureSlotManager::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::TextureSlotManager::*)()>(&UnityEngine::UIElements::UIR::TextureSlotManager::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureSlotManager*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureSlotManager::StartNewBatch
// Il2CppName: StartNewBatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::TextureSlotManager::*)()>(&UnityEngine::UIElements::UIR::TextureSlotManager::StartNewBatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureSlotManager*), "StartNewBatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureSlotManager::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UIR::TextureSlotManager::*)(::UnityEngine::UIElements::TextureId)>(&UnityEngine::UIElements::UIR::TextureSlotManager::IndexOf)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TextureId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureSlotManager*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureSlotManager::MarkUsed
// Il2CppName: MarkUsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::TextureSlotManager::*)(int)>(&UnityEngine::UIElements::UIR::TextureSlotManager::MarkUsed)> {
  static const MethodInfo* get() {
    static auto* slotIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureSlotManager*), "MarkUsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{slotIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureSlotManager::get_FreeSlots
// Il2CppName: get_FreeSlots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UIR::TextureSlotManager::*)()>(&UnityEngine::UIElements::UIR::TextureSlotManager::get_FreeSlots)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureSlotManager*), "get_FreeSlots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureSlotManager::set_FreeSlots
// Il2CppName: set_FreeSlots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::TextureSlotManager::*)(int)>(&UnityEngine::UIElements::UIR::TextureSlotManager::set_FreeSlots)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureSlotManager*), "set_FreeSlots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureSlotManager::FindOldestSlot
// Il2CppName: FindOldestSlot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UIR::TextureSlotManager::*)()>(&UnityEngine::UIElements::UIR::TextureSlotManager::FindOldestSlot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureSlotManager*), "FindOldestSlot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureSlotManager::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::TextureSlotManager::*)(::UnityEngine::UIElements::TextureId, float, int, ::UnityEngine::MaterialPropertyBlock*)>(&UnityEngine::UIElements::UIR::TextureSlotManager::Bind)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TextureId")->byval_arg;
    static auto* sdfScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* slot = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureSlotManager*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, sdfScale, slot, mat});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureSlotManager::SetGpuData
// Il2CppName: SetGpuData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::TextureSlotManager::*)(int, ::UnityEngine::UIElements::TextureId, int, int, float)>(&UnityEngine::UIElements::UIR::TextureSlotManager::SetGpuData)> {
  static const MethodInfo* get() {
    static auto* slotIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TextureId")->byval_arg;
    static auto* textureWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* textureHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sdfScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureSlotManager*), "SetGpuData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{slotIndex, id, textureWidth, textureHeight, sdfScale});
  }
};
