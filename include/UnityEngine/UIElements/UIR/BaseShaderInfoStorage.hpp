// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Profiling.ProfilerMarker
#include "Unity/Profiling/ProfilerMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: RectInt
  struct RectInt;
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: BaseShaderInfoStorage
  class BaseShaderInfoStorage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIR::BaseShaderInfoStorage);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::BaseShaderInfoStorage*, "UnityEngine.UIElements.UIR", "BaseShaderInfoStorage");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x11
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UIR.BaseShaderInfoStorage
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseShaderInfoStorage : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Boolean <disposed>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return disposed;
    }
    // Get static field: static protected System.Int32 s_TextureCounter
    static int _get_s_TextureCounter();
    // Set static field: static protected System.Int32 s_TextureCounter
    static void _set_s_TextureCounter(int value);
    // Get static field: static Unity.Profiling.ProfilerMarker s_MarkerCopyTexture
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerCopyTexture();
    // Set static field: static Unity.Profiling.ProfilerMarker s_MarkerCopyTexture
    static void _set_s_MarkerCopyTexture(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static Unity.Profiling.ProfilerMarker s_MarkerGetTextureData
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerGetTextureData();
    // Set static field: static Unity.Profiling.ProfilerMarker s_MarkerGetTextureData
    static void _set_s_MarkerGetTextureData(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static Unity.Profiling.ProfilerMarker s_MarkerUpdateTexture
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerUpdateTexture();
    // Set static field: static Unity.Profiling.ProfilerMarker s_MarkerUpdateTexture
    static void _set_s_MarkerUpdateTexture(::Unity::Profiling::ProfilerMarker value);
    // Get instance field reference: private System.Boolean <disposed>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$disposed$k__BackingField();
    // public UnityEngine.Texture2D get_texture()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Texture2D* get_texture();
    // public System.Boolean AllocateRect(System.Int32 width, System.Int32 height, out UnityEngine.RectInt uvs)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool AllocateRect(int width, int height, ByRef<::UnityEngine::RectInt> uvs);
    // public System.Void SetTexel(System.Int32 x, System.Int32 y, UnityEngine.Color color)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetTexel(int x, int y, ::UnityEngine::Color color);
    // public System.Void UpdateTexture()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateTexture();
    // protected System.Boolean get_disposed()
    // Offset: 0x55D2B48
    bool get_disposed();
    // private System.Void set_disposed(System.Boolean value)
    // Offset: 0x55D2B50
    void set_disposed(bool value);
    // public System.Void Dispose()
    // Offset: 0x55D2B5C
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x55D2BC8
    void Dispose(bool disposing);
    // protected System.Void .ctor()
    // Offset: 0x55D2BE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseShaderInfoStorage* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::BaseShaderInfoStorage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseShaderInfoStorage*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x55D2BE8
    static void _cctor();
  }; // UnityEngine.UIElements.UIR.BaseShaderInfoStorage
  #pragma pack(pop)
  static check_size<sizeof(BaseShaderInfoStorage), 16 + sizeof(bool)> __UnityEngine_UIElements_UIR_BaseShaderInfoStorageSizeCheck;
  static_assert(sizeof(BaseShaderInfoStorage) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BaseShaderInfoStorage::get_texture
// Il2CppName: get_texture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (UnityEngine::UIElements::UIR::BaseShaderInfoStorage::*)()>(&UnityEngine::UIElements::UIR::BaseShaderInfoStorage::get_texture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BaseShaderInfoStorage*), "get_texture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BaseShaderInfoStorage::AllocateRect
// Il2CppName: AllocateRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UIR::BaseShaderInfoStorage::*)(int, int, ByRef<::UnityEngine::RectInt>)>(&UnityEngine::UIElements::UIR::BaseShaderInfoStorage::AllocateRect)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectInt")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BaseShaderInfoStorage*), "AllocateRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BaseShaderInfoStorage::SetTexel
// Il2CppName: SetTexel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::BaseShaderInfoStorage::*)(int, int, ::UnityEngine::Color)>(&UnityEngine::UIElements::UIR::BaseShaderInfoStorage::SetTexel)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BaseShaderInfoStorage*), "SetTexel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, color});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BaseShaderInfoStorage::UpdateTexture
// Il2CppName: UpdateTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::BaseShaderInfoStorage::*)()>(&UnityEngine::UIElements::UIR::BaseShaderInfoStorage::UpdateTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BaseShaderInfoStorage*), "UpdateTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BaseShaderInfoStorage::get_disposed
// Il2CppName: get_disposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UIR::BaseShaderInfoStorage::*)()>(&UnityEngine::UIElements::UIR::BaseShaderInfoStorage::get_disposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BaseShaderInfoStorage*), "get_disposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BaseShaderInfoStorage::set_disposed
// Il2CppName: set_disposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::BaseShaderInfoStorage::*)(bool)>(&UnityEngine::UIElements::UIR::BaseShaderInfoStorage::set_disposed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BaseShaderInfoStorage*), "set_disposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BaseShaderInfoStorage::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::BaseShaderInfoStorage::*)()>(&UnityEngine::UIElements::UIR::BaseShaderInfoStorage::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BaseShaderInfoStorage*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BaseShaderInfoStorage::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::BaseShaderInfoStorage::*)(bool)>(&UnityEngine::UIElements::UIR::BaseShaderInfoStorage::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BaseShaderInfoStorage*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BaseShaderInfoStorage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BaseShaderInfoStorage::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::UIR::BaseShaderInfoStorage::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BaseShaderInfoStorage*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
