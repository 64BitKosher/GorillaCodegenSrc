// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Collections.NativeSlice`1
#include "Unity/Collections/NativeSlice_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Skipping declaration: Page because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: TempAllocator`1<T>
  template<typename T>
  class TempAllocator_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::UIR::TempAllocator_1, "UnityEngine.UIElements.UIR", "TempAllocator`1");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.UIR.TempAllocator`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class TempAllocator_1 : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::UIR::TempAllocator_1::Page<T>
    struct Page;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.UIR.TempAllocator`1/Page
    // [TokenAttribute] Offset: FFFFFFFF
    struct Page : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType*/ {
      public:
      using declaring_type = TempAllocator_1<T>*;
      static constexpr std::string_view NESTED_NAME = "Page";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // public Unity.Collections.NativeArray`1<T> array
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      ::Unity::Collections::NativeArray_1<T> array;
      // public System.Int32 used
      // Size: 0x4
      // Offset: 0x0
      int used;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Page
      constexpr Page(::Unity::Collections::NativeArray_1<T> array_ = {}, int used_ = {}) noexcept : array{array_}, used{used_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: public Unity.Collections.NativeArray`1<T> array
      [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<T>& dyn_array() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::Page::dyn_array");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "array"))->offset;
        return *reinterpret_cast<::Unity::Collections::NativeArray_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Int32 used
      [[deprecated("Use field access instead!")]] int& dyn_used() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::Page::dyn_used");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "used"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
    }; // UnityEngine.UIElements.UIR.TempAllocator`1/Page
    // Could not write size check! Type: UnityEngine.UIElements.UIR.TempAllocator`1/Page is generic, or has no fields that are valid for size checks!
    public:
    // private readonly System.Int32 m_ExcessMinCapacity
    // Size: 0x4
    // Offset: 0x0
    int m_ExcessMinCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 m_ExcessMaxCapacity
    // Size: 0x4
    // Offset: 0x0
    int m_ExcessMaxCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.UIElements.UIR.TempAllocator`1/Page<T> m_Pool
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    typename ::UnityEngine::UIElements::UIR::TempAllocator_1<T>::Page m_Pool;
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.TempAllocator`1/Page<T>> m_Excess
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<typename ::UnityEngine::UIElements::UIR::TempAllocator_1<T>::Page>* m_Excess;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<typename ::UnityEngine::UIElements::UIR::TempAllocator_1<T>::Page>*) == 0x8);
    // private System.Int32 m_NextExcessSize
    // Size: 0x4
    // Offset: 0x0
    int m_NextExcessSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <disposed>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 m_ExcessMinCapacity
    [[deprecated("Use field access instead!")]] int& dyn_m_ExcessMinCapacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::dyn_m_ExcessMinCapacity");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ExcessMinCapacity"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 m_ExcessMaxCapacity
    [[deprecated("Use field access instead!")]] int& dyn_m_ExcessMaxCapacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::dyn_m_ExcessMaxCapacity");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ExcessMaxCapacity"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.UIR.TempAllocator`1/Page<T> m_Pool
    [[deprecated("Use field access instead!")]] typename ::UnityEngine::UIElements::UIR::TempAllocator_1<T>::Page& dyn_m_Pool() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::dyn_m_Pool");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Pool"))->offset;
      return *reinterpret_cast<typename ::UnityEngine::UIElements::UIR::TempAllocator_1<T>::Page*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.TempAllocator`1/Page<T>> m_Excess
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<typename ::UnityEngine::UIElements::UIR::TempAllocator_1<T>::Page>*& dyn_m_Excess() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::dyn_m_Excess");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Excess"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<typename ::UnityEngine::UIElements::UIR::TempAllocator_1<T>::Page>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 m_NextExcessSize
    [[deprecated("Use field access instead!")]] int& dyn_m_NextExcessSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::dyn_m_NextExcessSize");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_NextExcessSize"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <disposed>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$disposed$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::dyn_$disposed$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<disposed>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.Int32 poolCapacity, System.Int32 excessMinCapacity, System.Int32 excessMaxCapacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TempAllocator_1<T>* New_ctor(int poolCapacity, int excessMinCapacity, int excessMaxCapacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TempAllocator_1<T>*, creationType>(poolCapacity, excessMinCapacity, excessMaxCapacity)));
    }
    // protected System.Boolean get_disposed()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_disposed() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::get_disposed");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void set_disposed(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_disposed(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::set_disposed");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_disposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::UIR::TempAllocator_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose(bool disposing) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::Dispose");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
    }
    // public Unity.Collections.NativeSlice`1<T> Alloc(System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Unity::Collections::NativeSlice_1<T> Alloc(int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::Alloc");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Alloc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
      return ::il2cpp_utils::RunMethodRethrow<::Unity::Collections::NativeSlice_1<T>, false>(this, ___internal__method, count);
    }
    // public System.Void Reset()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Reset() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::Reset");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void ReleaseExcess()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ReleaseExcess() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TempAllocator_1::ReleaseExcess");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseExcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // UnityEngine.UIElements.UIR.TempAllocator`1
  // Could not write size check! Type: UnityEngine.UIElements.UIR.TempAllocator`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
