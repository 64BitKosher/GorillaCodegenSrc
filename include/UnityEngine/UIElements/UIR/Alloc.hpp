// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: Alloc
  struct Alloc;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::Alloc, "UnityEngine.UIElements.UIR", "Alloc");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x11
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.UIR.Alloc
  // [TokenAttribute] Offset: FFFFFFFF
  struct Alloc/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt32 start
    // Size: 0x4
    // Offset: 0x0
    uint start;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 size
    // Size: 0x4
    // Offset: 0x4
    uint size;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.Object handle
    // Size: 0x8
    // Offset: 0x8
    ::Il2CppObject* handle;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // System.Boolean shortLived
    // Size: 0x1
    // Offset: 0x10
    bool shortLived;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: Alloc
    constexpr Alloc(uint start_ = {}, uint size_ = {}, ::Il2CppObject* handle_ = {}, bool shortLived_ = {}) noexcept : start{start_}, size{size_}, handle{handle_}, shortLived{shortLived_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt32 start
    [[deprecated("Use field access instead!")]] uint& dyn_start();
    // Get instance field reference: public System.UInt32 size
    [[deprecated("Use field access instead!")]] uint& dyn_size();
    // Get instance field reference: System.Object handle
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_handle();
    // Get instance field reference: System.Boolean shortLived
    [[deprecated("Use field access instead!")]] bool& dyn_shortLived();
  }; // UnityEngine.UIElements.UIR.Alloc
  #pragma pack(pop)
  static check_size<sizeof(Alloc), 16 + sizeof(bool)> __UnityEngine_UIElements_UIR_AllocSizeCheck;
  static_assert(sizeof(Alloc) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
