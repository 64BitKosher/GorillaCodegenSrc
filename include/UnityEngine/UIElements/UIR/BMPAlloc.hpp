// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.UIR.OwnedState
#include "UnityEngine/UIElements/UIR/OwnedState.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: BMPAlloc
  struct BMPAlloc;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::BMPAlloc, "UnityEngine.UIElements.UIR", "BMPAlloc");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.UIR.BMPAlloc
  // [TokenAttribute] Offset: FFFFFFFF
  struct BMPAlloc/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 page
    // Size: 0x4
    // Offset: 0x0
    int page;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.UInt16 pageLine
    // Size: 0x2
    // Offset: 0x4
    uint16_t pageLine;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.Byte bitIndex
    // Size: 0x1
    // Offset: 0x6
    uint8_t bitIndex;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public UnityEngine.UIElements.UIR.OwnedState ownedState
    // Size: 0x1
    // Offset: 0x7
    ::UnityEngine::UIElements::UIR::OwnedState ownedState;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::OwnedState) == 0x1);
    public:
    // Creating value type constructor for type: BMPAlloc
    constexpr BMPAlloc(int page_ = {}, uint16_t pageLine_ = {}, uint8_t bitIndex_ = {}, ::UnityEngine::UIElements::UIR::OwnedState ownedState_ = {}) noexcept : page{page_}, pageLine{pageLine_}, bitIndex{bitIndex_}, ownedState{ownedState_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly UnityEngine.UIElements.UIR.BMPAlloc Invalid
    static ::UnityEngine::UIElements::UIR::BMPAlloc _get_Invalid();
    // Set static field: static public readonly UnityEngine.UIElements.UIR.BMPAlloc Invalid
    static void _set_Invalid(::UnityEngine::UIElements::UIR::BMPAlloc value);
    // Get instance field reference: public System.Int32 page
    [[deprecated("Use field access instead!")]] int& dyn_page();
    // Get instance field reference: public System.UInt16 pageLine
    [[deprecated("Use field access instead!")]] uint16_t& dyn_pageLine();
    // Get instance field reference: public System.Byte bitIndex
    [[deprecated("Use field access instead!")]] uint8_t& dyn_bitIndex();
    // Get instance field reference: public UnityEngine.UIElements.UIR.OwnedState ownedState
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::OwnedState& dyn_ownedState();
    // public System.Boolean Equals(UnityEngine.UIElements.UIR.BMPAlloc other)
    // Offset: 0x55D50F8
    bool Equals(::UnityEngine::UIElements::UIR::BMPAlloc other);
    // public System.Boolean IsValid()
    // Offset: 0x55D2B18
    bool IsValid();
    // static private System.Void .cctor()
    // Offset: 0x55D5224
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0x55D5130
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.UIElements.UIR.BMPAlloc
  #pragma pack(pop)
  static check_size<sizeof(BMPAlloc), 7 + sizeof(::UnityEngine::UIElements::UIR::OwnedState)> __UnityEngine_UIElements_UIR_BMPAllocSizeCheck;
  static_assert(sizeof(BMPAlloc) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BMPAlloc::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UIR::BMPAlloc::*)(::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::BMPAlloc::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BMPAlloc), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BMPAlloc::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UIR::BMPAlloc::*)()>(&UnityEngine::UIElements::UIR::BMPAlloc::IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BMPAlloc), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BMPAlloc::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::UIR::BMPAlloc::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BMPAlloc), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::BMPAlloc::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::UIElements::UIR::BMPAlloc::*)()>(&UnityEngine::UIElements::UIR::BMPAlloc::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::BMPAlloc), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
