// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Profiling.ProfilerMarker
#include "Unity/Profiling/ProfilerMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: AtlasBase
  class AtlasBase;
  // Forward declaring type: VectorImage
  class VectorImage;
  // Forward declaring type: VisualElement
  class VisualElement;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: VectorImageRenderInfo
  class VectorImageRenderInfo;
  // Forward declaring type: VectorImageRenderInfoPool
  class VectorImageRenderInfoPool;
  // Forward declaring type: GradientRemapPool
  class GradientRemapPool;
  // Forward declaring type: GradientSettingsAtlas
  class GradientSettingsAtlas;
  // Forward declaring type: GradientRemap
  class GradientRemap;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: VectorImageManager
  class VectorImageManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIR::VectorImageManager);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::VectorImageManager*, "UnityEngine.UIElements.UIR", "VectorImageManager");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x3A
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UIR.VectorImageManager
  // [TokenAttribute] Offset: FFFFFFFF
  class VectorImageManager : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private readonly UnityEngine.UIElements.AtlasBase m_Atlas
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::AtlasBase* m_Atlas;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::AtlasBase*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.UIElements.VectorImage,UnityEngine.UIElements.UIR.VectorImageRenderInfo> m_Registered
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::UIElements::VectorImage*, ::UnityEngine::UIElements::UIR::VectorImageRenderInfo*>* m_Registered;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::UIElements::VectorImage*, ::UnityEngine::UIElements::UIR::VectorImageRenderInfo*>*) == 0x8);
    // private UnityEngine.UIElements.UIR.VectorImageRenderInfoPool m_RenderInfoPool
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UIElements::UIR::VectorImageRenderInfoPool* m_RenderInfoPool;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::VectorImageRenderInfoPool*) == 0x8);
    // private UnityEngine.UIElements.UIR.GradientRemapPool m_GradientRemapPool
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UIElements::UIR::GradientRemapPool* m_GradientRemapPool;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::GradientRemapPool*) == 0x8);
    // private UnityEngine.UIElements.UIR.GradientSettingsAtlas m_GradientSettingsAtlas
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UIElements::UIR::GradientSettingsAtlas* m_GradientSettingsAtlas;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::GradientSettingsAtlas*) == 0x8);
    // private System.Boolean m_LoggedExhaustedSettingsAtlas
    // Size: 0x1
    // Offset: 0x38
    bool m_LoggedExhaustedSettingsAtlas;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <disposed>k__BackingField
    // Size: 0x1
    // Offset: 0x39
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static public System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.VectorImageManager> instances
    static ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::VectorImageManager*>* _get_instances();
    // Set static field: static public System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.VectorImageManager> instances
    static void _set_instances(::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::VectorImageManager*>* value);
    // Get static field: static private Unity.Profiling.ProfilerMarker s_MarkerRegister
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerRegister();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_MarkerRegister
    static void _set_s_MarkerRegister(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker s_MarkerUnregister
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerUnregister();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_MarkerUnregister
    static void _set_s_MarkerUnregister(::Unity::Profiling::ProfilerMarker value);
    // Get instance field reference: private readonly UnityEngine.UIElements.AtlasBase m_Atlas
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::AtlasBase*& dyn_m_Atlas();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.UIElements.VectorImage,UnityEngine.UIElements.UIR.VectorImageRenderInfo> m_Registered
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::UIElements::VectorImage*, ::UnityEngine::UIElements::UIR::VectorImageRenderInfo*>*& dyn_m_Registered();
    // Get instance field reference: private UnityEngine.UIElements.UIR.VectorImageRenderInfoPool m_RenderInfoPool
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::VectorImageRenderInfoPool*& dyn_m_RenderInfoPool();
    // Get instance field reference: private UnityEngine.UIElements.UIR.GradientRemapPool m_GradientRemapPool
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::GradientRemapPool*& dyn_m_GradientRemapPool();
    // Get instance field reference: private UnityEngine.UIElements.UIR.GradientSettingsAtlas m_GradientSettingsAtlas
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::GradientSettingsAtlas*& dyn_m_GradientSettingsAtlas();
    // Get instance field reference: private System.Boolean m_LoggedExhaustedSettingsAtlas
    [[deprecated("Use field access instead!")]] bool& dyn_m_LoggedExhaustedSettingsAtlas();
    // Get instance field reference: private System.Boolean <disposed>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$disposed$k__BackingField();
    // public UnityEngine.Texture2D get_atlas()
    // Offset: 0x55D8920
    ::UnityEngine::Texture2D* get_atlas();
    // public System.Void .ctor(UnityEngine.UIElements.AtlasBase atlas)
    // Offset: 0x55D8934
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VectorImageManager* New_ctor(::UnityEngine::UIElements::AtlasBase* atlas) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::VectorImageManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VectorImageManager*, creationType>(atlas)));
    }
    // protected System.Boolean get_disposed()
    // Offset: 0x55D8B28
    bool get_disposed();
    // private System.Void set_disposed(System.Boolean value)
    // Offset: 0x55D8B30
    void set_disposed(bool value);
    // public System.Void Dispose()
    // Offset: 0x55D8B3C
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x55D8BA8
    void Dispose(bool disposing);
    // public System.Void Commit()
    // Offset: 0x55D8CC0
    void Commit();
    // public UnityEngine.UIElements.UIR.GradientRemap AddUser(UnityEngine.UIElements.VectorImage vi, UnityEngine.UIElements.VisualElement context)
    // Offset: 0x55D8CF0
    ::UnityEngine::UIElements::UIR::GradientRemap* AddUser(::UnityEngine::UIElements::VectorImage* vi, ::UnityEngine::UIElements::VisualElement* context);
    // private UnityEngine.UIElements.UIR.VectorImageRenderInfo Register(UnityEngine.UIElements.VectorImage vi, UnityEngine.UIElements.VisualElement context)
    // Offset: 0x55D8DF4
    ::UnityEngine::UIElements::UIR::VectorImageRenderInfo* Register(::UnityEngine::UIElements::VectorImage* vi, ::UnityEngine::UIElements::VisualElement* context);
    // static private System.Void .cctor()
    // Offset: 0x55D91D4
    static void _cctor();
  }; // UnityEngine.UIElements.UIR.VectorImageManager
  #pragma pack(pop)
  static check_size<sizeof(VectorImageManager), 57 + sizeof(bool)> __UnityEngine_UIElements_UIR_VectorImageManagerSizeCheck;
  static_assert(sizeof(VectorImageManager) == 0x3A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::VectorImageManager::get_atlas
// Il2CppName: get_atlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (UnityEngine::UIElements::UIR::VectorImageManager::*)()>(&UnityEngine::UIElements::UIR::VectorImageManager::get_atlas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::VectorImageManager*), "get_atlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::VectorImageManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::VectorImageManager::get_disposed
// Il2CppName: get_disposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UIR::VectorImageManager::*)()>(&UnityEngine::UIElements::UIR::VectorImageManager::get_disposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::VectorImageManager*), "get_disposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::VectorImageManager::set_disposed
// Il2CppName: set_disposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::VectorImageManager::*)(bool)>(&UnityEngine::UIElements::UIR::VectorImageManager::set_disposed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::VectorImageManager*), "set_disposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::VectorImageManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::VectorImageManager::*)()>(&UnityEngine::UIElements::UIR::VectorImageManager::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::VectorImageManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::VectorImageManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::VectorImageManager::*)(bool)>(&UnityEngine::UIElements::UIR::VectorImageManager::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::VectorImageManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::VectorImageManager::Commit
// Il2CppName: Commit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::VectorImageManager::*)()>(&UnityEngine::UIElements::UIR::VectorImageManager::Commit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::VectorImageManager*), "Commit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::VectorImageManager::AddUser
// Il2CppName: AddUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::GradientRemap* (UnityEngine::UIElements::UIR::VectorImageManager::*)(::UnityEngine::UIElements::VectorImage*, ::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UIR::VectorImageManager::AddUser)> {
  static const MethodInfo* get() {
    static auto* vi = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VectorImage")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::VectorImageManager*), "AddUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vi, context});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::VectorImageManager::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::VectorImageRenderInfo* (UnityEngine::UIElements::UIR::VectorImageManager::*)(::UnityEngine::UIElements::VectorImage*, ::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UIR::VectorImageManager::Register)> {
  static const MethodInfo* get() {
    static auto* vi = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VectorImage")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::VectorImageManager*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vi, context});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::VectorImageManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::UIR::VectorImageManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::VectorImageManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
