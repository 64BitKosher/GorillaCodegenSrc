// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UIR.MeshBuilder/AllocMeshData
#include "UnityEngine/UIElements/UIR/MeshBuilder_AllocMeshData.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: MeshWriteData
  class MeshWriteData;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData::Allocator);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData::Allocator*, "UnityEngine.UIElements.UIR", "MeshBuilder/AllocMeshData/Allocator");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UIR.MeshBuilder/AllocMeshData/Allocator
  // [TokenAttribute] Offset: FFFFFFFF
  class MeshBuilder::AllocMeshData::Allocator : public ::System::MulticastDelegate {
    public:
    // public System.Void .ctor(System.Object object, System.IntPtr method)
    // Offset: 0x55CDEEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MeshBuilder::AllocMeshData::Allocator* New_ctor(::Il2CppObject* object, ::System::IntPtr method) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData::Allocator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MeshBuilder::AllocMeshData::Allocator*, creationType>(object, method)));
    }
    // public UnityEngine.UIElements.MeshWriteData Invoke(System.UInt32 vertexCount, System.UInt32 indexCount, ref UnityEngine.UIElements.UIR.MeshBuilder/AllocMeshData allocatorData)
    // Offset: 0x55CDF8C
    ::UnityEngine::UIElements::MeshWriteData* Invoke(uint vertexCount, uint indexCount, ByRef<::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData> allocatorData);
  }; // UnityEngine.UIElements.UIR.MeshBuilder/AllocMeshData/Allocator
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData::Allocator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData::Allocator::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::MeshWriteData* (UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData::Allocator::*)(uint, uint, ByRef<::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData>)>(&UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData::Allocator::Invoke)> {
  static const MethodInfo* get() {
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* indexCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* allocatorData = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "MeshBuilder/AllocMeshData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData::Allocator*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexCount, indexCount, allocatorData});
  }
};
