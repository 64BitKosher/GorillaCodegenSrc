// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UIR.Allocator2D
#include "UnityEngine/UIElements/UIR/Allocator2D.hpp"
// Including type: UnityEngine.RectInt
#include "UnityEngine/RectInt.hpp"
// Including type: UnityEngine.UIElements.UIR.Alloc
#include "UnityEngine/UIElements/UIR/Alloc.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::Allocator2D::Alloc2D, "UnityEngine.UIElements.UIR", "Allocator2D/Alloc2D");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x29
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.UIR.Allocator2D/Alloc2D
  // [TokenAttribute] Offset: FFFFFFFF
  struct Allocator2D::Alloc2D/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.RectInt rect
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::RectInt rect;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectInt) == 0x10);
    // public UnityEngine.UIElements.UIR.Allocator2D/Row row
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::UIR::Allocator2D::Row* row;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::Allocator2D::Row*) == 0x8);
    // public UnityEngine.UIElements.UIR.Alloc alloc
    // Size: 0x11
    // Offset: 0x18
    ::UnityEngine::UIElements::UIR::Alloc alloc;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::Alloc) == 0x11);
    public:
    // Creating value type constructor for type: Alloc2D
    constexpr Alloc2D(::UnityEngine::RectInt rect_ = {}, ::UnityEngine::UIElements::UIR::Allocator2D::Row* row_ = {}, ::UnityEngine::UIElements::UIR::Alloc alloc_ = {}) noexcept : rect{rect_}, row{row_}, alloc{alloc_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.RectInt rect
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectInt& dyn_rect();
    // Get instance field reference: public UnityEngine.UIElements.UIR.Allocator2D/Row row
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::Allocator2D::Row*& dyn_row();
    // Get instance field reference: public UnityEngine.UIElements.UIR.Alloc alloc
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::Alloc& dyn_alloc();
    // public System.Void .ctor(UnityEngine.UIElements.UIR.Allocator2D/Row row, UnityEngine.UIElements.UIR.Alloc alloc, System.Int32 width, System.Int32 height)
    // Offset: 0x55CB89C
    Alloc2D(::UnityEngine::UIElements::UIR::Allocator2D::Row* row, ::UnityEngine::UIElements::UIR::Alloc alloc, int width, int height);
  }; // UnityEngine.UIElements.UIR.Allocator2D/Alloc2D
  #pragma pack(pop)
  static check_size<sizeof(Allocator2D::Alloc2D), 24 + sizeof(::UnityEngine::UIElements::UIR::Alloc)> __UnityEngine_UIElements_UIR_Allocator2D_Alloc2DSizeCheck;
  static_assert(sizeof(Allocator2D::Alloc2D) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Allocator2D::Alloc2D::Alloc2D
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
