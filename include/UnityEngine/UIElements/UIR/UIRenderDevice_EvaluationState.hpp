// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UIR.UIRenderDevice
#include "UnityEngine/UIElements/UIR/UIRenderDevice.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.UIR.State
#include "UnityEngine/UIElements/UIR/State.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: Page
  class Page;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::UIRenderDevice::EvaluationState, "UnityEngine.UIElements.UIR", "UIRenderDevice/EvaluationState");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x34
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.UIR.UIRenderDevice/EvaluationState
  // [TokenAttribute] Offset: FFFFFFFF
  struct UIRenderDevice::EvaluationState/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.MaterialPropertyBlock stateMatProps
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::MaterialPropertyBlock* stateMatProps;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // public UnityEngine.Material defaultMat
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Material* defaultMat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.UIElements.UIR.State curState
    // Size: 0x14
    // Offset: 0x10
    ::UnityEngine::UIElements::UIR::State curState;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::State) == 0x14);
    // Padding between fields: curState and: curPage
    char __padding2[0x4] = {};
    // public UnityEngine.UIElements.UIR.Page curPage
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UIElements::UIR::Page* curPage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::Page*) == 0x8);
    // public System.Boolean mustApplyMaterial
    // Size: 0x1
    // Offset: 0x30
    bool mustApplyMaterial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean mustApplyCommonBlock
    // Size: 0x1
    // Offset: 0x31
    bool mustApplyCommonBlock;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean mustApplyStateBlock
    // Size: 0x1
    // Offset: 0x32
    bool mustApplyStateBlock;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean mustApplyStencil
    // Size: 0x1
    // Offset: 0x33
    bool mustApplyStencil;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: EvaluationState
    constexpr EvaluationState(::UnityEngine::MaterialPropertyBlock* stateMatProps_ = {}, ::UnityEngine::Material* defaultMat_ = {}, ::UnityEngine::UIElements::UIR::State curState_ = {}, ::UnityEngine::UIElements::UIR::Page* curPage_ = {}, bool mustApplyMaterial_ = {}, bool mustApplyCommonBlock_ = {}, bool mustApplyStateBlock_ = {}, bool mustApplyStencil_ = {}) noexcept : stateMatProps{stateMatProps_}, defaultMat{defaultMat_}, curState{curState_}, curPage{curPage_}, mustApplyMaterial{mustApplyMaterial_}, mustApplyCommonBlock{mustApplyCommonBlock_}, mustApplyStateBlock{mustApplyStateBlock_}, mustApplyStencil{mustApplyStencil_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.MaterialPropertyBlock stateMatProps
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_stateMatProps();
    // Get instance field reference: public UnityEngine.Material defaultMat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_defaultMat();
    // Get instance field reference: public UnityEngine.UIElements.UIR.State curState
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::State& dyn_curState();
    // Get instance field reference: public UnityEngine.UIElements.UIR.Page curPage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::Page*& dyn_curPage();
    // Get instance field reference: public System.Boolean mustApplyMaterial
    [[deprecated("Use field access instead!")]] bool& dyn_mustApplyMaterial();
    // Get instance field reference: public System.Boolean mustApplyCommonBlock
    [[deprecated("Use field access instead!")]] bool& dyn_mustApplyCommonBlock();
    // Get instance field reference: public System.Boolean mustApplyStateBlock
    [[deprecated("Use field access instead!")]] bool& dyn_mustApplyStateBlock();
    // Get instance field reference: public System.Boolean mustApplyStencil
    [[deprecated("Use field access instead!")]] bool& dyn_mustApplyStencil();
  }; // UnityEngine.UIElements.UIR.UIRenderDevice/EvaluationState
  #pragma pack(pop)
  static check_size<sizeof(UIRenderDevice::EvaluationState), 51 + sizeof(bool)> __UnityEngine_UIElements_UIR_UIRenderDevice_EvaluationStateSizeCheck;
  static_assert(sizeof(UIRenderDevice::EvaluationState) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
