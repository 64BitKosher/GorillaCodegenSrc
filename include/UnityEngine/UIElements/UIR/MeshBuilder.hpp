// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Profiling.ProfilerMarker
#include "Unity/Profiling/ProfilerMarker.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: VertexFlags
  struct VertexFlags;
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Vertex
  struct Vertex;
}
// Forward declaring namespace: UnityEngine::TextCore::Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: MeshInfo
  struct MeshInfo;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: MeshBuilder
  class MeshBuilder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIR::MeshBuilder);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::MeshBuilder*, "UnityEngine.UIElements.UIR", "MeshBuilder");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UIR.MeshBuilder
  // [TokenAttribute] Offset: FFFFFFFF
  class MeshBuilder : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData
    struct AllocMeshData;
    // Get static field: static private Unity.Profiling.ProfilerMarker s_VectorGraphics9Slice
    static ::Unity::Profiling::ProfilerMarker _get_s_VectorGraphics9Slice();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_VectorGraphics9Slice
    static void _set_s_VectorGraphics9Slice(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker s_VectorGraphicsSplitTriangle
    static ::Unity::Profiling::ProfilerMarker _get_s_VectorGraphicsSplitTriangle();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_VectorGraphicsSplitTriangle
    static void _set_s_VectorGraphicsSplitTriangle(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker s_VectorGraphicsScaleTriangle
    static ::Unity::Profiling::ProfilerMarker _get_s_VectorGraphicsScaleTriangle();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_VectorGraphicsScaleTriangle
    static void _set_s_VectorGraphicsScaleTriangle(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker s_VectorGraphicsStretch
    static ::Unity::Profiling::ProfilerMarker _get_s_VectorGraphicsStretch();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_VectorGraphicsStretch
    static void _set_s_VectorGraphicsStretch(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static readonly System.Int32 s_MaxTextMeshVertices
    static int _get_s_MaxTextMeshVertices();
    // Set static field: static readonly System.Int32 s_MaxTextMeshVertices
    static void _set_s_MaxTextMeshVertices(int value);
    // static private UnityEngine.UIElements.Vertex ConvertTextVertexToUIRVertex(UnityEngine.TextCore.Text.MeshInfo info, System.Int32 index, UnityEngine.Vector2 offset, UnityEngine.UIElements.UIR.VertexFlags flags, System.Boolean isDynamicColor)
    // Offset: 0x55CD690
    static ::UnityEngine::UIElements::Vertex ConvertTextVertexToUIRVertex(::UnityEngine::TextCore::Text::MeshInfo info, int index, ::UnityEngine::Vector2 offset, ::UnityEngine::UIElements::UIR::VertexFlags flags, bool isDynamicColor);
    // static private System.Int32 LimitTextVertices(System.Int32 vertexCount, System.Boolean logTruncation)
    // Offset: 0x55CD790
    static int LimitTextVertices(int vertexCount, bool logTruncation);
    // static System.Void MakeText(UnityEngine.TextCore.Text.MeshInfo meshInfo, UnityEngine.Vector2 offset, UnityEngine.UIElements.UIR.MeshBuilder/AllocMeshData meshAlloc, UnityEngine.UIElements.UIR.VertexFlags flags, System.Boolean isDynamicColor)
    // Offset: 0x55CD8C0
    static void MakeText(::UnityEngine::TextCore::Text::MeshInfo meshInfo, ::UnityEngine::Vector2 offset, ::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData meshAlloc, ::UnityEngine::UIElements::UIR::VertexFlags flags, bool isDynamicColor);
    // static private System.Void .cctor()
    // Offset: 0x55CDDB8
    static void _cctor();
  }; // UnityEngine.UIElements.UIR.MeshBuilder
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::MeshBuilder::ConvertTextVertexToUIRVertex
// Il2CppName: ConvertTextVertexToUIRVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Vertex (*)(::UnityEngine::TextCore::Text::MeshInfo, int, ::UnityEngine::Vector2, ::UnityEngine::UIElements::UIR::VertexFlags, bool)>(&UnityEngine::UIElements::UIR::MeshBuilder::ConvertTextVertexToUIRVertex)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "MeshInfo")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "VertexFlags")->byval_arg;
    static auto* isDynamicColor = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::MeshBuilder*), "ConvertTextVertexToUIRVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, index, offset, flags, isDynamicColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::MeshBuilder::LimitTextVertices
// Il2CppName: LimitTextVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, bool)>(&UnityEngine::UIElements::UIR::MeshBuilder::LimitTextVertices)> {
  static const MethodInfo* get() {
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* logTruncation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::MeshBuilder*), "LimitTextVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexCount, logTruncation});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::MeshBuilder::MakeText
// Il2CppName: MakeText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::TextCore::Text::MeshInfo, ::UnityEngine::Vector2, ::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData, ::UnityEngine::UIElements::UIR::VertexFlags, bool)>(&UnityEngine::UIElements::UIR::MeshBuilder::MakeText)> {
  static const MethodInfo* get() {
    static auto* meshInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "MeshInfo")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* meshAlloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "MeshBuilder/AllocMeshData")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "VertexFlags")->byval_arg;
    static auto* isDynamicColor = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::MeshBuilder*), "MakeText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshInfo, offset, meshAlloc, flags, isDynamicColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::MeshBuilder::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::UIR::MeshBuilder::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::MeshBuilder*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
