// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UIR.LinkedPoolItem`1
#include "UnityEngine/UIElements/UIR/LinkedPoolItem_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: BasicNode`1<T>
  template<typename T>
  class BasicNode_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::UIR::BasicNode_1, "UnityEngine.UIElements.UIR", "BasicNode`1");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.UIR.BasicNode`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class BasicNode_1 : public ::UnityEngine::UIElements::UIR::LinkedPoolItem_1<::UnityEngine::UIElements::UIR::BasicNode_1<T>*> {
    public:
    public:
    // public UnityEngine.UIElements.UIR.BasicNode`1<T> next
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UIR::BasicNode_1<T>* next;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BasicNode_1<T>*) == 0x8);
    // public T data
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T data;
    public:
    // Autogenerated instance field getter
    // Get instance field: public UnityEngine.UIElements.UIR.BasicNode`1<T> next
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BasicNode_1<T>*& dyn_next() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::BasicNode_1::dyn_next");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "next"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::UIR::BasicNode_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public T data
    [[deprecated("Use field access instead!")]] T& dyn_data() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::BasicNode_1::dyn_data");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "data"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void AppendTo(ref UnityEngine.UIElements.UIR.BasicNode`1<T> first)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AppendTo(ByRef<::UnityEngine::UIElements::UIR::BasicNode_1<T>*> first) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::BasicNode_1::AppendTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(first)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(first));
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.UIR.LinkedPoolItem`1
    // Base method: System.Void LinkedPoolItem_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BasicNode_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::BasicNode_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BasicNode_1<T>*, creationType>()));
    }
  }; // UnityEngine.UIElements.UIR.BasicNode`1
  // Could not write size check! Type: UnityEngine.UIElements.UIR.BasicNode`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
