// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UIR.LinkedPoolItem`1
#include "UnityEngine/UIElements/UIR/LinkedPoolItem_1.hpp"
// Including type: UnityEngine.UIElements.UIR.CommandType
#include "UnityEngine/UIElements/UIR/CommandType.hpp"
// Including type: UnityEngine.UIElements.UIR.State
#include "UnityEngine/UIElements/UIR/State.hpp"
// Including type: Unity.Profiling.ProfilerMarker
#include "Unity/Profiling/ProfilerMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
}
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: MeshHandle
  class MeshHandle;
  // Forward declaring type: DrawParams
  class DrawParams;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Rect
  struct Rect;
  // Forward declaring type: RectInt
  struct RectInt;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: RenderChainCommand
  class RenderChainCommand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIR::RenderChainCommand);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::RenderChainCommand*, "UnityEngine.UIElements.UIR", "RenderChainCommand");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.UIR.RenderChainCommand
  // [TokenAttribute] Offset: FFFFFFFF
  class RenderChainCommand : public ::UnityEngine::UIElements::UIR::LinkedPoolItem_1<::UnityEngine::UIElements::UIR::RenderChainCommand*> {
    public:
    public:
    // UnityEngine.UIElements.VisualElement owner
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::VisualElement* owner;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // UnityEngine.UIElements.UIR.RenderChainCommand prev
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UIElements::UIR::RenderChainCommand* prev;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::RenderChainCommand*) == 0x8);
    // UnityEngine.UIElements.UIR.RenderChainCommand next
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UIElements::UIR::RenderChainCommand* next;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::RenderChainCommand*) == 0x8);
    // System.Boolean closing
    // Size: 0x1
    // Offset: 0x30
    bool closing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // UnityEngine.UIElements.UIR.CommandType type
    // Size: 0x4
    // Offset: 0x34
    ::UnityEngine::UIElements::UIR::CommandType type;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::CommandType) == 0x4);
    // UnityEngine.UIElements.UIR.State state
    // Size: 0x14
    // Offset: 0x38
    ::UnityEngine::UIElements::UIR::State state;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::State) == 0x14);
    // UnityEngine.UIElements.UIR.MeshHandle mesh
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UIElements::UIR::MeshHandle* mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::MeshHandle*) == 0x8);
    // System.Int32 indexOffset
    // Size: 0x4
    // Offset: 0x58
    int indexOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 indexCount
    // Size: 0x4
    // Offset: 0x5C
    int indexCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Action callback
    // Size: 0x8
    // Offset: 0x60
    ::System::Action* callback;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Get static field: static private readonly System.Int32 k_ID_MainTex
    static int _get_k_ID_MainTex();
    // Set static field: static private readonly System.Int32 k_ID_MainTex
    static void _set_k_ID_MainTex(int value);
    // Get static field: static private Unity.Profiling.ProfilerMarker s_ImmediateOverheadMarker
    static ::Unity::Profiling::ProfilerMarker _get_s_ImmediateOverheadMarker();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_ImmediateOverheadMarker
    static void _set_s_ImmediateOverheadMarker(::Unity::Profiling::ProfilerMarker value);
    // Get instance field reference: UnityEngine.UIElements.VisualElement owner
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_owner();
    // Get instance field reference: UnityEngine.UIElements.UIR.RenderChainCommand prev
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::RenderChainCommand*& dyn_prev();
    // Get instance field reference: UnityEngine.UIElements.UIR.RenderChainCommand next
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::RenderChainCommand*& dyn_next();
    // Get instance field reference: System.Boolean closing
    [[deprecated("Use field access instead!")]] bool& dyn_closing();
    // Get instance field reference: UnityEngine.UIElements.UIR.CommandType type
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::CommandType& dyn_type();
    // Get instance field reference: UnityEngine.UIElements.UIR.State state
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::State& dyn_state();
    // Get instance field reference: UnityEngine.UIElements.UIR.MeshHandle mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::MeshHandle*& dyn_mesh();
    // Get instance field reference: System.Int32 indexOffset
    [[deprecated("Use field access instead!")]] int& dyn_indexOffset();
    // Get instance field reference: System.Int32 indexCount
    [[deprecated("Use field access instead!")]] int& dyn_indexCount();
    // Get instance field reference: System.Action callback
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_callback();
    // System.Void Reset()
    // Offset: 0x55E0454
    void Reset();
    // System.Void ExecuteNonDrawMesh(UnityEngine.UIElements.UIR.DrawParams drawParams, System.Single pixelsPerPoint, ref System.Exception immediateException)
    // Offset: 0x55DE680
    void ExecuteNonDrawMesh(::UnityEngine::UIElements::UIR::DrawParams* drawParams, float pixelsPerPoint, ByRef<::System::Exception*> immediateException);
    // private System.Void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture destination, System.Single depth)
    // Offset: 0x55E0930
    void Blit(::UnityEngine::Texture* source, ::UnityEngine::RenderTexture* destination, float depth);
    // static private UnityEngine.Rect CombineScissorRects(UnityEngine.Rect r0, UnityEngine.Rect r1)
    // Offset: 0x55E0828
    static ::UnityEngine::Rect CombineScissorRects(::UnityEngine::Rect r0, ::UnityEngine::Rect r1);
    // static private UnityEngine.RectInt RectPointsToPixelsAndFlipYAxis(UnityEngine.Rect rect, System.Single pixelsPerPoint)
    // Offset: 0x55E04C0
    static ::UnityEngine::RectInt RectPointsToPixelsAndFlipYAxis(::UnityEngine::Rect rect, float pixelsPerPoint);
    // static private System.Void .cctor()
    // Offset: 0x55E0A9C
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x55D2A98
    // Implemented from: UnityEngine.UIElements.UIR.LinkedPoolItem`1
    // Base method: System.Void LinkedPoolItem_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RenderChainCommand* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::RenderChainCommand::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RenderChainCommand*, creationType>()));
    }
  }; // UnityEngine.UIElements.UIR.RenderChainCommand
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChainCommand::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChainCommand::*)()>(&UnityEngine::UIElements::UIR::RenderChainCommand::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChainCommand*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChainCommand::ExecuteNonDrawMesh
// Il2CppName: ExecuteNonDrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChainCommand::*)(::UnityEngine::UIElements::UIR::DrawParams*, float, ByRef<::System::Exception*>)>(&UnityEngine::UIElements::UIR::RenderChainCommand::ExecuteNonDrawMesh)> {
  static const MethodInfo* get() {
    static auto* drawParams = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "DrawParams")->byval_arg;
    static auto* pixelsPerPoint = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* immediateException = &::il2cpp_utils::GetClassFromName("System", "Exception")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChainCommand*), "ExecuteNonDrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{drawParams, pixelsPerPoint, immediateException});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChainCommand::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::RenderChainCommand::*)(::UnityEngine::Texture*, ::UnityEngine::RenderTexture*, float)>(&UnityEngine::UIElements::UIR::RenderChainCommand::Blit)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChainCommand*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destination, depth});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChainCommand::CombineScissorRects
// Il2CppName: CombineScissorRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (*)(::UnityEngine::Rect, ::UnityEngine::Rect)>(&UnityEngine::UIElements::UIR::RenderChainCommand::CombineScissorRects)> {
  static const MethodInfo* get() {
    static auto* r0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* r1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChainCommand*), "CombineScissorRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r0, r1});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChainCommand::RectPointsToPixelsAndFlipYAxis
// Il2CppName: RectPointsToPixelsAndFlipYAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectInt (*)(::UnityEngine::Rect, float)>(&UnityEngine::UIElements::UIR::RenderChainCommand::RectPointsToPixelsAndFlipYAxis)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* pixelsPerPoint = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChainCommand*), "RectPointsToPixelsAndFlipYAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, pixelsPerPoint});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChainCommand::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::UIR::RenderChainCommand::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChainCommand*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChainCommand::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
