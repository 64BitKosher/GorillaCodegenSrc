// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UIR.Utility
#include "UnityEngine/UIElements/UIR/Utility.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::Utility::GPUBufferType, "UnityEngine.UIElements.UIR", "Utility/GPUBufferType");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UIR.Utility/GPUBufferType
  // [TokenAttribute] Offset: FFFFFFFF
  struct Utility::GPUBufferType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: GPUBufferType
    constexpr GPUBufferType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public UnityEngine.UIElements.UIR.Utility/GPUBufferType Vertex
    static constexpr const int Vertex = 0;
    // Get static field: static public UnityEngine.UIElements.UIR.Utility/GPUBufferType Vertex
    static ::UnityEngine::UIElements::UIR::Utility::GPUBufferType _get_Vertex();
    // Set static field: static public UnityEngine.UIElements.UIR.Utility/GPUBufferType Vertex
    static void _set_Vertex(::UnityEngine::UIElements::UIR::Utility::GPUBufferType value);
    // static field const value: static public UnityEngine.UIElements.UIR.Utility/GPUBufferType Index
    static constexpr const int Index = 1;
    // Get static field: static public UnityEngine.UIElements.UIR.Utility/GPUBufferType Index
    static ::UnityEngine::UIElements::UIR::Utility::GPUBufferType _get_Index();
    // Set static field: static public UnityEngine.UIElements.UIR.Utility/GPUBufferType Index
    static void _set_Index(::UnityEngine::UIElements::UIR::Utility::GPUBufferType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // UnityEngine.UIElements.UIR.Utility/GPUBufferType
  #pragma pack(pop)
  static check_size<sizeof(Utility::GPUBufferType), 0 + sizeof(int)> __UnityEngine_UIElements_UIR_Utility_GPUBufferTypeSizeCheck;
  static_assert(sizeof(Utility::GPUBufferType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
