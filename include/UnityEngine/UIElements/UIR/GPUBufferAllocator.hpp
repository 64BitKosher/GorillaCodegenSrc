// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: BestFitAllocator
  class BestFitAllocator;
  // Forward declaring type: Alloc
  struct Alloc;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: GPUBufferAllocator
  class GPUBufferAllocator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIR::GPUBufferAllocator);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::GPUBufferAllocator*, "UnityEngine.UIElements.UIR", "GPUBufferAllocator");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UIR.GPUBufferAllocator
  // [TokenAttribute] Offset: FFFFFFFF
  class GPUBufferAllocator : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.UIElements.UIR.BestFitAllocator m_Low
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::UIR::BestFitAllocator* m_Low;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BestFitAllocator*) == 0x8);
    // private UnityEngine.UIElements.UIR.BestFitAllocator m_High
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::UIR::BestFitAllocator* m_High;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BestFitAllocator*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.UIElements.UIR.BestFitAllocator m_Low
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BestFitAllocator*& dyn_m_Low();
    // Get instance field reference: private UnityEngine.UIElements.UIR.BestFitAllocator m_High
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BestFitAllocator*& dyn_m_High();
    // public System.Void .ctor(System.UInt32 maxSize)
    // Offset: 0x55E023C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GPUBufferAllocator* New_ctor(uint maxSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::GPUBufferAllocator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GPUBufferAllocator*, creationType>(maxSize)));
    }
    // public UnityEngine.UIElements.UIR.Alloc Allocate(System.UInt32 size, System.Boolean shortLived)
    // Offset: 0x55DBD0C
    ::UnityEngine::UIElements::UIR::Alloc Allocate(uint size, bool shortLived);
    // public System.Void Free(UnityEngine.UIElements.UIR.Alloc alloc)
    // Offset: 0x55DBE38
    void Free(::UnityEngine::UIElements::UIR::Alloc alloc);
    // public System.Boolean get_isEmpty()
    // Offset: 0x55E0310
    bool get_isEmpty();
    // private System.Boolean HighLowCollide()
    // Offset: 0x55E02D8
    bool HighLowCollide();
  }; // UnityEngine.UIElements.UIR.GPUBufferAllocator
  #pragma pack(pop)
  static check_size<sizeof(GPUBufferAllocator), 24 + sizeof(::UnityEngine::UIElements::UIR::BestFitAllocator*)> __UnityEngine_UIElements_UIR_GPUBufferAllocatorSizeCheck;
  static_assert(sizeof(GPUBufferAllocator) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::GPUBufferAllocator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::GPUBufferAllocator::Allocate
// Il2CppName: Allocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::Alloc (UnityEngine::UIElements::UIR::GPUBufferAllocator::*)(uint, bool)>(&UnityEngine::UIElements::UIR::GPUBufferAllocator::Allocate)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* shortLived = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::GPUBufferAllocator*), "Allocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size, shortLived});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::GPUBufferAllocator::Free
// Il2CppName: Free
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::GPUBufferAllocator::*)(::UnityEngine::UIElements::UIR::Alloc)>(&UnityEngine::UIElements::UIR::GPUBufferAllocator::Free)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "Alloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::GPUBufferAllocator*), "Free", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::GPUBufferAllocator::get_isEmpty
// Il2CppName: get_isEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UIR::GPUBufferAllocator::*)()>(&UnityEngine::UIElements::UIR::GPUBufferAllocator::get_isEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::GPUBufferAllocator*), "get_isEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::GPUBufferAllocator::HighLowCollide
// Il2CppName: HighLowCollide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UIR::GPUBufferAllocator::*)()>(&UnityEngine::UIElements::UIR::GPUBufferAllocator::HighLowCollide)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::GPUBufferAllocator*), "HighLowCollide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
