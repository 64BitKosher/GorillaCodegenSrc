// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UIR.Utility
#include "UnityEngine/UIElements/UIR/Utility.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.UIElements.UIR.Utility/GPUBufferType
#include "UnityEngine/UIElements/UIR/Utility_GPUBufferType.hpp"
// Including type: Unity.Collections.NativeSlice`1
#include "Unity/Collections/NativeSlice_1.hpp"
// Including type: UnityEngine.UIElements.UIR.GfxUpdateBufferRange
#include "UnityEngine/UIElements/UIR/GfxUpdateBufferRange.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::UIR::Utility::GPUBuffer_1, "UnityEngine.UIElements.UIR", "Utility/GPUBuffer`1");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.UIR.Utility/GPUBuffer`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class Utility::GPUBuffer_1 : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.IntPtr buffer
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr buffer;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.Int32 elemCount
    // Size: 0x4
    // Offset: 0x0
    int elemCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 elemStride
    // Size: 0x4
    // Offset: 0x0
    int elemStride;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.IntPtr buffer
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_buffer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Utility::GPUBuffer_1::dyn_buffer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buffer"))->offset;
      return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 elemCount
    [[deprecated("Use field access instead!")]] int& dyn_elemCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Utility::GPUBuffer_1::dyn_elemCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elemCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 elemStride
    [[deprecated("Use field access instead!")]] int& dyn_elemStride() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Utility::GPUBuffer_1::dyn_elemStride");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elemStride"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.Int32 elementCount, UnityEngine.UIElements.UIR.Utility/GPUBufferType type)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Utility::GPUBuffer_1<T>* New_ctor(int elementCount, ::UnityEngine::UIElements::UIR::Utility::GPUBufferType type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Utility::GPUBuffer_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Utility::GPUBuffer_1<T>*, creationType>(elementCount, type)));
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Utility::GPUBuffer_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::UIR::Utility::GPUBuffer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void UpdateRanges(Unity.Collections.NativeSlice`1<UnityEngine.UIElements.UIR.GfxUpdateBufferRange> ranges, System.Int32 rangesMin, System.Int32 rangesMax)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateRanges(::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::UIR::GfxUpdateBufferRange> ranges, int rangesMin, int rangesMax) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Utility::GPUBuffer_1::UpdateRanges");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRanges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ranges), ::il2cpp_utils::ExtractType(rangesMin), ::il2cpp_utils::ExtractType(rangesMax)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ranges, rangesMin, rangesMax);
    }
    // public System.Int32 get_ElementStride()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_ElementStride() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Utility::GPUBuffer_1::get_ElementStride");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ElementStride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // System.IntPtr get_BufferPointer()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::IntPtr get_BufferPointer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Utility::GPUBuffer_1::get_BufferPointer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BufferPointer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(this, ___internal__method);
    }
  }; // UnityEngine.UIElements.UIR.Utility/GPUBuffer`1
  // Could not write size check! Type: UnityEngine.UIElements.UIR.Utility/GPUBuffer`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
