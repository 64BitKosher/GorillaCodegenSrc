// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.IStylePainter
#include "UnityEngine/UIElements/IStylePainter.hpp"
// Including type: UnityEngine.UIElements.UIR.BMPAlloc
#include "UnityEngine/UIElements/UIR/BMPAlloc.hpp"
// Including type: UnityEngine.UIElements.Vertex
#include "UnityEngine/UIElements/Vertex.hpp"
// Including type: UnityEngine.UIElements.UIR.MeshBuilder/AllocMeshData
#include "UnityEngine/UIElements/UIR/MeshBuilder_AllocMeshData.hpp"
// Including type: Unity.Collections.NativeSlice`1
#include "Unity/Collections/NativeSlice_1.hpp"
// Including type: UnityEngine.UIElements.UIR.VertexFlags
#include "UnityEngine/UIElements/UIR/VertexFlags.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: AtlasBase
  class AtlasBase;
  // Forward declaring type: MeshWriteData
  class MeshWriteData;
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: MeshWriteDataInterface
  struct MeshWriteDataInterface;
  // Forward declaring type: TextElement
  class TextElement;
}
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: TempAllocator`1<T>
  template<typename T>
  class TempAllocator_1;
  // Forward declaring type: RenderChain
  class RenderChain;
  // Forward declaring type: VectorImageManager
  class VectorImageManager;
  // Forward declaring type: RenderChainCommand
  class RenderChainCommand;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::TextCore::Text
namespace UnityEngine::TextCore::Text {
  // Forward declaring type: TextInfo
  class TextInfo;
}
// Forward declaring namespace: UnityEngine::UIElements::UIR::Implementation
namespace UnityEngine::UIElements::UIR::Implementation {
  // Skipping declaration: ClosingInfo because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR.Implementation
namespace UnityEngine::UIElements::UIR::Implementation {
  // Forward declaring type: UIRStylePainter
  class UIRStylePainter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*, "UnityEngine.UIElements.UIR.Implementation", "UIRStylePainter");
// Type namespace: UnityEngine.UIElements.UIR.Implementation
namespace UnityEngine::UIElements::UIR::Implementation {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.UIR.Implementation.UIRStylePainter
  // [TokenAttribute] Offset: FFFFFFFF
  class UIRStylePainter : public ::Il2CppObject/*, public ::UnityEngine::UIElements::IStylePainter*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::Entry
    struct Entry;
    // Nested type: ::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::ClosingInfo
    struct ClosingInfo;
    // Nested type: ::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::RepeatRectUV
    struct RepeatRectUV;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/Entry
    // [TokenAttribute] Offset: FFFFFFFF
    struct Entry/*, public ::System::ValueType*/ {
      public:
      public:
      // public Unity.Collections.NativeSlice`1<UnityEngine.UIElements.Vertex> vertices
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex> vertices;
      // public Unity.Collections.NativeSlice`1<System.UInt16> indices
      // Size: 0xFFFFFFFF
      // Offset: 0x10
      ::Unity::Collections::NativeSlice_1<uint16_t> indices;
      // public UnityEngine.Material material
      // Size: 0x8
      // Offset: 0x20
      ::UnityEngine::Material* material;
      // Field size check
      static_assert(sizeof(::UnityEngine::Material*) == 0x8);
      // public System.Single fontTexSDFScale
      // Size: 0x4
      // Offset: 0x28
      float fontTexSDFScale;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public UnityEngine.UIElements.TextureId texture
      // Size: 0x4
      // Offset: 0x2C
      ::UnityEngine::UIElements::TextureId texture;
      // Field size check
      static_assert(sizeof(::UnityEngine::UIElements::TextureId) == 0x4);
      // public UnityEngine.UIElements.UIR.RenderChainCommand customCommand
      // Size: 0x8
      // Offset: 0x30
      ::UnityEngine::UIElements::UIR::RenderChainCommand* customCommand;
      // Field size check
      static_assert(sizeof(::UnityEngine::UIElements::UIR::RenderChainCommand*) == 0x8);
      // public UnityEngine.UIElements.UIR.BMPAlloc clipRectID
      // Size: 0x8
      // Offset: 0x38
      ::UnityEngine::UIElements::UIR::BMPAlloc clipRectID;
      // Field size check
      static_assert(sizeof(::UnityEngine::UIElements::UIR::BMPAlloc) == 0x8);
      // public UnityEngine.UIElements.UIR.VertexFlags addFlags
      // Size: 0x4
      // Offset: 0x40
      ::UnityEngine::UIElements::UIR::VertexFlags addFlags;
      // Field size check
      static_assert(sizeof(::UnityEngine::UIElements::UIR::VertexFlags) == 0x4);
      // public System.Boolean uvIsDisplacement
      // Size: 0x1
      // Offset: 0x44
      bool uvIsDisplacement;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean isTextEntry
      // Size: 0x1
      // Offset: 0x45
      bool isTextEntry;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean isClipRegisterEntry
      // Size: 0x1
      // Offset: 0x46
      bool isClipRegisterEntry;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Int32 stencilRef
      // Size: 0x4
      // Offset: 0x48
      int stencilRef;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 maskDepth
      // Size: 0x4
      // Offset: 0x4C
      int maskDepth;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Entry
      constexpr Entry(::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex> vertices_ = {}, ::Unity::Collections::NativeSlice_1<uint16_t> indices_ = {}, ::UnityEngine::Material* material_ = {}, float fontTexSDFScale_ = {}, ::UnityEngine::UIElements::TextureId texture_ = {}, ::UnityEngine::UIElements::UIR::RenderChainCommand* customCommand_ = {}, ::UnityEngine::UIElements::UIR::BMPAlloc clipRectID_ = {}, ::UnityEngine::UIElements::UIR::VertexFlags addFlags_ = {}, bool uvIsDisplacement_ = {}, bool isTextEntry_ = {}, bool isClipRegisterEntry_ = {}, int stencilRef_ = {}, int maskDepth_ = {}) noexcept : vertices{vertices_}, indices{indices_}, material{material_}, fontTexSDFScale{fontTexSDFScale_}, texture{texture_}, customCommand{customCommand_}, clipRectID{clipRectID_}, addFlags{addFlags_}, uvIsDisplacement{uvIsDisplacement_}, isTextEntry{isTextEntry_}, isClipRegisterEntry{isClipRegisterEntry_}, stencilRef{stencilRef_}, maskDepth{maskDepth_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public Unity.Collections.NativeSlice`1<UnityEngine.UIElements.Vertex> vertices
      [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex>& dyn_vertices();
      // Get instance field reference: public Unity.Collections.NativeSlice`1<System.UInt16> indices
      [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeSlice_1<uint16_t>& dyn_indices();
      // Get instance field reference: public UnityEngine.Material material
      [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
      // Get instance field reference: public System.Single fontTexSDFScale
      [[deprecated("Use field access instead!")]] float& dyn_fontTexSDFScale();
      // Get instance field reference: public UnityEngine.UIElements.TextureId texture
      [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::TextureId& dyn_texture();
      // Get instance field reference: public UnityEngine.UIElements.UIR.RenderChainCommand customCommand
      [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::RenderChainCommand*& dyn_customCommand();
      // Get instance field reference: public UnityEngine.UIElements.UIR.BMPAlloc clipRectID
      [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BMPAlloc& dyn_clipRectID();
      // Get instance field reference: public UnityEngine.UIElements.UIR.VertexFlags addFlags
      [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::VertexFlags& dyn_addFlags();
      // Get instance field reference: public System.Boolean uvIsDisplacement
      [[deprecated("Use field access instead!")]] bool& dyn_uvIsDisplacement();
      // Get instance field reference: public System.Boolean isTextEntry
      [[deprecated("Use field access instead!")]] bool& dyn_isTextEntry();
      // Get instance field reference: public System.Boolean isClipRegisterEntry
      [[deprecated("Use field access instead!")]] bool& dyn_isClipRegisterEntry();
      // Get instance field reference: public System.Int32 stencilRef
      [[deprecated("Use field access instead!")]] int& dyn_stencilRef();
      // Get instance field reference: public System.Int32 maskDepth
      [[deprecated("Use field access instead!")]] int& dyn_maskDepth();
    }; // UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/Entry
    // WARNING Not writing size check since size may be invalid!
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/ClosingInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct ClosingInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Boolean needsClosing
      // Size: 0x1
      // Offset: 0x0
      bool needsClosing;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean popViewMatrix
      // Size: 0x1
      // Offset: 0x1
      bool popViewMatrix;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean popScissorClip
      // Size: 0x1
      // Offset: 0x2
      bool popScissorClip;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean blitAndPopRenderTexture
      // Size: 0x1
      // Offset: 0x3
      bool blitAndPopRenderTexture;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean PopDefaultMaterial
      // Size: 0x1
      // Offset: 0x4
      bool PopDefaultMaterial;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public UnityEngine.UIElements.UIR.RenderChainCommand clipUnregisterDrawCommand
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::UIElements::UIR::RenderChainCommand* clipUnregisterDrawCommand;
      // Field size check
      static_assert(sizeof(::UnityEngine::UIElements::UIR::RenderChainCommand*) == 0x8);
      // public Unity.Collections.NativeSlice`1<UnityEngine.UIElements.Vertex> clipperRegisterVertices
      // Size: 0xFFFFFFFF
      // Offset: 0x10
      ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex> clipperRegisterVertices;
      // public Unity.Collections.NativeSlice`1<System.UInt16> clipperRegisterIndices
      // Size: 0xFFFFFFFF
      // Offset: 0x20
      ::Unity::Collections::NativeSlice_1<uint16_t> clipperRegisterIndices;
      // public System.Int32 clipperRegisterIndexOffset
      // Size: 0x4
      // Offset: 0x30
      int clipperRegisterIndexOffset;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 maskStencilRef
      // Size: 0x4
      // Offset: 0x34
      int maskStencilRef;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ClosingInfo
      constexpr ClosingInfo(bool needsClosing_ = {}, bool popViewMatrix_ = {}, bool popScissorClip_ = {}, bool blitAndPopRenderTexture_ = {}, bool PopDefaultMaterial_ = {}, ::UnityEngine::UIElements::UIR::RenderChainCommand* clipUnregisterDrawCommand_ = {}, ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex> clipperRegisterVertices_ = {}, ::Unity::Collections::NativeSlice_1<uint16_t> clipperRegisterIndices_ = {}, int clipperRegisterIndexOffset_ = {}, int maskStencilRef_ = {}) noexcept : needsClosing{needsClosing_}, popViewMatrix{popViewMatrix_}, popScissorClip{popScissorClip_}, blitAndPopRenderTexture{blitAndPopRenderTexture_}, PopDefaultMaterial{PopDefaultMaterial_}, clipUnregisterDrawCommand{clipUnregisterDrawCommand_}, clipperRegisterVertices{clipperRegisterVertices_}, clipperRegisterIndices{clipperRegisterIndices_}, clipperRegisterIndexOffset{clipperRegisterIndexOffset_}, maskStencilRef{maskStencilRef_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Boolean needsClosing
      [[deprecated("Use field access instead!")]] bool& dyn_needsClosing();
      // Get instance field reference: public System.Boolean popViewMatrix
      [[deprecated("Use field access instead!")]] bool& dyn_popViewMatrix();
      // Get instance field reference: public System.Boolean popScissorClip
      [[deprecated("Use field access instead!")]] bool& dyn_popScissorClip();
      // Get instance field reference: public System.Boolean blitAndPopRenderTexture
      [[deprecated("Use field access instead!")]] bool& dyn_blitAndPopRenderTexture();
      // Get instance field reference: public System.Boolean PopDefaultMaterial
      [[deprecated("Use field access instead!")]] bool& dyn_PopDefaultMaterial();
      // Get instance field reference: public UnityEngine.UIElements.UIR.RenderChainCommand clipUnregisterDrawCommand
      [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::RenderChainCommand*& dyn_clipUnregisterDrawCommand();
      // Get instance field reference: public Unity.Collections.NativeSlice`1<UnityEngine.UIElements.Vertex> clipperRegisterVertices
      [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex>& dyn_clipperRegisterVertices();
      // Get instance field reference: public Unity.Collections.NativeSlice`1<System.UInt16> clipperRegisterIndices
      [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeSlice_1<uint16_t>& dyn_clipperRegisterIndices();
      // Get instance field reference: public System.Int32 clipperRegisterIndexOffset
      [[deprecated("Use field access instead!")]] int& dyn_clipperRegisterIndexOffset();
      // Get instance field reference: public System.Int32 maskStencilRef
      [[deprecated("Use field access instead!")]] int& dyn_maskStencilRef();
    }; // UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/ClosingInfo
    // WARNING Not writing size check since size may be invalid!
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/RepeatRectUV
    // [TokenAttribute] Offset: FFFFFFFF
    struct RepeatRectUV/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Rect rect
      // Size: 0x10
      // Offset: 0x0
      ::UnityEngine::Rect rect;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rect) == 0x10);
      // public UnityEngine.Rect uv
      // Size: 0x10
      // Offset: 0x10
      ::UnityEngine::Rect uv;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rect) == 0x10);
      public:
      // Creating value type constructor for type: RepeatRectUV
      constexpr RepeatRectUV(::UnityEngine::Rect rect_ = {}, ::UnityEngine::Rect uv_ = {}) noexcept : rect{rect_}, uv{uv_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Rect rect
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_rect();
      // Get instance field reference: public UnityEngine.Rect uv
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_uv();
    }; // UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/RepeatRectUV
    #pragma pack(pop)
    static check_size<sizeof(UIRStylePainter::RepeatRectUV), 16 + sizeof(::UnityEngine::Rect)> __UnityEngine_UIElements_UIR_Implementation_UIRStylePainter_RepeatRectUVSizeCheck;
    static_assert(sizeof(UIRStylePainter::RepeatRectUV) == 0x20);
    public:
    // private UnityEngine.UIElements.UIR.RenderChain m_Owner
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::UIR::RenderChain* m_Owner;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::RenderChain*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/Entry> m_Entries
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::Entry>* m_Entries;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::Entry>*) == 0x8);
    // private UnityEngine.UIElements.AtlasBase m_Atlas
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UIElements::AtlasBase* m_Atlas;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::AtlasBase*) == 0x8);
    // private UnityEngine.UIElements.UIR.VectorImageManager m_VectorImageManager
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UIElements::UIR::VectorImageManager* m_VectorImageManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::VectorImageManager*) == 0x8);
    // private UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/Entry m_CurrentEntry
    // Size: 0xFFFFFFFF
    // Offset: 0x30
    ::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::Entry m_CurrentEntry;
    // private UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/ClosingInfo m_ClosingInfo
    // Size: 0xFFFFFFFF
    // Offset: 0x80
    ::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::ClosingInfo m_ClosingInfo;
    // private System.Int32 m_MaskDepth
    // Size: 0x4
    // Offset: 0xB8
    int m_MaskDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_StencilRef
    // Size: 0x4
    // Offset: 0xBC
    int m_StencilRef;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.UIElements.UIR.BMPAlloc m_ClipRectID
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::UIElements::UIR::BMPAlloc m_ClipRectID;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BMPAlloc) == 0x8);
    // private System.Int32 m_SVGBackgroundEntryIndex
    // Size: 0x4
    // Offset: 0xC8
    int m_SVGBackgroundEntryIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.UIElements.UIR.TempAllocator`1<UnityEngine.UIElements.Vertex> m_VertsPool
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::UIElements::UIR::TempAllocator_1<::UnityEngine::UIElements::Vertex>* m_VertsPool;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::TempAllocator_1<::UnityEngine::UIElements::Vertex>*) == 0x8);
    // private UnityEngine.UIElements.UIR.TempAllocator`1<System.UInt16> m_IndicesPool
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::UIElements::UIR::TempAllocator_1<uint16_t>* m_IndicesPool;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::TempAllocator_1<uint16_t>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.MeshWriteData> m_MeshWriteDataPool
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::MeshWriteData*>* m_MeshWriteDataPool;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::MeshWriteData*>*) == 0x8);
    // private System.Int32 m_NextMeshWriteDataPoolItem
    // Size: 0x4
    // Offset: 0xE8
    int m_NextMeshWriteDataPoolItem;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/RepeatRectUV>[] m_RepeatRectUVList
    // Size: 0x8
    // Offset: 0xF0
    ::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::RepeatRectUV>*> m_RepeatRectUVList;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::RepeatRectUV>*>) == 0x8);
    // private UnityEngine.UIElements.UIR.MeshBuilder/AllocMeshData/Allocator m_AllocRawVertsIndicesDelegate
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData::Allocator* m_AllocRawVertsIndicesDelegate;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData::Allocator*) == 0x8);
    // private UnityEngine.UIElements.UIR.MeshBuilder/AllocMeshData/Allocator m_AllocThroughDrawMeshDelegate
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData::Allocator* m_AllocThroughDrawMeshDelegate;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData::Allocator*) == 0x8);
    // private readonly UnityEngine.UIElements.MeshGenerationContext <meshGenerationContext>k__BackingField
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::UIElements::MeshGenerationContext* meshGenerationContext;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::MeshGenerationContext*) == 0x8);
    // private UnityEngine.UIElements.VisualElement <currentElement>k__BackingField
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::UIElements::VisualElement* currentElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private System.Int32 <totalVertices>k__BackingField
    // Size: 0x4
    // Offset: 0x118
    int totalVertices;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <totalIndices>k__BackingField
    // Size: 0x4
    // Offset: 0x11C
    int totalIndices;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.TextCore.Text.TextInfo m_TextInfo
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::TextCore::Text::TextInfo* m_TextInfo;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextCore::Text::TextInfo*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IStylePainter
    operator ::UnityEngine::UIElements::IStylePainter() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IStylePainter*>(this);
    }
    // Get instance field reference: private UnityEngine.UIElements.UIR.RenderChain m_Owner
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::RenderChain*& dyn_m_Owner();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/Entry> m_Entries
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::Entry>*& dyn_m_Entries();
    // Get instance field reference: private UnityEngine.UIElements.AtlasBase m_Atlas
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::AtlasBase*& dyn_m_Atlas();
    // Get instance field reference: private UnityEngine.UIElements.UIR.VectorImageManager m_VectorImageManager
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::VectorImageManager*& dyn_m_VectorImageManager();
    // Get instance field reference: private UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/Entry m_CurrentEntry
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::Entry& dyn_m_CurrentEntry();
    // Get instance field reference: private UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/ClosingInfo m_ClosingInfo
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::ClosingInfo& dyn_m_ClosingInfo();
    // Get instance field reference: private System.Int32 m_MaskDepth
    [[deprecated("Use field access instead!")]] int& dyn_m_MaskDepth();
    // Get instance field reference: private System.Int32 m_StencilRef
    [[deprecated("Use field access instead!")]] int& dyn_m_StencilRef();
    // Get instance field reference: private UnityEngine.UIElements.UIR.BMPAlloc m_ClipRectID
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BMPAlloc& dyn_m_ClipRectID();
    // Get instance field reference: private System.Int32 m_SVGBackgroundEntryIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_SVGBackgroundEntryIndex();
    // Get instance field reference: private UnityEngine.UIElements.UIR.TempAllocator`1<UnityEngine.UIElements.Vertex> m_VertsPool
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::TempAllocator_1<::UnityEngine::UIElements::Vertex>*& dyn_m_VertsPool();
    // Get instance field reference: private UnityEngine.UIElements.UIR.TempAllocator`1<System.UInt16> m_IndicesPool
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::TempAllocator_1<uint16_t>*& dyn_m_IndicesPool();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.MeshWriteData> m_MeshWriteDataPool
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::MeshWriteData*>*& dyn_m_MeshWriteDataPool();
    // Get instance field reference: private System.Int32 m_NextMeshWriteDataPoolItem
    [[deprecated("Use field access instead!")]] int& dyn_m_NextMeshWriteDataPoolItem();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/RepeatRectUV>[] m_RepeatRectUVList
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::RepeatRectUV>*>& dyn_m_RepeatRectUVList();
    // Get instance field reference: private UnityEngine.UIElements.UIR.MeshBuilder/AllocMeshData/Allocator m_AllocRawVertsIndicesDelegate
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData::Allocator*& dyn_m_AllocRawVertsIndicesDelegate();
    // Get instance field reference: private UnityEngine.UIElements.UIR.MeshBuilder/AllocMeshData/Allocator m_AllocThroughDrawMeshDelegate
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData::Allocator*& dyn_m_AllocThroughDrawMeshDelegate();
    // Get instance field reference: private readonly UnityEngine.UIElements.MeshGenerationContext <meshGenerationContext>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::MeshGenerationContext*& dyn_$meshGenerationContext$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement <currentElement>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_$currentElement$k__BackingField();
    // Get instance field reference: private System.Int32 <totalVertices>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$totalVertices$k__BackingField();
    // Get instance field reference: private System.Int32 <totalIndices>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$totalIndices$k__BackingField();
    // Get instance field reference: private UnityEngine.TextCore.Text.TextInfo m_TextInfo
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Text::TextInfo*& dyn_m_TextInfo();
    // private UnityEngine.UIElements.MeshWriteData GetPooledMeshWriteData()
    // Offset: 0x55E7950
    ::UnityEngine::UIElements::MeshWriteData* GetPooledMeshWriteData();
    // private UnityEngine.UIElements.MeshWriteData AllocRawVertsIndices(System.UInt32 vertexCount, System.UInt32 indexCount, ref UnityEngine.UIElements.UIR.MeshBuilder/AllocMeshData allocatorData)
    // Offset: 0x55E7A68
    ::UnityEngine::UIElements::MeshWriteData* AllocRawVertsIndices(uint vertexCount, uint indexCount, ByRef<::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData> allocatorData);
    // private UnityEngine.UIElements.MeshWriteData AllocThroughDrawMesh(System.UInt32 vertexCount, System.UInt32 indexCount, ref UnityEngine.UIElements.UIR.MeshBuilder/AllocMeshData allocatorData)
    // Offset: 0x55E7B28
    ::UnityEngine::UIElements::MeshWriteData* AllocThroughDrawMesh(uint vertexCount, uint indexCount, ByRef<::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData> allocatorData);
    // public System.Void .ctor(UnityEngine.UIElements.UIR.RenderChain renderChain)
    // Offset: 0x55E8000
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIRStylePainter* New_ctor(::UnityEngine::UIElements::UIR::RenderChain* renderChain) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIRStylePainter*, creationType>(renderChain)));
    }
    // public UnityEngine.UIElements.MeshGenerationContext get_meshGenerationContext()
    // Offset: 0x55E8348
    ::UnityEngine::UIElements::MeshGenerationContext* get_meshGenerationContext();
    // public UnityEngine.UIElements.VisualElement get_currentElement()
    // Offset: 0x55E8350
    ::UnityEngine::UIElements::VisualElement* get_currentElement();
    // private System.Void set_currentElement(UnityEngine.UIElements.VisualElement value)
    // Offset: 0x55E8358
    void set_currentElement(::UnityEngine::UIElements::VisualElement* value);
    // public System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/Entry> get_entries()
    // Offset: 0x55E8368
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::Entry>* get_entries();
    // public UnityEngine.UIElements.UIR.Implementation.UIRStylePainter/ClosingInfo get_closingInfo()
    // Offset: 0x55E8370
    ::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::ClosingInfo get_closingInfo();
    // public System.Int32 get_totalVertices()
    // Offset: 0x55E838C
    int get_totalVertices();
    // private System.Void set_totalVertices(System.Int32 value)
    // Offset: 0x55E8394
    void set_totalVertices(int value);
    // public System.Int32 get_totalIndices()
    // Offset: 0x55E839C
    int get_totalIndices();
    // private System.Void set_totalIndices(System.Int32 value)
    // Offset: 0x55E83A4
    void set_totalIndices(int value);
    // public System.Void Begin(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x55E83AC
    void Begin(::UnityEngine::UIElements::VisualElement* ve);
    // public System.Void LandClipUnregisterMeshDrawCommand(UnityEngine.UIElements.UIR.RenderChainCommand cmd)
    // Offset: 0x55E8900
    void LandClipUnregisterMeshDrawCommand(::UnityEngine::UIElements::UIR::RenderChainCommand* cmd);
    // public System.Void LandClipRegisterMesh(Unity.Collections.NativeSlice`1<UnityEngine.UIElements.Vertex> vertices, Unity.Collections.NativeSlice`1<System.UInt16> indices, System.Int32 indexOffset)
    // Offset: 0x55E897C
    void LandClipRegisterMesh(::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex> vertices, ::Unity::Collections::NativeSlice_1<uint16_t> indices, int indexOffset);
    // public UnityEngine.UIElements.MeshWriteData DrawMesh(System.Int32 vertexCount, System.Int32 indexCount, UnityEngine.Texture texture, UnityEngine.Material material, UnityEngine.UIElements.MeshGenerationContext/MeshFlags flags)
    // Offset: 0x55E7B3C
    ::UnityEngine::UIElements::MeshWriteData* DrawMesh(int vertexCount, int indexCount, ::UnityEngine::Texture* texture, ::UnityEngine::Material* material, ::UnityEngine::UIElements::MeshGenerationContext::MeshFlags flags);
    // System.Void TryAtlasTexture(UnityEngine.Texture texture, UnityEngine.UIElements.MeshGenerationContext/MeshFlags flags, out UnityEngine.Rect outUVRegion, out System.Boolean outIsAtlas, out UnityEngine.UIElements.TextureId outTextureId, out UnityEngine.UIElements.UIR.VertexFlags outAddFlags)
    // Offset: 0x55E8A18
    void TryAtlasTexture(::UnityEngine::Texture* texture, ::UnityEngine::UIElements::MeshGenerationContext::MeshFlags flags, ByRef<::UnityEngine::Rect> outUVRegion, ByRef<bool> outIsAtlas, ByRef<::UnityEngine::UIElements::TextureId> outTextureId, ByRef<::UnityEngine::UIElements::UIR::VertexFlags> outAddFlags);
    // System.Void BuildEntryFromNativeMesh(UnityEngine.UIElements.MeshWriteDataInterface meshData, UnityEngine.Texture texture, UnityEngine.UIElements.TextureId textureId, System.Boolean isAtlas, UnityEngine.Material material, UnityEngine.UIElements.MeshGenerationContext/MeshFlags flags, UnityEngine.Rect uvRegion, UnityEngine.UIElements.UIR.VertexFlags addFlags)
    // Offset: 0x55E8BD0
    void BuildEntryFromNativeMesh(::UnityEngine::UIElements::MeshWriteDataInterface meshData, ::UnityEngine::Texture* texture, ::UnityEngine::UIElements::TextureId textureId, bool isAtlas, ::UnityEngine::Material* material, ::UnityEngine::UIElements::MeshGenerationContext::MeshFlags flags, ::UnityEngine::Rect uvRegion, ::UnityEngine::UIElements::UIR::VertexFlags addFlags);
    // System.Void BuildGradientEntryFromNativeMesh(UnityEngine.UIElements.MeshWriteDataInterface meshData, UnityEngine.UIElements.TextureId svgTextureId)
    // Offset: 0x55E902C
    void BuildGradientEntryFromNativeMesh(::UnityEngine::UIElements::MeshWriteDataInterface meshData, ::UnityEngine::UIElements::TextureId svgTextureId);
    // public System.Void BuildRawEntryFromNativeMesh(UnityEngine.UIElements.MeshWriteDataInterface meshData)
    // Offset: 0x55E943C
    void BuildRawEntryFromNativeMesh(::UnityEngine::UIElements::MeshWriteDataInterface meshData);
    // public System.Void DrawText(UnityEngine.UIElements.TextElement te)
    // Offset: 0x55E961C
    void DrawText(::UnityEngine::UIElements::TextElement* te);
    // private System.Void DrawTextInfo(UnityEngine.TextCore.Text.TextInfo textInfo, UnityEngine.Vector2 offset, System.Boolean useHints)
    // Offset: 0x55E96B4
    void DrawTextInfo(::UnityEngine::TextCore::Text::TextInfo* textInfo, ::UnityEngine::Vector2 offset, bool useHints);
    // public System.Void DrawRectangle(UnityEngine.UIElements.MeshGenerationContextUtils/RectangleParams rectParams)
    // Offset: 0x55E9C6C
    void DrawRectangle(::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams rectParams);
    // public System.Void DrawBorder(UnityEngine.UIElements.MeshGenerationContextUtils/BorderParams borderParams)
    // Offset: 0x55EA5E4
    void DrawBorder(::UnityEngine::UIElements::MeshGenerationContextUtils::BorderParams borderParams);
    // public System.Void DrawImmediate(System.Action callback, System.Boolean cullingEnabled)
    // Offset: 0x55EA674
    void DrawImmediate(::System::Action* callback, bool cullingEnabled);
    // public UnityEngine.UIElements.VisualElement get_visualElement()
    // Offset: 0x55EA7E8
    ::UnityEngine::UIElements::VisualElement* get_visualElement();
    // public System.Void DrawVisualElementBackground()
    // Offset: 0x55EA7F0
    void DrawVisualElementBackground();
    // private System.Void DrawRectangleRepeat(UnityEngine.UIElements.MeshGenerationContextUtils/RectangleParams rectParams, UnityEngine.Rect totalRect)
    // Offset: 0x55EB854
    void DrawRectangleRepeat(::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams rectParams, ::UnityEngine::Rect totalRect);
    // private System.Void StampRectangleWithSubRect(UnityEngine.UIElements.MeshGenerationContextUtils/RectangleParams rectParams, UnityEngine.Rect targetRect, UnityEngine.Rect targetUV)
    // Offset: 0x55ECB9C
    void StampRectangleWithSubRect(::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams rectParams, ::UnityEngine::Rect targetRect, ::UnityEngine::Rect targetUV);
    // public System.Void DrawVisualElementBorder()
    // Offset: 0x55ECD9C
    void DrawVisualElementBorder();
    // public System.Void ApplyVisualElementClipping()
    // Offset: 0x55ED6D4
    void ApplyVisualElementClipping();
    // private System.UInt16[] AdjustSpriteWinding(UnityEngine.Vector2[] vertices, System.UInt16[] indices)
    // Offset: 0x55EE5E8
    ::ArrayW<uint16_t> AdjustSpriteWinding(::ArrayW<::UnityEngine::Vector2> vertices, ::ArrayW<uint16_t> indices);
    // public System.Void DrawSprite(UnityEngine.UIElements.MeshGenerationContextUtils/RectangleParams rectParams)
    // Offset: 0x55EA24C
    void DrawSprite(::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams rectParams);
    // public System.Void DrawVectorImage(UnityEngine.UIElements.MeshGenerationContextUtils/RectangleParams rectParams)
    // Offset: 0x55E9E88
    void DrawVectorImage(::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams rectParams);
    // private System.Void MakeVectorGraphics(UnityEngine.UIElements.MeshGenerationContextUtils/RectangleParams rectParams, System.Boolean isUsingGradients, UnityEngine.UIElements.TextureId svgTexture, System.Int32 settingIndexOffset, out System.Int32 finalVertexCount, out System.Int32 finalIndexCount)
    // Offset: 0x55EE908
    void MakeVectorGraphics(::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams rectParams, bool isUsingGradients, ::UnityEngine::UIElements::TextureId svgTexture, int settingIndexOffset, ByRef<int> finalVertexCount, ByRef<int> finalIndexCount);
    // System.Void Reset()
    // Offset: 0x55EECD8
    void Reset();
    // private System.Void ValidateMeshWriteData()
    // Offset: 0x55EED70
    void ValidateMeshWriteData();
    // private System.Void GenerateStencilClipEntryForRoundedRectBackground()
    // Offset: 0x55EDCA8
    void GenerateStencilClipEntryForRoundedRectBackground();
    // private System.Void GenerateStencilClipEntryForSVGBackground()
    // Offset: 0x55ED91C
    void GenerateStencilClipEntryForSVGBackground();
  }; // UnityEngine.UIElements.UIR.Implementation.UIRStylePainter
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::RepeatRectUV, "UnityEngine.UIElements.UIR.Implementation", "UIRStylePainter/RepeatRectUV");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::ClosingInfo, "UnityEngine.UIElements.UIR.Implementation", "UIRStylePainter/ClosingInfo");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::Entry, "UnityEngine.UIElements.UIR.Implementation", "UIRStylePainter/Entry");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::GetPooledMeshWriteData
// Il2CppName: GetPooledMeshWriteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::MeshWriteData* (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)()>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::GetPooledMeshWriteData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "GetPooledMeshWriteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::AllocRawVertsIndices
// Il2CppName: AllocRawVertsIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::MeshWriteData* (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(uint, uint, ByRef<::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData>)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::AllocRawVertsIndices)> {
  static const MethodInfo* get() {
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* indexCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* allocatorData = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "MeshBuilder/AllocMeshData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "AllocRawVertsIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexCount, indexCount, allocatorData});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::AllocThroughDrawMesh
// Il2CppName: AllocThroughDrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::MeshWriteData* (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(uint, uint, ByRef<::UnityEngine::UIElements::UIR::MeshBuilder::AllocMeshData>)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::AllocThroughDrawMesh)> {
  static const MethodInfo* get() {
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* indexCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* allocatorData = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "MeshBuilder/AllocMeshData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "AllocThroughDrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexCount, indexCount, allocatorData});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::get_meshGenerationContext
// Il2CppName: get_meshGenerationContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::MeshGenerationContext* (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)()>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::get_meshGenerationContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "get_meshGenerationContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::get_currentElement
// Il2CppName: get_currentElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)()>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::get_currentElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "get_currentElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::set_currentElement
// Il2CppName: set_currentElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::set_currentElement)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "set_currentElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::get_entries
// Il2CppName: get_entries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::Entry>* (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)()>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::get_entries)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "get_entries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::get_closingInfo
// Il2CppName: get_closingInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::ClosingInfo (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)()>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::get_closingInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "get_closingInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::get_totalVertices
// Il2CppName: get_totalVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)()>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::get_totalVertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "get_totalVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::set_totalVertices
// Il2CppName: set_totalVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(int)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::set_totalVertices)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "set_totalVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::get_totalIndices
// Il2CppName: get_totalIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)()>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::get_totalIndices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "get_totalIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::set_totalIndices
// Il2CppName: set_totalIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(int)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::set_totalIndices)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "set_totalIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::Begin
// Il2CppName: Begin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::Begin)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "Begin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::LandClipUnregisterMeshDrawCommand
// Il2CppName: LandClipUnregisterMeshDrawCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::UIElements::UIR::RenderChainCommand*)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::LandClipUnregisterMeshDrawCommand)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "RenderChainCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "LandClipUnregisterMeshDrawCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::LandClipRegisterMesh
// Il2CppName: LandClipRegisterMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex>, ::Unity::Collections::NativeSlice_1<uint16_t>, int)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::LandClipRegisterMesh)> {
  static const MethodInfo* get() {
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeSlice`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Vertex")})->byval_arg;
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeSlice`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    static auto* indexOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "LandClipRegisterMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, indices, indexOffset});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawMesh
// Il2CppName: DrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::MeshWriteData* (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(int, int, ::UnityEngine::Texture*, ::UnityEngine::Material*, ::UnityEngine::UIElements::MeshGenerationContext::MeshFlags)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawMesh)> {
  static const MethodInfo* get() {
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MeshGenerationContext/MeshFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "DrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexCount, indexCount, texture, material, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::TryAtlasTexture
// Il2CppName: TryAtlasTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::Texture*, ::UnityEngine::UIElements::MeshGenerationContext::MeshFlags, ByRef<::UnityEngine::Rect>, ByRef<bool>, ByRef<::UnityEngine::UIElements::TextureId>, ByRef<::UnityEngine::UIElements::UIR::VertexFlags>)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::TryAtlasTexture)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MeshGenerationContext/MeshFlags")->byval_arg;
    static auto* outUVRegion = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* outIsAtlas = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* outTextureId = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TextureId")->this_arg;
    static auto* outAddFlags = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "VertexFlags")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "TryAtlasTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, flags, outUVRegion, outIsAtlas, outTextureId, outAddFlags});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::BuildEntryFromNativeMesh
// Il2CppName: BuildEntryFromNativeMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::UIElements::MeshWriteDataInterface, ::UnityEngine::Texture*, ::UnityEngine::UIElements::TextureId, bool, ::UnityEngine::Material*, ::UnityEngine::UIElements::MeshGenerationContext::MeshFlags, ::UnityEngine::Rect, ::UnityEngine::UIElements::UIR::VertexFlags)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::BuildEntryFromNativeMesh)> {
  static const MethodInfo* get() {
    static auto* meshData = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MeshWriteDataInterface")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* textureId = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TextureId")->byval_arg;
    static auto* isAtlas = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MeshGenerationContext/MeshFlags")->byval_arg;
    static auto* uvRegion = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* addFlags = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "VertexFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "BuildEntryFromNativeMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshData, texture, textureId, isAtlas, material, flags, uvRegion, addFlags});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::BuildGradientEntryFromNativeMesh
// Il2CppName: BuildGradientEntryFromNativeMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::UIElements::MeshWriteDataInterface, ::UnityEngine::UIElements::TextureId)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::BuildGradientEntryFromNativeMesh)> {
  static const MethodInfo* get() {
    static auto* meshData = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MeshWriteDataInterface")->byval_arg;
    static auto* svgTextureId = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TextureId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "BuildGradientEntryFromNativeMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshData, svgTextureId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::BuildRawEntryFromNativeMesh
// Il2CppName: BuildRawEntryFromNativeMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::UIElements::MeshWriteDataInterface)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::BuildRawEntryFromNativeMesh)> {
  static const MethodInfo* get() {
    static auto* meshData = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MeshWriteDataInterface")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "BuildRawEntryFromNativeMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshData});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawText
// Il2CppName: DrawText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::UIElements::TextElement*)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawText)> {
  static const MethodInfo* get() {
    static auto* te = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TextElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "DrawText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{te});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawTextInfo
// Il2CppName: DrawTextInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::TextCore::Text::TextInfo*, ::UnityEngine::Vector2, bool)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawTextInfo)> {
  static const MethodInfo* get() {
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.Text", "TextInfo")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* useHints = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "DrawTextInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textInfo, offset, useHints});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawRectangle
// Il2CppName: DrawRectangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawRectangle)> {
  static const MethodInfo* get() {
    static auto* rectParams = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MeshGenerationContextUtils/RectangleParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "DrawRectangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectParams});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawBorder
// Il2CppName: DrawBorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::UIElements::MeshGenerationContextUtils::BorderParams)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawBorder)> {
  static const MethodInfo* get() {
    static auto* borderParams = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MeshGenerationContextUtils/BorderParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "DrawBorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{borderParams});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawImmediate
// Il2CppName: DrawImmediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::System::Action*, bool)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawImmediate)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* cullingEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "DrawImmediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, cullingEnabled});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::get_visualElement
// Il2CppName: get_visualElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)()>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::get_visualElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "get_visualElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawVisualElementBackground
// Il2CppName: DrawVisualElementBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)()>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawVisualElementBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "DrawVisualElementBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawRectangleRepeat
// Il2CppName: DrawRectangleRepeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams, ::UnityEngine::Rect)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawRectangleRepeat)> {
  static const MethodInfo* get() {
    static auto* rectParams = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MeshGenerationContextUtils/RectangleParams")->byval_arg;
    static auto* totalRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "DrawRectangleRepeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectParams, totalRect});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::StampRectangleWithSubRect
// Il2CppName: StampRectangleWithSubRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams, ::UnityEngine::Rect, ::UnityEngine::Rect)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::StampRectangleWithSubRect)> {
  static const MethodInfo* get() {
    static auto* rectParams = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MeshGenerationContextUtils/RectangleParams")->byval_arg;
    static auto* targetRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* targetUV = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "StampRectangleWithSubRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectParams, targetRect, targetUV});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawVisualElementBorder
// Il2CppName: DrawVisualElementBorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)()>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawVisualElementBorder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "DrawVisualElementBorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::ApplyVisualElementClipping
// Il2CppName: ApplyVisualElementClipping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)()>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::ApplyVisualElementClipping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "ApplyVisualElementClipping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::AdjustSpriteWinding
// Il2CppName: AdjustSpriteWinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint16_t> (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::ArrayW<::UnityEngine::Vector2>, ::ArrayW<uint16_t>)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::AdjustSpriteWinding)> {
  static const MethodInfo* get() {
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "AdjustSpriteWinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, indices});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawSprite
// Il2CppName: DrawSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawSprite)> {
  static const MethodInfo* get() {
    static auto* rectParams = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MeshGenerationContextUtils/RectangleParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "DrawSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectParams});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawVectorImage
// Il2CppName: DrawVectorImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::DrawVectorImage)> {
  static const MethodInfo* get() {
    static auto* rectParams = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MeshGenerationContextUtils/RectangleParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "DrawVectorImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectParams});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::MakeVectorGraphics
// Il2CppName: MakeVectorGraphics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)(::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams, bool, ::UnityEngine::UIElements::TextureId, int, ByRef<int>, ByRef<int>)>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::MakeVectorGraphics)> {
  static const MethodInfo* get() {
    static auto* rectParams = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "MeshGenerationContextUtils/RectangleParams")->byval_arg;
    static auto* isUsingGradients = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* svgTexture = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TextureId")->byval_arg;
    static auto* settingIndexOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* finalVertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* finalIndexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "MakeVectorGraphics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectParams, isUsingGradients, svgTexture, settingIndexOffset, finalVertexCount, finalIndexCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)()>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::ValidateMeshWriteData
// Il2CppName: ValidateMeshWriteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)()>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::ValidateMeshWriteData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "ValidateMeshWriteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::GenerateStencilClipEntryForRoundedRectBackground
// Il2CppName: GenerateStencilClipEntryForRoundedRectBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)()>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::GenerateStencilClipEntryForRoundedRectBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "GenerateStencilClipEntryForRoundedRectBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::GenerateStencilClipEntryForSVGBackground
// Il2CppName: GenerateStencilClipEntryForSVGBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::*)()>(&UnityEngine::UIElements::UIR::Implementation::UIRStylePainter::GenerateStencilClipEntryForSVGBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::Implementation::UIRStylePainter*), "GenerateStencilClipEntryForSVGBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
