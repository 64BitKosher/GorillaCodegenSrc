// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.UIntPtr
#include "System/UIntPtr.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: GfxUpdateBufferRange
  struct GfxUpdateBufferRange;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::GfxUpdateBufferRange, "UnityEngine.UIElements.UIR", "GfxUpdateBufferRange");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.UIR.GfxUpdateBufferRange
  // [TokenAttribute] Offset: FFFFFFFF
  struct GfxUpdateBufferRange/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt32 offsetFromWriteStart
    // Size: 0x4
    // Offset: 0x0
    uint offsetFromWriteStart;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 size
    // Size: 0x4
    // Offset: 0x4
    uint size;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UIntPtr source
    // Size: 0x8
    // Offset: 0x8
    ::System::UIntPtr source;
    // Field size check
    static_assert(sizeof(::System::UIntPtr) == 0x8);
    public:
    // Creating value type constructor for type: GfxUpdateBufferRange
    constexpr GfxUpdateBufferRange(uint offsetFromWriteStart_ = {}, uint size_ = {}, ::System::UIntPtr source_ = {}) noexcept : offsetFromWriteStart{offsetFromWriteStart_}, size{size_}, source{source_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt32 offsetFromWriteStart
    [[deprecated("Use field access instead!")]] uint& dyn_offsetFromWriteStart();
    // Get instance field reference: public System.UInt32 size
    [[deprecated("Use field access instead!")]] uint& dyn_size();
    // Get instance field reference: public System.UIntPtr source
    [[deprecated("Use field access instead!")]] ::System::UIntPtr& dyn_source();
  }; // UnityEngine.UIElements.UIR.GfxUpdateBufferRange
  #pragma pack(pop)
  static check_size<sizeof(GfxUpdateBufferRange), 8 + sizeof(::System::UIntPtr)> __UnityEngine_UIElements_UIR_GfxUpdateBufferRangeSizeCheck;
  static_assert(sizeof(GfxUpdateBufferRange) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
