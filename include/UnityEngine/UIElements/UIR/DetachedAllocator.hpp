// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.Vertex
#include "UnityEngine/UIElements/Vertex.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: TempAllocator`1<T>
  template<typename T>
  class TempAllocator_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: MeshWriteData
  class MeshWriteData;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: DetachedAllocator
  class DetachedAllocator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIR::DetachedAllocator);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::DetachedAllocator*, "UnityEngine.UIElements.UIR", "DetachedAllocator");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x2D
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UIR.DetachedAllocator
  // [TokenAttribute] Offset: FFFFFFFF
  class DetachedAllocator : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.UIElements.UIR.TempAllocator`1<UnityEngine.UIElements.Vertex> m_VertsPool
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::UIR::TempAllocator_1<::UnityEngine::UIElements::Vertex>* m_VertsPool;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::TempAllocator_1<::UnityEngine::UIElements::Vertex>*) == 0x8);
    // private UnityEngine.UIElements.UIR.TempAllocator`1<System.UInt16> m_IndexPool
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::UIR::TempAllocator_1<uint16_t>* m_IndexPool;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::TempAllocator_1<uint16_t>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.MeshWriteData> m_MeshWriteDataPool
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::MeshWriteData*>* m_MeshWriteDataPool;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::MeshWriteData*>*) == 0x8);
    // private System.Int32 m_MeshWriteDataCount
    // Size: 0x4
    // Offset: 0x28
    int m_MeshWriteDataCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_Disposed
    // Size: 0x1
    // Offset: 0x2C
    bool m_Disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.UIElements.UIR.TempAllocator`1<UnityEngine.UIElements.Vertex> m_VertsPool
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::TempAllocator_1<::UnityEngine::UIElements::Vertex>*& dyn_m_VertsPool();
    // Get instance field reference: private UnityEngine.UIElements.UIR.TempAllocator`1<System.UInt16> m_IndexPool
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::TempAllocator_1<uint16_t>*& dyn_m_IndexPool();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.MeshWriteData> m_MeshWriteDataPool
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::MeshWriteData*>*& dyn_m_MeshWriteDataPool();
    // Get instance field reference: private System.Int32 m_MeshWriteDataCount
    [[deprecated("Use field access instead!")]] int& dyn_m_MeshWriteDataCount();
    // Get instance field reference: private System.Boolean m_Disposed
    [[deprecated("Use field access instead!")]] bool& dyn_m_Disposed();
    // public System.Void Dispose()
    // Offset: 0x55CBE6C
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x55CBED0
    void Dispose(bool disposing);
  }; // UnityEngine.UIElements.UIR.DetachedAllocator
  #pragma pack(pop)
  static check_size<sizeof(DetachedAllocator), 44 + sizeof(bool)> __UnityEngine_UIElements_UIR_DetachedAllocatorSizeCheck;
  static_assert(sizeof(DetachedAllocator) == 0x2D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::DetachedAllocator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::DetachedAllocator::*)()>(&UnityEngine::UIElements::UIR::DetachedAllocator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::DetachedAllocator*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::DetachedAllocator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::DetachedAllocator::*)(bool)>(&UnityEngine::UIElements::UIR::DetachedAllocator::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::DetachedAllocator*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
