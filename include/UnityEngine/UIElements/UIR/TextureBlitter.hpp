// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.RectInt
#include "UnityEngine/RectInt.hpp"
// Including type: Unity.Profiling.ProfilerMarker
#include "Unity/Profiling/ProfilerMarker.hpp"
// Including type: UnityEngine.Vector2Int
#include "UnityEngine/Vector2Int.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Texture
  class Texture;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: TextureBlitter
  class TextureBlitter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIR::TextureBlitter);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::TextureBlitter*, "UnityEngine.UIElements.UIR", "TextureBlitter");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UIR.TextureBlitter
  // [TokenAttribute] Offset: FFFFFFFF
  class TextureBlitter : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::UIR::TextureBlitter::BlitInfo
    struct BlitInfo;
    // Size: 0x34
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.UIR.TextureBlitter/BlitInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct BlitInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Texture src
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Texture* src;
      // Field size check
      static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
      // public UnityEngine.RectInt srcRect
      // Size: 0x10
      // Offset: 0x8
      ::UnityEngine::RectInt srcRect;
      // Field size check
      static_assert(sizeof(::UnityEngine::RectInt) == 0x10);
      // public UnityEngine.Vector2Int dstPos
      // Size: 0x8
      // Offset: 0x18
      ::UnityEngine::Vector2Int dstPos;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector2Int) == 0x8);
      // public System.Int32 border
      // Size: 0x4
      // Offset: 0x20
      int border;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public UnityEngine.Color tint
      // Size: 0x10
      // Offset: 0x24
      ::UnityEngine::Color tint;
      // Field size check
      static_assert(sizeof(::UnityEngine::Color) == 0x10);
      public:
      // Creating value type constructor for type: BlitInfo
      constexpr BlitInfo(::UnityEngine::Texture* src_ = {}, ::UnityEngine::RectInt srcRect_ = {}, ::UnityEngine::Vector2Int dstPos_ = {}, int border_ = {}, ::UnityEngine::Color tint_ = {}) noexcept : src{src_}, srcRect{srcRect_}, dstPos{dstPos_}, border{border_}, tint{tint_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Texture src
      [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_src();
      // Get instance field reference: public UnityEngine.RectInt srcRect
      [[deprecated("Use field access instead!")]] ::UnityEngine::RectInt& dyn_srcRect();
      // Get instance field reference: public UnityEngine.Vector2Int dstPos
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2Int& dyn_dstPos();
      // Get instance field reference: public System.Int32 border
      [[deprecated("Use field access instead!")]] int& dyn_border();
      // Get instance field reference: public UnityEngine.Color tint
      [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_tint();
    }; // UnityEngine.UIElements.UIR.TextureBlitter/BlitInfo
    #pragma pack(pop)
    static check_size<sizeof(TextureBlitter::BlitInfo), 36 + sizeof(::UnityEngine::Color)> __UnityEngine_UIElements_UIR_TextureBlitter_BlitInfoSizeCheck;
    static_assert(sizeof(TextureBlitter::BlitInfo) == 0x34);
    public:
    // private UnityEngine.UIElements.UIR.TextureBlitter/BlitInfo[] m_SingleBlit
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::UIElements::UIR::TextureBlitter::BlitInfo> m_SingleBlit;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UIElements::UIR::TextureBlitter::BlitInfo>) == 0x8);
    // private UnityEngine.Material m_BlitMaterial
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* m_BlitMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.MaterialPropertyBlock m_Properties
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::MaterialPropertyBlock* m_Properties;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // private UnityEngine.RectInt m_Viewport
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::RectInt m_Viewport;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectInt) == 0x10);
    // private UnityEngine.RenderTexture m_PrevRT
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::RenderTexture* m_PrevRT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.TextureBlitter/BlitInfo> m_PendingBlits
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::TextureBlitter::BlitInfo>* m_PendingBlits;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::TextureBlitter::BlitInfo>*) == 0x8);
    // private System.Boolean <disposed>k__BackingField
    // Size: 0x1
    // Offset: 0x48
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private readonly System.Int32[] k_TextureIds
    static ::ArrayW<int> _get_k_TextureIds();
    // Set static field: static private readonly System.Int32[] k_TextureIds
    static void _set_k_TextureIds(::ArrayW<int> value);
    // Get static field: static private Unity.Profiling.ProfilerMarker s_CommitSampler
    static ::Unity::Profiling::ProfilerMarker _get_s_CommitSampler();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_CommitSampler
    static void _set_s_CommitSampler(::Unity::Profiling::ProfilerMarker value);
    // Get instance field reference: private UnityEngine.UIElements.UIR.TextureBlitter/BlitInfo[] m_SingleBlit
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UIElements::UIR::TextureBlitter::BlitInfo>& dyn_m_SingleBlit();
    // Get instance field reference: private UnityEngine.Material m_BlitMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_BlitMaterial();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock m_Properties
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_m_Properties();
    // Get instance field reference: private UnityEngine.RectInt m_Viewport
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectInt& dyn_m_Viewport();
    // Get instance field reference: private UnityEngine.RenderTexture m_PrevRT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_m_PrevRT();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.UIR.TextureBlitter/BlitInfo> m_PendingBlits
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIR::TextureBlitter::BlitInfo>*& dyn_m_PendingBlits();
    // Get instance field reference: private System.Boolean <disposed>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$disposed$k__BackingField();
    // protected System.Boolean get_disposed()
    // Offset: 0x55D3614
    bool get_disposed();
    // private System.Void set_disposed(System.Boolean value)
    // Offset: 0x55D361C
    void set_disposed(bool value);
    // public System.Void Dispose()
    // Offset: 0x55D3628
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x55D3694
    void Dispose(bool disposing);
    // static private System.Void .cctor()
    // Offset: 0x55D3720
    static void _cctor();
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0x55D385C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextureBlitter* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::TextureBlitter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextureBlitter*, creationType>(capacity)));
    }
    // public System.Void QueueBlit(UnityEngine.Texture src, UnityEngine.RectInt srcRect, UnityEngine.Vector2Int dstPos, System.Boolean addBorder, UnityEngine.Color tint)
    // Offset: 0x55D3924
    void QueueBlit(::UnityEngine::Texture* src, ::UnityEngine::RectInt srcRect, ::UnityEngine::Vector2Int dstPos, bool addBorder, ::UnityEngine::Color tint);
    // public System.Void BlitOneNow(UnityEngine.RenderTexture dst, UnityEngine.Texture src, UnityEngine.RectInt srcRect, UnityEngine.Vector2Int dstPos, System.Boolean addBorder, UnityEngine.Color tint)
    // Offset: 0x55D3AD4
    void BlitOneNow(::UnityEngine::RenderTexture* dst, ::UnityEngine::Texture* src, ::UnityEngine::RectInt srcRect, ::UnityEngine::Vector2Int dstPos, bool addBorder, ::UnityEngine::Color tint);
    // public System.Void Commit(UnityEngine.RenderTexture dst)
    // Offset: 0x55D4470
    void Commit(::UnityEngine::RenderTexture* dst);
    // private System.Void BeginBlit(UnityEngine.RenderTexture dst)
    // Offset: 0x55D3C24
    void BeginBlit(::UnityEngine::RenderTexture* dst);
    // private System.Void DoBlit(System.Collections.Generic.IList`1<UnityEngine.UIElements.UIR.TextureBlitter/BlitInfo> blitInfos, System.Int32 startIndex)
    // Offset: 0x55D3E54
    void DoBlit(::System::Collections::Generic::IList_1<::UnityEngine::UIElements::UIR::TextureBlitter::BlitInfo>* blitInfos, int startIndex);
    // private System.Void EndBlit()
    // Offset: 0x55D43F4
    void EndBlit();
  }; // UnityEngine.UIElements.UIR.TextureBlitter
  #pragma pack(pop)
  static check_size<sizeof(TextureBlitter), 72 + sizeof(bool)> __UnityEngine_UIElements_UIR_TextureBlitterSizeCheck;
  static_assert(sizeof(TextureBlitter) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::TextureBlitter::BlitInfo, "UnityEngine.UIElements.UIR", "TextureBlitter/BlitInfo");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureBlitter::get_disposed
// Il2CppName: get_disposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UIR::TextureBlitter::*)()>(&UnityEngine::UIElements::UIR::TextureBlitter::get_disposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureBlitter*), "get_disposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureBlitter::set_disposed
// Il2CppName: set_disposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::TextureBlitter::*)(bool)>(&UnityEngine::UIElements::UIR::TextureBlitter::set_disposed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureBlitter*), "set_disposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureBlitter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::TextureBlitter::*)()>(&UnityEngine::UIElements::UIR::TextureBlitter::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureBlitter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureBlitter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::TextureBlitter::*)(bool)>(&UnityEngine::UIElements::UIR::TextureBlitter::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureBlitter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureBlitter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::UIR::TextureBlitter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureBlitter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureBlitter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureBlitter::QueueBlit
// Il2CppName: QueueBlit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::TextureBlitter::*)(::UnityEngine::Texture*, ::UnityEngine::RectInt, ::UnityEngine::Vector2Int, bool, ::UnityEngine::Color)>(&UnityEngine::UIElements::UIR::TextureBlitter::QueueBlit)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* srcRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectInt")->byval_arg;
    static auto* dstPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2Int")->byval_arg;
    static auto* addBorder = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureBlitter*), "QueueBlit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, srcRect, dstPos, addBorder, tint});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureBlitter::BlitOneNow
// Il2CppName: BlitOneNow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::TextureBlitter::*)(::UnityEngine::RenderTexture*, ::UnityEngine::Texture*, ::UnityEngine::RectInt, ::UnityEngine::Vector2Int, bool, ::UnityEngine::Color)>(&UnityEngine::UIElements::UIR::TextureBlitter::BlitOneNow)> {
  static const MethodInfo* get() {
    static auto* dst = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* srcRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectInt")->byval_arg;
    static auto* dstPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2Int")->byval_arg;
    static auto* addBorder = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureBlitter*), "BlitOneNow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dst, src, srcRect, dstPos, addBorder, tint});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureBlitter::Commit
// Il2CppName: Commit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::TextureBlitter::*)(::UnityEngine::RenderTexture*)>(&UnityEngine::UIElements::UIR::TextureBlitter::Commit)> {
  static const MethodInfo* get() {
    static auto* dst = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureBlitter*), "Commit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dst});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureBlitter::BeginBlit
// Il2CppName: BeginBlit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::TextureBlitter::*)(::UnityEngine::RenderTexture*)>(&UnityEngine::UIElements::UIR::TextureBlitter::BeginBlit)> {
  static const MethodInfo* get() {
    static auto* dst = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureBlitter*), "BeginBlit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dst});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureBlitter::DoBlit
// Il2CppName: DoBlit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::TextureBlitter::*)(::System::Collections::Generic::IList_1<::UnityEngine::UIElements::UIR::TextureBlitter::BlitInfo>*, int)>(&UnityEngine::UIElements::UIR::TextureBlitter::DoBlit)> {
  static const MethodInfo* get() {
    static auto* blitInfos = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "TextureBlitter/BlitInfo")})->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureBlitter*), "DoBlit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blitInfos, startIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::TextureBlitter::EndBlit
// Il2CppName: EndBlit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::TextureBlitter::*)()>(&UnityEngine::UIElements::UIR::TextureBlitter::EndBlit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::TextureBlitter*), "EndBlit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
