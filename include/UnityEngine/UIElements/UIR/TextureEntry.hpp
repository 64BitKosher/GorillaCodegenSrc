// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.TextureId
#include "UnityEngine/UIElements/TextureId.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: TextureEntry
  struct TextureEntry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::TextureEntry, "UnityEngine.UIElements.UIR", "TextureEntry");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0xD
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.UIR.TextureEntry
  // [TokenAttribute] Offset: FFFFFFFF
  struct TextureEntry/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Texture source
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Texture* source;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public UnityEngine.UIElements.TextureId actual
    // Size: 0x4
    // Offset: 0x8
    ::UnityEngine::UIElements::TextureId actual;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::TextureId) == 0x4);
    // public System.Boolean replaced
    // Size: 0x1
    // Offset: 0xC
    bool replaced;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: TextureEntry
    constexpr TextureEntry(::UnityEngine::Texture* source_ = {}, ::UnityEngine::UIElements::TextureId actual_ = {}, bool replaced_ = {}) noexcept : source{source_}, actual{actual_}, replaced{replaced_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Texture source
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_source();
    // Get instance field reference: public UnityEngine.UIElements.TextureId actual
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::TextureId& dyn_actual();
    // Get instance field reference: public System.Boolean replaced
    [[deprecated("Use field access instead!")]] bool& dyn_replaced();
  }; // UnityEngine.UIElements.UIR.TextureEntry
  #pragma pack(pop)
  static check_size<sizeof(TextureEntry), 12 + sizeof(bool)> __UnityEngine_UIElements_UIR_TextureEntrySizeCheck;
  static_assert(sizeof(TextureEntry) == 0xD);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
