// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UIR.OpacityIdAccelerator
#include "UnityEngine/UIElements/UIR/OpacityIdAccelerator.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.IJobParallelFor
#include "Unity/Jobs/IJobParallelFor.hpp"
// Including type: Unity.Collections.NativeSlice`1
#include "Unity/Collections/NativeSlice_1.hpp"
// Including type: UnityEngine.UIElements.Vertex
#include "UnityEngine/UIElements/Vertex.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::OpacityIdAccelerator::OpacityIdUpdateJob, "UnityEngine.UIElements.UIR", "OpacityIdAccelerator/OpacityIdUpdateJob");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.UIR.OpacityIdAccelerator/OpacityIdUpdateJob
  // [TokenAttribute] Offset: FFFFFFFF
  struct OpacityIdAccelerator::OpacityIdUpdateJob/*, public ::System::ValueType, public ::Unity::Jobs::IJobParallelFor*/ {
    public:
    public:
    // public Unity.Collections.NativeSlice`1<UnityEngine.UIElements.Vertex> oldVerts
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex> oldVerts;
    // public Unity.Collections.NativeSlice`1<UnityEngine.UIElements.Vertex> newVerts
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex> newVerts;
    // public UnityEngine.Color32 opacityData
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::Color32 opacityData;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    public:
    // Creating value type constructor for type: OpacityIdUpdateJob
    constexpr OpacityIdUpdateJob(::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex> oldVerts_ = {}, ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex> newVerts_ = {}, ::UnityEngine::Color32 opacityData_ = {}) noexcept : oldVerts{oldVerts_}, newVerts{newVerts_}, opacityData{opacityData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Jobs::IJobParallelFor
    operator ::Unity::Jobs::IJobParallelFor() noexcept {
      return *reinterpret_cast<::Unity::Jobs::IJobParallelFor*>(this);
    }
    // Get instance field reference: public Unity.Collections.NativeSlice`1<UnityEngine.UIElements.Vertex> oldVerts
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex>& dyn_oldVerts();
    // Get instance field reference: public Unity.Collections.NativeSlice`1<UnityEngine.UIElements.Vertex> newVerts
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex>& dyn_newVerts();
    // Get instance field reference: public UnityEngine.Color32 opacityData
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_opacityData();
    // public System.Void Execute(System.Int32 i)
    // Offset: 0x55CE288
    void Execute(int i);
  }; // UnityEngine.UIElements.UIR.OpacityIdAccelerator/OpacityIdUpdateJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::OpacityIdAccelerator::OpacityIdUpdateJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIR::OpacityIdAccelerator::OpacityIdUpdateJob::*)(int)>(&UnityEngine::UIElements::UIR::OpacityIdAccelerator::OpacityIdUpdateJob::Execute)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::OpacityIdAccelerator::OpacityIdUpdateJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
