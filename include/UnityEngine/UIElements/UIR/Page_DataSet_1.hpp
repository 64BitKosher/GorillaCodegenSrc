// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UIR.Page
#include "UnityEngine/UIElements/UIR/Page.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.UIElements.UIR.Utility
#include "UnityEngine/UIElements/UIR/Utility.hpp"
// Including type: UnityEngine.UIElements.UIR.GfxUpdateBufferRange
#include "UnityEngine/UIElements/UIR/GfxUpdateBufferRange.hpp"
// Including type: UnityEngine.UIElements.UIR.Utility/GPUBufferType
#include "UnityEngine/UIElements/UIR/Utility_GPUBufferType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
}
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: GPUBufferAllocator
  class GPUBufferAllocator;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::UIR::Page::DataSet_1, "UnityEngine.UIElements.UIR", "Page/DataSet`1");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.UIR.Page/DataSet`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class Page::DataSet_1 : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Boolean <disposed>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.UIElements.UIR.Utility/GPUBuffer`1<T> gpuData
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UIR::Utility::GPUBuffer_1<T>* gpuData;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::Utility::GPUBuffer_1<T>*) == 0x8);
    // public Unity.Collections.NativeArray`1<T> cpuData
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<T> cpuData;
    // public Unity.Collections.NativeArray`1<UnityEngine.UIElements.UIR.GfxUpdateBufferRange> updateRanges
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<::UnityEngine::UIElements::UIR::GfxUpdateBufferRange> updateRanges;
    // public UnityEngine.UIElements.UIR.GPUBufferAllocator allocator
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UIR::GPUBufferAllocator* allocator;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::GPUBufferAllocator*) == 0x8);
    // private readonly System.UInt32 m_UpdateRangePoolSize
    // Size: 0x4
    // Offset: 0x0
    uint m_UpdateRangePoolSize;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_ElemStride
    // Size: 0x4
    // Offset: 0x0
    uint m_ElemStride;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_UpdateRangeMin
    // Size: 0x4
    // Offset: 0x0
    uint m_UpdateRangeMin;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_UpdateRangeMax
    // Size: 0x4
    // Offset: 0x0
    uint m_UpdateRangeMax;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_UpdateRangesEnqueued
    // Size: 0x4
    // Offset: 0x0
    uint m_UpdateRangesEnqueued;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_UpdateRangesBatchStart
    // Size: 0x4
    // Offset: 0x0
    uint m_UpdateRangesBatchStart;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Boolean m_UpdateRangesSaturated
    // Size: 0x1
    // Offset: 0x0
    bool m_UpdateRangesSaturated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <disposed>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$disposed$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::dyn_$disposed$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<disposed>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public UnityEngine.UIElements.UIR.Utility/GPUBuffer`1<T> gpuData
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::Utility::GPUBuffer_1<T>*& dyn_gpuData() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::dyn_gpuData");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gpuData"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::UIR::Utility::GPUBuffer_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public Unity.Collections.NativeArray`1<T> cpuData
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<T>& dyn_cpuData() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::dyn_cpuData");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cpuData"))->offset;
      return *reinterpret_cast<::Unity::Collections::NativeArray_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public Unity.Collections.NativeArray`1<UnityEngine.UIElements.UIR.GfxUpdateBufferRange> updateRanges
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::UIElements::UIR::GfxUpdateBufferRange>& dyn_updateRanges() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::dyn_updateRanges");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "updateRanges"))->offset;
      return *reinterpret_cast<::Unity::Collections::NativeArray_1<::UnityEngine::UIElements::UIR::GfxUpdateBufferRange>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public UnityEngine.UIElements.UIR.GPUBufferAllocator allocator
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::GPUBufferAllocator*& dyn_allocator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::dyn_allocator");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allocator"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::UIR::GPUBufferAllocator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.UInt32 m_UpdateRangePoolSize
    [[deprecated("Use field access instead!")]] uint& dyn_m_UpdateRangePoolSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::dyn_m_UpdateRangePoolSize");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UpdateRangePoolSize"))->offset;
      return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.UInt32 m_ElemStride
    [[deprecated("Use field access instead!")]] uint& dyn_m_ElemStride() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::dyn_m_ElemStride");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ElemStride"))->offset;
      return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.UInt32 m_UpdateRangeMin
    [[deprecated("Use field access instead!")]] uint& dyn_m_UpdateRangeMin() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::dyn_m_UpdateRangeMin");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UpdateRangeMin"))->offset;
      return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.UInt32 m_UpdateRangeMax
    [[deprecated("Use field access instead!")]] uint& dyn_m_UpdateRangeMax() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::dyn_m_UpdateRangeMax");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UpdateRangeMax"))->offset;
      return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.UInt32 m_UpdateRangesEnqueued
    [[deprecated("Use field access instead!")]] uint& dyn_m_UpdateRangesEnqueued() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::dyn_m_UpdateRangesEnqueued");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UpdateRangesEnqueued"))->offset;
      return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.UInt32 m_UpdateRangesBatchStart
    [[deprecated("Use field access instead!")]] uint& dyn_m_UpdateRangesBatchStart() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::dyn_m_UpdateRangesBatchStart");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UpdateRangesBatchStart"))->offset;
      return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean m_UpdateRangesSaturated
    [[deprecated("Use field access instead!")]] bool& dyn_m_UpdateRangesSaturated() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::dyn_m_UpdateRangesSaturated");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UpdateRangesSaturated"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(UnityEngine.UIElements.UIR.Utility/GPUBufferType bufferType, System.UInt32 totalCount, System.UInt32 maxQueuedFrameCount, System.UInt32 updateRangePoolSize, System.Boolean mockBuffer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Page::DataSet_1<T>* New_ctor(::UnityEngine::UIElements::UIR::Utility::GPUBufferType bufferType, uint totalCount, uint maxQueuedFrameCount, uint updateRangePoolSize, bool mockBuffer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Page::DataSet_1<T>*, creationType>(bufferType, totalCount, maxQueuedFrameCount, updateRangePoolSize, mockBuffer)));
    }
    // protected System.Boolean get_disposed()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_disposed() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::get_disposed");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void set_disposed(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_disposed(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::set_disposed");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_disposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::UIR::Page::DataSet_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Dispose(System.Boolean disposing)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose(bool disposing) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::Dispose");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
    }
    // public System.Void RegisterUpdate(System.UInt32 start, System.UInt32 size)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RegisterUpdate(uint start, uint size) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::RegisterUpdate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(size)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, start, size);
    }
    // private System.Boolean HasMappedBufferRange()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool HasMappedBufferRange() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::HasMappedBufferRange");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasMappedBufferRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void SendUpdates()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SendUpdates() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::SendUpdates");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUpdates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void SendFullRange()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SendFullRange() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::SendFullRange");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendFullRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void SendPartialRanges()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SendPartialRanges() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::SendPartialRanges");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendPartialRanges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void ResetUpdateState()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ResetUpdateState() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Page::DataSet_1::ResetUpdateState");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetUpdateState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // UnityEngine.UIElements.UIR.Page/DataSet`1
  // Could not write size check! Type: UnityEngine.UIElements.UIR.Page/DataSet`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
