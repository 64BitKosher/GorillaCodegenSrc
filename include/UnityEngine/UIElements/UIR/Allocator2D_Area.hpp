// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UIR.Allocator2D
#include "UnityEngine/UIElements/UIR/Allocator2D.hpp"
// Including type: UnityEngine.RectInt
#include "UnityEngine/RectInt.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: BestFitAllocator
  class BestFitAllocator;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIR::Allocator2D::Area);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::Allocator2D::Area*, "UnityEngine.UIElements.UIR", "Allocator2D/Area");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UIR.Allocator2D/Area
  // [TokenAttribute] Offset: FFFFFFFF
  class Allocator2D::Area : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.RectInt rect
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::RectInt rect;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectInt) == 0x10);
    // public UnityEngine.UIElements.UIR.BestFitAllocator allocator
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UIElements::UIR::BestFitAllocator* allocator;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BestFitAllocator*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.RectInt rect
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectInt& dyn_rect();
    // Get instance field reference: public UnityEngine.UIElements.UIR.BestFitAllocator allocator
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BestFitAllocator*& dyn_allocator();
    // public System.Void .ctor(UnityEngine.RectInt rect)
    // Offset: 0x55CBBC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Allocator2D::Area* New_ctor(::UnityEngine::RectInt rect) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIR::Allocator2D::Area::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Allocator2D::Area*, creationType>(rect)));
    }
  }; // UnityEngine.UIElements.UIR.Allocator2D/Area
  #pragma pack(pop)
  static check_size<sizeof(Allocator2D::Area), 32 + sizeof(::UnityEngine::UIElements::UIR::BestFitAllocator*)> __UnityEngine_UIElements_UIR_Allocator2D_AreaSizeCheck;
  static_assert(sizeof(Allocator2D::Area) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::Allocator2D::Area::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
