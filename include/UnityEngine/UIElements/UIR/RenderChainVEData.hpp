// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.UIR.RenderDataFlags
#include "UnityEngine/UIElements/UIR/RenderDataFlags.hpp"
// Including type: UnityEngine.UIElements.UIR.RenderDataDirtyTypes
#include "UnityEngine/UIElements/UIR/RenderDataDirtyTypes.hpp"
// Including type: UnityEngine.UIElements.UIR.Implementation.ClipMethod
#include "UnityEngine/UIElements/UIR/Implementation/ClipMethod.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.UIElements.UIR.BMPAlloc
#include "UnityEngine/UIElements/UIR/BMPAlloc.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.UIElements.UIR.TextureEntry
#include "UnityEngine/UIElements/UIR/TextureEntry.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
}
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: RenderChainCommand
  class RenderChainCommand;
  // Forward declaring type: MeshHandle
  class MeshHandle;
  // Forward declaring type: BasicNode`1<T>
  template<typename T>
  class BasicNode_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: RenderChainVEData
  struct RenderChainVEData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIR::RenderChainVEData, "UnityEngine.UIElements.UIR", "RenderChainVEData");
// Type namespace: UnityEngine.UIElements.UIR
namespace UnityEngine::UIElements::UIR {
  // Size: 0x148
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.UIR.RenderChainVEData
  // [TokenAttribute] Offset: FFFFFFFF
  struct RenderChainVEData/*, public ::System::ValueType*/ {
    public:
    public:
    // UnityEngine.UIElements.VisualElement prev
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::VisualElement* prev;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // UnityEngine.UIElements.VisualElement next
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::UIElements::VisualElement* next;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // UnityEngine.UIElements.VisualElement groupTransformAncestor
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::VisualElement* groupTransformAncestor;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // UnityEngine.UIElements.VisualElement boneTransformAncestor
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::VisualElement* boneTransformAncestor;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // UnityEngine.UIElements.VisualElement prevDirty
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UIElements::VisualElement* prevDirty;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // UnityEngine.UIElements.VisualElement nextDirty
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UIElements::VisualElement* nextDirty;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // UnityEngine.UIElements.UIR.RenderDataFlags flags
    // Size: 0x4
    // Offset: 0x30
    ::UnityEngine::UIElements::UIR::RenderDataFlags flags;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::RenderDataFlags) == 0x4);
    // System.Int32 hierarchyDepth
    // Size: 0x4
    // Offset: 0x34
    int hierarchyDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.UIElements.UIR.RenderDataDirtyTypes dirtiedValues
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes dirtiedValues;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::RenderDataDirtyTypes) == 0x4);
    // System.UInt32 dirtyID
    // Size: 0x4
    // Offset: 0x3C
    uint dirtyID;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // UnityEngine.UIElements.UIR.RenderChainCommand firstCommand
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::UIElements::UIR::RenderChainCommand* firstCommand;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::RenderChainCommand*) == 0x8);
    // UnityEngine.UIElements.UIR.RenderChainCommand lastCommand
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::UIElements::UIR::RenderChainCommand* lastCommand;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::RenderChainCommand*) == 0x8);
    // UnityEngine.UIElements.UIR.RenderChainCommand firstClosingCommand
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UIElements::UIR::RenderChainCommand* firstClosingCommand;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::RenderChainCommand*) == 0x8);
    // UnityEngine.UIElements.UIR.RenderChainCommand lastClosingCommand
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::UIElements::UIR::RenderChainCommand* lastClosingCommand;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::RenderChainCommand*) == 0x8);
    // System.Boolean isInChain
    // Size: 0x1
    // Offset: 0x60
    bool isInChain;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean isHierarchyHidden
    // Size: 0x1
    // Offset: 0x61
    bool isHierarchyHidden;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean localFlipsWinding
    // Size: 0x1
    // Offset: 0x62
    bool localFlipsWinding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean localTransformScaleZero
    // Size: 0x1
    // Offset: 0x63
    bool localTransformScaleZero;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean worldFlipsWinding
    // Size: 0x1
    // Offset: 0x64
    bool worldFlipsWinding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: worldFlipsWinding and: clipMethod
    char __padding18[0x3] = {};
    // UnityEngine.UIElements.UIR.Implementation.ClipMethod clipMethod
    // Size: 0x4
    // Offset: 0x68
    ::UnityEngine::UIElements::UIR::Implementation::ClipMethod clipMethod;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::Implementation::ClipMethod) == 0x4);
    // System.Int32 childrenStencilRef
    // Size: 0x4
    // Offset: 0x6C
    int childrenStencilRef;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 childrenMaskDepth
    // Size: 0x4
    // Offset: 0x70
    int childrenMaskDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean disableNudging
    // Size: 0x1
    // Offset: 0x74
    bool disableNudging;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disableNudging and: data
    char __padding22[0x3] = {};
    // UnityEngine.UIElements.UIR.MeshHandle data
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::UIElements::UIR::MeshHandle* data;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::MeshHandle*) == 0x8);
    // UnityEngine.UIElements.UIR.MeshHandle closingData
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::UIElements::UIR::MeshHandle* closingData;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::MeshHandle*) == 0x8);
    // UnityEngine.Matrix4x4 verticesSpace
    // Size: 0x40
    // Offset: 0x88
    ::UnityEngine::Matrix4x4 verticesSpace;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // System.Int32 displacementUVStart
    // Size: 0x4
    // Offset: 0xC8
    int displacementUVStart;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 displacementUVEnd
    // Size: 0x4
    // Offset: 0xCC
    int displacementUVEnd;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.UIElements.UIR.BMPAlloc transformID
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::UIElements::UIR::BMPAlloc transformID;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BMPAlloc) == 0x8);
    // UnityEngine.UIElements.UIR.BMPAlloc clipRectID
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::UIElements::UIR::BMPAlloc clipRectID;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BMPAlloc) == 0x8);
    // UnityEngine.UIElements.UIR.BMPAlloc opacityID
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::UIElements::UIR::BMPAlloc opacityID;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BMPAlloc) == 0x8);
    // UnityEngine.UIElements.UIR.BMPAlloc textCoreSettingsID
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::UIElements::UIR::BMPAlloc textCoreSettingsID;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BMPAlloc) == 0x8);
    // UnityEngine.UIElements.UIR.BMPAlloc colorID
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::UIElements::UIR::BMPAlloc colorID;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BMPAlloc) == 0x8);
    // UnityEngine.UIElements.UIR.BMPAlloc backgroundColorID
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::UIElements::UIR::BMPAlloc backgroundColorID;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BMPAlloc) == 0x8);
    // UnityEngine.UIElements.UIR.BMPAlloc borderLeftColorID
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::UIElements::UIR::BMPAlloc borderLeftColorID;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BMPAlloc) == 0x8);
    // UnityEngine.UIElements.UIR.BMPAlloc borderTopColorID
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::UIElements::UIR::BMPAlloc borderTopColorID;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BMPAlloc) == 0x8);
    // UnityEngine.UIElements.UIR.BMPAlloc borderRightColorID
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::UIElements::UIR::BMPAlloc borderRightColorID;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BMPAlloc) == 0x8);
    // UnityEngine.UIElements.UIR.BMPAlloc borderBottomColorID
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::UIElements::UIR::BMPAlloc borderBottomColorID;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BMPAlloc) == 0x8);
    // UnityEngine.UIElements.UIR.BMPAlloc tintColorID
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::UIElements::UIR::BMPAlloc tintColorID;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BMPAlloc) == 0x8);
    // System.Single compositeOpacity
    // Size: 0x4
    // Offset: 0x128
    float compositeOpacity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // UnityEngine.Color backgroundColor
    // Size: 0x10
    // Offset: 0x12C
    ::UnityEngine::Color backgroundColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // Padding between fields: backgroundColor and: textures
    char __padding40[0x4] = {};
    // UnityEngine.UIElements.UIR.BasicNode`1<UnityEngine.UIElements.UIR.TextureEntry> textures
    // Size: 0x8
    // Offset: 0x140
    ::UnityEngine::UIElements::UIR::BasicNode_1<::UnityEngine::UIElements::UIR::TextureEntry>* textures;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::BasicNode_1<::UnityEngine::UIElements::UIR::TextureEntry>*) == 0x8);
    public:
    // Creating value type constructor for type: RenderChainVEData
    constexpr RenderChainVEData(::UnityEngine::UIElements::VisualElement* prev_ = {}, ::UnityEngine::UIElements::VisualElement* next_ = {}, ::UnityEngine::UIElements::VisualElement* groupTransformAncestor_ = {}, ::UnityEngine::UIElements::VisualElement* boneTransformAncestor_ = {}, ::UnityEngine::UIElements::VisualElement* prevDirty_ = {}, ::UnityEngine::UIElements::VisualElement* nextDirty_ = {}, ::UnityEngine::UIElements::UIR::RenderDataFlags flags_ = {}, int hierarchyDepth_ = {}, ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes dirtiedValues_ = {}, uint dirtyID_ = {}, ::UnityEngine::UIElements::UIR::RenderChainCommand* firstCommand_ = {}, ::UnityEngine::UIElements::UIR::RenderChainCommand* lastCommand_ = {}, ::UnityEngine::UIElements::UIR::RenderChainCommand* firstClosingCommand_ = {}, ::UnityEngine::UIElements::UIR::RenderChainCommand* lastClosingCommand_ = {}, bool isInChain_ = {}, bool isHierarchyHidden_ = {}, bool localFlipsWinding_ = {}, bool localTransformScaleZero_ = {}, bool worldFlipsWinding_ = {}, ::UnityEngine::UIElements::UIR::Implementation::ClipMethod clipMethod_ = {}, int childrenStencilRef_ = {}, int childrenMaskDepth_ = {}, bool disableNudging_ = {}, ::UnityEngine::UIElements::UIR::MeshHandle* data_ = {}, ::UnityEngine::UIElements::UIR::MeshHandle* closingData_ = {}, ::UnityEngine::Matrix4x4 verticesSpace_ = {}, int displacementUVStart_ = {}, int displacementUVEnd_ = {}, ::UnityEngine::UIElements::UIR::BMPAlloc transformID_ = {}, ::UnityEngine::UIElements::UIR::BMPAlloc clipRectID_ = {}, ::UnityEngine::UIElements::UIR::BMPAlloc opacityID_ = {}, ::UnityEngine::UIElements::UIR::BMPAlloc textCoreSettingsID_ = {}, ::UnityEngine::UIElements::UIR::BMPAlloc colorID_ = {}, ::UnityEngine::UIElements::UIR::BMPAlloc backgroundColorID_ = {}, ::UnityEngine::UIElements::UIR::BMPAlloc borderLeftColorID_ = {}, ::UnityEngine::UIElements::UIR::BMPAlloc borderTopColorID_ = {}, ::UnityEngine::UIElements::UIR::BMPAlloc borderRightColorID_ = {}, ::UnityEngine::UIElements::UIR::BMPAlloc borderBottomColorID_ = {}, ::UnityEngine::UIElements::UIR::BMPAlloc tintColorID_ = {}, float compositeOpacity_ = {}, ::UnityEngine::Color backgroundColor_ = {}, ::UnityEngine::UIElements::UIR::BasicNode_1<::UnityEngine::UIElements::UIR::TextureEntry>* textures_ = {}) noexcept : prev{prev_}, next{next_}, groupTransformAncestor{groupTransformAncestor_}, boneTransformAncestor{boneTransformAncestor_}, prevDirty{prevDirty_}, nextDirty{nextDirty_}, flags{flags_}, hierarchyDepth{hierarchyDepth_}, dirtiedValues{dirtiedValues_}, dirtyID{dirtyID_}, firstCommand{firstCommand_}, lastCommand{lastCommand_}, firstClosingCommand{firstClosingCommand_}, lastClosingCommand{lastClosingCommand_}, isInChain{isInChain_}, isHierarchyHidden{isHierarchyHidden_}, localFlipsWinding{localFlipsWinding_}, localTransformScaleZero{localTransformScaleZero_}, worldFlipsWinding{worldFlipsWinding_}, clipMethod{clipMethod_}, childrenStencilRef{childrenStencilRef_}, childrenMaskDepth{childrenMaskDepth_}, disableNudging{disableNudging_}, data{data_}, closingData{closingData_}, verticesSpace{verticesSpace_}, displacementUVStart{displacementUVStart_}, displacementUVEnd{displacementUVEnd_}, transformID{transformID_}, clipRectID{clipRectID_}, opacityID{opacityID_}, textCoreSettingsID{textCoreSettingsID_}, colorID{colorID_}, backgroundColorID{backgroundColorID_}, borderLeftColorID{borderLeftColorID_}, borderTopColorID{borderTopColorID_}, borderRightColorID{borderRightColorID_}, borderBottomColorID{borderBottomColorID_}, tintColorID{tintColorID_}, compositeOpacity{compositeOpacity_}, backgroundColor{backgroundColor_}, textures{textures_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: UnityEngine.UIElements.VisualElement prev
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_prev();
    // Get instance field reference: UnityEngine.UIElements.VisualElement next
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_next();
    // Get instance field reference: UnityEngine.UIElements.VisualElement groupTransformAncestor
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_groupTransformAncestor();
    // Get instance field reference: UnityEngine.UIElements.VisualElement boneTransformAncestor
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_boneTransformAncestor();
    // Get instance field reference: UnityEngine.UIElements.VisualElement prevDirty
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_prevDirty();
    // Get instance field reference: UnityEngine.UIElements.VisualElement nextDirty
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_nextDirty();
    // Get instance field reference: UnityEngine.UIElements.UIR.RenderDataFlags flags
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::RenderDataFlags& dyn_flags();
    // Get instance field reference: System.Int32 hierarchyDepth
    [[deprecated("Use field access instead!")]] int& dyn_hierarchyDepth();
    // Get instance field reference: UnityEngine.UIElements.UIR.RenderDataDirtyTypes dirtiedValues
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::RenderDataDirtyTypes& dyn_dirtiedValues();
    // Get instance field reference: System.UInt32 dirtyID
    [[deprecated("Use field access instead!")]] uint& dyn_dirtyID();
    // Get instance field reference: UnityEngine.UIElements.UIR.RenderChainCommand firstCommand
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::RenderChainCommand*& dyn_firstCommand();
    // Get instance field reference: UnityEngine.UIElements.UIR.RenderChainCommand lastCommand
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::RenderChainCommand*& dyn_lastCommand();
    // Get instance field reference: UnityEngine.UIElements.UIR.RenderChainCommand firstClosingCommand
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::RenderChainCommand*& dyn_firstClosingCommand();
    // Get instance field reference: UnityEngine.UIElements.UIR.RenderChainCommand lastClosingCommand
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::RenderChainCommand*& dyn_lastClosingCommand();
    // Get instance field reference: System.Boolean isInChain
    [[deprecated("Use field access instead!")]] bool& dyn_isInChain();
    // Get instance field reference: System.Boolean isHierarchyHidden
    [[deprecated("Use field access instead!")]] bool& dyn_isHierarchyHidden();
    // Get instance field reference: System.Boolean localFlipsWinding
    [[deprecated("Use field access instead!")]] bool& dyn_localFlipsWinding();
    // Get instance field reference: System.Boolean localTransformScaleZero
    [[deprecated("Use field access instead!")]] bool& dyn_localTransformScaleZero();
    // Get instance field reference: System.Boolean worldFlipsWinding
    [[deprecated("Use field access instead!")]] bool& dyn_worldFlipsWinding();
    // Get instance field reference: UnityEngine.UIElements.UIR.Implementation.ClipMethod clipMethod
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::Implementation::ClipMethod& dyn_clipMethod();
    // Get instance field reference: System.Int32 childrenStencilRef
    [[deprecated("Use field access instead!")]] int& dyn_childrenStencilRef();
    // Get instance field reference: System.Int32 childrenMaskDepth
    [[deprecated("Use field access instead!")]] int& dyn_childrenMaskDepth();
    // Get instance field reference: System.Boolean disableNudging
    [[deprecated("Use field access instead!")]] bool& dyn_disableNudging();
    // Get instance field reference: UnityEngine.UIElements.UIR.MeshHandle data
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::MeshHandle*& dyn_data();
    // Get instance field reference: UnityEngine.UIElements.UIR.MeshHandle closingData
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::MeshHandle*& dyn_closingData();
    // Get instance field reference: UnityEngine.Matrix4x4 verticesSpace
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_verticesSpace();
    // Get instance field reference: System.Int32 displacementUVStart
    [[deprecated("Use field access instead!")]] int& dyn_displacementUVStart();
    // Get instance field reference: System.Int32 displacementUVEnd
    [[deprecated("Use field access instead!")]] int& dyn_displacementUVEnd();
    // Get instance field reference: UnityEngine.UIElements.UIR.BMPAlloc transformID
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BMPAlloc& dyn_transformID();
    // Get instance field reference: UnityEngine.UIElements.UIR.BMPAlloc clipRectID
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BMPAlloc& dyn_clipRectID();
    // Get instance field reference: UnityEngine.UIElements.UIR.BMPAlloc opacityID
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BMPAlloc& dyn_opacityID();
    // Get instance field reference: UnityEngine.UIElements.UIR.BMPAlloc textCoreSettingsID
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BMPAlloc& dyn_textCoreSettingsID();
    // Get instance field reference: UnityEngine.UIElements.UIR.BMPAlloc colorID
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BMPAlloc& dyn_colorID();
    // Get instance field reference: UnityEngine.UIElements.UIR.BMPAlloc backgroundColorID
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BMPAlloc& dyn_backgroundColorID();
    // Get instance field reference: UnityEngine.UIElements.UIR.BMPAlloc borderLeftColorID
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BMPAlloc& dyn_borderLeftColorID();
    // Get instance field reference: UnityEngine.UIElements.UIR.BMPAlloc borderTopColorID
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BMPAlloc& dyn_borderTopColorID();
    // Get instance field reference: UnityEngine.UIElements.UIR.BMPAlloc borderRightColorID
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BMPAlloc& dyn_borderRightColorID();
    // Get instance field reference: UnityEngine.UIElements.UIR.BMPAlloc borderBottomColorID
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BMPAlloc& dyn_borderBottomColorID();
    // Get instance field reference: UnityEngine.UIElements.UIR.BMPAlloc tintColorID
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BMPAlloc& dyn_tintColorID();
    // Get instance field reference: System.Single compositeOpacity
    [[deprecated("Use field access instead!")]] float& dyn_compositeOpacity();
    // Get instance field reference: UnityEngine.Color backgroundColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_backgroundColor();
    // Get instance field reference: UnityEngine.UIElements.UIR.BasicNode`1<UnityEngine.UIElements.UIR.TextureEntry> textures
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::BasicNode_1<::UnityEngine::UIElements::UIR::TextureEntry>*& dyn_textures();
    // UnityEngine.UIElements.UIR.RenderChainCommand get_lastClosingOrLastCommand()
    // Offset: 0x55D2AE4
    ::UnityEngine::UIElements::UIR::RenderChainCommand* get_lastClosingOrLastCommand();
    // static System.Boolean AllocatesID(UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x55D2AFC
    static bool AllocatesID(::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // static System.Boolean InheritsID(UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x55D2B28
    static bool InheritsID(::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // public System.Boolean get_isIgnoringDynamicColorHint()
    // Offset: 0x55D2B3C
    bool get_isIgnoringDynamicColorHint();
  }; // UnityEngine.UIElements.UIR.RenderChainVEData
  #pragma pack(pop)
  static check_size<sizeof(RenderChainVEData), 320 + sizeof(::UnityEngine::UIElements::UIR::BasicNode_1<::UnityEngine::UIElements::UIR::TextureEntry>*)> __UnityEngine_UIElements_UIR_RenderChainVEDataSizeCheck;
  static_assert(sizeof(RenderChainVEData) == 0x148);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChainVEData::get_lastClosingOrLastCommand
// Il2CppName: get_lastClosingOrLastCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UIR::RenderChainCommand* (UnityEngine::UIElements::UIR::RenderChainVEData::*)()>(&UnityEngine::UIElements::UIR::RenderChainVEData::get_lastClosingOrLastCommand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChainVEData), "get_lastClosingOrLastCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChainVEData::AllocatesID
// Il2CppName: AllocatesID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::RenderChainVEData::AllocatesID)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChainVEData), "AllocatesID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChainVEData::InheritsID
// Il2CppName: InheritsID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::UIR::RenderChainVEData::InheritsID)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChainVEData), "InheritsID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIR::RenderChainVEData::get_isIgnoringDynamicColorHint
// Il2CppName: get_isIgnoringDynamicColorHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UIR::RenderChainVEData::*)()>(&UnityEngine::UIElements::UIR::RenderChainVEData::get_isIgnoringDynamicColorHint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIR::RenderChainVEData), "get_isIgnoringDynamicColorHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
