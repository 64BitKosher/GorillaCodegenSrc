// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Profiling.ProfilerMarker
#include "Unity/Profiling/ProfilerMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectInt
  struct RectInt;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: UIRAtlasAllocator
  class UIRAtlasAllocator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIRAtlasAllocator);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIRAtlasAllocator*, "UnityEngine.UIElements", "UIRAtlasAllocator");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UIRAtlasAllocator
  // [TokenAttribute] Offset: FFFFFFFF
  class UIRAtlasAllocator : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::UIRAtlasAllocator::Row
    class Row;
    // Nested type: ::UnityEngine::UIElements::UIRAtlasAllocator::AreaNode
    class AreaNode;
    public:
    // private readonly System.Int32 <maxAtlasSize>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int maxAtlasSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <maxImageWidth>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int maxImageWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <maxImageHeight>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int maxImageHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <virtualWidth>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    int virtualWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <virtualHeight>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    int virtualHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <physicalWidth>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    int physicalWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <physicalHeight>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    int physicalHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: physicalHeight and: m_FirstUnpartitionedArea
    char __padding6[0x4] = {};
    // private UnityEngine.UIElements.UIRAtlasAllocator/AreaNode m_FirstUnpartitionedArea
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UIElements::UIRAtlasAllocator::AreaNode* m_FirstUnpartitionedArea;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIRAtlasAllocator::AreaNode*) == 0x8);
    // private UnityEngine.UIElements.UIRAtlasAllocator/Row[] m_OpenRows
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::UIElements::UIRAtlasAllocator::Row*> m_OpenRows;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UIElements::UIRAtlasAllocator::Row*>) == 0x8);
    // private System.Int32 m_1SidePadding
    // Size: 0x4
    // Offset: 0x40
    int m_1SidePadding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_2SidePadding
    // Size: 0x4
    // Offset: 0x44
    int m_2SidePadding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <disposed>k__BackingField
    // Size: 0x1
    // Offset: 0x48
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private Unity.Profiling.ProfilerMarker s_MarkerTryAllocate
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerTryAllocate();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_MarkerTryAllocate
    static void _set_s_MarkerTryAllocate(::Unity::Profiling::ProfilerMarker value);
    // Get instance field reference: private readonly System.Int32 <maxAtlasSize>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$maxAtlasSize$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <maxImageWidth>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$maxImageWidth$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <maxImageHeight>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$maxImageHeight$k__BackingField();
    // Get instance field reference: private System.Int32 <virtualWidth>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$virtualWidth$k__BackingField();
    // Get instance field reference: private System.Int32 <virtualHeight>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$virtualHeight$k__BackingField();
    // Get instance field reference: private System.Int32 <physicalWidth>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$physicalWidth$k__BackingField();
    // Get instance field reference: private System.Int32 <physicalHeight>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$physicalHeight$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.UIRAtlasAllocator/AreaNode m_FirstUnpartitionedArea
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIRAtlasAllocator::AreaNode*& dyn_m_FirstUnpartitionedArea();
    // Get instance field reference: private UnityEngine.UIElements.UIRAtlasAllocator/Row[] m_OpenRows
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UIElements::UIRAtlasAllocator::Row*>& dyn_m_OpenRows();
    // Get instance field reference: private System.Int32 m_1SidePadding
    [[deprecated("Use field access instead!")]] int& dyn_m_1SidePadding();
    // Get instance field reference: private System.Int32 m_2SidePadding
    [[deprecated("Use field access instead!")]] int& dyn_m_2SidePadding();
    // Get instance field reference: private System.Boolean <disposed>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$disposed$k__BackingField();
    // public System.Int32 get_maxAtlasSize()
    // Offset: 0x566A94C
    int get_maxAtlasSize();
    // public System.Int32 get_maxImageWidth()
    // Offset: 0x566A954
    int get_maxImageWidth();
    // public System.Int32 get_maxImageHeight()
    // Offset: 0x566A95C
    int get_maxImageHeight();
    // public System.Int32 get_virtualWidth()
    // Offset: 0x566A964
    int get_virtualWidth();
    // private System.Void set_virtualWidth(System.Int32 value)
    // Offset: 0x566A96C
    void set_virtualWidth(int value);
    // public System.Int32 get_virtualHeight()
    // Offset: 0x566A974
    int get_virtualHeight();
    // private System.Void set_virtualHeight(System.Int32 value)
    // Offset: 0x566A97C
    void set_virtualHeight(int value);
    // public System.Int32 get_physicalWidth()
    // Offset: 0x566A984
    int get_physicalWidth();
    // private System.Void set_physicalWidth(System.Int32 value)
    // Offset: 0x566A98C
    void set_physicalWidth(int value);
    // public System.Int32 get_physicalHeight()
    // Offset: 0x566A994
    int get_physicalHeight();
    // private System.Void set_physicalHeight(System.Int32 value)
    // Offset: 0x566A99C
    void set_physicalHeight(int value);
    // protected System.Boolean get_disposed()
    // Offset: 0x566A9A4
    bool get_disposed();
    // private System.Void set_disposed(System.Boolean value)
    // Offset: 0x566A9AC
    void set_disposed(bool value);
    // public System.Void Dispose()
    // Offset: 0x566A9B8
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x566AA24
    void Dispose(bool disposing);
    // static private System.Int32 GetLog2OfNextPower(System.Int32 n)
    // Offset: 0x566ABE4
    static int GetLog2OfNextPower(int n);
    // public System.Void .ctor(System.Int32 initialAtlasSize, System.Int32 maxAtlasSize, System.Int32 sidePadding)
    // Offset: 0x566AD14
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIRAtlasAllocator* New_ctor(int initialAtlasSize, int maxAtlasSize, int sidePadding) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIRAtlasAllocator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIRAtlasAllocator*, creationType>(initialAtlasSize, maxAtlasSize, sidePadding)));
    }
    // public System.Boolean TryAllocate(System.Int32 width, System.Int32 height, out UnityEngine.RectInt location)
    // Offset: 0x566B080
    bool TryAllocate(int width, int height, ByRef<::UnityEngine::RectInt> location);
    // private System.Boolean TryPartitionArea(UnityEngine.UIElements.UIRAtlasAllocator/AreaNode areaNode, System.Int32 rowIndex, System.Int32 rowHeight, System.Int32 minWidth)
    // Offset: 0x566B434
    bool TryPartitionArea(::UnityEngine::UIElements::UIRAtlasAllocator::AreaNode* areaNode, int rowIndex, int rowHeight, int minWidth);
    // private System.Void BuildAreas()
    // Offset: 0x566AF88
    void BuildAreas();
    // static private System.Void .cctor()
    // Offset: 0x566B7A4
    static void _cctor();
  }; // UnityEngine.UIElements.UIRAtlasAllocator
  #pragma pack(pop)
  static check_size<sizeof(UIRAtlasAllocator), 72 + sizeof(bool)> __UnityEngine_UIElements_UIRAtlasAllocatorSizeCheck;
  static_assert(sizeof(UIRAtlasAllocator) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::get_maxAtlasSize
// Il2CppName: get_maxAtlasSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UIRAtlasAllocator::*)()>(&UnityEngine::UIElements::UIRAtlasAllocator::get_maxAtlasSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "get_maxAtlasSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::get_maxImageWidth
// Il2CppName: get_maxImageWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UIRAtlasAllocator::*)()>(&UnityEngine::UIElements::UIRAtlasAllocator::get_maxImageWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "get_maxImageWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::get_maxImageHeight
// Il2CppName: get_maxImageHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UIRAtlasAllocator::*)()>(&UnityEngine::UIElements::UIRAtlasAllocator::get_maxImageHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "get_maxImageHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::get_virtualWidth
// Il2CppName: get_virtualWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UIRAtlasAllocator::*)()>(&UnityEngine::UIElements::UIRAtlasAllocator::get_virtualWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "get_virtualWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::set_virtualWidth
// Il2CppName: set_virtualWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIRAtlasAllocator::*)(int)>(&UnityEngine::UIElements::UIRAtlasAllocator::set_virtualWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "set_virtualWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::get_virtualHeight
// Il2CppName: get_virtualHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UIRAtlasAllocator::*)()>(&UnityEngine::UIElements::UIRAtlasAllocator::get_virtualHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "get_virtualHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::set_virtualHeight
// Il2CppName: set_virtualHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIRAtlasAllocator::*)(int)>(&UnityEngine::UIElements::UIRAtlasAllocator::set_virtualHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "set_virtualHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::get_physicalWidth
// Il2CppName: get_physicalWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UIRAtlasAllocator::*)()>(&UnityEngine::UIElements::UIRAtlasAllocator::get_physicalWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "get_physicalWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::set_physicalWidth
// Il2CppName: set_physicalWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIRAtlasAllocator::*)(int)>(&UnityEngine::UIElements::UIRAtlasAllocator::set_physicalWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "set_physicalWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::get_physicalHeight
// Il2CppName: get_physicalHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UIRAtlasAllocator::*)()>(&UnityEngine::UIElements::UIRAtlasAllocator::get_physicalHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "get_physicalHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::set_physicalHeight
// Il2CppName: set_physicalHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIRAtlasAllocator::*)(int)>(&UnityEngine::UIElements::UIRAtlasAllocator::set_physicalHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "set_physicalHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::get_disposed
// Il2CppName: get_disposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UIRAtlasAllocator::*)()>(&UnityEngine::UIElements::UIRAtlasAllocator::get_disposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "get_disposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::set_disposed
// Il2CppName: set_disposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIRAtlasAllocator::*)(bool)>(&UnityEngine::UIElements::UIRAtlasAllocator::set_disposed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "set_disposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIRAtlasAllocator::*)()>(&UnityEngine::UIElements::UIRAtlasAllocator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIRAtlasAllocator::*)(bool)>(&UnityEngine::UIElements::UIRAtlasAllocator::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::GetLog2OfNextPower
// Il2CppName: GetLog2OfNextPower
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&UnityEngine::UIElements::UIRAtlasAllocator::GetLog2OfNextPower)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "GetLog2OfNextPower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::TryAllocate
// Il2CppName: TryAllocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UIRAtlasAllocator::*)(int, int, ByRef<::UnityEngine::RectInt>)>(&UnityEngine::UIElements::UIRAtlasAllocator::TryAllocate)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* location = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectInt")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "TryAllocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, location});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::TryPartitionArea
// Il2CppName: TryPartitionArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UIRAtlasAllocator::*)(::UnityEngine::UIElements::UIRAtlasAllocator::AreaNode*, int, int, int)>(&UnityEngine::UIElements::UIRAtlasAllocator::TryPartitionArea)> {
  static const MethodInfo* get() {
    static auto* areaNode = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "UIRAtlasAllocator/AreaNode")->byval_arg;
    static auto* rowIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rowHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "TryPartitionArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{areaNode, rowIndex, rowHeight, minWidth});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::BuildAreas
// Il2CppName: BuildAreas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIRAtlasAllocator::*)()>(&UnityEngine::UIElements::UIRAtlasAllocator::BuildAreas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), "BuildAreas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIRAtlasAllocator::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::UIRAtlasAllocator::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIRAtlasAllocator*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
