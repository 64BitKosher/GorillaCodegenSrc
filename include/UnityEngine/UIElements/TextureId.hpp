// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TextureId
  struct TextureId;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::TextureId, "UnityEngine.UIElements", "TextureId");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.TextureId
  // [TokenAttribute] Offset: FFFFFFFF
  struct TextureId/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Int32 m_Index
    // Size: 0x4
    // Offset: 0x0
    int m_Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TextureId
    constexpr TextureId(int m_Index_ = {}) noexcept : m_Index{m_Index_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return m_Index;
    }
    // Get static field: static public readonly UnityEngine.UIElements.TextureId invalid
    static ::UnityEngine::UIElements::TextureId _get_invalid();
    // Set static field: static public readonly UnityEngine.UIElements.TextureId invalid
    static void _set_invalid(::UnityEngine::UIElements::TextureId value);
    // Get instance field reference: private readonly System.Int32 m_Index
    [[deprecated("Use field access instead!")]] int& dyn_m_Index();
    // public System.Void .ctor(System.Int32 index)
    // Offset: 0x5689F44
    // ABORTED: conflicts with another method.  TextureId(int index);
    // public System.Int32 get_index()
    // Offset: 0x5689F50
    int get_index();
    // public System.Single ConvertToGpu()
    // Offset: 0x5689F5C
    float ConvertToGpu();
    // static private System.Void .cctor()
    // Offset: 0x568A08C
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x5689F6C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x568A014
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.UIElements.TextureId
  #pragma pack(pop)
  static check_size<sizeof(TextureId), 0 + sizeof(int)> __UnityEngine_UIElements_TextureIdSizeCheck;
  static_assert(sizeof(TextureId) == 0x4);
  // static public System.Boolean op_Equality(UnityEngine.UIElements.TextureId left, UnityEngine.UIElements.TextureId right)
  // Offset: 0x568A01C
  bool operator ==(const ::UnityEngine::UIElements::TextureId& left, const ::UnityEngine::UIElements::TextureId& right);
  // static public System.Boolean op_Inequality(UnityEngine.UIElements.TextureId left, UnityEngine.UIElements.TextureId right)
  // Offset: 0x568A028
  bool operator !=(const ::UnityEngine::UIElements::TextureId& left, const ::UnityEngine::UIElements::TextureId& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureId::TextureId
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureId::get_index
// Il2CppName: get_index
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::TextureId::*)()>(&UnityEngine::UIElements::TextureId::get_index)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextureId), "get_index", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureId::ConvertToGpu
// Il2CppName: ConvertToGpu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::TextureId::*)()>(&UnityEngine::UIElements::TextureId::ConvertToGpu)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextureId), "ConvertToGpu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureId::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::TextureId::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextureId), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::TextureId::*)(::Il2CppObject*)>(&UnityEngine::UIElements::TextureId::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextureId), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureId::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::TextureId::*)()>(&UnityEngine::UIElements::TextureId::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextureId), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureId::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureId::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
