// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Column
  class Column;
  // Forward declaring type: Columns
  class Columns;
  // Forward declaring type: ColumnDataType
  struct ColumnDataType;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: ColumnLayout
  class ColumnLayout;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::ColumnLayout);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::ColumnLayout*, "UnityEngine.UIElements", "ColumnLayout");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.ColumnLayout
  // [TokenAttribute] Offset: FFFFFFFF
  class ColumnLayout : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::UIElements::ColumnLayout::$$c
    class $$c;
    // Nested type: ::UnityEngine::UIElements::ColumnLayout::$$c__DisplayClass42_0
    class $$c__DisplayClass42_0;
    // Nested type: ::UnityEngine::UIElements::ColumnLayout::$$c__DisplayClass42_1
    class $$c__DisplayClass42_1;
    // Nested type: ::UnityEngine::UIElements::ColumnLayout::$$c__DisplayClass42_2
    class $$c__DisplayClass42_2;
    // Nested type: ::UnityEngine::UIElements::ColumnLayout::$$c__DisplayClass42_3
    class $$c__DisplayClass42_3;
    public:
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.Column> m_StretchableColumns
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>* m_StretchableColumns;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.Column> m_FixedColumns
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>* m_FixedColumns;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>*) == 0x8);
    // private UnityEngine.UIElements.Columns m_Columns
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UIElements::Columns* m_Columns;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Columns*) == 0x8);
    // private System.Single m_ColumnsWidth
    // Size: 0x4
    // Offset: 0x28
    float m_ColumnsWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_ColumnsWidthDirty
    // Size: 0x1
    // Offset: 0x2C
    bool m_ColumnsWidthDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ColumnsWidthDirty and: m_MaxColumnsWidth
    char __padding4[0x3] = {};
    // private System.Single m_MaxColumnsWidth
    // Size: 0x4
    // Offset: 0x30
    float m_MaxColumnsWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MinColumnsWidth
    // Size: 0x4
    // Offset: 0x34
    float m_MinColumnsWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_IsDirty
    // Size: 0x1
    // Offset: 0x38
    bool m_IsDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_IsDirty and: m_PreviousWidth
    char __padding7[0x3] = {};
    // private System.Single m_PreviousWidth
    // Size: 0x4
    // Offset: 0x3C
    float m_PreviousWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_DragResizeInPreviewMode
    // Size: 0x1
    // Offset: 0x40
    bool m_DragResizeInPreviewMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_DragResizing
    // Size: 0x1
    // Offset: 0x41
    bool m_DragResizing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_DragResizing and: m_DragStartPos
    char __padding10[0x2] = {};
    // private System.Single m_DragStartPos
    // Size: 0x4
    // Offset: 0x44
    float m_DragStartPos;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_DragLastPos
    // Size: 0x4
    // Offset: 0x48
    float m_DragLastPos;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_DragInitialColumnWidth
    // Size: 0x4
    // Offset: 0x4C
    float m_DragInitialColumnWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.Column> m_DragStretchableColumns
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>* m_DragStretchableColumns;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.Column> m_DragFixedColumns
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>* m_DragFixedColumns;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.UIElements.Column,System.Single> m_PreviewDesiredWidths
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::UIElements::Column*, float>* m_PreviewDesiredWidths;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::UIElements::Column*, float>*) == 0x8);
    // private System.Action layoutRequested
    // Size: 0x8
    // Offset: 0x68
    ::System::Action* layoutRequested;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.Column> m_StretchableColumns
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>*& dyn_m_StretchableColumns();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.Column> m_FixedColumns
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>*& dyn_m_FixedColumns();
    // Get instance field reference: private UnityEngine.UIElements.Columns m_Columns
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Columns*& dyn_m_Columns();
    // Get instance field reference: private System.Single m_ColumnsWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_ColumnsWidth();
    // Get instance field reference: private System.Boolean m_ColumnsWidthDirty
    [[deprecated("Use field access instead!")]] bool& dyn_m_ColumnsWidthDirty();
    // Get instance field reference: private System.Single m_MaxColumnsWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxColumnsWidth();
    // Get instance field reference: private System.Single m_MinColumnsWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_MinColumnsWidth();
    // Get instance field reference: private System.Boolean m_IsDirty
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsDirty();
    // Get instance field reference: private System.Single m_PreviousWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_PreviousWidth();
    // Get instance field reference: private System.Boolean m_DragResizeInPreviewMode
    [[deprecated("Use field access instead!")]] bool& dyn_m_DragResizeInPreviewMode();
    // Get instance field reference: private System.Boolean m_DragResizing
    [[deprecated("Use field access instead!")]] bool& dyn_m_DragResizing();
    // Get instance field reference: private System.Single m_DragStartPos
    [[deprecated("Use field access instead!")]] float& dyn_m_DragStartPos();
    // Get instance field reference: private System.Single m_DragLastPos
    [[deprecated("Use field access instead!")]] float& dyn_m_DragLastPos();
    // Get instance field reference: private System.Single m_DragInitialColumnWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_DragInitialColumnWidth();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.Column> m_DragStretchableColumns
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>*& dyn_m_DragStretchableColumns();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.Column> m_DragFixedColumns
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>*& dyn_m_DragFixedColumns();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.UIElements.Column,System.Single> m_PreviewDesiredWidths
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::UIElements::Column*, float>*& dyn_m_PreviewDesiredWidths();
    // Get instance field reference: private System.Action layoutRequested
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_layoutRequested();
    // public UnityEngine.UIElements.Columns get_columns()
    // Offset: 0x561A29C
    ::UnityEngine::UIElements::Columns* get_columns();
    // public System.Single get_columnsWidth()
    // Offset: 0x561A2A4
    float get_columnsWidth();
    // public System.Single get_minColumnsWidth()
    // Offset: 0x561A5C4
    float get_minColumnsWidth();
    // public System.Single get_maxColumnsWidth()
    // Offset: 0x561A5CC
    float get_maxColumnsWidth();
    // public System.Boolean get_hasStretchableColumns()
    // Offset: 0x561A5D4
    bool get_hasStretchableColumns();
    // public System.Void add_layoutRequested(System.Action value)
    // Offset: 0x561A624
    void add_layoutRequested(::System::Action* value);
    // public System.Void remove_layoutRequested(System.Action value)
    // Offset: 0x561A6C0
    void remove_layoutRequested(::System::Action* value);
    // public System.Void .ctor(UnityEngine.UIElements.Columns columns)
    // Offset: 0x561A75C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColumnLayout* New_ctor(::UnityEngine::UIElements::Columns* columns) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ColumnLayout::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColumnLayout*, creationType>(columns)));
    }
    // public System.Void Dirty()
    // Offset: 0x561AE08
    void Dirty();
    // private System.Void OnColumnAdded(UnityEngine.UIElements.Column column, System.Int32 index)
    // Offset: 0x561AA74
    void OnColumnAdded(::UnityEngine::UIElements::Column* column, int index);
    // private System.Void OnColumnRemoved(UnityEngine.UIElements.Column column)
    // Offset: 0x561AEE8
    void OnColumnRemoved(::UnityEngine::UIElements::Column* column);
    // private System.Void OnColumnReordered(UnityEngine.UIElements.Column column, System.Int32 from, System.Int32 to)
    // Offset: 0x561AFCC
    void OnColumnReordered(::UnityEngine::UIElements::Column* column, int from, int to);
    // private System.Boolean RequiresLayoutUpdate(UnityEngine.UIElements.ColumnDataType type)
    // Offset: 0x561AFD0
    bool RequiresLayoutUpdate(::UnityEngine::UIElements::ColumnDataType type);
    // private System.Void OnColumnChanged(UnityEngine.UIElements.Column column, UnityEngine.UIElements.ColumnDataType type)
    // Offset: 0x561AFF4
    void OnColumnChanged(::UnityEngine::UIElements::Column* column, ::UnityEngine::UIElements::ColumnDataType type);
    // private System.Void OnColumnResized(UnityEngine.UIElements.Column column)
    // Offset: 0x561B020
    void OnColumnResized(::UnityEngine::UIElements::Column* column);
    // static private System.Boolean IsClamped(System.Single value, System.Single min, System.Single max)
    // Offset: 0x561B02C
    static bool IsClamped(float value, float min, float max);
    // public System.Void DoLayout(System.Single width)
    // Offset: 0x561B044
    void DoLayout(float width);
    // public System.Void StretchResizeColumns(System.Collections.Generic.List`1<UnityEngine.UIElements.Column> stretchableColumns, System.Collections.Generic.List`1<UnityEngine.UIElements.Column> fixedColumns, ref System.Single delta, System.Boolean resizeToFit)
    // Offset: 0x561BFE4
    void StretchResizeColumns(::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>* stretchableColumns, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>* fixedColumns, ByRef<float> delta, bool resizeToFit);
    // public System.Void ResizeToFit(System.Single width)
    // Offset: 0x561CE8C
    void ResizeToFit(float width);
    // private System.Void ResizeColumn(UnityEngine.UIElements.Column column, System.Single width, System.Boolean setDesiredWidthOnly)
    // Offset: 0x561CD78
    void ResizeColumn(::UnityEngine::UIElements::Column* column, float width, bool setDesiredWidthOnly);
    // System.Void BeginDragResize(UnityEngine.UIElements.Column column, System.Single pos, System.Boolean previewMode)
    // Offset: 0x561CF68
    void BeginDragResize(::UnityEngine::UIElements::Column* column, float pos, bool previewMode);
    // public System.Single GetDesiredPosition(UnityEngine.UIElements.Column column)
    // Offset: 0x561D268
    float GetDesiredPosition(::UnityEngine::UIElements::Column* column);
    // public System.Single GetDesiredWidth(UnityEngine.UIElements.Column c)
    // Offset: 0x561BF44
    float GetDesiredWidth(::UnityEngine::UIElements::Column* c);
    // public System.Void DragResize(UnityEngine.UIElements.Column column, System.Single pos)
    // Offset: 0x561D35C
    void DragResize(::UnityEngine::UIElements::Column* column, float pos);
    // System.Void EndDragResize(UnityEngine.UIElements.Column column, System.Boolean cancelled)
    // Offset: 0x561D4C8
    void EndDragResize(::UnityEngine::UIElements::Column* column, bool cancelled);
    // private System.Void UpdateCache()
    // Offset: 0x561BA9C
    void UpdateCache();
    // private System.Void ClearCache()
    // Offset: 0x561AE48
    void ClearCache();
  }; // UnityEngine.UIElements.ColumnLayout
  #pragma pack(pop)
  static check_size<sizeof(ColumnLayout), 104 + sizeof(::System::Action*)> __UnityEngine_UIElements_ColumnLayoutSizeCheck;
  static_assert(sizeof(ColumnLayout) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::get_columns
// Il2CppName: get_columns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::Columns* (UnityEngine::UIElements::ColumnLayout::*)()>(&UnityEngine::UIElements::ColumnLayout::get_columns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "get_columns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::get_columnsWidth
// Il2CppName: get_columnsWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::ColumnLayout::*)()>(&UnityEngine::UIElements::ColumnLayout::get_columnsWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "get_columnsWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::get_minColumnsWidth
// Il2CppName: get_minColumnsWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::ColumnLayout::*)()>(&UnityEngine::UIElements::ColumnLayout::get_minColumnsWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "get_minColumnsWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::get_maxColumnsWidth
// Il2CppName: get_maxColumnsWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::ColumnLayout::*)()>(&UnityEngine::UIElements::ColumnLayout::get_maxColumnsWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "get_maxColumnsWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::get_hasStretchableColumns
// Il2CppName: get_hasStretchableColumns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::ColumnLayout::*)()>(&UnityEngine::UIElements::ColumnLayout::get_hasStretchableColumns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "get_hasStretchableColumns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::add_layoutRequested
// Il2CppName: add_layoutRequested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)(::System::Action*)>(&UnityEngine::UIElements::ColumnLayout::add_layoutRequested)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "add_layoutRequested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::remove_layoutRequested
// Il2CppName: remove_layoutRequested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)(::System::Action*)>(&UnityEngine::UIElements::ColumnLayout::remove_layoutRequested)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "remove_layoutRequested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::Dirty
// Il2CppName: Dirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)()>(&UnityEngine::UIElements::ColumnLayout::Dirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "Dirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::OnColumnAdded
// Il2CppName: OnColumnAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)(::UnityEngine::UIElements::Column*, int)>(&UnityEngine::UIElements::ColumnLayout::OnColumnAdded)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Column")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "OnColumnAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column, index});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::OnColumnRemoved
// Il2CppName: OnColumnRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)(::UnityEngine::UIElements::Column*)>(&UnityEngine::UIElements::ColumnLayout::OnColumnRemoved)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Column")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "OnColumnRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::OnColumnReordered
// Il2CppName: OnColumnReordered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)(::UnityEngine::UIElements::Column*, int, int)>(&UnityEngine::UIElements::ColumnLayout::OnColumnReordered)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Column")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "OnColumnReordered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column, from, to});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::RequiresLayoutUpdate
// Il2CppName: RequiresLayoutUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::ColumnLayout::*)(::UnityEngine::UIElements::ColumnDataType)>(&UnityEngine::UIElements::ColumnLayout::RequiresLayoutUpdate)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ColumnDataType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "RequiresLayoutUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::OnColumnChanged
// Il2CppName: OnColumnChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)(::UnityEngine::UIElements::Column*, ::UnityEngine::UIElements::ColumnDataType)>(&UnityEngine::UIElements::ColumnLayout::OnColumnChanged)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Column")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ColumnDataType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "OnColumnChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column, type});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::OnColumnResized
// Il2CppName: OnColumnResized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)(::UnityEngine::UIElements::Column*)>(&UnityEngine::UIElements::ColumnLayout::OnColumnResized)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Column")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "OnColumnResized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::IsClamped
// Il2CppName: IsClamped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, float, float)>(&UnityEngine::UIElements::ColumnLayout::IsClamped)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "IsClamped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, min, max});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::DoLayout
// Il2CppName: DoLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)(float)>(&UnityEngine::UIElements::ColumnLayout::DoLayout)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "DoLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::StretchResizeColumns
// Il2CppName: StretchResizeColumns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)(::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>*, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::Column*>*, ByRef<float>, bool)>(&UnityEngine::UIElements::ColumnLayout::StretchResizeColumns)> {
  static const MethodInfo* get() {
    static auto* stretchableColumns = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Column")})->byval_arg;
    static auto* fixedColumns = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Column")})->byval_arg;
    static auto* delta = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* resizeToFit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "StretchResizeColumns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stretchableColumns, fixedColumns, delta, resizeToFit});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::ResizeToFit
// Il2CppName: ResizeToFit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)(float)>(&UnityEngine::UIElements::ColumnLayout::ResizeToFit)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "ResizeToFit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::ResizeColumn
// Il2CppName: ResizeColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)(::UnityEngine::UIElements::Column*, float, bool)>(&UnityEngine::UIElements::ColumnLayout::ResizeColumn)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Column")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* setDesiredWidthOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "ResizeColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column, width, setDesiredWidthOnly});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::BeginDragResize
// Il2CppName: BeginDragResize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)(::UnityEngine::UIElements::Column*, float, bool)>(&UnityEngine::UIElements::ColumnLayout::BeginDragResize)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Column")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* previewMode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "BeginDragResize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column, pos, previewMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::GetDesiredPosition
// Il2CppName: GetDesiredPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::ColumnLayout::*)(::UnityEngine::UIElements::Column*)>(&UnityEngine::UIElements::ColumnLayout::GetDesiredPosition)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Column")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "GetDesiredPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::GetDesiredWidth
// Il2CppName: GetDesiredWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::ColumnLayout::*)(::UnityEngine::UIElements::Column*)>(&UnityEngine::UIElements::ColumnLayout::GetDesiredWidth)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Column")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "GetDesiredWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::DragResize
// Il2CppName: DragResize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)(::UnityEngine::UIElements::Column*, float)>(&UnityEngine::UIElements::ColumnLayout::DragResize)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Column")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "DragResize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column, pos});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::EndDragResize
// Il2CppName: EndDragResize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)(::UnityEngine::UIElements::Column*, bool)>(&UnityEngine::UIElements::ColumnLayout::EndDragResize)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Column")->byval_arg;
    static auto* cancelled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "EndDragResize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column, cancelled});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::UpdateCache
// Il2CppName: UpdateCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)()>(&UnityEngine::UIElements::ColumnLayout::UpdateCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "UpdateCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColumnLayout::ClearCache
// Il2CppName: ClearCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ColumnLayout::*)()>(&UnityEngine::UIElements::ColumnLayout::ClearCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColumnLayout*), "ClearCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
