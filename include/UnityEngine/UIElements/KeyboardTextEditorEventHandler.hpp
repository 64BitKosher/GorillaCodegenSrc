// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.TextEditorEventHandler
#include "UnityEngine/UIElements/TextEditorEventHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Event
  class Event;
  // Forward declaring type: TextEditingUtilities
  class TextEditingUtilities;
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: FocusEvent
  class FocusEvent;
  // Forward declaring type: BlurEvent
  class BlurEvent;
  // Forward declaring type: KeyDownEvent
  class KeyDownEvent;
  // Forward declaring type: ValidateCommandEvent
  class ValidateCommandEvent;
  // Forward declaring type: ExecuteCommandEvent
  class ExecuteCommandEvent;
  // Forward declaring type: NavigationEventBase`1<T>
  template<typename T>
  class NavigationEventBase_1;
  // Forward declaring type: TextElement
  class TextElement;
  // Forward declaring type: EventBase
  class EventBase;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: KeyboardTextEditorEventHandler
  class KeyboardTextEditorEventHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::KeyboardTextEditorEventHandler);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::KeyboardTextEditorEventHandler*, "UnityEngine.UIElements", "KeyboardTextEditorEventHandler");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.KeyboardTextEditorEventHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class KeyboardTextEditorEventHandler : public ::UnityEngine::UIElements::TextEditorEventHandler {
    public:
    public:
    // private readonly UnityEngine.Event m_ImguiEvent
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Event* m_ImguiEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Event*) == 0x8);
    // System.Boolean m_Changed
    // Size: 0x1
    // Offset: 0x28
    bool m_Changed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private readonly UnityEngine.Event m_ImguiEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Event*& dyn_m_ImguiEvent();
    // Get instance field reference: System.Boolean m_Changed
    [[deprecated("Use field access instead!")]] bool& dyn_m_Changed();
    // private System.Void OnFocus(UnityEngine.UIElements.FocusEvent _)
    // Offset: 0x55BE380
    void OnFocus(::UnityEngine::UIElements::FocusEvent* _);
    // private System.Void OnBlur(UnityEngine.UIElements.BlurEvent _)
    // Offset: 0x55BE440
    void OnBlur(::UnityEngine::UIElements::BlurEvent* _);
    // private System.Void OnKeyDown(UnityEngine.UIElements.KeyDownEvent evt)
    // Offset: 0x55BE44C
    void OnKeyDown(::UnityEngine::UIElements::KeyDownEvent* evt);
    // private System.Void UpdateLabel()
    // Offset: 0x55BF1FC
    void UpdateLabel();
    // private System.Void OnValidateCommandEvent(UnityEngine.UIElements.ValidateCommandEvent evt)
    // Offset: 0x55BED7C
    void OnValidateCommandEvent(::UnityEngine::UIElements::ValidateCommandEvent* evt);
    // private System.Void OnExecuteCommandEvent(UnityEngine.UIElements.ExecuteCommandEvent evt)
    // Offset: 0x55BEF90
    void OnExecuteCommandEvent(::UnityEngine::UIElements::ExecuteCommandEvent* evt);
    // private System.Void OnNavigationEvent(UnityEngine.UIElements.NavigationEventBase`1<TEvent> evt)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEvent>
    void OnNavigationEvent(::UnityEngine::UIElements::NavigationEventBase_1<TEvent>* evt) {
      static_assert(std::is_convertible_v<TEvent, ::UnityEngine::UIElements::NavigationEventBase_1<TEvent>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::KeyboardTextEditorEventHandler::OnNavigationEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNavigationEvent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEvent>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEvent>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, evt);
    }
    // public System.Void .ctor(UnityEngine.UIElements.TextElement textElement, UnityEngine.TextEditingUtilities editingUtilities)
    // Offset: 0x55BDF9C
    // Implemented from: UnityEngine.UIElements.TextEditorEventHandler
    // Base method: System.Void TextEditorEventHandler::.ctor(UnityEngine.UIElements.TextElement textElement, UnityEngine.TextEditingUtilities editingUtilities)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static KeyboardTextEditorEventHandler* New_ctor(::UnityEngine::UIElements::TextElement* textElement, ::UnityEngine::TextEditingUtilities* editingUtilities) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::KeyboardTextEditorEventHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<KeyboardTextEditorEventHandler*, creationType>(textElement, editingUtilities)));
    }
    // public override System.Void ExecuteDefaultActionAtTarget(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x55BE0B8
    // Implemented from: UnityEngine.UIElements.TextEditorEventHandler
    // Base method: System.Void TextEditorEventHandler::ExecuteDefaultActionAtTarget(UnityEngine.UIElements.EventBase evt)
    void ExecuteDefaultActionAtTarget(::UnityEngine::UIElements::EventBase* evt);
  }; // UnityEngine.UIElements.KeyboardTextEditorEventHandler
  #pragma pack(pop)
  static check_size<sizeof(KeyboardTextEditorEventHandler), 40 + sizeof(bool)> __UnityEngine_UIElements_KeyboardTextEditorEventHandlerSizeCheck;
  static_assert(sizeof(KeyboardTextEditorEventHandler) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::KeyboardTextEditorEventHandler::OnFocus
// Il2CppName: OnFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::KeyboardTextEditorEventHandler::*)(::UnityEngine::UIElements::FocusEvent*)>(&UnityEngine::UIElements::KeyboardTextEditorEventHandler::OnFocus)> {
  static const MethodInfo* get() {
    static auto* _ = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "FocusEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::KeyboardTextEditorEventHandler*), "OnFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::KeyboardTextEditorEventHandler::OnBlur
// Il2CppName: OnBlur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::KeyboardTextEditorEventHandler::*)(::UnityEngine::UIElements::BlurEvent*)>(&UnityEngine::UIElements::KeyboardTextEditorEventHandler::OnBlur)> {
  static const MethodInfo* get() {
    static auto* _ = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "BlurEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::KeyboardTextEditorEventHandler*), "OnBlur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::KeyboardTextEditorEventHandler::OnKeyDown
// Il2CppName: OnKeyDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::KeyboardTextEditorEventHandler::*)(::UnityEngine::UIElements::KeyDownEvent*)>(&UnityEngine::UIElements::KeyboardTextEditorEventHandler::OnKeyDown)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "KeyDownEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::KeyboardTextEditorEventHandler*), "OnKeyDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::KeyboardTextEditorEventHandler::UpdateLabel
// Il2CppName: UpdateLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::KeyboardTextEditorEventHandler::*)()>(&UnityEngine::UIElements::KeyboardTextEditorEventHandler::UpdateLabel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::KeyboardTextEditorEventHandler*), "UpdateLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::KeyboardTextEditorEventHandler::OnValidateCommandEvent
// Il2CppName: OnValidateCommandEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::KeyboardTextEditorEventHandler::*)(::UnityEngine::UIElements::ValidateCommandEvent*)>(&UnityEngine::UIElements::KeyboardTextEditorEventHandler::OnValidateCommandEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ValidateCommandEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::KeyboardTextEditorEventHandler*), "OnValidateCommandEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::KeyboardTextEditorEventHandler::OnExecuteCommandEvent
// Il2CppName: OnExecuteCommandEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::KeyboardTextEditorEventHandler::*)(::UnityEngine::UIElements::ExecuteCommandEvent*)>(&UnityEngine::UIElements::KeyboardTextEditorEventHandler::OnExecuteCommandEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ExecuteCommandEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::KeyboardTextEditorEventHandler*), "OnExecuteCommandEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::KeyboardTextEditorEventHandler::OnNavigationEvent
// Il2CppName: OnNavigationEvent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::UIElements::KeyboardTextEditorEventHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::KeyboardTextEditorEventHandler::ExecuteDefaultActionAtTarget
// Il2CppName: ExecuteDefaultActionAtTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::KeyboardTextEditorEventHandler::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::KeyboardTextEditorEventHandler::ExecuteDefaultActionAtTarget)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::KeyboardTextEditorEventHandler*), "ExecuteDefaultActionAtTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
