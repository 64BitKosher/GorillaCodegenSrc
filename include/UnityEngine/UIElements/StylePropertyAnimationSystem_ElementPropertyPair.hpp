// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.StylePropertyAnimationSystem
#include "UnityEngine/UIElements/StylePropertyAnimationSystem.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.StyleSheets.StylePropertyId
#include "UnityEngine/UIElements/StyleSheets/StylePropertyId.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEqualityComparer`1<T>
  template<typename T>
  class IEqualityComparer_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::StylePropertyAnimationSystem::ElementPropertyPair, "UnityEngine.UIElements", "StylePropertyAnimationSystem/ElementPropertyPair");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.StylePropertyAnimationSystem/ElementPropertyPair
  // [TokenAttribute] Offset: FFFFFFFF
  struct StylePropertyAnimationSystem::ElementPropertyPair/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::StylePropertyAnimationSystem::ElementPropertyPair::EqualityComparer
    class EqualityComparer;
    public:
    // public readonly UnityEngine.UIElements.VisualElement element
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::VisualElement* element;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // public readonly UnityEngine.UIElements.StyleSheets.StylePropertyId property
    // Size: 0x4
    // Offset: 0x8
    ::UnityEngine::UIElements::StyleSheets::StylePropertyId property;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleSheets::StylePropertyId) == 0x4);
    public:
    // Creating value type constructor for type: ElementPropertyPair
    constexpr ElementPropertyPair(::UnityEngine::UIElements::VisualElement* element_ = {}, ::UnityEngine::UIElements::StyleSheets::StylePropertyId property_ = {}) noexcept : element{element_}, property{property_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly System.Collections.Generic.IEqualityComparer`1<UnityEngine.UIElements.StylePropertyAnimationSystem/ElementPropertyPair> Comparer
    static ::System::Collections::Generic::IEqualityComparer_1<::UnityEngine::UIElements::StylePropertyAnimationSystem::ElementPropertyPair>* _get_Comparer();
    // Set static field: static public readonly System.Collections.Generic.IEqualityComparer`1<UnityEngine.UIElements.StylePropertyAnimationSystem/ElementPropertyPair> Comparer
    static void _set_Comparer(::System::Collections::Generic::IEqualityComparer_1<::UnityEngine::UIElements::StylePropertyAnimationSystem::ElementPropertyPair>* value);
    // Get instance field reference: public readonly UnityEngine.UIElements.VisualElement element
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_element();
    // Get instance field reference: public readonly UnityEngine.UIElements.StyleSheets.StylePropertyId property
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleSheets::StylePropertyId& dyn_property();
    // public System.Void .ctor(UnityEngine.UIElements.VisualElement element, UnityEngine.UIElements.StyleSheets.StylePropertyId property)
    // Offset: 0x56ACA3C
    // ABORTED: conflicts with another method.  ElementPropertyPair(::UnityEngine::UIElements::VisualElement* element, ::UnityEngine::UIElements::StyleSheets::StylePropertyId property);
    // static private System.Void .cctor()
    // Offset: 0x56ACA64
    static void _cctor();
  }; // UnityEngine.UIElements.StylePropertyAnimationSystem/ElementPropertyPair
  #pragma pack(pop)
  static check_size<sizeof(StylePropertyAnimationSystem::ElementPropertyPair), 8 + sizeof(::UnityEngine::UIElements::StyleSheets::StylePropertyId)> __UnityEngine_UIElements_StylePropertyAnimationSystem_ElementPropertyPairSizeCheck;
  static_assert(sizeof(StylePropertyAnimationSystem::ElementPropertyPair) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::StylePropertyAnimationSystem::ElementPropertyPair::ElementPropertyPair
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::StylePropertyAnimationSystem::ElementPropertyPair::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::StylePropertyAnimationSystem::ElementPropertyPair::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StylePropertyAnimationSystem::ElementPropertyPair), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
