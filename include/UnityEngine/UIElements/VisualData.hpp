// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.IStyleDataGroup`1
#include "UnityEngine/UIElements/IStyleDataGroup_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.UIElements.Background
#include "UnityEngine/UIElements/Background.hpp"
// Including type: UnityEngine.UIElements.BackgroundPosition
#include "UnityEngine/UIElements/BackgroundPosition.hpp"
// Including type: UnityEngine.UIElements.BackgroundRepeat
#include "UnityEngine/UIElements/BackgroundRepeat.hpp"
// Including type: UnityEngine.UIElements.BackgroundSize
#include "UnityEngine/UIElements/BackgroundSize.hpp"
// Including type: UnityEngine.UIElements.OverflowInternal
#include "UnityEngine/UIElements/OverflowInternal.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualData
  struct VisualData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualData, "UnityEngine.UIElements", "VisualData");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0xCC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.VisualData
  // [TokenAttribute] Offset: FFFFFFFF
  struct VisualData/*, public ::System::ValueType, public ::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::VisualData>, public ::System::IEquatable_1<::UnityEngine::UIElements::VisualData>*/ {
    public:
    public:
    // public UnityEngine.Color backgroundColor
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Color backgroundColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.UIElements.Background backgroundImage
    // Size: 0x20
    // Offset: 0x10
    ::UnityEngine::UIElements::Background backgroundImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Background) == 0x20);
    // public UnityEngine.UIElements.BackgroundPosition backgroundPositionX
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::UIElements::BackgroundPosition backgroundPositionX;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BackgroundPosition) == 0xC);
    // public UnityEngine.UIElements.BackgroundPosition backgroundPositionY
    // Size: 0xC
    // Offset: 0x3C
    ::UnityEngine::UIElements::BackgroundPosition backgroundPositionY;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BackgroundPosition) == 0xC);
    // public UnityEngine.UIElements.BackgroundRepeat backgroundRepeat
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::UIElements::BackgroundRepeat backgroundRepeat;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BackgroundRepeat) == 0x8);
    // public UnityEngine.UIElements.BackgroundSize backgroundSize
    // Size: 0x14
    // Offset: 0x50
    ::UnityEngine::UIElements::BackgroundSize backgroundSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BackgroundSize) == 0x14);
    // public UnityEngine.Color borderBottomColor
    // Size: 0x10
    // Offset: 0x64
    ::UnityEngine::Color borderBottomColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.UIElements.Length borderBottomLeftRadius
    // Size: 0x8
    // Offset: 0x74
    ::UnityEngine::UIElements::Length borderBottomLeftRadius;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length borderBottomRightRadius
    // Size: 0x8
    // Offset: 0x7C
    ::UnityEngine::UIElements::Length borderBottomRightRadius;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.Color borderLeftColor
    // Size: 0x10
    // Offset: 0x84
    ::UnityEngine::Color borderLeftColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color borderRightColor
    // Size: 0x10
    // Offset: 0x94
    ::UnityEngine::Color borderRightColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color borderTopColor
    // Size: 0x10
    // Offset: 0xA4
    ::UnityEngine::Color borderTopColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.UIElements.Length borderTopLeftRadius
    // Size: 0x8
    // Offset: 0xB4
    ::UnityEngine::UIElements::Length borderTopLeftRadius;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length borderTopRightRadius
    // Size: 0x8
    // Offset: 0xBC
    ::UnityEngine::UIElements::Length borderTopRightRadius;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public System.Single opacity
    // Size: 0x4
    // Offset: 0xC4
    float opacity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.UIElements.OverflowInternal overflow
    // Size: 0x4
    // Offset: 0xC8
    ::UnityEngine::UIElements::OverflowInternal overflow;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::OverflowInternal) == 0x4);
    public:
    // Creating value type constructor for type: VisualData
    constexpr VisualData(::UnityEngine::Color backgroundColor_ = {}, ::UnityEngine::UIElements::Background backgroundImage_ = {}, ::UnityEngine::UIElements::BackgroundPosition backgroundPositionX_ = {}, ::UnityEngine::UIElements::BackgroundPosition backgroundPositionY_ = {}, ::UnityEngine::UIElements::BackgroundRepeat backgroundRepeat_ = {}, ::UnityEngine::UIElements::BackgroundSize backgroundSize_ = {}, ::UnityEngine::Color borderBottomColor_ = {}, ::UnityEngine::UIElements::Length borderBottomLeftRadius_ = {}, ::UnityEngine::UIElements::Length borderBottomRightRadius_ = {}, ::UnityEngine::Color borderLeftColor_ = {}, ::UnityEngine::Color borderRightColor_ = {}, ::UnityEngine::Color borderTopColor_ = {}, ::UnityEngine::UIElements::Length borderTopLeftRadius_ = {}, ::UnityEngine::UIElements::Length borderTopRightRadius_ = {}, float opacity_ = {}, ::UnityEngine::UIElements::OverflowInternal overflow_ = {}) noexcept : backgroundColor{backgroundColor_}, backgroundImage{backgroundImage_}, backgroundPositionX{backgroundPositionX_}, backgroundPositionY{backgroundPositionY_}, backgroundRepeat{backgroundRepeat_}, backgroundSize{backgroundSize_}, borderBottomColor{borderBottomColor_}, borderBottomLeftRadius{borderBottomLeftRadius_}, borderBottomRightRadius{borderBottomRightRadius_}, borderLeftColor{borderLeftColor_}, borderRightColor{borderRightColor_}, borderTopColor{borderTopColor_}, borderTopLeftRadius{borderTopLeftRadius_}, borderTopRightRadius{borderTopRightRadius_}, opacity{opacity_}, overflow{overflow_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::VisualData>
    operator ::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::VisualData>() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::VisualData>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::VisualData>
    operator ::System::IEquatable_1<::UnityEngine::UIElements::VisualData>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::VisualData>*>(this);
    }
    // Get instance field reference: public UnityEngine.Color backgroundColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_backgroundColor();
    // Get instance field reference: public UnityEngine.UIElements.Background backgroundImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Background& dyn_backgroundImage();
    // Get instance field reference: public UnityEngine.UIElements.BackgroundPosition backgroundPositionX
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BackgroundPosition& dyn_backgroundPositionX();
    // Get instance field reference: public UnityEngine.UIElements.BackgroundPosition backgroundPositionY
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BackgroundPosition& dyn_backgroundPositionY();
    // Get instance field reference: public UnityEngine.UIElements.BackgroundRepeat backgroundRepeat
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BackgroundRepeat& dyn_backgroundRepeat();
    // Get instance field reference: public UnityEngine.UIElements.BackgroundSize backgroundSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BackgroundSize& dyn_backgroundSize();
    // Get instance field reference: public UnityEngine.Color borderBottomColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_borderBottomColor();
    // Get instance field reference: public UnityEngine.UIElements.Length borderBottomLeftRadius
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_borderBottomLeftRadius();
    // Get instance field reference: public UnityEngine.UIElements.Length borderBottomRightRadius
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_borderBottomRightRadius();
    // Get instance field reference: public UnityEngine.Color borderLeftColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_borderLeftColor();
    // Get instance field reference: public UnityEngine.Color borderRightColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_borderRightColor();
    // Get instance field reference: public UnityEngine.Color borderTopColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_borderTopColor();
    // Get instance field reference: public UnityEngine.UIElements.Length borderTopLeftRadius
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_borderTopLeftRadius();
    // Get instance field reference: public UnityEngine.UIElements.Length borderTopRightRadius
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_borderTopRightRadius();
    // Get instance field reference: public System.Single opacity
    [[deprecated("Use field access instead!")]] float& dyn_opacity();
    // Get instance field reference: public UnityEngine.UIElements.OverflowInternal overflow
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::OverflowInternal& dyn_overflow();
    // public UnityEngine.UIElements.VisualData Copy()
    // Offset: 0x56A6D94
    ::UnityEngine::UIElements::VisualData Copy();
    // public System.Void CopyFrom(ref UnityEngine.UIElements.VisualData other)
    // Offset: 0x56A6DB0
    void CopyFrom(ByRef<::UnityEngine::UIElements::VisualData> other);
    // public System.Boolean Equals(UnityEngine.UIElements.VisualData other)
    // Offset: 0x56A70C4
    bool Equals(::UnityEngine::UIElements::VisualData other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x56A7110
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x56A71B8
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.UIElements.VisualData
  #pragma pack(pop)
  static check_size<sizeof(VisualData), 200 + sizeof(::UnityEngine::UIElements::OverflowInternal)> __UnityEngine_UIElements_VisualDataSizeCheck;
  static_assert(sizeof(VisualData) == 0xCC);
  // static public System.Boolean op_Equality(UnityEngine.UIElements.VisualData lhs, UnityEngine.UIElements.VisualData rhs)
  // Offset: 0x56A6DD0
  bool operator ==(const ::UnityEngine::UIElements::VisualData& lhs, const ::UnityEngine::UIElements::VisualData& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualData::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualData (UnityEngine::UIElements::VisualData::*)()>(&UnityEngine::UIElements::VisualData::Copy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualData), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualData::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualData::*)(ByRef<::UnityEngine::UIElements::VisualData>)>(&UnityEngine::UIElements::VisualData::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualData), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::VisualData::*)(::UnityEngine::UIElements::VisualData)>(&UnityEngine::UIElements::VisualData::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualData), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::VisualData::*)(::Il2CppObject*)>(&UnityEngine::UIElements::VisualData::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualData), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualData::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::VisualData::*)()>(&UnityEngine::UIElements::VisualData::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualData), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualData::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
