// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.VisualElement
#include "UnityEngine/UIElements/VisualElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::VisualElement::TypeData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualElement::TypeData*, "UnityEngine.UIElements", "VisualElement/TypeData");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.VisualElement/TypeData
  // [TokenAttribute] Offset: FFFFFFFF
  class VisualElement::TypeData : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Type <type>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Type* type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.String m_FullTypeName
    // Size: 0x8
    // Offset: 0x18
    ::StringW m_FullTypeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_TypeName
    // Size: 0x8
    // Offset: 0x20
    ::StringW m_TypeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_TypeNamespace
    // Size: 0x8
    // Offset: 0x28
    ::StringW m_TypeNamespace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private readonly System.Type <type>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_$type$k__BackingField();
    // Get instance field reference: private System.String m_FullTypeName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_FullTypeName();
    // Get instance field reference: private System.String m_TypeName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_TypeName();
    // Get instance field reference: private System.String m_TypeNamespace
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_TypeNamespace();
    // public System.Type get_type()
    // Offset: 0x56A4E80
    ::System::Type* get_type();
    // public System.Void .ctor(System.Type type)
    // Offset: 0x56A4E88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisualElement::TypeData* New_ctor(::System::Type* type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VisualElement::TypeData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisualElement::TypeData*, creationType>(type)));
    }
    // public System.String get_fullTypeName()
    // Offset: 0x56A4F34
    ::StringW get_fullTypeName();
    // public System.String get_typeName()
    // Offset: 0x56A4F90
    ::StringW get_typeName();
    // public System.String get_typeNamespace()
    // Offset: 0x56A5048
    ::StringW get_typeNamespace();
  }; // UnityEngine.UIElements.VisualElement/TypeData
  #pragma pack(pop)
  static check_size<sizeof(VisualElement::TypeData), 40 + sizeof(::StringW)> __UnityEngine_UIElements_VisualElement_TypeDataSizeCheck;
  static_assert(sizeof(VisualElement::TypeData) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::TypeData::get_type
// Il2CppName: get_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (UnityEngine::UIElements::VisualElement::TypeData::*)()>(&UnityEngine::UIElements::VisualElement::TypeData::get_type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::TypeData*), "get_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::TypeData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::TypeData::get_fullTypeName
// Il2CppName: get_fullTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::UIElements::VisualElement::TypeData::*)()>(&UnityEngine::UIElements::VisualElement::TypeData::get_fullTypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::TypeData*), "get_fullTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::TypeData::get_typeName
// Il2CppName: get_typeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::UIElements::VisualElement::TypeData::*)()>(&UnityEngine::UIElements::VisualElement::TypeData::get_typeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::TypeData*), "get_typeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::TypeData::get_typeNamespace
// Il2CppName: get_typeNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::UIElements::VisualElement::TypeData::*)()>(&UnityEngine::UIElements::VisualElement::TypeData::get_typeNamespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::TypeData*), "get_typeNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
