// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BaseVisualElementPanel
#include "UnityEngine/UIElements/BaseVisualElementPanel.hpp"
// Including type: Unity.Profiling.ProfilerMarker
#include "Unity/Profiling/ProfilerMarker.hpp"
// Including type: UnityEngine.UIElements.ContextType
#include "UnityEngine/UIElements/ContextType.hpp"
// Including type: UnityEngine.EventInterests
#include "UnityEngine/EventInterests.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: VisualTreeUpdater
  class VisualTreeUpdater;
  // Forward declaring type: IStylePropertyAnimationSystem
  class IStylePropertyAnimationSystem;
  // Forward declaring type: EventDispatcher
  class EventDispatcher;
  // Forward declaring type: TimerEventScheduler
  class TimerEventScheduler;
  // Forward declaring type: SavePersistentViewData
  class SavePersistentViewData;
  // Forward declaring type: GetViewDataDictionary
  class GetViewDataDictionary;
  // Forward declaring type: FocusController
  class FocusController;
  // Forward declaring type: IMGUIContainer
  class IMGUIContainer;
  // Forward declaring type: AtlasBase
  class AtlasBase;
  // Forward declaring type: LoadResourceFunction
  class LoadResourceFunction;
  // Forward declaring type: TimeMsFunction
  class TimeMsFunction;
  // Forward declaring type: IScheduler
  class IScheduler;
  // Forward declaring type: VersionChangeType
  struct VersionChangeType;
  // Forward declaring type: IVisualTreeUpdater
  class IVisualTreeUpdater;
  // Forward declaring type: VisualTreeUpdatePhase
  struct VisualTreeUpdatePhase;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ScriptableObject
  class ScriptableObject;
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Vector2Int
  struct Vector2Int;
  // Forward declaring type: Event
  class Event;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Panel
  class Panel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::Panel);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::Panel*, "UnityEngine.UIElements", "Panel");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x159
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.Panel
  // [TokenAttribute] Offset: FFFFFFFF
  class Panel : public ::UnityEngine::UIElements::BaseVisualElementPanel {
    public:
    public:
    // private UnityEngine.UIElements.VisualElement m_RootContainer
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::UIElements::VisualElement* m_RootContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.VisualTreeUpdater m_VisualTreeUpdater
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::UIElements::VisualTreeUpdater* m_VisualTreeUpdater;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualTreeUpdater*) == 0x8);
    // private UnityEngine.UIElements.IStylePropertyAnimationSystem m_StylePropertyAnimationSystem
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::UIElements::IStylePropertyAnimationSystem* m_StylePropertyAnimationSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::IStylePropertyAnimationSystem*) == 0x8);
    // private System.String m_PanelName
    // Size: 0x8
    // Offset: 0xC0
    ::StringW m_PanelName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.UInt32 m_Version
    // Size: 0x4
    // Offset: 0xC8
    uint m_Version;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_RepaintVersion
    // Size: 0x4
    // Offset: 0xCC
    uint m_RepaintVersion;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_HierarchyVersion
    // Size: 0x4
    // Offset: 0xD0
    uint m_HierarchyVersion;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: m_HierarchyVersion and: m_MarkerBeforeUpdate
    char __padding6[0x4] = {};
    // private Unity.Profiling.ProfilerMarker m_MarkerBeforeUpdate
    // Size: 0x8
    // Offset: 0xD8
    ::Unity::Profiling::ProfilerMarker m_MarkerBeforeUpdate;
    // Field size check
    static_assert(sizeof(::Unity::Profiling::ProfilerMarker) == 0x8);
    // private Unity.Profiling.ProfilerMarker m_MarkerUpdate
    // Size: 0x8
    // Offset: 0xE0
    ::Unity::Profiling::ProfilerMarker m_MarkerUpdate;
    // Field size check
    static_assert(sizeof(::Unity::Profiling::ProfilerMarker) == 0x8);
    // private Unity.Profiling.ProfilerMarker m_MarkerLayout
    // Size: 0x8
    // Offset: 0xE8
    ::Unity::Profiling::ProfilerMarker m_MarkerLayout;
    // Field size check
    static_assert(sizeof(::Unity::Profiling::ProfilerMarker) == 0x8);
    // private Unity.Profiling.ProfilerMarker m_MarkerBindings
    // Size: 0x8
    // Offset: 0xF0
    ::Unity::Profiling::ProfilerMarker m_MarkerBindings;
    // Field size check
    static_assert(sizeof(::Unity::Profiling::ProfilerMarker) == 0x8);
    // private Unity.Profiling.ProfilerMarker m_MarkerAnimations
    // Size: 0x8
    // Offset: 0xF8
    ::Unity::Profiling::ProfilerMarker m_MarkerAnimations;
    // Field size check
    static_assert(sizeof(::Unity::Profiling::ProfilerMarker) == 0x8);
    // private UnityEngine.UIElements.EventDispatcher <dispatcher>k__BackingField
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::UIElements::EventDispatcher* dispatcher;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::EventDispatcher*) == 0x8);
    // private UnityEngine.UIElements.TimerEventScheduler m_Scheduler
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::UIElements::TimerEventScheduler* m_Scheduler;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::TimerEventScheduler*) == 0x8);
    // private UnityEngine.ScriptableObject <ownerObject>k__BackingField
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::ScriptableObject* ownerObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::ScriptableObject*) == 0x8);
    // private UnityEngine.UIElements.ContextType <contextType>k__BackingField
    // Size: 0x4
    // Offset: 0x118
    ::UnityEngine::UIElements::ContextType contextType;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::ContextType) == 0x4);
    // Padding between fields: contextType and: saveViewData
    char __padding15[0x4] = {};
    // private UnityEngine.UIElements.SavePersistentViewData <saveViewData>k__BackingField
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::UIElements::SavePersistentViewData* saveViewData;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::SavePersistentViewData*) == 0x8);
    // private UnityEngine.UIElements.GetViewDataDictionary <getViewDataDictionary>k__BackingField
    // Size: 0x8
    // Offset: 0x128
    ::UnityEngine::UIElements::GetViewDataDictionary* getViewDataDictionary;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::GetViewDataDictionary*) == 0x8);
    // private UnityEngine.UIElements.FocusController <focusController>k__BackingField
    // Size: 0x8
    // Offset: 0x130
    ::UnityEngine::UIElements::FocusController* focusController;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::FocusController*) == 0x8);
    // private UnityEngine.EventInterests <IMGUIEventInterests>k__BackingField
    // Size: 0x3
    // Offset: 0x138
    ::UnityEngine::EventInterests IMGUIEventInterests;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventInterests) == 0x3);
    // private System.Boolean m_JustReceivedFocus
    // Size: 0x1
    // Offset: 0x13B
    bool m_JustReceivedFocus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 <IMGUIContainersCount>k__BackingField
    // Size: 0x4
    // Offset: 0x13C
    int IMGUIContainersCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.UIElements.IMGUIContainer <rootIMGUIContainer>k__BackingField
    // Size: 0x8
    // Offset: 0x140
    ::UnityEngine::UIElements::IMGUIContainer* rootIMGUIContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::IMGUIContainer*) == 0x8);
    // private UnityEngine.Shader m_StandardShader
    // Size: 0x8
    // Offset: 0x148
    ::UnityEngine::Shader* m_StandardShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.UIElements.AtlasBase m_Atlas
    // Size: 0x8
    // Offset: 0x150
    ::UnityEngine::UIElements::AtlasBase* m_Atlas;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::AtlasBase*) == 0x8);
    // private System.Boolean m_ValidatingLayout
    // Size: 0x1
    // Offset: 0x158
    bool m_ValidatingLayout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private Unity.Profiling.ProfilerMarker s_MarkerPickAll
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerPickAll();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_MarkerPickAll
    static void _set_s_MarkerPickAll(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private UnityEngine.UIElements.LoadResourceFunction <loadResourceFunc>k__BackingField
    static ::UnityEngine::UIElements::LoadResourceFunction* _get_$loadResourceFunc$k__BackingField();
    // Set static field: static private UnityEngine.UIElements.LoadResourceFunction <loadResourceFunc>k__BackingField
    static void _set_$loadResourceFunc$k__BackingField(::UnityEngine::UIElements::LoadResourceFunction* value);
    // Get static field: static private UnityEngine.UIElements.TimeMsFunction <TimeSinceStartup>k__BackingField
    static ::UnityEngine::UIElements::TimeMsFunction* _get_$TimeSinceStartup$k__BackingField();
    // Set static field: static private UnityEngine.UIElements.TimeMsFunction <TimeSinceStartup>k__BackingField
    static void _set_$TimeSinceStartup$k__BackingField(::UnityEngine::UIElements::TimeMsFunction* value);
    // Get static field: static private System.Action`1<UnityEngine.UIElements.Panel> beforeAnyRepaint
    static ::System::Action_1<::UnityEngine::UIElements::Panel*>* _get_beforeAnyRepaint();
    // Set static field: static private System.Action`1<UnityEngine.UIElements.Panel> beforeAnyRepaint
    static void _set_beforeAnyRepaint(::System::Action_1<::UnityEngine::UIElements::Panel*>* value);
    // Get instance field reference: private UnityEngine.UIElements.VisualElement m_RootContainer
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_RootContainer();
    // Get instance field reference: private UnityEngine.UIElements.VisualTreeUpdater m_VisualTreeUpdater
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualTreeUpdater*& dyn_m_VisualTreeUpdater();
    // Get instance field reference: private UnityEngine.UIElements.IStylePropertyAnimationSystem m_StylePropertyAnimationSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::IStylePropertyAnimationSystem*& dyn_m_StylePropertyAnimationSystem();
    // Get instance field reference: private System.String m_PanelName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_PanelName();
    // Get instance field reference: private System.UInt32 m_Version
    [[deprecated("Use field access instead!")]] uint& dyn_m_Version();
    // Get instance field reference: private System.UInt32 m_RepaintVersion
    [[deprecated("Use field access instead!")]] uint& dyn_m_RepaintVersion();
    // Get instance field reference: private System.UInt32 m_HierarchyVersion
    [[deprecated("Use field access instead!")]] uint& dyn_m_HierarchyVersion();
    // Get instance field reference: private Unity.Profiling.ProfilerMarker m_MarkerBeforeUpdate
    [[deprecated("Use field access instead!")]] ::Unity::Profiling::ProfilerMarker& dyn_m_MarkerBeforeUpdate();
    // Get instance field reference: private Unity.Profiling.ProfilerMarker m_MarkerUpdate
    [[deprecated("Use field access instead!")]] ::Unity::Profiling::ProfilerMarker& dyn_m_MarkerUpdate();
    // Get instance field reference: private Unity.Profiling.ProfilerMarker m_MarkerLayout
    [[deprecated("Use field access instead!")]] ::Unity::Profiling::ProfilerMarker& dyn_m_MarkerLayout();
    // Get instance field reference: private Unity.Profiling.ProfilerMarker m_MarkerBindings
    [[deprecated("Use field access instead!")]] ::Unity::Profiling::ProfilerMarker& dyn_m_MarkerBindings();
    // Get instance field reference: private Unity.Profiling.ProfilerMarker m_MarkerAnimations
    [[deprecated("Use field access instead!")]] ::Unity::Profiling::ProfilerMarker& dyn_m_MarkerAnimations();
    // Get instance field reference: private UnityEngine.UIElements.EventDispatcher <dispatcher>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::EventDispatcher*& dyn_$dispatcher$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.TimerEventScheduler m_Scheduler
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::TimerEventScheduler*& dyn_m_Scheduler();
    // Get instance field reference: private UnityEngine.ScriptableObject <ownerObject>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::ScriptableObject*& dyn_$ownerObject$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.ContextType <contextType>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::ContextType& dyn_$contextType$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.SavePersistentViewData <saveViewData>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::SavePersistentViewData*& dyn_$saveViewData$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.GetViewDataDictionary <getViewDataDictionary>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::GetViewDataDictionary*& dyn_$getViewDataDictionary$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.FocusController <focusController>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::FocusController*& dyn_$focusController$k__BackingField();
    // Get instance field reference: private UnityEngine.EventInterests <IMGUIEventInterests>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventInterests& dyn_$IMGUIEventInterests$k__BackingField();
    // Get instance field reference: private System.Boolean m_JustReceivedFocus
    [[deprecated("Use field access instead!")]] bool& dyn_m_JustReceivedFocus();
    // Get instance field reference: private System.Int32 <IMGUIContainersCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$IMGUIContainersCount$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.IMGUIContainer <rootIMGUIContainer>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::IMGUIContainer*& dyn_$rootIMGUIContainer$k__BackingField();
    // Get instance field reference: private UnityEngine.Shader m_StandardShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_StandardShader();
    // Get instance field reference: private UnityEngine.UIElements.AtlasBase m_Atlas
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::AtlasBase*& dyn_m_Atlas();
    // Get instance field reference: private System.Boolean m_ValidatingLayout
    [[deprecated("Use field access instead!")]] bool& dyn_m_ValidatingLayout();
    // public UnityEngine.UIElements.TimerEventScheduler get_timerEventScheduler()
    // Offset: 0x5666AFC
    ::UnityEngine::UIElements::TimerEventScheduler* get_timerEventScheduler();
    // static private UnityEngine.UIElements.LoadResourceFunction get_loadResourceFunc()
    // Offset: 0x5666CB4
    static ::UnityEngine::UIElements::LoadResourceFunction* get_loadResourceFunc();
    // static UnityEngine.Object LoadResource(System.String pathName, System.Type type, System.Single dpiScaling)
    // Offset: 0x5666D0C
    static ::UnityEngine::Object* LoadResource(::StringW pathName, ::System::Type* type, float dpiScaling);
    // System.Void Focus()
    // Offset: 0x5666E38
    void Focus();
    // System.Void Blur()
    // Offset: 0x5666E44
    void Blur();
    // System.String get_name()
    // Offset: 0x5666EA8
    ::StringW get_name();
    // System.Void set_name(System.String value)
    // Offset: 0x565DF34
    void set_name(::StringW value);
    // private System.Void CreateMarkers()
    // Offset: 0x5666EB0
    void CreateMarkers();
    // static private UnityEngine.UIElements.TimeMsFunction get_TimeSinceStartup()
    // Offset: 0x56670FC
    static ::UnityEngine::UIElements::TimeMsFunction* get_TimeSinceStartup();
    // public System.Void .ctor(UnityEngine.ScriptableObject ownerObject, UnityEngine.UIElements.ContextType contextType, UnityEngine.UIElements.EventDispatcher dispatcher)
    // Offset: 0x566720C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Panel* New_ctor(::UnityEngine::ScriptableObject* ownerObject, ::UnityEngine::UIElements::ContextType contextType, ::UnityEngine::UIElements::EventDispatcher* dispatcher) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Panel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Panel*, creationType>(ownerObject, contextType, dispatcher)));
    }
    // static public System.Int64 TimeSinceStartupMs()
    // Offset: 0x5667630
    static int64_t TimeSinceStartupMs();
    // static System.Int64 DefaultTimeSinceStartupMs()
    // Offset: 0x566770C
    static int64_t DefaultTimeSinceStartupMs();
    // static private UnityEngine.UIElements.VisualElement PickAll(UnityEngine.UIElements.VisualElement root, UnityEngine.Vector2 point, System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElement> picked, System.Boolean includeIgnoredElement)
    // Offset: 0x5667744
    static ::UnityEngine::UIElements::VisualElement* PickAll(::UnityEngine::UIElements::VisualElement* root, ::UnityEngine::Vector2 point, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>* picked, bool includeIgnoredElement);
    // static private UnityEngine.UIElements.VisualElement PerformPick(UnityEngine.UIElements.VisualElement root, UnityEngine.Vector2 point, System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElement> picked, System.Boolean includeIgnoredElement)
    // Offset: 0x56677C8
    static ::UnityEngine::UIElements::VisualElement* PerformPick(::UnityEngine::UIElements::VisualElement* root, ::UnityEngine::Vector2 point, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>* picked, bool includeIgnoredElement);
    // private System.Void UpdateForRepaint()
    // Offset: 0x5667EB0
    void UpdateForRepaint();
    // static private System.Void .cctor()
    // Offset: 0x5668214
    static void _cctor();
    // static UnityEngine.Vector2Int <Pick>g__PixelOf|101_0(UnityEngine.Vector2 p)
    // Offset: 0x5667D24
    static ::UnityEngine::Vector2Int $Pick$g__PixelOf_101_0(::UnityEngine::Vector2 p);
    // public override UnityEngine.UIElements.VisualElement get_visualTree()
    // Offset: 0x5666ADC
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.VisualElement BaseVisualElementPanel::get_visualTree()
    ::UnityEngine::UIElements::VisualElement* get_visualTree();
    // public override UnityEngine.UIElements.EventDispatcher get_dispatcher()
    // Offset: 0x5666AE4
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.EventDispatcher BaseVisualElementPanel::get_dispatcher()
    ::UnityEngine::UIElements::EventDispatcher* get_dispatcher();
    // public override System.Void set_dispatcher(UnityEngine.UIElements.EventDispatcher value)
    // Offset: 0x5666AEC
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::set_dispatcher(UnityEngine.UIElements.EventDispatcher value)
    void set_dispatcher(::UnityEngine::UIElements::EventDispatcher* value);
    // override UnityEngine.UIElements.IScheduler get_scheduler()
    // Offset: 0x5666B70
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.IScheduler BaseVisualElementPanel::get_scheduler()
    ::UnityEngine::UIElements::IScheduler* get_scheduler();
    // override UnityEngine.UIElements.IStylePropertyAnimationSystem get_styleAnimationSystem()
    // Offset: 0x5666B74
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.IStylePropertyAnimationSystem BaseVisualElementPanel::get_styleAnimationSystem()
    ::UnityEngine::UIElements::IStylePropertyAnimationSystem* get_styleAnimationSystem();
    // override System.Void set_styleAnimationSystem(UnityEngine.UIElements.IStylePropertyAnimationSystem value)
    // Offset: 0x5666B7C
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::set_styleAnimationSystem(UnityEngine.UIElements.IStylePropertyAnimationSystem value)
    void set_styleAnimationSystem(::UnityEngine::UIElements::IStylePropertyAnimationSystem* value);
    // public override UnityEngine.ScriptableObject get_ownerObject()
    // Offset: 0x5666C44
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.ScriptableObject BaseVisualElementPanel::get_ownerObject()
    ::UnityEngine::ScriptableObject* get_ownerObject();
    // protected override System.Void set_ownerObject(UnityEngine.ScriptableObject value)
    // Offset: 0x5666C4C
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::set_ownerObject(UnityEngine.ScriptableObject value)
    void set_ownerObject(::UnityEngine::ScriptableObject* value);
    // public override UnityEngine.UIElements.ContextType get_contextType()
    // Offset: 0x5666C5C
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.ContextType BaseVisualElementPanel::get_contextType()
    ::UnityEngine::UIElements::ContextType get_contextType();
    // protected override System.Void set_contextType(UnityEngine.UIElements.ContextType value)
    // Offset: 0x5666C64
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::set_contextType(UnityEngine.UIElements.ContextType value)
    void set_contextType(::UnityEngine::UIElements::ContextType value);
    // public override UnityEngine.UIElements.SavePersistentViewData get_saveViewData()
    // Offset: 0x5666C6C
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.SavePersistentViewData BaseVisualElementPanel::get_saveViewData()
    ::UnityEngine::UIElements::SavePersistentViewData* get_saveViewData();
    // public override UnityEngine.UIElements.GetViewDataDictionary get_getViewDataDictionary()
    // Offset: 0x5666C74
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.GetViewDataDictionary BaseVisualElementPanel::get_getViewDataDictionary()
    ::UnityEngine::UIElements::GetViewDataDictionary* get_getViewDataDictionary();
    // public override UnityEngine.UIElements.FocusController get_focusController()
    // Offset: 0x5666C7C
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.FocusController BaseVisualElementPanel::get_focusController()
    ::UnityEngine::UIElements::FocusController* get_focusController();
    // public override System.Void set_focusController(UnityEngine.UIElements.FocusController value)
    // Offset: 0x5666C84
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::set_focusController(UnityEngine.UIElements.FocusController value)
    void set_focusController(::UnityEngine::UIElements::FocusController* value);
    // public override UnityEngine.EventInterests get_IMGUIEventInterests()
    // Offset: 0x5666C94
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.EventInterests BaseVisualElementPanel::get_IMGUIEventInterests()
    ::UnityEngine::EventInterests get_IMGUIEventInterests();
    // public override System.Void set_IMGUIEventInterests(UnityEngine.EventInterests value)
    // Offset: 0x5666CA4
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::set_IMGUIEventInterests(UnityEngine.EventInterests value)
    void set_IMGUIEventInterests(::UnityEngine::EventInterests value);
    // public override System.Void ValidateFocus()
    // Offset: 0x5666E70
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::ValidateFocus()
    void ValidateFocus();
    // public override System.Int32 get_IMGUIContainersCount()
    // Offset: 0x5667154
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Int32 BaseVisualElementPanel::get_IMGUIContainersCount()
    int get_IMGUIContainersCount();
    // public override System.Void set_IMGUIContainersCount(System.Int32 value)
    // Offset: 0x566715C
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::set_IMGUIContainersCount(System.Int32 value)
    void set_IMGUIContainersCount(int value);
    // public override UnityEngine.UIElements.IMGUIContainer get_rootIMGUIContainer()
    // Offset: 0x5667164
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.IMGUIContainer BaseVisualElementPanel::get_rootIMGUIContainer()
    ::UnityEngine::UIElements::IMGUIContainer* get_rootIMGUIContainer();
    // override System.UInt32 get_version()
    // Offset: 0x566716C
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.UInt32 BaseVisualElementPanel::get_version()
    uint get_version();
    // override System.UInt32 get_hierarchyVersion()
    // Offset: 0x5667174
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.UInt32 BaseVisualElementPanel::get_hierarchyVersion()
    uint get_hierarchyVersion();
    // override UnityEngine.Shader get_standardShader()
    // Offset: 0x566717C
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.Shader BaseVisualElementPanel::get_standardShader()
    ::UnityEngine::Shader* get_standardShader();
    // public override UnityEngine.UIElements.AtlasBase get_atlas()
    // Offset: 0x5667184
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.AtlasBase BaseVisualElementPanel::get_atlas()
    ::UnityEngine::UIElements::AtlasBase* get_atlas();
    // public override System.Void set_atlas(UnityEngine.UIElements.AtlasBase value)
    // Offset: 0x566718C
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::set_atlas(UnityEngine.UIElements.AtlasBase value)
    void set_atlas(::UnityEngine::UIElements::AtlasBase* value);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x56675C8
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override UnityEngine.UIElements.VisualElement PickAll(UnityEngine.Vector2 point, System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElement> picked)
    // Offset: 0x5667AD0
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.VisualElement BaseVisualElementPanel::PickAll(UnityEngine.Vector2 point, System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElement> picked)
    ::UnityEngine::UIElements::VisualElement* PickAll(::UnityEngine::Vector2 point, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>* picked);
    // public override UnityEngine.UIElements.VisualElement Pick(UnityEngine.Vector2 point)
    // Offset: 0x5667BAC
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.VisualElement BaseVisualElementPanel::Pick(UnityEngine.Vector2 point)
    ::UnityEngine::UIElements::VisualElement* Pick(::UnityEngine::Vector2 point);
    // public override System.Void ValidateLayout()
    // Offset: 0x5667DEC
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::ValidateLayout()
    void ValidateLayout();
    // public override System.Void UpdateAnimations()
    // Offset: 0x5667E50
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::UpdateAnimations()
    void UpdateAnimations();
    // public override System.Void UpdateBindings()
    // Offset: 0x5667E70
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::UpdateBindings()
    void UpdateBindings();
    // public override System.Void ApplyStyles()
    // Offset: 0x5667E90
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::ApplyStyles()
    void ApplyStyles();
    // public override System.Void Repaint(UnityEngine.Event e)
    // Offset: 0x5667F24
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::Repaint(UnityEngine.Event e)
    void Repaint(::UnityEngine::Event* e);
    // override System.Void OnVersionChanged(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.VersionChangeType versionChangeType)
    // Offset: 0x56681AC
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::OnVersionChanged(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.VersionChangeType versionChangeType)
    void OnVersionChanged(::UnityEngine::UIElements::VisualElement* ve, ::UnityEngine::UIElements::VersionChangeType versionChangeType);
    // override UnityEngine.UIElements.IVisualTreeUpdater GetUpdater(UnityEngine.UIElements.VisualTreeUpdatePhase phase)
    // Offset: 0x56681F8
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.IVisualTreeUpdater BaseVisualElementPanel::GetUpdater(UnityEngine.UIElements.VisualTreeUpdatePhase phase)
    ::UnityEngine::UIElements::IVisualTreeUpdater* GetUpdater(::UnityEngine::UIElements::VisualTreeUpdatePhase phase);
  }; // UnityEngine.UIElements.Panel
  #pragma pack(pop)
  static check_size<sizeof(Panel), 344 + sizeof(bool)> __UnityEngine_UIElements_PanelSizeCheck;
  static_assert(sizeof(Panel) == 0x159);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_timerEventScheduler
// Il2CppName: get_timerEventScheduler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::TimerEventScheduler* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_timerEventScheduler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_timerEventScheduler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_loadResourceFunc
// Il2CppName: get_loadResourceFunc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::LoadResourceFunction* (*)()>(&UnityEngine::UIElements::Panel::get_loadResourceFunc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_loadResourceFunc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::LoadResource
// Il2CppName: LoadResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Object* (*)(::StringW, ::System::Type*, float)>(&UnityEngine::UIElements::Panel::LoadResource)> {
  static const MethodInfo* get() {
    static auto* pathName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* dpiScaling = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "LoadResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pathName, type, dpiScaling});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::Focus
// Il2CppName: Focus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::Focus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "Focus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::Blur
// Il2CppName: Blur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::Blur)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "Blur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::set_name
// Il2CppName: set_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)(::StringW)>(&UnityEngine::UIElements::Panel::set_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "set_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::CreateMarkers
// Il2CppName: CreateMarkers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::CreateMarkers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "CreateMarkers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_TimeSinceStartup
// Il2CppName: get_TimeSinceStartup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::TimeMsFunction* (*)()>(&UnityEngine::UIElements::Panel::get_TimeSinceStartup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_TimeSinceStartup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::TimeSinceStartupMs
// Il2CppName: TimeSinceStartupMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)()>(&UnityEngine::UIElements::Panel::TimeSinceStartupMs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "TimeSinceStartupMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::DefaultTimeSinceStartupMs
// Il2CppName: DefaultTimeSinceStartupMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)()>(&UnityEngine::UIElements::Panel::DefaultTimeSinceStartupMs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "DefaultTimeSinceStartupMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::PickAll
// Il2CppName: PickAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::Vector2, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>*, bool)>(&UnityEngine::UIElements::Panel::PickAll)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* picked = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")})->byval_arg;
    static auto* includeIgnoredElement = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "PickAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, point, picked, includeIgnoredElement});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::PerformPick
// Il2CppName: PerformPick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::Vector2, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>*, bool)>(&UnityEngine::UIElements::Panel::PerformPick)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* picked = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")})->byval_arg;
    static auto* includeIgnoredElement = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "PerformPick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, point, picked, includeIgnoredElement});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::UpdateForRepaint
// Il2CppName: UpdateForRepaint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::UpdateForRepaint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "UpdateForRepaint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::Panel::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::$Pick$g__PixelOf_101_0
// Il2CppName: <Pick>g__PixelOf|101_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2Int (*)(::UnityEngine::Vector2)>(&UnityEngine::UIElements::Panel::$Pick$g__PixelOf_101_0)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "<Pick>g__PixelOf|101_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_visualTree
// Il2CppName: get_visualTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_visualTree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_visualTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_dispatcher
// Il2CppName: get_dispatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::EventDispatcher* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_dispatcher)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_dispatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::set_dispatcher
// Il2CppName: set_dispatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)(::UnityEngine::UIElements::EventDispatcher*)>(&UnityEngine::UIElements::Panel::set_dispatcher)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventDispatcher")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "set_dispatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_scheduler
// Il2CppName: get_scheduler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IScheduler* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_scheduler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_scheduler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_styleAnimationSystem
// Il2CppName: get_styleAnimationSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IStylePropertyAnimationSystem* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_styleAnimationSystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_styleAnimationSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::set_styleAnimationSystem
// Il2CppName: set_styleAnimationSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)(::UnityEngine::UIElements::IStylePropertyAnimationSystem*)>(&UnityEngine::UIElements::Panel::set_styleAnimationSystem)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "IStylePropertyAnimationSystem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "set_styleAnimationSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_ownerObject
// Il2CppName: get_ownerObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ScriptableObject* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_ownerObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_ownerObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::set_ownerObject
// Il2CppName: set_ownerObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)(::UnityEngine::ScriptableObject*)>(&UnityEngine::UIElements::Panel::set_ownerObject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ScriptableObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "set_ownerObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_contextType
// Il2CppName: get_contextType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::ContextType (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_contextType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_contextType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::set_contextType
// Il2CppName: set_contextType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)(::UnityEngine::UIElements::ContextType)>(&UnityEngine::UIElements::Panel::set_contextType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ContextType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "set_contextType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_saveViewData
// Il2CppName: get_saveViewData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::SavePersistentViewData* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_saveViewData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_saveViewData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_getViewDataDictionary
// Il2CppName: get_getViewDataDictionary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::GetViewDataDictionary* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_getViewDataDictionary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_getViewDataDictionary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_focusController
// Il2CppName: get_focusController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::FocusController* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_focusController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_focusController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::set_focusController
// Il2CppName: set_focusController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)(::UnityEngine::UIElements::FocusController*)>(&UnityEngine::UIElements::Panel::set_focusController)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "FocusController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "set_focusController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_IMGUIEventInterests
// Il2CppName: get_IMGUIEventInterests
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::EventInterests (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_IMGUIEventInterests)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_IMGUIEventInterests", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::set_IMGUIEventInterests
// Il2CppName: set_IMGUIEventInterests
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)(::UnityEngine::EventInterests)>(&UnityEngine::UIElements::Panel::set_IMGUIEventInterests)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "EventInterests")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "set_IMGUIEventInterests", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::ValidateFocus
// Il2CppName: ValidateFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::ValidateFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "ValidateFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_IMGUIContainersCount
// Il2CppName: get_IMGUIContainersCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_IMGUIContainersCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_IMGUIContainersCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::set_IMGUIContainersCount
// Il2CppName: set_IMGUIContainersCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)(int)>(&UnityEngine::UIElements::Panel::set_IMGUIContainersCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "set_IMGUIContainersCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_rootIMGUIContainer
// Il2CppName: get_rootIMGUIContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IMGUIContainer* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_rootIMGUIContainer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_rootIMGUIContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_hierarchyVersion
// Il2CppName: get_hierarchyVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_hierarchyVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_hierarchyVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_standardShader
// Il2CppName: get_standardShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_standardShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_standardShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_atlas
// Il2CppName: get_atlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::AtlasBase* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_atlas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_atlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::set_atlas
// Il2CppName: set_atlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)(::UnityEngine::UIElements::AtlasBase*)>(&UnityEngine::UIElements::Panel::set_atlas)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "AtlasBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "set_atlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)(bool)>(&UnityEngine::UIElements::Panel::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::PickAll
// Il2CppName: PickAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::Panel::*)(::UnityEngine::Vector2, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>*)>(&UnityEngine::UIElements::Panel::PickAll)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* picked = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "PickAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, picked});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::Pick
// Il2CppName: Pick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::Panel::*)(::UnityEngine::Vector2)>(&UnityEngine::UIElements::Panel::Pick)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "Pick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::ValidateLayout
// Il2CppName: ValidateLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::ValidateLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "ValidateLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::UpdateAnimations
// Il2CppName: UpdateAnimations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::UpdateAnimations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "UpdateAnimations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::UpdateBindings
// Il2CppName: UpdateBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::UpdateBindings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "UpdateBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::ApplyStyles
// Il2CppName: ApplyStyles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::ApplyStyles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "ApplyStyles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::Repaint
// Il2CppName: Repaint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)(::UnityEngine::Event*)>(&UnityEngine::UIElements::Panel::Repaint)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine", "Event")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "Repaint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::OnVersionChanged
// Il2CppName: OnVersionChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::VersionChangeType)>(&UnityEngine::UIElements::Panel::OnVersionChanged)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* versionChangeType = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VersionChangeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "OnVersionChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, versionChangeType});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::GetUpdater
// Il2CppName: GetUpdater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IVisualTreeUpdater* (UnityEngine::UIElements::Panel::*)(::UnityEngine::UIElements::VisualTreeUpdatePhase)>(&UnityEngine::UIElements::Panel::GetUpdater)> {
  static const MethodInfo* get() {
    static auto* phase = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualTreeUpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "GetUpdater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{phase});
  }
};
