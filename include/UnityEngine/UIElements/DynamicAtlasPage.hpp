// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.UIElements.TextureId
#include "UnityEngine/UIElements/TextureId.hpp"
// Including type: UnityEngine.RenderTextureFormat
#include "UnityEngine/RenderTextureFormat.hpp"
// Including type: UnityEngine.FilterMode
#include "UnityEngine/FilterMode.hpp"
// Including type: UnityEngine.Vector2Int
#include "UnityEngine/Vector2Int.hpp"
// Including type: UnityEngine.UIElements.UIR.Allocator2D
#include "UnityEngine/UIElements/UIR/Allocator2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: RectInt
  struct RectInt;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: TextureBlitter
  class TextureBlitter;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: DynamicAtlasPage
  class DynamicAtlasPage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::DynamicAtlasPage);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::DynamicAtlasPage*, "UnityEngine.UIElements", "DynamicAtlasPage");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x59
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.DynamicAtlasPage
  // [TokenAttribute] Offset: FFFFFFFF
  class DynamicAtlasPage : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private UnityEngine.UIElements.TextureId <textureId>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::UnityEngine::UIElements::TextureId textureId;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::TextureId) == 0x4);
    // Padding between fields: textureId and: atlas
    char __padding0[0x4] = {};
    // private UnityEngine.RenderTexture <atlas>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::RenderTexture* atlas;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private readonly UnityEngine.RenderTextureFormat <format>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::RenderTextureFormat format;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTextureFormat) == 0x4);
    // private readonly UnityEngine.FilterMode <filterMode>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::FilterMode filterMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::FilterMode) == 0x4);
    // private readonly UnityEngine.Vector2Int <minSize>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Vector2Int minSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2Int) == 0x8);
    // private readonly UnityEngine.Vector2Int <maxSize>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Vector2Int maxSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2Int) == 0x8);
    // private readonly System.Int32 m_1Padding
    // Size: 0x4
    // Offset: 0x38
    int m_1Padding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 m_2Padding
    // Size: 0x4
    // Offset: 0x3C
    int m_2Padding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.UIElements.UIR.Allocator2D m_Allocator
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::UIElements::UIR::Allocator2D* m_Allocator;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::Allocator2D*) == 0x8);
    // private UnityEngine.UIElements.UIR.TextureBlitter m_Blitter
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::UIElements::UIR::TextureBlitter* m_Blitter;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::TextureBlitter*) == 0x8);
    // private UnityEngine.Vector2Int m_CurrentSize
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Vector2Int m_CurrentSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2Int) == 0x8);
    // private System.Boolean <disposed>k__BackingField
    // Size: 0x1
    // Offset: 0x58
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private System.Int32 s_TextureCounter
    static int _get_s_TextureCounter();
    // Set static field: static private System.Int32 s_TextureCounter
    static void _set_s_TextureCounter(int value);
    // Get instance field reference: private UnityEngine.UIElements.TextureId <textureId>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::TextureId& dyn_$textureId$k__BackingField();
    // Get instance field reference: private UnityEngine.RenderTexture <atlas>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_$atlas$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.RenderTextureFormat <format>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTextureFormat& dyn_$format$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.FilterMode <filterMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::FilterMode& dyn_$filterMode$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Vector2Int <minSize>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2Int& dyn_$minSize$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Vector2Int <maxSize>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2Int& dyn_$maxSize$k__BackingField();
    // Get instance field reference: private readonly System.Int32 m_1Padding
    [[deprecated("Use field access instead!")]] int& dyn_m_1Padding();
    // Get instance field reference: private readonly System.Int32 m_2Padding
    [[deprecated("Use field access instead!")]] int& dyn_m_2Padding();
    // Get instance field reference: private UnityEngine.UIElements.UIR.Allocator2D m_Allocator
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::Allocator2D*& dyn_m_Allocator();
    // Get instance field reference: private UnityEngine.UIElements.UIR.TextureBlitter m_Blitter
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::TextureBlitter*& dyn_m_Blitter();
    // Get instance field reference: private UnityEngine.Vector2Int m_CurrentSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2Int& dyn_m_CurrentSize();
    // Get instance field reference: private System.Boolean <disposed>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$disposed$k__BackingField();
    // public UnityEngine.UIElements.TextureId get_textureId()
    // Offset: 0x566BC20
    ::UnityEngine::UIElements::TextureId get_textureId();
    // private System.Void set_textureId(UnityEngine.UIElements.TextureId value)
    // Offset: 0x566BC28
    void set_textureId(::UnityEngine::UIElements::TextureId value);
    // public UnityEngine.RenderTexture get_atlas()
    // Offset: 0x566BC30
    ::UnityEngine::RenderTexture* get_atlas();
    // private System.Void set_atlas(UnityEngine.RenderTexture value)
    // Offset: 0x566BC38
    void set_atlas(::UnityEngine::RenderTexture* value);
    // public UnityEngine.RenderTextureFormat get_format()
    // Offset: 0x566BC40
    ::UnityEngine::RenderTextureFormat get_format();
    // public UnityEngine.FilterMode get_filterMode()
    // Offset: 0x566BC48
    ::UnityEngine::FilterMode get_filterMode();
    // public System.Void .ctor(UnityEngine.RenderTextureFormat format, UnityEngine.FilterMode filterMode, UnityEngine.Vector2Int minSize, UnityEngine.Vector2Int maxSize)
    // Offset: 0x566BC50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DynamicAtlasPage* New_ctor(::UnityEngine::RenderTextureFormat format, ::UnityEngine::FilterMode filterMode, ::UnityEngine::Vector2Int minSize, ::UnityEngine::Vector2Int maxSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::DynamicAtlasPage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DynamicAtlasPage*, creationType>(format, filterMode, minSize, maxSize)));
    }
    // protected System.Boolean get_disposed()
    // Offset: 0x566BDB0
    bool get_disposed();
    // private System.Void set_disposed(System.Boolean value)
    // Offset: 0x566BDB8
    void set_disposed(bool value);
    // public System.Void Dispose()
    // Offset: 0x566BDC4
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x566BE30
    void Dispose(bool disposing);
    // public System.Boolean TryAdd(UnityEngine.Texture2D image, out UnityEngine.UIElements.UIR.Allocator2D/Alloc2D alloc, out UnityEngine.RectInt rect)
    // Offset: 0x566C038
    bool TryAdd(::UnityEngine::Texture2D* image, ByRef<::UnityEngine::UIElements::UIR::Allocator2D::Alloc2D> alloc, ByRef<::UnityEngine::RectInt> rect);
    // public System.Void Update(UnityEngine.Texture2D image, UnityEngine.RectInt rect)
    // Offset: 0x566C2F4
    void Update(::UnityEngine::Texture2D* image, ::UnityEngine::RectInt rect);
    // public System.Void Remove(UnityEngine.UIElements.UIR.Allocator2D/Alloc2D alloc)
    // Offset: 0x566C43C
    void Remove(::UnityEngine::UIElements::UIR::Allocator2D::Alloc2D alloc);
    // public System.Void Commit()
    // Offset: 0x566C51C
    void Commit();
    // private System.Void UpdateAtlasTexture()
    // Offset: 0x566C560
    void UpdateAtlasTexture();
    // private UnityEngine.RenderTexture CreateAtlasTexture()
    // Offset: 0x566C930
    ::UnityEngine::RenderTexture* CreateAtlasTexture();
  }; // UnityEngine.UIElements.DynamicAtlasPage
  #pragma pack(pop)
  static check_size<sizeof(DynamicAtlasPage), 88 + sizeof(bool)> __UnityEngine_UIElements_DynamicAtlasPageSizeCheck;
  static_assert(sizeof(DynamicAtlasPage) == 0x59);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::get_textureId
// Il2CppName: get_textureId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::TextureId (UnityEngine::UIElements::DynamicAtlasPage::*)()>(&UnityEngine::UIElements::DynamicAtlasPage::get_textureId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "get_textureId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::set_textureId
// Il2CppName: set_textureId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DynamicAtlasPage::*)(::UnityEngine::UIElements::TextureId)>(&UnityEngine::UIElements::DynamicAtlasPage::set_textureId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TextureId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "set_textureId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::get_atlas
// Il2CppName: get_atlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTexture* (UnityEngine::UIElements::DynamicAtlasPage::*)()>(&UnityEngine::UIElements::DynamicAtlasPage::get_atlas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "get_atlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::set_atlas
// Il2CppName: set_atlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DynamicAtlasPage::*)(::UnityEngine::RenderTexture*)>(&UnityEngine::UIElements::DynamicAtlasPage::set_atlas)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "set_atlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::get_format
// Il2CppName: get_format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTextureFormat (UnityEngine::UIElements::DynamicAtlasPage::*)()>(&UnityEngine::UIElements::DynamicAtlasPage::get_format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "get_format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::get_filterMode
// Il2CppName: get_filterMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::FilterMode (UnityEngine::UIElements::DynamicAtlasPage::*)()>(&UnityEngine::UIElements::DynamicAtlasPage::get_filterMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "get_filterMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::get_disposed
// Il2CppName: get_disposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::DynamicAtlasPage::*)()>(&UnityEngine::UIElements::DynamicAtlasPage::get_disposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "get_disposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::set_disposed
// Il2CppName: set_disposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DynamicAtlasPage::*)(bool)>(&UnityEngine::UIElements::DynamicAtlasPage::set_disposed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "set_disposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DynamicAtlasPage::*)()>(&UnityEngine::UIElements::DynamicAtlasPage::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DynamicAtlasPage::*)(bool)>(&UnityEngine::UIElements::DynamicAtlasPage::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::TryAdd
// Il2CppName: TryAdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::DynamicAtlasPage::*)(::UnityEngine::Texture2D*, ByRef<::UnityEngine::UIElements::UIR::Allocator2D::Alloc2D>, ByRef<::UnityEngine::RectInt>)>(&UnityEngine::UIElements::DynamicAtlasPage::TryAdd)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "Allocator2D/Alloc2D")->this_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectInt")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "TryAdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image, alloc, rect});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DynamicAtlasPage::*)(::UnityEngine::Texture2D*, ::UnityEngine::RectInt)>(&UnityEngine::UIElements::DynamicAtlasPage::Update)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectInt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image, rect});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DynamicAtlasPage::*)(::UnityEngine::UIElements::UIR::Allocator2D::Alloc2D)>(&UnityEngine::UIElements::DynamicAtlasPage::Remove)> {
  static const MethodInfo* get() {
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "Allocator2D/Alloc2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::Commit
// Il2CppName: Commit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DynamicAtlasPage::*)()>(&UnityEngine::UIElements::DynamicAtlasPage::Commit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "Commit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::UpdateAtlasTexture
// Il2CppName: UpdateAtlasTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DynamicAtlasPage::*)()>(&UnityEngine::UIElements::DynamicAtlasPage::UpdateAtlasTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "UpdateAtlasTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DynamicAtlasPage::CreateAtlasTexture
// Il2CppName: CreateAtlasTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTexture* (UnityEngine::UIElements::DynamicAtlasPage::*)()>(&UnityEngine::UIElements::DynamicAtlasPage::CreateAtlasTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DynamicAtlasPage*), "CreateAtlasTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
