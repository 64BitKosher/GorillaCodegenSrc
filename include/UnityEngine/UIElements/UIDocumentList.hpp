// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: UIDocument
  class UIDocument;
  // Forward declaring type: VisualElement
  class VisualElement;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: UIDocumentList
  class UIDocumentList;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UIDocumentList);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UIDocumentList*, "UnityEngine.UIElements", "UIDocumentList");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UIDocumentList
  // [TokenAttribute] Offset: FFFFFFFF
  class UIDocumentList : public ::Il2CppObject {
    public:
    public:
    // System.Collections.Generic.List`1<UnityEngine.UIElements.UIDocument> m_AttachedUIDocuments
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIDocument*>* m_AttachedUIDocuments;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIDocument*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIDocument*>*
    constexpr operator ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIDocument*>*() const noexcept {
      return m_AttachedUIDocuments;
    }
    // Get instance field reference: System.Collections.Generic.List`1<UnityEngine.UIElements.UIDocument> m_AttachedUIDocuments
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIDocument*>*& dyn_m_AttachedUIDocuments();
    // System.Void RemoveFromListAndFromVisualTree(UnityEngine.UIElements.UIDocument uiDocument)
    // Offset: 0x565E130
    void RemoveFromListAndFromVisualTree(::UnityEngine::UIElements::UIDocument* uiDocument);
    // System.Void AddToListAndToVisualTree(UnityEngine.UIElements.UIDocument uiDocument, UnityEngine.UIElements.VisualElement visualTree, System.Int32 firstInsertIndex)
    // Offset: 0x565E1B0
    void AddToListAndToVisualTree(::UnityEngine::UIElements::UIDocument* uiDocument, ::UnityEngine::UIElements::VisualElement* visualTree, int firstInsertIndex);
    // public System.Void .ctor()
    // Offset: 0x565E4F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIDocumentList* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UIDocumentList::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIDocumentList*, creationType>()));
    }
  }; // UnityEngine.UIElements.UIDocumentList
  #pragma pack(pop)
  static check_size<sizeof(UIDocumentList), 16 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::UIDocument*>*)> __UnityEngine_UIElements_UIDocumentListSizeCheck;
  static_assert(sizeof(UIDocumentList) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UIDocumentList::RemoveFromListAndFromVisualTree
// Il2CppName: RemoveFromListAndFromVisualTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIDocumentList::*)(::UnityEngine::UIElements::UIDocument*)>(&UnityEngine::UIElements::UIDocumentList::RemoveFromListAndFromVisualTree)> {
  static const MethodInfo* get() {
    static auto* uiDocument = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "UIDocument")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIDocumentList*), "RemoveFromListAndFromVisualTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uiDocument});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIDocumentList::AddToListAndToVisualTree
// Il2CppName: AddToListAndToVisualTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UIDocumentList::*)(::UnityEngine::UIElements::UIDocument*, ::UnityEngine::UIElements::VisualElement*, int)>(&UnityEngine::UIElements::UIDocumentList::AddToListAndToVisualTree)> {
  static const MethodInfo* get() {
    static auto* uiDocument = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "UIDocument")->byval_arg;
    static auto* visualTree = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* firstInsertIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UIDocumentList*), "AddToListAndToVisualTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uiDocument, visualTree, firstInsertIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UIDocumentList::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
