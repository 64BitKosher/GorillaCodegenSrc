// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.IEventDispatchingStrategy
#include "UnityEngine/UIElements/IEventDispatchingStrategy.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: EventBase
  class EventBase;
  // Forward declaring type: IPanel
  class IPanel;
  // Forward declaring type: BaseVisualElementPanel
  class BaseVisualElementPanel;
  // Forward declaring type: VisualElement
  class VisualElement;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: MouseEventDispatchingStrategy
  class MouseEventDispatchingStrategy;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::MouseEventDispatchingStrategy);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::MouseEventDispatchingStrategy*, "UnityEngine.UIElements", "MouseEventDispatchingStrategy");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.MouseEventDispatchingStrategy
  // [TokenAttribute] Offset: FFFFFFFF
  class MouseEventDispatchingStrategy : public ::Il2CppObject/*, public ::UnityEngine::UIElements::IEventDispatchingStrategy*/ {
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IEventDispatchingStrategy
    operator ::UnityEngine::UIElements::IEventDispatchingStrategy() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IEventDispatchingStrategy*>(this);
    }
    // public System.Boolean CanDispatchEvent(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x564EB5C
    bool CanDispatchEvent(::UnityEngine::UIElements::EventBase* evt);
    // public System.Void DispatchEvent(UnityEngine.UIElements.EventBase evt, UnityEngine.UIElements.IPanel iPanel)
    // Offset: 0x564EBB0
    void DispatchEvent(::UnityEngine::UIElements::EventBase* evt, ::UnityEngine::UIElements::IPanel* iPanel);
    // static private System.Boolean SendEventToTarget(UnityEngine.UIElements.EventBase evt, UnityEngine.UIElements.BaseVisualElementPanel panel)
    // Offset: 0x564ED44
    static bool SendEventToTarget(::UnityEngine::UIElements::EventBase* evt, ::UnityEngine::UIElements::BaseVisualElementPanel* panel);
    // static private System.Boolean SendEventToRegularTarget(UnityEngine.UIElements.EventBase evt, UnityEngine.UIElements.BaseVisualElementPanel panel)
    // Offset: 0x564ED80
    static bool SendEventToRegularTarget(::UnityEngine::UIElements::EventBase* evt, ::UnityEngine::UIElements::BaseVisualElementPanel* panel);
    // static private System.Boolean SendEventToIMGUIContainer(UnityEngine.UIElements.EventBase evt, UnityEngine.UIElements.BaseVisualElementPanel panel)
    // Offset: 0x564EE34
    static bool SendEventToIMGUIContainer(::UnityEngine::UIElements::EventBase* evt, ::UnityEngine::UIElements::BaseVisualElementPanel* panel);
    // static private System.Void SetBestTargetForEvent(UnityEngine.UIElements.EventBase evt, UnityEngine.UIElements.BaseVisualElementPanel panel)
    // Offset: 0x564ECB8
    static void SetBestTargetForEvent(::UnityEngine::UIElements::EventBase* evt, ::UnityEngine::UIElements::BaseVisualElementPanel* panel);
    // static private System.Void UpdateElementUnderMouse(UnityEngine.UIElements.EventBase evt, UnityEngine.UIElements.BaseVisualElementPanel panel, out UnityEngine.UIElements.VisualElement elementUnderMouse)
    // Offset: 0x564F04C
    static void UpdateElementUnderMouse(::UnityEngine::UIElements::EventBase* evt, ::UnityEngine::UIElements::BaseVisualElementPanel* panel, ByRef<::UnityEngine::UIElements::VisualElement*> elementUnderMouse);
    // static private System.Boolean IsDone(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x564F004
    static bool IsDone(::UnityEngine::UIElements::EventBase* evt);
    // public System.Void .ctor()
    // Offset: 0x5646728
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MouseEventDispatchingStrategy* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventDispatchingStrategy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MouseEventDispatchingStrategy*, creationType>()));
    }
  }; // UnityEngine.UIElements.MouseEventDispatchingStrategy
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::MouseEventDispatchingStrategy::CanDispatchEvent
// Il2CppName: CanDispatchEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::MouseEventDispatchingStrategy::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::MouseEventDispatchingStrategy::CanDispatchEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MouseEventDispatchingStrategy*), "CanDispatchEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MouseEventDispatchingStrategy::DispatchEvent
// Il2CppName: DispatchEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MouseEventDispatchingStrategy::*)(::UnityEngine::UIElements::EventBase*, ::UnityEngine::UIElements::IPanel*)>(&UnityEngine::UIElements::MouseEventDispatchingStrategy::DispatchEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    static auto* iPanel = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "IPanel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MouseEventDispatchingStrategy*), "DispatchEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt, iPanel});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MouseEventDispatchingStrategy::SendEventToTarget
// Il2CppName: SendEventToTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::UIElements::EventBase*, ::UnityEngine::UIElements::BaseVisualElementPanel*)>(&UnityEngine::UIElements::MouseEventDispatchingStrategy::SendEventToTarget)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    static auto* panel = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "BaseVisualElementPanel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MouseEventDispatchingStrategy*), "SendEventToTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt, panel});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MouseEventDispatchingStrategy::SendEventToRegularTarget
// Il2CppName: SendEventToRegularTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::UIElements::EventBase*, ::UnityEngine::UIElements::BaseVisualElementPanel*)>(&UnityEngine::UIElements::MouseEventDispatchingStrategy::SendEventToRegularTarget)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    static auto* panel = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "BaseVisualElementPanel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MouseEventDispatchingStrategy*), "SendEventToRegularTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt, panel});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MouseEventDispatchingStrategy::SendEventToIMGUIContainer
// Il2CppName: SendEventToIMGUIContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::UIElements::EventBase*, ::UnityEngine::UIElements::BaseVisualElementPanel*)>(&UnityEngine::UIElements::MouseEventDispatchingStrategy::SendEventToIMGUIContainer)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    static auto* panel = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "BaseVisualElementPanel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MouseEventDispatchingStrategy*), "SendEventToIMGUIContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt, panel});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MouseEventDispatchingStrategy::SetBestTargetForEvent
// Il2CppName: SetBestTargetForEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UIElements::EventBase*, ::UnityEngine::UIElements::BaseVisualElementPanel*)>(&UnityEngine::UIElements::MouseEventDispatchingStrategy::SetBestTargetForEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    static auto* panel = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "BaseVisualElementPanel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MouseEventDispatchingStrategy*), "SetBestTargetForEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt, panel});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MouseEventDispatchingStrategy::UpdateElementUnderMouse
// Il2CppName: UpdateElementUnderMouse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UIElements::EventBase*, ::UnityEngine::UIElements::BaseVisualElementPanel*, ByRef<::UnityEngine::UIElements::VisualElement*>)>(&UnityEngine::UIElements::MouseEventDispatchingStrategy::UpdateElementUnderMouse)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    static auto* panel = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "BaseVisualElementPanel")->byval_arg;
    static auto* elementUnderMouse = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MouseEventDispatchingStrategy*), "UpdateElementUnderMouse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt, panel, elementUnderMouse});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MouseEventDispatchingStrategy::IsDone
// Il2CppName: IsDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::MouseEventDispatchingStrategy::IsDone)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MouseEventDispatchingStrategy*), "IsDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MouseEventDispatchingStrategy::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
