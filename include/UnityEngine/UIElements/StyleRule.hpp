// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: StyleProperty
  class StyleProperty;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: StyleRule
  class StyleRule;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::StyleRule);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::StyleRule*, "UnityEngine.UIElements", "StyleRule");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.StyleRule
  // [TokenAttribute] Offset: FFFFFFFF
  class StyleRule : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.UIElements.StyleProperty[] m_Properties
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::UIElements::StyleProperty*> m_Properties;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UIElements::StyleProperty*>) == 0x8);
    // System.Int32 line
    // Size: 0x4
    // Offset: 0x18
    int line;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 customPropertiesCount
    // Size: 0x4
    // Offset: 0x1C
    int customPropertiesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.UIElements.StyleProperty[] m_Properties
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UIElements::StyleProperty*>& dyn_m_Properties();
    // Get instance field reference: System.Int32 line
    [[deprecated("Use field access instead!")]] int& dyn_line();
    // Get instance field reference: System.Int32 customPropertiesCount
    [[deprecated("Use field access instead!")]] int& dyn_customPropertiesCount();
    // public UnityEngine.UIElements.StyleProperty[] get_properties()
    // Offset: 0x56B0C00
    ::ArrayW<::UnityEngine::UIElements::StyleProperty*> get_properties();
    // public System.Void .ctor()
    // Offset: 0x56B0C08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StyleRule* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleRule::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StyleRule*, creationType>()));
    }
  }; // UnityEngine.UIElements.StyleRule
  #pragma pack(pop)
  static check_size<sizeof(StyleRule), 28 + sizeof(int)> __UnityEngine_UIElements_StyleRuleSizeCheck;
  static_assert(sizeof(StyleRule) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleRule::get_properties
// Il2CppName: get_properties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::UIElements::StyleProperty*> (UnityEngine::UIElements::StyleRule::*)()>(&UnityEngine::UIElements::StyleRule::get_properties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StyleRule*), "get_properties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleRule::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
