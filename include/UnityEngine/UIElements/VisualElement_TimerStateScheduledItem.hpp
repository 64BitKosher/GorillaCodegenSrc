// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.VisualElement
#include "UnityEngine/UIElements/VisualElement.hpp"
// Including type: UnityEngine.UIElements.VisualElement/VisualElementScheduledItem`1
#include "UnityEngine/UIElements/VisualElement_VisualElementScheduledItem_1.hpp"
// Including type: UnityEngine.UIElements.TimerState
#include "UnityEngine/UIElements/TimerState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::VisualElement::TimerStateScheduledItem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualElement::TimerStateScheduledItem*, "UnityEngine.UIElements", "VisualElement/TimerStateScheduledItem");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.VisualElement/TimerStateScheduledItem
  // [TokenAttribute] Offset: FFFFFFFF
  class VisualElement::TimerStateScheduledItem : public ::UnityEngine::UIElements::VisualElement::VisualElementScheduledItem_1<::System::Action_1<::UnityEngine::UIElements::TimerState>*> {
    public:
    // public System.Void .ctor(UnityEngine.UIElements.VisualElement handler, System.Action`1<UnityEngine.UIElements.TimerState> updateEvent)
    // Offset: 0x56A4378
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisualElement::TimerStateScheduledItem* New_ctor(::UnityEngine::UIElements::VisualElement* handler, ::System::Action_1<::UnityEngine::UIElements::TimerState>* updateEvent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VisualElement::TimerStateScheduledItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisualElement::TimerStateScheduledItem*, creationType>(handler, updateEvent)));
    }
    // public override System.Void PerformTimerUpdate(UnityEngine.UIElements.TimerState state)
    // Offset: 0x56A43D8
    // Implemented from: UnityEngine.UIElements.ScheduledItem
    // Base method: System.Void ScheduledItem::PerformTimerUpdate(UnityEngine.UIElements.TimerState state)
    void PerformTimerUpdate(::UnityEngine::UIElements::TimerState state);
  }; // UnityEngine.UIElements.VisualElement/TimerStateScheduledItem
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::TimerStateScheduledItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElement::TimerStateScheduledItem::PerformTimerUpdate
// Il2CppName: PerformTimerUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElement::TimerStateScheduledItem::*)(::UnityEngine::UIElements::TimerState)>(&UnityEngine::UIElements::VisualElement::TimerStateScheduledItem::PerformTimerUpdate)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TimerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElement::TimerStateScheduledItem*), "PerformTimerUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
