// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.VisualElementAsset
#include "UnityEngine/UIElements/VisualElementAsset.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TemplateAsset
  class TemplateAsset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::TemplateAsset);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::TemplateAsset*, "UnityEngine.UIElements", "TemplateAsset");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.TemplateAsset
  // [TokenAttribute] Offset: FFFFFFFF
  class TemplateAsset : public ::UnityEngine::UIElements::VisualElementAsset {
    public:
    // Nested type: ::UnityEngine::UIElements::TemplateAsset::AttributeOverride
    struct AttributeOverride;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.TemplateAsset/AttributeOverride
    // [TokenAttribute] Offset: FFFFFFFF
    struct AttributeOverride/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String m_ElementName
      // Size: 0x8
      // Offset: 0x0
      ::StringW m_ElementName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.String m_AttributeName
      // Size: 0x8
      // Offset: 0x8
      ::StringW m_AttributeName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.String m_Value
      // Size: 0x8
      // Offset: 0x10
      ::StringW m_Value;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      public:
      // Creating value type constructor for type: AttributeOverride
      constexpr AttributeOverride(::StringW m_ElementName_ = {}, ::StringW m_AttributeName_ = {}, ::StringW m_Value_ = {}) noexcept : m_ElementName{m_ElementName_}, m_AttributeName{m_AttributeName_}, m_Value{m_Value_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String m_ElementName
      [[deprecated("Use field access instead!")]] ::StringW& dyn_m_ElementName();
      // Get instance field reference: public System.String m_AttributeName
      [[deprecated("Use field access instead!")]] ::StringW& dyn_m_AttributeName();
      // Get instance field reference: public System.String m_Value
      [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Value();
    }; // UnityEngine.UIElements.TemplateAsset/AttributeOverride
    #pragma pack(pop)
    static check_size<sizeof(TemplateAsset::AttributeOverride), 16 + sizeof(::StringW)> __UnityEngine_UIElements_TemplateAsset_AttributeOverrideSizeCheck;
    static_assert(sizeof(TemplateAsset::AttributeOverride) == 0x18);
    public:
    // private System.String m_TemplateAlias
    // Size: 0x8
    // Offset: 0x68
    ::StringW m_TemplateAlias;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.TemplateAsset/AttributeOverride> m_AttributeOverrides
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TemplateAsset::AttributeOverride>* m_AttributeOverrides;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::TemplateAsset::AttributeOverride>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.VisualTreeAsset/SlotUsageEntry> m_SlotUsages
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::SlotUsageEntry>* m_SlotUsages;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::SlotUsageEntry>*) == 0x8);
    public:
    // Get instance field reference: private System.String m_TemplateAlias
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_TemplateAlias();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.TemplateAsset/AttributeOverride> m_AttributeOverrides
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TemplateAsset::AttributeOverride>*& dyn_m_AttributeOverrides();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.VisualTreeAsset/SlotUsageEntry> m_SlotUsages
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::SlotUsageEntry>*& dyn_m_SlotUsages();
    // public System.Collections.Generic.List`1<UnityEngine.UIElements.TemplateAsset/AttributeOverride> get_attributeOverrides()
    // Offset: 0x56C4D9C
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TemplateAsset::AttributeOverride>* get_attributeOverrides();
    // System.Collections.Generic.List`1<UnityEngine.UIElements.VisualTreeAsset/SlotUsageEntry> get_slotUsages()
    // Offset: 0x56C4E20
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::SlotUsageEntry>* get_slotUsages();
  }; // UnityEngine.UIElements.TemplateAsset
  #pragma pack(pop)
  static check_size<sizeof(TemplateAsset), 120 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::SlotUsageEntry>*)> __UnityEngine_UIElements_TemplateAssetSizeCheck;
  static_assert(sizeof(TemplateAsset) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::TemplateAsset::AttributeOverride, "UnityEngine.UIElements", "TemplateAsset/AttributeOverride");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::TemplateAsset::get_attributeOverrides
// Il2CppName: get_attributeOverrides
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::UIElements::TemplateAsset::AttributeOverride>* (UnityEngine::UIElements::TemplateAsset::*)()>(&UnityEngine::UIElements::TemplateAsset::get_attributeOverrides)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TemplateAsset*), "get_attributeOverrides", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TemplateAsset::get_slotUsages
// Il2CppName: get_slotUsages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::SlotUsageEntry>* (UnityEngine::UIElements::TemplateAsset::*)()>(&UnityEngine::UIElements::TemplateAsset::get_slotUsages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TemplateAsset*), "get_slotUsages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
