// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater
#include "UnityEngine/UIElements/BaseVisualTreeHierarchyTrackerUpdater.hpp"
// Including type: UnityEngine.PropertyName
#include "UnityEngine/PropertyName.hpp"
// Including type: Unity.Profiling.ProfilerMarker
#include "Unity/Profiling/ProfilerMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: IBinding
  class IBinding;
  // Forward declaring type: VersionChangeType
  struct VersionChangeType;
  // Forward declaring type: HierarchyChangeType
  struct HierarchyChangeType;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualTreeBindingsUpdater
  class VisualTreeBindingsUpdater;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::VisualTreeBindingsUpdater);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualTreeBindingsUpdater*, "UnityEngine.UIElements", "VisualTreeBindingsUpdater");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.VisualTreeBindingsUpdater
  // [TokenAttribute] Offset: FFFFFFFF
  class VisualTreeBindingsUpdater : public ::UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater {
    public:
    public:
    // private readonly System.Collections.Generic.HashSet`1<UnityEngine.UIElements.VisualElement> m_ElementsWithBindings
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::VisualElement*>* m_ElementsWithBindings;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::VisualElement*>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<UnityEngine.UIElements.VisualElement> m_ElementsToAdd
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::VisualElement*>* m_ElementsToAdd;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::VisualElement*>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<UnityEngine.UIElements.VisualElement> m_ElementsToRemove
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::VisualElement*>* m_ElementsToRemove;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::VisualElement*>*) == 0x8);
    // private System.Int64 m_LastUpdateTime
    // Size: 0x8
    // Offset: 0x50
    int64_t m_LastUpdateTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Collections.Generic.HashSet`1<UnityEngine.UIElements.VisualElement> m_ElementsToBind
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::VisualElement*>* m_ElementsToBind;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::VisualElement*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Object,System.Object> <temporaryObjectCache>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>* temporaryObjectCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.IBinding> updatedBindings
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::IBinding*>* updatedBindings;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::IBinding*>*) == 0x8);
    public:
    // Get static field: static private readonly UnityEngine.PropertyName s_BindingRequestObjectVEPropertyName
    static ::UnityEngine::PropertyName _get_s_BindingRequestObjectVEPropertyName();
    // Set static field: static private readonly UnityEngine.PropertyName s_BindingRequestObjectVEPropertyName
    static void _set_s_BindingRequestObjectVEPropertyName(::UnityEngine::PropertyName value);
    // Get static field: static private readonly UnityEngine.PropertyName s_AdditionalBindingObjectVEPropertyName
    static ::UnityEngine::PropertyName _get_s_AdditionalBindingObjectVEPropertyName();
    // Set static field: static private readonly UnityEngine.PropertyName s_AdditionalBindingObjectVEPropertyName
    static void _set_s_AdditionalBindingObjectVEPropertyName(::UnityEngine::PropertyName value);
    // Get static field: static private readonly System.String s_Description
    static ::StringW _get_s_Description();
    // Set static field: static private readonly System.String s_Description
    static void _set_s_Description(::StringW value);
    // Get static field: static private readonly Unity.Profiling.ProfilerMarker s_ProfilerMarker
    static ::Unity::Profiling::ProfilerMarker _get_s_ProfilerMarker();
    // Set static field: static private readonly Unity.Profiling.ProfilerMarker s_ProfilerMarker
    static void _set_s_ProfilerMarker(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private readonly Unity.Profiling.ProfilerMarker s_ProfilerBindingRequestsMarker
    static ::Unity::Profiling::ProfilerMarker _get_s_ProfilerBindingRequestsMarker();
    // Set static field: static private readonly Unity.Profiling.ProfilerMarker s_ProfilerBindingRequestsMarker
    static void _set_s_ProfilerBindingRequestsMarker(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker s_MarkerUpdate
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerUpdate();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_MarkerUpdate
    static void _set_s_MarkerUpdate(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private Unity.Profiling.ProfilerMarker s_MarkerPoll
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerPoll();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_MarkerPoll
    static void _set_s_MarkerPoll(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private System.Boolean <disableBindingsThrottling>k__BackingField
    static bool _get_$disableBindingsThrottling$k__BackingField();
    // Set static field: static private System.Boolean <disableBindingsThrottling>k__BackingField
    static void _set_$disableBindingsThrottling$k__BackingField(bool value);
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<UnityEngine.UIElements.VisualElement> m_ElementsWithBindings
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::VisualElement*>*& dyn_m_ElementsWithBindings();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<UnityEngine.UIElements.VisualElement> m_ElementsToAdd
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::VisualElement*>*& dyn_m_ElementsToAdd();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<UnityEngine.UIElements.VisualElement> m_ElementsToRemove
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::VisualElement*>*& dyn_m_ElementsToRemove();
    // Get instance field reference: private System.Int64 m_LastUpdateTime
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_LastUpdateTime();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<UnityEngine.UIElements.VisualElement> m_ElementsToBind
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::VisualElement*>*& dyn_m_ElementsToBind();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Object,System.Object> <temporaryObjectCache>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>*& dyn_$temporaryObjectCache$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.IBinding> updatedBindings
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::IBinding*>*& dyn_updatedBindings();
    // private UnityEngine.UIElements.IBinding GetBindingObjectFromElement(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x5593A84
    ::UnityEngine::UIElements::IBinding* GetBindingObjectFromElement(::UnityEngine::UIElements::VisualElement* ve);
    // private System.Void StartTracking(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x5593C44
    void StartTracking(::UnityEngine::UIElements::VisualElement* ve);
    // private System.Void StopTracking(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x5593CC4
    void StopTracking(::UnityEngine::UIElements::VisualElement* ve);
    // public System.Collections.Generic.Dictionary`2<System.Object,System.Object> get_temporaryObjectCache()
    // Offset: 0x5593D44
    ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>* get_temporaryObjectCache();
    // static public UnityEngine.UIElements.IBinding GetAdditionalBinding(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x5593BBC
    static ::UnityEngine::UIElements::IBinding* GetAdditionalBinding(::UnityEngine::UIElements::VisualElement* ve);
    // private System.Void StartTrackingRecursive(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x5593D4C
    void StartTrackingRecursive(::UnityEngine::UIElements::VisualElement* ve);
    // private System.Void StopTrackingRecursive(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x5593E64
    void StopTrackingRecursive(::UnityEngine::UIElements::VisualElement* ve);
    // static private System.Int64 CurrentTime()
    // Offset: 0x5594080
    static int64_t CurrentTime();
    // public System.Void PerformTrackingOperations()
    // Offset: 0x55940D0
    void PerformTrackingOperations();
    // private System.Void UpdateBindings()
    // Offset: 0x55948D0
    void UpdateBindings();
    // static private System.Void .cctor()
    // Offset: 0x5594FAC
    static void _cctor();
    // public override Unity.Profiling.ProfilerMarker get_profilerMarker()
    // Offset: 0x5593A2C
    // Implemented from: UnityEngine.UIElements.BaseVisualTreeUpdater
    // Base method: Unity.Profiling.ProfilerMarker BaseVisualTreeUpdater::get_profilerMarker()
    ::Unity::Profiling::ProfilerMarker get_profilerMarker();
    // public override System.Void OnVersionChanged(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.VersionChangeType versionChangeType)
    // Offset: 0x5593F70
    // Implemented from: UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater
    // Base method: System.Void BaseVisualTreeHierarchyTrackerUpdater::OnVersionChanged(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.VersionChangeType versionChangeType)
    void OnVersionChanged(::UnityEngine::UIElements::VisualElement* ve, ::UnityEngine::UIElements::VersionChangeType versionChangeType);
    // protected override System.Void OnHierarchyChange(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.HierarchyChangeType type)
    // Offset: 0x5594068
    // Implemented from: UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater
    // Base method: System.Void BaseVisualTreeHierarchyTrackerUpdater::OnHierarchyChange(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.HierarchyChangeType type)
    void OnHierarchyChange(::UnityEngine::UIElements::VisualElement* ve, ::UnityEngine::UIElements::HierarchyChangeType type);
    // public override System.Void Update()
    // Offset: 0x5594358
    // Implemented from: UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater
    // Base method: System.Void BaseVisualTreeHierarchyTrackerUpdater::Update()
    void Update();
    // public System.Void .ctor()
    // Offset: 0x5594E0C
    // Implemented from: UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater
    // Base method: System.Void BaseVisualTreeHierarchyTrackerUpdater::.ctor()
    // Base method: System.Void BaseVisualTreeUpdater::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisualTreeBindingsUpdater* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VisualTreeBindingsUpdater::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisualTreeBindingsUpdater*, creationType>()));
    }
  }; // UnityEngine.UIElements.VisualTreeBindingsUpdater
  #pragma pack(pop)
  static check_size<sizeof(VisualTreeBindingsUpdater), 104 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::IBinding*>*)> __UnityEngine_UIElements_VisualTreeBindingsUpdaterSizeCheck;
  static_assert(sizeof(VisualTreeBindingsUpdater) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::GetBindingObjectFromElement
// Il2CppName: GetBindingObjectFromElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IBinding* (UnityEngine::UIElements::VisualTreeBindingsUpdater::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::VisualTreeBindingsUpdater::GetBindingObjectFromElement)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeBindingsUpdater*), "GetBindingObjectFromElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::StartTracking
// Il2CppName: StartTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeBindingsUpdater::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::VisualTreeBindingsUpdater::StartTracking)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeBindingsUpdater*), "StartTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::StopTracking
// Il2CppName: StopTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeBindingsUpdater::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::VisualTreeBindingsUpdater::StopTracking)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeBindingsUpdater*), "StopTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::get_temporaryObjectCache
// Il2CppName: get_temporaryObjectCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>* (UnityEngine::UIElements::VisualTreeBindingsUpdater::*)()>(&UnityEngine::UIElements::VisualTreeBindingsUpdater::get_temporaryObjectCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeBindingsUpdater*), "get_temporaryObjectCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::GetAdditionalBinding
// Il2CppName: GetAdditionalBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IBinding* (*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::VisualTreeBindingsUpdater::GetAdditionalBinding)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeBindingsUpdater*), "GetAdditionalBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::StartTrackingRecursive
// Il2CppName: StartTrackingRecursive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeBindingsUpdater::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::VisualTreeBindingsUpdater::StartTrackingRecursive)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeBindingsUpdater*), "StartTrackingRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::StopTrackingRecursive
// Il2CppName: StopTrackingRecursive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeBindingsUpdater::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::VisualTreeBindingsUpdater::StopTrackingRecursive)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeBindingsUpdater*), "StopTrackingRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::CurrentTime
// Il2CppName: CurrentTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)()>(&UnityEngine::UIElements::VisualTreeBindingsUpdater::CurrentTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeBindingsUpdater*), "CurrentTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::PerformTrackingOperations
// Il2CppName: PerformTrackingOperations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeBindingsUpdater::*)()>(&UnityEngine::UIElements::VisualTreeBindingsUpdater::PerformTrackingOperations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeBindingsUpdater*), "PerformTrackingOperations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::UpdateBindings
// Il2CppName: UpdateBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeBindingsUpdater::*)()>(&UnityEngine::UIElements::VisualTreeBindingsUpdater::UpdateBindings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeBindingsUpdater*), "UpdateBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::VisualTreeBindingsUpdater::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeBindingsUpdater*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::get_profilerMarker
// Il2CppName: get_profilerMarker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Profiling::ProfilerMarker (UnityEngine::UIElements::VisualTreeBindingsUpdater::*)()>(&UnityEngine::UIElements::VisualTreeBindingsUpdater::get_profilerMarker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeBindingsUpdater*), "get_profilerMarker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::OnVersionChanged
// Il2CppName: OnVersionChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeBindingsUpdater::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::VersionChangeType)>(&UnityEngine::UIElements::VisualTreeBindingsUpdater::OnVersionChanged)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* versionChangeType = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VersionChangeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeBindingsUpdater*), "OnVersionChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, versionChangeType});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::OnHierarchyChange
// Il2CppName: OnHierarchyChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeBindingsUpdater::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::HierarchyChangeType)>(&UnityEngine::UIElements::VisualTreeBindingsUpdater::OnHierarchyChange)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "HierarchyChangeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeBindingsUpdater*), "OnHierarchyChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, type});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeBindingsUpdater::*)()>(&UnityEngine::UIElements::VisualTreeBindingsUpdater::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeBindingsUpdater*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeBindingsUpdater::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
