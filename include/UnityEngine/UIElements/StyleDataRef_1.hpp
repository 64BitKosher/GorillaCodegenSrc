// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Skipping declaration: RefCounted because it is already included!
  // Forward declaring type: IStyleDataGroup`1<T>
  template<typename T>
  class IStyleDataGroup_1;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: StyleDataRef`1<T>
  template<typename T>
  struct StyleDataRef_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::UnityEngine::UIElements::StyleDataRef_1, "UnityEngine.UIElements", "StyleDataRef`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.StyleDataRef`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  struct StyleDataRef_1/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::UIElements::StyleDataRef_1<T>>*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::StyleDataRef_1::RefCounted<T>
    class RefCounted;
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.UIElements.StyleDataRef`1/RefCounted
    // [TokenAttribute] Offset: FFFFFFFF
    class RefCounted : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = StyleDataRef_1<T>;
      static constexpr std::string_view NESTED_NAME = "RefCounted";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private System.Int32 m_RefCount
      // Size: 0x4
      // Offset: 0x0
      int m_RefCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private readonly System.UInt32 m_Id
      // Size: 0x4
      // Offset: 0x0
      uint m_Id;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public T value
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T value;
      public:
      // Autogenerated static field getter
      // Get static field: static private System.UInt32 m_NextId
      static uint _get_m_NextId() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::RefCounted::_get_m_NextId");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename StyleDataRef_1<T>::RefCounted*>::get(), "m_NextId"));
      }
      // Autogenerated static field setter
      // Set static field: static private System.UInt32 m_NextId
      static void _set_m_NextId(uint value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::RefCounted::_set_m_NextId");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename StyleDataRef_1<T>::RefCounted*>::get(), "m_NextId", value));
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 m_RefCount
      [[deprecated("Use field access instead!")]] int& dyn_m_RefCount() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::RefCounted::dyn_m_RefCount");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RefCount"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly System.UInt32 m_Id
      [[deprecated("Use field access instead!")]] uint& dyn_m_Id() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::RefCounted::dyn_m_Id");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Id"))->offset;
        return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public T value
      [[deprecated("Use field access instead!")]] T& dyn_value() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::RefCounted::dyn_value");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
        return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Int32 get_refCount()
      // Offset: 0xFFFFFFFFFFFFFFFF
      int get_refCount() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::RefCounted::get_refCount");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_refCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename StyleDataRef_1<T>::RefCounted* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::RefCounted::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename StyleDataRef_1<T>::RefCounted*, creationType>()));
      }
      // public System.Void Acquire()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Acquire() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::RefCounted::Acquire");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Acquire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Release()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Release() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::RefCounted::Release");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public UnityEngine.UIElements.StyleDataRef`1/RefCounted<T> Copy()
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::UnityEngine::UIElements::StyleDataRef_1<T>::RefCounted* Copy() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::RefCounted::Copy");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Copy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::UIElements::StyleDataRef_1<T>::RefCounted*, false>(this, ___internal__method);
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::RefCounted::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename StyleDataRef_1<T>::RefCounted*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
    }; // UnityEngine.UIElements.StyleDataRef`1/RefCounted
    // Could not write size check! Type: UnityEngine.UIElements.StyleDataRef`1/RefCounted is generic, or has no fields that are valid for size checks!
    public:
    // private UnityEngine.UIElements.StyleDataRef`1/RefCounted<T> m_Ref
    // Size: 0x8
    // Offset: 0x0
    typename ::UnityEngine::UIElements::StyleDataRef_1<T>::RefCounted* m_Ref;
    // Field size check
    static_assert(sizeof(typename ::UnityEngine::UIElements::StyleDataRef_1<T>::RefCounted*) == 0x8);
    public:
    // Creating value type constructor for type: StyleDataRef_1
    constexpr StyleDataRef_1(typename ::UnityEngine::UIElements::StyleDataRef_1<T>::RefCounted* m_Ref_ = {}) noexcept : m_Ref{m_Ref_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::StyleDataRef_1<T>>
    operator ::System::IEquatable_1<::UnityEngine::UIElements::StyleDataRef_1<T>>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::StyleDataRef_1<T>>*>(this);
    }
    // Creating conversion operator: operator typename ::UnityEngine::UIElements::StyleDataRef_1<T>::RefCounted*
    constexpr operator typename ::UnityEngine::UIElements::StyleDataRef_1<T>::RefCounted*() const noexcept {
      return m_Ref;
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.StyleDataRef`1/RefCounted<T> m_Ref
    [[deprecated("Use field access instead!")]] typename ::UnityEngine::UIElements::StyleDataRef_1<T>::RefCounted*& dyn_m_Ref() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::dyn_m_Ref");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Ref"))->offset;
      return *reinterpret_cast<typename ::UnityEngine::UIElements::StyleDataRef_1<T>::RefCounted**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public UnityEngine.UIElements.StyleDataRef`1<T> Acquire()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::StyleDataRef_1<T> Acquire() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::Acquire");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Acquire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::StyleDataRef_1<T>, false>(this, ___internal__method);
    }
    // public System.Void Release()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Release() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::Release");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void CopyFrom(UnityEngine.UIElements.StyleDataRef`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyFrom(::UnityEngine::UIElements::StyleDataRef_1<T> other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::CopyFrom");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CopyFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
    }
    // public T Read()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Read() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::Read");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public T Write()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Write() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::Write");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // static public UnityEngine.UIElements.StyleDataRef`1<T> Create()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::UnityEngine::UIElements::StyleDataRef_1<T> Create() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::Create");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<StyleDataRef_1<T>>::get(), "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::StyleDataRef_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // public System.Boolean Equals(UnityEngine.UIElements.StyleDataRef`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Equals(::UnityEngine::UIElements::StyleDataRef_1<T> other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::UIElements::StyleDataRef_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
    }
    // public System.Boolean ReferenceEquals(UnityEngine.UIElements.StyleDataRef`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ReferenceEquals(::UnityEngine::UIElements::StyleDataRef_1<T> other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::ReferenceEquals");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ReferenceEquals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::GetHashCode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
    }
  }; // UnityEngine.UIElements.StyleDataRef`1
  // Could not write size check! Type: UnityEngine.UIElements.StyleDataRef`1 is generic, or has no fields that are valid for size checks!
  // static public System.Boolean op_Equality(UnityEngine.UIElements.StyleDataRef`1<T> lhs, UnityEngine.UIElements.StyleDataRef`1<T> rhs)
  // Offset: 0xFFFFFFFFFFFFFFFF
  inline bool operator ==(const ::UnityEngine::UIElements::StyleDataRef_1<T>& lhs, const ::UnityEngine::UIElements::StyleDataRef_1<T>& rhs) {
    static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleDataRef_1::op_Equality");
    static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<StyleDataRef_1<T>>::get(), "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
    return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
  }
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
