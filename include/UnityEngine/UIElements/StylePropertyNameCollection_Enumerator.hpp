// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.StylePropertyNameCollection
#include "UnityEngine/UIElements/StylePropertyNameCollection.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: UnityEngine.UIElements.StylePropertyName
#include "UnityEngine/UIElements/StylePropertyName.hpp"
// Including type: System.Collections.Generic.List`1/Enumerator
#include "System/Collections/Generic/List_1.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::StylePropertyNameCollection::Enumerator, "UnityEngine.UIElements", "StylePropertyNameCollection/Enumerator");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.StylePropertyNameCollection/Enumerator
  // [TokenAttribute] Offset: FFFFFFFF
  struct StylePropertyNameCollection::Enumerator/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<::UnityEngine::UIElements::StylePropertyName>*/ {
    public:
    public:
    // private System.Collections.Generic.List`1/Enumerator<UnityEngine.UIElements.StylePropertyName> m_Enumerator
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    typename ::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>::Enumerator m_Enumerator;
    public:
    // Creating value type constructor for type: Enumerator
    constexpr Enumerator(typename ::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>::Enumerator m_Enumerator_ = {}) noexcept : m_Enumerator{m_Enumerator_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::UnityEngine::UIElements::StylePropertyName>
    operator ::System::Collections::Generic::IEnumerator_1<::UnityEngine::UIElements::StylePropertyName>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::UIElements::StylePropertyName>*>(this);
    }
    // Creating conversion operator: operator typename ::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>::Enumerator
    constexpr operator typename ::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>::Enumerator() const noexcept {
      return m_Enumerator;
    }
    // Get instance field reference: private System.Collections.Generic.List`1/Enumerator<UnityEngine.UIElements.StylePropertyName> m_Enumerator
    [[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>::Enumerator& dyn_m_Enumerator();
    // System.Void .ctor(System.Collections.Generic.List`1/Enumerator<UnityEngine.UIElements.StylePropertyName> enumerator)
    // Offset: 0x5657F34
    // ABORTED: conflicts with another method.  Enumerator(typename ::System::Collections::Generic::List_1<::UnityEngine::UIElements::StylePropertyName>::Enumerator enumerator);
    // public System.Boolean MoveNext()
    // Offset: 0x5658014
    bool MoveNext();
    // public UnityEngine.UIElements.StylePropertyName get_Current()
    // Offset: 0x565805C
    ::UnityEngine::UIElements::StylePropertyName get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x5658098
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Void Reset()
    // Offset: 0x5658114
    void Reset();
    // public System.Void Dispose()
    // Offset: 0x5658118
    void Dispose();
  }; // UnityEngine.UIElements.StylePropertyNameCollection/Enumerator
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::Enumerator
// Il2CppName: .ctor
// Cannot write MetadataGetter for a method that has a nested type with a declaring generic type anywhere within it!
// Talk to sc2ad if this is something you want
// Writing MetadataGetter for method: UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::*)()>(&UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StylePropertyNameCollection::Enumerator), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::StylePropertyName (UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::*)()>(&UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StylePropertyNameCollection::Enumerator), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::*)()>(&UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StylePropertyNameCollection::Enumerator), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::*)()>(&UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StylePropertyNameCollection::Enumerator), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::*)()>(&UnityEngine::UIElements::StylePropertyNameCollection::Enumerator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StylePropertyNameCollection::Enumerator), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
