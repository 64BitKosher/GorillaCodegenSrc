// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.TextInputBaseField`1
#include "UnityEngine/UIElements/TextInputBaseField_1.hpp"
// Including type: UnityEngine.UIElements.IValueField`1
#include "UnityEngine/UIElements/IValueField_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Skipping declaration: TextValueInput because it is already included!
  // Forward declaring type: BaseFieldMouseDragger
  class BaseFieldMouseDragger;
  // Forward declaring type: EventBase
  class EventBase;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TextValueField`1<TValueType>
  template<typename TValueType>
  class TextValueField_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::TextValueField_1, "UnityEngine.UIElements", "TextValueField`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.TextValueField`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [MovedFromAttribute] Offset: FFFFFFFF
  template<typename TValueType>
  class TextValueField_1 : public ::UnityEngine::UIElements::TextInputBaseField_1<TValueType>/*, public ::UnityEngine::UIElements::IValueField_1<TValueType>*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::TextValueField_1::TextValueInput<TValueType>
    class TextValueInput;
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.UIElements.TextValueField`1/TextValueInput
    // [TokenAttribute] Offset: FFFFFFFF
    class TextValueInput : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::UnityEngine::UIElements::TextInputBaseField_1<TValueType>::TextInputBase {
      public:
      using declaring_type = TextValueField_1<TValueType>*;
      static constexpr std::string_view NESTED_NAME = "TextValueInput";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private System.String <formatString>k__BackingField
      // Size: 0x8
      // Offset: 0x0
      ::StringW formatString;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      public:
      // Creating conversion operator: operator ::StringW
      constexpr operator ::StringW() const noexcept {
        return formatString;
      }
      // Autogenerated instance field getter
      // Get instance field: private System.String <formatString>k__BackingField
      [[deprecated("Use field access instead!")]] ::StringW& dyn_$formatString$k__BackingField() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::TextValueInput::dyn_$formatString$k__BackingField");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<formatString>k__BackingField"))->offset;
        return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // private UnityEngine.UIElements.TextValueField`1<TValueType> get_textValueFieldParent()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::UnityEngine::UIElements::TextValueField_1<TValueType>* get_textValueFieldParent() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::TextValueInput::get_textValueFieldParent");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textValueFieldParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::TextValueField_1<TValueType>*, false>(this, ___internal__method);
      }
      // protected System.String get_allowedCharacters()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::StringW get_allowedCharacters() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::TextValueInput::get_allowedCharacters");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::UnityEngine::UIElements::TextValueField_1<TValueType>::TextValueInput*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
      }
      // public System.String get_formatString()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::StringW get_formatString() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::TextValueInput::get_formatString");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_formatString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
      }
      // public System.Void set_formatString(System.String value)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void set_formatString(::StringW value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::TextValueInput::set_formatString");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_formatString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
      }
      // public System.Void ApplyInputDeviceDelta(UnityEngine.Vector3 delta, UnityEngine.UIElements.DeltaSpeed speed, TValueType startValue)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void ApplyInputDeviceDelta(::UnityEngine::Vector3 delta, ::UnityEngine::UIElements::DeltaSpeed speed, TValueType startValue) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::TextValueInput::ApplyInputDeviceDelta");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::UnityEngine::UIElements::TextValueField_1<TValueType>::TextValueInput*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, delta, speed, startValue);
      }
      // public System.Void StartDragging()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void StartDragging() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::TextValueInput::StartDragging");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartDragging", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void StopDragging()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void StopDragging() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::TextValueInput::StopDragging");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopDragging", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // protected System.String ValueToString(TValueType value)
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::StringW ValueToString(TValueType value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::TextValueInput::ValueToString");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::UnityEngine::UIElements::TextValueField_1<TValueType>::TextValueInput*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, value);
      }
      // protected System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: UnityEngine.UIElements.TextInputBaseField`1/TextInputBase
      // Base method: System.Void TextInputBase::.ctor()
      // Base method: System.Void VisualElement::.ctor()
      // Base method: System.Void Focusable::.ctor()
      // Base method: System.Void CallbackEventHandler::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename TextValueField_1<TValueType>::TextValueInput* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::TextValueInput::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename TextValueField_1<TValueType>::TextValueInput*, creationType>()));
      }
      // override System.Boolean AcceptCharacter(System.Char c)
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: UnityEngine.UIElements.TextInputBaseField`1/TextInputBase
      // Base method: System.Boolean TextInputBase::AcceptCharacter(System.Char c)
      bool AcceptCharacter(::Il2CppChar c) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::TextValueInput::AcceptCharacter");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::UnityEngine::UIElements::TextInputBaseField_1<TValueType>::TextInputBase*), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, c);
      }
      // protected override TValueType StringToValue(System.String str)
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: UnityEngine.UIElements.TextInputBaseField`1/TextInputBase
      // Base method: TValueType TextInputBase::StringToValue(System.String str)
      TValueType StringToValue(::StringW str) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::TextValueInput::StringToValue");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::UnityEngine::UIElements::TextInputBaseField_1<TValueType>::TextInputBase*), -1));
        return ::il2cpp_utils::RunMethodRethrow<TValueType, false>(this, ___internal__method, str);
      }
    }; // UnityEngine.UIElements.TextValueField`1/TextValueInput
    // Could not write size check! Type: UnityEngine.UIElements.TextValueField`1/TextValueInput is generic, or has no fields that are valid for size checks!
    public:
    // private UnityEngine.UIElements.BaseFieldMouseDragger m_Dragger
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::BaseFieldMouseDragger* m_Dragger;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BaseFieldMouseDragger*) == 0x8);
    // System.Boolean m_UpdateTextFromValue
    // Size: 0x1
    // Offset: 0x0
    bool m_UpdateTextFromValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ForceUpdateDisplay
    // Size: 0x1
    // Offset: 0x0
    bool m_ForceUpdateDisplay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IValueField_1<TValueType>
    operator ::UnityEngine::UIElements::IValueField_1<TValueType>() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IValueField_1<TValueType>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.BaseFieldMouseDragger m_Dragger
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BaseFieldMouseDragger*& dyn_m_Dragger() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::dyn_m_Dragger");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Dragger"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::BaseFieldMouseDragger**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: System.Boolean m_UpdateTextFromValue
    [[deprecated("Use field access instead!")]] bool& dyn_m_UpdateTextFromValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::dyn_m_UpdateTextFromValue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UpdateTextFromValue"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean m_ForceUpdateDisplay
    [[deprecated("Use field access instead!")]] bool& dyn_m_ForceUpdateDisplay() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::dyn_m_ForceUpdateDisplay");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ForceUpdateDisplay"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // private UnityEngine.UIElements.TextValueField`1/TextValueInput<TValueType> get_textValueInput()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::UnityEngine::UIElements::TextValueField_1<TValueType>::TextValueInput* get_textValueInput() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::get_textValueInput");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textValueInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::UIElements::TextValueField_1<TValueType>::TextValueInput*, false>(this, ___internal__method);
    }
    // public System.String get_formatString()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_formatString() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::get_formatString");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_formatString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // protected System.Void .ctor(System.String label, System.Int32 maxLength, UnityEngine.UIElements.TextValueField`1/TextValueInput<TValueType> textValueInput)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextValueField_1<TValueType>* New_ctor(::StringW label, int maxLength, typename ::UnityEngine::UIElements::TextValueField_1<TValueType>::TextValueInput* textValueInput) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextValueField_1<TValueType>*, creationType>(label, maxLength, textValueInput)));
    }
    // public System.Void ApplyInputDeviceDelta(UnityEngine.Vector3 delta, UnityEngine.UIElements.DeltaSpeed speed, TValueType startValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ApplyInputDeviceDelta(::UnityEngine::Vector3 delta, ::UnityEngine::UIElements::DeltaSpeed speed, TValueType startValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::ApplyInputDeviceDelta");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::TextValueField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, delta, speed, startValue);
    }
    // public System.Void StartDragging()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void StartDragging() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::StartDragging");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::TextValueField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void StopDragging()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void StopDragging() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::StopDragging");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::TextValueField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void OnIsReadOnlyChanged(System.Boolean newValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnIsReadOnlyChanged(bool newValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::OnIsReadOnlyChanged");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnIsReadOnlyChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newValue)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newValue);
    }
    // System.Boolean CanTryParse(System.String textString)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool CanTryParse(::StringW textString) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::CanTryParse");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::TextValueField_1<TValueType>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, textString);
    }
    // protected System.Void AddLabelDragger()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TDraggerType>
    void AddLabelDragger() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::AddLabelDragger");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLabelDragger", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDraggerType>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDraggerType>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method);
    }
    // private System.Void EnableLabelDragger(System.Boolean enable)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void EnableLabelDragger(bool enable) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::EnableLabelDragger");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableLabelDragger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enable)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enable);
    }
    // public override TValueType get_value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: TValueType BaseField_1::get_value()
    TValueType get_value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::get_value");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<TValueType, false>(this, ___internal__method);
    }
    // public override System.Void set_value(TValueType value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: System.Void BaseField_1::set_value(TValueType value)
    void set_value(TValueType value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::set_value");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // override System.Void UpdateValueFromText()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.TextInputBaseField`1
    // Base method: System.Void TextInputBaseField_1::UpdateValueFromText()
    void UpdateValueFromText() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::UpdateValueFromText");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::TextInputBaseField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // override System.Void UpdateTextFromValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.TextInputBaseField`1
    // Base method: System.Void TextInputBaseField_1::UpdateTextFromValue()
    void UpdateTextFromValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::UpdateTextFromValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::TextInputBaseField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public override System.Void SetValueWithoutNotify(TValueType newValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: System.Void BaseField_1::SetValueWithoutNotify(TValueType newValue)
    void SetValueWithoutNotify(TValueType newValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::SetValueWithoutNotify");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newValue);
    }
    // protected override System.Void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.VisualElement
    // Base method: System.Void VisualElement::ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt)
    void ExecuteDefaultAction(::UnityEngine::UIElements::EventBase* evt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::ExecuteDefaultAction");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::VisualElement*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt);
    }
    // override System.Void OnViewDataReady()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: System.Void BaseField_1::OnViewDataReady()
    void OnViewDataReady() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextValueField_1::OnViewDataReady");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // UnityEngine.UIElements.TextValueField`1
  // Could not write size check! Type: UnityEngine.UIElements.TextValueField`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
