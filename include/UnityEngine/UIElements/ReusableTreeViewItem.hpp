// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.ReusableCollectionItem
#include "UnityEngine/UIElements/ReusableCollectionItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Toggle
  class Toggle;
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: PointerUpEvent
  class PointerUpEvent;
  // Forward declaring type: ChangeEvent`1<T>
  template<typename T>
  class ChangeEvent_1;
  // Forward declaring type: EventCallback`1<TEventType>
  template<typename TEventType>
  class EventCallback_1;
  // Forward declaring type: GeometryChangedEvent
  class GeometryChangedEvent;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: ReusableTreeViewItem
  class ReusableTreeViewItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::ReusableTreeViewItem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::ReusableTreeViewItem*, "UnityEngine.UIElements", "ReusableTreeViewItem");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.ReusableTreeViewItem
  // [TokenAttribute] Offset: FFFFFFFF
  class ReusableTreeViewItem : public ::UnityEngine::UIElements::ReusableCollectionItem {
    public:
    public:
    // private UnityEngine.UIElements.Toggle m_Toggle
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::UIElements::Toggle* m_Toggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Toggle*) == 0x8);
    // private UnityEngine.UIElements.VisualElement m_Container
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::UIElements::VisualElement* m_Container;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.VisualElement m_IndentElement
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UIElements::VisualElement* m_IndentElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.VisualElement m_BindableContainer
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::UIElements::VisualElement* m_BindableContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.VisualElement m_Checkmark
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::UIElements::VisualElement* m_Checkmark;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private System.Action`1<UnityEngine.UIElements.PointerUpEvent> onPointerUp
    // Size: 0x8
    // Offset: 0x68
    ::System::Action_1<::UnityEngine::UIElements::PointerUpEvent*>* onPointerUp;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::UIElements::PointerUpEvent*>*) == 0x8);
    // private System.Action`1<UnityEngine.UIElements.ChangeEvent`1<System.Boolean>> onToggleValueChanged
    // Size: 0x8
    // Offset: 0x70
    ::System::Action_1<::UnityEngine::UIElements::ChangeEvent_1<bool>*>* onToggleValueChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::UIElements::ChangeEvent_1<bool>*>*) == 0x8);
    // private System.Int32 m_Depth
    // Size: 0x4
    // Offset: 0x78
    int m_Depth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_IndentWidth
    // Size: 0x4
    // Offset: 0x7C
    float m_IndentWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.UIElements.EventCallback`1<UnityEngine.UIElements.PointerUpEvent> m_PointerUpCallback
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::PointerUpEvent*>* m_PointerUpCallback;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::PointerUpEvent*>*) == 0x8);
    // private UnityEngine.UIElements.EventCallback`1<UnityEngine.UIElements.ChangeEvent`1<System.Boolean>> m_ToggleValueChangedCallback
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::ChangeEvent_1<bool>*>* m_ToggleValueChangedCallback;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::ChangeEvent_1<bool>*>*) == 0x8);
    // private UnityEngine.UIElements.EventCallback`1<UnityEngine.UIElements.GeometryChangedEvent> m_ToggleGeometryChangedCallback
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::GeometryChangedEvent*>* m_ToggleGeometryChangedCallback;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::GeometryChangedEvent*>*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.UIElements.Toggle m_Toggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Toggle*& dyn_m_Toggle();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement m_Container
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_Container();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement m_IndentElement
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_IndentElement();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement m_BindableContainer
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_BindableContainer();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement m_Checkmark
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_Checkmark();
    // Get instance field reference: private System.Action`1<UnityEngine.UIElements.PointerUpEvent> onPointerUp
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::UIElements::PointerUpEvent*>*& dyn_onPointerUp();
    // Get instance field reference: private System.Action`1<UnityEngine.UIElements.ChangeEvent`1<System.Boolean>> onToggleValueChanged
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::UIElements::ChangeEvent_1<bool>*>*& dyn_onToggleValueChanged();
    // Get instance field reference: private System.Int32 m_Depth
    [[deprecated("Use field access instead!")]] int& dyn_m_Depth();
    // Get instance field reference: private System.Single m_IndentWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_IndentWidth();
    // Get instance field reference: private UnityEngine.UIElements.EventCallback`1<UnityEngine.UIElements.PointerUpEvent> m_PointerUpCallback
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::PointerUpEvent*>*& dyn_m_PointerUpCallback();
    // Get instance field reference: private UnityEngine.UIElements.EventCallback`1<UnityEngine.UIElements.ChangeEvent`1<System.Boolean>> m_ToggleValueChangedCallback
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::ChangeEvent_1<bool>*>*& dyn_m_ToggleValueChangedCallback();
    // Get instance field reference: private UnityEngine.UIElements.EventCallback`1<UnityEngine.UIElements.GeometryChangedEvent> m_ToggleGeometryChangedCallback
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::GeometryChangedEvent*>*& dyn_m_ToggleGeometryChangedCallback();
    // public System.Void add_onPointerUp(System.Action`1<UnityEngine.UIElements.PointerUpEvent> value)
    // Offset: 0x559B948
    void add_onPointerUp(::System::Action_1<::UnityEngine::UIElements::PointerUpEvent*>* value);
    // public System.Void remove_onPointerUp(System.Action`1<UnityEngine.UIElements.PointerUpEvent> value)
    // Offset: 0x559B7BC
    void remove_onPointerUp(::System::Action_1<::UnityEngine::UIElements::PointerUpEvent*>* value);
    // public System.Void add_onToggleValueChanged(System.Action`1<UnityEngine.UIElements.ChangeEvent`1<System.Boolean>> value)
    // Offset: 0x559B9F8
    void add_onToggleValueChanged(::System::Action_1<::UnityEngine::UIElements::ChangeEvent_1<bool>*>* value);
    // public System.Void remove_onToggleValueChanged(System.Action`1<UnityEngine.UIElements.ChangeEvent`1<System.Boolean>> value)
    // Offset: 0x559B86C
    void remove_onToggleValueChanged(::System::Action_1<::UnityEngine::UIElements::ChangeEvent_1<bool>*>* value);
    // protected System.Void InitExpandHierarchy(UnityEngine.UIElements.VisualElement root, UnityEngine.UIElements.VisualElement item)
    // Offset: 0x55A1214
    void InitExpandHierarchy(::UnityEngine::UIElements::VisualElement* root, ::UnityEngine::UIElements::VisualElement* item);
    // public System.Void Indent(System.Int32 depth)
    // Offset: 0x559B4E8
    void Indent(int depth);
    // public System.Void SetExpandedWithoutNotify(System.Boolean expanded)
    // Offset: 0x559B5B0
    void SetExpandedWithoutNotify(bool expanded);
    // public System.Void SetToggleVisibility(System.Boolean visible)
    // Offset: 0x559B678
    void SetToggleVisibility(bool visible);
    // private System.Void OnToggleGeometryChanged(UnityEngine.UIElements.GeometryChangedEvent evt)
    // Offset: 0x55A1DF8
    void OnToggleGeometryChanged(::UnityEngine::UIElements::GeometryChangedEvent* evt);
    // private System.Void UpdateIndentLayout()
    // Offset: 0x55A1CC4
    void UpdateIndentLayout();
    // private System.Void OnPointerUp(UnityEngine.UIElements.PointerUpEvent evt)
    // Offset: 0x55A2010
    void OnPointerUp(::UnityEngine::UIElements::PointerUpEvent* evt);
    // private System.Void OnToggleValueChanged(UnityEngine.UIElements.ChangeEvent`1<System.Boolean> evt)
    // Offset: 0x55A202C
    void OnToggleValueChanged(::UnityEngine::UIElements::ChangeEvent_1<bool>* evt);
    // public override UnityEngine.UIElements.VisualElement get_rootElement()
    // Offset: 0x55A186C
    // Implemented from: UnityEngine.UIElements.ReusableCollectionItem
    // Base method: UnityEngine.UIElements.VisualElement ReusableCollectionItem::get_rootElement()
    ::UnityEngine::UIElements::VisualElement* get_rootElement();
    // public System.Void .ctor()
    // Offset: 0x55A1728
    // Implemented from: UnityEngine.UIElements.ReusableCollectionItem
    // Base method: System.Void ReusableCollectionItem::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReusableTreeViewItem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ReusableTreeViewItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReusableTreeViewItem*, creationType>()));
    }
    // public override System.Void Init(UnityEngine.UIElements.VisualElement item)
    // Offset: 0x55A1884
    // Implemented from: UnityEngine.UIElements.ReusableCollectionItem
    // Base method: System.Void ReusableCollectionItem::Init(UnityEngine.UIElements.VisualElement item)
    void Init(::UnityEngine::UIElements::VisualElement* item);
    // public override System.Void PreAttachElement()
    // Offset: 0x55A195C
    // Implemented from: UnityEngine.UIElements.ReusableCollectionItem
    // Base method: System.Void ReusableCollectionItem::PreAttachElement()
    void PreAttachElement();
    // public override System.Void DetachElement()
    // Offset: 0x55A1B10
    // Implemented from: UnityEngine.UIElements.ReusableCollectionItem
    // Base method: System.Void ReusableCollectionItem::DetachElement()
    void DetachElement();
  }; // UnityEngine.UIElements.ReusableTreeViewItem
  #pragma pack(pop)
  static check_size<sizeof(ReusableTreeViewItem), 144 + sizeof(::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::GeometryChangedEvent*>*)> __UnityEngine_UIElements_ReusableTreeViewItemSizeCheck;
  static_assert(sizeof(ReusableTreeViewItem) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::add_onPointerUp
// Il2CppName: add_onPointerUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ReusableTreeViewItem::*)(::System::Action_1<::UnityEngine::UIElements::PointerUpEvent*>*)>(&UnityEngine::UIElements::ReusableTreeViewItem::add_onPointerUp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "PointerUpEvent")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "add_onPointerUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::remove_onPointerUp
// Il2CppName: remove_onPointerUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ReusableTreeViewItem::*)(::System::Action_1<::UnityEngine::UIElements::PointerUpEvent*>*)>(&UnityEngine::UIElements::ReusableTreeViewItem::remove_onPointerUp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "PointerUpEvent")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "remove_onPointerUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::add_onToggleValueChanged
// Il2CppName: add_onToggleValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ReusableTreeViewItem::*)(::System::Action_1<::UnityEngine::UIElements::ChangeEvent_1<bool>*>*)>(&UnityEngine::UIElements::ReusableTreeViewItem::add_onToggleValueChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ChangeEvent`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "add_onToggleValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::remove_onToggleValueChanged
// Il2CppName: remove_onToggleValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ReusableTreeViewItem::*)(::System::Action_1<::UnityEngine::UIElements::ChangeEvent_1<bool>*>*)>(&UnityEngine::UIElements::ReusableTreeViewItem::remove_onToggleValueChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ChangeEvent`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "remove_onToggleValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::InitExpandHierarchy
// Il2CppName: InitExpandHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ReusableTreeViewItem::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::ReusableTreeViewItem::InitExpandHierarchy)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* item = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "InitExpandHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, item});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::Indent
// Il2CppName: Indent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ReusableTreeViewItem::*)(int)>(&UnityEngine::UIElements::ReusableTreeViewItem::Indent)> {
  static const MethodInfo* get() {
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "Indent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{depth});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::SetExpandedWithoutNotify
// Il2CppName: SetExpandedWithoutNotify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ReusableTreeViewItem::*)(bool)>(&UnityEngine::UIElements::ReusableTreeViewItem::SetExpandedWithoutNotify)> {
  static const MethodInfo* get() {
    static auto* expanded = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "SetExpandedWithoutNotify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expanded});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::SetToggleVisibility
// Il2CppName: SetToggleVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ReusableTreeViewItem::*)(bool)>(&UnityEngine::UIElements::ReusableTreeViewItem::SetToggleVisibility)> {
  static const MethodInfo* get() {
    static auto* visible = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "SetToggleVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{visible});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::OnToggleGeometryChanged
// Il2CppName: OnToggleGeometryChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ReusableTreeViewItem::*)(::UnityEngine::UIElements::GeometryChangedEvent*)>(&UnityEngine::UIElements::ReusableTreeViewItem::OnToggleGeometryChanged)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "GeometryChangedEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "OnToggleGeometryChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::UpdateIndentLayout
// Il2CppName: UpdateIndentLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ReusableTreeViewItem::*)()>(&UnityEngine::UIElements::ReusableTreeViewItem::UpdateIndentLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "UpdateIndentLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::OnPointerUp
// Il2CppName: OnPointerUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ReusableTreeViewItem::*)(::UnityEngine::UIElements::PointerUpEvent*)>(&UnityEngine::UIElements::ReusableTreeViewItem::OnPointerUp)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "PointerUpEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "OnPointerUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::OnToggleValueChanged
// Il2CppName: OnToggleValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ReusableTreeViewItem::*)(::UnityEngine::UIElements::ChangeEvent_1<bool>*)>(&UnityEngine::UIElements::ReusableTreeViewItem::OnToggleValueChanged)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ChangeEvent`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "OnToggleValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::get_rootElement
// Il2CppName: get_rootElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::ReusableTreeViewItem::*)()>(&UnityEngine::UIElements::ReusableTreeViewItem::get_rootElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "get_rootElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ReusableTreeViewItem::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::ReusableTreeViewItem::Init)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::PreAttachElement
// Il2CppName: PreAttachElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ReusableTreeViewItem::*)()>(&UnityEngine::UIElements::ReusableTreeViewItem::PreAttachElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "PreAttachElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ReusableTreeViewItem::DetachElement
// Il2CppName: DetachElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ReusableTreeViewItem::*)()>(&UnityEngine::UIElements::ReusableTreeViewItem::DetachElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ReusableTreeViewItem*), "DetachElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
