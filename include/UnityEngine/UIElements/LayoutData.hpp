// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.IStyleDataGroup`1
#include "UnityEngine/UIElements/IStyleDataGroup_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.UIElements.Align
#include "UnityEngine/UIElements/Align.hpp"
// Including type: UnityEngine.UIElements.Length
#include "UnityEngine/UIElements/Length.hpp"
// Including type: UnityEngine.UIElements.DisplayStyle
#include "UnityEngine/UIElements/DisplayStyle.hpp"
// Including type: UnityEngine.UIElements.FlexDirection
#include "UnityEngine/UIElements/FlexDirection.hpp"
// Including type: UnityEngine.UIElements.Wrap
#include "UnityEngine/UIElements/Wrap.hpp"
// Including type: UnityEngine.UIElements.Justify
#include "UnityEngine/UIElements/Justify.hpp"
// Including type: UnityEngine.UIElements.Position
#include "UnityEngine/UIElements/Position.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: LayoutData
  struct LayoutData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::LayoutData, "UnityEngine.UIElements", "LayoutData");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0xD0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.LayoutData
  // [TokenAttribute] Offset: FFFFFFFF
  struct LayoutData/*, public ::System::ValueType, public ::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::LayoutData>, public ::System::IEquatable_1<::UnityEngine::UIElements::LayoutData>*/ {
    public:
    public:
    // public UnityEngine.UIElements.Align alignContent
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::UIElements::Align alignContent;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Align) == 0x4);
    // public UnityEngine.UIElements.Align alignItems
    // Size: 0x4
    // Offset: 0x4
    ::UnityEngine::UIElements::Align alignItems;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Align) == 0x4);
    // public UnityEngine.UIElements.Align alignSelf
    // Size: 0x4
    // Offset: 0x8
    ::UnityEngine::UIElements::Align alignSelf;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Align) == 0x4);
    // public System.Single borderBottomWidth
    // Size: 0x4
    // Offset: 0xC
    float borderBottomWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single borderLeftWidth
    // Size: 0x4
    // Offset: 0x10
    float borderLeftWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single borderRightWidth
    // Size: 0x4
    // Offset: 0x14
    float borderRightWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single borderTopWidth
    // Size: 0x4
    // Offset: 0x18
    float borderTopWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.UIElements.Length bottom
    // Size: 0x8
    // Offset: 0x1C
    ::UnityEngine::UIElements::Length bottom;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.DisplayStyle display
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::UIElements::DisplayStyle display;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::DisplayStyle) == 0x4);
    // public UnityEngine.UIElements.Length flexBasis
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UIElements::Length flexBasis;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.FlexDirection flexDirection
    // Size: 0x4
    // Offset: 0x30
    ::UnityEngine::UIElements::FlexDirection flexDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::FlexDirection) == 0x4);
    // public System.Single flexGrow
    // Size: 0x4
    // Offset: 0x34
    float flexGrow;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single flexShrink
    // Size: 0x4
    // Offset: 0x38
    float flexShrink;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.UIElements.Wrap flexWrap
    // Size: 0x4
    // Offset: 0x3C
    ::UnityEngine::UIElements::Wrap flexWrap;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Wrap) == 0x4);
    // public UnityEngine.UIElements.Length height
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::UIElements::Length height;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Justify justifyContent
    // Size: 0x4
    // Offset: 0x48
    ::UnityEngine::UIElements::Justify justifyContent;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Justify) == 0x4);
    // public UnityEngine.UIElements.Length left
    // Size: 0x8
    // Offset: 0x4C
    ::UnityEngine::UIElements::Length left;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length marginBottom
    // Size: 0x8
    // Offset: 0x54
    ::UnityEngine::UIElements::Length marginBottom;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length marginLeft
    // Size: 0x8
    // Offset: 0x5C
    ::UnityEngine::UIElements::Length marginLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length marginRight
    // Size: 0x8
    // Offset: 0x64
    ::UnityEngine::UIElements::Length marginRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length marginTop
    // Size: 0x8
    // Offset: 0x6C
    ::UnityEngine::UIElements::Length marginTop;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length maxHeight
    // Size: 0x8
    // Offset: 0x74
    ::UnityEngine::UIElements::Length maxHeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length maxWidth
    // Size: 0x8
    // Offset: 0x7C
    ::UnityEngine::UIElements::Length maxWidth;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length minHeight
    // Size: 0x8
    // Offset: 0x84
    ::UnityEngine::UIElements::Length minHeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length minWidth
    // Size: 0x8
    // Offset: 0x8C
    ::UnityEngine::UIElements::Length minWidth;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length paddingBottom
    // Size: 0x8
    // Offset: 0x94
    ::UnityEngine::UIElements::Length paddingBottom;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length paddingLeft
    // Size: 0x8
    // Offset: 0x9C
    ::UnityEngine::UIElements::Length paddingLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length paddingRight
    // Size: 0x8
    // Offset: 0xA4
    ::UnityEngine::UIElements::Length paddingRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length paddingTop
    // Size: 0x8
    // Offset: 0xAC
    ::UnityEngine::UIElements::Length paddingTop;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Position position
    // Size: 0x4
    // Offset: 0xB4
    ::UnityEngine::UIElements::Position position;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Position) == 0x4);
    // public UnityEngine.UIElements.Length right
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::UIElements::Length right;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length top
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::UIElements::Length top;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    // public UnityEngine.UIElements.Length width
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::UIElements::Length width;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Length) == 0x8);
    public:
    // Creating value type constructor for type: LayoutData
    constexpr LayoutData(::UnityEngine::UIElements::Align alignContent_ = {}, ::UnityEngine::UIElements::Align alignItems_ = {}, ::UnityEngine::UIElements::Align alignSelf_ = {}, float borderBottomWidth_ = {}, float borderLeftWidth_ = {}, float borderRightWidth_ = {}, float borderTopWidth_ = {}, ::UnityEngine::UIElements::Length bottom_ = {}, ::UnityEngine::UIElements::DisplayStyle display_ = {}, ::UnityEngine::UIElements::Length flexBasis_ = {}, ::UnityEngine::UIElements::FlexDirection flexDirection_ = {}, float flexGrow_ = {}, float flexShrink_ = {}, ::UnityEngine::UIElements::Wrap flexWrap_ = {}, ::UnityEngine::UIElements::Length height_ = {}, ::UnityEngine::UIElements::Justify justifyContent_ = {}, ::UnityEngine::UIElements::Length left_ = {}, ::UnityEngine::UIElements::Length marginBottom_ = {}, ::UnityEngine::UIElements::Length marginLeft_ = {}, ::UnityEngine::UIElements::Length marginRight_ = {}, ::UnityEngine::UIElements::Length marginTop_ = {}, ::UnityEngine::UIElements::Length maxHeight_ = {}, ::UnityEngine::UIElements::Length maxWidth_ = {}, ::UnityEngine::UIElements::Length minHeight_ = {}, ::UnityEngine::UIElements::Length minWidth_ = {}, ::UnityEngine::UIElements::Length paddingBottom_ = {}, ::UnityEngine::UIElements::Length paddingLeft_ = {}, ::UnityEngine::UIElements::Length paddingRight_ = {}, ::UnityEngine::UIElements::Length paddingTop_ = {}, ::UnityEngine::UIElements::Position position_ = {}, ::UnityEngine::UIElements::Length right_ = {}, ::UnityEngine::UIElements::Length top_ = {}, ::UnityEngine::UIElements::Length width_ = {}) noexcept : alignContent{alignContent_}, alignItems{alignItems_}, alignSelf{alignSelf_}, borderBottomWidth{borderBottomWidth_}, borderLeftWidth{borderLeftWidth_}, borderRightWidth{borderRightWidth_}, borderTopWidth{borderTopWidth_}, bottom{bottom_}, display{display_}, flexBasis{flexBasis_}, flexDirection{flexDirection_}, flexGrow{flexGrow_}, flexShrink{flexShrink_}, flexWrap{flexWrap_}, height{height_}, justifyContent{justifyContent_}, left{left_}, marginBottom{marginBottom_}, marginLeft{marginLeft_}, marginRight{marginRight_}, marginTop{marginTop_}, maxHeight{maxHeight_}, maxWidth{maxWidth_}, minHeight{minHeight_}, minWidth{minWidth_}, paddingBottom{paddingBottom_}, paddingLeft{paddingLeft_}, paddingRight{paddingRight_}, paddingTop{paddingTop_}, position{position_}, right{right_}, top{top_}, width{width_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::LayoutData>
    operator ::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::LayoutData>() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::LayoutData>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::LayoutData>
    operator ::System::IEquatable_1<::UnityEngine::UIElements::LayoutData>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::LayoutData>*>(this);
    }
    // Get instance field reference: public UnityEngine.UIElements.Align alignContent
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Align& dyn_alignContent();
    // Get instance field reference: public UnityEngine.UIElements.Align alignItems
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Align& dyn_alignItems();
    // Get instance field reference: public UnityEngine.UIElements.Align alignSelf
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Align& dyn_alignSelf();
    // Get instance field reference: public System.Single borderBottomWidth
    [[deprecated("Use field access instead!")]] float& dyn_borderBottomWidth();
    // Get instance field reference: public System.Single borderLeftWidth
    [[deprecated("Use field access instead!")]] float& dyn_borderLeftWidth();
    // Get instance field reference: public System.Single borderRightWidth
    [[deprecated("Use field access instead!")]] float& dyn_borderRightWidth();
    // Get instance field reference: public System.Single borderTopWidth
    [[deprecated("Use field access instead!")]] float& dyn_borderTopWidth();
    // Get instance field reference: public UnityEngine.UIElements.Length bottom
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_bottom();
    // Get instance field reference: public UnityEngine.UIElements.DisplayStyle display
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::DisplayStyle& dyn_display();
    // Get instance field reference: public UnityEngine.UIElements.Length flexBasis
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_flexBasis();
    // Get instance field reference: public UnityEngine.UIElements.FlexDirection flexDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::FlexDirection& dyn_flexDirection();
    // Get instance field reference: public System.Single flexGrow
    [[deprecated("Use field access instead!")]] float& dyn_flexGrow();
    // Get instance field reference: public System.Single flexShrink
    [[deprecated("Use field access instead!")]] float& dyn_flexShrink();
    // Get instance field reference: public UnityEngine.UIElements.Wrap flexWrap
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Wrap& dyn_flexWrap();
    // Get instance field reference: public UnityEngine.UIElements.Length height
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_height();
    // Get instance field reference: public UnityEngine.UIElements.Justify justifyContent
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Justify& dyn_justifyContent();
    // Get instance field reference: public UnityEngine.UIElements.Length left
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_left();
    // Get instance field reference: public UnityEngine.UIElements.Length marginBottom
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_marginBottom();
    // Get instance field reference: public UnityEngine.UIElements.Length marginLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_marginLeft();
    // Get instance field reference: public UnityEngine.UIElements.Length marginRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_marginRight();
    // Get instance field reference: public UnityEngine.UIElements.Length marginTop
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_marginTop();
    // Get instance field reference: public UnityEngine.UIElements.Length maxHeight
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_maxHeight();
    // Get instance field reference: public UnityEngine.UIElements.Length maxWidth
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_maxWidth();
    // Get instance field reference: public UnityEngine.UIElements.Length minHeight
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_minHeight();
    // Get instance field reference: public UnityEngine.UIElements.Length minWidth
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_minWidth();
    // Get instance field reference: public UnityEngine.UIElements.Length paddingBottom
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_paddingBottom();
    // Get instance field reference: public UnityEngine.UIElements.Length paddingLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_paddingLeft();
    // Get instance field reference: public UnityEngine.UIElements.Length paddingRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_paddingRight();
    // Get instance field reference: public UnityEngine.UIElements.Length paddingTop
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_paddingTop();
    // Get instance field reference: public UnityEngine.UIElements.Position position
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Position& dyn_position();
    // Get instance field reference: public UnityEngine.UIElements.Length right
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_right();
    // Get instance field reference: public UnityEngine.UIElements.Length top
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_top();
    // Get instance field reference: public UnityEngine.UIElements.Length width
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Length& dyn_width();
    // public UnityEngine.UIElements.LayoutData Copy()
    // Offset: 0x56A5714
    ::UnityEngine::UIElements::LayoutData Copy();
    // public System.Void CopyFrom(ref UnityEngine.UIElements.LayoutData other)
    // Offset: 0x56A5730
    void CopyFrom(ByRef<::UnityEngine::UIElements::LayoutData> other);
    // public System.Boolean Equals(UnityEngine.UIElements.LayoutData other)
    // Offset: 0x56A5AE0
    bool Equals(::UnityEngine::UIElements::LayoutData other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x56A5B2C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x56A5BD4
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.UIElements.LayoutData
  #pragma pack(pop)
  static check_size<sizeof(LayoutData), 200 + sizeof(::UnityEngine::UIElements::Length)> __UnityEngine_UIElements_LayoutDataSizeCheck;
  static_assert(sizeof(LayoutData) == 0xD0);
  // static public System.Boolean op_Equality(UnityEngine.UIElements.LayoutData lhs, UnityEngine.UIElements.LayoutData rhs)
  // Offset: 0x56A5744
  bool operator ==(const ::UnityEngine::UIElements::LayoutData& lhs, const ::UnityEngine::UIElements::LayoutData& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::LayoutData::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::LayoutData (UnityEngine::UIElements::LayoutData::*)()>(&UnityEngine::UIElements::LayoutData::Copy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::LayoutData), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::LayoutData::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::LayoutData::*)(ByRef<::UnityEngine::UIElements::LayoutData>)>(&UnityEngine::UIElements::LayoutData::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "LayoutData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::LayoutData), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::LayoutData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::LayoutData::*)(::UnityEngine::UIElements::LayoutData)>(&UnityEngine::UIElements::LayoutData::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "LayoutData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::LayoutData), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::LayoutData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::LayoutData::*)(::Il2CppObject*)>(&UnityEngine::UIElements::LayoutData::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::LayoutData), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::LayoutData::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::LayoutData::*)()>(&UnityEngine::UIElements::LayoutData::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::LayoutData), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::LayoutData::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
