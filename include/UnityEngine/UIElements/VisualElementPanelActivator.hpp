// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: IVisualElementPanelActivatable
  class IVisualElementPanelActivatable;
  // Forward declaring type: EventCallback`1<TEventType>
  template<typename TEventType>
  class EventCallback_1;
  // Forward declaring type: AttachToPanelEvent
  class AttachToPanelEvent;
  // Forward declaring type: DetachFromPanelEvent
  class DetachFromPanelEvent;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElementPanelActivator
  class VisualElementPanelActivator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::VisualElementPanelActivator);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualElementPanelActivator*, "UnityEngine.UIElements", "VisualElementPanelActivator");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.VisualElementPanelActivator
  // [TokenAttribute] Offset: FFFFFFFF
  class VisualElementPanelActivator : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.UIElements.IVisualElementPanelActivatable m_Activatable
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::IVisualElementPanelActivatable* m_Activatable;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::IVisualElementPanelActivatable*) == 0x8);
    // private System.Boolean <isActive>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <isDetaching>k__BackingField
    // Size: 0x1
    // Offset: 0x19
    bool isDetaching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isDetaching and: m_OnAttachToPanelCallback
    char __padding2[0x6] = {};
    // private UnityEngine.UIElements.EventCallback`1<UnityEngine.UIElements.AttachToPanelEvent> m_OnAttachToPanelCallback
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::AttachToPanelEvent*>* m_OnAttachToPanelCallback;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::AttachToPanelEvent*>*) == 0x8);
    // private UnityEngine.UIElements.EventCallback`1<UnityEngine.UIElements.DetachFromPanelEvent> m_OnDetachFromPanelCallback
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::DetachFromPanelEvent*>* m_OnDetachFromPanelCallback;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::DetachFromPanelEvent*>*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.UIElements.IVisualElementPanelActivatable m_Activatable
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::IVisualElementPanelActivatable*& dyn_m_Activatable();
    // Get instance field reference: private System.Boolean <isActive>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isActive$k__BackingField();
    // Get instance field reference: private System.Boolean <isDetaching>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isDetaching$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.EventCallback`1<UnityEngine.UIElements.AttachToPanelEvent> m_OnAttachToPanelCallback
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::AttachToPanelEvent*>*& dyn_m_OnAttachToPanelCallback();
    // Get instance field reference: private UnityEngine.UIElements.EventCallback`1<UnityEngine.UIElements.DetachFromPanelEvent> m_OnDetachFromPanelCallback
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::DetachFromPanelEvent*>*& dyn_m_OnDetachFromPanelCallback();
    // public System.Boolean get_isActive()
    // Offset: 0x55C3C7C
    bool get_isActive();
    // private System.Void set_isActive(System.Boolean value)
    // Offset: 0x55C3C84
    void set_isActive(bool value);
    // public System.Boolean get_isDetaching()
    // Offset: 0x55C3C90
    bool get_isDetaching();
    // private System.Void set_isDetaching(System.Boolean value)
    // Offset: 0x55C3C98
    void set_isDetaching(bool value);
    // public System.Void .ctor(UnityEngine.UIElements.IVisualElementPanelActivatable activatable)
    // Offset: 0x55C3CA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisualElementPanelActivator* New_ctor(::UnityEngine::UIElements::IVisualElementPanelActivatable* activatable) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VisualElementPanelActivator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisualElementPanelActivator*, creationType>(activatable)));
    }
    // public System.Void SetActive(System.Boolean action)
    // Offset: 0x55C3DA4
    void SetActive(bool action);
    // public System.Void SendActivation()
    // Offset: 0x55C3FF4
    void SendActivation();
    // public System.Void SendDeactivation()
    // Offset: 0x55C410C
    void SendDeactivation();
    // private System.Void OnEnter(UnityEngine.UIElements.AttachToPanelEvent evt)
    // Offset: 0x55C4224
    void OnEnter(::UnityEngine::UIElements::AttachToPanelEvent* evt);
    // private System.Void OnLeave(UnityEngine.UIElements.DetachFromPanelEvent evt)
    // Offset: 0x55C4234
    void OnLeave(::UnityEngine::UIElements::DetachFromPanelEvent* evt);
  }; // UnityEngine.UIElements.VisualElementPanelActivator
  #pragma pack(pop)
  static check_size<sizeof(VisualElementPanelActivator), 40 + sizeof(::UnityEngine::UIElements::EventCallback_1<::UnityEngine::UIElements::DetachFromPanelEvent*>*)> __UnityEngine_UIElements_VisualElementPanelActivatorSizeCheck;
  static_assert(sizeof(VisualElementPanelActivator) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementPanelActivator::get_isActive
// Il2CppName: get_isActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::VisualElementPanelActivator::*)()>(&UnityEngine::UIElements::VisualElementPanelActivator::get_isActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementPanelActivator*), "get_isActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementPanelActivator::set_isActive
// Il2CppName: set_isActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementPanelActivator::*)(bool)>(&UnityEngine::UIElements::VisualElementPanelActivator::set_isActive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementPanelActivator*), "set_isActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementPanelActivator::get_isDetaching
// Il2CppName: get_isDetaching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::VisualElementPanelActivator::*)()>(&UnityEngine::UIElements::VisualElementPanelActivator::get_isDetaching)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementPanelActivator*), "get_isDetaching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementPanelActivator::set_isDetaching
// Il2CppName: set_isDetaching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementPanelActivator::*)(bool)>(&UnityEngine::UIElements::VisualElementPanelActivator::set_isDetaching)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementPanelActivator*), "set_isDetaching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementPanelActivator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementPanelActivator::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementPanelActivator::*)(bool)>(&UnityEngine::UIElements::VisualElementPanelActivator::SetActive)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementPanelActivator*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementPanelActivator::SendActivation
// Il2CppName: SendActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementPanelActivator::*)()>(&UnityEngine::UIElements::VisualElementPanelActivator::SendActivation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementPanelActivator*), "SendActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementPanelActivator::SendDeactivation
// Il2CppName: SendDeactivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementPanelActivator::*)()>(&UnityEngine::UIElements::VisualElementPanelActivator::SendDeactivation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementPanelActivator*), "SendDeactivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementPanelActivator::OnEnter
// Il2CppName: OnEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementPanelActivator::*)(::UnityEngine::UIElements::AttachToPanelEvent*)>(&UnityEngine::UIElements::VisualElementPanelActivator::OnEnter)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "AttachToPanelEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementPanelActivator*), "OnEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementPanelActivator::OnLeave
// Il2CppName: OnLeave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementPanelActivator::*)(::UnityEngine::UIElements::DetachFromPanelEvent*)>(&UnityEngine::UIElements::VisualElementPanelActivator::OnLeave)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "DetachFromPanelEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementPanelActivator*), "OnLeave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
