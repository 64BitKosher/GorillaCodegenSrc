// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.MeshGenerationContextUtils
#include "UnityEngine/UIElements/MeshGenerationContextUtils.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.UIElements.BackgroundPosition
#include "UnityEngine/UIElements/BackgroundPosition.hpp"
// Including type: UnityEngine.UIElements.BackgroundRepeat
#include "UnityEngine/UIElements/BackgroundRepeat.hpp"
// Including type: UnityEngine.UIElements.BackgroundSize
#include "UnityEngine/UIElements/BackgroundSize.hpp"
// Including type: UnityEngine.ScaleMode
#include "UnityEngine/ScaleMode.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.UIElements.ColorPage
#include "UnityEngine/UIElements/ColorPage.hpp"
// Including type: UnityEngine.UIElements.MeshGenerationContext/MeshFlags
#include "UnityEngine/UIElements/MeshGenerationContext_MeshFlags.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Sprite
  class Sprite;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: SpritePackingRotation
  struct SpritePackingRotation;
  // Skipping declaration: Vector4 because it is already included!
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VectorImage
  class VectorImage;
  // Forward declaring type: ContextType
  struct ContextType;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams, "UnityEngine.UIElements", "MeshGenerationContextUtils/RectangleParams");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x10C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.MeshGenerationContextUtils/RectangleParams
  // [TokenAttribute] Offset: FFFFFFFF
  struct MeshGenerationContextUtils::RectangleParams/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Rect rect
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Rect rect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // public UnityEngine.Rect uv
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Rect uv;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // public UnityEngine.Color color
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Rect subRect
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Rect subRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // public UnityEngine.UIElements.BackgroundPosition backgroundPositionX
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::UIElements::BackgroundPosition backgroundPositionX;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BackgroundPosition) == 0xC);
    // public UnityEngine.UIElements.BackgroundPosition backgroundPositionY
    // Size: 0xC
    // Offset: 0x4C
    ::UnityEngine::UIElements::BackgroundPosition backgroundPositionY;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BackgroundPosition) == 0xC);
    // public UnityEngine.UIElements.BackgroundRepeat backgroundRepeat
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::UIElements::BackgroundRepeat backgroundRepeat;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BackgroundRepeat) == 0x8);
    // public UnityEngine.UIElements.BackgroundSize backgroundSize
    // Size: 0x14
    // Offset: 0x60
    ::UnityEngine::UIElements::BackgroundSize backgroundSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BackgroundSize) == 0x14);
    // Padding between fields: backgroundSize and: texture
    char __padding7[0x4] = {};
    // public UnityEngine.Texture texture
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Texture* texture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public UnityEngine.Sprite sprite
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Sprite* sprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // public UnityEngine.UIElements.VectorImage vectorImage
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::UIElements::VectorImage* vectorImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VectorImage*) == 0x8);
    // public UnityEngine.Material material
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.ScaleMode scaleMode
    // Size: 0x4
    // Offset: 0x98
    ::UnityEngine::ScaleMode scaleMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::ScaleMode) == 0x4);
    // public UnityEngine.Color playmodeTintColor
    // Size: 0x10
    // Offset: 0x9C
    ::UnityEngine::Color playmodeTintColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Vector2 topLeftRadius
    // Size: 0x8
    // Offset: 0xAC
    ::UnityEngine::Vector2 topLeftRadius;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 topRightRadius
    // Size: 0x8
    // Offset: 0xB4
    ::UnityEngine::Vector2 topRightRadius;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 bottomRightRadius
    // Size: 0x8
    // Offset: 0xBC
    ::UnityEngine::Vector2 bottomRightRadius;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 bottomLeftRadius
    // Size: 0x8
    // Offset: 0xC4
    ::UnityEngine::Vector2 bottomLeftRadius;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 contentSize
    // Size: 0x8
    // Offset: 0xCC
    ::UnityEngine::Vector2 contentSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 textureSize
    // Size: 0x8
    // Offset: 0xD4
    ::UnityEngine::Vector2 textureSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Int32 leftSlice
    // Size: 0x4
    // Offset: 0xDC
    int leftSlice;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 topSlice
    // Size: 0x4
    // Offset: 0xE0
    int topSlice;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 rightSlice
    // Size: 0x4
    // Offset: 0xE4
    int rightSlice;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 bottomSlice
    // Size: 0x4
    // Offset: 0xE8
    int bottomSlice;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single sliceScale
    // Size: 0x4
    // Offset: 0xEC
    float sliceScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // UnityEngine.Rect spriteGeomRect
    // Size: 0x10
    // Offset: 0xF0
    ::UnityEngine::Rect spriteGeomRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // UnityEngine.UIElements.ColorPage colorPage
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::UIElements::ColorPage colorPage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::ColorPage) == 0x8);
    // UnityEngine.UIElements.MeshGenerationContext/MeshFlags meshFlags
    // Size: 0x4
    // Offset: 0x108
    ::UnityEngine::UIElements::MeshGenerationContext::MeshFlags meshFlags;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::MeshGenerationContext::MeshFlags) == 0x4);
    public:
    // Creating value type constructor for type: RectangleParams
    constexpr RectangleParams(::UnityEngine::Rect rect_ = {}, ::UnityEngine::Rect uv_ = {}, ::UnityEngine::Color color_ = {}, ::UnityEngine::Rect subRect_ = {}, ::UnityEngine::UIElements::BackgroundPosition backgroundPositionX_ = {}, ::UnityEngine::UIElements::BackgroundPosition backgroundPositionY_ = {}, ::UnityEngine::UIElements::BackgroundRepeat backgroundRepeat_ = {}, ::UnityEngine::UIElements::BackgroundSize backgroundSize_ = {}, ::UnityEngine::Texture* texture_ = {}, ::UnityEngine::Sprite* sprite_ = {}, ::UnityEngine::UIElements::VectorImage* vectorImage_ = {}, ::UnityEngine::Material* material_ = {}, ::UnityEngine::ScaleMode scaleMode_ = {}, ::UnityEngine::Color playmodeTintColor_ = {}, ::UnityEngine::Vector2 topLeftRadius_ = {}, ::UnityEngine::Vector2 topRightRadius_ = {}, ::UnityEngine::Vector2 bottomRightRadius_ = {}, ::UnityEngine::Vector2 bottomLeftRadius_ = {}, ::UnityEngine::Vector2 contentSize_ = {}, ::UnityEngine::Vector2 textureSize_ = {}, int leftSlice_ = {}, int topSlice_ = {}, int rightSlice_ = {}, int bottomSlice_ = {}, float sliceScale_ = {}, ::UnityEngine::Rect spriteGeomRect_ = {}, ::UnityEngine::UIElements::ColorPage colorPage_ = {}, ::UnityEngine::UIElements::MeshGenerationContext::MeshFlags meshFlags_ = {}) noexcept : rect{rect_}, uv{uv_}, color{color_}, subRect{subRect_}, backgroundPositionX{backgroundPositionX_}, backgroundPositionY{backgroundPositionY_}, backgroundRepeat{backgroundRepeat_}, backgroundSize{backgroundSize_}, texture{texture_}, sprite{sprite_}, vectorImage{vectorImage_}, material{material_}, scaleMode{scaleMode_}, playmodeTintColor{playmodeTintColor_}, topLeftRadius{topLeftRadius_}, topRightRadius{topRightRadius_}, bottomRightRadius{bottomRightRadius_}, bottomLeftRadius{bottomLeftRadius_}, contentSize{contentSize_}, textureSize{textureSize_}, leftSlice{leftSlice_}, topSlice{topSlice_}, rightSlice{rightSlice_}, bottomSlice{bottomSlice_}, sliceScale{sliceScale_}, spriteGeomRect{spriteGeomRect_}, colorPage{colorPage_}, meshFlags{meshFlags_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Rect rect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_rect();
    // Get instance field reference: public UnityEngine.Rect uv
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_uv();
    // Get instance field reference: public UnityEngine.Color color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_color();
    // Get instance field reference: public UnityEngine.Rect subRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_subRect();
    // Get instance field reference: public UnityEngine.UIElements.BackgroundPosition backgroundPositionX
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BackgroundPosition& dyn_backgroundPositionX();
    // Get instance field reference: public UnityEngine.UIElements.BackgroundPosition backgroundPositionY
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BackgroundPosition& dyn_backgroundPositionY();
    // Get instance field reference: public UnityEngine.UIElements.BackgroundRepeat backgroundRepeat
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BackgroundRepeat& dyn_backgroundRepeat();
    // Get instance field reference: public UnityEngine.UIElements.BackgroundSize backgroundSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BackgroundSize& dyn_backgroundSize();
    // Get instance field reference: public UnityEngine.Texture texture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_texture();
    // Get instance field reference: public UnityEngine.Sprite sprite
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn_sprite();
    // Get instance field reference: public UnityEngine.UIElements.VectorImage vectorImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VectorImage*& dyn_vectorImage();
    // Get instance field reference: public UnityEngine.Material material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
    // Get instance field reference: public UnityEngine.ScaleMode scaleMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::ScaleMode& dyn_scaleMode();
    // Get instance field reference: public UnityEngine.Color playmodeTintColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_playmodeTintColor();
    // Get instance field reference: public UnityEngine.Vector2 topLeftRadius
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_topLeftRadius();
    // Get instance field reference: public UnityEngine.Vector2 topRightRadius
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_topRightRadius();
    // Get instance field reference: public UnityEngine.Vector2 bottomRightRadius
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_bottomRightRadius();
    // Get instance field reference: public UnityEngine.Vector2 bottomLeftRadius
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_bottomLeftRadius();
    // Get instance field reference: public UnityEngine.Vector2 contentSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_contentSize();
    // Get instance field reference: public UnityEngine.Vector2 textureSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_textureSize();
    // Get instance field reference: public System.Int32 leftSlice
    [[deprecated("Use field access instead!")]] int& dyn_leftSlice();
    // Get instance field reference: public System.Int32 topSlice
    [[deprecated("Use field access instead!")]] int& dyn_topSlice();
    // Get instance field reference: public System.Int32 rightSlice
    [[deprecated("Use field access instead!")]] int& dyn_rightSlice();
    // Get instance field reference: public System.Int32 bottomSlice
    [[deprecated("Use field access instead!")]] int& dyn_bottomSlice();
    // Get instance field reference: public System.Single sliceScale
    [[deprecated("Use field access instead!")]] float& dyn_sliceScale();
    // Get instance field reference: UnityEngine.Rect spriteGeomRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_spriteGeomRect();
    // Get instance field reference: UnityEngine.UIElements.ColorPage colorPage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::ColorPage& dyn_colorPage();
    // Get instance field reference: UnityEngine.UIElements.MeshGenerationContext/MeshFlags meshFlags
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::MeshGenerationContext::MeshFlags& dyn_meshFlags();
    // static private System.Void AdjustUVsForScaleMode(UnityEngine.Rect rect, UnityEngine.Rect uv, UnityEngine.Texture texture, UnityEngine.ScaleMode scaleMode, out UnityEngine.Rect rectOut, out UnityEngine.Rect uvOut)
    // Offset: 0x566E5D4
    static void AdjustUVsForScaleMode(::UnityEngine::Rect rect, ::UnityEngine::Rect uv, ::UnityEngine::Texture* texture, ::UnityEngine::ScaleMode scaleMode, ByRef<::UnityEngine::Rect> rectOut, ByRef<::UnityEngine::Rect> uvOut);
    // static private System.Void AdjustSpriteUVsForScaleMode(UnityEngine.Rect containerRect, UnityEngine.Rect srcRect, UnityEngine.Rect spriteGeomRect, UnityEngine.Sprite sprite, UnityEngine.ScaleMode scaleMode, out UnityEngine.Rect rectOut, out UnityEngine.Rect uvOut)
    // Offset: 0x566E770
    static void AdjustSpriteUVsForScaleMode(::UnityEngine::Rect containerRect, ::UnityEngine::Rect srcRect, ::UnityEngine::Rect spriteGeomRect, ::UnityEngine::Sprite* sprite, ::UnityEngine::ScaleMode scaleMode, ByRef<::UnityEngine::Rect> rectOut, ByRef<::UnityEngine::Rect> uvOut);
    // static UnityEngine.Rect RectIntersection(UnityEngine.Rect a, UnityEngine.Rect b)
    // Offset: 0x566EA58
    static ::UnityEngine::Rect RectIntersection(::UnityEngine::Rect a, ::UnityEngine::Rect b);
    // static private UnityEngine.Rect ComputeGeomRect(UnityEngine.Sprite sprite)
    // Offset: 0x566EB30
    static ::UnityEngine::Rect ComputeGeomRect(::UnityEngine::Sprite* sprite);
    // static private UnityEngine.Rect ComputeUVRect(UnityEngine.Sprite sprite)
    // Offset: 0x566EBE0
    static ::UnityEngine::Rect ComputeUVRect(::UnityEngine::Sprite* sprite);
    // static private UnityEngine.Rect ApplyPackingRotation(UnityEngine.Rect uv, UnityEngine.SpritePackingRotation rotation)
    // Offset: 0x566EC90
    static ::UnityEngine::Rect ApplyPackingRotation(::UnityEngine::Rect uv, ::UnityEngine::SpritePackingRotation rotation);
    // static public UnityEngine.UIElements.MeshGenerationContextUtils/RectangleParams MakeTextured(UnityEngine.Rect rect, UnityEngine.Rect uv, UnityEngine.Texture texture, UnityEngine.ScaleMode scaleMode, UnityEngine.UIElements.ContextType panelContext)
    // Offset: 0x566ECE0
    static ::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams MakeTextured(::UnityEngine::Rect rect, ::UnityEngine::Rect uv, ::UnityEngine::Texture* texture, ::UnityEngine::ScaleMode scaleMode, ::UnityEngine::UIElements::ContextType panelContext);
    // static public UnityEngine.UIElements.MeshGenerationContextUtils/RectangleParams MakeSprite(UnityEngine.Rect containerRect, UnityEngine.Rect subRect, UnityEngine.Sprite sprite, UnityEngine.ScaleMode scaleMode, UnityEngine.UIElements.ContextType panelContext, System.Boolean hasRadius, ref UnityEngine.Vector4 slices, System.Boolean useForRepeat)
    // Offset: 0x566EEC4
    static ::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams MakeSprite(::UnityEngine::Rect containerRect, ::UnityEngine::Rect subRect, ::UnityEngine::Sprite* sprite, ::UnityEngine::ScaleMode scaleMode, ::UnityEngine::UIElements::ContextType panelContext, bool hasRadius, ByRef<::UnityEngine::Vector4> slices, bool useForRepeat);
    // static public UnityEngine.UIElements.MeshGenerationContextUtils/RectangleParams MakeVectorTextured(UnityEngine.Rect rect, UnityEngine.Rect uv, UnityEngine.UIElements.VectorImage vectorImage, UnityEngine.ScaleMode scaleMode, UnityEngine.UIElements.ContextType panelContext)
    // Offset: 0x566F710
    static ::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams MakeVectorTextured(::UnityEngine::Rect rect, ::UnityEngine::Rect uv, ::UnityEngine::UIElements::VectorImage* vectorImage, ::UnityEngine::ScaleMode scaleMode, ::UnityEngine::UIElements::ContextType panelContext);
    // System.Boolean HasRadius(System.Single epsilon)
    // Offset: 0x566F890
    bool HasRadius(float epsilon);
    // System.Boolean HasSlices(System.Single epsilon)
    // Offset: 0x566F904
    bool HasSlices(float epsilon);
    // UnityEngine.UIElements.MeshBuilderNative/NativeRectParams ToNativeParams(UnityEngine.Rect uvRegion)
    // Offset: 0x566F950
    ::UnityEngine::UIElements::MeshBuilderNative::NativeRectParams ToNativeParams(::UnityEngine::Rect uvRegion);
  }; // UnityEngine.UIElements.MeshGenerationContextUtils/RectangleParams
  #pragma pack(pop)
  static check_size<sizeof(MeshGenerationContextUtils::RectangleParams), 264 + sizeof(::UnityEngine::UIElements::MeshGenerationContext::MeshFlags)> __UnityEngine_UIElements_MeshGenerationContextUtils_RectangleParamsSizeCheck;
  static_assert(sizeof(MeshGenerationContextUtils::RectangleParams) == 0x10C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::AdjustUVsForScaleMode
// Il2CppName: AdjustUVsForScaleMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rect, ::UnityEngine::Rect, ::UnityEngine::Texture*, ::UnityEngine::ScaleMode, ByRef<::UnityEngine::Rect>, ByRef<::UnityEngine::Rect>)>(&UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::AdjustUVsForScaleMode)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* uv = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* scaleMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ScaleMode")->byval_arg;
    static auto* rectOut = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* uvOut = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams), "AdjustUVsForScaleMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, uv, texture, scaleMode, rectOut, uvOut});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::AdjustSpriteUVsForScaleMode
// Il2CppName: AdjustSpriteUVsForScaleMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rect, ::UnityEngine::Rect, ::UnityEngine::Rect, ::UnityEngine::Sprite*, ::UnityEngine::ScaleMode, ByRef<::UnityEngine::Rect>, ByRef<::UnityEngine::Rect>)>(&UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::AdjustSpriteUVsForScaleMode)> {
  static const MethodInfo* get() {
    static auto* containerRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* srcRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* spriteGeomRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* sprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    static auto* scaleMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ScaleMode")->byval_arg;
    static auto* rectOut = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* uvOut = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams), "AdjustSpriteUVsForScaleMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{containerRect, srcRect, spriteGeomRect, sprite, scaleMode, rectOut, uvOut});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::RectIntersection
// Il2CppName: RectIntersection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (*)(::UnityEngine::Rect, ::UnityEngine::Rect)>(&UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::RectIntersection)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams), "RectIntersection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::ComputeGeomRect
// Il2CppName: ComputeGeomRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (*)(::UnityEngine::Sprite*)>(&UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::ComputeGeomRect)> {
  static const MethodInfo* get() {
    static auto* sprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams), "ComputeGeomRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sprite});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::ComputeUVRect
// Il2CppName: ComputeUVRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (*)(::UnityEngine::Sprite*)>(&UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::ComputeUVRect)> {
  static const MethodInfo* get() {
    static auto* sprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams), "ComputeUVRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sprite});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::ApplyPackingRotation
// Il2CppName: ApplyPackingRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (*)(::UnityEngine::Rect, ::UnityEngine::SpritePackingRotation)>(&UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::ApplyPackingRotation)> {
  static const MethodInfo* get() {
    static auto* uv = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "SpritePackingRotation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams), "ApplyPackingRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uv, rotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::MakeTextured
// Il2CppName: MakeTextured
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams (*)(::UnityEngine::Rect, ::UnityEngine::Rect, ::UnityEngine::Texture*, ::UnityEngine::ScaleMode, ::UnityEngine::UIElements::ContextType)>(&UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::MakeTextured)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* uv = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* scaleMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ScaleMode")->byval_arg;
    static auto* panelContext = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ContextType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams), "MakeTextured", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, uv, texture, scaleMode, panelContext});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::MakeSprite
// Il2CppName: MakeSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams (*)(::UnityEngine::Rect, ::UnityEngine::Rect, ::UnityEngine::Sprite*, ::UnityEngine::ScaleMode, ::UnityEngine::UIElements::ContextType, bool, ByRef<::UnityEngine::Vector4>, bool)>(&UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::MakeSprite)> {
  static const MethodInfo* get() {
    static auto* containerRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* subRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* sprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    static auto* scaleMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ScaleMode")->byval_arg;
    static auto* panelContext = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ContextType")->byval_arg;
    static auto* hasRadius = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* slices = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* useForRepeat = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams), "MakeSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{containerRect, subRect, sprite, scaleMode, panelContext, hasRadius, slices, useForRepeat});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::MakeVectorTextured
// Il2CppName: MakeVectorTextured
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams (*)(::UnityEngine::Rect, ::UnityEngine::Rect, ::UnityEngine::UIElements::VectorImage*, ::UnityEngine::ScaleMode, ::UnityEngine::UIElements::ContextType)>(&UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::MakeVectorTextured)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* uv = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* vectorImage = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VectorImage")->byval_arg;
    static auto* scaleMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ScaleMode")->byval_arg;
    static auto* panelContext = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ContextType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams), "MakeVectorTextured", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, uv, vectorImage, scaleMode, panelContext});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::HasRadius
// Il2CppName: HasRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::*)(float)>(&UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::HasRadius)> {
  static const MethodInfo* get() {
    static auto* epsilon = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams), "HasRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{epsilon});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::HasSlices
// Il2CppName: HasSlices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::*)(float)>(&UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::HasSlices)> {
  static const MethodInfo* get() {
    static auto* epsilon = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams), "HasSlices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{epsilon});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::ToNativeParams
// Il2CppName: ToNativeParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::MeshBuilderNative::NativeRectParams (UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::*)(::UnityEngine::Rect)>(&UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams::ToNativeParams)> {
  static const MethodInfo* get() {
    static auto* uvRegion = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshGenerationContextUtils::RectangleParams), "ToNativeParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvRegion});
  }
};
