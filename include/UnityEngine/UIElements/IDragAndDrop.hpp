// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: StartDragArgs
  struct StartDragArgs;
  // Forward declaring type: DragVisualMode
  struct DragVisualMode;
  // Forward declaring type: DragAndDropData
  class DragAndDropData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: IDragAndDrop
  class IDragAndDrop;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::IDragAndDrop);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::IDragAndDrop*, "UnityEngine.UIElements", "IDragAndDrop");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.IDragAndDrop
  // [TokenAttribute] Offset: FFFFFFFF
  class IDragAndDrop {
    public:
    // public System.Void StartDrag(UnityEngine.UIElements.StartDragArgs args, UnityEngine.Vector3 pointerPosition)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void StartDrag(::UnityEngine::UIElements::StartDragArgs args, ::UnityEngine::Vector3 pointerPosition);
    // public System.Void UpdateDrag(UnityEngine.Vector3 pointerPosition)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateDrag(::UnityEngine::Vector3 pointerPosition);
    // public System.Void AcceptDrag()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AcceptDrag();
    // public System.Void DragCleanup()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void DragCleanup();
    // public System.Void SetVisualMode(UnityEngine.UIElements.DragVisualMode visualMode)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetVisualMode(::UnityEngine::UIElements::DragVisualMode visualMode);
    // public UnityEngine.UIElements.DragAndDropData get_data()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::DragAndDropData* get_data();
  }; // UnityEngine.UIElements.IDragAndDrop
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::IDragAndDrop::StartDrag
// Il2CppName: StartDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::IDragAndDrop::*)(::UnityEngine::UIElements::StartDragArgs, ::UnityEngine::Vector3)>(&UnityEngine::UIElements::IDragAndDrop::StartDrag)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "StartDragArgs")->byval_arg;
    static auto* pointerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::IDragAndDrop*), "StartDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args, pointerPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::IDragAndDrop::UpdateDrag
// Il2CppName: UpdateDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::IDragAndDrop::*)(::UnityEngine::Vector3)>(&UnityEngine::UIElements::IDragAndDrop::UpdateDrag)> {
  static const MethodInfo* get() {
    static auto* pointerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::IDragAndDrop*), "UpdateDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::IDragAndDrop::AcceptDrag
// Il2CppName: AcceptDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::IDragAndDrop::*)()>(&UnityEngine::UIElements::IDragAndDrop::AcceptDrag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::IDragAndDrop*), "AcceptDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::IDragAndDrop::DragCleanup
// Il2CppName: DragCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::IDragAndDrop::*)()>(&UnityEngine::UIElements::IDragAndDrop::DragCleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::IDragAndDrop*), "DragCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::IDragAndDrop::SetVisualMode
// Il2CppName: SetVisualMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::IDragAndDrop::*)(::UnityEngine::UIElements::DragVisualMode)>(&UnityEngine::UIElements::IDragAndDrop::SetVisualMode)> {
  static const MethodInfo* get() {
    static auto* visualMode = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "DragVisualMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::IDragAndDrop*), "SetVisualMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{visualMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::IDragAndDrop::get_data
// Il2CppName: get_data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::DragAndDropData* (UnityEngine::UIElements::IDragAndDrop::*)()>(&UnityEngine::UIElements::IDragAndDrop::get_data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::IDragAndDrop*), "get_data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
