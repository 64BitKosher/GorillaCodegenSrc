// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.AbstractProgressBar
#include "UnityEngine/UIElements/AbstractProgressBar.hpp"
// Including type: UnityEngine.UIElements.BindableElement/UxmlTraits
#include "UnityEngine/UIElements/BindableElement_UxmlTraits.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: UxmlFloatAttributeDescription
  class UxmlFloatAttributeDescription;
  // Forward declaring type: UxmlStringAttributeDescription
  class UxmlStringAttributeDescription;
  // Skipping declaration: VisualElement because it is already included!
  // Forward declaring type: IUxmlAttributes
  class IUxmlAttributes;
  // Forward declaring type: CreationContext
  struct CreationContext;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::AbstractProgressBar::UxmlTraits);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::AbstractProgressBar::UxmlTraits*, "UnityEngine.UIElements", "AbstractProgressBar/UxmlTraits");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.AbstractProgressBar/UxmlTraits
  // [TokenAttribute] Offset: FFFFFFFF
  class AbstractProgressBar::UxmlTraits : public ::UnityEngine::UIElements::BindableElement::UxmlTraits {
    public:
    public:
    // private UnityEngine.UIElements.UxmlFloatAttributeDescription m_LowValue
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::UIElements::UxmlFloatAttributeDescription* m_LowValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlFloatAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlFloatAttributeDescription m_HighValue
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::UIElements::UxmlFloatAttributeDescription* m_HighValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlFloatAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlFloatAttributeDescription m_Value
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::UIElements::UxmlFloatAttributeDescription* m_Value;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlFloatAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlStringAttributeDescription m_Title
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_Title;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.UIElements.UxmlFloatAttributeDescription m_LowValue
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlFloatAttributeDescription*& dyn_m_LowValue();
    // Get instance field reference: private UnityEngine.UIElements.UxmlFloatAttributeDescription m_HighValue
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlFloatAttributeDescription*& dyn_m_HighValue();
    // Get instance field reference: private UnityEngine.UIElements.UxmlFloatAttributeDescription m_Value
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlFloatAttributeDescription*& dyn_m_Value();
    // Get instance field reference: private UnityEngine.UIElements.UxmlStringAttributeDescription m_Title
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_Title();
    // public override System.Void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc)
    // Offset: 0x56248F4
    // Implemented from: UnityEngine.UIElements.BindableElement/UxmlTraits
    // Base method: System.Void UxmlTraits::Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc)
    void Init(::UnityEngine::UIElements::VisualElement* ve, ::UnityEngine::UIElements::IUxmlAttributes* bag, ::UnityEngine::UIElements::CreationContext cc);
    // public System.Void .ctor()
    // Offset: 0x5624ACC
    // Implemented from: UnityEngine.UIElements.BindableElement/UxmlTraits
    // Base method: System.Void UxmlTraits::.ctor()
    // Base method: System.Void UxmlTraits::.ctor()
    // Base method: System.Void UxmlTraits::.ctor()
    // Base method: System.Void BaseUxmlTraits::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AbstractProgressBar::UxmlTraits* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::AbstractProgressBar::UxmlTraits::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AbstractProgressBar::UxmlTraits*, creationType>()));
    }
  }; // UnityEngine.UIElements.AbstractProgressBar/UxmlTraits
  #pragma pack(pop)
  static check_size<sizeof(AbstractProgressBar::UxmlTraits), 144 + sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*)> __UnityEngine_UIElements_AbstractProgressBar_UxmlTraitsSizeCheck;
  static_assert(sizeof(AbstractProgressBar::UxmlTraits) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::AbstractProgressBar::UxmlTraits::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::AbstractProgressBar::UxmlTraits::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::IUxmlAttributes*, ::UnityEngine::UIElements::CreationContext)>(&UnityEngine::UIElements::AbstractProgressBar::UxmlTraits::Init)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* bag = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "IUxmlAttributes")->byval_arg;
    static auto* cc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "CreationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::AbstractProgressBar::UxmlTraits*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, bag, cc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::AbstractProgressBar::UxmlTraits::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
