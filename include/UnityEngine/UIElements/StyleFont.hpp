// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.IStyleValue`1
#include "UnityEngine/UIElements/IStyleValue_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Font
  class Font;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: StyleFont
  struct StyleFont;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::StyleFont, "UnityEngine.UIElements", "StyleFont");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.StyleFont
  // [TokenAttribute] Offset: FFFFFFFF
  struct StyleFont/*, public ::System::ValueType, public ::UnityEngine::UIElements::IStyleValue_1<::UnityEngine::Font*>, public ::System::IEquatable_1<::UnityEngine::UIElements::StyleFont>*/ {
    public:
    public:
    // private UnityEngine.Font m_Value
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Font* m_Value;
    // Field size check
    static_assert(sizeof(::UnityEngine::Font*) == 0x8);
    // private UnityEngine.UIElements.StyleKeyword m_Keyword
    // Size: 0x4
    // Offset: 0x8
    ::UnityEngine::UIElements::StyleKeyword m_Keyword;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleKeyword) == 0x4);
    public:
    // Creating value type constructor for type: StyleFont
    constexpr StyleFont(::UnityEngine::Font* m_Value_ = {}, ::UnityEngine::UIElements::StyleKeyword m_Keyword_ = {}) noexcept : m_Value{m_Value_}, m_Keyword{m_Keyword_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IStyleValue_1<::UnityEngine::Font*>
    operator ::UnityEngine::UIElements::IStyleValue_1<::UnityEngine::Font*>() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IStyleValue_1<::UnityEngine::Font*>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::StyleFont>
    operator ::System::IEquatable_1<::UnityEngine::UIElements::StyleFont>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::StyleFont>*>(this);
    }
    // Get instance field reference: private UnityEngine.Font m_Value
    [[deprecated("Use field access instead!")]] ::UnityEngine::Font*& dyn_m_Value();
    // Get instance field reference: private UnityEngine.UIElements.StyleKeyword m_Keyword
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleKeyword& dyn_m_Keyword();
    // public UnityEngine.Font get_value()
    // Offset: 0x56A8E44
    ::UnityEngine::Font* get_value();
    // public UnityEngine.UIElements.StyleKeyword get_keyword()
    // Offset: 0x56A8E5C
    ::UnityEngine::UIElements::StyleKeyword get_keyword();
    // public System.Void .ctor(UnityEngine.Font v)
    // Offset: 0x56A8E64
    StyleFont(::UnityEngine::Font* v);
    // System.Void .ctor(UnityEngine.Font v, UnityEngine.UIElements.StyleKeyword keyword)
    // Offset: 0x56A8E70
    // ABORTED: conflicts with another method.  StyleFont(::UnityEngine::Font* v, ::UnityEngine::UIElements::StyleKeyword keyword);
    // public System.Boolean Equals(UnityEngine.UIElements.StyleFont other)
    // Offset: 0x56A8F30
    bool Equals(::UnityEngine::UIElements::StyleFont other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x56A8F44
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x56A8FC0
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x56A9058
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.UIElements.StyleFont
  #pragma pack(pop)
  static check_size<sizeof(StyleFont), 8 + sizeof(::UnityEngine::UIElements::StyleKeyword)> __UnityEngine_UIElements_StyleFontSizeCheck;
  static_assert(sizeof(StyleFont) == 0xC);
  // static public System.Boolean op_Equality(UnityEngine.UIElements.StyleFont lhs, UnityEngine.UIElements.StyleFont rhs)
  // Offset: 0x56A8E7C
  bool operator ==(const ::UnityEngine::UIElements::StyleFont& lhs, const ::UnityEngine::UIElements::StyleFont& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleFont::get_value
// Il2CppName: get_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Font* (UnityEngine::UIElements::StyleFont::*)()>(&UnityEngine::UIElements::StyleFont::get_value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StyleFont), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleFont::get_keyword
// Il2CppName: get_keyword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::StyleKeyword (UnityEngine::UIElements::StyleFont::*)()>(&UnityEngine::UIElements::StyleFont::get_keyword)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StyleFont), "get_keyword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleFont::StyleFont
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleFont::StyleFont
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleFont::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::StyleFont::*)(::UnityEngine::UIElements::StyleFont)>(&UnityEngine::UIElements::StyleFont::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "StyleFont")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StyleFont), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleFont::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::StyleFont::*)(::Il2CppObject*)>(&UnityEngine::UIElements::StyleFont::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StyleFont), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleFont::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::StyleFont::*)()>(&UnityEngine::UIElements::StyleFont::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StyleFont), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleFont::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::UIElements::StyleFont::*)()>(&UnityEngine::UIElements::StyleFont::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StyleFont), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleFont::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
