// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UQuery
#include "UnityEngine/UIElements/UQuery.hpp"
// Including type: UnityEngine.UIElements.UQuery/UQueryMatcher
#include "UnityEngine/UIElements/UQuery_UQueryMatcher.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UQuery::SingleQueryMatcher);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UQuery::SingleQueryMatcher*, "UnityEngine.UIElements", "UQuery/SingleQueryMatcher");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UQuery/SingleQueryMatcher
  // [TokenAttribute] Offset: FFFFFFFF
  class UQuery::SingleQueryMatcher : public ::UnityEngine::UIElements::UQuery::UQueryMatcher {
    public:
    public:
    // private UnityEngine.UIElements.VisualElement <match>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::VisualElement* match;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>*
    constexpr operator ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>*() const noexcept = delete;
    // Get instance field reference: private UnityEngine.UIElements.VisualElement <match>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_$match$k__BackingField();
    // public UnityEngine.UIElements.VisualElement get_match()
    // Offset: 0x56C3AA4
    ::UnityEngine::UIElements::VisualElement* get_match();
    // public System.Void set_match(UnityEngine.UIElements.VisualElement value)
    // Offset: 0x56C3AAC
    void set_match(::UnityEngine::UIElements::VisualElement* value);
    // public System.Boolean IsInUse()
    // Offset: 0x56C3B1C
    bool IsInUse();
    // public UnityEngine.UIElements.UQuery/SingleQueryMatcher CreateNew()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::UQuery::SingleQueryMatcher* CreateNew();
    // public override System.Void Run(UnityEngine.UIElements.VisualElement root, System.Collections.Generic.List`1<UnityEngine.UIElements.RuleMatcher> matchers)
    // Offset: 0x56C3AB4
    // Implemented from: UnityEngine.UIElements.UQuery/UQueryMatcher
    // Base method: System.Void UQueryMatcher::Run(UnityEngine.UIElements.VisualElement root, System.Collections.Generic.List`1<UnityEngine.UIElements.RuleMatcher> matchers)
    void Run(::UnityEngine::UIElements::VisualElement* root, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>* matchers);
    // protected System.Void .ctor()
    // Offset: 0x56C3B2C
    // Implemented from: UnityEngine.UIElements.UQuery/UQueryMatcher
    // Base method: System.Void UQueryMatcher::.ctor()
    // Base method: System.Void HierarchyTraversal::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UQuery::SingleQueryMatcher* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UQuery::SingleQueryMatcher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UQuery::SingleQueryMatcher*, creationType>()));
    }
  }; // UnityEngine.UIElements.UQuery/SingleQueryMatcher
  #pragma pack(pop)
  static check_size<sizeof(UQuery::SingleQueryMatcher), 24 + sizeof(::UnityEngine::UIElements::VisualElement*)> __UnityEngine_UIElements_UQuery_SingleQueryMatcherSizeCheck;
  static_assert(sizeof(UQuery::SingleQueryMatcher) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UQuery::SingleQueryMatcher::get_match
// Il2CppName: get_match
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::UQuery::SingleQueryMatcher::*)()>(&UnityEngine::UIElements::UQuery::SingleQueryMatcher::get_match)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UQuery::SingleQueryMatcher*), "get_match", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UQuery::SingleQueryMatcher::set_match
// Il2CppName: set_match
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UQuery::SingleQueryMatcher::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::UQuery::SingleQueryMatcher::set_match)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UQuery::SingleQueryMatcher*), "set_match", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UQuery::SingleQueryMatcher::IsInUse
// Il2CppName: IsInUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UQuery::SingleQueryMatcher::*)()>(&UnityEngine::UIElements::UQuery::SingleQueryMatcher::IsInUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UQuery::SingleQueryMatcher*), "IsInUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UQuery::SingleQueryMatcher::CreateNew
// Il2CppName: CreateNew
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::UQuery::SingleQueryMatcher* (UnityEngine::UIElements::UQuery::SingleQueryMatcher::*)()>(&UnityEngine::UIElements::UQuery::SingleQueryMatcher::CreateNew)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UQuery::SingleQueryMatcher*), "CreateNew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UQuery::SingleQueryMatcher::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UQuery::SingleQueryMatcher::*)(::UnityEngine::UIElements::VisualElement*, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::RuleMatcher>*)>(&UnityEngine::UIElements::UQuery::SingleQueryMatcher::Run)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* matchers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "RuleMatcher")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UQuery::SingleQueryMatcher*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, matchers});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UQuery::SingleQueryMatcher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
