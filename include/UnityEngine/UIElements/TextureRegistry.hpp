// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.TextureId
#include "UnityEngine/UIElements/TextureId.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TextureRegistry
  class TextureRegistry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::TextureRegistry);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::TextureRegistry*, "UnityEngine.UIElements", "TextureRegistry");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.TextureRegistry
  // [TokenAttribute] Offset: FFFFFFFF
  class TextureRegistry : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::UIElements::TextureRegistry::TextureInfo
    struct TextureInfo;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.TextureRegistry/TextureInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct TextureInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Texture texture
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Texture* texture;
      // Field size check
      static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
      // public System.Boolean dynamic
      // Size: 0x1
      // Offset: 0x8
      bool dynamic;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: dynamic and: refCount
      char __padding1[0x3] = {};
      // public System.Int32 refCount
      // Size: 0x4
      // Offset: 0xC
      int refCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TextureInfo
      constexpr TextureInfo(::UnityEngine::Texture* texture_ = {}, bool dynamic_ = {}, int refCount_ = {}) noexcept : texture{texture_}, dynamic{dynamic_}, refCount{refCount_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Texture texture
      [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_texture();
      // Get instance field reference: public System.Boolean dynamic
      [[deprecated("Use field access instead!")]] bool& dyn_dynamic();
      // Get instance field reference: public System.Int32 refCount
      [[deprecated("Use field access instead!")]] int& dyn_refCount();
    }; // UnityEngine.UIElements.TextureRegistry/TextureInfo
    #pragma pack(pop)
    static check_size<sizeof(TextureRegistry::TextureInfo), 12 + sizeof(int)> __UnityEngine_UIElements_TextureRegistry_TextureInfoSizeCheck;
    static_assert(sizeof(TextureRegistry::TextureInfo) == 0x10);
    public:
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.TextureRegistry/TextureInfo> m_Textures
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TextureRegistry::TextureInfo>* m_Textures;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::TextureRegistry::TextureInfo>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Texture,UnityEngine.UIElements.TextureId> m_TextureToId
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Texture*, ::UnityEngine::UIElements::TextureId>* m_TextureToId;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Texture*, ::UnityEngine::UIElements::TextureId>*) == 0x8);
    // private System.Collections.Generic.Stack`1<UnityEngine.UIElements.TextureId> m_FreeIds
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Stack_1<::UnityEngine::UIElements::TextureId>* m_FreeIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<::UnityEngine::UIElements::TextureId>*) == 0x8);
    public:
    // static field const value: static System.Int32 maxTextures
    static constexpr const int maxTextures = 2048;
    // Get static field: static System.Int32 maxTextures
    static int _get_maxTextures();
    // Set static field: static System.Int32 maxTextures
    static void _set_maxTextures(int value);
    // Get static field: static private readonly UnityEngine.UIElements.TextureRegistry <instance>k__BackingField
    static ::UnityEngine::UIElements::TextureRegistry* _get_$instance$k__BackingField();
    // Set static field: static private readonly UnityEngine.UIElements.TextureRegistry <instance>k__BackingField
    static void _set_$instance$k__BackingField(::UnityEngine::UIElements::TextureRegistry* value);
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.TextureRegistry/TextureInfo> m_Textures
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TextureRegistry::TextureInfo>*& dyn_m_Textures();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Texture,UnityEngine.UIElements.TextureId> m_TextureToId
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Texture*, ::UnityEngine::UIElements::TextureId>*& dyn_m_TextureToId();
    // Get instance field reference: private System.Collections.Generic.Stack`1<UnityEngine.UIElements.TextureId> m_FreeIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::UnityEngine::UIElements::TextureId>*& dyn_m_FreeIds();
    // static public UnityEngine.UIElements.TextureRegistry get_instance()
    // Offset: 0x568A0D4
    static ::UnityEngine::UIElements::TextureRegistry* get_instance();
    // public UnityEngine.Texture GetTexture(UnityEngine.UIElements.TextureId id)
    // Offset: 0x568A12C
    ::UnityEngine::Texture* GetTexture(::UnityEngine::UIElements::TextureId id);
    // public UnityEngine.UIElements.TextureId AllocAndAcquireDynamic()
    // Offset: 0x568A270
    ::UnityEngine::UIElements::TextureId AllocAndAcquireDynamic();
    // public System.Void UpdateDynamic(UnityEngine.UIElements.TextureId id, UnityEngine.Texture texture)
    // Offset: 0x568A510
    void UpdateDynamic(::UnityEngine::UIElements::TextureId id, ::UnityEngine::Texture* texture);
    // private UnityEngine.UIElements.TextureId AllocAndAcquire(UnityEngine.Texture texture, System.Boolean dynamic)
    // Offset: 0x568A28C
    ::UnityEngine::UIElements::TextureId AllocAndAcquire(::UnityEngine::Texture* texture, bool dynamic);
    // public UnityEngine.UIElements.TextureId Acquire(UnityEngine.Texture tex)
    // Offset: 0x568A6D0
    ::UnityEngine::UIElements::TextureId Acquire(::UnityEngine::Texture* tex);
    // public System.Void Release(UnityEngine.UIElements.TextureId id)
    // Offset: 0x568A810
    void Release(::UnityEngine::UIElements::TextureId id);
    // public System.Void .ctor()
    // Offset: 0x568AA08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextureRegistry* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextureRegistry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextureRegistry*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x568AB40
    static void _cctor();
  }; // UnityEngine.UIElements.TextureRegistry
  #pragma pack(pop)
  static check_size<sizeof(TextureRegistry), 32 + sizeof(::System::Collections::Generic::Stack_1<::UnityEngine::UIElements::TextureId>*)> __UnityEngine_UIElements_TextureRegistrySizeCheck;
  static_assert(sizeof(TextureRegistry) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::TextureRegistry::TextureInfo, "UnityEngine.UIElements", "TextureRegistry/TextureInfo");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureRegistry::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::TextureRegistry* (*)()>(&UnityEngine::UIElements::TextureRegistry::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextureRegistry*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureRegistry::GetTexture
// Il2CppName: GetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture* (UnityEngine::UIElements::TextureRegistry::*)(::UnityEngine::UIElements::TextureId)>(&UnityEngine::UIElements::TextureRegistry::GetTexture)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TextureId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextureRegistry*), "GetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureRegistry::AllocAndAcquireDynamic
// Il2CppName: AllocAndAcquireDynamic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::TextureId (UnityEngine::UIElements::TextureRegistry::*)()>(&UnityEngine::UIElements::TextureRegistry::AllocAndAcquireDynamic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextureRegistry*), "AllocAndAcquireDynamic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureRegistry::UpdateDynamic
// Il2CppName: UpdateDynamic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TextureRegistry::*)(::UnityEngine::UIElements::TextureId, ::UnityEngine::Texture*)>(&UnityEngine::UIElements::TextureRegistry::UpdateDynamic)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TextureId")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextureRegistry*), "UpdateDynamic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, texture});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureRegistry::AllocAndAcquire
// Il2CppName: AllocAndAcquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::TextureId (UnityEngine::UIElements::TextureRegistry::*)(::UnityEngine::Texture*, bool)>(&UnityEngine::UIElements::TextureRegistry::AllocAndAcquire)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* dynamic = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextureRegistry*), "AllocAndAcquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, dynamic});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureRegistry::Acquire
// Il2CppName: Acquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::TextureId (UnityEngine::UIElements::TextureRegistry::*)(::UnityEngine::Texture*)>(&UnityEngine::UIElements::TextureRegistry::Acquire)> {
  static const MethodInfo* get() {
    static auto* tex = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextureRegistry*), "Acquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tex});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureRegistry::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TextureRegistry::*)(::UnityEngine::UIElements::TextureId)>(&UnityEngine::UIElements::TextureRegistry::Release)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TextureId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextureRegistry*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureRegistry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::TextureRegistry::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::TextureRegistry::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextureRegistry*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
