// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BaseVisualTreeUpdater
#include "UnityEngine/UIElements/BaseVisualTreeUpdater.hpp"
// Including type: Unity.Profiling.ProfilerMarker
#include "Unity/Profiling/ProfilerMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::UIElements::Experimental
namespace UnityEngine::UIElements::Experimental {
  // Forward declaring type: IValueAnimationUpdate
  class IValueAnimationUpdate;
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: VersionChangeType
  struct VersionChangeType;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElementAnimationSystem
  class VisualElementAnimationSystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::VisualElementAnimationSystem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualElementAnimationSystem*, "UnityEngine.UIElements", "VisualElementAnimationSystem");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.VisualElementAnimationSystem
  // [TokenAttribute] Offset: FFFFFFFF
  class VisualElementAnimationSystem : public ::UnityEngine::UIElements::BaseVisualTreeUpdater {
    public:
    public:
    // private System.Collections.Generic.HashSet`1<UnityEngine.UIElements.Experimental.IValueAnimationUpdate> m_Animations
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::Experimental::IValueAnimationUpdate*>* m_Animations;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::Experimental::IValueAnimationUpdate*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.Experimental.IValueAnimationUpdate> m_IterationList
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::Experimental::IValueAnimationUpdate*>* m_IterationList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::Experimental::IValueAnimationUpdate*>*) == 0x8);
    // private System.Boolean m_HasNewAnimations
    // Size: 0x1
    // Offset: 0x30
    bool m_HasNewAnimations;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IterationListDirty
    // Size: 0x1
    // Offset: 0x31
    bool m_IterationListDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_IterationListDirty and: lastUpdate
    char __padding3[0x6] = {};
    // private System.Int64 lastUpdate
    // Size: 0x8
    // Offset: 0x38
    int64_t lastUpdate;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Get static field: static private readonly System.String s_Description
    static ::StringW _get_s_Description();
    // Set static field: static private readonly System.String s_Description
    static void _set_s_Description(::StringW value);
    // Get static field: static private readonly Unity.Profiling.ProfilerMarker s_ProfilerMarker
    static ::Unity::Profiling::ProfilerMarker _get_s_ProfilerMarker();
    // Set static field: static private readonly Unity.Profiling.ProfilerMarker s_ProfilerMarker
    static void _set_s_ProfilerMarker(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private readonly System.String s_StylePropertyAnimationDescription
    static ::StringW _get_s_StylePropertyAnimationDescription();
    // Set static field: static private readonly System.String s_StylePropertyAnimationDescription
    static void _set_s_StylePropertyAnimationDescription(::StringW value);
    // Get static field: static private readonly Unity.Profiling.ProfilerMarker s_StylePropertyAnimationProfilerMarker
    static ::Unity::Profiling::ProfilerMarker _get_s_StylePropertyAnimationProfilerMarker();
    // Set static field: static private readonly Unity.Profiling.ProfilerMarker s_StylePropertyAnimationProfilerMarker
    static void _set_s_StylePropertyAnimationProfilerMarker(::Unity::Profiling::ProfilerMarker value);
    // Get instance field reference: private System.Collections.Generic.HashSet`1<UnityEngine.UIElements.Experimental.IValueAnimationUpdate> m_Animations
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::UIElements::Experimental::IValueAnimationUpdate*>*& dyn_m_Animations();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.Experimental.IValueAnimationUpdate> m_IterationList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::Experimental::IValueAnimationUpdate*>*& dyn_m_IterationList();
    // Get instance field reference: private System.Boolean m_HasNewAnimations
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasNewAnimations();
    // Get instance field reference: private System.Boolean m_IterationListDirty
    [[deprecated("Use field access instead!")]] bool& dyn_m_IterationListDirty();
    // Get instance field reference: private System.Int64 lastUpdate
    [[deprecated("Use field access instead!")]] int64_t& dyn_lastUpdate();
    // static private Unity.Profiling.ProfilerMarker get_stylePropertyAnimationProfilerMarker()
    // Offset: 0x55C4BD0
    static ::Unity::Profiling::ProfilerMarker get_stylePropertyAnimationProfilerMarker();
    // public System.Void UnregisterAnimation(UnityEngine.UIElements.Experimental.IValueAnimationUpdate anim)
    // Offset: 0x55C4C28
    void UnregisterAnimation(::UnityEngine::UIElements::Experimental::IValueAnimationUpdate* anim);
    // public System.Void UnregisterAnimations(System.Collections.Generic.List`1<UnityEngine.UIElements.Experimental.IValueAnimationUpdate> anims)
    // Offset: 0x55C4C8C
    void UnregisterAnimations(::System::Collections::Generic::List_1<::UnityEngine::UIElements::Experimental::IValueAnimationUpdate*>* anims);
    // public System.Void RegisterAnimation(UnityEngine.UIElements.Experimental.IValueAnimationUpdate anim)
    // Offset: 0x55C4E04
    void RegisterAnimation(::UnityEngine::UIElements::Experimental::IValueAnimationUpdate* anim);
    // public System.Void RegisterAnimations(System.Collections.Generic.List`1<UnityEngine.UIElements.Experimental.IValueAnimationUpdate> anims)
    // Offset: 0x55C4E68
    void RegisterAnimations(::System::Collections::Generic::List_1<::UnityEngine::UIElements::Experimental::IValueAnimationUpdate*>* anims);
    // static private System.Void .cctor()
    // Offset: 0x55C54CC
    static void _cctor();
    // public override Unity.Profiling.ProfilerMarker get_profilerMarker()
    // Offset: 0x55C4B78
    // Implemented from: UnityEngine.UIElements.BaseVisualTreeUpdater
    // Base method: Unity.Profiling.ProfilerMarker BaseVisualTreeUpdater::get_profilerMarker()
    ::Unity::Profiling::ProfilerMarker get_profilerMarker();
    // public override System.Void Update()
    // Offset: 0x55C4FE0
    // Implemented from: UnityEngine.UIElements.BaseVisualTreeUpdater
    // Base method: System.Void BaseVisualTreeUpdater::Update()
    void Update();
    // public override System.Void OnVersionChanged(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.VersionChangeType versionChangeType)
    // Offset: 0x55C53E0
    // Implemented from: UnityEngine.UIElements.BaseVisualTreeUpdater
    // Base method: System.Void BaseVisualTreeUpdater::OnVersionChanged(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.VersionChangeType versionChangeType)
    void OnVersionChanged(::UnityEngine::UIElements::VisualElement* ve, ::UnityEngine::UIElements::VersionChangeType versionChangeType);
    // public System.Void .ctor()
    // Offset: 0x55C53E4
    // Implemented from: UnityEngine.UIElements.BaseVisualTreeUpdater
    // Base method: System.Void BaseVisualTreeUpdater::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisualElementAnimationSystem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VisualElementAnimationSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisualElementAnimationSystem*, creationType>()));
    }
  }; // UnityEngine.UIElements.VisualElementAnimationSystem
  #pragma pack(pop)
  static check_size<sizeof(VisualElementAnimationSystem), 56 + sizeof(int64_t)> __UnityEngine_UIElements_VisualElementAnimationSystemSizeCheck;
  static_assert(sizeof(VisualElementAnimationSystem) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementAnimationSystem::get_stylePropertyAnimationProfilerMarker
// Il2CppName: get_stylePropertyAnimationProfilerMarker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Profiling::ProfilerMarker (*)()>(&UnityEngine::UIElements::VisualElementAnimationSystem::get_stylePropertyAnimationProfilerMarker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementAnimationSystem*), "get_stylePropertyAnimationProfilerMarker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementAnimationSystem::UnregisterAnimation
// Il2CppName: UnregisterAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementAnimationSystem::*)(::UnityEngine::UIElements::Experimental::IValueAnimationUpdate*)>(&UnityEngine::UIElements::VisualElementAnimationSystem::UnregisterAnimation)> {
  static const MethodInfo* get() {
    static auto* anim = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.Experimental", "IValueAnimationUpdate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementAnimationSystem*), "UnregisterAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anim});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementAnimationSystem::UnregisterAnimations
// Il2CppName: UnregisterAnimations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementAnimationSystem::*)(::System::Collections::Generic::List_1<::UnityEngine::UIElements::Experimental::IValueAnimationUpdate*>*)>(&UnityEngine::UIElements::VisualElementAnimationSystem::UnregisterAnimations)> {
  static const MethodInfo* get() {
    static auto* anims = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.Experimental", "IValueAnimationUpdate")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementAnimationSystem*), "UnregisterAnimations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anims});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementAnimationSystem::RegisterAnimation
// Il2CppName: RegisterAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementAnimationSystem::*)(::UnityEngine::UIElements::Experimental::IValueAnimationUpdate*)>(&UnityEngine::UIElements::VisualElementAnimationSystem::RegisterAnimation)> {
  static const MethodInfo* get() {
    static auto* anim = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.Experimental", "IValueAnimationUpdate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementAnimationSystem*), "RegisterAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anim});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementAnimationSystem::RegisterAnimations
// Il2CppName: RegisterAnimations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementAnimationSystem::*)(::System::Collections::Generic::List_1<::UnityEngine::UIElements::Experimental::IValueAnimationUpdate*>*)>(&UnityEngine::UIElements::VisualElementAnimationSystem::RegisterAnimations)> {
  static const MethodInfo* get() {
    static auto* anims = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.Experimental", "IValueAnimationUpdate")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementAnimationSystem*), "RegisterAnimations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anims});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementAnimationSystem::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::VisualElementAnimationSystem::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementAnimationSystem*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementAnimationSystem::get_profilerMarker
// Il2CppName: get_profilerMarker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Profiling::ProfilerMarker (UnityEngine::UIElements::VisualElementAnimationSystem::*)()>(&UnityEngine::UIElements::VisualElementAnimationSystem::get_profilerMarker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementAnimationSystem*), "get_profilerMarker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementAnimationSystem::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementAnimationSystem::*)()>(&UnityEngine::UIElements::VisualElementAnimationSystem::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementAnimationSystem*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementAnimationSystem::OnVersionChanged
// Il2CppName: OnVersionChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualElementAnimationSystem::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::VersionChangeType)>(&UnityEngine::UIElements::VisualElementAnimationSystem::OnVersionChanged)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* versionChangeType = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VersionChangeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualElementAnimationSystem*), "OnVersionChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, versionChangeType});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementAnimationSystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
