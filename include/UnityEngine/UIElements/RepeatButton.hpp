// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.TextElement
#include "UnityEngine/UIElements/TextElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Clickable
  class Clickable;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: RepeatButton
  class RepeatButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::RepeatButton);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::RepeatButton*, "UnityEngine.UIElements", "RepeatButton");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.RepeatButton
  // [TokenAttribute] Offset: FFFFFFFF
  class RepeatButton : public ::UnityEngine::UIElements::TextElement {
    public:
    // Nested type: ::UnityEngine::UIElements::RepeatButton::UxmlFactory
    class UxmlFactory;
    // Nested type: ::UnityEngine::UIElements::RepeatButton::UxmlTraits
    class UxmlTraits;
    public:
    // private UnityEngine.UIElements.Clickable m_Clickable
    // Size: 0x8
    // Offset: 0x498
    ::UnityEngine::UIElements::Clickable* m_Clickable;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Clickable*) == 0x8);
    public:
    // Creating conversion operator: operator ::UnityEngine::UIElements::Clickable*
    constexpr operator ::UnityEngine::UIElements::Clickable*() const noexcept {
      return m_Clickable;
    }
    // Get static field: static public readonly System.String ussClassName
    static ::StringW _get_ussClassName();
    // Set static field: static public readonly System.String ussClassName
    static void _set_ussClassName(::StringW value);
    // Get instance field reference: private UnityEngine.UIElements.Clickable m_Clickable
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Clickable*& dyn_m_Clickable();
    // public System.Void .ctor(System.Action clickEvent, System.Int64 delay, System.Int64 interval)
    // Offset: 0x5626A24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RepeatButton* New_ctor(::System::Action* clickEvent, int64_t delay, int64_t interval) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::RepeatButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RepeatButton*, creationType>(clickEvent, delay, interval)));
    }
    // public System.Void SetAction(System.Action clickEvent, System.Int64 delay, System.Int64 interval)
    // Offset: 0x5626A64
    void SetAction(::System::Action* clickEvent, int64_t delay, int64_t interval);
    // public System.Void .ctor()
    // Offset: 0x5626990
    // Implemented from: UnityEngine.UIElements.TextElement
    // Base method: System.Void TextElement::.ctor()
    // Base method: System.Void BindableElement::.ctor()
    // Base method: System.Void VisualElement::.ctor()
    // Base method: System.Void Focusable::.ctor()
    // Base method: System.Void CallbackEventHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RepeatButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::RepeatButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RepeatButton*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x5626B10
    // Implemented from: UnityEngine.UIElements.TextElement
    // Base method: System.Void TextElement::.cctor()
    // Base method: System.Void VisualElement::.cctor()
    static void _cctor();
  }; // UnityEngine.UIElements.RepeatButton
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::RepeatButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::RepeatButton::SetAction
// Il2CppName: SetAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::RepeatButton::*)(::System::Action*, int64_t, int64_t)>(&UnityEngine::UIElements::RepeatButton::SetAction)> {
  static const MethodInfo* get() {
    static auto* clickEvent = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* interval = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::RepeatButton*), "SetAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clickEvent, delay, interval});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::RepeatButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::RepeatButton::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::RepeatButton::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::RepeatButton*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
