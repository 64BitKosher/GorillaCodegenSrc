// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BaseSlider`1
#include "UnityEngine/UIElements/BaseSlider_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Skipping declaration: DeltaSpeed because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Slider
  class Slider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::Slider);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::Slider*, "UnityEngine.UIElements", "Slider");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.Slider
  // [TokenAttribute] Offset: FFFFFFFF
  class Slider : public ::UnityEngine::UIElements::BaseSlider_1<float> {
    public:
    // Nested type: ::UnityEngine::UIElements::Slider::UxmlFactory
    class UxmlFactory;
    // Nested type: ::UnityEngine::UIElements::Slider::UxmlTraits
    class UxmlTraits;
    // Get static field: static public readonly System.String ussClassName
    static ::StringW _get_ussClassName();
    // Set static field: static public readonly System.String ussClassName
    static void _set_ussClassName(::StringW value);
    // Get static field: static public readonly System.String labelUssClassName
    static ::StringW _get_labelUssClassName();
    // Set static field: static public readonly System.String labelUssClassName
    static void _set_labelUssClassName(::StringW value);
    // Get static field: static public readonly System.String inputUssClassName
    static ::StringW _get_inputUssClassName();
    // Set static field: static public readonly System.String inputUssClassName
    static void _set_inputUssClassName(::StringW value);
    // public System.Void .ctor(System.Single start, System.Single end, UnityEngine.UIElements.SliderDirection direction, System.Single pageSize)
    // Offset: 0x562DD2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Slider* New_ctor(float start, float end, ::UnityEngine::UIElements::SliderDirection direction, float pageSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Slider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Slider*, creationType>(start, end, direction, pageSize)));
    }
    // public System.Void .ctor(System.String label, System.Single start, System.Single end, UnityEngine.UIElements.SliderDirection direction, System.Single pageSize)
    // Offset: 0x562E238
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Slider* New_ctor(::StringW label, float start, float end, ::UnityEngine::UIElements::SliderDirection direction, float pageSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Slider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Slider*, creationType>(label, start, end, direction, pageSize)));
    }
    // public System.Void ApplyInputDeviceDelta(UnityEngine.Vector3 delta, UnityEngine.UIElements.DeltaSpeed speed, System.Single startValue)
    // Offset: 0x562E384
    void ApplyInputDeviceDelta(::UnityEngine::Vector3 delta, ::UnityEngine::UIElements::DeltaSpeed speed, float startValue);
    // System.Single SliderLerpUnclamped(System.Single a, System.Single b, System.Single interpolant)
    // Offset: 0x562E4A8
    float SliderLerpUnclamped(float a, float b, float interpolant);
    // System.Single SliderNormalizeValue(System.Single currentValue, System.Single lowerValue, System.Single higherValue)
    // Offset: 0x562DD5C
    float SliderNormalizeValue(float currentValue, float lowerValue, float higherValue);
    // System.Single ParseStringToValue(System.String stringValue)
    // Offset: 0x562E75C
    float ParseStringToValue(::StringW stringValue);
    // System.Void ComputeValueFromKey(UnityEngine.UIElements.BaseSlider`1/SliderKey<System.Single> sliderKey, System.Boolean isShift)
    // Offset: 0x562E82C
    void ComputeValueFromKey(typename ::UnityEngine::UIElements::BaseSlider_1<float>::SliderKey sliderKey, bool isShift);
    // public System.Void .ctor()
    // Offset: 0x562E220
    // Implemented from: UnityEngine.UIElements.BindableElement
    // Base method: System.Void BindableElement::.ctor()
    // Base method: System.Void VisualElement::.ctor()
    // Base method: System.Void Focusable::.ctor()
    // Base method: System.Void CallbackEventHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Slider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Slider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Slider*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x562EA2C
    // Implemented from: UnityEngine.UIElements.BaseSlider`1
    // Base method: System.Void BaseSlider_1::.cctor()
    // Base method: System.Void BaseField_1::.cctor()
    // Base method: System.Void VisualElement::.cctor()
    static void _cctor();
  }; // UnityEngine.UIElements.Slider
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::Slider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::Slider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::Slider::ApplyInputDeviceDelta
// Il2CppName: ApplyInputDeviceDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Slider::*)(::UnityEngine::Vector3, ::UnityEngine::UIElements::DeltaSpeed, float)>(&UnityEngine::UIElements::Slider::ApplyInputDeviceDelta)> {
  static const MethodInfo* get() {
    static auto* delta = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* speed = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "DeltaSpeed")->byval_arg;
    static auto* startValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Slider*), "ApplyInputDeviceDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delta, speed, startValue});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Slider::SliderLerpUnclamped
// Il2CppName: SliderLerpUnclamped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::Slider::*)(float, float, float)>(&UnityEngine::UIElements::Slider::SliderLerpUnclamped)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* interpolant = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Slider*), "SliderLerpUnclamped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, interpolant});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Slider::SliderNormalizeValue
// Il2CppName: SliderNormalizeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::Slider::*)(float, float, float)>(&UnityEngine::UIElements::Slider::SliderNormalizeValue)> {
  static const MethodInfo* get() {
    static auto* currentValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lowerValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* higherValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Slider*), "SliderNormalizeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentValue, lowerValue, higherValue});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Slider::ParseStringToValue
// Il2CppName: ParseStringToValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::Slider::*)(::StringW)>(&UnityEngine::UIElements::Slider::ParseStringToValue)> {
  static const MethodInfo* get() {
    static auto* stringValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Slider*), "ParseStringToValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stringValue});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Slider::ComputeValueFromKey
// Il2CppName: ComputeValueFromKey
// Cannot write MetadataGetter for a method that has a nested type with a declaring generic type anywhere within it!
// Talk to sc2ad if this is something you want
// Writing MetadataGetter for method: UnityEngine::UIElements::Slider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::Slider::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::Slider::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Slider*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
