// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UxmlTypeRestriction
#include "UnityEngine/UIElements/UxmlTypeRestriction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: UxmlEnumeration
  class UxmlEnumeration;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UxmlEnumeration);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UxmlEnumeration*, "UnityEngine.UIElements", "UxmlEnumeration");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UxmlEnumeration
  // [TokenAttribute] Offset: FFFFFFFF
  class UxmlEnumeration : public ::UnityEngine::UIElements::UxmlTypeRestriction {
    public:
    public:
    // private System.Collections.Generic.List`1<System.String> m_Values
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::StringW>* m_Values;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::StringW>*
    constexpr operator ::System::Collections::Generic::List_1<::StringW>*() const noexcept {
      return m_Values;
    }
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> m_Values
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_m_Values();
    // public System.Collections.Generic.IEnumerable`1<System.String> get_values()
    // Offset: 0x56C7EDC
    ::System::Collections::Generic::IEnumerable_1<::StringW>* get_values();
    // public System.Void set_values(System.Collections.Generic.IEnumerable`1<System.String> value)
    // Offset: 0x56C7EE4
    void set_values(::System::Collections::Generic::IEnumerable_1<::StringW>* value);
    // public override System.Boolean Equals(UnityEngine.UIElements.UxmlTypeRestriction other)
    // Offset: 0x56C7F48
    // Implemented from: UnityEngine.UIElements.UxmlTypeRestriction
    // Base method: System.Boolean UxmlTypeRestriction::Equals(UnityEngine.UIElements.UxmlTypeRestriction other)
    bool Equals(::UnityEngine::UIElements::UxmlTypeRestriction* other);
    // public System.Void .ctor()
    // Offset: 0x56C807C
    // Implemented from: UnityEngine.UIElements.UxmlTypeRestriction
    // Base method: System.Void UxmlTypeRestriction::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UxmlEnumeration* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UxmlEnumeration::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UxmlEnumeration*, creationType>()));
    }
  }; // UnityEngine.UIElements.UxmlEnumeration
  #pragma pack(pop)
  static check_size<sizeof(UxmlEnumeration), 16 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __UnityEngine_UIElements_UxmlEnumerationSizeCheck;
  static_assert(sizeof(UxmlEnumeration) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UxmlEnumeration::get_values
// Il2CppName: get_values
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::StringW>* (UnityEngine::UIElements::UxmlEnumeration::*)()>(&UnityEngine::UIElements::UxmlEnumeration::get_values)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UxmlEnumeration*), "get_values", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UxmlEnumeration::set_values
// Il2CppName: set_values
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UxmlEnumeration::*)(::System::Collections::Generic::IEnumerable_1<::StringW>*)>(&UnityEngine::UIElements::UxmlEnumeration::set_values)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UxmlEnumeration*), "set_values", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UxmlEnumeration::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UxmlEnumeration::*)(::UnityEngine::UIElements::UxmlTypeRestriction*)>(&UnityEngine::UIElements::UxmlEnumeration::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "UxmlTypeRestriction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UxmlEnumeration*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UxmlEnumeration::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
