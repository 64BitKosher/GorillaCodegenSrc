// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BaseField`1
#include "UnityEngine/UIElements/BaseField_1.hpp"
// Including type: UnityEngine.UIElements.IValueField`1
#include "UnityEngine/UIElements/IValueField_1.hpp"
// Including type: UnityEngine.UIElements.SliderDirection
#include "UnityEngine/UIElements/SliderDirection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Skipping declaration: SliderKey because it is already included!
  // Forward declaring type: EventBase
  class EventBase;
  // Forward declaring type: TextField
  class TextField;
  // Forward declaring type: ClampedDragger`1<T>
  template<typename T>
  class ClampedDragger_1;
  // Forward declaring type: KeyDownEvent
  class KeyDownEvent;
  // Forward declaring type: NavigationMoveEvent
  class NavigationMoveEvent;
  // Forward declaring type: GeometryChangedEvent
  class GeometryChangedEvent;
  // Forward declaring type: FocusInEvent
  class FocusInEvent;
  // Forward declaring type: FocusOutEvent
  class FocusOutEvent;
  // Forward declaring type: ChangeEvent`1<T>
  template<typename T>
  class ChangeEvent_1;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IComparable`1 because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: BaseSlider`1<TValueType>
  template<typename TValueType>
  class BaseSlider_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::BaseSlider_1, "UnityEngine.UIElements", "BaseSlider`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.BaseSlider`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TValueType>
  class BaseSlider_1 : public ::UnityEngine::UIElements::BaseField_1<TValueType>/*, public ::UnityEngine::UIElements::IValueField_1<TValueType>*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::BaseSlider_1::SliderKey<TValueType>
    struct SliderKey;
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.UIElements.BaseSlider`1/SliderKey
    // [TokenAttribute] Offset: FFFFFFFF
    struct SliderKey : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::Enum*/ {
      public:
      using declaring_type = BaseSlider_1<TValueType>*;
      static constexpr std::string_view NESTED_NAME = "SliderKey";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SliderKey
      constexpr SliderKey(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // Autogenerated static field getter
      // Get static field: static public UnityEngine.UIElements.BaseSlider`1/SliderKey<TValueType> None
      static typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey _get_None() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderKey::_get_None");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BaseSlider_1<TValueType>::SliderKey>::get(), "None"));
      }
      // Autogenerated static field setter
      // Set static field: static public UnityEngine.UIElements.BaseSlider`1/SliderKey<TValueType> None
      static void _set_None(typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderKey::_set_None");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BaseSlider_1<TValueType>::SliderKey>::get(), "None", value));
      }
      // Autogenerated static field getter
      // Get static field: static public UnityEngine.UIElements.BaseSlider`1/SliderKey<TValueType> Lowest
      static typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey _get_Lowest() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderKey::_get_Lowest");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BaseSlider_1<TValueType>::SliderKey>::get(), "Lowest"));
      }
      // Autogenerated static field setter
      // Set static field: static public UnityEngine.UIElements.BaseSlider`1/SliderKey<TValueType> Lowest
      static void _set_Lowest(typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderKey::_set_Lowest");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BaseSlider_1<TValueType>::SliderKey>::get(), "Lowest", value));
      }
      // Autogenerated static field getter
      // Get static field: static public UnityEngine.UIElements.BaseSlider`1/SliderKey<TValueType> LowerPage
      static typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey _get_LowerPage() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderKey::_get_LowerPage");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BaseSlider_1<TValueType>::SliderKey>::get(), "LowerPage"));
      }
      // Autogenerated static field setter
      // Set static field: static public UnityEngine.UIElements.BaseSlider`1/SliderKey<TValueType> LowerPage
      static void _set_LowerPage(typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderKey::_set_LowerPage");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BaseSlider_1<TValueType>::SliderKey>::get(), "LowerPage", value));
      }
      // Autogenerated static field getter
      // Get static field: static public UnityEngine.UIElements.BaseSlider`1/SliderKey<TValueType> Lower
      static typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey _get_Lower() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderKey::_get_Lower");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BaseSlider_1<TValueType>::SliderKey>::get(), "Lower"));
      }
      // Autogenerated static field setter
      // Set static field: static public UnityEngine.UIElements.BaseSlider`1/SliderKey<TValueType> Lower
      static void _set_Lower(typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderKey::_set_Lower");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BaseSlider_1<TValueType>::SliderKey>::get(), "Lower", value));
      }
      // Autogenerated static field getter
      // Get static field: static public UnityEngine.UIElements.BaseSlider`1/SliderKey<TValueType> Higher
      static typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey _get_Higher() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderKey::_get_Higher");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BaseSlider_1<TValueType>::SliderKey>::get(), "Higher"));
      }
      // Autogenerated static field setter
      // Set static field: static public UnityEngine.UIElements.BaseSlider`1/SliderKey<TValueType> Higher
      static void _set_Higher(typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderKey::_set_Higher");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BaseSlider_1<TValueType>::SliderKey>::get(), "Higher", value));
      }
      // Autogenerated static field getter
      // Get static field: static public UnityEngine.UIElements.BaseSlider`1/SliderKey<TValueType> HigherPage
      static typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey _get_HigherPage() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderKey::_get_HigherPage");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BaseSlider_1<TValueType>::SliderKey>::get(), "HigherPage"));
      }
      // Autogenerated static field setter
      // Set static field: static public UnityEngine.UIElements.BaseSlider`1/SliderKey<TValueType> HigherPage
      static void _set_HigherPage(typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderKey::_set_HigherPage");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BaseSlider_1<TValueType>::SliderKey>::get(), "HigherPage", value));
      }
      // Autogenerated static field getter
      // Get static field: static public UnityEngine.UIElements.BaseSlider`1/SliderKey<TValueType> Highest
      static typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey _get_Highest() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderKey::_get_Highest");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BaseSlider_1<TValueType>::SliderKey>::get(), "Highest"));
      }
      // Autogenerated static field setter
      // Set static field: static public UnityEngine.UIElements.BaseSlider`1/SliderKey<TValueType> Highest
      static void _set_Highest(typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderKey::_set_Highest");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BaseSlider_1<TValueType>::SliderKey>::get(), "Highest", value));
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderKey::dyn_value__");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
    }; // UnityEngine.UIElements.BaseSlider`1/SliderKey
    // Could not write size check! Type: UnityEngine.UIElements.BaseSlider`1/SliderKey is generic, or has no fields that are valid for size checks!
    public:
    // private UnityEngine.UIElements.VisualElement <dragContainer>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::VisualElement* dragContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.VisualElement <dragElement>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::VisualElement* dragElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.VisualElement <trackElement>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::VisualElement* trackElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.VisualElement <dragBorderElement>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::VisualElement* dragBorderElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.TextField <inputTextField>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::TextField* inputTextField;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::TextField*) == 0x8);
    // private System.Boolean m_IsEditingTextField
    // Size: 0x1
    // Offset: 0x0
    bool m_IsEditingTextField;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private TValueType m_LowValue
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    TValueType m_LowValue;
    // private TValueType m_HighValue
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    TValueType m_HighValue;
    // private System.Single m_PageSize
    // Size: 0x4
    // Offset: 0x0
    float m_PageSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_ShowInputField
    // Size: 0x1
    // Offset: 0x0
    bool m_ShowInputField;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <clamped>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool clamped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.UIElements.ClampedDragger`1<TValueType> <clampedDragger>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::ClampedDragger_1<TValueType>* clampedDragger;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::ClampedDragger_1<TValueType>*) == 0x8);
    // private UnityEngine.Rect m_DragElementStartPos
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Rect m_DragElementStartPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private UnityEngine.UIElements.SliderDirection m_Direction
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::UIElements::SliderDirection m_Direction;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::SliderDirection) == 0x4);
    // private System.Boolean m_Inverted
    // Size: 0x1
    // Offset: 0x0
    bool m_Inverted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IValueField_1<TValueType>
    operator ::UnityEngine::UIElements::IValueField_1<TValueType>() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IValueField_1<TValueType>*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String ussClassName
    static ::StringW _get_ussClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_get_ussClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "ussClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String ussClassName
    static void _set_ussClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_set_ussClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "ussClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String labelUssClassName
    static ::StringW _get_labelUssClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_get_labelUssClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "labelUssClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String labelUssClassName
    static void _set_labelUssClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_set_labelUssClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "labelUssClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String inputUssClassName
    static ::StringW _get_inputUssClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_get_inputUssClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "inputUssClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String inputUssClassName
    static void _set_inputUssClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_set_inputUssClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "inputUssClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String horizontalVariantUssClassName
    static ::StringW _get_horizontalVariantUssClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_get_horizontalVariantUssClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "horizontalVariantUssClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String horizontalVariantUssClassName
    static void _set_horizontalVariantUssClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_set_horizontalVariantUssClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "horizontalVariantUssClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String verticalVariantUssClassName
    static ::StringW _get_verticalVariantUssClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_get_verticalVariantUssClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "verticalVariantUssClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String verticalVariantUssClassName
    static void _set_verticalVariantUssClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_set_verticalVariantUssClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "verticalVariantUssClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String dragContainerUssClassName
    static ::StringW _get_dragContainerUssClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_get_dragContainerUssClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "dragContainerUssClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String dragContainerUssClassName
    static void _set_dragContainerUssClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_set_dragContainerUssClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "dragContainerUssClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String trackerUssClassName
    static ::StringW _get_trackerUssClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_get_trackerUssClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "trackerUssClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String trackerUssClassName
    static void _set_trackerUssClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_set_trackerUssClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "trackerUssClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String draggerUssClassName
    static ::StringW _get_draggerUssClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_get_draggerUssClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "draggerUssClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String draggerUssClassName
    static void _set_draggerUssClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_set_draggerUssClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "draggerUssClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String draggerBorderUssClassName
    static ::StringW _get_draggerBorderUssClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_get_draggerBorderUssClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "draggerBorderUssClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String draggerBorderUssClassName
    static void _set_draggerBorderUssClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_set_draggerBorderUssClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "draggerBorderUssClassName", value));
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.String textFieldClassName
    static ::StringW _get_textFieldClassName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_get_textFieldClassName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "textFieldClassName"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.String textFieldClassName
    static void _set_textFieldClassName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::_set_textFieldClassName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "textFieldClassName", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.VisualElement <dragContainer>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_$dragContainer$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::dyn_$dragContainer$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<dragContainer>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::VisualElement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.VisualElement <dragElement>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_$dragElement$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::dyn_$dragElement$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<dragElement>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::VisualElement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.VisualElement <trackElement>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_$trackElement$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::dyn_$trackElement$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<trackElement>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::VisualElement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.VisualElement <dragBorderElement>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_$dragBorderElement$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::dyn_$dragBorderElement$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<dragBorderElement>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::VisualElement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.TextField <inputTextField>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::TextField*& dyn_$inputTextField$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::dyn_$inputTextField$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<inputTextField>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::TextField**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean m_IsEditingTextField
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsEditingTextField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::dyn_m_IsEditingTextField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_IsEditingTextField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private TValueType m_LowValue
    [[deprecated("Use field access instead!")]] TValueType& dyn_m_LowValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::dyn_m_LowValue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LowValue"))->offset;
      return *reinterpret_cast<TValueType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private TValueType m_HighValue
    [[deprecated("Use field access instead!")]] TValueType& dyn_m_HighValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::dyn_m_HighValue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_HighValue"))->offset;
      return *reinterpret_cast<TValueType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Single m_PageSize
    [[deprecated("Use field access instead!")]] float& dyn_m_PageSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::dyn_m_PageSize");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PageSize"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean m_ShowInputField
    [[deprecated("Use field access instead!")]] bool& dyn_m_ShowInputField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::dyn_m_ShowInputField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ShowInputField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <clamped>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$clamped$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::dyn_$clamped$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<clamped>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.ClampedDragger`1<TValueType> <clampedDragger>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::ClampedDragger_1<TValueType>*& dyn_$clampedDragger$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::dyn_$clampedDragger$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<clampedDragger>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::ClampedDragger_1<TValueType>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Rect m_DragElementStartPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_m_DragElementStartPos() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::dyn_m_DragElementStartPos");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DragElementStartPos"))->offset;
      return *reinterpret_cast<::UnityEngine::Rect*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.SliderDirection m_Direction
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::SliderDirection& dyn_m_Direction() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::dyn_m_Direction");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Direction"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::SliderDirection*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean m_Inverted
    [[deprecated("Use field access instead!")]] bool& dyn_m_Inverted() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::dyn_m_Inverted");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Inverted"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // UnityEngine.UIElements.VisualElement get_dragContainer()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::VisualElement* get_dragContainer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::get_dragContainer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dragContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::VisualElement*, false>(this, ___internal__method);
    }
    // private System.Void set_dragContainer(UnityEngine.UIElements.VisualElement value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_dragContainer(::UnityEngine::UIElements::VisualElement* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::set_dragContainer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dragContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // UnityEngine.UIElements.VisualElement get_dragElement()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::VisualElement* get_dragElement() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::get_dragElement");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dragElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::VisualElement*, false>(this, ___internal__method);
    }
    // private System.Void set_dragElement(UnityEngine.UIElements.VisualElement value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_dragElement(::UnityEngine::UIElements::VisualElement* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::set_dragElement");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dragElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // UnityEngine.UIElements.VisualElement get_trackElement()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::VisualElement* get_trackElement() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::get_trackElement");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_trackElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::VisualElement*, false>(this, ___internal__method);
    }
    // private System.Void set_trackElement(UnityEngine.UIElements.VisualElement value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_trackElement(::UnityEngine::UIElements::VisualElement* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::set_trackElement");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_trackElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // UnityEngine.UIElements.VisualElement get_dragBorderElement()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::VisualElement* get_dragBorderElement() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::get_dragBorderElement");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dragBorderElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::VisualElement*, false>(this, ___internal__method);
    }
    // private System.Void set_dragBorderElement(UnityEngine.UIElements.VisualElement value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_dragBorderElement(::UnityEngine::UIElements::VisualElement* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::set_dragBorderElement");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dragBorderElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // UnityEngine.UIElements.TextField get_inputTextField()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::TextField* get_inputTextField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::get_inputTextField");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inputTextField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::TextField*, false>(this, ___internal__method);
    }
    // private System.Void set_inputTextField(UnityEngine.UIElements.TextField value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_inputTextField(::UnityEngine::UIElements::TextField* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::set_inputTextField");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_inputTextField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public TValueType get_lowValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValueType get_lowValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::get_lowValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lowValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<TValueType, false>(this, ___internal__method);
    }
    // public System.Void set_lowValue(TValueType value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_lowValue(TValueType value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::set_lowValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lowValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public TValueType get_highValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValueType get_highValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::get_highValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_highValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<TValueType, false>(this, ___internal__method);
    }
    // public System.Void set_highValue(TValueType value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_highValue(TValueType value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::set_highValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_highValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // System.Void SetHighValueWithoutNotify(TValueType newHighValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetHighValueWithoutNotify(TValueType newHighValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SetHighValueWithoutNotify");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighValueWithoutNotify", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newHighValue)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newHighValue);
    }
    // public System.Single get_pageSize()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_pageSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::get_pageSize");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseSlider_1<TValueType>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
    // public System.Void set_pageSize(System.Single value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_pageSize(float value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::set_pageSize");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseSlider_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Boolean get_showInputField()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_showInputField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::get_showInputField");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseSlider_1<TValueType>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void set_showInputField(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_showInputField(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::set_showInputField");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseSlider_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // System.Boolean get_clamped()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_clamped() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::get_clamped");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clamped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // System.Void set_clamped(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_clamped(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::set_clamped");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clamped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // UnityEngine.UIElements.ClampedDragger`1<TValueType> get_clampedDragger()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::ClampedDragger_1<TValueType>* get_clampedDragger() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::get_clampedDragger");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clampedDragger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::ClampedDragger_1<TValueType>*, false>(this, ___internal__method);
    }
    // private System.Void set_clampedDragger(UnityEngine.UIElements.ClampedDragger`1<TValueType> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_clampedDragger(::UnityEngine::UIElements::ClampedDragger_1<TValueType>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::set_clampedDragger");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clampedDragger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // private TValueType Clamp(TValueType value, TValueType lowBound, TValueType highBound)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValueType Clamp(TValueType value, TValueType lowBound, TValueType highBound) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::Clamp");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(lowBound), ::il2cpp_utils::ExtractType(highBound)})));
      return ::il2cpp_utils::RunMethodRethrow<TValueType, false>(this, ___internal__method, value, lowBound, highBound);
    }
    // private TValueType GetClampedValue(TValueType newValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValueType GetClampedValue(TValueType newValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::GetClampedValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClampedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newValue)})));
      return ::il2cpp_utils::RunMethodRethrow<TValueType, false>(this, ___internal__method, newValue);
    }
    // public System.Void ApplyInputDeviceDelta(UnityEngine.Vector3 delta, UnityEngine.UIElements.DeltaSpeed speed, TValueType startValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ApplyInputDeviceDelta(::UnityEngine::Vector3 delta, ::UnityEngine::UIElements::DeltaSpeed speed, TValueType startValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::ApplyInputDeviceDelta");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseSlider_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, delta, speed, startValue);
    }
    // private System.Void UnityEngine.UIElements.IValueField<TValueType>.StartDragging()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UnityEngine_UIElements_IValueField$TValueType$_StartDragging() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::UnityEngine.UIElements.IValueField<TValueType>.StartDragging");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseSlider_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void UnityEngine.UIElements.IValueField<TValueType>.StopDragging()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UnityEngine_UIElements_IValueField$TValueType$_StopDragging() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::UnityEngine.UIElements.IValueField<TValueType>.StopDragging");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseSlider_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public UnityEngine.UIElements.SliderDirection get_direction()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::SliderDirection get_direction() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::get_direction");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_direction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::SliderDirection, false>(this, ___internal__method);
    }
    // public System.Void set_direction(UnityEngine.UIElements.SliderDirection value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_direction(::UnityEngine::UIElements::SliderDirection value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::set_direction");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_direction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Boolean get_inverted()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_inverted() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::get_inverted");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inverted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void set_inverted(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_inverted(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::set_inverted");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_inverted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // System.Void .ctor(System.String label, TValueType start, TValueType end, UnityEngine.UIElements.SliderDirection direction, System.Single pageSize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseSlider_1<TValueType>* New_ctor(::StringW label, TValueType start, TValueType end, ::UnityEngine::UIElements::SliderDirection direction, float pageSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseSlider_1<TValueType>*, creationType>(label, start, end, direction, pageSize)));
    }
    // static protected System.Single GetClosestPowerOfTen(System.Single positiveNumber)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static float GetClosestPowerOfTen(float positiveNumber) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::GetClosestPowerOfTen");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "GetClosestPowerOfTen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positiveNumber)})));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, positiveNumber);
    }
    // static protected System.Single RoundToMultipleOf(System.Single value, System.Single roundingValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static float RoundToMultipleOf(float value, float roundingValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::RoundToMultipleOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), "RoundToMultipleOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(roundingValue)})));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value, roundingValue);
    }
    // private System.Void ClampValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ClampValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::ClampValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClampValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // TValueType SliderLerpUnclamped(TValueType a, TValueType b, System.Single interpolant)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValueType SliderLerpUnclamped(TValueType a, TValueType b, float interpolant) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderLerpUnclamped");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseSlider_1<TValueType>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<TValueType, false>(this, ___internal__method, a, b, interpolant);
    }
    // System.Single SliderNormalizeValue(TValueType currentValue, TValueType lowerValue, TValueType higherValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    float SliderNormalizeValue(TValueType currentValue, TValueType lowerValue, TValueType higherValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderNormalizeValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseSlider_1<TValueType>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, currentValue, lowerValue, higherValue);
    }
    // TValueType ParseStringToValue(System.String stringValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValueType ParseStringToValue(::StringW stringValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::ParseStringToValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseSlider_1<TValueType>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<TValueType, false>(this, ___internal__method, stringValue);
    }
    // System.Void ComputeValueFromKey(UnityEngine.UIElements.BaseSlider`1/SliderKey<TValueType> sliderKey, System.Boolean isShift)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ComputeValueFromKey(typename ::UnityEngine::UIElements::BaseSlider_1<TValueType>::SliderKey sliderKey, bool isShift) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::ComputeValueFromKey");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseSlider_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderKey, isShift);
    }
    // private TValueType SliderLerpDirectionalUnclamped(TValueType a, TValueType b, System.Single positionInterpolant)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValueType SliderLerpDirectionalUnclamped(TValueType a, TValueType b, float positionInterpolant) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SliderLerpDirectionalUnclamped");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SliderLerpDirectionalUnclamped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(positionInterpolant)})));
      return ::il2cpp_utils::RunMethodRethrow<TValueType, false>(this, ___internal__method, a, b, positionInterpolant);
    }
    // private System.Void SetSliderValueFromDrag()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetSliderValueFromDrag() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SetSliderValueFromDrag");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSliderValueFromDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void ComputeValueAndDirectionFromDrag(System.Single sliderLength, System.Single dragElementLength, System.Single dragElementPos)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ComputeValueAndDirectionFromDrag(float sliderLength, float dragElementLength, float dragElementPos) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::ComputeValueAndDirectionFromDrag");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeValueAndDirectionFromDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sliderLength), ::il2cpp_utils::ExtractType(dragElementLength), ::il2cpp_utils::ExtractType(dragElementPos)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderLength, dragElementLength, dragElementPos);
    }
    // private System.Void SetSliderValueFromClick()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetSliderValueFromClick() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SetSliderValueFromClick");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSliderValueFromClick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void OnKeyDown(UnityEngine.UIElements.KeyDownEvent evt)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnKeyDown(::UnityEngine::UIElements::KeyDownEvent* evt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::OnKeyDown");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnKeyDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt);
    }
    // private System.Void OnNavigationMove(UnityEngine.UIElements.NavigationMoveEvent evt)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnNavigationMove(::UnityEngine::UIElements::NavigationMoveEvent* evt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::OnNavigationMove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNavigationMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt);
    }
    // System.Void ComputeValueAndDirectionFromClick(System.Single sliderLength, System.Single dragElementLength, System.Single dragElementPos, System.Single dragElementLastPos)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ComputeValueAndDirectionFromClick(float sliderLength, float dragElementLength, float dragElementPos, float dragElementLastPos) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::ComputeValueAndDirectionFromClick");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseSlider_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sliderLength, dragElementLength, dragElementPos, dragElementLastPos);
    }
    // public System.Void AdjustDragElement(System.Single factor)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AdjustDragElement(float factor) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::AdjustDragElement");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustDragElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(factor)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, factor);
    }
    // private System.Void UpdateDragElementPosition(UnityEngine.UIElements.GeometryChangedEvent evt)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateDragElementPosition(::UnityEngine::UIElements::GeometryChangedEvent* evt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::UpdateDragElementPosition");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDragElementPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt);
    }
    // private System.Boolean SameValues(System.Single a, System.Single b, System.Single epsilon)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool SameValues(float a, float b, float epsilon) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SameValues");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SameValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(epsilon)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, a, b, epsilon);
    }
    // private System.Void UpdateDragElementPosition()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateDragElementPosition() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::UpdateDragElementPosition");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDragElementPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void UpdateTextFieldVisibility()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateTextFieldVisibility() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::UpdateTextFieldVisibility");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTextFieldVisibility", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void UpdateTextFieldValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateTextFieldValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::UpdateTextFieldValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTextFieldValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void OnTextFieldFocusIn(UnityEngine.UIElements.FocusInEvent evt)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnTextFieldFocusIn(::UnityEngine::UIElements::FocusInEvent* evt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::OnTextFieldFocusIn");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTextFieldFocusIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt);
    }
    // private System.Void OnTextFieldFocusOut(UnityEngine.UIElements.FocusOutEvent evt)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnTextFieldFocusOut(::UnityEngine::UIElements::FocusOutEvent* evt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::OnTextFieldFocusOut");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTextFieldFocusOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt);
    }
    // private System.Void OnInputNavigationMoveEvent(UnityEngine.UIElements.NavigationMoveEvent evt)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnInputNavigationMoveEvent(::UnityEngine::UIElements::NavigationMoveEvent* evt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::OnInputNavigationMoveEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInputNavigationMoveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt);
    }
    // private System.Void OnTextFieldValueChange(UnityEngine.UIElements.ChangeEvent`1<System.String> evt)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnTextFieldValueChange(::UnityEngine::UIElements::ChangeEvent_1<::StringW>* evt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::OnTextFieldValueChange");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTextFieldValueChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt);
    }
    // public override TValueType get_value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: TValueType BaseField_1::get_value()
    TValueType get_value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::get_value");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<TValueType, false>(this, ___internal__method);
    }
    // public override System.Void set_value(TValueType value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: System.Void BaseField_1::set_value(TValueType value)
    void set_value(TValueType value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::set_value");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public override System.Void SetValueWithoutNotify(TValueType newValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: System.Void BaseField_1::SetValueWithoutNotify(TValueType newValue)
    void SetValueWithoutNotify(TValueType newValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::SetValueWithoutNotify");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newValue);
    }
    // override System.Void OnViewDataReady()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: System.Void BaseField_1::OnViewDataReady()
    void OnViewDataReady() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::OnViewDataReady");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected override System.Void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.VisualElement
    // Base method: System.Void VisualElement::ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt)
    void ExecuteDefaultAction(::UnityEngine::UIElements::EventBase* evt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::ExecuteDefaultAction");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::VisualElement*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt);
    }
    // protected override System.Void UpdateMixedValueContent()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: System.Void BaseField_1::UpdateMixedValueContent()
    void UpdateMixedValueContent() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::UpdateMixedValueContent");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::BaseField_1<TValueType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: System.Void BaseField_1::.cctor()
    // Base method: System.Void VisualElement::.cctor()
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseSlider_1::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BaseSlider_1<TValueType>*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
  }; // UnityEngine.UIElements.BaseSlider`1
  // Could not write size check! Type: UnityEngine.UIElements.BaseSlider`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
