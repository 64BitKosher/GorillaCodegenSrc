// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: BaseUxmlTraits
  class BaseUxmlTraits;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::BaseUxmlTraits);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::BaseUxmlTraits*, "UnityEngine.UIElements", "BaseUxmlTraits");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x11
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.BaseUxmlTraits
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseUxmlTraits : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean <canHaveAnyAttribute>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool canHaveAnyAttribute;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return canHaveAnyAttribute;
    }
    // Get instance field reference: private System.Boolean <canHaveAnyAttribute>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$canHaveAnyAttribute$k__BackingField();
    // protected System.Void .ctor()
    // Offset: 0x56C7080
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseUxmlTraits* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseUxmlTraits::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseUxmlTraits*, creationType>()));
    }
    // protected System.Void set_canHaveAnyAttribute(System.Boolean value)
    // Offset: 0x56C70A0
    void set_canHaveAnyAttribute(bool value);
  }; // UnityEngine.UIElements.BaseUxmlTraits
  #pragma pack(pop)
  static check_size<sizeof(BaseUxmlTraits), 16 + sizeof(bool)> __UnityEngine_UIElements_BaseUxmlTraitsSizeCheck;
  static_assert(sizeof(BaseUxmlTraits) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseUxmlTraits::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseUxmlTraits::set_canHaveAnyAttribute
// Il2CppName: set_canHaveAnyAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseUxmlTraits::*)(bool)>(&UnityEngine::UIElements::BaseUxmlTraits::set_canHaveAnyAttribute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseUxmlTraits*), "set_canHaveAnyAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
