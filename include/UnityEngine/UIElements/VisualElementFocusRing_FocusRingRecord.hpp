// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.VisualElementFocusRing
#include "UnityEngine/UIElements/VisualElementFocusRing.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Focusable
  class Focusable;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::VisualElementFocusRing::FocusRingRecord);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualElementFocusRing::FocusRingRecord*, "UnityEngine.UIElements", "VisualElementFocusRing/FocusRingRecord");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.VisualElementFocusRing/FocusRingRecord
  // [TokenAttribute] Offset: FFFFFFFF
  class VisualElementFocusRing::FocusRingRecord : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 m_AutoIndex
    // Size: 0x4
    // Offset: 0x10
    int m_AutoIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_AutoIndex and: m_Focusable
    char __padding0[0x4] = {};
    // public UnityEngine.UIElements.Focusable m_Focusable
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::Focusable* m_Focusable;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Focusable*) == 0x8);
    // public System.Boolean m_IsSlot
    // Size: 0x1
    // Offset: 0x20
    bool m_IsSlot;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_IsSlot and: m_ScopeNavigationOrder
    char __padding2[0x7] = {};
    // public System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElementFocusRing/FocusRingRecord> m_ScopeNavigationOrder
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElementFocusRing::FocusRingRecord*>* m_ScopeNavigationOrder;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElementFocusRing::FocusRingRecord*>*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 m_AutoIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_AutoIndex();
    // Get instance field reference: public UnityEngine.UIElements.Focusable m_Focusable
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Focusable*& dyn_m_Focusable();
    // Get instance field reference: public System.Boolean m_IsSlot
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsSlot();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElementFocusRing/FocusRingRecord> m_ScopeNavigationOrder
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElementFocusRing::FocusRingRecord*>*& dyn_m_ScopeNavigationOrder();
    // public System.Void .ctor()
    // Offset: 0x55C32A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisualElementFocusRing::FocusRingRecord* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VisualElementFocusRing::FocusRingRecord::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisualElementFocusRing::FocusRingRecord*, creationType>()));
    }
  }; // UnityEngine.UIElements.VisualElementFocusRing/FocusRingRecord
  #pragma pack(pop)
  static check_size<sizeof(VisualElementFocusRing::FocusRingRecord), 40 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElementFocusRing::FocusRingRecord*>*)> __UnityEngine_UIElements_VisualElementFocusRing_FocusRingRecordSizeCheck;
  static_assert(sizeof(VisualElementFocusRing::FocusRingRecord) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualElementFocusRing::FocusRingRecord::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
