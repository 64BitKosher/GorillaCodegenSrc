// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.PanelSettings
#include "UnityEngine/UIElements/PanelSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: BaseRuntimePanel
  class BaseRuntimePanel;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::PanelSettings::RuntimePanelAccess);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::PanelSettings::RuntimePanelAccess*, "UnityEngine.UIElements", "PanelSettings/RuntimePanelAccess");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.PanelSettings/RuntimePanelAccess
  // [TokenAttribute] Offset: FFFFFFFF
  class PanelSettings::RuntimePanelAccess : public ::Il2CppObject {
    public:
    public:
    // private readonly UnityEngine.UIElements.PanelSettings m_Settings
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::PanelSettings* m_Settings;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::PanelSettings*) == 0x8);
    // private UnityEngine.UIElements.BaseRuntimePanel m_RuntimePanel
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::BaseRuntimePanel* m_RuntimePanel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BaseRuntimePanel*) == 0x8);
    public:
    // Get instance field reference: private readonly UnityEngine.UIElements.PanelSettings m_Settings
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::PanelSettings*& dyn_m_Settings();
    // Get instance field reference: private UnityEngine.UIElements.BaseRuntimePanel m_RuntimePanel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BaseRuntimePanel*& dyn_m_RuntimePanel();
    // System.Void .ctor(UnityEngine.UIElements.PanelSettings settings)
    // Offset: 0x565D28C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PanelSettings::RuntimePanelAccess* New_ctor(::UnityEngine::UIElements::PanelSettings* settings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PanelSettings::RuntimePanelAccess*, creationType>(settings)));
    }
    // System.Boolean get_isInitialized()
    // Offset: 0x565D2BC
    bool get_isInitialized();
    // UnityEngine.UIElements.BaseRuntimePanel get_panel()
    // Offset: 0x565D2CC
    ::UnityEngine::UIElements::BaseRuntimePanel* get_panel();
    // System.Void DisposePanel()
    // Offset: 0x565D614
    void DisposePanel();
    // System.Void SetTargetTexture()
    // Offset: 0x565D6B0
    void SetTargetTexture();
    // System.Void SetSortingPriority()
    // Offset: 0x565D6E4
    void SetSortingPriority();
    // System.Void SetTargetDisplay()
    // Offset: 0x565D714
    void SetTargetDisplay();
    // private UnityEngine.UIElements.BaseRuntimePanel CreateRelatedRuntimePanel()
    // Offset: 0x565D420
    ::UnityEngine::UIElements::BaseRuntimePanel* CreateRelatedRuntimePanel();
    // private System.Void DisposeRelatedPanel()
    // Offset: 0x565D654
    void DisposeRelatedPanel();
    // System.Void MarkPotentiallyEmpty()
    // Offset: 0x565D73C
    void MarkPotentiallyEmpty();
  }; // UnityEngine.UIElements.PanelSettings/RuntimePanelAccess
  #pragma pack(pop)
  static check_size<sizeof(PanelSettings::RuntimePanelAccess), 24 + sizeof(::UnityEngine::UIElements::BaseRuntimePanel*)> __UnityEngine_UIElements_PanelSettings_RuntimePanelAccessSizeCheck;
  static_assert(sizeof(PanelSettings::RuntimePanelAccess) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::get_isInitialized
// Il2CppName: get_isInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::*)()>(&UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::get_isInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings::RuntimePanelAccess*), "get_isInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::get_panel
// Il2CppName: get_panel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::BaseRuntimePanel* (UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::*)()>(&UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::get_panel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings::RuntimePanelAccess*), "get_panel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::DisposePanel
// Il2CppName: DisposePanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::*)()>(&UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::DisposePanel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings::RuntimePanelAccess*), "DisposePanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::SetTargetTexture
// Il2CppName: SetTargetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::*)()>(&UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::SetTargetTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings::RuntimePanelAccess*), "SetTargetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::SetSortingPriority
// Il2CppName: SetSortingPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::*)()>(&UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::SetSortingPriority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings::RuntimePanelAccess*), "SetSortingPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::SetTargetDisplay
// Il2CppName: SetTargetDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::*)()>(&UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::SetTargetDisplay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings::RuntimePanelAccess*), "SetTargetDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::CreateRelatedRuntimePanel
// Il2CppName: CreateRelatedRuntimePanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::BaseRuntimePanel* (UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::*)()>(&UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::CreateRelatedRuntimePanel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings::RuntimePanelAccess*), "CreateRelatedRuntimePanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::DisposeRelatedPanel
// Il2CppName: DisposeRelatedPanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::*)()>(&UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::DisposeRelatedPanel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings::RuntimePanelAccess*), "DisposeRelatedPanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::MarkPotentiallyEmpty
// Il2CppName: MarkPotentiallyEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::*)()>(&UnityEngine::UIElements::PanelSettings::RuntimePanelAccess::MarkPotentiallyEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings::RuntimePanelAccess*), "MarkPotentiallyEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
