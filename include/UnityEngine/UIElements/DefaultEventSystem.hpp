// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.EventModifiers
#include "UnityEngine/EventModifiers.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: BaseRuntimePanel
  class BaseRuntimePanel;
  // Forward declaring type: Focusable
  class Focusable;
  // Forward declaring type: EventBase
  class EventBase;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Event
  class Event;
  // Forward declaring type: Touch
  struct Touch;
  // Forward declaring type: PenData
  struct PenData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Func`4<T1, T2, T3, TResult>
  template<typename T1, typename T2, typename T3, typename TResult>
  class Func_4;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: DefaultEventSystem
  class DefaultEventSystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::DefaultEventSystem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::DefaultEventSystem*, "UnityEngine.UIElements", "DefaultEventSystem");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x94
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.DefaultEventSystem
  // [TokenAttribute] Offset: FFFFFFFF
  class DefaultEventSystem : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::UIElements::DefaultEventSystem::UpdateMode
    struct UpdateMode;
    // Nested type: ::UnityEngine::UIElements::DefaultEventSystem::FocusBasedEventSequenceContext
    struct FocusBasedEventSequenceContext;
    // Nested type: ::UnityEngine::UIElements::DefaultEventSystem::IInput
    class IInput;
    // Nested type: ::UnityEngine::UIElements::DefaultEventSystem::Input
    class Input;
    // Nested type: ::UnityEngine::UIElements::DefaultEventSystem::NoInput
    class NoInput;
    // Nested type: ::UnityEngine::UIElements::DefaultEventSystem::$$c
    class $$c;
    public:
    // private UnityEngine.UIElements.DefaultEventSystem/IInput m_Input
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::DefaultEventSystem::IInput* m_Input;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::DefaultEventSystem::IInput*) == 0x8);
    // private readonly System.String m_HorizontalAxis
    // Size: 0x8
    // Offset: 0x18
    ::StringW m_HorizontalAxis;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String m_VerticalAxis
    // Size: 0x8
    // Offset: 0x20
    ::StringW m_VerticalAxis;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String m_SubmitButton
    // Size: 0x8
    // Offset: 0x28
    ::StringW m_SubmitButton;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String m_CancelButton
    // Size: 0x8
    // Offset: 0x30
    ::StringW m_CancelButton;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Single m_InputActionsPerSecond
    // Size: 0x4
    // Offset: 0x38
    float m_InputActionsPerSecond;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single m_RepeatDelay
    // Size: 0x4
    // Offset: 0x3C
    float m_RepeatDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_SendingTouchEvents
    // Size: 0x1
    // Offset: 0x40
    bool m_SendingTouchEvents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_SendingPenEvent
    // Size: 0x1
    // Offset: 0x41
    bool m_SendingPenEvent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_SendingPenEvent and: m_Event
    char __padding8[0x6] = {};
    // private UnityEngine.Event m_Event
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Event* m_Event;
    // Field size check
    static_assert(sizeof(::UnityEngine::Event*) == 0x8);
    // private UnityEngine.UIElements.BaseRuntimePanel m_FocusedPanel
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UIElements::BaseRuntimePanel* m_FocusedPanel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BaseRuntimePanel*) == 0x8);
    // private UnityEngine.UIElements.BaseRuntimePanel m_PreviousFocusedPanel
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::UIElements::BaseRuntimePanel* m_PreviousFocusedPanel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BaseRuntimePanel*) == 0x8);
    // private UnityEngine.UIElements.Focusable m_PreviousFocusedElement
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::UIElements::Focusable* m_PreviousFocusedElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Focusable*) == 0x8);
    // private UnityEngine.EventModifiers m_CurrentModifiers
    // Size: 0x4
    // Offset: 0x68
    ::UnityEngine::EventModifiers m_CurrentModifiers;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventModifiers) == 0x4);
    // private System.Int32 m_LastMousePressButton
    // Size: 0x4
    // Offset: 0x6C
    int m_LastMousePressButton;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_NextMousePressTime
    // Size: 0x4
    // Offset: 0x70
    float m_NextMousePressTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_LastMouseClickCount
    // Size: 0x4
    // Offset: 0x74
    int m_LastMouseClickCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector2 m_LastMousePosition
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Vector2 m_LastMousePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Boolean m_MouseProcessedAtLeastOnce
    // Size: 0x1
    // Offset: 0x80
    bool m_MouseProcessedAtLeastOnce;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_MouseProcessedAtLeastOnce and: m_ConsecutiveMoveCount
    char __padding18[0x3] = {};
    // private System.Int32 m_ConsecutiveMoveCount
    // Size: 0x4
    // Offset: 0x84
    int m_ConsecutiveMoveCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector2 m_LastMoveVector
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Vector2 m_LastMoveVector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single m_PrevActionTime
    // Size: 0x4
    // Offset: 0x90
    float m_PrevActionTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static System.Func`1<System.Boolean> IsEditorRemoteConnected
    static ::System::Func_1<bool>* _get_IsEditorRemoteConnected();
    // Set static field: static System.Func`1<System.Boolean> IsEditorRemoteConnected
    static void _set_IsEditorRemoteConnected(::System::Func_1<bool>* value);
    // Get instance field reference: private UnityEngine.UIElements.DefaultEventSystem/IInput m_Input
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::DefaultEventSystem::IInput*& dyn_m_Input();
    // Get instance field reference: private readonly System.String m_HorizontalAxis
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_HorizontalAxis();
    // Get instance field reference: private readonly System.String m_VerticalAxis
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_VerticalAxis();
    // Get instance field reference: private readonly System.String m_SubmitButton
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_SubmitButton();
    // Get instance field reference: private readonly System.String m_CancelButton
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_CancelButton();
    // Get instance field reference: private readonly System.Single m_InputActionsPerSecond
    [[deprecated("Use field access instead!")]] float& dyn_m_InputActionsPerSecond();
    // Get instance field reference: private readonly System.Single m_RepeatDelay
    [[deprecated("Use field access instead!")]] float& dyn_m_RepeatDelay();
    // Get instance field reference: private System.Boolean m_SendingTouchEvents
    [[deprecated("Use field access instead!")]] bool& dyn_m_SendingTouchEvents();
    // Get instance field reference: private System.Boolean m_SendingPenEvent
    [[deprecated("Use field access instead!")]] bool& dyn_m_SendingPenEvent();
    // Get instance field reference: private UnityEngine.Event m_Event
    [[deprecated("Use field access instead!")]] ::UnityEngine::Event*& dyn_m_Event();
    // Get instance field reference: private UnityEngine.UIElements.BaseRuntimePanel m_FocusedPanel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BaseRuntimePanel*& dyn_m_FocusedPanel();
    // Get instance field reference: private UnityEngine.UIElements.BaseRuntimePanel m_PreviousFocusedPanel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BaseRuntimePanel*& dyn_m_PreviousFocusedPanel();
    // Get instance field reference: private UnityEngine.UIElements.Focusable m_PreviousFocusedElement
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Focusable*& dyn_m_PreviousFocusedElement();
    // Get instance field reference: private UnityEngine.EventModifiers m_CurrentModifiers
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventModifiers& dyn_m_CurrentModifiers();
    // Get instance field reference: private System.Int32 m_LastMousePressButton
    [[deprecated("Use field access instead!")]] int& dyn_m_LastMousePressButton();
    // Get instance field reference: private System.Single m_NextMousePressTime
    [[deprecated("Use field access instead!")]] float& dyn_m_NextMousePressTime();
    // Get instance field reference: private System.Int32 m_LastMouseClickCount
    [[deprecated("Use field access instead!")]] int& dyn_m_LastMouseClickCount();
    // Get instance field reference: private UnityEngine.Vector2 m_LastMousePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_LastMousePosition();
    // Get instance field reference: private System.Boolean m_MouseProcessedAtLeastOnce
    [[deprecated("Use field access instead!")]] bool& dyn_m_MouseProcessedAtLeastOnce();
    // Get instance field reference: private System.Int32 m_ConsecutiveMoveCount
    [[deprecated("Use field access instead!")]] int& dyn_m_ConsecutiveMoveCount();
    // Get instance field reference: private UnityEngine.Vector2 m_LastMoveVector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_LastMoveVector();
    // Get instance field reference: private System.Single m_PrevActionTime
    [[deprecated("Use field access instead!")]] float& dyn_m_PrevActionTime();
    // private System.Boolean get_isAppFocused()
    // Offset: 0x5636B60
    bool get_isAppFocused();
    // UnityEngine.UIElements.DefaultEventSystem/IInput get_input()
    // Offset: 0x5636BB0
    ::UnityEngine::UIElements::DefaultEventSystem::IInput* get_input();
    // private UnityEngine.UIElements.DefaultEventSystem/IInput GetDefaultInput()
    // Offset: 0x5636BF0
    ::UnityEngine::UIElements::DefaultEventSystem::IInput* GetDefaultInput();
    // private System.Boolean ShouldIgnoreEventsOnAppNotFocused()
    // Offset: 0x5636D94
    bool ShouldIgnoreEventsOnAppNotFocused();
    // public UnityEngine.UIElements.BaseRuntimePanel get_focusedPanel()
    // Offset: 0x5636DB4
    ::UnityEngine::UIElements::BaseRuntimePanel* get_focusedPanel();
    // public System.Void set_focusedPanel(UnityEngine.UIElements.BaseRuntimePanel value)
    // Offset: 0x5636DBC
    void set_focusedPanel(::UnityEngine::UIElements::BaseRuntimePanel* value);
    // public System.Void Update(UnityEngine.UIElements.DefaultEventSystem/UpdateMode updateMode)
    // Offset: 0x5636E18
    void Update(::UnityEngine::UIElements::DefaultEventSystem::UpdateMode updateMode);
    // UnityEngine.UIElements.DefaultEventSystem/FocusBasedEventSequenceContext FocusBasedEventSequence()
    // Offset: 0x5637F38
    ::UnityEngine::UIElements::DefaultEventSystem::FocusBasedEventSequenceContext FocusBasedEventSequence();
    // private System.Void SendIMGUIEvents()
    // Offset: 0x5637F58
    void SendIMGUIEvents();
    // private System.Void ProcessMouseEvents()
    // Offset: 0x5637634
    void ProcessMouseEvents();
    // private System.Void SendInputEvents()
    // Offset: 0x56386B8
    void SendInputEvents();
    // System.Void SendFocusBasedEvent(System.Func`2<TArg,UnityEngine.UIElements.EventBase> evtFactory, TArg arg)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TArg>
    void SendFocusBasedEvent(::System::Func_2<TArg, ::UnityEngine::UIElements::EventBase*>* evtFactory, TArg arg) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::DefaultEventSystem::SendFocusBasedEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendFocusBasedEvent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TArg>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evtFactory), ::il2cpp_utils::ExtractType(arg)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TArg>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, evtFactory, arg);
    }
    // private System.Void SendPositionBasedEvent(UnityEngine.Vector3 mousePosition, UnityEngine.Vector3 delta, System.Int32 pointerId, System.Nullable`1<System.Int32> targetDisplay, System.Func`4<UnityEngine.Vector3,UnityEngine.Vector3,TArg,UnityEngine.UIElements.EventBase> evtFactory, TArg arg, System.Boolean deselectIfNoTarget)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TArg>
    void SendPositionBasedEvent(::UnityEngine::Vector3 mousePosition, ::UnityEngine::Vector3 delta, int pointerId, ::System::Nullable_1<int> targetDisplay, ::System::Func_4<::UnityEngine::Vector3, ::UnityEngine::Vector3, TArg, ::UnityEngine::UIElements::EventBase*>* evtFactory, TArg arg, bool deselectIfNoTarget) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::DefaultEventSystem::SendPositionBasedEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendPositionBasedEvent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TArg>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mousePosition), ::il2cpp_utils::ExtractType(delta), ::il2cpp_utils::ExtractType(pointerId), ::il2cpp_utils::ExtractType(targetDisplay), ::il2cpp_utils::ExtractType(evtFactory), ::il2cpp_utils::ExtractType(arg), ::il2cpp_utils::ExtractType(deselectIfNoTarget)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TArg>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, mousePosition, delta, pointerId, targetDisplay, evtFactory, arg, deselectIfNoTarget);
    }
    // private System.Void UpdateFocusedPanel(UnityEngine.UIElements.BaseRuntimePanel runtimePanel)
    // Offset: 0x5638F30
    void UpdateFocusedPanel(::UnityEngine::UIElements::BaseRuntimePanel* runtimePanel);
    // static private UnityEngine.UIElements.EventBase MakeTouchEvent(UnityEngine.Touch touch, UnityEngine.EventModifiers modifiers)
    // Offset: 0x5638FA4
    static ::UnityEngine::UIElements::EventBase* MakeTouchEvent(::UnityEngine::Touch touch, ::UnityEngine::EventModifiers modifiers);
    // static private UnityEngine.UIElements.EventBase MakePenEvent(UnityEngine.PenData pen, UnityEngine.EventModifiers modifiers)
    // Offset: 0x5639124
    static ::UnityEngine::UIElements::EventBase* MakePenEvent(::UnityEngine::PenData pen, ::UnityEngine::EventModifiers modifiers);
    // private System.Boolean ProcessTouchEvents()
    // Offset: 0x56371EC
    bool ProcessTouchEvents();
    // private System.Boolean ProcessPenEvents()
    // Offset: 0x5636F30
    bool ProcessPenEvents();
    // private UnityEngine.Vector2 GetRawMoveVector()
    // Offset: 0x56391DC
    ::UnityEngine::Vector2 GetRawMoveVector();
    // private System.Boolean ShouldSendMoveFromInput()
    // Offset: 0x5638C0C
    bool ShouldSendMoveFromInput();
    // private System.Void ProcessTabEvent(UnityEngine.Event e, UnityEngine.EventModifiers modifiers)
    // Offset: 0x5638A84
    void ProcessTabEvent(::UnityEngine::Event* e, ::UnityEngine::EventModifiers modifiers);
    // public System.Void .ctor()
    // Offset: 0x5639460
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DefaultEventSystem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::DefaultEventSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DefaultEventSystem*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x56395C0
    static void _cctor();
  }; // UnityEngine.UIElements.DefaultEventSystem
  #pragma pack(pop)
  static check_size<sizeof(DefaultEventSystem), 144 + sizeof(float)> __UnityEngine_UIElements_DefaultEventSystemSizeCheck;
  static_assert(sizeof(DefaultEventSystem) == 0x94);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::get_isAppFocused
// Il2CppName: get_isAppFocused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::DefaultEventSystem::*)()>(&UnityEngine::UIElements::DefaultEventSystem::get_isAppFocused)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "get_isAppFocused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::get_input
// Il2CppName: get_input
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::DefaultEventSystem::IInput* (UnityEngine::UIElements::DefaultEventSystem::*)()>(&UnityEngine::UIElements::DefaultEventSystem::get_input)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "get_input", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::GetDefaultInput
// Il2CppName: GetDefaultInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::DefaultEventSystem::IInput* (UnityEngine::UIElements::DefaultEventSystem::*)()>(&UnityEngine::UIElements::DefaultEventSystem::GetDefaultInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "GetDefaultInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::ShouldIgnoreEventsOnAppNotFocused
// Il2CppName: ShouldIgnoreEventsOnAppNotFocused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::DefaultEventSystem::*)()>(&UnityEngine::UIElements::DefaultEventSystem::ShouldIgnoreEventsOnAppNotFocused)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "ShouldIgnoreEventsOnAppNotFocused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::get_focusedPanel
// Il2CppName: get_focusedPanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::BaseRuntimePanel* (UnityEngine::UIElements::DefaultEventSystem::*)()>(&UnityEngine::UIElements::DefaultEventSystem::get_focusedPanel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "get_focusedPanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::set_focusedPanel
// Il2CppName: set_focusedPanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DefaultEventSystem::*)(::UnityEngine::UIElements::BaseRuntimePanel*)>(&UnityEngine::UIElements::DefaultEventSystem::set_focusedPanel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "BaseRuntimePanel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "set_focusedPanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DefaultEventSystem::*)(::UnityEngine::UIElements::DefaultEventSystem::UpdateMode)>(&UnityEngine::UIElements::DefaultEventSystem::Update)> {
  static const MethodInfo* get() {
    static auto* updateMode = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "DefaultEventSystem/UpdateMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::FocusBasedEventSequence
// Il2CppName: FocusBasedEventSequence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::DefaultEventSystem::FocusBasedEventSequenceContext (UnityEngine::UIElements::DefaultEventSystem::*)()>(&UnityEngine::UIElements::DefaultEventSystem::FocusBasedEventSequence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "FocusBasedEventSequence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::SendIMGUIEvents
// Il2CppName: SendIMGUIEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DefaultEventSystem::*)()>(&UnityEngine::UIElements::DefaultEventSystem::SendIMGUIEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "SendIMGUIEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::ProcessMouseEvents
// Il2CppName: ProcessMouseEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DefaultEventSystem::*)()>(&UnityEngine::UIElements::DefaultEventSystem::ProcessMouseEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "ProcessMouseEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::SendInputEvents
// Il2CppName: SendInputEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DefaultEventSystem::*)()>(&UnityEngine::UIElements::DefaultEventSystem::SendInputEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "SendInputEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::SendFocusBasedEvent
// Il2CppName: SendFocusBasedEvent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::SendPositionBasedEvent
// Il2CppName: SendPositionBasedEvent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::UpdateFocusedPanel
// Il2CppName: UpdateFocusedPanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DefaultEventSystem::*)(::UnityEngine::UIElements::BaseRuntimePanel*)>(&UnityEngine::UIElements::DefaultEventSystem::UpdateFocusedPanel)> {
  static const MethodInfo* get() {
    static auto* runtimePanel = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "BaseRuntimePanel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "UpdateFocusedPanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runtimePanel});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::MakeTouchEvent
// Il2CppName: MakeTouchEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::EventBase* (*)(::UnityEngine::Touch, ::UnityEngine::EventModifiers)>(&UnityEngine::UIElements::DefaultEventSystem::MakeTouchEvent)> {
  static const MethodInfo* get() {
    static auto* touch = &::il2cpp_utils::GetClassFromName("UnityEngine", "Touch")->byval_arg;
    static auto* modifiers = &::il2cpp_utils::GetClassFromName("UnityEngine", "EventModifiers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "MakeTouchEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{touch, modifiers});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::MakePenEvent
// Il2CppName: MakePenEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::EventBase* (*)(::UnityEngine::PenData, ::UnityEngine::EventModifiers)>(&UnityEngine::UIElements::DefaultEventSystem::MakePenEvent)> {
  static const MethodInfo* get() {
    static auto* pen = &::il2cpp_utils::GetClassFromName("UnityEngine", "PenData")->byval_arg;
    static auto* modifiers = &::il2cpp_utils::GetClassFromName("UnityEngine", "EventModifiers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "MakePenEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pen, modifiers});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::ProcessTouchEvents
// Il2CppName: ProcessTouchEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::DefaultEventSystem::*)()>(&UnityEngine::UIElements::DefaultEventSystem::ProcessTouchEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "ProcessTouchEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::ProcessPenEvents
// Il2CppName: ProcessPenEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::DefaultEventSystem::*)()>(&UnityEngine::UIElements::DefaultEventSystem::ProcessPenEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "ProcessPenEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::GetRawMoveVector
// Il2CppName: GetRawMoveVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::UIElements::DefaultEventSystem::*)()>(&UnityEngine::UIElements::DefaultEventSystem::GetRawMoveVector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "GetRawMoveVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::ShouldSendMoveFromInput
// Il2CppName: ShouldSendMoveFromInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::DefaultEventSystem::*)()>(&UnityEngine::UIElements::DefaultEventSystem::ShouldSendMoveFromInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "ShouldSendMoveFromInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::ProcessTabEvent
// Il2CppName: ProcessTabEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DefaultEventSystem::*)(::UnityEngine::Event*, ::UnityEngine::EventModifiers)>(&UnityEngine::UIElements::DefaultEventSystem::ProcessTabEvent)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine", "Event")->byval_arg;
    static auto* modifiers = &::il2cpp_utils::GetClassFromName("UnityEngine", "EventModifiers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), "ProcessTabEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, modifiers});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::DefaultEventSystem::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
