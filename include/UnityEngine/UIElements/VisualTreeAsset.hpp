// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.UIElements.CreationContext
#include "UnityEngine/UIElements/CreationContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: StyleSheet
  class StyleSheet;
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: VisualElementAsset
  class VisualElementAsset;
  // Skipping declaration: TemplateAsset because it is already included!
  // Forward declaring type: UxmlObjectAsset
  class UxmlObjectAsset;
  // Forward declaring type: IUxmlAttributes
  class IUxmlAttributes;
  // Skipping declaration: UxmlObjectEntry because it is already included!
  // Forward declaring type: IBaseUxmlObjectFactory
  class IBaseUxmlObjectFactory;
  // Forward declaring type: TemplateContainer
  class TemplateContainer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IComparer`1<T>
  template<typename T>
  class IComparer_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualTreeAsset
  class VisualTreeAsset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::VisualTreeAsset);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualTreeAsset*, "UnityEngine.UIElements", "VisualTreeAsset");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.VisualTreeAsset
  // [TokenAttribute] Offset: FFFFFFFF
  class VisualTreeAsset : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::UnityEngine::UIElements::VisualTreeAsset::UsingEntry
    struct UsingEntry;
    // Nested type: ::UnityEngine::UIElements::VisualTreeAsset::UsingEntryComparer
    class UsingEntryComparer;
    // Nested type: ::UnityEngine::UIElements::VisualTreeAsset::SlotDefinition
    struct SlotDefinition;
    // Nested type: ::UnityEngine::UIElements::VisualTreeAsset::SlotUsageEntry
    struct SlotUsageEntry;
    // Nested type: ::UnityEngine::UIElements::VisualTreeAsset::UxmlObjectEntry
    struct UxmlObjectEntry;
    // Nested type: ::UnityEngine::UIElements::VisualTreeAsset::AssetEntry
    struct AssetEntry;
    // Nested type: ::UnityEngine::UIElements::VisualTreeAsset::$$c__DisplayClass61_0
    class $$c__DisplayClass61_0;
    // Nested type: ::UnityEngine::UIElements::VisualTreeAsset::$$c__DisplayClass65_0
    struct $$c__DisplayClass65_0;
    // Nested type: ::UnityEngine::UIElements::VisualTreeAsset::$get_stylesheets$d__23
    class $get_stylesheets$d__23;
    // Nested type: ::UnityEngine::UIElements::VisualTreeAsset::$get_templateDependencies$d__19
    class $get_templateDependencies$d__19;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.VisualTreeAsset/UsingEntry
    // [TokenAttribute] Offset: FFFFFFFF
    struct UsingEntry/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String alias
      // Size: 0x8
      // Offset: 0x0
      ::StringW alias;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.String path
      // Size: 0x8
      // Offset: 0x8
      ::StringW path;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public UnityEngine.UIElements.VisualTreeAsset asset
      // Size: 0x8
      // Offset: 0x10
      ::UnityEngine::UIElements::VisualTreeAsset* asset;
      // Field size check
      static_assert(sizeof(::UnityEngine::UIElements::VisualTreeAsset*) == 0x8);
      public:
      // Creating value type constructor for type: UsingEntry
      constexpr UsingEntry(::StringW alias_ = {}, ::StringW path_ = {}, ::UnityEngine::UIElements::VisualTreeAsset* asset_ = {}) noexcept : alias{alias_}, path{path_}, asset{asset_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get static field: static readonly System.Collections.Generic.IComparer`1<UnityEngine.UIElements.VisualTreeAsset/UsingEntry> comparer
      static ::System::Collections::Generic::IComparer_1<::UnityEngine::UIElements::VisualTreeAsset::UsingEntry>* _get_comparer();
      // Set static field: static readonly System.Collections.Generic.IComparer`1<UnityEngine.UIElements.VisualTreeAsset/UsingEntry> comparer
      static void _set_comparer(::System::Collections::Generic::IComparer_1<::UnityEngine::UIElements::VisualTreeAsset::UsingEntry>* value);
      // Get instance field reference: public System.String alias
      [[deprecated("Use field access instead!")]] ::StringW& dyn_alias();
      // Get instance field reference: public System.String path
      [[deprecated("Use field access instead!")]] ::StringW& dyn_path();
      // Get instance field reference: public UnityEngine.UIElements.VisualTreeAsset asset
      [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualTreeAsset*& dyn_asset();
      // public System.Void .ctor(System.String alias, System.String path)
      // Offset: 0x55BF604
      UsingEntry(::StringW alias, ::StringW path);
      // static private System.Void .cctor()
      // Offset: 0x55BF644
      static void _cctor();
    }; // UnityEngine.UIElements.VisualTreeAsset/UsingEntry
    #pragma pack(pop)
    static check_size<sizeof(VisualTreeAsset::UsingEntry), 16 + sizeof(::UnityEngine::UIElements::VisualTreeAsset*)> __UnityEngine_UIElements_VisualTreeAsset_UsingEntrySizeCheck;
    static_assert(sizeof(VisualTreeAsset::UsingEntry) == 0x18);
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.VisualTreeAsset/SlotDefinition
    // [TokenAttribute] Offset: FFFFFFFF
    struct SlotDefinition/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String name
      // Size: 0x8
      // Offset: 0x0
      ::StringW name;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.Int32 insertionPointId
      // Size: 0x4
      // Offset: 0x8
      int insertionPointId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SlotDefinition
      constexpr SlotDefinition(::StringW name_ = {}, int insertionPointId_ = {}) noexcept : name{name_}, insertionPointId{insertionPointId_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String name
      [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
      // Get instance field reference: public System.Int32 insertionPointId
      [[deprecated("Use field access instead!")]] int& dyn_insertionPointId();
    }; // UnityEngine.UIElements.VisualTreeAsset/SlotDefinition
    #pragma pack(pop)
    static check_size<sizeof(VisualTreeAsset::SlotDefinition), 8 + sizeof(int)> __UnityEngine_UIElements_VisualTreeAsset_SlotDefinitionSizeCheck;
    static_assert(sizeof(VisualTreeAsset::SlotDefinition) == 0xC);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.VisualTreeAsset/UxmlObjectEntry
    // [TokenAttribute] Offset: FFFFFFFF
    struct UxmlObjectEntry/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 parentId
      // Size: 0x4
      // Offset: 0x0
      int parentId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Padding between fields: parentId and: uxmlObjectAssets
      char __padding0[0x4] = {};
      // public System.Collections.Generic.List`1<UnityEngine.UIElements.UxmlObjectAsset> uxmlObjectAssets
      // Size: 0x8
      // Offset: 0x8
      ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UxmlObjectAsset*>* uxmlObjectAssets;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::UxmlObjectAsset*>*) == 0x8);
      public:
      // Creating value type constructor for type: UxmlObjectEntry
      constexpr UxmlObjectEntry(int parentId_ = {}, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UxmlObjectAsset*>* uxmlObjectAssets_ = {}) noexcept : parentId{parentId_}, uxmlObjectAssets{uxmlObjectAssets_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 parentId
      [[deprecated("Use field access instead!")]] int& dyn_parentId();
      // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.UIElements.UxmlObjectAsset> uxmlObjectAssets
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UxmlObjectAsset*>*& dyn_uxmlObjectAssets();
      // public System.Void .ctor(System.Int32 parentId, System.Collections.Generic.List`1<UnityEngine.UIElements.UxmlObjectAsset> uxmlObjectAssets)
      // Offset: 0x55BF6D8
      // ABORTED: conflicts with another method.  UxmlObjectEntry(int parentId, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::UxmlObjectAsset*>* uxmlObjectAssets);
    }; // UnityEngine.UIElements.VisualTreeAsset/UxmlObjectEntry
    #pragma pack(pop)
    static check_size<sizeof(VisualTreeAsset::UxmlObjectEntry), 8 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::UxmlObjectAsset*>*)> __UnityEngine_UIElements_VisualTreeAsset_UxmlObjectEntrySizeCheck;
    static_assert(sizeof(VisualTreeAsset::UxmlObjectEntry) == 0x10);
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.VisualTreeAsset/AssetEntry
    // [TokenAttribute] Offset: FFFFFFFF
    struct AssetEntry/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String path
      // Size: 0x8
      // Offset: 0x0
      ::StringW path;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.String typeFullName
      // Size: 0x8
      // Offset: 0x8
      ::StringW typeFullName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public UnityEngine.Object asset
      // Size: 0x8
      // Offset: 0x10
      ::UnityEngine::Object* asset;
      // Field size check
      static_assert(sizeof(::UnityEngine::Object*) == 0x8);
      // private System.Type m_CachedType
      // Size: 0x8
      // Offset: 0x18
      ::System::Type* m_CachedType;
      // Field size check
      static_assert(sizeof(::System::Type*) == 0x8);
      public:
      // Creating value type constructor for type: AssetEntry
      constexpr AssetEntry(::StringW path_ = {}, ::StringW typeFullName_ = {}, ::UnityEngine::Object* asset_ = {}, ::System::Type* m_CachedType_ = {}) noexcept : path{path_}, typeFullName{typeFullName_}, asset{asset_}, m_CachedType{m_CachedType_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String path
      [[deprecated("Use field access instead!")]] ::StringW& dyn_path();
      // Get instance field reference: public System.String typeFullName
      [[deprecated("Use field access instead!")]] ::StringW& dyn_typeFullName();
      // Get instance field reference: public UnityEngine.Object asset
      [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn_asset();
      // Get instance field reference: private System.Type m_CachedType
      [[deprecated("Use field access instead!")]] ::System::Type*& dyn_m_CachedType();
      // public System.Type get_type()
      // Offset: 0x55BF6E8
      ::System::Type* get_type();
      // public System.Void .ctor(System.String path, System.Type type, UnityEngine.Object asset)
      // Offset: 0x55BF798
      AssetEntry(::StringW path, ::System::Type* type, ::UnityEngine::Object* asset);
    }; // UnityEngine.UIElements.VisualTreeAsset/AssetEntry
    #pragma pack(pop)
    static check_size<sizeof(VisualTreeAsset::AssetEntry), 24 + sizeof(::System::Type*)> __UnityEngine_UIElements_VisualTreeAsset_AssetEntrySizeCheck;
    static_assert(sizeof(VisualTreeAsset::AssetEntry) == 0x20);
    public:
    // private System.Boolean m_ImportedWithErrors
    // Size: 0x1
    // Offset: 0x18
    bool m_ImportedWithErrors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ImportedWithWarnings
    // Size: 0x1
    // Offset: 0x19
    bool m_ImportedWithWarnings;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ImportedWithWarnings and: m_Usings
    char __padding1[0x6] = {};
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.VisualTreeAsset/UsingEntry> m_Usings
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::UsingEntry>* m_Usings;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::UsingEntry>*) == 0x8);
    // UnityEngine.UIElements.StyleSheet inlineSheet
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UIElements::StyleSheet* inlineSheet;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleSheet*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElementAsset> m_VisualElementAssets
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElementAsset*>* m_VisualElementAssets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElementAsset*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.TemplateAsset> m_TemplateAssets
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TemplateAsset*>* m_TemplateAssets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::TemplateAsset*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.VisualTreeAsset/UxmlObjectEntry> m_UxmlObjectEntries
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::UxmlObjectEntry>* m_UxmlObjectEntries;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::UxmlObjectEntry>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> m_UxmlObjectIds
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<int>* m_UxmlObjectIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.VisualTreeAsset/AssetEntry> m_AssetEntries
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::AssetEntry>* m_AssetEntries;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::AssetEntry>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UIElements.VisualTreeAsset/SlotDefinition> m_Slots
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::SlotDefinition>* m_Slots;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::SlotDefinition>*) == 0x8);
    // private System.Int32 m_ContentContainerId
    // Size: 0x4
    // Offset: 0x60
    int m_ContentContainerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_ContentHash
    // Size: 0x4
    // Offset: 0x64
    int m_ContentHash;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static System.String LinkedVEAInTemplatePropertyName
    static ::StringW _get_LinkedVEAInTemplatePropertyName();
    // Set static field: static System.String LinkedVEAInTemplatePropertyName
    static void _set_LinkedVEAInTemplatePropertyName(::StringW value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,UnityEngine.UIElements.VisualElement> s_TemporarySlotInsertionPoints
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::UIElements::VisualElement*>* _get_s_TemporarySlotInsertionPoints();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,UnityEngine.UIElements.VisualElement> s_TemporarySlotInsertionPoints
    static void _set_s_TemporarySlotInsertionPoints(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::UIElements::VisualElement*>* value);
    // Get instance field reference: private System.Boolean m_ImportedWithErrors
    [[deprecated("Use field access instead!")]] bool& dyn_m_ImportedWithErrors();
    // Get instance field reference: private System.Boolean m_ImportedWithWarnings
    [[deprecated("Use field access instead!")]] bool& dyn_m_ImportedWithWarnings();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.VisualTreeAsset/UsingEntry> m_Usings
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::UsingEntry>*& dyn_m_Usings();
    // Get instance field reference: UnityEngine.UIElements.StyleSheet inlineSheet
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleSheet*& dyn_inlineSheet();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElementAsset> m_VisualElementAssets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElementAsset*>*& dyn_m_VisualElementAssets();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.TemplateAsset> m_TemplateAssets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TemplateAsset*>*& dyn_m_TemplateAssets();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.VisualTreeAsset/UxmlObjectEntry> m_UxmlObjectEntries
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::UxmlObjectEntry>*& dyn_m_UxmlObjectEntries();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> m_UxmlObjectIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_m_UxmlObjectIds();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.VisualTreeAsset/AssetEntry> m_AssetEntries
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::AssetEntry>*& dyn_m_AssetEntries();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UIElements.VisualTreeAsset/SlotDefinition> m_Slots
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::SlotDefinition>*& dyn_m_Slots();
    // Get instance field reference: private System.Int32 m_ContentContainerId
    [[deprecated("Use field access instead!")]] int& dyn_m_ContentContainerId();
    // Get instance field reference: private System.Int32 m_ContentHash
    [[deprecated("Use field access instead!")]] int& dyn_m_ContentHash();
    // public System.Boolean get_importedWithErrors()
    // Offset: 0x56CA2BC
    bool get_importedWithErrors();
    // System.Void set_importedWithErrors(System.Boolean value)
    // Offset: 0x56CA2C4
    void set_importedWithErrors(bool value);
    // public System.Boolean get_importedWithWarnings()
    // Offset: 0x56CA2D0
    bool get_importedWithWarnings();
    // System.Void set_importedWithWarnings(System.Boolean value)
    // Offset: 0x56CA2D8
    void set_importedWithWarnings(bool value);
    // System.Int32 GetNextChildSerialNumber()
    // Offset: 0x56CA2E4
    int GetNextChildSerialNumber();
    // public System.Collections.Generic.IEnumerable`1<UnityEngine.UIElements.VisualTreeAsset> get_templateDependencies()
    // Offset: 0x56CA360
    ::System::Collections::Generic::IEnumerable_1<::UnityEngine::UIElements::VisualTreeAsset*>* get_templateDependencies();
    // public System.Collections.Generic.IEnumerable`1<UnityEngine.UIElements.StyleSheet> get_stylesheets()
    // Offset: 0x56CA3D4
    ::System::Collections::Generic::IEnumerable_1<::UnityEngine::UIElements::StyleSheet*>* get_stylesheets();
    // System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElementAsset> get_visualElementAssets()
    // Offset: 0x56CA448
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElementAsset*>* get_visualElementAssets();
    // System.Void set_visualElementAssets(System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElementAsset> value)
    // Offset: 0x56CA450
    void set_visualElementAssets(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElementAsset*>* value);
    // System.Collections.Generic.List`1<UnityEngine.UIElements.TemplateAsset> get_templateAssets()
    // Offset: 0x56CA458
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TemplateAsset*>* get_templateAssets();
    // System.Void set_templateAssets(System.Collections.Generic.List`1<UnityEngine.UIElements.TemplateAsset> value)
    // Offset: 0x56CA460
    void set_templateAssets(::System::Collections::Generic::List_1<::UnityEngine::UIElements::TemplateAsset*>* value);
    // System.Collections.Generic.List`1<UnityEngine.UIElements.VisualTreeAsset/UxmlObjectEntry> get_uxmlObjectEntries()
    // Offset: 0x56CA468
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::UxmlObjectEntry>* get_uxmlObjectEntries();
    // System.Collections.Generic.List`1<System.Int32> get_uxmlObjectIds()
    // Offset: 0x56CA470
    ::System::Collections::Generic::List_1<int>* get_uxmlObjectIds();
    // System.Void RegisterUxmlObject(UnityEngine.UIElements.UxmlObjectAsset uxmlObjectAsset)
    // Offset: 0x56CA478
    void RegisterUxmlObject(::UnityEngine::UIElements::UxmlObjectAsset* uxmlObjectAsset);
    // System.Collections.Generic.List`1<T> GetUxmlObjects(UnityEngine.UIElements.IUxmlAttributes asset, UnityEngine.UIElements.CreationContext cc)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Collections::Generic::List_1<T>* GetUxmlObjects(::UnityEngine::UIElements::IUxmlAttributes* asset, ::UnityEngine::UIElements::CreationContext cc) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VisualTreeAsset::GetUxmlObjects");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUxmlObjects", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset), ::il2cpp_utils::ExtractType(cc)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<T>*, false>(this, ___generic__method, asset, cc);
    }
    // System.Boolean AssetEntryExists(System.String path, System.Type type)
    // Offset: 0x56CA930
    bool AssetEntryExists(::StringW path, ::System::Type* type);
    // System.Void RegisterAssetEntry(System.String path, System.Type type, UnityEngine.Object asset)
    // Offset: 0x56CAB34
    void RegisterAssetEntry(::StringW path, ::System::Type* type, ::UnityEngine::Object* asset);
    // T GetAsset(System.String path)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T GetAsset(::StringW path) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VisualTreeAsset::GetAsset");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAsset", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, path);
    }
    // UnityEngine.UIElements.VisualTreeAsset/UxmlObjectEntry GetUxmlObjectEntry(System.Int32 id)
    // Offset: 0x56CA7BC
    ::UnityEngine::UIElements::VisualTreeAsset::UxmlObjectEntry GetUxmlObjectEntry(int id);
    // private UnityEngine.UIElements.IBaseUxmlObjectFactory GetUxmlObjectFactory(UnityEngine.UIElements.UxmlObjectAsset uxmlObjectAsset)
    // Offset: 0x56CAC84
    ::UnityEngine::UIElements::IBaseUxmlObjectFactory* GetUxmlObjectFactory(::UnityEngine::UIElements::UxmlObjectAsset* uxmlObjectAsset);
    // System.Collections.Generic.List`1<UnityEngine.UIElements.VisualTreeAsset/SlotDefinition> get_slots()
    // Offset: 0x56CB004
    ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::SlotDefinition>* get_slots();
    // System.Void set_slots(System.Collections.Generic.List`1<UnityEngine.UIElements.VisualTreeAsset/SlotDefinition> value)
    // Offset: 0x56CB00C
    void set_slots(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::SlotDefinition>* value);
    // System.Int32 get_contentContainerId()
    // Offset: 0x56CB014
    int get_contentContainerId();
    // System.Void set_contentContainerId(System.Int32 value)
    // Offset: 0x56CB01C
    void set_contentContainerId(int value);
    // public UnityEngine.UIElements.TemplateContainer Instantiate()
    // Offset: 0x56CB024
    ::UnityEngine::UIElements::TemplateContainer* Instantiate();
    // public UnityEngine.UIElements.TemplateContainer Instantiate(System.String bindingPath)
    // Offset: 0x56CB84C
    ::UnityEngine::UIElements::TemplateContainer* Instantiate(::StringW bindingPath);
    // public UnityEngine.UIElements.TemplateContainer CloneTree()
    // Offset: 0x56CB888
    ::UnityEngine::UIElements::TemplateContainer* CloneTree();
    // public UnityEngine.UIElements.TemplateContainer CloneTree(System.String bindingPath)
    // Offset: 0x56CB88C
    ::UnityEngine::UIElements::TemplateContainer* CloneTree(::StringW bindingPath);
    // public System.Void CloneTree(UnityEngine.UIElements.VisualElement target)
    // Offset: 0x56CB890
    void CloneTree(::UnityEngine::UIElements::VisualElement* target);
    // public System.Void CloneTree(UnityEngine.UIElements.VisualElement target, out System.Int32 firstElementIndex, out System.Int32 elementAddedCount)
    // Offset: 0x56CB8AC
    void CloneTree(::UnityEngine::UIElements::VisualElement* target, ByRef<int> firstElementIndex, ByRef<int> elementAddedCount);
    // System.Void CloneTree(UnityEngine.UIElements.VisualElement target, System.Collections.Generic.Dictionary`2<System.String,UnityEngine.UIElements.VisualElement> slotInsertionPoints, System.Collections.Generic.List`1<UnityEngine.UIElements.TemplateAsset/AttributeOverride> attributeOverrides)
    // Offset: 0x56CB1A0
    void CloneTree(::UnityEngine::UIElements::VisualElement* target, ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::UIElements::VisualElement*>* slotInsertionPoints, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TemplateAsset::AttributeOverride>* attributeOverrides);
    // private UnityEngine.UIElements.VisualElement CloneSetupRecursively(UnityEngine.UIElements.VisualElementAsset root, System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElementAsset>> idToChildren, UnityEngine.UIElements.CreationContext context)
    // Offset: 0x56CBCA8
    ::UnityEngine::UIElements::VisualElement* CloneSetupRecursively(::UnityEngine::UIElements::VisualElementAsset* root, ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElementAsset*>*>* idToChildren, ::UnityEngine::UIElements::CreationContext context);
    // static private System.Int32 CompareForOrder(UnityEngine.UIElements.VisualElementAsset a, UnityEngine.UIElements.VisualElementAsset b)
    // Offset: 0x56CCC40
    static int CompareForOrder(::UnityEngine::UIElements::VisualElementAsset* a, ::UnityEngine::UIElements::VisualElementAsset* b);
    // System.Boolean TryGetSlotInsertionPoint(System.Int32 insertionPointId, out System.String slotName)
    // Offset: 0x56CCB7C
    bool TryGetSlotInsertionPoint(int insertionPointId, ByRef<::StringW> slotName);
    // UnityEngine.UIElements.VisualTreeAsset ResolveTemplate(System.String templateName)
    // Offset: 0x56CCC70
    ::UnityEngine::UIElements::VisualTreeAsset* ResolveTemplate(::StringW templateName);
    // static UnityEngine.UIElements.VisualElement Create(UnityEngine.UIElements.VisualElementAsset asset, UnityEngine.UIElements.CreationContext ctx)
    // Offset: 0x56CC5A4
    static ::UnityEngine::UIElements::VisualElement* Create(::UnityEngine::UIElements::VisualElementAsset* asset, ::UnityEngine::UIElements::CreationContext ctx);
    // static private System.Void AssignClassListFromAssetToElement(UnityEngine.UIElements.VisualElementAsset asset, UnityEngine.UIElements.VisualElement element)
    // Offset: 0x56CBA84
    static void AssignClassListFromAssetToElement(::UnityEngine::UIElements::VisualElementAsset* asset, ::UnityEngine::UIElements::VisualElement* element);
    // static private System.Void AssignStyleSheetFromAssetToElement(UnityEngine.UIElements.VisualElementAsset asset, UnityEngine.UIElements.VisualElement element)
    // Offset: 0x56CBAF0
    static void AssignStyleSheetFromAssetToElement(::UnityEngine::UIElements::VisualElementAsset* asset, ::UnityEngine::UIElements::VisualElement* element);
    // public System.Int32 get_contentHash()
    // Offset: 0x56CD050
    int get_contentHash();
    // public System.Void set_contentHash(System.Int32 value)
    // Offset: 0x56CD058
    void set_contentHash(int value);
    // public System.Void .ctor()
    // Offset: 0x56CD060
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisualTreeAsset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::VisualTreeAsset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisualTreeAsset*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x56CD068
    static void _cctor();
    // static UnityEngine.UIElements.VisualElement <Create>g__CreateError|65_0(ref UnityEngine.UIElements.VisualTreeAsset/<>c__DisplayClass65_0 )
    // Offset: 0x56CCEF8
    static ::UnityEngine::UIElements::VisualElement* $Create$g__CreateError_65_0(ByRef<::UnityEngine::UIElements::VisualTreeAsset::$$c__DisplayClass65_0> param_0);
  }; // UnityEngine.UIElements.VisualTreeAsset
  #pragma pack(pop)
  static check_size<sizeof(VisualTreeAsset), 100 + sizeof(int)> __UnityEngine_UIElements_VisualTreeAssetSizeCheck;
  static_assert(sizeof(VisualTreeAsset) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualTreeAsset::AssetEntry, "UnityEngine.UIElements", "VisualTreeAsset/AssetEntry");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualTreeAsset::UxmlObjectEntry, "UnityEngine.UIElements", "VisualTreeAsset/UxmlObjectEntry");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualTreeAsset::SlotDefinition, "UnityEngine.UIElements", "VisualTreeAsset/SlotDefinition");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VisualTreeAsset::UsingEntry, "UnityEngine.UIElements", "VisualTreeAsset/UsingEntry");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::get_importedWithErrors
// Il2CppName: get_importedWithErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::VisualTreeAsset::*)()>(&UnityEngine::UIElements::VisualTreeAsset::get_importedWithErrors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "get_importedWithErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::set_importedWithErrors
// Il2CppName: set_importedWithErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeAsset::*)(bool)>(&UnityEngine::UIElements::VisualTreeAsset::set_importedWithErrors)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "set_importedWithErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::get_importedWithWarnings
// Il2CppName: get_importedWithWarnings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::VisualTreeAsset::*)()>(&UnityEngine::UIElements::VisualTreeAsset::get_importedWithWarnings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "get_importedWithWarnings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::set_importedWithWarnings
// Il2CppName: set_importedWithWarnings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeAsset::*)(bool)>(&UnityEngine::UIElements::VisualTreeAsset::set_importedWithWarnings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "set_importedWithWarnings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::GetNextChildSerialNumber
// Il2CppName: GetNextChildSerialNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::VisualTreeAsset::*)()>(&UnityEngine::UIElements::VisualTreeAsset::GetNextChildSerialNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "GetNextChildSerialNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::get_templateDependencies
// Il2CppName: get_templateDependencies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::UIElements::VisualTreeAsset*>* (UnityEngine::UIElements::VisualTreeAsset::*)()>(&UnityEngine::UIElements::VisualTreeAsset::get_templateDependencies)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "get_templateDependencies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::get_stylesheets
// Il2CppName: get_stylesheets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::UIElements::StyleSheet*>* (UnityEngine::UIElements::VisualTreeAsset::*)()>(&UnityEngine::UIElements::VisualTreeAsset::get_stylesheets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "get_stylesheets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::get_visualElementAssets
// Il2CppName: get_visualElementAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElementAsset*>* (UnityEngine::UIElements::VisualTreeAsset::*)()>(&UnityEngine::UIElements::VisualTreeAsset::get_visualElementAssets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "get_visualElementAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::set_visualElementAssets
// Il2CppName: set_visualElementAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeAsset::*)(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElementAsset*>*)>(&UnityEngine::UIElements::VisualTreeAsset::set_visualElementAssets)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElementAsset")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "set_visualElementAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::get_templateAssets
// Il2CppName: get_templateAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::UIElements::TemplateAsset*>* (UnityEngine::UIElements::VisualTreeAsset::*)()>(&UnityEngine::UIElements::VisualTreeAsset::get_templateAssets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "get_templateAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::set_templateAssets
// Il2CppName: set_templateAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeAsset::*)(::System::Collections::Generic::List_1<::UnityEngine::UIElements::TemplateAsset*>*)>(&UnityEngine::UIElements::VisualTreeAsset::set_templateAssets)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TemplateAsset")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "set_templateAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::get_uxmlObjectEntries
// Il2CppName: get_uxmlObjectEntries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::UxmlObjectEntry>* (UnityEngine::UIElements::VisualTreeAsset::*)()>(&UnityEngine::UIElements::VisualTreeAsset::get_uxmlObjectEntries)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "get_uxmlObjectEntries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::get_uxmlObjectIds
// Il2CppName: get_uxmlObjectIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<int>* (UnityEngine::UIElements::VisualTreeAsset::*)()>(&UnityEngine::UIElements::VisualTreeAsset::get_uxmlObjectIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "get_uxmlObjectIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::RegisterUxmlObject
// Il2CppName: RegisterUxmlObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeAsset::*)(::UnityEngine::UIElements::UxmlObjectAsset*)>(&UnityEngine::UIElements::VisualTreeAsset::RegisterUxmlObject)> {
  static const MethodInfo* get() {
    static auto* uxmlObjectAsset = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "UxmlObjectAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "RegisterUxmlObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uxmlObjectAsset});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::GetUxmlObjects
// Il2CppName: GetUxmlObjects
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::AssetEntryExists
// Il2CppName: AssetEntryExists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::VisualTreeAsset::*)(::StringW, ::System::Type*)>(&UnityEngine::UIElements::VisualTreeAsset::AssetEntryExists)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "AssetEntryExists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, type});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::RegisterAssetEntry
// Il2CppName: RegisterAssetEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeAsset::*)(::StringW, ::System::Type*, ::UnityEngine::Object*)>(&UnityEngine::UIElements::VisualTreeAsset::RegisterAssetEntry)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* asset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "RegisterAssetEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, type, asset});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::GetAsset
// Il2CppName: GetAsset
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::GetUxmlObjectEntry
// Il2CppName: GetUxmlObjectEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualTreeAsset::UxmlObjectEntry (UnityEngine::UIElements::VisualTreeAsset::*)(int)>(&UnityEngine::UIElements::VisualTreeAsset::GetUxmlObjectEntry)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "GetUxmlObjectEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::GetUxmlObjectFactory
// Il2CppName: GetUxmlObjectFactory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IBaseUxmlObjectFactory* (UnityEngine::UIElements::VisualTreeAsset::*)(::UnityEngine::UIElements::UxmlObjectAsset*)>(&UnityEngine::UIElements::VisualTreeAsset::GetUxmlObjectFactory)> {
  static const MethodInfo* get() {
    static auto* uxmlObjectAsset = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "UxmlObjectAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "GetUxmlObjectFactory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uxmlObjectAsset});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::get_slots
// Il2CppName: get_slots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::SlotDefinition>* (UnityEngine::UIElements::VisualTreeAsset::*)()>(&UnityEngine::UIElements::VisualTreeAsset::get_slots)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "get_slots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::set_slots
// Il2CppName: set_slots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeAsset::*)(::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualTreeAsset::SlotDefinition>*)>(&UnityEngine::UIElements::VisualTreeAsset::set_slots)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualTreeAsset/SlotDefinition")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "set_slots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::get_contentContainerId
// Il2CppName: get_contentContainerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::VisualTreeAsset::*)()>(&UnityEngine::UIElements::VisualTreeAsset::get_contentContainerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "get_contentContainerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::set_contentContainerId
// Il2CppName: set_contentContainerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeAsset::*)(int)>(&UnityEngine::UIElements::VisualTreeAsset::set_contentContainerId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "set_contentContainerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::TemplateContainer* (UnityEngine::UIElements::VisualTreeAsset::*)()>(&UnityEngine::UIElements::VisualTreeAsset::Instantiate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::TemplateContainer* (UnityEngine::UIElements::VisualTreeAsset::*)(::StringW)>(&UnityEngine::UIElements::VisualTreeAsset::Instantiate)> {
  static const MethodInfo* get() {
    static auto* bindingPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingPath});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::CloneTree
// Il2CppName: CloneTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::TemplateContainer* (UnityEngine::UIElements::VisualTreeAsset::*)()>(&UnityEngine::UIElements::VisualTreeAsset::CloneTree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "CloneTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::CloneTree
// Il2CppName: CloneTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::TemplateContainer* (UnityEngine::UIElements::VisualTreeAsset::*)(::StringW)>(&UnityEngine::UIElements::VisualTreeAsset::CloneTree)> {
  static const MethodInfo* get() {
    static auto* bindingPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "CloneTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingPath});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::CloneTree
// Il2CppName: CloneTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeAsset::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::VisualTreeAsset::CloneTree)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "CloneTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::CloneTree
// Il2CppName: CloneTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeAsset::*)(::UnityEngine::UIElements::VisualElement*, ByRef<int>, ByRef<int>)>(&UnityEngine::UIElements::VisualTreeAsset::CloneTree)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* firstElementIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* elementAddedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "CloneTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, firstElementIndex, elementAddedCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::CloneTree
// Il2CppName: CloneTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeAsset::*)(::UnityEngine::UIElements::VisualElement*, ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::UIElements::VisualElement*>*, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::TemplateAsset::AttributeOverride>*)>(&UnityEngine::UIElements::VisualTreeAsset::CloneTree)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* slotInsertionPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")})->byval_arg;
    static auto* attributeOverrides = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TemplateAsset/AttributeOverride")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "CloneTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, slotInsertionPoints, attributeOverrides});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::CloneSetupRecursively
// Il2CppName: CloneSetupRecursively
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::VisualTreeAsset::*)(::UnityEngine::UIElements::VisualElementAsset*, ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElementAsset*>*>*, ::UnityEngine::UIElements::CreationContext)>(&UnityEngine::UIElements::VisualTreeAsset::CloneSetupRecursively)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElementAsset")->byval_arg;
    static auto* idToChildren = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElementAsset")})})->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "CreationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "CloneSetupRecursively", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, idToChildren, context});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::CompareForOrder
// Il2CppName: CompareForOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::UIElements::VisualElementAsset*, ::UnityEngine::UIElements::VisualElementAsset*)>(&UnityEngine::UIElements::VisualTreeAsset::CompareForOrder)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElementAsset")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElementAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "CompareForOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::TryGetSlotInsertionPoint
// Il2CppName: TryGetSlotInsertionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::VisualTreeAsset::*)(int, ByRef<::StringW>)>(&UnityEngine::UIElements::VisualTreeAsset::TryGetSlotInsertionPoint)> {
  static const MethodInfo* get() {
    static auto* insertionPointId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* slotName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "TryGetSlotInsertionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{insertionPointId, slotName});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::ResolveTemplate
// Il2CppName: ResolveTemplate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualTreeAsset* (UnityEngine::UIElements::VisualTreeAsset::*)(::StringW)>(&UnityEngine::UIElements::VisualTreeAsset::ResolveTemplate)> {
  static const MethodInfo* get() {
    static auto* templateName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "ResolveTemplate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{templateName});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (*)(::UnityEngine::UIElements::VisualElementAsset*, ::UnityEngine::UIElements::CreationContext)>(&UnityEngine::UIElements::VisualTreeAsset::Create)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElementAsset")->byval_arg;
    static auto* ctx = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "CreationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset, ctx});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::AssignClassListFromAssetToElement
// Il2CppName: AssignClassListFromAssetToElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UIElements::VisualElementAsset*, ::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::VisualTreeAsset::AssignClassListFromAssetToElement)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElementAsset")->byval_arg;
    static auto* element = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "AssignClassListFromAssetToElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset, element});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::AssignStyleSheetFromAssetToElement
// Il2CppName: AssignStyleSheetFromAssetToElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UIElements::VisualElementAsset*, ::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::VisualTreeAsset::AssignStyleSheetFromAssetToElement)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElementAsset")->byval_arg;
    static auto* element = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "AssignStyleSheetFromAssetToElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset, element});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::get_contentHash
// Il2CppName: get_contentHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::VisualTreeAsset::*)()>(&UnityEngine::UIElements::VisualTreeAsset::get_contentHash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "get_contentHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::set_contentHash
// Il2CppName: set_contentHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::VisualTreeAsset::*)(int)>(&UnityEngine::UIElements::VisualTreeAsset::set_contentHash)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "set_contentHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::VisualTreeAsset::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::VisualTreeAsset::$Create$g__CreateError_65_0
// Il2CppName: <Create>g__CreateError|65_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (*)(ByRef<::UnityEngine::UIElements::VisualTreeAsset::$$c__DisplayClass65_0>)>(&UnityEngine::UIElements::VisualTreeAsset::$Create$g__CreateError_65_0)> {
  static const MethodInfo* get() {
    static auto* param_0 = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualTreeAsset/<>c__DisplayClass65_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::VisualTreeAsset*), "<Create>g__CreateError|65_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{param_0});
  }
};
