// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements.Experimental
namespace UnityEngine::UIElements::Experimental {
  // Forward declaring type: IValueAnimationUpdate
  class IValueAnimationUpdate;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::Experimental::IValueAnimationUpdate);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::Experimental::IValueAnimationUpdate*, "UnityEngine.UIElements.Experimental", "IValueAnimationUpdate");
// Type namespace: UnityEngine.UIElements.Experimental
namespace UnityEngine::UIElements::Experimental {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.Experimental.IValueAnimationUpdate
  // [TokenAttribute] Offset: FFFFFFFF
  class IValueAnimationUpdate {
    public:
    // public System.Void Tick(System.Int64 currentTimeMs)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Tick(int64_t currentTimeMs);
  }; // UnityEngine.UIElements.Experimental.IValueAnimationUpdate
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::Experimental::IValueAnimationUpdate::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Experimental::IValueAnimationUpdate::*)(int64_t)>(&UnityEngine::UIElements::Experimental::IValueAnimationUpdate::Tick)> {
  static const MethodInfo* get() {
    static auto* currentTimeMs = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Experimental::IValueAnimationUpdate*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTimeMs});
  }
};
