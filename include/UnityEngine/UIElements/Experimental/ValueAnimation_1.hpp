// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.Experimental.IValueAnimationUpdate
#include "UnityEngine/UIElements/Experimental/IValueAnimationUpdate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements::Experimental
namespace UnityEngine::UIElements::Experimental {
  // Skipping declaration: <>c because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Func`4<T1, T2, T3, TResult>
  template<typename T1, typename T2, typename T3, typename TResult>
  class Func_4;
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: ObjectPool`1<T>
  template<typename T>
  class ObjectPool_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.Experimental
namespace UnityEngine::UIElements::Experimental {
  // Forward declaring type: ValueAnimation`1<T>
  template<typename T>
  class ValueAnimation_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::Experimental::ValueAnimation_1, "UnityEngine.UIElements.Experimental", "ValueAnimation`1");
// Type namespace: UnityEngine.UIElements.Experimental
namespace UnityEngine::UIElements::Experimental {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.Experimental.ValueAnimation`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class ValueAnimation_1 : public ::Il2CppObject/*, public ::UnityEngine::UIElements::Experimental::IValueAnimationUpdate*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::Experimental::ValueAnimation_1::$$c<T>
    class $$c;
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.UIElements.Experimental.ValueAnimation`1/<>c
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = ValueAnimation_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c";
      static constexpr bool IS_VALUE_TYPE = false;
      // Autogenerated static field getter
      // Get static field: static public readonly UnityEngine.UIElements.Experimental.ValueAnimation`1/<>c<T> <>9
      static typename ::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>::$$c* _get_$$9() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::$$c::_get_$$9");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename ::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>::$$c*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ValueAnimation_1<T>::$$c*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly UnityEngine.UIElements.Experimental.ValueAnimation`1/<>c<T> <>9
      static void _set_$$9(typename ::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>::$$c* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::$$c::_set_$$9");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ValueAnimation_1<T>::$$c*>::get(), "<>9", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::$$c::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ValueAnimation_1<T>::$$c*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename ValueAnimation_1<T>::$$c* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::$$c::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename ValueAnimation_1<T>::$$c*, creationType>()));
      }
      // UnityEngine.UIElements.Experimental.ValueAnimation`1<T> <.cctor>b__67_0()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>* $_cctor$b__67_0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::$$c::<.cctor>b__67_0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__67_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>*, false>(this, ___internal__method);
      }
    }; // UnityEngine.UIElements.Experimental.ValueAnimation`1/<>c
    // Could not write size check! Type: UnityEngine.UIElements.Experimental.ValueAnimation`1/<>c is generic, or has no fields that are valid for size checks!
    public:
    // private System.Int64 m_StartTimeMs
    // Size: 0x8
    // Offset: 0x0
    int64_t m_StartTimeMs;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int32 m_DurationMs
    // Size: 0x4
    // Offset: 0x0
    int m_DurationMs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Func`2<System.Single,System.Single> <easingCurve>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::System::Func_2<float, float>* easingCurve;
    // Field size check
    static_assert(sizeof(::System::Func_2<float, float>*) == 0x8);
    // private System.Boolean <isRunning>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool isRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Action <onAnimationCompleted>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::System::Action* onAnimationCompleted;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Boolean <autoRecycle>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool autoRecycle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <recycled>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool recycled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.UIElements.VisualElement <owner>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::VisualElement* owner;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private System.Action`2<UnityEngine.UIElements.VisualElement,T> <valueUpdated>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_2<::UnityEngine::UIElements::VisualElement*, T>* valueUpdated;
    // Field size check
    static_assert(sizeof(::System::Action_2<::UnityEngine::UIElements::VisualElement*, T>*) == 0x8);
    // private System.Func`2<UnityEngine.UIElements.VisualElement,T> <initialValue>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::System::Func_2<::UnityEngine::UIElements::VisualElement*, T>* initialValue;
    // Field size check
    static_assert(sizeof(::System::Func_2<::UnityEngine::UIElements::VisualElement*, T>*) == 0x8);
    // private System.Func`4<T,T,System.Single,T> <interpolator>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::System::Func_4<T, T, float, T>* interpolator;
    // Field size check
    static_assert(sizeof(::System::Func_4<T, T, float, T>*) == 0x8);
    // private T _from
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T from;
    // private System.Boolean fromValueSet
    // Size: 0x1
    // Offset: 0x0
    bool fromValueSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private T <to>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T to;
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::Experimental::IValueAnimationUpdate
    operator ::UnityEngine::UIElements::Experimental::IValueAnimationUpdate() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::Experimental::IValueAnimationUpdate*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private UnityEngine.UIElements.ObjectPool`1<UnityEngine.UIElements.Experimental.ValueAnimation`1<T>> sObjectPool
    static ::UnityEngine::UIElements::ObjectPool_1<::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>*>* _get_sObjectPool() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::_get_sObjectPool");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::UIElements::ObjectPool_1<::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ValueAnimation_1<T>*>::get(), "sObjectPool"));
    }
    // Autogenerated static field setter
    // Set static field: static private UnityEngine.UIElements.ObjectPool`1<UnityEngine.UIElements.Experimental.ValueAnimation`1<T>> sObjectPool
    static void _set_sObjectPool(::UnityEngine::UIElements::ObjectPool_1<::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::_set_sObjectPool");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ValueAnimation_1<T>*>::get(), "sObjectPool", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int64 m_StartTimeMs
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_StartTimeMs() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::dyn_m_StartTimeMs");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_StartTimeMs"))->offset;
      return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 m_DurationMs
    [[deprecated("Use field access instead!")]] int& dyn_m_DurationMs() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::dyn_m_DurationMs");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DurationMs"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Func`2<System.Single,System.Single> <easingCurve>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Func_2<float, float>*& dyn_$easingCurve$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::dyn_$easingCurve$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<easingCurve>k__BackingField"))->offset;
      return *reinterpret_cast<::System::Func_2<float, float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <isRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isRunning$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::dyn_$isRunning$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isRunning>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Action <onAnimationCompleted>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_$onAnimationCompleted$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::dyn_$onAnimationCompleted$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<onAnimationCompleted>k__BackingField"))->offset;
      return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <autoRecycle>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$autoRecycle$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::dyn_$autoRecycle$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<autoRecycle>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <recycled>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$recycled$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::dyn_$recycled$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<recycled>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.VisualElement <owner>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_$owner$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::dyn_$owner$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<owner>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::VisualElement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Action`2<UnityEngine.UIElements.VisualElement,T> <valueUpdated>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_2<::UnityEngine::UIElements::VisualElement*, T>*& dyn_$valueUpdated$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::dyn_$valueUpdated$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<valueUpdated>k__BackingField"))->offset;
      return *reinterpret_cast<::System::Action_2<::UnityEngine::UIElements::VisualElement*, T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Func`2<UnityEngine.UIElements.VisualElement,T> <initialValue>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Func_2<::UnityEngine::UIElements::VisualElement*, T>*& dyn_$initialValue$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::dyn_$initialValue$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<initialValue>k__BackingField"))->offset;
      return *reinterpret_cast<::System::Func_2<::UnityEngine::UIElements::VisualElement*, T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Func`4<T,T,System.Single,T> <interpolator>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Func_4<T, T, float, T>*& dyn_$interpolator$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::dyn_$interpolator$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<interpolator>k__BackingField"))->offset;
      return *reinterpret_cast<::System::Func_4<T, T, float, T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T _from
    [[deprecated("Use field access instead!")]] T& dyn__from() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::dyn__from");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_from"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean fromValueSet
    [[deprecated("Use field access instead!")]] bool& dyn_fromValueSet() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::dyn_fromValueSet");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fromValueSet"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T <to>k__BackingField
    [[deprecated("Use field access instead!")]] T& dyn_$to$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::dyn_$to$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<to>k__BackingField"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_durationMs()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_durationMs() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::get_durationMs");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Void set_durationMs(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_durationMs(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::set_durationMs");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Func`2<System.Single,System.Single> get_easingCurve()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Func_2<float, float>* get_easingCurve() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::get_easingCurve");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_easingCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Func_2<float, float>*, false>(this, ___internal__method);
    }
    // public System.Void set_easingCurve(System.Func`2<System.Single,System.Single> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_easingCurve(::System::Func_2<float, float>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::set_easingCurve");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_easingCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Boolean get_isRunning()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_isRunning() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::get_isRunning");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void set_isRunning(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_isRunning(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::set_isRunning");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isRunning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Action get_onAnimationCompleted()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Action* get_onAnimationCompleted() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::get_onAnimationCompleted");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onAnimationCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Action*, false>(this, ___internal__method);
    }
    // public System.Void set_onAnimationCompleted(System.Action value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_onAnimationCompleted(::System::Action* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::set_onAnimationCompleted");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_onAnimationCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Boolean get_autoRecycle()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_autoRecycle() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::get_autoRecycle");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_autoRecycle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void set_autoRecycle(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_autoRecycle(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::set_autoRecycle");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_autoRecycle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // private System.Boolean get_recycled()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_recycled() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::get_recycled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_recycled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void set_recycled(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_recycled(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::set_recycled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_recycled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // private UnityEngine.UIElements.VisualElement get_owner()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::VisualElement* get_owner() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::get_owner");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_owner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::VisualElement*, false>(this, ___internal__method);
    }
    // private System.Void set_owner(UnityEngine.UIElements.VisualElement value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_owner(::UnityEngine::UIElements::VisualElement* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::set_owner");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_owner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Action`2<UnityEngine.UIElements.VisualElement,T> get_valueUpdated()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Action_2<::UnityEngine::UIElements::VisualElement*, T>* get_valueUpdated() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::get_valueUpdated");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_valueUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Action_2<::UnityEngine::UIElements::VisualElement*, T>*, false>(this, ___internal__method);
    }
    // public System.Void set_valueUpdated(System.Action`2<UnityEngine.UIElements.VisualElement,T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_valueUpdated(::System::Action_2<::UnityEngine::UIElements::VisualElement*, T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::set_valueUpdated");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_valueUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Func`2<UnityEngine.UIElements.VisualElement,T> get_initialValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Func_2<::UnityEngine::UIElements::VisualElement*, T>* get_initialValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::get_initialValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initialValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Func_2<::UnityEngine::UIElements::VisualElement*, T>*, false>(this, ___internal__method);
    }
    // public System.Void set_initialValue(System.Func`2<UnityEngine.UIElements.VisualElement,T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_initialValue(::System::Func_2<::UnityEngine::UIElements::VisualElement*, T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::set_initialValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initialValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Func`4<T,T,System.Single,T> get_interpolator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Func_4<T, T, float, T>* get_interpolator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::get_interpolator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_interpolator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Func_4<T, T, float, T>*, false>(this, ___internal__method);
    }
    // public System.Void set_interpolator(System.Func`4<T,T,System.Single,T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_interpolator(::System::Func_4<T, T, float, T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::set_interpolator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_interpolator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public T get_from()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_from() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::get_from");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_from", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void set_from(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_from(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::set_from");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_from", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public T get_to()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_to() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::get_to");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_to", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void set_to(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_to(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::set_to");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_to", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ValueAnimation_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ValueAnimation_1<T>*, creationType>()));
    }
    // public System.Void Start()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Start() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::Start");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Stop()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Stop() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::Stop");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Recycle()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Recycle() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::Recycle");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void UnityEngine.UIElements.Experimental.IValueAnimationUpdate.Tick(System.Int64 currentTimeMs)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UnityEngine_UIElements_Experimental_IValueAnimationUpdate_Tick(int64_t currentTimeMs) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::UnityEngine.UIElements.Experimental.IValueAnimationUpdate.Tick");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentTimeMs);
    }
    // private System.Void SetDefaultValues()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetDefaultValues() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::SetDefaultValues");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDefaultValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void Unregister()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Unregister() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::Unregister");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void Register()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Register() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::Register");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // System.Void SetOwner(UnityEngine.UIElements.VisualElement e)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetOwner(::UnityEngine::UIElements::VisualElement* e) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::SetOwner");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
    }
    // private System.Void CheckNotRecycled()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CheckNotRecycled() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::CheckNotRecycled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckNotRecycled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // static public UnityEngine.UIElements.Experimental.ValueAnimation`1<T> Create(UnityEngine.UIElements.VisualElement e, System.Func`4<T,T,System.Single,T> interpolator)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>* Create(::UnityEngine::UIElements::VisualElement* e, ::System::Func_4<T, T, float, T>* interpolator) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::Create");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ValueAnimation_1<T>*>::get(), "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e), ::il2cpp_utils::ExtractType(interpolator)})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, e, interpolator);
    }
    // public UnityEngine.UIElements.Experimental.ValueAnimation`1<T> KeepAlive()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>* KeepAlive() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::KeepAlive");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "KeepAlive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::Experimental::ValueAnimation_1<T>*, false>(this, ___internal__method);
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Experimental::ValueAnimation_1::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ValueAnimation_1<T>*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
  }; // UnityEngine.UIElements.Experimental.ValueAnimation`1
  // Could not write size check! Type: UnityEngine.UIElements.Experimental.ValueAnimation`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
