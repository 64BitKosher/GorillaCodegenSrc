// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BaseVisualTreeUpdater
#include "UnityEngine/UIElements/BaseVisualTreeUpdater.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: HierarchyChangeType
  struct HierarchyChangeType;
  // Forward declaring type: VersionChangeType
  struct VersionChangeType;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: BaseVisualTreeHierarchyTrackerUpdater
  class BaseVisualTreeHierarchyTrackerUpdater;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater*, "UnityEngine.UIElements", "BaseVisualTreeHierarchyTrackerUpdater");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseVisualTreeHierarchyTrackerUpdater : public ::UnityEngine::UIElements::BaseVisualTreeUpdater {
    public:
    // Nested type: ::UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::State
    struct State;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater/State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater/State Waiting
      static constexpr const int Waiting = 0;
      // Get static field: static public UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater/State Waiting
      static ::UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::State _get_Waiting();
      // Set static field: static public UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater/State Waiting
      static void _set_Waiting(::UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::State value);
      // static field const value: static public UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater/State TrackingAddOrMove
      static constexpr const int TrackingAddOrMove = 1;
      // Get static field: static public UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater/State TrackingAddOrMove
      static ::UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::State _get_TrackingAddOrMove();
      // Set static field: static public UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater/State TrackingAddOrMove
      static void _set_TrackingAddOrMove(::UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::State value);
      // static field const value: static public UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater/State TrackingRemove
      static constexpr const int TrackingRemove = 2;
      // Get static field: static public UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater/State TrackingRemove
      static ::UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::State _get_TrackingRemove();
      // Set static field: static public UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater/State TrackingRemove
      static void _set_TrackingRemove(::UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater/State
    #pragma pack(pop)
    static check_size<sizeof(BaseVisualTreeHierarchyTrackerUpdater::State), 0 + sizeof(int)> __UnityEngine_UIElements_BaseVisualTreeHierarchyTrackerUpdater_StateSizeCheck;
    static_assert(sizeof(BaseVisualTreeHierarchyTrackerUpdater::State) == 0x4);
    public:
    // private UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater/State m_State
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::State m_State;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::State) == 0x4);
    // Padding between fields: m_State and: m_CurrentChangeElement
    char __padding0[0x4] = {};
    // private UnityEngine.UIElements.VisualElement m_CurrentChangeElement
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UIElements::VisualElement* m_CurrentChangeElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.VisualElement m_CurrentChangeParent
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UIElements::VisualElement* m_CurrentChangeParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater/State m_State
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::State& dyn_m_State();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement m_CurrentChangeElement
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_CurrentChangeElement();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement m_CurrentChangeParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_CurrentChangeParent();
    // protected System.Void OnHierarchyChange(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.HierarchyChangeType type)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnHierarchyChange(::UnityEngine::UIElements::VisualElement* ve, ::UnityEngine::UIElements::HierarchyChangeType type);
    // private System.Void ProcessNewChange(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x55C59B8
    void ProcessNewChange(::UnityEngine::UIElements::VisualElement* ve);
    // private System.Void ProcessAddOrMove(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x55C5AE4
    void ProcessAddOrMove(::UnityEngine::UIElements::VisualElement* ve);
    // private System.Void ProcessRemove(UnityEngine.UIElements.VisualElement ve)
    // Offset: 0x55C5A54
    void ProcessRemove(::UnityEngine::UIElements::VisualElement* ve);
    // public override System.Void OnVersionChanged(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.VersionChangeType versionChangeType)
    // Offset: 0x55C598C
    // Implemented from: UnityEngine.UIElements.BaseVisualTreeUpdater
    // Base method: System.Void BaseVisualTreeUpdater::OnVersionChanged(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.VersionChangeType versionChangeType)
    void OnVersionChanged(::UnityEngine::UIElements::VisualElement* ve, ::UnityEngine::UIElements::VersionChangeType versionChangeType);
    // public override System.Void Update()
    // Offset: 0x55C5BA0
    // Implemented from: UnityEngine.UIElements.BaseVisualTreeUpdater
    // Base method: System.Void BaseVisualTreeUpdater::Update()
    void Update();
    // protected System.Void .ctor()
    // Offset: 0x55C5C4C
    // Implemented from: UnityEngine.UIElements.BaseVisualTreeUpdater
    // Base method: System.Void BaseVisualTreeUpdater::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseVisualTreeHierarchyTrackerUpdater* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseVisualTreeHierarchyTrackerUpdater*, creationType>()));
    }
  }; // UnityEngine.UIElements.BaseVisualTreeHierarchyTrackerUpdater
  #pragma pack(pop)
  static check_size<sizeof(BaseVisualTreeHierarchyTrackerUpdater), 48 + sizeof(::UnityEngine::UIElements::VisualElement*)> __UnityEngine_UIElements_BaseVisualTreeHierarchyTrackerUpdaterSizeCheck;
  static_assert(sizeof(BaseVisualTreeHierarchyTrackerUpdater) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::State, "UnityEngine.UIElements", "BaseVisualTreeHierarchyTrackerUpdater/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::OnHierarchyChange
// Il2CppName: OnHierarchyChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::HierarchyChangeType)>(&UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::OnHierarchyChange)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "HierarchyChangeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater*), "OnHierarchyChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, type});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::ProcessNewChange
// Il2CppName: ProcessNewChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::ProcessNewChange)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater*), "ProcessNewChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::ProcessAddOrMove
// Il2CppName: ProcessAddOrMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::ProcessAddOrMove)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater*), "ProcessAddOrMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::ProcessRemove
// Il2CppName: ProcessRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::ProcessRemove)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater*), "ProcessRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::OnVersionChanged
// Il2CppName: OnVersionChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::VersionChangeType)>(&UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::OnVersionChanged)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* versionChangeType = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VersionChangeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater*), "OnVersionChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, versionChangeType});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::*)()>(&UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseVisualTreeHierarchyTrackerUpdater::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
