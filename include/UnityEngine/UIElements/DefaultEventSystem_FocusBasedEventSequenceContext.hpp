// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.DefaultEventSystem
#include "UnityEngine/UIElements/DefaultEventSystem.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::DefaultEventSystem::FocusBasedEventSequenceContext, "UnityEngine.UIElements", "DefaultEventSystem/FocusBasedEventSequenceContext");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.DefaultEventSystem/FocusBasedEventSequenceContext
  // [TokenAttribute] Offset: FFFFFFFF
  struct DefaultEventSystem::FocusBasedEventSequenceContext/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private UnityEngine.UIElements.DefaultEventSystem es
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::DefaultEventSystem* es;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::DefaultEventSystem*) == 0x8);
    public:
    // Creating value type constructor for type: FocusBasedEventSequenceContext
    constexpr FocusBasedEventSequenceContext(::UnityEngine::UIElements::DefaultEventSystem* es_ = {}) noexcept : es{es_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::UIElements::DefaultEventSystem*
    constexpr operator ::UnityEngine::UIElements::DefaultEventSystem*() const noexcept {
      return es;
    }
    // Get instance field reference: private UnityEngine.UIElements.DefaultEventSystem es
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::DefaultEventSystem*& dyn_es();
    // public System.Void .ctor(UnityEngine.UIElements.DefaultEventSystem es)
    // Offset: 0x5638A1C
    // ABORTED: conflicts with another method.  FocusBasedEventSequenceContext(::UnityEngine::UIElements::DefaultEventSystem* es);
    // public System.Void Dispose()
    // Offset: 0x5639690
    void Dispose();
  }; // UnityEngine.UIElements.DefaultEventSystem/FocusBasedEventSequenceContext
  #pragma pack(pop)
  static check_size<sizeof(DefaultEventSystem::FocusBasedEventSequenceContext), 0 + sizeof(::UnityEngine::UIElements::DefaultEventSystem*)> __UnityEngine_UIElements_DefaultEventSystem_FocusBasedEventSequenceContextSizeCheck;
  static_assert(sizeof(DefaultEventSystem::FocusBasedEventSequenceContext) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::FocusBasedEventSequenceContext::FocusBasedEventSequenceContext
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::DefaultEventSystem::FocusBasedEventSequenceContext::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::DefaultEventSystem::FocusBasedEventSequenceContext::*)()>(&UnityEngine::UIElements::DefaultEventSystem::FocusBasedEventSequenceContext::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::DefaultEventSystem::FocusBasedEventSequenceContext), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
