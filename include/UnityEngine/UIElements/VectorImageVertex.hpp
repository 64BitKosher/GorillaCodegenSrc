// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VectorImageVertex
  struct VectorImageVertex;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::VectorImageVertex, "UnityEngine.UIElements", "VectorImageVertex");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.VectorImageVertex
  // [TokenAttribute] Offset: FFFFFFFF
  struct VectorImageVertex/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 position
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Color32 tint
    // Size: 0x4
    // Offset: 0xC
    ::UnityEngine::Color32 tint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // public UnityEngine.Vector2 uv
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Vector2 uv;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.UInt32 settingIndex
    // Size: 0x4
    // Offset: 0x18
    uint settingIndex;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public UnityEngine.Color32 flags
    // Size: 0x4
    // Offset: 0x1C
    ::UnityEngine::Color32 flags;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // public UnityEngine.Vector4 circle
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Vector4 circle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    public:
    // Creating value type constructor for type: VectorImageVertex
    constexpr VectorImageVertex(::UnityEngine::Vector3 position_ = {}, ::UnityEngine::Color32 tint_ = {}, ::UnityEngine::Vector2 uv_ = {}, uint settingIndex_ = {}, ::UnityEngine::Color32 flags_ = {}, ::UnityEngine::Vector4 circle_ = {}) noexcept : position{position_}, tint{tint_}, uv{uv_}, settingIndex{settingIndex_}, flags{flags_}, circle{circle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
    // Get instance field reference: public UnityEngine.Color32 tint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_tint();
    // Get instance field reference: public UnityEngine.Vector2 uv
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_uv();
    // Get instance field reference: public System.UInt32 settingIndex
    [[deprecated("Use field access instead!")]] uint& dyn_settingIndex();
    // Get instance field reference: public UnityEngine.Color32 flags
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_flags();
    // Get instance field reference: public UnityEngine.Vector4 circle
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_circle();
  }; // UnityEngine.UIElements.VectorImageVertex
  #pragma pack(pop)
  static check_size<sizeof(VectorImageVertex), 32 + sizeof(::UnityEngine::Vector4)> __UnityEngine_UIElements_VectorImageVertexSizeCheck;
  static_assert(sizeof(VectorImageVertex) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
