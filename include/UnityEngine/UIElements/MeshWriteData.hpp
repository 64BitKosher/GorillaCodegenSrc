// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Collections.NativeSlice`1
#include "Unity/Collections/NativeSlice_1.hpp"
// Including type: UnityEngine.UIElements.Vertex
#include "UnityEngine/UIElements/Vertex.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: MeshWriteData
  class MeshWriteData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::MeshWriteData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::MeshWriteData*, "UnityEngine.UIElements", "MeshWriteData");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.MeshWriteData
  // [TokenAttribute] Offset: FFFFFFFF
  class MeshWriteData : public ::Il2CppObject {
    public:
    public:
    // Unity.Collections.NativeSlice`1<UnityEngine.UIElements.Vertex> m_Vertices
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex> m_Vertices;
    // Unity.Collections.NativeSlice`1<System.UInt16> m_Indices
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::Unity::Collections::NativeSlice_1<uint16_t> m_Indices;
    // UnityEngine.Rect m_UVRegion
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Rect m_UVRegion;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // System.Int32 currentIndex
    // Size: 0x4
    // Offset: 0x40
    int currentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 currentVertex
    // Size: 0x4
    // Offset: 0x44
    int currentVertex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: Unity.Collections.NativeSlice`1<UnityEngine.UIElements.Vertex> m_Vertices
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex>& dyn_m_Vertices();
    // Get instance field reference: Unity.Collections.NativeSlice`1<System.UInt16> m_Indices
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeSlice_1<uint16_t>& dyn_m_Indices();
    // Get instance field reference: UnityEngine.Rect m_UVRegion
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_m_UVRegion();
    // Get instance field reference: System.Int32 currentIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentIndex();
    // Get instance field reference: System.Int32 currentVertex
    [[deprecated("Use field access instead!")]] int& dyn_currentVertex();
    // System.Void .ctor()
    // Offset: 0x566D89C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MeshWriteData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MeshWriteData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MeshWriteData*, creationType>()));
    }
    // public System.Int32 get_vertexCount()
    // Offset: 0x566D8A4
    int get_vertexCount();
    // public System.Int32 get_indexCount()
    // Offset: 0x566D8EC
    int get_indexCount();
    // public UnityEngine.Rect get_uvRegion()
    // Offset: 0x566D934
    ::UnityEngine::Rect get_uvRegion();
    // public System.Void SetNextVertex(UnityEngine.UIElements.Vertex vertex)
    // Offset: 0x566D940
    void SetNextVertex(::UnityEngine::UIElements::Vertex vertex);
    // public System.Void SetNextIndex(System.UInt16 index)
    // Offset: 0x566D9C8
    void SetNextIndex(uint16_t index);
    // public System.Void SetAllVertices(UnityEngine.UIElements.Vertex[] vertices)
    // Offset: 0x566DA2C
    void SetAllVertices(::ArrayW<::UnityEngine::UIElements::Vertex> vertices);
    // public System.Void SetAllIndices(System.UInt16[] indices)
    // Offset: 0x566DB00
    void SetAllIndices(::ArrayW<uint16_t> indices);
    // System.Void Reset(Unity.Collections.NativeSlice`1<UnityEngine.UIElements.Vertex> vertices, Unity.Collections.NativeSlice`1<System.UInt16> indices)
    // Offset: 0x566DBD4
    void Reset(::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex> vertices, ::Unity::Collections::NativeSlice_1<uint16_t> indices);
    // System.Void Reset(Unity.Collections.NativeSlice`1<UnityEngine.UIElements.Vertex> vertices, Unity.Collections.NativeSlice`1<System.UInt16> indices, UnityEngine.Rect uvRegion)
    // Offset: 0x566DBF0
    void Reset(::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex> vertices, ::Unity::Collections::NativeSlice_1<uint16_t> indices, ::UnityEngine::Rect uvRegion);
  }; // UnityEngine.UIElements.MeshWriteData
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshWriteData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshWriteData::get_vertexCount
// Il2CppName: get_vertexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::MeshWriteData::*)()>(&UnityEngine::UIElements::MeshWriteData::get_vertexCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshWriteData*), "get_vertexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshWriteData::get_indexCount
// Il2CppName: get_indexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::MeshWriteData::*)()>(&UnityEngine::UIElements::MeshWriteData::get_indexCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshWriteData*), "get_indexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshWriteData::get_uvRegion
// Il2CppName: get_uvRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (UnityEngine::UIElements::MeshWriteData::*)()>(&UnityEngine::UIElements::MeshWriteData::get_uvRegion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshWriteData*), "get_uvRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshWriteData::SetNextVertex
// Il2CppName: SetNextVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MeshWriteData::*)(::UnityEngine::UIElements::Vertex)>(&UnityEngine::UIElements::MeshWriteData::SetNextVertex)> {
  static const MethodInfo* get() {
    static auto* vertex = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Vertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshWriteData*), "SetNextVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshWriteData::SetNextIndex
// Il2CppName: SetNextIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MeshWriteData::*)(uint16_t)>(&UnityEngine::UIElements::MeshWriteData::SetNextIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshWriteData*), "SetNextIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshWriteData::SetAllVertices
// Il2CppName: SetAllVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MeshWriteData::*)(::ArrayW<::UnityEngine::UIElements::Vertex>)>(&UnityEngine::UIElements::MeshWriteData::SetAllVertices)> {
  static const MethodInfo* get() {
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Vertex"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshWriteData*), "SetAllVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshWriteData::SetAllIndices
// Il2CppName: SetAllIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MeshWriteData::*)(::ArrayW<uint16_t>)>(&UnityEngine::UIElements::MeshWriteData::SetAllIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshWriteData*), "SetAllIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshWriteData::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MeshWriteData::*)(::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex>, ::Unity::Collections::NativeSlice_1<uint16_t>)>(&UnityEngine::UIElements::MeshWriteData::Reset)> {
  static const MethodInfo* get() {
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeSlice`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Vertex")})->byval_arg;
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeSlice`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshWriteData*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, indices});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MeshWriteData::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MeshWriteData::*)(::Unity::Collections::NativeSlice_1<::UnityEngine::UIElements::Vertex>, ::Unity::Collections::NativeSlice_1<uint16_t>, ::UnityEngine::Rect)>(&UnityEngine::UIElements::MeshWriteData::Reset)> {
  static const MethodInfo* get() {
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeSlice`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Vertex")})->byval_arg;
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeSlice`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    static auto* uvRegion = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MeshWriteData*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, indices, uvRegion});
  }
};
