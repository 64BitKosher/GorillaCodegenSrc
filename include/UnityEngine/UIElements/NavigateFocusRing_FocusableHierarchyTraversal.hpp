// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.NavigateFocusRing
#include "UnityEngine/UIElements/NavigateFocusRing.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal, "UnityEngine.UIElements", "NavigateFocusRing/FocusableHierarchyTraversal");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.NavigateFocusRing/FocusableHierarchyTraversal
  // [TokenAttribute] Offset: FFFFFFFF
  struct NavigateFocusRing::FocusableHierarchyTraversal/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.UIElements.VisualElement currentFocusable
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::VisualElement* currentFocusable;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // public UnityEngine.Rect validRect
    // Size: 0x10
    // Offset: 0x8
    ::UnityEngine::Rect validRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // public System.Boolean firstPass
    // Size: 0x1
    // Offset: 0x18
    bool firstPass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: firstPass and: direction
    char __padding2[0x7] = {};
    // public UnityEngine.UIElements.NavigateFocusRing/ChangeDirection direction
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection* direction;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection*) == 0x8);
    public:
    // Creating value type constructor for type: FocusableHierarchyTraversal
    constexpr FocusableHierarchyTraversal(::UnityEngine::UIElements::VisualElement* currentFocusable_ = {}, ::UnityEngine::Rect validRect_ = {}, bool firstPass_ = {}, ::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection* direction_ = {}) noexcept : currentFocusable{currentFocusable_}, validRect{validRect_}, firstPass{firstPass_}, direction{direction_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.UIElements.VisualElement currentFocusable
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_currentFocusable();
    // Get instance field reference: public UnityEngine.Rect validRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_validRect();
    // Get instance field reference: public System.Boolean firstPass
    [[deprecated("Use field access instead!")]] bool& dyn_firstPass();
    // Get instance field reference: public UnityEngine.UIElements.NavigateFocusRing/ChangeDirection direction
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection*& dyn_direction();
    // private System.Boolean ValidateHierarchyTraversal(UnityEngine.UIElements.VisualElement v)
    // Offset: 0x565BC50
    bool ValidateHierarchyTraversal(::UnityEngine::UIElements::VisualElement* v);
    // private System.Boolean ValidateElement(UnityEngine.UIElements.VisualElement v)
    // Offset: 0x565BD18
    bool ValidateElement(::UnityEngine::UIElements::VisualElement* v);
    // private System.Int32 Order(UnityEngine.UIElements.VisualElement a, UnityEngine.UIElements.VisualElement b)
    // Offset: 0x565BDE0
    int Order(::UnityEngine::UIElements::VisualElement* a, ::UnityEngine::UIElements::VisualElement* b);
    // private System.Int32 StrictOrder(UnityEngine.UIElements.VisualElement a, UnityEngine.UIElements.VisualElement b)
    // Offset: 0x565C168
    int StrictOrder(::UnityEngine::UIElements::VisualElement* a, ::UnityEngine::UIElements::VisualElement* b);
    // private System.Int32 StrictOrder(UnityEngine.Rect ra, UnityEngine.Rect rb)
    // Offset: 0x565BECC
    int StrictOrder(::UnityEngine::Rect ra, ::UnityEngine::Rect rb);
    // private System.Int32 TieBreaker(UnityEngine.Rect ra, UnityEngine.Rect rb)
    // Offset: 0x565C088
    int TieBreaker(::UnityEngine::Rect ra, ::UnityEngine::Rect rb);
    // public UnityEngine.UIElements.VisualElement GetBestOverall(UnityEngine.UIElements.VisualElement candidate, UnityEngine.UIElements.VisualElement bestSoFar)
    // Offset: 0x565B828
    ::UnityEngine::UIElements::VisualElement* GetBestOverall(::UnityEngine::UIElements::VisualElement* candidate, ::UnityEngine::UIElements::VisualElement* bestSoFar);
  }; // UnityEngine.UIElements.NavigateFocusRing/FocusableHierarchyTraversal
  #pragma pack(pop)
  static check_size<sizeof(NavigateFocusRing::FocusableHierarchyTraversal), 32 + sizeof(::UnityEngine::UIElements::NavigateFocusRing::ChangeDirection*)> __UnityEngine_UIElements_NavigateFocusRing_FocusableHierarchyTraversalSizeCheck;
  static_assert(sizeof(NavigateFocusRing::FocusableHierarchyTraversal) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::ValidateHierarchyTraversal
// Il2CppName: ValidateHierarchyTraversal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::ValidateHierarchyTraversal)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal), "ValidateHierarchyTraversal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::ValidateElement
// Il2CppName: ValidateElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::ValidateElement)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal), "ValidateElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::Order
// Il2CppName: Order
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::Order)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal), "Order", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::StrictOrder
// Il2CppName: StrictOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::StrictOrder)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal), "StrictOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::StrictOrder
// Il2CppName: StrictOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::*)(::UnityEngine::Rect, ::UnityEngine::Rect)>(&UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::StrictOrder)> {
  static const MethodInfo* get() {
    static auto* ra = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* rb = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal), "StrictOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ra, rb});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::TieBreaker
// Il2CppName: TieBreaker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::*)(::UnityEngine::Rect, ::UnityEngine::Rect)>(&UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::TieBreaker)> {
  static const MethodInfo* get() {
    static auto* ra = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* rb = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal), "TieBreaker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ra, rb});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::GetBestOverall
// Il2CppName: GetBestOverall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal::GetBestOverall)> {
  static const MethodInfo* get() {
    static auto* candidate = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* bestSoFar = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::NavigateFocusRing::FocusableHierarchyTraversal), "GetBestOverall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{candidate, bestSoFar});
  }
};
