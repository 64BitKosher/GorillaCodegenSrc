// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BindableElement
#include "UnityEngine/UIElements/BindableElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualTreeAsset
  class VisualTreeAsset;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TemplateContainer
  class TemplateContainer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::TemplateContainer);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::TemplateContainer*, "UnityEngine.UIElements", "TemplateContainer");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.TemplateContainer
  // [TokenAttribute] Offset: FFFFFFFF
  class TemplateContainer : public ::UnityEngine::UIElements::BindableElement {
    public:
    // Nested type: ::UnityEngine::UIElements::TemplateContainer::UxmlFactory
    class UxmlFactory;
    // Nested type: ::UnityEngine::UIElements::TemplateContainer::UxmlTraits
    class UxmlTraits;
    public:
    // private System.String <templateId>k__BackingField
    // Size: 0x8
    // Offset: 0x3D0
    ::StringW templateId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.UIElements.VisualElement m_ContentContainer
    // Size: 0x8
    // Offset: 0x3D8
    ::UnityEngine::UIElements::VisualElement* m_ContentContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.VisualTreeAsset m_TemplateSource
    // Size: 0x8
    // Offset: 0x3E0
    ::UnityEngine::UIElements::VisualTreeAsset* m_TemplateSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualTreeAsset*) == 0x8);
    public:
    // Get instance field reference: private System.String <templateId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$templateId$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement m_ContentContainer
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_ContentContainer();
    // Get instance field reference: private UnityEngine.UIElements.VisualTreeAsset m_TemplateSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualTreeAsset*& dyn_m_TemplateSource();
    // public System.String get_templateId()
    // Offset: 0x56B3DB4
    ::StringW get_templateId();
    // private System.Void set_templateId(System.String value)
    // Offset: 0x56B3DBC
    void set_templateId(::StringW value);
    // System.Void set_templateSource(UnityEngine.UIElements.VisualTreeAsset value)
    // Offset: 0x56B3DCC
    void set_templateSource(::UnityEngine::UIElements::VisualTreeAsset* value);
    // public System.Void .ctor(System.String templateId)
    // Offset: 0x56B3DE4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TemplateContainer* New_ctor(::StringW templateId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TemplateContainer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TemplateContainer*, creationType>(templateId)));
    }
    // System.Void SetContentContainer(UnityEngine.UIElements.VisualElement content)
    // Offset: 0x56B3E2C
    void SetContentContainer(::UnityEngine::UIElements::VisualElement* content);
    // public System.Void .ctor()
    // Offset: 0x56B3DDC
    // Implemented from: UnityEngine.UIElements.BindableElement
    // Base method: System.Void BindableElement::.ctor()
    // Base method: System.Void VisualElement::.ctor()
    // Base method: System.Void Focusable::.ctor()
    // Base method: System.Void CallbackEventHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TemplateContainer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TemplateContainer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TemplateContainer*, creationType>()));
    }
    // public override UnityEngine.UIElements.VisualElement get_contentContainer()
    // Offset: 0x56B3E24
    // Implemented from: UnityEngine.UIElements.VisualElement
    // Base method: UnityEngine.UIElements.VisualElement VisualElement::get_contentContainer()
    ::UnityEngine::UIElements::VisualElement* get_contentContainer();
  }; // UnityEngine.UIElements.TemplateContainer
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::TemplateContainer::get_templateId
// Il2CppName: get_templateId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::UIElements::TemplateContainer::*)()>(&UnityEngine::UIElements::TemplateContainer::get_templateId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TemplateContainer*), "get_templateId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TemplateContainer::set_templateId
// Il2CppName: set_templateId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TemplateContainer::*)(::StringW)>(&UnityEngine::UIElements::TemplateContainer::set_templateId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TemplateContainer*), "set_templateId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TemplateContainer::set_templateSource
// Il2CppName: set_templateSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TemplateContainer::*)(::UnityEngine::UIElements::VisualTreeAsset*)>(&UnityEngine::UIElements::TemplateContainer::set_templateSource)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualTreeAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TemplateContainer*), "set_templateSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TemplateContainer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::TemplateContainer::SetContentContainer
// Il2CppName: SetContentContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TemplateContainer::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::TemplateContainer::SetContentContainer)> {
  static const MethodInfo* get() {
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TemplateContainer*), "SetContentContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TemplateContainer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::TemplateContainer::get_contentContainer
// Il2CppName: get_contentContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::TemplateContainer::*)()>(&UnityEngine::UIElements::TemplateContainer::get_contentContainer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TemplateContainer*), "get_contentContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
