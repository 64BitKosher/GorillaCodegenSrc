// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BaseField`1
#include "UnityEngine/UIElements/BaseField_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: GeometryChangedEvent
  class GeometryChangedEvent;
  // Forward declaring type: EventBase
  class EventBase;
  // Forward declaring type: ClampedDragger`1<T>
  template<typename T>
  class ClampedDragger_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: MinMaxSlider
  class MinMaxSlider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::MinMaxSlider);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::MinMaxSlider*, "UnityEngine.UIElements", "MinMaxSlider");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.MinMaxSlider
  // [TokenAttribute] Offset: FFFFFFFF
  class MinMaxSlider : public ::UnityEngine::UIElements::BaseField_1<::UnityEngine::Vector2> {
    public:
    // Nested type: ::UnityEngine::UIElements::MinMaxSlider::UxmlFactory
    class UxmlFactory;
    // Nested type: ::UnityEngine::UIElements::MinMaxSlider::UxmlTraits
    class UxmlTraits;
    // Nested type: ::UnityEngine::UIElements::MinMaxSlider::DragState
    struct DragState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UIElements.MinMaxSlider/DragState
    // [TokenAttribute] Offset: FFFFFFFF
    struct DragState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DragState
      constexpr DragState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UIElements.MinMaxSlider/DragState NoThumb
      static constexpr const int NoThumb = 0;
      // Get static field: static public UnityEngine.UIElements.MinMaxSlider/DragState NoThumb
      static ::UnityEngine::UIElements::MinMaxSlider::DragState _get_NoThumb();
      // Set static field: static public UnityEngine.UIElements.MinMaxSlider/DragState NoThumb
      static void _set_NoThumb(::UnityEngine::UIElements::MinMaxSlider::DragState value);
      // static field const value: static public UnityEngine.UIElements.MinMaxSlider/DragState MinThumb
      static constexpr const int MinThumb = 1;
      // Get static field: static public UnityEngine.UIElements.MinMaxSlider/DragState MinThumb
      static ::UnityEngine::UIElements::MinMaxSlider::DragState _get_MinThumb();
      // Set static field: static public UnityEngine.UIElements.MinMaxSlider/DragState MinThumb
      static void _set_MinThumb(::UnityEngine::UIElements::MinMaxSlider::DragState value);
      // static field const value: static public UnityEngine.UIElements.MinMaxSlider/DragState MiddleThumb
      static constexpr const int MiddleThumb = 2;
      // Get static field: static public UnityEngine.UIElements.MinMaxSlider/DragState MiddleThumb
      static ::UnityEngine::UIElements::MinMaxSlider::DragState _get_MiddleThumb();
      // Set static field: static public UnityEngine.UIElements.MinMaxSlider/DragState MiddleThumb
      static void _set_MiddleThumb(::UnityEngine::UIElements::MinMaxSlider::DragState value);
      // static field const value: static public UnityEngine.UIElements.MinMaxSlider/DragState MaxThumb
      static constexpr const int MaxThumb = 3;
      // Get static field: static public UnityEngine.UIElements.MinMaxSlider/DragState MaxThumb
      static ::UnityEngine::UIElements::MinMaxSlider::DragState _get_MaxThumb();
      // Set static field: static public UnityEngine.UIElements.MinMaxSlider/DragState MaxThumb
      static void _set_MaxThumb(::UnityEngine::UIElements::MinMaxSlider::DragState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.UIElements.MinMaxSlider/DragState
    #pragma pack(pop)
    static check_size<sizeof(MinMaxSlider::DragState), 0 + sizeof(int)> __UnityEngine_UIElements_MinMaxSlider_DragStateSizeCheck;
    static_assert(sizeof(MinMaxSlider::DragState) == 0x4);
    public:
    // private UnityEngine.UIElements.VisualElement <dragElement>k__BackingField
    // Size: 0x8
    // Offset: 0x428
    ::UnityEngine::UIElements::VisualElement* dragElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.VisualElement <dragMinThumb>k__BackingField
    // Size: 0x8
    // Offset: 0x430
    ::UnityEngine::UIElements::VisualElement* dragMinThumb;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.VisualElement <dragMaxThumb>k__BackingField
    // Size: 0x8
    // Offset: 0x438
    ::UnityEngine::UIElements::VisualElement* dragMaxThumb;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.ClampedDragger`1<System.Single> <clampedDragger>k__BackingField
    // Size: 0x8
    // Offset: 0x440
    ::UnityEngine::UIElements::ClampedDragger_1<float>* clampedDragger;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::ClampedDragger_1<float>*) == 0x8);
    // private UnityEngine.Vector2 m_DragElementStartPos
    // Size: 0x8
    // Offset: 0x448
    ::UnityEngine::Vector2 m_DragElementStartPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 m_ValueStartPos
    // Size: 0x8
    // Offset: 0x450
    ::UnityEngine::Vector2 m_ValueStartPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Rect m_DragMinThumbRect
    // Size: 0x10
    // Offset: 0x458
    ::UnityEngine::Rect m_DragMinThumbRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private UnityEngine.Rect m_DragMaxThumbRect
    // Size: 0x10
    // Offset: 0x468
    ::UnityEngine::Rect m_DragMaxThumbRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private UnityEngine.UIElements.MinMaxSlider/DragState m_DragState
    // Size: 0x4
    // Offset: 0x478
    ::UnityEngine::UIElements::MinMaxSlider::DragState m_DragState;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::MinMaxSlider::DragState) == 0x4);
    // private System.Single m_MinLimit
    // Size: 0x4
    // Offset: 0x47C
    float m_MinLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MaxLimit
    // Size: 0x4
    // Offset: 0x480
    float m_MaxLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static public readonly System.String ussClassName
    static ::StringW _get_ussClassName();
    // Set static field: static public readonly System.String ussClassName
    static void _set_ussClassName(::StringW value);
    // Get static field: static public readonly System.String labelUssClassName
    static ::StringW _get_labelUssClassName();
    // Set static field: static public readonly System.String labelUssClassName
    static void _set_labelUssClassName(::StringW value);
    // Get static field: static public readonly System.String inputUssClassName
    static ::StringW _get_inputUssClassName();
    // Set static field: static public readonly System.String inputUssClassName
    static void _set_inputUssClassName(::StringW value);
    // Get static field: static public readonly System.String trackerUssClassName
    static ::StringW _get_trackerUssClassName();
    // Set static field: static public readonly System.String trackerUssClassName
    static void _set_trackerUssClassName(::StringW value);
    // Get static field: static public readonly System.String draggerUssClassName
    static ::StringW _get_draggerUssClassName();
    // Set static field: static public readonly System.String draggerUssClassName
    static void _set_draggerUssClassName(::StringW value);
    // Get static field: static public readonly System.String minThumbUssClassName
    static ::StringW _get_minThumbUssClassName();
    // Set static field: static public readonly System.String minThumbUssClassName
    static void _set_minThumbUssClassName(::StringW value);
    // Get static field: static public readonly System.String maxThumbUssClassName
    static ::StringW _get_maxThumbUssClassName();
    // Set static field: static public readonly System.String maxThumbUssClassName
    static void _set_maxThumbUssClassName(::StringW value);
    // Get instance field reference: private UnityEngine.UIElements.VisualElement <dragElement>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_$dragElement$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement <dragMinThumb>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_$dragMinThumb$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement <dragMaxThumb>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_$dragMaxThumb$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.ClampedDragger`1<System.Single> <clampedDragger>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::ClampedDragger_1<float>*& dyn_$clampedDragger$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector2 m_DragElementStartPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_DragElementStartPos();
    // Get instance field reference: private UnityEngine.Vector2 m_ValueStartPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_ValueStartPos();
    // Get instance field reference: private UnityEngine.Rect m_DragMinThumbRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_m_DragMinThumbRect();
    // Get instance field reference: private UnityEngine.Rect m_DragMaxThumbRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_m_DragMaxThumbRect();
    // Get instance field reference: private UnityEngine.UIElements.MinMaxSlider/DragState m_DragState
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::MinMaxSlider::DragState& dyn_m_DragState();
    // Get instance field reference: private System.Single m_MinLimit
    [[deprecated("Use field access instead!")]] float& dyn_m_MinLimit();
    // Get instance field reference: private System.Single m_MaxLimit
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxLimit();
    // UnityEngine.UIElements.VisualElement get_dragElement()
    // Offset: 0x56167BC
    ::UnityEngine::UIElements::VisualElement* get_dragElement();
    // private System.Void set_dragElement(UnityEngine.UIElements.VisualElement value)
    // Offset: 0x56167C4
    void set_dragElement(::UnityEngine::UIElements::VisualElement* value);
    // UnityEngine.UIElements.VisualElement get_dragMinThumb()
    // Offset: 0x56167D4
    ::UnityEngine::UIElements::VisualElement* get_dragMinThumb();
    // private System.Void set_dragMinThumb(UnityEngine.UIElements.VisualElement value)
    // Offset: 0x56167DC
    void set_dragMinThumb(::UnityEngine::UIElements::VisualElement* value);
    // UnityEngine.UIElements.VisualElement get_dragMaxThumb()
    // Offset: 0x56167EC
    ::UnityEngine::UIElements::VisualElement* get_dragMaxThumb();
    // private System.Void set_dragMaxThumb(UnityEngine.UIElements.VisualElement value)
    // Offset: 0x56167F4
    void set_dragMaxThumb(::UnityEngine::UIElements::VisualElement* value);
    // UnityEngine.UIElements.ClampedDragger`1<System.Single> get_clampedDragger()
    // Offset: 0x5616804
    ::UnityEngine::UIElements::ClampedDragger_1<float>* get_clampedDragger();
    // private System.Void set_clampedDragger(UnityEngine.UIElements.ClampedDragger`1<System.Single> value)
    // Offset: 0x561680C
    void set_clampedDragger(::UnityEngine::UIElements::ClampedDragger_1<float>* value);
    // public System.Single get_minValue()
    // Offset: 0x561681C
    float get_minValue();
    // public System.Void set_minValue(System.Single value)
    // Offset: 0x561682C
    void set_minValue(float value);
    // public System.Single get_maxValue()
    // Offset: 0x561690C
    float get_maxValue();
    // public System.Void set_maxValue(System.Single value)
    // Offset: 0x561692C
    void set_maxValue(float value);
    // public UnityEngine.Vector2 get_value()
    // Offset: 0x56169D4
    ::UnityEngine::Vector2 get_value();
    // public System.Void set_value(UnityEngine.Vector2 value)
    // Offset: 0x5616A1C
    void set_value(::UnityEngine::Vector2 value);
    // public System.Void SetValueWithoutNotify(UnityEngine.Vector2 newValue)
    // Offset: 0x5616AA8
    void SetValueWithoutNotify(::UnityEngine::Vector2 newValue);
    // public System.Single get_lowLimit()
    // Offset: 0x5617F98
    float get_lowLimit();
    // public System.Void set_lowLimit(System.Single value)
    // Offset: 0x5617FA0
    void set_lowLimit(float value);
    // public System.Single get_highLimit()
    // Offset: 0x561810C
    float get_highLimit();
    // public System.Void set_highLimit(System.Single value)
    // Offset: 0x5618114
    void set_highLimit(float value);
    // public System.Void .ctor(System.String label, System.Single minValue, System.Single maxValue, System.Single minLimit, System.Single maxLimit)
    // Offset: 0x56182A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MinMaxSlider* New_ctor(::StringW label, float minValue, float maxValue, float minLimit, float maxLimit) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MinMaxSlider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MinMaxSlider*, creationType>(label, minValue, maxValue, minLimit, maxLimit)));
    }
    // private UnityEngine.Vector2 ClampValues(UnityEngine.Vector2 valueToClamp)
    // Offset: 0x56168D4
    ::UnityEngine::Vector2 ClampValues(::UnityEngine::Vector2 valueToClamp);
    // private System.Void UpdateDragElementPosition(UnityEngine.UIElements.GeometryChangedEvent evt)
    // Offset: 0x5618848
    void UpdateDragElementPosition(::UnityEngine::UIElements::GeometryChangedEvent* evt);
    // private System.Void UpdateDragElementPosition()
    // Offset: 0x5616B3C
    void UpdateDragElementPosition();
    // System.Single SliderLerpUnclamped(System.Single a, System.Single b, System.Single interpolant)
    // Offset: 0x5618898
    float SliderLerpUnclamped(float a, float b, float interpolant);
    // System.Single SliderNormalizeValue(System.Single currentValue, System.Single lowerValue, System.Single higherValue)
    // Offset: 0x5618888
    float SliderNormalizeValue(float currentValue, float lowerValue, float higherValue);
    // private System.Single ComputeValueFromPosition(System.Single positionToConvert)
    // Offset: 0x56188A8
    float ComputeValueFromPosition(float positionToConvert);
    // private System.Void SetSliderValueFromDrag()
    // Offset: 0x5618B54
    void SetSliderValueFromDrag();
    // private System.Void SetSliderValueFromClick()
    // Offset: 0x5618D8C
    void SetSliderValueFromClick();
    // private System.Void ComputeValueDragStateNoThumb(System.Single lowLimitPosition, System.Single highLimitPosition, System.Single dragElementPos)
    // Offset: 0x5619110
    void ComputeValueDragStateNoThumb(float lowLimitPosition, float highLimitPosition, float dragElementPos);
    // private System.Void ComputeValueFromDraggingThumb(System.Single dragElementStartPos, System.Single dragElementEndPos)
    // Offset: 0x5618BE8
    void ComputeValueFromDraggingThumb(float dragElementStartPos, float dragElementEndPos);
    // public System.Void .ctor()
    // Offset: 0x5618280
    // Implemented from: UnityEngine.UIElements.BindableElement
    // Base method: System.Void BindableElement::.ctor()
    // Base method: System.Void VisualElement::.ctor()
    // Base method: System.Void Focusable::.ctor()
    // Base method: System.Void CallbackEventHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MinMaxSlider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MinMaxSlider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MinMaxSlider*, creationType>()));
    }
    // protected override System.Void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x5618A48
    // Implemented from: UnityEngine.UIElements.VisualElement
    // Base method: System.Void VisualElement::ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt)
    void ExecuteDefaultAction(::UnityEngine::UIElements::EventBase* evt);
    // protected override System.Void UpdateMixedValueContent()
    // Offset: 0x56191B0
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: System.Void BaseField_1::UpdateMixedValueContent()
    void UpdateMixedValueContent();
    // static private System.Void .cctor()
    // Offset: 0x56191B4
    // Implemented from: UnityEngine.UIElements.BaseField`1
    // Base method: System.Void BaseField_1::.cctor()
    // Base method: System.Void VisualElement::.cctor()
    static void _cctor();
  }; // UnityEngine.UIElements.MinMaxSlider
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::MinMaxSlider::DragState, "UnityEngine.UIElements", "MinMaxSlider/DragState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::get_dragElement
// Il2CppName: get_dragElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::MinMaxSlider::*)()>(&UnityEngine::UIElements::MinMaxSlider::get_dragElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "get_dragElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::set_dragElement
// Il2CppName: set_dragElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::MinMaxSlider::set_dragElement)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "set_dragElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::get_dragMinThumb
// Il2CppName: get_dragMinThumb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::MinMaxSlider::*)()>(&UnityEngine::UIElements::MinMaxSlider::get_dragMinThumb)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "get_dragMinThumb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::set_dragMinThumb
// Il2CppName: set_dragMinThumb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::MinMaxSlider::set_dragMinThumb)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "set_dragMinThumb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::get_dragMaxThumb
// Il2CppName: get_dragMaxThumb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::MinMaxSlider::*)()>(&UnityEngine::UIElements::MinMaxSlider::get_dragMaxThumb)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "get_dragMaxThumb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::set_dragMaxThumb
// Il2CppName: set_dragMaxThumb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::MinMaxSlider::set_dragMaxThumb)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "set_dragMaxThumb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::get_clampedDragger
// Il2CppName: get_clampedDragger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::ClampedDragger_1<float>* (UnityEngine::UIElements::MinMaxSlider::*)()>(&UnityEngine::UIElements::MinMaxSlider::get_clampedDragger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "get_clampedDragger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::set_clampedDragger
// Il2CppName: set_clampedDragger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)(::UnityEngine::UIElements::ClampedDragger_1<float>*)>(&UnityEngine::UIElements::MinMaxSlider::set_clampedDragger)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ClampedDragger`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "set_clampedDragger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::get_minValue
// Il2CppName: get_minValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::MinMaxSlider::*)()>(&UnityEngine::UIElements::MinMaxSlider::get_minValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "get_minValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::set_minValue
// Il2CppName: set_minValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)(float)>(&UnityEngine::UIElements::MinMaxSlider::set_minValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "set_minValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::get_maxValue
// Il2CppName: get_maxValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::MinMaxSlider::*)()>(&UnityEngine::UIElements::MinMaxSlider::get_maxValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "get_maxValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::set_maxValue
// Il2CppName: set_maxValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)(float)>(&UnityEngine::UIElements::MinMaxSlider::set_maxValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "set_maxValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::get_value
// Il2CppName: get_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::UIElements::MinMaxSlider::*)()>(&UnityEngine::UIElements::MinMaxSlider::get_value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::set_value
// Il2CppName: set_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)(::UnityEngine::Vector2)>(&UnityEngine::UIElements::MinMaxSlider::set_value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "set_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::SetValueWithoutNotify
// Il2CppName: SetValueWithoutNotify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)(::UnityEngine::Vector2)>(&UnityEngine::UIElements::MinMaxSlider::SetValueWithoutNotify)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "SetValueWithoutNotify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::get_lowLimit
// Il2CppName: get_lowLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::MinMaxSlider::*)()>(&UnityEngine::UIElements::MinMaxSlider::get_lowLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "get_lowLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::set_lowLimit
// Il2CppName: set_lowLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)(float)>(&UnityEngine::UIElements::MinMaxSlider::set_lowLimit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "set_lowLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::get_highLimit
// Il2CppName: get_highLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::MinMaxSlider::*)()>(&UnityEngine::UIElements::MinMaxSlider::get_highLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "get_highLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::set_highLimit
// Il2CppName: set_highLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)(float)>(&UnityEngine::UIElements::MinMaxSlider::set_highLimit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "set_highLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::ClampValues
// Il2CppName: ClampValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::UIElements::MinMaxSlider::*)(::UnityEngine::Vector2)>(&UnityEngine::UIElements::MinMaxSlider::ClampValues)> {
  static const MethodInfo* get() {
    static auto* valueToClamp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "ClampValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{valueToClamp});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::UpdateDragElementPosition
// Il2CppName: UpdateDragElementPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)(::UnityEngine::UIElements::GeometryChangedEvent*)>(&UnityEngine::UIElements::MinMaxSlider::UpdateDragElementPosition)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "GeometryChangedEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "UpdateDragElementPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::UpdateDragElementPosition
// Il2CppName: UpdateDragElementPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)()>(&UnityEngine::UIElements::MinMaxSlider::UpdateDragElementPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "UpdateDragElementPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::SliderLerpUnclamped
// Il2CppName: SliderLerpUnclamped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::MinMaxSlider::*)(float, float, float)>(&UnityEngine::UIElements::MinMaxSlider::SliderLerpUnclamped)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* interpolant = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "SliderLerpUnclamped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, interpolant});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::SliderNormalizeValue
// Il2CppName: SliderNormalizeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::MinMaxSlider::*)(float, float, float)>(&UnityEngine::UIElements::MinMaxSlider::SliderNormalizeValue)> {
  static const MethodInfo* get() {
    static auto* currentValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lowerValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* higherValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "SliderNormalizeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentValue, lowerValue, higherValue});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::ComputeValueFromPosition
// Il2CppName: ComputeValueFromPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::MinMaxSlider::*)(float)>(&UnityEngine::UIElements::MinMaxSlider::ComputeValueFromPosition)> {
  static const MethodInfo* get() {
    static auto* positionToConvert = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "ComputeValueFromPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positionToConvert});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::SetSliderValueFromDrag
// Il2CppName: SetSliderValueFromDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)()>(&UnityEngine::UIElements::MinMaxSlider::SetSliderValueFromDrag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "SetSliderValueFromDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::SetSliderValueFromClick
// Il2CppName: SetSliderValueFromClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)()>(&UnityEngine::UIElements::MinMaxSlider::SetSliderValueFromClick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "SetSliderValueFromClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::ComputeValueDragStateNoThumb
// Il2CppName: ComputeValueDragStateNoThumb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)(float, float, float)>(&UnityEngine::UIElements::MinMaxSlider::ComputeValueDragStateNoThumb)> {
  static const MethodInfo* get() {
    static auto* lowLimitPosition = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* highLimitPosition = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dragElementPos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "ComputeValueDragStateNoThumb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lowLimitPosition, highLimitPosition, dragElementPos});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::ComputeValueFromDraggingThumb
// Il2CppName: ComputeValueFromDraggingThumb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)(float, float)>(&UnityEngine::UIElements::MinMaxSlider::ComputeValueFromDraggingThumb)> {
  static const MethodInfo* get() {
    static auto* dragElementStartPos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dragElementEndPos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "ComputeValueFromDraggingThumb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dragElementStartPos, dragElementEndPos});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::ExecuteDefaultAction
// Il2CppName: ExecuteDefaultAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::MinMaxSlider::ExecuteDefaultAction)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "ExecuteDefaultAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::UpdateMixedValueContent
// Il2CppName: UpdateMixedValueContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MinMaxSlider::*)()>(&UnityEngine::UIElements::MinMaxSlider::UpdateMixedValueContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), "UpdateMixedValueContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MinMaxSlider::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::MinMaxSlider::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MinMaxSlider*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
