// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TreeItem
  struct TreeItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::TreeItem, "UnityEngine.UIElements", "TreeItem");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.TreeItem
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct TreeItem/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Int32 <id>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <parentId>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    int parentId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Collections.Generic.IEnumerable`1<System.Int32> <childrenIds>k__BackingField
    // Size: 0x8
    // Offset: 0x8
    ::System::Collections::Generic::IEnumerable_1<int>* childrenIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerable_1<int>*) == 0x8);
    public:
    // Creating value type constructor for type: TreeItem
    constexpr TreeItem(int id_ = {}, int parentId_ = {}, ::System::Collections::Generic::IEnumerable_1<int>* childrenIds_ = {}) noexcept : id{id_}, parentId{parentId_}, childrenIds{childrenIds_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly System.Int32 <id>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$id$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <parentId>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$parentId$k__BackingField();
    // Get instance field reference: private readonly System.Collections.Generic.IEnumerable`1<System.Int32> <childrenIds>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<int>*& dyn_$childrenIds$k__BackingField();
    // public System.Int32 get_id()
    // Offset: 0x5630D38
    int get_id();
    // public System.Int32 get_parentId()
    // Offset: 0x5630D40
    int get_parentId();
    // public System.Collections.Generic.IEnumerable`1<System.Int32> get_childrenIds()
    // Offset: 0x5630D48
    ::System::Collections::Generic::IEnumerable_1<int>* get_childrenIds();
    // public System.Boolean get_hasChildren()
    // Offset: 0x5630D50
    bool get_hasChildren();
    // public System.Void .ctor(System.Int32 id, System.Int32 parentId, System.Collections.Generic.IEnumerable`1<System.Int32> childrenIds)
    // Offset: 0x5630DA8
    // ABORTED: conflicts with another method.  TreeItem(int id, int parentId, ::System::Collections::Generic::IEnumerable_1<int>* childrenIds);
  }; // UnityEngine.UIElements.TreeItem
  #pragma pack(pop)
  static check_size<sizeof(TreeItem), 8 + sizeof(::System::Collections::Generic::IEnumerable_1<int>*)> __UnityEngine_UIElements_TreeItemSizeCheck;
  static_assert(sizeof(TreeItem) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::TreeItem::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::TreeItem::*)()>(&UnityEngine::UIElements::TreeItem::get_id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TreeItem), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TreeItem::get_parentId
// Il2CppName: get_parentId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::TreeItem::*)()>(&UnityEngine::UIElements::TreeItem::get_parentId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TreeItem), "get_parentId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TreeItem::get_childrenIds
// Il2CppName: get_childrenIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<int>* (UnityEngine::UIElements::TreeItem::*)()>(&UnityEngine::UIElements::TreeItem::get_childrenIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TreeItem), "get_childrenIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TreeItem::get_hasChildren
// Il2CppName: get_hasChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::TreeItem::*)()>(&UnityEngine::UIElements::TreeItem::get_hasChildren)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TreeItem), "get_hasChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TreeItem::TreeItem
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
