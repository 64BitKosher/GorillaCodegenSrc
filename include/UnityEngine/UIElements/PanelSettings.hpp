// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.UIElements.PanelScaleMode
#include "UnityEngine/UIElements/PanelScaleMode.hpp"
// Including type: UnityEngine.Vector2Int
#include "UnityEngine/Vector2Int.hpp"
// Including type: UnityEngine.UIElements.PanelScreenMatchMode
#include "UnityEngine/UIElements/PanelScreenMatchMode.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: ThemeStyleSheet
  class ThemeStyleSheet;
  // Forward declaring type: UIDocumentList
  class UIDocumentList;
  // Forward declaring type: DynamicAtlasSettings
  class DynamicAtlasSettings;
  // Forward declaring type: PanelTextSettings
  class PanelTextSettings;
  // Forward declaring type: StyleSheet
  class StyleSheet;
  // Forward declaring type: BaseRuntimePanel
  class BaseRuntimePanel;
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: UIDocument
  class UIDocument;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Shader
  class Shader;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: PanelSettings
  class PanelSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::PanelSettings);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::PanelSettings*, "UnityEngine.UIElements", "PanelSettings");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.PanelSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class PanelSettings : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::UnityEngine::UIElements::PanelSettings::RuntimePanelAccess
    class RuntimePanelAccess;
    public:
    // private UnityEngine.UIElements.ThemeStyleSheet themeUss
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::ThemeStyleSheet* themeUss;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::ThemeStyleSheet*) == 0x8);
    // private UnityEngine.RenderTexture m_TargetTexture
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::RenderTexture* m_TargetTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.UIElements.PanelScaleMode m_ScaleMode
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::UIElements::PanelScaleMode m_ScaleMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::PanelScaleMode) == 0x4);
    // private System.Single m_ReferenceSpritePixelsPerUnit
    // Size: 0x4
    // Offset: 0x2C
    float m_ReferenceSpritePixelsPerUnit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Scale
    // Size: 0x4
    // Offset: 0x30
    float m_Scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ReferenceDpi
    // Size: 0x4
    // Offset: 0x34
    float m_ReferenceDpi;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_FallbackDpi
    // Size: 0x4
    // Offset: 0x38
    float m_FallbackDpi;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2Int m_ReferenceResolution
    // Size: 0x8
    // Offset: 0x3C
    ::UnityEngine::Vector2Int m_ReferenceResolution;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2Int) == 0x8);
    // private UnityEngine.UIElements.PanelScreenMatchMode m_ScreenMatchMode
    // Size: 0x4
    // Offset: 0x44
    ::UnityEngine::UIElements::PanelScreenMatchMode m_ScreenMatchMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::PanelScreenMatchMode) == 0x4);
    // private System.Single m_Match
    // Size: 0x4
    // Offset: 0x48
    float m_Match;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_SortingOrder
    // Size: 0x4
    // Offset: 0x4C
    float m_SortingOrder;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_TargetDisplay
    // Size: 0x4
    // Offset: 0x50
    int m_TargetDisplay;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_ClearDepthStencil
    // Size: 0x1
    // Offset: 0x54
    bool m_ClearDepthStencil;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ClearColor
    // Size: 0x1
    // Offset: 0x55
    bool m_ClearColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ClearColor and: m_ColorClearValue
    char __padding13[0x2] = {};
    // private UnityEngine.Color m_ColorClearValue
    // Size: 0x10
    // Offset: 0x58
    ::UnityEngine::Color m_ColorClearValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.UIElements.PanelSettings/RuntimePanelAccess m_PanelAccess
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::UIElements::PanelSettings::RuntimePanelAccess* m_PanelAccess;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::PanelSettings::RuntimePanelAccess*) == 0x8);
    // UnityEngine.UIElements.UIDocumentList m_AttachedUIDocumentsList
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::UIElements::UIDocumentList* m_AttachedUIDocumentsList;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIDocumentList*) == 0x8);
    // private UnityEngine.UIElements.DynamicAtlasSettings m_DynamicAtlasSettings
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::UIElements::DynamicAtlasSettings* m_DynamicAtlasSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::DynamicAtlasSettings*) == 0x8);
    // private UnityEngine.Shader m_AtlasBlitShader
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Shader* m_AtlasBlitShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_RuntimeShader
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Shader* m_RuntimeShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_RuntimeWorldShader
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Shader* m_RuntimeWorldShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public UnityEngine.UIElements.PanelTextSettings textSettings
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::UIElements::PanelTextSettings* textSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::PanelTextSettings*) == 0x8);
    // private UnityEngine.Rect m_TargetRect
    // Size: 0x10
    // Offset: 0xA0
    ::UnityEngine::Rect m_TargetRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private System.Single m_ResolvedScale
    // Size: 0x4
    // Offset: 0xB0
    float m_ResolvedScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_ResolvedScale and: m_OldThemeUss
    char __padding23[0x4] = {};
    // private UnityEngine.UIElements.StyleSheet m_OldThemeUss
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::UIElements::StyleSheet* m_OldThemeUss;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleSheet*) == 0x8);
    // private System.Single <ScreenDPI>k__BackingField
    // Size: 0x4
    // Offset: 0xC0
    float ScreenDPI;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: ScreenDPI and: m_AssignedScreenToPanel
    char __padding25[0x4] = {};
    // private System.Func`2<UnityEngine.Vector2,UnityEngine.Vector2> m_AssignedScreenToPanel
    // Size: 0x8
    // Offset: 0xC8
    ::System::Func_2<::UnityEngine::Vector2, ::UnityEngine::Vector2>* m_AssignedScreenToPanel;
    // Field size check
    static_assert(sizeof(::System::Func_2<::UnityEngine::Vector2, ::UnityEngine::Vector2>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 k_DefaultSortingOrder
    static constexpr const int k_DefaultSortingOrder = 0;
    // Get static field: static private System.Int32 k_DefaultSortingOrder
    static int _get_k_DefaultSortingOrder();
    // Set static field: static private System.Int32 k_DefaultSortingOrder
    static void _set_k_DefaultSortingOrder(int value);
    // static field const value: static private System.Single k_DefaultScaleValue
    static constexpr const float k_DefaultScaleValue = 1;
    // Get static field: static private System.Single k_DefaultScaleValue
    static float _get_k_DefaultScaleValue();
    // Set static field: static private System.Single k_DefaultScaleValue
    static void _set_k_DefaultScaleValue(float value);
    // static field const value: static System.String k_DefaultStyleSheetPath
    static constexpr const char* k_DefaultStyleSheetPath = "Packages/com.unity.ui/PackageResources/StyleSheets/Generated/Default.tss.asset";
    // Get static field: static System.String k_DefaultStyleSheetPath
    static ::StringW _get_k_DefaultStyleSheetPath();
    // Set static field: static System.String k_DefaultStyleSheetPath
    static void _set_k_DefaultStyleSheetPath(::StringW value);
    // static field const value: static private System.Single DefaultDpi
    static constexpr const float DefaultDpi = 96;
    // Get static field: static private System.Single DefaultDpi
    static float _get_DefaultDpi();
    // Set static field: static private System.Single DefaultDpi
    static void _set_DefaultDpi(float value);
    // Get instance field reference: private UnityEngine.UIElements.ThemeStyleSheet themeUss
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::ThemeStyleSheet*& dyn_themeUss();
    // Get instance field reference: private UnityEngine.RenderTexture m_TargetTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_m_TargetTexture();
    // Get instance field reference: private UnityEngine.UIElements.PanelScaleMode m_ScaleMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::PanelScaleMode& dyn_m_ScaleMode();
    // Get instance field reference: private System.Single m_ReferenceSpritePixelsPerUnit
    [[deprecated("Use field access instead!")]] float& dyn_m_ReferenceSpritePixelsPerUnit();
    // Get instance field reference: private System.Single m_Scale
    [[deprecated("Use field access instead!")]] float& dyn_m_Scale();
    // Get instance field reference: private System.Single m_ReferenceDpi
    [[deprecated("Use field access instead!")]] float& dyn_m_ReferenceDpi();
    // Get instance field reference: private System.Single m_FallbackDpi
    [[deprecated("Use field access instead!")]] float& dyn_m_FallbackDpi();
    // Get instance field reference: private UnityEngine.Vector2Int m_ReferenceResolution
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2Int& dyn_m_ReferenceResolution();
    // Get instance field reference: private UnityEngine.UIElements.PanelScreenMatchMode m_ScreenMatchMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::PanelScreenMatchMode& dyn_m_ScreenMatchMode();
    // Get instance field reference: private System.Single m_Match
    [[deprecated("Use field access instead!")]] float& dyn_m_Match();
    // Get instance field reference: private System.Single m_SortingOrder
    [[deprecated("Use field access instead!")]] float& dyn_m_SortingOrder();
    // Get instance field reference: private System.Int32 m_TargetDisplay
    [[deprecated("Use field access instead!")]] int& dyn_m_TargetDisplay();
    // Get instance field reference: private System.Boolean m_ClearDepthStencil
    [[deprecated("Use field access instead!")]] bool& dyn_m_ClearDepthStencil();
    // Get instance field reference: private System.Boolean m_ClearColor
    [[deprecated("Use field access instead!")]] bool& dyn_m_ClearColor();
    // Get instance field reference: private UnityEngine.Color m_ColorClearValue
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_ColorClearValue();
    // Get instance field reference: private UnityEngine.UIElements.PanelSettings/RuntimePanelAccess m_PanelAccess
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::PanelSettings::RuntimePanelAccess*& dyn_m_PanelAccess();
    // Get instance field reference: UnityEngine.UIElements.UIDocumentList m_AttachedUIDocumentsList
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIDocumentList*& dyn_m_AttachedUIDocumentsList();
    // Get instance field reference: private UnityEngine.UIElements.DynamicAtlasSettings m_DynamicAtlasSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::DynamicAtlasSettings*& dyn_m_DynamicAtlasSettings();
    // Get instance field reference: private UnityEngine.Shader m_AtlasBlitShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_AtlasBlitShader();
    // Get instance field reference: private UnityEngine.Shader m_RuntimeShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_RuntimeShader();
    // Get instance field reference: private UnityEngine.Shader m_RuntimeWorldShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_RuntimeWorldShader();
    // Get instance field reference: public UnityEngine.UIElements.PanelTextSettings textSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::PanelTextSettings*& dyn_textSettings();
    // Get instance field reference: private UnityEngine.Rect m_TargetRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_m_TargetRect();
    // Get instance field reference: private System.Single m_ResolvedScale
    [[deprecated("Use field access instead!")]] float& dyn_m_ResolvedScale();
    // Get instance field reference: private UnityEngine.UIElements.StyleSheet m_OldThemeUss
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleSheet*& dyn_m_OldThemeUss();
    // Get instance field reference: private System.Single <ScreenDPI>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$ScreenDPI$k__BackingField();
    // Get instance field reference: private System.Func`2<UnityEngine.Vector2,UnityEngine.Vector2> m_AssignedScreenToPanel
    [[deprecated("Use field access instead!")]] ::System::Func_2<::UnityEngine::Vector2, ::UnityEngine::Vector2>*& dyn_m_AssignedScreenToPanel();
    // public UnityEngine.UIElements.ThemeStyleSheet get_themeStyleSheet()
    // Offset: 0x565C1EC
    ::UnityEngine::UIElements::ThemeStyleSheet* get_themeStyleSheet();
    // public System.Void set_themeStyleSheet(UnityEngine.UIElements.ThemeStyleSheet value)
    // Offset: 0x565C1F4
    void set_themeStyleSheet(::UnityEngine::UIElements::ThemeStyleSheet* value);
    // public UnityEngine.RenderTexture get_targetTexture()
    // Offset: 0x565C380
    ::UnityEngine::RenderTexture* get_targetTexture();
    // public System.Void set_targetTexture(UnityEngine.RenderTexture value)
    // Offset: 0x565C388
    void set_targetTexture(::UnityEngine::RenderTexture* value);
    // public UnityEngine.UIElements.PanelScaleMode get_scaleMode()
    // Offset: 0x565C3B4
    ::UnityEngine::UIElements::PanelScaleMode get_scaleMode();
    // public System.Void set_scaleMode(UnityEngine.UIElements.PanelScaleMode value)
    // Offset: 0x565C3BC
    void set_scaleMode(::UnityEngine::UIElements::PanelScaleMode value);
    // public System.Single get_referenceSpritePixelsPerUnit()
    // Offset: 0x565C3C4
    float get_referenceSpritePixelsPerUnit();
    // public System.Void set_referenceSpritePixelsPerUnit(System.Single value)
    // Offset: 0x565C3CC
    void set_referenceSpritePixelsPerUnit(float value);
    // public System.Single get_scale()
    // Offset: 0x565C3D4
    float get_scale();
    // public System.Void set_scale(System.Single value)
    // Offset: 0x565C3DC
    void set_scale(float value);
    // public System.Single get_referenceDpi()
    // Offset: 0x565C3E4
    float get_referenceDpi();
    // public System.Void set_referenceDpi(System.Single value)
    // Offset: 0x565C3EC
    void set_referenceDpi(float value);
    // public System.Single get_fallbackDpi()
    // Offset: 0x565C418
    float get_fallbackDpi();
    // public System.Void set_fallbackDpi(System.Single value)
    // Offset: 0x565C420
    void set_fallbackDpi(float value);
    // public UnityEngine.Vector2Int get_referenceResolution()
    // Offset: 0x565C44C
    ::UnityEngine::Vector2Int get_referenceResolution();
    // public System.Void set_referenceResolution(UnityEngine.Vector2Int value)
    // Offset: 0x565C454
    void set_referenceResolution(::UnityEngine::Vector2Int value);
    // public UnityEngine.UIElements.PanelScreenMatchMode get_screenMatchMode()
    // Offset: 0x565C45C
    ::UnityEngine::UIElements::PanelScreenMatchMode get_screenMatchMode();
    // public System.Void set_screenMatchMode(UnityEngine.UIElements.PanelScreenMatchMode value)
    // Offset: 0x565C464
    void set_screenMatchMode(::UnityEngine::UIElements::PanelScreenMatchMode value);
    // public System.Single get_match()
    // Offset: 0x565C46C
    float get_match();
    // public System.Void set_match(System.Single value)
    // Offset: 0x565C474
    void set_match(float value);
    // public System.Single get_sortingOrder()
    // Offset: 0x565C47C
    float get_sortingOrder();
    // public System.Void set_sortingOrder(System.Single value)
    // Offset: 0x565C484
    void set_sortingOrder(float value);
    // System.Void ApplySortingOrder()
    // Offset: 0x565C4A8
    void ApplySortingOrder();
    // public System.Int32 get_targetDisplay()
    // Offset: 0x565C4C4
    int get_targetDisplay();
    // public System.Void set_targetDisplay(System.Int32 value)
    // Offset: 0x565C4CC
    void set_targetDisplay(int value);
    // public System.Boolean get_clearDepthStencil()
    // Offset: 0x565C4F0
    bool get_clearDepthStencil();
    // public System.Void set_clearDepthStencil(System.Boolean value)
    // Offset: 0x565C4F8
    void set_clearDepthStencil(bool value);
    // public System.Single get_depthClearValue()
    // Offset: 0x565C504
    float get_depthClearValue();
    // public System.Boolean get_clearColor()
    // Offset: 0x565C510
    bool get_clearColor();
    // public System.Void set_clearColor(System.Boolean value)
    // Offset: 0x565C518
    void set_clearColor(bool value);
    // public UnityEngine.Color get_colorClearValue()
    // Offset: 0x565C524
    ::UnityEngine::Color get_colorClearValue();
    // public System.Void set_colorClearValue(UnityEngine.Color value)
    // Offset: 0x565C530
    void set_colorClearValue(::UnityEngine::Color value);
    // UnityEngine.UIElements.BaseRuntimePanel get_panel()
    // Offset: 0x565C53C
    ::UnityEngine::UIElements::BaseRuntimePanel* get_panel();
    // UnityEngine.UIElements.VisualElement get_visualTree()
    // Offset: 0x565C558
    ::UnityEngine::UIElements::VisualElement* get_visualTree();
    // public UnityEngine.UIElements.DynamicAtlasSettings get_dynamicAtlasSettings()
    // Offset: 0x565C588
    ::UnityEngine::UIElements::DynamicAtlasSettings* get_dynamicAtlasSettings();
    // public System.Void set_dynamicAtlasSettings(UnityEngine.UIElements.DynamicAtlasSettings value)
    // Offset: 0x565C590
    void set_dynamicAtlasSettings(::UnityEngine::UIElements::DynamicAtlasSettings* value);
    // private System.Void .ctor()
    // Offset: 0x565C598
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PanelSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PanelSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PanelSettings*, creationType>()));
    }
    // private System.Void Reset()
    // Offset: 0x565C64C
    void Reset();
    // private System.Void OnEnable()
    // Offset: 0x565C650
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x565C910
    void OnDisable();
    // System.Void DisposePanel()
    // Offset: 0x565C92C
    void DisposePanel();
    // private System.Single get_ScreenDPI()
    // Offset: 0x565C948
    float get_ScreenDPI();
    // private System.Void set_ScreenDPI(System.Single value)
    // Offset: 0x565C950
    void set_ScreenDPI(float value);
    // System.Void UpdateScreenDPI()
    // Offset: 0x565C758
    void UpdateScreenDPI();
    // private System.Void ApplyThemeStyleSheet(UnityEngine.UIElements.VisualElement root)
    // Offset: 0x565C214
    void ApplyThemeStyleSheet(::UnityEngine::UIElements::VisualElement* root);
    // private System.Void InitializeShaders()
    // Offset: 0x565C774
    void InitializeShaders();
    // System.Void ApplyPanelSettings()
    // Offset: 0x565C958
    void ApplyPanelSettings();
    // public System.Void SetScreenToPanelSpaceFunction(System.Func`2<UnityEngine.Vector2,UnityEngine.Vector2> screentoPanelSpaceFunction)
    // Offset: 0x565D118
    void SetScreenToPanelSpaceFunction(::System::Func_2<::UnityEngine::Vector2, ::UnityEngine::Vector2>* screentoPanelSpaceFunction);
    // System.Single ResolveScale(UnityEngine.Rect targetRect, System.Single screenDpi)
    // Offset: 0x565D048
    float ResolveScale(::UnityEngine::Rect targetRect, float screenDpi);
    // UnityEngine.Rect GetDisplayRect()
    // Offset: 0x565CF50
    ::UnityEngine::Rect GetDisplayRect();
    // System.Void AttachAndInsertUIDocumentToVisualTree(UnityEngine.UIElements.UIDocument uiDocument)
    // Offset: 0x565D154
    void AttachAndInsertUIDocumentToVisualTree(::UnityEngine::UIElements::UIDocument* uiDocument);
    // System.Void DetachUIDocument(UnityEngine.UIElements.UIDocument uiDocument)
    // Offset: 0x565D208
    void DetachUIDocument(::UnityEngine::UIElements::UIDocument* uiDocument);
  }; // UnityEngine.UIElements.PanelSettings
  #pragma pack(pop)
  static check_size<sizeof(PanelSettings), 200 + sizeof(::System::Func_2<::UnityEngine::Vector2, ::UnityEngine::Vector2>*)> __UnityEngine_UIElements_PanelSettingsSizeCheck;
  static_assert(sizeof(PanelSettings) == 0xD0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_themeStyleSheet
// Il2CppName: get_themeStyleSheet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::ThemeStyleSheet* (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_themeStyleSheet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_themeStyleSheet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_themeStyleSheet
// Il2CppName: set_themeStyleSheet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(::UnityEngine::UIElements::ThemeStyleSheet*)>(&UnityEngine::UIElements::PanelSettings::set_themeStyleSheet)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ThemeStyleSheet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_themeStyleSheet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_targetTexture
// Il2CppName: get_targetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTexture* (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_targetTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_targetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_targetTexture
// Il2CppName: set_targetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(::UnityEngine::RenderTexture*)>(&UnityEngine::UIElements::PanelSettings::set_targetTexture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_targetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_scaleMode
// Il2CppName: get_scaleMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::PanelScaleMode (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_scaleMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_scaleMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_scaleMode
// Il2CppName: set_scaleMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(::UnityEngine::UIElements::PanelScaleMode)>(&UnityEngine::UIElements::PanelSettings::set_scaleMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "PanelScaleMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_scaleMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_referenceSpritePixelsPerUnit
// Il2CppName: get_referenceSpritePixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_referenceSpritePixelsPerUnit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_referenceSpritePixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_referenceSpritePixelsPerUnit
// Il2CppName: set_referenceSpritePixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(float)>(&UnityEngine::UIElements::PanelSettings::set_referenceSpritePixelsPerUnit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_referenceSpritePixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_scale
// Il2CppName: get_scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_scale
// Il2CppName: set_scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(float)>(&UnityEngine::UIElements::PanelSettings::set_scale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_referenceDpi
// Il2CppName: get_referenceDpi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_referenceDpi)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_referenceDpi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_referenceDpi
// Il2CppName: set_referenceDpi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(float)>(&UnityEngine::UIElements::PanelSettings::set_referenceDpi)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_referenceDpi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_fallbackDpi
// Il2CppName: get_fallbackDpi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_fallbackDpi)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_fallbackDpi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_fallbackDpi
// Il2CppName: set_fallbackDpi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(float)>(&UnityEngine::UIElements::PanelSettings::set_fallbackDpi)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_fallbackDpi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_referenceResolution
// Il2CppName: get_referenceResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2Int (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_referenceResolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_referenceResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_referenceResolution
// Il2CppName: set_referenceResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(::UnityEngine::Vector2Int)>(&UnityEngine::UIElements::PanelSettings::set_referenceResolution)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2Int")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_referenceResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_screenMatchMode
// Il2CppName: get_screenMatchMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::PanelScreenMatchMode (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_screenMatchMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_screenMatchMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_screenMatchMode
// Il2CppName: set_screenMatchMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(::UnityEngine::UIElements::PanelScreenMatchMode)>(&UnityEngine::UIElements::PanelSettings::set_screenMatchMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "PanelScreenMatchMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_screenMatchMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_match
// Il2CppName: get_match
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_match)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_match", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_match
// Il2CppName: set_match
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(float)>(&UnityEngine::UIElements::PanelSettings::set_match)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_match", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_sortingOrder
// Il2CppName: get_sortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_sortingOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_sortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_sortingOrder
// Il2CppName: set_sortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(float)>(&UnityEngine::UIElements::PanelSettings::set_sortingOrder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_sortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::ApplySortingOrder
// Il2CppName: ApplySortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::ApplySortingOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "ApplySortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_targetDisplay
// Il2CppName: get_targetDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_targetDisplay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_targetDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_targetDisplay
// Il2CppName: set_targetDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(int)>(&UnityEngine::UIElements::PanelSettings::set_targetDisplay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_targetDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_clearDepthStencil
// Il2CppName: get_clearDepthStencil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_clearDepthStencil)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_clearDepthStencil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_clearDepthStencil
// Il2CppName: set_clearDepthStencil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(bool)>(&UnityEngine::UIElements::PanelSettings::set_clearDepthStencil)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_clearDepthStencil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_depthClearValue
// Il2CppName: get_depthClearValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_depthClearValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_depthClearValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_clearColor
// Il2CppName: get_clearColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_clearColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_clearColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_clearColor
// Il2CppName: set_clearColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(bool)>(&UnityEngine::UIElements::PanelSettings::set_clearColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_clearColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_colorClearValue
// Il2CppName: get_colorClearValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_colorClearValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_colorClearValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_colorClearValue
// Il2CppName: set_colorClearValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(::UnityEngine::Color)>(&UnityEngine::UIElements::PanelSettings::set_colorClearValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_colorClearValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_panel
// Il2CppName: get_panel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::BaseRuntimePanel* (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_panel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_panel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_visualTree
// Il2CppName: get_visualTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_visualTree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_visualTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_dynamicAtlasSettings
// Il2CppName: get_dynamicAtlasSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::DynamicAtlasSettings* (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_dynamicAtlasSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_dynamicAtlasSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_dynamicAtlasSettings
// Il2CppName: set_dynamicAtlasSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(::UnityEngine::UIElements::DynamicAtlasSettings*)>(&UnityEngine::UIElements::PanelSettings::set_dynamicAtlasSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "DynamicAtlasSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_dynamicAtlasSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::DisposePanel
// Il2CppName: DisposePanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::DisposePanel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "DisposePanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::get_ScreenDPI
// Il2CppName: get_ScreenDPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::get_ScreenDPI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "get_ScreenDPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::set_ScreenDPI
// Il2CppName: set_ScreenDPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(float)>(&UnityEngine::UIElements::PanelSettings::set_ScreenDPI)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "set_ScreenDPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::UpdateScreenDPI
// Il2CppName: UpdateScreenDPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::UpdateScreenDPI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "UpdateScreenDPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::ApplyThemeStyleSheet
// Il2CppName: ApplyThemeStyleSheet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(::UnityEngine::UIElements::VisualElement*)>(&UnityEngine::UIElements::PanelSettings::ApplyThemeStyleSheet)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "ApplyThemeStyleSheet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::InitializeShaders
// Il2CppName: InitializeShaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::InitializeShaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "InitializeShaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::ApplyPanelSettings
// Il2CppName: ApplyPanelSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::ApplyPanelSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "ApplyPanelSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::SetScreenToPanelSpaceFunction
// Il2CppName: SetScreenToPanelSpaceFunction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(::System::Func_2<::UnityEngine::Vector2, ::UnityEngine::Vector2>*)>(&UnityEngine::UIElements::PanelSettings::SetScreenToPanelSpaceFunction)> {
  static const MethodInfo* get() {
    static auto* screentoPanelSpaceFunction = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "SetScreenToPanelSpaceFunction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screentoPanelSpaceFunction});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::ResolveScale
// Il2CppName: ResolveScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::PanelSettings::*)(::UnityEngine::Rect, float)>(&UnityEngine::UIElements::PanelSettings::ResolveScale)> {
  static const MethodInfo* get() {
    static auto* targetRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* screenDpi = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "ResolveScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetRect, screenDpi});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::GetDisplayRect
// Il2CppName: GetDisplayRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (UnityEngine::UIElements::PanelSettings::*)()>(&UnityEngine::UIElements::PanelSettings::GetDisplayRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "GetDisplayRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::AttachAndInsertUIDocumentToVisualTree
// Il2CppName: AttachAndInsertUIDocumentToVisualTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(::UnityEngine::UIElements::UIDocument*)>(&UnityEngine::UIElements::PanelSettings::AttachAndInsertUIDocumentToVisualTree)> {
  static const MethodInfo* get() {
    static auto* uiDocument = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "UIDocument")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "AttachAndInsertUIDocumentToVisualTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uiDocument});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PanelSettings::DetachUIDocument
// Il2CppName: DetachUIDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PanelSettings::*)(::UnityEngine::UIElements::UIDocument*)>(&UnityEngine::UIElements::PanelSettings::DetachUIDocument)> {
  static const MethodInfo* get() {
    static auto* uiDocument = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "UIDocument")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PanelSettings*), "DetachUIDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uiDocument});
  }
};
