// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.UIElements.MeshBuilderNative
#include "UnityEngine/UIElements/MeshBuilderNative.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: RenderChain
  class RenderChain;
  // Forward declaring type: BMPAlloc
  struct BMPAlloc;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: ColorPage
  struct ColorPage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::ColorPage, "UnityEngine.UIElements", "ColorPage");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.ColorPage
  // [TokenAttribute] Offset: FFFFFFFF
  struct ColorPage/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Boolean isValid
    // Size: 0x1
    // Offset: 0x0
    bool isValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isValid and: pageAndID
    char __padding0[0x3] = {};
    // public UnityEngine.Color32 pageAndID
    // Size: 0x4
    // Offset: 0x4
    ::UnityEngine::Color32 pageAndID;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    public:
    // Creating value type constructor for type: ColorPage
    constexpr ColorPage(bool isValid_ = {}, ::UnityEngine::Color32 pageAndID_ = {}) noexcept : isValid{isValid_}, pageAndID{pageAndID_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Boolean isValid
    [[deprecated("Use field access instead!")]] bool& dyn_isValid();
    // Get instance field reference: public UnityEngine.Color32 pageAndID
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_pageAndID();
    // static public UnityEngine.UIElements.ColorPage Init(UnityEngine.UIElements.UIR.RenderChain renderChain, UnityEngine.UIElements.UIR.BMPAlloc alloc)
    // Offset: 0x566DC08
    static ::UnityEngine::UIElements::ColorPage Init(::UnityEngine::UIElements::UIR::RenderChain* renderChain, ::UnityEngine::UIElements::UIR::BMPAlloc alloc);
    // public UnityEngine.UIElements.MeshBuilderNative/NativeColorPage ToNativeColorPage()
    // Offset: 0x566DC68
    ::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage ToNativeColorPage();
  }; // UnityEngine.UIElements.ColorPage
  #pragma pack(pop)
  static check_size<sizeof(ColorPage), 4 + sizeof(::UnityEngine::Color32)> __UnityEngine_UIElements_ColorPageSizeCheck;
  static_assert(sizeof(ColorPage) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::ColorPage::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::ColorPage (*)(::UnityEngine::UIElements::UIR::RenderChain*, ::UnityEngine::UIElements::UIR::BMPAlloc)>(&UnityEngine::UIElements::ColorPage::Init)> {
  static const MethodInfo* get() {
    static auto* renderChain = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "RenderChain")->byval_arg;
    static auto* alloc = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements.UIR", "BMPAlloc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColorPage), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderChain, alloc});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ColorPage::ToNativeColorPage
// Il2CppName: ToNativeColorPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage (UnityEngine::UIElements::ColorPage::*)()>(&UnityEngine::UIElements::ColorPage::ToNativeColorPage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ColorPage), "ToNativeColorPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
