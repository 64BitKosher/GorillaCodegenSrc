// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.Column
#include "UnityEngine/UIElements/Column.hpp"
// Including type: UnityEngine.UIElements.UxmlObjectTraits`1
#include "UnityEngine/UIElements/UxmlObjectTraits_1.hpp"
// Including type: UnityEngine.UIElements.Length
#include "UnityEngine/UIElements/Length.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Skipping declaration: <>c__DisplayClass15_0 because it is already included!
  // Skipping declaration: <>c__DisplayClass15_1 because it is already included!
  // Forward declaring type: UxmlStringAttributeDescription
  class UxmlStringAttributeDescription;
  // Forward declaring type: UxmlBoolAttributeDescription
  class UxmlBoolAttributeDescription;
  // Forward declaring type: IUxmlAttributes
  class IUxmlAttributes;
  // Forward declaring type: VisualTreeAsset
  class VisualTreeAsset;
  // Forward declaring type: VisualElement
  class VisualElement;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::Column::UxmlObjectTraits_1, "UnityEngine.UIElements", "Column/UxmlObjectTraits`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.Column/UxmlObjectTraits`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class Column::UxmlObjectTraits_1 : public ::UnityEngine::UIElements::UxmlObjectTraits_1<T> {
    public:
    // Nested type: ::UnityEngine::UIElements::Column::UxmlObjectTraits_1::$$c__DisplayClass15_0<T>
    class $$c__DisplayClass15_0;
    // Nested type: ::UnityEngine::UIElements::Column::UxmlObjectTraits_1::$$c__DisplayClass15_1<T>
    class $$c__DisplayClass15_1;
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.UIElements.Column/UxmlObjectTraits`1/<>c__DisplayClass15_0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c__DisplayClass15_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = Column::UxmlObjectTraits_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass15_0";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public UnityEngine.UIElements.VisualTreeAsset asset
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::UIElements::VisualTreeAsset* asset;
      // Field size check
      static_assert(sizeof(::UnityEngine::UIElements::VisualTreeAsset*) == 0x8);
      public:
      // Creating conversion operator: operator ::UnityEngine::UIElements::VisualTreeAsset*
      constexpr operator ::UnityEngine::UIElements::VisualTreeAsset*() const noexcept {
        return asset;
      }
      // Autogenerated instance field getter
      // Get instance field: public UnityEngine.UIElements.VisualTreeAsset asset
      [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualTreeAsset*& dyn_asset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::$$c__DisplayClass15_0::dyn_asset");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "asset"))->offset;
        return *reinterpret_cast<::UnityEngine::UIElements::VisualTreeAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename Column::UxmlObjectTraits_1<T>::$$c__DisplayClass15_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::$$c__DisplayClass15_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename Column::UxmlObjectTraits_1<T>::$$c__DisplayClass15_0*, creationType>()));
      }
      // UnityEngine.UIElements.VisualElement <Init>b__0()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::UnityEngine::UIElements::VisualElement* $Init$b__0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::$$c__DisplayClass15_0::<Init>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Init>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::VisualElement*, false>(this, ___internal__method);
      }
    }; // UnityEngine.UIElements.Column/UxmlObjectTraits`1/<>c__DisplayClass15_0
    // Could not write size check! Type: UnityEngine.UIElements.Column/UxmlObjectTraits`1/<>c__DisplayClass15_0 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.UIElements.Column/UxmlObjectTraits`1/<>c__DisplayClass15_1
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c__DisplayClass15_1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = Column::UxmlObjectTraits_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass15_1";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public UnityEngine.UIElements.VisualTreeAsset asset
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::UIElements::VisualTreeAsset* asset;
      // Field size check
      static_assert(sizeof(::UnityEngine::UIElements::VisualTreeAsset*) == 0x8);
      public:
      // Creating conversion operator: operator ::UnityEngine::UIElements::VisualTreeAsset*
      constexpr operator ::UnityEngine::UIElements::VisualTreeAsset*() const noexcept {
        return asset;
      }
      // Autogenerated instance field getter
      // Get instance field: public UnityEngine.UIElements.VisualTreeAsset asset
      [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualTreeAsset*& dyn_asset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::$$c__DisplayClass15_1::dyn_asset");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "asset"))->offset;
        return *reinterpret_cast<::UnityEngine::UIElements::VisualTreeAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename Column::UxmlObjectTraits_1<T>::$$c__DisplayClass15_1* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::$$c__DisplayClass15_1::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename Column::UxmlObjectTraits_1<T>::$$c__DisplayClass15_1*, creationType>()));
      }
      // UnityEngine.UIElements.VisualElement <Init>b__1()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::UnityEngine::UIElements::VisualElement* $Init$b__1() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::$$c__DisplayClass15_1::<Init>b__1");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Init>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::VisualElement*, false>(this, ___internal__method);
      }
    }; // UnityEngine.UIElements.Column/UxmlObjectTraits`1/<>c__DisplayClass15_1
    // Could not write size check! Type: UnityEngine.UIElements.Column/UxmlObjectTraits`1/<>c__DisplayClass15_1 is generic, or has no fields that are valid for size checks!
    public:
    // private UnityEngine.UIElements.UxmlStringAttributeDescription m_Name
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_Name;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlStringAttributeDescription m_Text
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_Text;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlBoolAttributeDescription m_Visible
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UxmlBoolAttributeDescription* m_Visible;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlBoolAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlStringAttributeDescription m_Width
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_Width;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlStringAttributeDescription m_MinWidth
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_MinWidth;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlStringAttributeDescription m_MaxWidth
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_MaxWidth;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlBoolAttributeDescription m_Stretch
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UxmlBoolAttributeDescription* m_Stretch;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlBoolAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlBoolAttributeDescription m_Sortable
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UxmlBoolAttributeDescription* m_Sortable;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlBoolAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlBoolAttributeDescription m_Optional
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UxmlBoolAttributeDescription* m_Optional;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlBoolAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlBoolAttributeDescription m_Resizable
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UxmlBoolAttributeDescription* m_Resizable;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlBoolAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlStringAttributeDescription m_HeaderTemplateId
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_HeaderTemplateId;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlStringAttributeDescription m_CellTemplateId
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_CellTemplateId;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    public:
    // Deleting conversion operator: operator bool
    constexpr operator bool() const noexcept = delete;
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.UxmlStringAttributeDescription m_Name
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_Name() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::dyn_m_Name");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Name"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::UxmlStringAttributeDescription**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.UxmlStringAttributeDescription m_Text
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_Text() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::dyn_m_Text");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Text"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::UxmlStringAttributeDescription**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.UxmlBoolAttributeDescription m_Visible
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlBoolAttributeDescription*& dyn_m_Visible() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::dyn_m_Visible");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Visible"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::UxmlBoolAttributeDescription**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.UxmlStringAttributeDescription m_Width
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_Width() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::dyn_m_Width");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Width"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::UxmlStringAttributeDescription**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.UxmlStringAttributeDescription m_MinWidth
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_MinWidth() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::dyn_m_MinWidth");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MinWidth"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::UxmlStringAttributeDescription**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.UxmlStringAttributeDescription m_MaxWidth
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_MaxWidth() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::dyn_m_MaxWidth");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaxWidth"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::UxmlStringAttributeDescription**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.UxmlBoolAttributeDescription m_Stretch
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlBoolAttributeDescription*& dyn_m_Stretch() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::dyn_m_Stretch");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Stretch"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::UxmlBoolAttributeDescription**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.UxmlBoolAttributeDescription m_Sortable
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlBoolAttributeDescription*& dyn_m_Sortable() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::dyn_m_Sortable");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Sortable"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::UxmlBoolAttributeDescription**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.UxmlBoolAttributeDescription m_Optional
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlBoolAttributeDescription*& dyn_m_Optional() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::dyn_m_Optional");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Optional"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::UxmlBoolAttributeDescription**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.UxmlBoolAttributeDescription m_Resizable
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlBoolAttributeDescription*& dyn_m_Resizable() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::dyn_m_Resizable");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Resizable"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::UxmlBoolAttributeDescription**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.UxmlStringAttributeDescription m_HeaderTemplateId
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_HeaderTemplateId() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::dyn_m_HeaderTemplateId");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_HeaderTemplateId"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::UxmlStringAttributeDescription**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.UxmlStringAttributeDescription m_CellTemplateId
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_CellTemplateId() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::dyn_m_CellTemplateId");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CellTemplateId"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::UxmlStringAttributeDescription**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // static private UnityEngine.UIElements.Length ParseLength(System.String str, UnityEngine.UIElements.Length defaultValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::UnityEngine::UIElements::Length ParseLength(::StringW str, ::UnityEngine::UIElements::Length defaultValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::ParseLength");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Column::UxmlObjectTraits_1<T>*>::get(), "ParseLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(defaultValue)})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::Length, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, str, defaultValue);
    }
    // public override System.Void Init(ref T obj, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.UxmlObjectTraits`1
    // Base method: System.Void UxmlObjectTraits_1::Init(ref T obj, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc)
    void Init(ByRef<T> obj, ::UnityEngine::UIElements::IUxmlAttributes* bag, ::UnityEngine::UIElements::CreationContext cc) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::Init");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::UxmlObjectTraits_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(obj), bag, cc);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.UxmlObjectTraits`1
    // Base method: System.Void UxmlObjectTraits_1::.ctor()
    // Base method: System.Void BaseUxmlTraits::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Column::UxmlObjectTraits_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Column::UxmlObjectTraits_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Column::UxmlObjectTraits_1<T>*, creationType>()));
    }
  }; // UnityEngine.UIElements.Column/UxmlObjectTraits`1
  // Could not write size check! Type: UnityEngine.UIElements.Column/UxmlObjectTraits`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
