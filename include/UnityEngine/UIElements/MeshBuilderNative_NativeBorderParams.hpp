// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.MeshBuilderNative
#include "UnityEngine/UIElements/MeshBuilderNative.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.UIElements.MeshBuilderNative/NativeColorPage
#include "UnityEngine/UIElements/MeshBuilderNative_NativeColorPage.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::MeshBuilderNative::NativeBorderParams, "UnityEngine.UIElements", "MeshBuilderNative/NativeBorderParams");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0xA0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.MeshBuilderNative/NativeBorderParams
  // [TokenAttribute] Offset: FFFFFFFF
  struct MeshBuilderNative::NativeBorderParams/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Rect rect
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Rect rect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // public UnityEngine.Color leftColor
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Color leftColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color topColor
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Color topColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color rightColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color rightColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color bottomColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color bottomColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Single leftWidth
    // Size: 0x4
    // Offset: 0x50
    float leftWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single topWidth
    // Size: 0x4
    // Offset: 0x54
    float topWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rightWidth
    // Size: 0x4
    // Offset: 0x58
    float rightWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single bottomWidth
    // Size: 0x4
    // Offset: 0x5C
    float bottomWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector2 topLeftRadius
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Vector2 topLeftRadius;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 topRightRadius
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Vector2 topRightRadius;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 bottomRightRadius
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Vector2 bottomRightRadius;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 bottomLeftRadius
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Vector2 bottomLeftRadius;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // UnityEngine.UIElements.MeshBuilderNative/NativeColorPage leftColorPage
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage leftColorPage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage) == 0x8);
    // UnityEngine.UIElements.MeshBuilderNative/NativeColorPage topColorPage
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage topColorPage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage) == 0x8);
    // UnityEngine.UIElements.MeshBuilderNative/NativeColorPage rightColorPage
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage rightColorPage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage) == 0x8);
    // UnityEngine.UIElements.MeshBuilderNative/NativeColorPage bottomColorPage
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage bottomColorPage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage) == 0x8);
    public:
    // Creating value type constructor for type: NativeBorderParams
    constexpr NativeBorderParams(::UnityEngine::Rect rect_ = {}, ::UnityEngine::Color leftColor_ = {}, ::UnityEngine::Color topColor_ = {}, ::UnityEngine::Color rightColor_ = {}, ::UnityEngine::Color bottomColor_ = {}, float leftWidth_ = {}, float topWidth_ = {}, float rightWidth_ = {}, float bottomWidth_ = {}, ::UnityEngine::Vector2 topLeftRadius_ = {}, ::UnityEngine::Vector2 topRightRadius_ = {}, ::UnityEngine::Vector2 bottomRightRadius_ = {}, ::UnityEngine::Vector2 bottomLeftRadius_ = {}, ::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage leftColorPage_ = {}, ::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage topColorPage_ = {}, ::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage rightColorPage_ = {}, ::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage bottomColorPage_ = {}) noexcept : rect{rect_}, leftColor{leftColor_}, topColor{topColor_}, rightColor{rightColor_}, bottomColor{bottomColor_}, leftWidth{leftWidth_}, topWidth{topWidth_}, rightWidth{rightWidth_}, bottomWidth{bottomWidth_}, topLeftRadius{topLeftRadius_}, topRightRadius{topRightRadius_}, bottomRightRadius{bottomRightRadius_}, bottomLeftRadius{bottomLeftRadius_}, leftColorPage{leftColorPage_}, topColorPage{topColorPage_}, rightColorPage{rightColorPage_}, bottomColorPage{bottomColorPage_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Rect rect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_rect();
    // Get instance field reference: public UnityEngine.Color leftColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_leftColor();
    // Get instance field reference: public UnityEngine.Color topColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_topColor();
    // Get instance field reference: public UnityEngine.Color rightColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_rightColor();
    // Get instance field reference: public UnityEngine.Color bottomColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_bottomColor();
    // Get instance field reference: public System.Single leftWidth
    [[deprecated("Use field access instead!")]] float& dyn_leftWidth();
    // Get instance field reference: public System.Single topWidth
    [[deprecated("Use field access instead!")]] float& dyn_topWidth();
    // Get instance field reference: public System.Single rightWidth
    [[deprecated("Use field access instead!")]] float& dyn_rightWidth();
    // Get instance field reference: public System.Single bottomWidth
    [[deprecated("Use field access instead!")]] float& dyn_bottomWidth();
    // Get instance field reference: public UnityEngine.Vector2 topLeftRadius
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_topLeftRadius();
    // Get instance field reference: public UnityEngine.Vector2 topRightRadius
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_topRightRadius();
    // Get instance field reference: public UnityEngine.Vector2 bottomRightRadius
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_bottomRightRadius();
    // Get instance field reference: public UnityEngine.Vector2 bottomLeftRadius
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_bottomLeftRadius();
    // Get instance field reference: UnityEngine.UIElements.MeshBuilderNative/NativeColorPage leftColorPage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage& dyn_leftColorPage();
    // Get instance field reference: UnityEngine.UIElements.MeshBuilderNative/NativeColorPage topColorPage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage& dyn_topColorPage();
    // Get instance field reference: UnityEngine.UIElements.MeshBuilderNative/NativeColorPage rightColorPage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage& dyn_rightColorPage();
    // Get instance field reference: UnityEngine.UIElements.MeshBuilderNative/NativeColorPage bottomColorPage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage& dyn_bottomColorPage();
  }; // UnityEngine.UIElements.MeshBuilderNative/NativeBorderParams
  #pragma pack(pop)
  static check_size<sizeof(MeshBuilderNative::NativeBorderParams), 152 + sizeof(::UnityEngine::UIElements::MeshBuilderNative::NativeColorPage)> __UnityEngine_UIElements_MeshBuilderNative_NativeBorderParamsSizeCheck;
  static_assert(sizeof(MeshBuilderNative::NativeBorderParams) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
