// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.ICollectionDragAndDropController
#include "UnityEngine/UIElements/ICollectionDragAndDropController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: BaseVerticalCollectionView
  class BaseVerticalCollectionView;
  // Skipping declaration: StartDragArgs because it is already included!
  // Skipping declaration: DragVisualMode because it is already included!
  // Forward declaring type: IListDragAndDropArgs
  class IListDragAndDropArgs;
  // Forward declaring type: ReusableCollectionItem
  class ReusableCollectionItem;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector2 because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: BaseReorderableDragAndDropController
  class BaseReorderableDragAndDropController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::BaseReorderableDragAndDropController);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::BaseReorderableDragAndDropController*, "UnityEngine.UIElements", "BaseReorderableDragAndDropController");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.BaseReorderableDragAndDropController
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseReorderableDragAndDropController : public ::Il2CppObject/*, public ::UnityEngine::UIElements::ICollectionDragAndDropController*/ {
    public:
    public:
    // protected readonly UnityEngine.UIElements.BaseVerticalCollectionView m_View
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::BaseVerticalCollectionView* m_View;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::BaseVerticalCollectionView*) == 0x8);
    // protected System.Collections.Generic.List`1<System.Int32> m_SortedSelectedIds
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<int>* m_SortedSelectedIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Boolean <enableReordering>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool enableReordering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::ICollectionDragAndDropController
    operator ::UnityEngine::UIElements::ICollectionDragAndDropController() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::ICollectionDragAndDropController*>(this);
    }
    // Get instance field reference: protected readonly UnityEngine.UIElements.BaseVerticalCollectionView m_View
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::BaseVerticalCollectionView*& dyn_m_View();
    // Get instance field reference: protected System.Collections.Generic.List`1<System.Int32> m_SortedSelectedIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_m_SortedSelectedIds();
    // Get instance field reference: private System.Boolean <enableReordering>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$enableReordering$k__BackingField();
    // public System.Collections.Generic.IEnumerable`1<System.Int32> GetSortedSelectedIds()
    // Offset: 0x563A130
    ::System::Collections::Generic::IEnumerable_1<int>* GetSortedSelectedIds();
    // protected System.Void .ctor(UnityEngine.UIElements.BaseVerticalCollectionView view)
    // Offset: 0x563A138
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseReorderableDragAndDropController* New_ctor(::UnityEngine::UIElements::BaseVerticalCollectionView* view) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::BaseReorderableDragAndDropController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseReorderableDragAndDropController*, creationType>(view)));
    }
    // public System.Boolean get_enableReordering()
    // Offset: 0x563A1DC
    bool get_enableReordering();
    // public System.Void set_enableReordering(System.Boolean value)
    // Offset: 0x563A1E4
    void set_enableReordering(bool value);
    // public System.Boolean CanStartDrag(System.Collections.Generic.IEnumerable`1<System.Int32> itemIds)
    // Offset: 0x563A1F0
    bool CanStartDrag(::System::Collections::Generic::IEnumerable_1<int>* itemIds);
    // public UnityEngine.UIElements.StartDragArgs SetupDragAndDrop(System.Collections.Generic.IEnumerable`1<System.Int32> itemIds, System.Boolean skipText)
    // Offset: 0x563A200
    ::UnityEngine::UIElements::StartDragArgs SetupDragAndDrop(::System::Collections::Generic::IEnumerable_1<int>* itemIds, bool skipText);
    // protected System.Int32 CompareId(System.Int32 id1, System.Int32 id2)
    // Offset: 0x563AB50
    int CompareId(int id1, int id2);
    // public UnityEngine.UIElements.DragVisualMode HandleDragAndDrop(UnityEngine.UIElements.IListDragAndDropArgs args)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::DragVisualMode HandleDragAndDrop(::UnityEngine::UIElements::IListDragAndDropArgs* args);
    // public System.Void OnDrop(UnityEngine.UIElements.IListDragAndDropArgs args)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDrop(::UnityEngine::UIElements::IListDragAndDropArgs* args);
    // public System.Void DragCleanup()
    // Offset: 0x563AB70
    void DragCleanup();
    // public System.Void HandleAutoExpand(UnityEngine.UIElements.ReusableCollectionItem item, UnityEngine.Vector2 pointerPosition)
    // Offset: 0x563AB74
    void HandleAutoExpand(::UnityEngine::UIElements::ReusableCollectionItem* item, ::UnityEngine::Vector2 pointerPosition);
  }; // UnityEngine.UIElements.BaseReorderableDragAndDropController
  #pragma pack(pop)
  static check_size<sizeof(BaseReorderableDragAndDropController), 32 + sizeof(bool)> __UnityEngine_UIElements_BaseReorderableDragAndDropControllerSizeCheck;
  static_assert(sizeof(BaseReorderableDragAndDropController) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseReorderableDragAndDropController::GetSortedSelectedIds
// Il2CppName: GetSortedSelectedIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<int>* (UnityEngine::UIElements::BaseReorderableDragAndDropController::*)()>(&UnityEngine::UIElements::BaseReorderableDragAndDropController::GetSortedSelectedIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseReorderableDragAndDropController*), "GetSortedSelectedIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseReorderableDragAndDropController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseReorderableDragAndDropController::get_enableReordering
// Il2CppName: get_enableReordering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::BaseReorderableDragAndDropController::*)()>(&UnityEngine::UIElements::BaseReorderableDragAndDropController::get_enableReordering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseReorderableDragAndDropController*), "get_enableReordering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseReorderableDragAndDropController::set_enableReordering
// Il2CppName: set_enableReordering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseReorderableDragAndDropController::*)(bool)>(&UnityEngine::UIElements::BaseReorderableDragAndDropController::set_enableReordering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseReorderableDragAndDropController*), "set_enableReordering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseReorderableDragAndDropController::CanStartDrag
// Il2CppName: CanStartDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::BaseReorderableDragAndDropController::*)(::System::Collections::Generic::IEnumerable_1<int>*)>(&UnityEngine::UIElements::BaseReorderableDragAndDropController::CanStartDrag)> {
  static const MethodInfo* get() {
    static auto* itemIds = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseReorderableDragAndDropController*), "CanStartDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{itemIds});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseReorderableDragAndDropController::SetupDragAndDrop
// Il2CppName: SetupDragAndDrop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::StartDragArgs (UnityEngine::UIElements::BaseReorderableDragAndDropController::*)(::System::Collections::Generic::IEnumerable_1<int>*, bool)>(&UnityEngine::UIElements::BaseReorderableDragAndDropController::SetupDragAndDrop)> {
  static const MethodInfo* get() {
    static auto* itemIds = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* skipText = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseReorderableDragAndDropController*), "SetupDragAndDrop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{itemIds, skipText});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseReorderableDragAndDropController::CompareId
// Il2CppName: CompareId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::BaseReorderableDragAndDropController::*)(int, int)>(&UnityEngine::UIElements::BaseReorderableDragAndDropController::CompareId)> {
  static const MethodInfo* get() {
    static auto* id1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* id2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseReorderableDragAndDropController*), "CompareId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id1, id2});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseReorderableDragAndDropController::HandleDragAndDrop
// Il2CppName: HandleDragAndDrop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::DragVisualMode (UnityEngine::UIElements::BaseReorderableDragAndDropController::*)(::UnityEngine::UIElements::IListDragAndDropArgs*)>(&UnityEngine::UIElements::BaseReorderableDragAndDropController::HandleDragAndDrop)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "IListDragAndDropArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseReorderableDragAndDropController*), "HandleDragAndDrop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseReorderableDragAndDropController::OnDrop
// Il2CppName: OnDrop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseReorderableDragAndDropController::*)(::UnityEngine::UIElements::IListDragAndDropArgs*)>(&UnityEngine::UIElements::BaseReorderableDragAndDropController::OnDrop)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "IListDragAndDropArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseReorderableDragAndDropController*), "OnDrop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseReorderableDragAndDropController::DragCleanup
// Il2CppName: DragCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseReorderableDragAndDropController::*)()>(&UnityEngine::UIElements::BaseReorderableDragAndDropController::DragCleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseReorderableDragAndDropController*), "DragCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::BaseReorderableDragAndDropController::HandleAutoExpand
// Il2CppName: HandleAutoExpand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::BaseReorderableDragAndDropController::*)(::UnityEngine::UIElements::ReusableCollectionItem*, ::UnityEngine::Vector2)>(&UnityEngine::UIElements::BaseReorderableDragAndDropController::HandleAutoExpand)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ReusableCollectionItem")->byval_arg;
    static auto* pointerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::BaseReorderableDragAndDropController*), "HandleAutoExpand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item, pointerPosition});
  }
};
