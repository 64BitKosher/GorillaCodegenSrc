// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: SerializedVirtualizationData
  class SerializedVirtualizationData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::SerializedVirtualizationData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::SerializedVirtualizationData*, "UnityEngine.UIElements", "SerializedVirtualizationData");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.SerializedVirtualizationData
  // [TokenAttribute] Offset: FFFFFFFF
  class SerializedVirtualizationData : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Vector2 scrollOffset
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Vector2 scrollOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Int32 firstVisibleIndex
    // Size: 0x4
    // Offset: 0x18
    int firstVisibleIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single contentPadding
    // Size: 0x4
    // Offset: 0x1C
    float contentPadding;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single contentHeight
    // Size: 0x4
    // Offset: 0x20
    float contentHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 anchoredItemIndex
    // Size: 0x4
    // Offset: 0x24
    int anchoredItemIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single anchorOffset
    // Size: 0x4
    // Offset: 0x28
    float anchorOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Vector2 scrollOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_scrollOffset();
    // Get instance field reference: public System.Int32 firstVisibleIndex
    [[deprecated("Use field access instead!")]] int& dyn_firstVisibleIndex();
    // Get instance field reference: public System.Single contentPadding
    [[deprecated("Use field access instead!")]] float& dyn_contentPadding();
    // Get instance field reference: public System.Single contentHeight
    [[deprecated("Use field access instead!")]] float& dyn_contentHeight();
    // Get instance field reference: public System.Int32 anchoredItemIndex
    [[deprecated("Use field access instead!")]] int& dyn_anchoredItemIndex();
    // Get instance field reference: public System.Single anchorOffset
    [[deprecated("Use field access instead!")]] float& dyn_anchorOffset();
    // public System.Void .ctor()
    // Offset: 0x55A6D3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SerializedVirtualizationData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::SerializedVirtualizationData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SerializedVirtualizationData*, creationType>()));
    }
  }; // UnityEngine.UIElements.SerializedVirtualizationData
  #pragma pack(pop)
  static check_size<sizeof(SerializedVirtualizationData), 40 + sizeof(float)> __UnityEngine_UIElements_SerializedVirtualizationDataSizeCheck;
  static_assert(sizeof(SerializedVirtualizationData) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::SerializedVirtualizationData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
