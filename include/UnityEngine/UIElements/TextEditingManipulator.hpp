// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TextElement
  class TextElement;
  // Forward declaring type: TextEditorEventHandler
  class TextEditorEventHandler;
  // Forward declaring type: IVisualElementScheduledItem
  class IVisualElementScheduledItem;
  // Forward declaring type: EventBase
  class EventBase;
  // Forward declaring type: FocusInEvent
  class FocusInEvent;
  // Forward declaring type: FocusOutEvent
  class FocusOutEvent;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TextEditingUtilities
  class TextEditingUtilities;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TextEditingManipulator
  class TextEditingManipulator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::TextEditingManipulator);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::TextEditingManipulator*, "UnityEngine.UIElements", "TextEditingManipulator");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.TextEditingManipulator
  // [TokenAttribute] Offset: FFFFFFFF
  class TextEditingManipulator : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.UIElements.TextElement m_TextElement
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::TextElement* m_TextElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::TextElement*) == 0x8);
    // UnityEngine.UIElements.TextEditorEventHandler editingEventHandler
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::TextEditorEventHandler* editingEventHandler;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::TextEditorEventHandler*) == 0x8);
    // UnityEngine.TextEditingUtilities editingUtilities
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::TextEditingUtilities* editingUtilities;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextEditingUtilities*) == 0x8);
    // private System.Boolean m_TouchScreenTextFieldInitialized
    // Size: 0x1
    // Offset: 0x28
    bool m_TouchScreenTextFieldInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_TouchScreenTextFieldInitialized and: m_HardwareKeyboardPoller
    char __padding3[0x7] = {};
    // private UnityEngine.UIElements.IVisualElementScheduledItem m_HardwareKeyboardPoller
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UIElements::IVisualElementScheduledItem* m_HardwareKeyboardPoller;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::IVisualElementScheduledItem*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.UIElements.TextElement m_TextElement
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::TextElement*& dyn_m_TextElement();
    // Get instance field reference: UnityEngine.UIElements.TextEditorEventHandler editingEventHandler
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::TextEditorEventHandler*& dyn_editingEventHandler();
    // Get instance field reference: UnityEngine.TextEditingUtilities editingUtilities
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextEditingUtilities*& dyn_editingUtilities();
    // Get instance field reference: private System.Boolean m_TouchScreenTextFieldInitialized
    [[deprecated("Use field access instead!")]] bool& dyn_m_TouchScreenTextFieldInitialized();
    // Get instance field reference: private UnityEngine.UIElements.IVisualElementScheduledItem m_HardwareKeyboardPoller
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::IVisualElementScheduledItem*& dyn_m_HardwareKeyboardPoller();
    // private System.Boolean get_touchScreenTextFieldChanged()
    // Offset: 0x56B4B08
    bool get_touchScreenTextFieldChanged();
    // public System.Void .ctor(UnityEngine.UIElements.TextElement textElement)
    // Offset: 0x56B4BB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextEditingManipulator* New_ctor(::UnityEngine::UIElements::TextElement* textElement) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::TextEditingManipulator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextEditingManipulator*, creationType>(textElement)));
    }
    // private System.Void InitTextEditorEventHandler()
    // Offset: 0x56B4D10
    void InitTextEditorEventHandler();
    // System.Void ExecuteDefaultActionAtTarget(UnityEngine.UIElements.EventBase evt)
    // Offset: 0x56B4DE4
    void ExecuteDefaultActionAtTarget(::UnityEngine::UIElements::EventBase* evt);
    // private System.Void OnFocusInEvent(UnityEngine.UIElements.FocusInEvent _)
    // Offset: 0x56B4F48
    void OnFocusInEvent(::UnityEngine::UIElements::FocusInEvent* _);
    // private System.Void OnFocusOutEvent(UnityEngine.UIElements.FocusOutEvent _)
    // Offset: 0x56B5200
    void OnFocusOutEvent(::UnityEngine::UIElements::FocusOutEvent* _);
    // private System.Void <OnFocusInEvent>b__10_0()
    // Offset: 0x56B52B4
    void $OnFocusInEvent$b__10_0();
  }; // UnityEngine.UIElements.TextEditingManipulator
  #pragma pack(pop)
  static check_size<sizeof(TextEditingManipulator), 48 + sizeof(::UnityEngine::UIElements::IVisualElementScheduledItem*)> __UnityEngine_UIElements_TextEditingManipulatorSizeCheck;
  static_assert(sizeof(TextEditingManipulator) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::TextEditingManipulator::get_touchScreenTextFieldChanged
// Il2CppName: get_touchScreenTextFieldChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::TextEditingManipulator::*)()>(&UnityEngine::UIElements::TextEditingManipulator::get_touchScreenTextFieldChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextEditingManipulator*), "get_touchScreenTextFieldChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextEditingManipulator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::TextEditingManipulator::InitTextEditorEventHandler
// Il2CppName: InitTextEditorEventHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TextEditingManipulator::*)()>(&UnityEngine::UIElements::TextEditingManipulator::InitTextEditorEventHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextEditingManipulator*), "InitTextEditorEventHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextEditingManipulator::ExecuteDefaultActionAtTarget
// Il2CppName: ExecuteDefaultActionAtTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TextEditingManipulator::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::TextEditingManipulator::ExecuteDefaultActionAtTarget)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextEditingManipulator*), "ExecuteDefaultActionAtTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextEditingManipulator::OnFocusInEvent
// Il2CppName: OnFocusInEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TextEditingManipulator::*)(::UnityEngine::UIElements::FocusInEvent*)>(&UnityEngine::UIElements::TextEditingManipulator::OnFocusInEvent)> {
  static const MethodInfo* get() {
    static auto* _ = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "FocusInEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextEditingManipulator*), "OnFocusInEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextEditingManipulator::OnFocusOutEvent
// Il2CppName: OnFocusOutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TextEditingManipulator::*)(::UnityEngine::UIElements::FocusOutEvent*)>(&UnityEngine::UIElements::TextEditingManipulator::OnFocusOutEvent)> {
  static const MethodInfo* get() {
    static auto* _ = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "FocusOutEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextEditingManipulator*), "OnFocusOutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::TextEditingManipulator::$OnFocusInEvent$b__10_0
// Il2CppName: <OnFocusInEvent>b__10_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::TextEditingManipulator::*)()>(&UnityEngine::UIElements::TextEditingManipulator::$OnFocusInEvent$b__10_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::TextEditingManipulator*), "<OnFocusInEvent>b__10_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
