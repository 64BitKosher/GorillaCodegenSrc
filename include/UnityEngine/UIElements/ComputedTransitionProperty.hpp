// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.StyleSheets.StylePropertyId
#include "UnityEngine/UIElements/StyleSheets/StylePropertyId.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: ComputedTransitionProperty
  struct ComputedTransitionProperty;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::ComputedTransitionProperty, "UnityEngine.UIElements", "ComputedTransitionProperty");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.ComputedTransitionProperty
  // [TokenAttribute] Offset: FFFFFFFF
  struct ComputedTransitionProperty/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.UIElements.StyleSheets.StylePropertyId id
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::UIElements::StyleSheets::StylePropertyId id;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleSheets::StylePropertyId) == 0x4);
    // public System.Int32 durationMs
    // Size: 0x4
    // Offset: 0x4
    int durationMs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 delayMs
    // Size: 0x4
    // Offset: 0x8
    int delayMs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: delayMs and: easingCurve
    char __padding2[0x4] = {};
    // public System.Func`2<System.Single,System.Single> easingCurve
    // Size: 0x8
    // Offset: 0x10
    ::System::Func_2<float, float>* easingCurve;
    // Field size check
    static_assert(sizeof(::System::Func_2<float, float>*) == 0x8);
    public:
    // Creating value type constructor for type: ComputedTransitionProperty
    constexpr ComputedTransitionProperty(::UnityEngine::UIElements::StyleSheets::StylePropertyId id_ = {}, int durationMs_ = {}, int delayMs_ = {}, ::System::Func_2<float, float>* easingCurve_ = {}) noexcept : id{id_}, durationMs{durationMs_}, delayMs{delayMs_}, easingCurve{easingCurve_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.UIElements.StyleSheets.StylePropertyId id
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleSheets::StylePropertyId& dyn_id();
    // Get instance field reference: public System.Int32 durationMs
    [[deprecated("Use field access instead!")]] int& dyn_durationMs();
    // Get instance field reference: public System.Int32 delayMs
    [[deprecated("Use field access instead!")]] int& dyn_delayMs();
    // Get instance field reference: public System.Func`2<System.Single,System.Single> easingCurve
    [[deprecated("Use field access instead!")]] ::System::Func_2<float, float>*& dyn_easingCurve();
  }; // UnityEngine.UIElements.ComputedTransitionProperty
  #pragma pack(pop)
  static check_size<sizeof(ComputedTransitionProperty), 16 + sizeof(::System::Func_2<float, float>*)> __UnityEngine_UIElements_ComputedTransitionPropertySizeCheck;
  static_assert(sizeof(ComputedTransitionProperty) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
