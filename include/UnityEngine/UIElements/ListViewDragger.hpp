// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.DragEventsProcessor
#include "UnityEngine/UIElements/DragEventsProcessor.hpp"
// Including type: UnityEngine.UIElements.DragAndDropPosition
#include "UnityEngine/UIElements/DragAndDropPosition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: ICollectionDragAndDropController
  class ICollectionDragAndDropController;
  // Forward declaring type: BaseVerticalCollectionView
  class BaseVerticalCollectionView;
  // Forward declaring type: ScrollView
  class ScrollView;
  // Forward declaring type: DragVisualMode
  struct DragVisualMode;
  // Skipping declaration: DragPosition because it is already included!
  // Forward declaring type: DragAndDropArgs
  struct DragAndDropArgs;
  // Forward declaring type: ReusableCollectionItem
  class ReusableCollectionItem;
  // Forward declaring type: GeometryChangedEvent
  class GeometryChangedEvent;
  // Forward declaring type: StartDragArgs
  struct StartDragArgs;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: ListViewDragger
  class ListViewDragger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::ListViewDragger);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::ListViewDragger*, "UnityEngine.UIElements", "ListViewDragger");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.ListViewDragger
  // [TokenAttribute] Offset: FFFFFFFF
  class ListViewDragger : public ::UnityEngine::UIElements::DragEventsProcessor {
    public:
    // Nested type: ::UnityEngine::UIElements::ListViewDragger::DragPosition
    struct DragPosition;
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.UIElements.ListViewDragger/DragPosition
    // [TokenAttribute] Offset: FFFFFFFF
    struct DragPosition/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::UIElements::ListViewDragger::DragPosition>*/ {
      public:
      public:
      // public System.Int32 insertAtIndex
      // Size: 0x4
      // Offset: 0x0
      int insertAtIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 parentId
      // Size: 0x4
      // Offset: 0x4
      int parentId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 childIndex
      // Size: 0x4
      // Offset: 0x8
      int childIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Padding between fields: childIndex and: recycledItem
      char __padding2[0x4] = {};
      // public UnityEngine.UIElements.ReusableCollectionItem recycledItem
      // Size: 0x8
      // Offset: 0x10
      ::UnityEngine::UIElements::ReusableCollectionItem* recycledItem;
      // Field size check
      static_assert(sizeof(::UnityEngine::UIElements::ReusableCollectionItem*) == 0x8);
      // public UnityEngine.UIElements.DragAndDropPosition dropPosition
      // Size: 0x4
      // Offset: 0x18
      ::UnityEngine::UIElements::DragAndDropPosition dropPosition;
      // Field size check
      static_assert(sizeof(::UnityEngine::UIElements::DragAndDropPosition) == 0x4);
      public:
      // Creating value type constructor for type: DragPosition
      constexpr DragPosition(int insertAtIndex_ = {}, int parentId_ = {}, int childIndex_ = {}, ::UnityEngine::UIElements::ReusableCollectionItem* recycledItem_ = {}, ::UnityEngine::UIElements::DragAndDropPosition dropPosition_ = {}) noexcept : insertAtIndex{insertAtIndex_}, parentId{parentId_}, childIndex{childIndex_}, recycledItem{recycledItem_}, dropPosition{dropPosition_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::ListViewDragger::DragPosition>
      operator ::System::IEquatable_1<::UnityEngine::UIElements::ListViewDragger::DragPosition>() noexcept {
        return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::ListViewDragger::DragPosition>*>(this);
      }
      // Get instance field reference: public System.Int32 insertAtIndex
      [[deprecated("Use field access instead!")]] int& dyn_insertAtIndex();
      // Get instance field reference: public System.Int32 parentId
      [[deprecated("Use field access instead!")]] int& dyn_parentId();
      // Get instance field reference: public System.Int32 childIndex
      [[deprecated("Use field access instead!")]] int& dyn_childIndex();
      // Get instance field reference: public UnityEngine.UIElements.ReusableCollectionItem recycledItem
      [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::ReusableCollectionItem*& dyn_recycledItem();
      // Get instance field reference: public UnityEngine.UIElements.DragAndDropPosition dropPosition
      [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::DragAndDropPosition& dyn_dropPosition();
      // public System.Boolean Equals(UnityEngine.UIElements.ListViewDragger/DragPosition other)
      // Offset: 0x563E8CC
      bool Equals(::UnityEngine::UIElements::ListViewDragger::DragPosition other);
      // public override System.Boolean Equals(System.Object obj)
      // Offset: 0x56406C4
      // Implemented from: System.ValueType
      // Base method: System.Boolean ValueType::Equals(System.Object obj)
      bool Equals(::Il2CppObject* obj);
      // public override System.Int32 GetHashCode()
      // Offset: 0x564074C
      // Implemented from: System.ValueType
      // Base method: System.Int32 ValueType::GetHashCode()
      int GetHashCode();
    }; // UnityEngine.UIElements.ListViewDragger/DragPosition
    #pragma pack(pop)
    static check_size<sizeof(ListViewDragger::DragPosition), 24 + sizeof(::UnityEngine::UIElements::DragAndDropPosition)> __UnityEngine_UIElements_ListViewDragger_DragPositionSizeCheck;
    static_assert(sizeof(ListViewDragger::DragPosition) == 0x1C);
    public:
    // private UnityEngine.UIElements.ListViewDragger/DragPosition m_LastDragPosition
    // Size: 0x1C
    // Offset: 0x30
    ::UnityEngine::UIElements::ListViewDragger::DragPosition m_LastDragPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::ListViewDragger::DragPosition) == 0x1C);
    // Padding between fields: m_LastDragPosition and: m_DragHoverBar
    char __padding0[0x4] = {};
    // private UnityEngine.UIElements.VisualElement m_DragHoverBar
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UIElements::VisualElement* m_DragHoverBar;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.VisualElement m_DragHoverItemMarker
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::UIElements::VisualElement* m_DragHoverItemMarker;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.VisualElement m_DragHoverSiblingMarker
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::UIElements::VisualElement* m_DragHoverSiblingMarker;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private System.Single m_LeftIndentation
    // Size: 0x4
    // Offset: 0x68
    float m_LeftIndentation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_SiblingBottom
    // Size: 0x4
    // Offset: 0x6C
    float m_SiblingBottom;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.UIElements.ICollectionDragAndDropController <dragAndDropController>k__BackingField
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::UIElements::ICollectionDragAndDropController* dragAndDropController;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::ICollectionDragAndDropController*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.UIElements.ListViewDragger/DragPosition m_LastDragPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::ListViewDragger::DragPosition& dyn_m_LastDragPosition();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement m_DragHoverBar
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_DragHoverBar();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement m_DragHoverItemMarker
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_DragHoverItemMarker();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement m_DragHoverSiblingMarker
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_DragHoverSiblingMarker();
    // Get instance field reference: private System.Single m_LeftIndentation
    [[deprecated("Use field access instead!")]] float& dyn_m_LeftIndentation();
    // Get instance field reference: private System.Single m_SiblingBottom
    [[deprecated("Use field access instead!")]] float& dyn_m_SiblingBottom();
    // Get instance field reference: private UnityEngine.UIElements.ICollectionDragAndDropController <dragAndDropController>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::ICollectionDragAndDropController*& dyn_$dragAndDropController$k__BackingField();
    // protected UnityEngine.UIElements.BaseVerticalCollectionView get_targetView()
    // Offset: 0x563CB34
    ::UnityEngine::UIElements::BaseVerticalCollectionView* get_targetView();
    // protected UnityEngine.UIElements.ScrollView get_targetScrollView()
    // Offset: 0x563CBB0
    ::UnityEngine::UIElements::ScrollView* get_targetScrollView();
    // public UnityEngine.UIElements.ICollectionDragAndDropController get_dragAndDropController()
    // Offset: 0x563CBCC
    ::UnityEngine::UIElements::ICollectionDragAndDropController* get_dragAndDropController();
    // public System.Void set_dragAndDropController(UnityEngine.UIElements.ICollectionDragAndDropController value)
    // Offset: 0x563CBD4
    void set_dragAndDropController(::UnityEngine::UIElements::ICollectionDragAndDropController* value);
    // public System.Void .ctor(UnityEngine.UIElements.BaseVerticalCollectionView listView)
    // Offset: 0x563CBDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ListViewDragger* New_ctor(::UnityEngine::UIElements::BaseVerticalCollectionView* listView) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ListViewDragger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ListViewDragger*, creationType>(listView)));
    }
    // private UnityEngine.UIElements.DragVisualMode GetVisualMode(UnityEngine.Vector3 pointerPosition, ref UnityEngine.UIElements.ListViewDragger/DragPosition dragPosition)
    // Offset: 0x563D6EC
    ::UnityEngine::UIElements::DragVisualMode GetVisualMode(::UnityEngine::Vector3 pointerPosition, ByRef<::UnityEngine::UIElements::ListViewDragger::DragPosition> dragPosition);
    // System.Void HandleDragAndScroll(UnityEngine.Vector2 pointerPosition)
    // Offset: 0x563D87C
    void HandleDragAndScroll(::UnityEngine::Vector2 pointerPosition);
    // private System.Void HandleAutoExpansion(UnityEngine.Vector2 pointerPosition)
    // Offset: 0x563DA74
    void HandleAutoExpansion(::UnityEngine::Vector2 pointerPosition);
    // private System.Void ApplyDragAndDropUI(UnityEngine.UIElements.ListViewDragger/DragPosition dragPosition)
    // Offset: 0x563DB60
    void ApplyDragAndDropUI(::UnityEngine::UIElements::ListViewDragger::DragPosition dragPosition);
    // protected System.Boolean TryGetDragPosition(UnityEngine.Vector2 pointerPosition, ref UnityEngine.UIElements.ListViewDragger/DragPosition dragPosition)
    // Offset: 0x563F304
    bool TryGetDragPosition(::UnityEngine::Vector2 pointerPosition, ByRef<::UnityEngine::UIElements::ListViewDragger::DragPosition> dragPosition);
    // private System.Void HandleTreePosition(UnityEngine.Vector2 pointerPosition, ref UnityEngine.UIElements.ListViewDragger/DragPosition dragPosition)
    // Offset: 0x563F64C
    void HandleTreePosition(::UnityEngine::Vector2 pointerPosition, ByRef<::UnityEngine::UIElements::ListViewDragger::DragPosition> dragPosition);
    // private System.Void HandleSiblingInsertionAtAvailableDepthsAndChangeTargetIfNeeded(ref UnityEngine.UIElements.ListViewDragger/DragPosition dragPosition, UnityEngine.Vector2 pointerPosition)
    // Offset: 0x563F754
    void HandleSiblingInsertionAtAvailableDepthsAndChangeTargetIfNeeded(ByRef<::UnityEngine::UIElements::ListViewDragger::DragPosition> dragPosition, ::UnityEngine::Vector2 pointerPosition);
    // private System.Void GetPreviousAndNextItemsIgnoringDraggedItems(System.Int32 insertAtIndex, out System.Int32 previousItemId, out System.Int32 nextItemId)
    // Offset: 0x563FC6C
    void GetPreviousAndNextItemsIgnoringDraggedItems(int insertAtIndex, ByRef<int> previousItemId, ByRef<int> nextItemId);
    // protected UnityEngine.UIElements.DragAndDropArgs MakeDragAndDropArgs(UnityEngine.UIElements.ListViewDragger/DragPosition dragPosition)
    // Offset: 0x563E3F4
    ::UnityEngine::UIElements::DragAndDropArgs MakeDragAndDropArgs(::UnityEngine::UIElements::ListViewDragger::DragPosition dragPosition);
    // private System.Single GetHoverBarTopPosition(UnityEngine.UIElements.ReusableCollectionItem item)
    // Offset: 0x563FEE4
    float GetHoverBarTopPosition(::UnityEngine::UIElements::ReusableCollectionItem* item);
    // private System.Void PlaceHoverBarAtElement(UnityEngine.UIElements.ReusableCollectionItem item)
    // Offset: 0x563F2E8
    void PlaceHoverBarAtElement(::UnityEngine::UIElements::ReusableCollectionItem* item);
    // private System.Void PlaceHoverBarAt(System.Single top, System.Single indentationPadding, System.Single siblingBottom)
    // Offset: 0x563E944
    void PlaceHoverBarAt(float top, float indentationPadding, float siblingBottom);
    // protected UnityEngine.UIElements.ReusableCollectionItem GetRecycledItem(UnityEngine.Vector3 pointerPosition)
    // Offset: 0x563CEC0
    ::UnityEngine::UIElements::ReusableCollectionItem* GetRecycledItem(::UnityEngine::Vector3 pointerPosition);
    // private System.Void <ApplyDragAndDropUI>g__GeometryChangedCallback|27_0(UnityEngine.UIElements.GeometryChangedEvent e)
    // Offset: 0x56405E0
    void $ApplyDragAndDropUI$g__GeometryChangedCallback_27_0(::UnityEngine::UIElements::GeometryChangedEvent* e);
    // protected override System.Boolean CanStartDrag(UnityEngine.Vector3 pointerPosition)
    // Offset: 0x563CBE8
    // Implemented from: UnityEngine.UIElements.DragEventsProcessor
    // Base method: System.Boolean DragEventsProcessor::CanStartDrag(UnityEngine.Vector3 pointerPosition)
    bool CanStartDrag(::UnityEngine::Vector3 pointerPosition);
    // protected internal override UnityEngine.UIElements.StartDragArgs StartDrag(UnityEngine.Vector3 pointerPosition)
    // Offset: 0x563D23C
    // Implemented from: UnityEngine.UIElements.DragEventsProcessor
    // Base method: UnityEngine.UIElements.StartDragArgs DragEventsProcessor::StartDrag(UnityEngine.Vector3 pointerPosition)
    ::UnityEngine::UIElements::StartDragArgs StartDrag(::UnityEngine::Vector3 pointerPosition);
    // protected internal override System.Void UpdateDrag(UnityEngine.Vector3 pointerPosition)
    // Offset: 0x563D51C
    // Implemented from: UnityEngine.UIElements.DragEventsProcessor
    // Base method: System.Void DragEventsProcessor::UpdateDrag(UnityEngine.Vector3 pointerPosition)
    void UpdateDrag(::UnityEngine::Vector3 pointerPosition);
    // protected internal override System.Void OnDrop(UnityEngine.Vector3 pointerPosition)
    // Offset: 0x563E54C
    // Implemented from: UnityEngine.UIElements.DragEventsProcessor
    // Base method: System.Void DragEventsProcessor::OnDrop(UnityEngine.Vector3 pointerPosition)
    void OnDrop(::UnityEngine::Vector3 pointerPosition);
    // protected override System.Void ClearDragAndDropUI(System.Boolean dragCancelled)
    // Offset: 0x563FF70
    // Implemented from: UnityEngine.UIElements.DragEventsProcessor
    // Base method: System.Void DragEventsProcessor::ClearDragAndDropUI(System.Boolean dragCancelled)
    void ClearDragAndDropUI(bool dragCancelled);
  }; // UnityEngine.UIElements.ListViewDragger
  #pragma pack(pop)
  static check_size<sizeof(ListViewDragger), 112 + sizeof(::UnityEngine::UIElements::ICollectionDragAndDropController*)> __UnityEngine_UIElements_ListViewDraggerSizeCheck;
  static_assert(sizeof(ListViewDragger) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::ListViewDragger::DragPosition, "UnityEngine.UIElements", "ListViewDragger/DragPosition");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::get_targetView
// Il2CppName: get_targetView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::BaseVerticalCollectionView* (UnityEngine::UIElements::ListViewDragger::*)()>(&UnityEngine::UIElements::ListViewDragger::get_targetView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "get_targetView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::get_targetScrollView
// Il2CppName: get_targetScrollView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::ScrollView* (UnityEngine::UIElements::ListViewDragger::*)()>(&UnityEngine::UIElements::ListViewDragger::get_targetScrollView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "get_targetScrollView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::get_dragAndDropController
// Il2CppName: get_dragAndDropController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::ICollectionDragAndDropController* (UnityEngine::UIElements::ListViewDragger::*)()>(&UnityEngine::UIElements::ListViewDragger::get_dragAndDropController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "get_dragAndDropController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::set_dragAndDropController
// Il2CppName: set_dragAndDropController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::UIElements::ICollectionDragAndDropController*)>(&UnityEngine::UIElements::ListViewDragger::set_dragAndDropController)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ICollectionDragAndDropController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "set_dragAndDropController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::GetVisualMode
// Il2CppName: GetVisualMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::DragVisualMode (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::Vector3, ByRef<::UnityEngine::UIElements::ListViewDragger::DragPosition>)>(&UnityEngine::UIElements::ListViewDragger::GetVisualMode)> {
  static const MethodInfo* get() {
    static auto* pointerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dragPosition = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ListViewDragger/DragPosition")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "GetVisualMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerPosition, dragPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::HandleDragAndScroll
// Il2CppName: HandleDragAndScroll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::Vector2)>(&UnityEngine::UIElements::ListViewDragger::HandleDragAndScroll)> {
  static const MethodInfo* get() {
    static auto* pointerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "HandleDragAndScroll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::HandleAutoExpansion
// Il2CppName: HandleAutoExpansion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::Vector2)>(&UnityEngine::UIElements::ListViewDragger::HandleAutoExpansion)> {
  static const MethodInfo* get() {
    static auto* pointerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "HandleAutoExpansion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::ApplyDragAndDropUI
// Il2CppName: ApplyDragAndDropUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::UIElements::ListViewDragger::DragPosition)>(&UnityEngine::UIElements::ListViewDragger::ApplyDragAndDropUI)> {
  static const MethodInfo* get() {
    static auto* dragPosition = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ListViewDragger/DragPosition")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "ApplyDragAndDropUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dragPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::TryGetDragPosition
// Il2CppName: TryGetDragPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::Vector2, ByRef<::UnityEngine::UIElements::ListViewDragger::DragPosition>)>(&UnityEngine::UIElements::ListViewDragger::TryGetDragPosition)> {
  static const MethodInfo* get() {
    static auto* pointerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* dragPosition = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ListViewDragger/DragPosition")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "TryGetDragPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerPosition, dragPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::HandleTreePosition
// Il2CppName: HandleTreePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::Vector2, ByRef<::UnityEngine::UIElements::ListViewDragger::DragPosition>)>(&UnityEngine::UIElements::ListViewDragger::HandleTreePosition)> {
  static const MethodInfo* get() {
    static auto* pointerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* dragPosition = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ListViewDragger/DragPosition")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "HandleTreePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerPosition, dragPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::HandleSiblingInsertionAtAvailableDepthsAndChangeTargetIfNeeded
// Il2CppName: HandleSiblingInsertionAtAvailableDepthsAndChangeTargetIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ListViewDragger::*)(ByRef<::UnityEngine::UIElements::ListViewDragger::DragPosition>, ::UnityEngine::Vector2)>(&UnityEngine::UIElements::ListViewDragger::HandleSiblingInsertionAtAvailableDepthsAndChangeTargetIfNeeded)> {
  static const MethodInfo* get() {
    static auto* dragPosition = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ListViewDragger/DragPosition")->this_arg;
    static auto* pointerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "HandleSiblingInsertionAtAvailableDepthsAndChangeTargetIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dragPosition, pointerPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::GetPreviousAndNextItemsIgnoringDraggedItems
// Il2CppName: GetPreviousAndNextItemsIgnoringDraggedItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ListViewDragger::*)(int, ByRef<int>, ByRef<int>)>(&UnityEngine::UIElements::ListViewDragger::GetPreviousAndNextItemsIgnoringDraggedItems)> {
  static const MethodInfo* get() {
    static auto* insertAtIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* previousItemId = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* nextItemId = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "GetPreviousAndNextItemsIgnoringDraggedItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{insertAtIndex, previousItemId, nextItemId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::MakeDragAndDropArgs
// Il2CppName: MakeDragAndDropArgs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::DragAndDropArgs (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::UIElements::ListViewDragger::DragPosition)>(&UnityEngine::UIElements::ListViewDragger::MakeDragAndDropArgs)> {
  static const MethodInfo* get() {
    static auto* dragPosition = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ListViewDragger/DragPosition")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "MakeDragAndDropArgs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dragPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::GetHoverBarTopPosition
// Il2CppName: GetHoverBarTopPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::UIElements::ReusableCollectionItem*)>(&UnityEngine::UIElements::ListViewDragger::GetHoverBarTopPosition)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ReusableCollectionItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "GetHoverBarTopPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::PlaceHoverBarAtElement
// Il2CppName: PlaceHoverBarAtElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::UIElements::ReusableCollectionItem*)>(&UnityEngine::UIElements::ListViewDragger::PlaceHoverBarAtElement)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "ReusableCollectionItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "PlaceHoverBarAtElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::PlaceHoverBarAt
// Il2CppName: PlaceHoverBarAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ListViewDragger::*)(float, float, float)>(&UnityEngine::UIElements::ListViewDragger::PlaceHoverBarAt)> {
  static const MethodInfo* get() {
    static auto* top = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* indentationPadding = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* siblingBottom = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "PlaceHoverBarAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{top, indentationPadding, siblingBottom});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::GetRecycledItem
// Il2CppName: GetRecycledItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::ReusableCollectionItem* (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::Vector3)>(&UnityEngine::UIElements::ListViewDragger::GetRecycledItem)> {
  static const MethodInfo* get() {
    static auto* pointerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "GetRecycledItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::$ApplyDragAndDropUI$g__GeometryChangedCallback_27_0
// Il2CppName: <ApplyDragAndDropUI>g__GeometryChangedCallback|27_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::UIElements::GeometryChangedEvent*)>(&UnityEngine::UIElements::ListViewDragger::$ApplyDragAndDropUI$g__GeometryChangedCallback_27_0)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "GeometryChangedEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "<ApplyDragAndDropUI>g__GeometryChangedCallback|27_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::CanStartDrag
// Il2CppName: CanStartDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::Vector3)>(&UnityEngine::UIElements::ListViewDragger::CanStartDrag)> {
  static const MethodInfo* get() {
    static auto* pointerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "CanStartDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::StartDrag
// Il2CppName: StartDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::StartDragArgs (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::Vector3)>(&UnityEngine::UIElements::ListViewDragger::StartDrag)> {
  static const MethodInfo* get() {
    static auto* pointerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "StartDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::UpdateDrag
// Il2CppName: UpdateDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::Vector3)>(&UnityEngine::UIElements::ListViewDragger::UpdateDrag)> {
  static const MethodInfo* get() {
    static auto* pointerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "UpdateDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::OnDrop
// Il2CppName: OnDrop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ListViewDragger::*)(::UnityEngine::Vector3)>(&UnityEngine::UIElements::ListViewDragger::OnDrop)> {
  static const MethodInfo* get() {
    static auto* pointerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "OnDrop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ListViewDragger::ClearDragAndDropUI
// Il2CppName: ClearDragAndDropUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ListViewDragger::*)(bool)>(&UnityEngine::UIElements::ListViewDragger::ClearDragAndDropUI)> {
  static const MethodInfo* get() {
    static auto* dragCancelled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ListViewDragger*), "ClearDragAndDropUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dragCancelled});
  }
};
