// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.IStyleDataGroup`1
#include "UnityEngine/UIElements/IStyleDataGroup_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.UIElements.Cursor
#include "UnityEngine/UIElements/Cursor.hpp"
// Including type: UnityEngine.UIElements.TextOverflow
#include "UnityEngine/UIElements/TextOverflow.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.UIElements.OverflowClipBox
#include "UnityEngine/UIElements/OverflowClipBox.hpp"
// Including type: UnityEngine.UIElements.TextOverflowPosition
#include "UnityEngine/UIElements/TextOverflowPosition.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: RareData
  struct RareData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::RareData, "UnityEngine.UIElements", "RareData");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x48
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.RareData
  // [TokenAttribute] Offset: FFFFFFFF
  struct RareData/*, public ::System::ValueType, public ::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::RareData>, public ::System::IEquatable_1<::UnityEngine::UIElements::RareData>*/ {
    public:
    public:
    // public UnityEngine.UIElements.Cursor cursor
    // Size: 0x14
    // Offset: 0x0
    ::UnityEngine::UIElements::Cursor cursor;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::Cursor) == 0x14);
    // Padding between fields: cursor and: textOverflow
    char __padding0[0x4] = {};
    // public UnityEngine.UIElements.TextOverflow textOverflow
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::UIElements::TextOverflow textOverflow;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::TextOverflow) == 0x4);
    // public UnityEngine.Color unityBackgroundImageTintColor
    // Size: 0x10
    // Offset: 0x1C
    ::UnityEngine::Color unityBackgroundImageTintColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.UIElements.OverflowClipBox unityOverflowClipBox
    // Size: 0x4
    // Offset: 0x2C
    ::UnityEngine::UIElements::OverflowClipBox unityOverflowClipBox;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::OverflowClipBox) == 0x4);
    // public System.Int32 unitySliceBottom
    // Size: 0x4
    // Offset: 0x30
    int unitySliceBottom;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 unitySliceLeft
    // Size: 0x4
    // Offset: 0x34
    int unitySliceLeft;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 unitySliceRight
    // Size: 0x4
    // Offset: 0x38
    int unitySliceRight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single unitySliceScale
    // Size: 0x4
    // Offset: 0x3C
    float unitySliceScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 unitySliceTop
    // Size: 0x4
    // Offset: 0x40
    int unitySliceTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.UIElements.TextOverflowPosition unityTextOverflowPosition
    // Size: 0x4
    // Offset: 0x44
    ::UnityEngine::UIElements::TextOverflowPosition unityTextOverflowPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::TextOverflowPosition) == 0x4);
    public:
    // Creating value type constructor for type: RareData
    constexpr RareData(::UnityEngine::UIElements::Cursor cursor_ = {}, ::UnityEngine::UIElements::TextOverflow textOverflow_ = {}, ::UnityEngine::Color unityBackgroundImageTintColor_ = {}, ::UnityEngine::UIElements::OverflowClipBox unityOverflowClipBox_ = {}, int unitySliceBottom_ = {}, int unitySliceLeft_ = {}, int unitySliceRight_ = {}, float unitySliceScale_ = {}, int unitySliceTop_ = {}, ::UnityEngine::UIElements::TextOverflowPosition unityTextOverflowPosition_ = {}) noexcept : cursor{cursor_}, textOverflow{textOverflow_}, unityBackgroundImageTintColor{unityBackgroundImageTintColor_}, unityOverflowClipBox{unityOverflowClipBox_}, unitySliceBottom{unitySliceBottom_}, unitySliceLeft{unitySliceLeft_}, unitySliceRight{unitySliceRight_}, unitySliceScale{unitySliceScale_}, unitySliceTop{unitySliceTop_}, unityTextOverflowPosition{unityTextOverflowPosition_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::RareData>
    operator ::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::RareData>() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IStyleDataGroup_1<::UnityEngine::UIElements::RareData>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::RareData>
    operator ::System::IEquatable_1<::UnityEngine::UIElements::RareData>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::RareData>*>(this);
    }
    // Get instance field reference: public UnityEngine.UIElements.Cursor cursor
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::Cursor& dyn_cursor();
    // Get instance field reference: public UnityEngine.UIElements.TextOverflow textOverflow
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::TextOverflow& dyn_textOverflow();
    // Get instance field reference: public UnityEngine.Color unityBackgroundImageTintColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_unityBackgroundImageTintColor();
    // Get instance field reference: public UnityEngine.UIElements.OverflowClipBox unityOverflowClipBox
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::OverflowClipBox& dyn_unityOverflowClipBox();
    // Get instance field reference: public System.Int32 unitySliceBottom
    [[deprecated("Use field access instead!")]] int& dyn_unitySliceBottom();
    // Get instance field reference: public System.Int32 unitySliceLeft
    [[deprecated("Use field access instead!")]] int& dyn_unitySliceLeft();
    // Get instance field reference: public System.Int32 unitySliceRight
    [[deprecated("Use field access instead!")]] int& dyn_unitySliceRight();
    // Get instance field reference: public System.Single unitySliceScale
    [[deprecated("Use field access instead!")]] float& dyn_unitySliceScale();
    // Get instance field reference: public System.Int32 unitySliceTop
    [[deprecated("Use field access instead!")]] int& dyn_unitySliceTop();
    // Get instance field reference: public UnityEngine.UIElements.TextOverflowPosition unityTextOverflowPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::TextOverflowPosition& dyn_unityTextOverflowPosition();
    // public UnityEngine.UIElements.RareData Copy()
    // Offset: 0x56A5F0C
    ::UnityEngine::UIElements::RareData Copy();
    // public System.Void CopyFrom(ref UnityEngine.UIElements.RareData other)
    // Offset: 0x56A5F28
    void CopyFrom(ByRef<::UnityEngine::UIElements::RareData> other);
    // public System.Boolean Equals(UnityEngine.UIElements.RareData other)
    // Offset: 0x56A606C
    bool Equals(::UnityEngine::UIElements::RareData other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x56A60B0
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x56A6150
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.UIElements.RareData
  #pragma pack(pop)
  static check_size<sizeof(RareData), 68 + sizeof(::UnityEngine::UIElements::TextOverflowPosition)> __UnityEngine_UIElements_RareDataSizeCheck;
  static_assert(sizeof(RareData) == 0x48);
  // static public System.Boolean op_Equality(UnityEngine.UIElements.RareData lhs, UnityEngine.UIElements.RareData rhs)
  // Offset: 0x56A5F48
  bool operator ==(const ::UnityEngine::UIElements::RareData& lhs, const ::UnityEngine::UIElements::RareData& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::RareData::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::RareData (UnityEngine::UIElements::RareData::*)()>(&UnityEngine::UIElements::RareData::Copy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::RareData), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::RareData::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::RareData::*)(ByRef<::UnityEngine::UIElements::RareData>)>(&UnityEngine::UIElements::RareData::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "RareData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::RareData), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::RareData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::RareData::*)(::UnityEngine::UIElements::RareData)>(&UnityEngine::UIElements::RareData::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "RareData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::RareData), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::RareData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::RareData::*)(::Il2CppObject*)>(&UnityEngine::UIElements::RareData::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::RareData), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::RareData::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::RareData::*)()>(&UnityEngine::UIElements::RareData::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::RareData), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::RareData::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
