// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Cursor
  struct Cursor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::Cursor, "UnityEngine.UIElements", "Cursor");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.Cursor
  // [TokenAttribute] Offset: FFFFFFFF
  struct Cursor/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::UIElements::Cursor>*/ {
    public:
    public:
    // private UnityEngine.Texture2D <texture>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Texture2D* texture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private UnityEngine.Vector2 <hotspot>k__BackingField
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Vector2 hotspot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Int32 <defaultCursorId>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int defaultCursorId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Cursor
    constexpr Cursor(::UnityEngine::Texture2D* texture_ = {}, ::UnityEngine::Vector2 hotspot_ = {}, int defaultCursorId_ = {}) noexcept : texture{texture_}, hotspot{hotspot_}, defaultCursorId{defaultCursorId_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::Cursor>
    operator ::System::IEquatable_1<::UnityEngine::UIElements::Cursor>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::Cursor>*>(this);
    }
    // Get instance field reference: private UnityEngine.Texture2D <texture>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_$texture$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector2 <hotspot>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$hotspot$k__BackingField();
    // Get instance field reference: private System.Int32 <defaultCursorId>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$defaultCursorId$k__BackingField();
    // public UnityEngine.Texture2D get_texture()
    // Offset: 0x56366EC
    ::UnityEngine::Texture2D* get_texture();
    // public System.Void set_texture(UnityEngine.Texture2D value)
    // Offset: 0x56366F4
    void set_texture(::UnityEngine::Texture2D* value);
    // public UnityEngine.Vector2 get_hotspot()
    // Offset: 0x56366FC
    ::UnityEngine::Vector2 get_hotspot();
    // public System.Void set_hotspot(UnityEngine.Vector2 value)
    // Offset: 0x5636704
    void set_hotspot(::UnityEngine::Vector2 value);
    // System.Int32 get_defaultCursorId()
    // Offset: 0x563670C
    int get_defaultCursorId();
    // System.Void set_defaultCursorId(System.Int32 value)
    // Offset: 0x5636714
    void set_defaultCursorId(int value);
    // public System.Boolean Equals(UnityEngine.UIElements.Cursor other)
    // Offset: 0x56367AC
    bool Equals(::UnityEngine::UIElements::Cursor other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x563671C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x563685C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x5636960
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.UIElements.Cursor
  #pragma pack(pop)
  static check_size<sizeof(Cursor), 16 + sizeof(int)> __UnityEngine_UIElements_CursorSizeCheck;
  static_assert(sizeof(Cursor) == 0x14);
  // static public System.Boolean op_Equality(UnityEngine.UIElements.Cursor style1, UnityEngine.UIElements.Cursor style2)
  // Offset: 0x5636930
  bool operator ==(const ::UnityEngine::UIElements::Cursor& style1, const ::UnityEngine::UIElements::Cursor& style2);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::Cursor::get_texture
// Il2CppName: get_texture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (UnityEngine::UIElements::Cursor::*)()>(&UnityEngine::UIElements::Cursor::get_texture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Cursor), "get_texture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Cursor::set_texture
// Il2CppName: set_texture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Cursor::*)(::UnityEngine::Texture2D*)>(&UnityEngine::UIElements::Cursor::set_texture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Cursor), "set_texture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Cursor::get_hotspot
// Il2CppName: get_hotspot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::UIElements::Cursor::*)()>(&UnityEngine::UIElements::Cursor::get_hotspot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Cursor), "get_hotspot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Cursor::set_hotspot
// Il2CppName: set_hotspot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Cursor::*)(::UnityEngine::Vector2)>(&UnityEngine::UIElements::Cursor::set_hotspot)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Cursor), "set_hotspot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Cursor::get_defaultCursorId
// Il2CppName: get_defaultCursorId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::Cursor::*)()>(&UnityEngine::UIElements::Cursor::get_defaultCursorId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Cursor), "get_defaultCursorId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Cursor::set_defaultCursorId
// Il2CppName: set_defaultCursorId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Cursor::*)(int)>(&UnityEngine::UIElements::Cursor::set_defaultCursorId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Cursor), "set_defaultCursorId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Cursor::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::Cursor::*)(::UnityEngine::UIElements::Cursor)>(&UnityEngine::UIElements::Cursor::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "Cursor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Cursor), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Cursor::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::Cursor::*)(::Il2CppObject*)>(&UnityEngine::UIElements::Cursor::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Cursor), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Cursor::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::Cursor::*)()>(&UnityEngine::UIElements::Cursor::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Cursor), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Cursor::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::UIElements::Cursor::*)()>(&UnityEngine::UIElements::Cursor::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Cursor), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Cursor::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
