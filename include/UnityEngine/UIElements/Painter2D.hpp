// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.UIElements.SafeHandleAccess
#include "UnityEngine/UIElements/SafeHandleAccess.hpp"
// Including type: Unity.Profiling.ProfilerMarker
#include "Unity/Profiling/ProfilerMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: MeshGenerationContext
  class MeshGenerationContext;
}
// Forward declaring namespace: UnityEngine::UIElements::UIR
namespace UnityEngine::UIElements::UIR {
  // Forward declaring type: DetachedAllocator
  class DetachedAllocator;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Painter2D
  class Painter2D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::Painter2D);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::Painter2D*, "UnityEngine.UIElements", "Painter2D");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.Painter2D
  // [TokenAttribute] Offset: FFFFFFFF
  class Painter2D : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private UnityEngine.UIElements.MeshGenerationContext m_Ctx
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::MeshGenerationContext* m_Ctx;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::MeshGenerationContext*) == 0x8);
    // UnityEngine.UIElements.UIR.DetachedAllocator m_DetachedAllocator
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::UIR::DetachedAllocator* m_DetachedAllocator;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UIR::DetachedAllocator*) == 0x8);
    // UnityEngine.UIElements.SafeHandleAccess m_Handle
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UIElements::SafeHandleAccess m_Handle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::SafeHandleAccess) == 0x8);
    // private System.Boolean m_Disposed
    // Size: 0x1
    // Offset: 0x28
    bool m_Disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private System.Boolean <isPainterActive>k__BackingField
    static bool _get_$isPainterActive$k__BackingField();
    // Set static field: static private System.Boolean <isPainterActive>k__BackingField
    static void _set_$isPainterActive$k__BackingField(bool value);
    // Get static field: static private System.Single s_MaxArcRadius
    static float _get_s_MaxArcRadius();
    // Set static field: static private System.Single s_MaxArcRadius
    static void _set_s_MaxArcRadius(float value);
    // Get static field: static private readonly Unity.Profiling.ProfilerMarker s_StrokeMarker
    static ::Unity::Profiling::ProfilerMarker _get_s_StrokeMarker();
    // Set static field: static private readonly Unity.Profiling.ProfilerMarker s_StrokeMarker
    static void _set_s_StrokeMarker(::Unity::Profiling::ProfilerMarker value);
    // Get static field: static private readonly Unity.Profiling.ProfilerMarker s_FillMarker
    static ::Unity::Profiling::ProfilerMarker _get_s_FillMarker();
    // Set static field: static private readonly Unity.Profiling.ProfilerMarker s_FillMarker
    static void _set_s_FillMarker(::Unity::Profiling::ProfilerMarker value);
    // Get instance field reference: private UnityEngine.UIElements.MeshGenerationContext m_Ctx
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::MeshGenerationContext*& dyn_m_Ctx();
    // Get instance field reference: UnityEngine.UIElements.UIR.DetachedAllocator m_DetachedAllocator
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UIR::DetachedAllocator*& dyn_m_DetachedAllocator();
    // Get instance field reference: UnityEngine.UIElements.SafeHandleAccess m_Handle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::SafeHandleAccess& dyn_m_Handle();
    // Get instance field reference: private System.Boolean m_Disposed
    [[deprecated("Use field access instead!")]] bool& dyn_m_Disposed();
    // System.Void .ctor(UnityEngine.UIElements.MeshGenerationContext ctx)
    // Offset: 0x566FA44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Painter2D* New_ctor(::UnityEngine::UIElements::MeshGenerationContext* ctx) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::Painter2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Painter2D*, creationType>(ctx)));
    }
    // System.Void Reset()
    // Offset: 0x566FCD8
    void Reset();
    // public System.Void Dispose()
    // Offset: 0x566FD1C
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x566FD80
    void Dispose(bool disposing);
    // static System.Void set_isPainterActive(System.Boolean value)
    // Offset: 0x566FE08
    static void set_isPainterActive(bool value);
    // static private System.Single get_maxArcRadius()
    // Offset: 0x566FBF0
    static float get_maxArcRadius();
    // static private System.Void .cctor()
    // Offset: 0x566FE68
    static void _cctor();
  }; // UnityEngine.UIElements.Painter2D
  #pragma pack(pop)
  static check_size<sizeof(Painter2D), 40 + sizeof(bool)> __UnityEngine_UIElements_Painter2DSizeCheck;
  static_assert(sizeof(Painter2D) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::Painter2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::Painter2D::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Painter2D::*)()>(&UnityEngine::UIElements::Painter2D::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Painter2D*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Painter2D::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Painter2D::*)()>(&UnityEngine::UIElements::Painter2D::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Painter2D*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Painter2D::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Painter2D::*)(bool)>(&UnityEngine::UIElements::Painter2D::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Painter2D*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Painter2D::set_isPainterActive
// Il2CppName: set_isPainterActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&UnityEngine::UIElements::Painter2D::set_isPainterActive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Painter2D*), "set_isPainterActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Painter2D::get_maxArcRadius
// Il2CppName: get_maxArcRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&UnityEngine::UIElements::Painter2D::get_maxArcRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Painter2D*), "get_maxArcRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Painter2D::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::Painter2D::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Painter2D*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
