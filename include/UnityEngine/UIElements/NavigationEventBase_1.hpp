// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.EventBase`1
#include "UnityEngine/UIElements/EventBase_1.hpp"
// Including type: UnityEngine.UIElements.INavigationEvent
#include "UnityEngine/UIElements/INavigationEvent.hpp"
// Including type: UnityEngine.EventModifiers
#include "UnityEngine/EventModifiers.hpp"
// Including type: UnityEngine.UIElements.NavigationDeviceType
#include "UnityEngine/UIElements/NavigationDeviceType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: NavigationEventBase`1<T>
  template<typename T>
  class NavigationEventBase_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::NavigationEventBase_1, "UnityEngine.UIElements", "NavigationEventBase`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.NavigationEventBase`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [EventCategoryAttribute] Offset: FFFFFFFF
  template<typename T>
  class NavigationEventBase_1 : public ::UnityEngine::UIElements::EventBase_1<T>/*, public ::UnityEngine::UIElements::INavigationEvent*/ {
    public:
    public:
    // private UnityEngine.EventModifiers <modifiers>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::EventModifiers modifiers;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventModifiers) == 0x4);
    // private UnityEngine.UIElements.NavigationDeviceType <deviceType>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::UIElements::NavigationDeviceType deviceType;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::NavigationDeviceType) == 0x4);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::INavigationEvent
    operator ::UnityEngine::UIElements::INavigationEvent() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::INavigationEvent*>(this);
    }
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.EventModifiers <modifiers>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventModifiers& dyn_$modifiers$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::NavigationEventBase_1::dyn_$modifiers$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<modifiers>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::EventModifiers*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.NavigationDeviceType <deviceType>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::NavigationDeviceType& dyn_$deviceType$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::NavigationEventBase_1::dyn_$deviceType$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<deviceType>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::NavigationDeviceType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public UnityEngine.EventModifiers get_modifiers()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::EventModifiers get_modifiers() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::NavigationEventBase_1::get_modifiers");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::NavigationEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::EventModifiers, false>(this, ___internal__method);
    }
    // protected System.Void set_modifiers(UnityEngine.EventModifiers value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_modifiers(::UnityEngine::EventModifiers value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::NavigationEventBase_1::set_modifiers");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_modifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Boolean get_shiftKey()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_shiftKey() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::NavigationEventBase_1::get_shiftKey");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::NavigationEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Boolean get_altKey()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_altKey() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::NavigationEventBase_1::get_altKey");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::NavigationEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // UnityEngine.UIElements.NavigationDeviceType get_deviceType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::NavigationDeviceType get_deviceType() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::NavigationEventBase_1::get_deviceType");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deviceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::NavigationDeviceType, false>(this, ___internal__method);
    }
    // private System.Void set_deviceType(UnityEngine.UIElements.NavigationDeviceType value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_deviceType(::UnityEngine::UIElements::NavigationDeviceType value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::NavigationEventBase_1::set_deviceType");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_deviceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // static public T GetPooled(UnityEngine.EventModifiers modifiers)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T GetPooled(::UnityEngine::EventModifiers modifiers) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::NavigationEventBase_1::GetPooled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NavigationEventBase_1<T>*>::get(), "GetPooled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(modifiers)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, modifiers);
    }
    // static T GetPooled(UnityEngine.UIElements.NavigationDeviceType deviceType, UnityEngine.EventModifiers modifiers)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T GetPooled(::UnityEngine::UIElements::NavigationDeviceType deviceType, ::UnityEngine::EventModifiers modifiers) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::NavigationEventBase_1::GetPooled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NavigationEventBase_1<T>*>::get(), "GetPooled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceType), ::il2cpp_utils::ExtractType(modifiers)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, deviceType, modifiers);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase`1
    // Base method: System.Void EventBase_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavigationEventBase_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::NavigationEventBase_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavigationEventBase_1<T>*, creationType>()));
    }
    // protected override System.Void Init()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase`1
    // Base method: System.Void EventBase_1::Init()
    void Init() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::NavigationEventBase_1::Init");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::EventBase_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void LocalInit()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase
    // Base method: System.Void EventBase::LocalInit()
    void LocalInit() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::NavigationEventBase_1::LocalInit");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // UnityEngine.UIElements.NavigationEventBase`1
  // Could not write size check! Type: UnityEngine.UIElements.NavigationEventBase`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
