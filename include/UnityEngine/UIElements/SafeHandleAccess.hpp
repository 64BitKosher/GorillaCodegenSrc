// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: SafeHandleAccess
  struct SafeHandleAccess;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::SafeHandleAccess, "UnityEngine.UIElements", "SafeHandleAccess");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.SafeHandleAccess
  // [TokenAttribute] Offset: FFFFFFFF
  struct SafeHandleAccess/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.IntPtr m_Handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr m_Handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: SafeHandleAccess
    constexpr SafeHandleAccess(::System::IntPtr m_Handle_ = {}) noexcept : m_Handle{m_Handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return m_Handle;
    }
    // Get instance field reference: private System.IntPtr m_Handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_Handle();
    // public System.Void .ctor(System.IntPtr ptr)
    // Offset: 0x566A8DC
    // ABORTED: conflicts with another method.  SafeHandleAccess(::System::IntPtr ptr);
    // public System.Boolean IsNull()
    // Offset: 0x566A8E4
    bool IsNull();
  }; // UnityEngine.UIElements.SafeHandleAccess
  #pragma pack(pop)
  static check_size<sizeof(SafeHandleAccess), 0 + sizeof(::System::IntPtr)> __UnityEngine_UIElements_SafeHandleAccessSizeCheck;
  static_assert(sizeof(SafeHandleAccess) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::SafeHandleAccess::SafeHandleAccess
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::SafeHandleAccess::IsNull
// Il2CppName: IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::SafeHandleAccess::*)()>(&UnityEngine::UIElements::SafeHandleAccess::IsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::SafeHandleAccess), "IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
