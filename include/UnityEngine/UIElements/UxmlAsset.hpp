// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.IUxmlAttributes
#include "UnityEngine/UIElements/IUxmlAttributes.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: UxmlAsset
  class UxmlAsset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UxmlAsset);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UxmlAsset*, "UnityEngine.UIElements", "UxmlAsset");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UxmlAsset
  // [TokenAttribute] Offset: FFFFFFFF
  class UxmlAsset : public ::Il2CppObject/*, public ::UnityEngine::UIElements::IUxmlAttributes*/ {
    public:
    public:
    // private System.String m_FullTypeName
    // Size: 0x8
    // Offset: 0x10
    ::StringW m_FullTypeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 m_Id
    // Size: 0x4
    // Offset: 0x18
    int m_Id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_OrderInDocument
    // Size: 0x4
    // Offset: 0x1C
    int m_OrderInDocument;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_ParentId
    // Size: 0x4
    // Offset: 0x20
    int m_ParentId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_ParentId and: m_Properties
    char __padding3[0x4] = {};
    // protected System.Collections.Generic.List`1<System.String> m_Properties
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::StringW>* m_Properties;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IUxmlAttributes
    operator ::UnityEngine::UIElements::IUxmlAttributes() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IUxmlAttributes*>(this);
    }
    // Get instance field reference: private System.String m_FullTypeName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_FullTypeName();
    // Get instance field reference: private System.Int32 m_Id
    [[deprecated("Use field access instead!")]] int& dyn_m_Id();
    // Get instance field reference: private System.Int32 m_OrderInDocument
    [[deprecated("Use field access instead!")]] int& dyn_m_OrderInDocument();
    // Get instance field reference: private System.Int32 m_ParentId
    [[deprecated("Use field access instead!")]] int& dyn_m_ParentId();
    // Get instance field reference: protected System.Collections.Generic.List`1<System.String> m_Properties
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_m_Properties();
    // public System.String get_fullTypeName()
    // Offset: 0x56C70B0
    ::StringW get_fullTypeName();
    // public System.Int32 get_id()
    // Offset: 0x56C70B8
    int get_id();
    // public System.Int32 get_orderInDocument()
    // Offset: 0x56C70C0
    int get_orderInDocument();
    // public System.Int32 get_parentId()
    // Offset: 0x56C70C8
    int get_parentId();
    // public System.Boolean TryGetAttributeValue(System.String propertyName, out System.String value)
    // Offset: 0x56C70D0
    bool TryGetAttributeValue(::StringW propertyName, ByRef<::StringW> value);
    // public System.Void SetAttribute(System.String name, System.String value)
    // Offset: 0x56C71B4
    void SetAttribute(::StringW name, ::StringW value);
    // private System.Void SetOrAddProperty(System.String propertyName, System.String propertyValue)
    // Offset: 0x56C71B8
    void SetOrAddProperty(::StringW propertyName, ::StringW propertyValue);
  }; // UnityEngine.UIElements.UxmlAsset
  #pragma pack(pop)
  static check_size<sizeof(UxmlAsset), 40 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __UnityEngine_UIElements_UxmlAssetSizeCheck;
  static_assert(sizeof(UxmlAsset) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UxmlAsset::get_fullTypeName
// Il2CppName: get_fullTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::UIElements::UxmlAsset::*)()>(&UnityEngine::UIElements::UxmlAsset::get_fullTypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UxmlAsset*), "get_fullTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UxmlAsset::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UxmlAsset::*)()>(&UnityEngine::UIElements::UxmlAsset::get_id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UxmlAsset*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UxmlAsset::get_orderInDocument
// Il2CppName: get_orderInDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UxmlAsset::*)()>(&UnityEngine::UIElements::UxmlAsset::get_orderInDocument)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UxmlAsset*), "get_orderInDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UxmlAsset::get_parentId
// Il2CppName: get_parentId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::UxmlAsset::*)()>(&UnityEngine::UIElements::UxmlAsset::get_parentId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UxmlAsset*), "get_parentId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UxmlAsset::TryGetAttributeValue
// Il2CppName: TryGetAttributeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::UxmlAsset::*)(::StringW, ByRef<::StringW>)>(&UnityEngine::UIElements::UxmlAsset::TryGetAttributeValue)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UxmlAsset*), "TryGetAttributeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UxmlAsset::SetAttribute
// Il2CppName: SetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UxmlAsset::*)(::StringW, ::StringW)>(&UnityEngine::UIElements::UxmlAsset::SetAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UxmlAsset*), "SetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::UxmlAsset::SetOrAddProperty
// Il2CppName: SetOrAddProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::UxmlAsset::*)(::StringW, ::StringW)>(&UnityEngine::UIElements::UxmlAsset::SetOrAddProperty)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* propertyValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::UxmlAsset*), "SetOrAddProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName, propertyValue});
  }
};
