// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.UxmlTraits
#include "UnityEngine/UIElements/UxmlTraits.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: UxmlStringAttributeDescription
  class UxmlStringAttributeDescription;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: UxmlRootElementTraits
  class UxmlRootElementTraits;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::UxmlRootElementTraits);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::UxmlRootElementTraits*, "UnityEngine.UIElements", "UxmlRootElementTraits");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.UxmlRootElementTraits
  // [TokenAttribute] Offset: FFFFFFFF
  class UxmlRootElementTraits : public ::UnityEngine::UIElements::UxmlTraits {
    public:
    // Writing base type padding for base size: 0x11 to desired offset: 0x18
    char ___base_padding[0x7] = {};
    public:
    // protected UnityEngine.UIElements.UxmlStringAttributeDescription m_Name
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_Name;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    // private UnityEngine.UIElements.UxmlStringAttributeDescription m_Class
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UIElements::UxmlStringAttributeDescription* m_Class;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*) == 0x8);
    public:
    // Deleting conversion operator: operator bool
    constexpr operator bool() const noexcept = delete;
    // Get instance field reference: protected UnityEngine.UIElements.UxmlStringAttributeDescription m_Name
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_Name();
    // Get instance field reference: private UnityEngine.UIElements.UxmlStringAttributeDescription m_Class
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::UxmlStringAttributeDescription*& dyn_m_Class();
    // public System.Void .ctor()
    // Offset: 0x56C4678
    // Implemented from: UnityEngine.UIElements.UxmlTraits
    // Base method: System.Void UxmlTraits::.ctor()
    // Base method: System.Void BaseUxmlTraits::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UxmlRootElementTraits* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::UxmlRootElementTraits::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UxmlRootElementTraits*, creationType>()));
    }
  }; // UnityEngine.UIElements.UxmlRootElementTraits
  #pragma pack(pop)
  static check_size<sizeof(UxmlRootElementTraits), 32 + sizeof(::UnityEngine::UIElements::UxmlStringAttributeDescription*)> __UnityEngine_UIElements_UxmlRootElementTraitsSizeCheck;
  static_assert(sizeof(UxmlRootElementTraits) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::UxmlRootElementTraits::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
