// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BaseRuntimePanel
#include "UnityEngine/UIElements/BaseRuntimePanel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: PanelSettings
  class PanelSettings;
  // Forward declaring type: EventDispatcher
  class EventDispatcher;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ScriptableObject
  class ScriptableObject;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: RuntimePanel
  class RuntimePanel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::RuntimePanel);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::RuntimePanel*, "UnityEngine.UIElements", "RuntimePanel");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x1F0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.RuntimePanel
  // [TokenAttribute] Offset: FFFFFFFF
  class RuntimePanel : public ::UnityEngine::UIElements::BaseRuntimePanel {
    public:
    public:
    // private readonly UnityEngine.UIElements.PanelSettings m_PanelSettings
    // Size: 0x8
    // Offset: 0x1E8
    ::UnityEngine::UIElements::PanelSettings* m_PanelSettings;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::PanelSettings*) == 0x8);
    public:
    // Creating conversion operator: operator ::UnityEngine::UIElements::PanelSettings*
    constexpr operator ::UnityEngine::UIElements::PanelSettings*() const noexcept {
      return m_PanelSettings;
    }
    // Get static field: static readonly UnityEngine.UIElements.EventDispatcher s_EventDispatcher
    static ::UnityEngine::UIElements::EventDispatcher* _get_s_EventDispatcher();
    // Set static field: static readonly UnityEngine.UIElements.EventDispatcher s_EventDispatcher
    static void _set_s_EventDispatcher(::UnityEngine::UIElements::EventDispatcher* value);
    // Get instance field reference: private readonly UnityEngine.UIElements.PanelSettings m_PanelSettings
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::PanelSettings*& dyn_m_PanelSettings();
    // public UnityEngine.UIElements.PanelSettings get_panelSettings()
    // Offset: 0x565DB64
    ::UnityEngine::UIElements::PanelSettings* get_panelSettings();
    // static public UnityEngine.UIElements.RuntimePanel Create(UnityEngine.ScriptableObject ownerObject)
    // Offset: 0x565DB6C
    static ::UnityEngine::UIElements::RuntimePanel* Create(::UnityEngine::ScriptableObject* ownerObject);
    // private System.Void .ctor(UnityEngine.ScriptableObject ownerObject)
    // Offset: 0x565DBC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RuntimePanel* New_ctor(::UnityEngine::ScriptableObject* ownerObject) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::RuntimePanel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RuntimePanel*, creationType>(ownerObject)));
    }
    // public override System.Void Update()
    // Offset: 0x565DF50
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::Update()
    void Update();
    // static private System.Void .cctor()
    // Offset: 0x565E0D8
    // Implemented from: UnityEngine.UIElements.BaseRuntimePanel
    // Base method: System.Void BaseRuntimePanel::.cctor()
    // Base method: System.Void Panel::.cctor()
    static void _cctor();
  }; // UnityEngine.UIElements.RuntimePanel
  #pragma pack(pop)
  static check_size<sizeof(RuntimePanel), 488 + sizeof(::UnityEngine::UIElements::PanelSettings*)> __UnityEngine_UIElements_RuntimePanelSizeCheck;
  static_assert(sizeof(RuntimePanel) == 0x1F0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::RuntimePanel::get_panelSettings
// Il2CppName: get_panelSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::PanelSettings* (UnityEngine::UIElements::RuntimePanel::*)()>(&UnityEngine::UIElements::RuntimePanel::get_panelSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::RuntimePanel*), "get_panelSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::RuntimePanel::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::RuntimePanel* (*)(::UnityEngine::ScriptableObject*)>(&UnityEngine::UIElements::RuntimePanel::Create)> {
  static const MethodInfo* get() {
    static auto* ownerObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "ScriptableObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::RuntimePanel*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ownerObject});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::RuntimePanel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::RuntimePanel::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::RuntimePanel::*)()>(&UnityEngine::UIElements::RuntimePanel::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::RuntimePanel*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::RuntimePanel::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::RuntimePanel::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::RuntimePanel*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
