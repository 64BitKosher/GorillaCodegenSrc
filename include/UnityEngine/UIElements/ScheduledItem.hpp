// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: TimerState
  struct TimerState;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: ScheduledItem
  class ScheduledItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::ScheduledItem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::ScheduledItem*, "UnityEngine.UIElements", "ScheduledItem");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.ScheduledItem
  // [TokenAttribute] Offset: FFFFFFFF
  class ScheduledItem : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::UIElements::ScheduledItem::$$c
    class $$c;
    public:
    // public System.Func`1<System.Boolean> timerUpdateStopCondition
    // Size: 0x8
    // Offset: 0x10
    ::System::Func_1<bool>* timerUpdateStopCondition;
    // Field size check
    static_assert(sizeof(::System::Func_1<bool>*) == 0x8);
    // private System.Int64 <startMs>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    int64_t startMs;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 <delayMs>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    int64_t delayMs;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 <intervalMs>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    int64_t intervalMs;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 <endTimeMs>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    int64_t endTimeMs;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Get static field: static public readonly System.Func`1<System.Boolean> OnceCondition
    static ::System::Func_1<bool>* _get_OnceCondition();
    // Set static field: static public readonly System.Func`1<System.Boolean> OnceCondition
    static void _set_OnceCondition(::System::Func_1<bool>* value);
    // Get static field: static public readonly System.Func`1<System.Boolean> ForeverCondition
    static ::System::Func_1<bool>* _get_ForeverCondition();
    // Set static field: static public readonly System.Func`1<System.Boolean> ForeverCondition
    static void _set_ForeverCondition(::System::Func_1<bool>* value);
    // Get instance field reference: public System.Func`1<System.Boolean> timerUpdateStopCondition
    [[deprecated("Use field access instead!")]] ::System::Func_1<bool>*& dyn_timerUpdateStopCondition();
    // Get instance field reference: private System.Int64 <startMs>k__BackingField
    [[deprecated("Use field access instead!")]] int64_t& dyn_$startMs$k__BackingField();
    // Get instance field reference: private System.Int64 <delayMs>k__BackingField
    [[deprecated("Use field access instead!")]] int64_t& dyn_$delayMs$k__BackingField();
    // Get instance field reference: private System.Int64 <intervalMs>k__BackingField
    [[deprecated("Use field access instead!")]] int64_t& dyn_$intervalMs$k__BackingField();
    // Get instance field reference: private System.Int64 <endTimeMs>k__BackingField
    [[deprecated("Use field access instead!")]] int64_t& dyn_$endTimeMs$k__BackingField();
    // public System.Int64 get_startMs()
    // Offset: 0x568B298
    int64_t get_startMs();
    // public System.Void set_startMs(System.Int64 value)
    // Offset: 0x568B2A0
    void set_startMs(int64_t value);
    // public System.Int64 get_delayMs()
    // Offset: 0x568B2A8
    int64_t get_delayMs();
    // public System.Void set_delayMs(System.Int64 value)
    // Offset: 0x568B2B0
    void set_delayMs(int64_t value);
    // public System.Int64 get_intervalMs()
    // Offset: 0x568B2B8
    int64_t get_intervalMs();
    // public System.Void set_intervalMs(System.Int64 value)
    // Offset: 0x568B2C0
    void set_intervalMs(int64_t value);
    // public System.Int64 get_endTimeMs()
    // Offset: 0x568B2C8
    int64_t get_endTimeMs();
    // public System.Void .ctor()
    // Offset: 0x568B2D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScheduledItem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ScheduledItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScheduledItem*, creationType>()));
    }
    // protected System.Void ResetStartTime()
    // Offset: 0x568B348
    void ResetStartTime();
    // public System.Void PerformTimerUpdate(UnityEngine.UIElements.TimerState state)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void PerformTimerUpdate(::UnityEngine::UIElements::TimerState state);
    // System.Void OnItemUnscheduled()
    // Offset: 0x568B3A4
    void OnItemUnscheduled();
    // public System.Boolean ShouldUnschedule()
    // Offset: 0x568B3A8
    bool ShouldUnschedule();
    // static private System.Void .cctor()
    // Offset: 0x568B3C8
    static void _cctor();
  }; // UnityEngine.UIElements.ScheduledItem
  #pragma pack(pop)
  static check_size<sizeof(ScheduledItem), 48 + sizeof(int64_t)> __UnityEngine_UIElements_ScheduledItemSizeCheck;
  static_assert(sizeof(ScheduledItem) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::ScheduledItem::get_startMs
// Il2CppName: get_startMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::UIElements::ScheduledItem::*)()>(&UnityEngine::UIElements::ScheduledItem::get_startMs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ScheduledItem*), "get_startMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ScheduledItem::set_startMs
// Il2CppName: set_startMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ScheduledItem::*)(int64_t)>(&UnityEngine::UIElements::ScheduledItem::set_startMs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ScheduledItem*), "set_startMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ScheduledItem::get_delayMs
// Il2CppName: get_delayMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::UIElements::ScheduledItem::*)()>(&UnityEngine::UIElements::ScheduledItem::get_delayMs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ScheduledItem*), "get_delayMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ScheduledItem::set_delayMs
// Il2CppName: set_delayMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ScheduledItem::*)(int64_t)>(&UnityEngine::UIElements::ScheduledItem::set_delayMs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ScheduledItem*), "set_delayMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ScheduledItem::get_intervalMs
// Il2CppName: get_intervalMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::UIElements::ScheduledItem::*)()>(&UnityEngine::UIElements::ScheduledItem::get_intervalMs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ScheduledItem*), "get_intervalMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ScheduledItem::set_intervalMs
// Il2CppName: set_intervalMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ScheduledItem::*)(int64_t)>(&UnityEngine::UIElements::ScheduledItem::set_intervalMs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ScheduledItem*), "set_intervalMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ScheduledItem::get_endTimeMs
// Il2CppName: get_endTimeMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::UIElements::ScheduledItem::*)()>(&UnityEngine::UIElements::ScheduledItem::get_endTimeMs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ScheduledItem*), "get_endTimeMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ScheduledItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::ScheduledItem::ResetStartTime
// Il2CppName: ResetStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ScheduledItem::*)()>(&UnityEngine::UIElements::ScheduledItem::ResetStartTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ScheduledItem*), "ResetStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ScheduledItem::PerformTimerUpdate
// Il2CppName: PerformTimerUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ScheduledItem::*)(::UnityEngine::UIElements::TimerState)>(&UnityEngine::UIElements::ScheduledItem::PerformTimerUpdate)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "TimerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ScheduledItem*), "PerformTimerUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ScheduledItem::OnItemUnscheduled
// Il2CppName: OnItemUnscheduled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ScheduledItem::*)()>(&UnityEngine::UIElements::ScheduledItem::OnItemUnscheduled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ScheduledItem*), "OnItemUnscheduled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ScheduledItem::ShouldUnschedule
// Il2CppName: ShouldUnschedule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::ScheduledItem::*)()>(&UnityEngine::UIElements::ScheduledItem::ShouldUnschedule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ScheduledItem*), "ShouldUnschedule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ScheduledItem::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::ScheduledItem::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ScheduledItem*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
