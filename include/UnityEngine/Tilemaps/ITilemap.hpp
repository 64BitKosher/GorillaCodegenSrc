// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Vector3Int
#include "UnityEngine/Vector3Int.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Tilemaps
namespace UnityEngine::Tilemaps {
  // Forward declaring type: Tilemap
  class Tilemap;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: UnityEngine.Tilemaps
namespace UnityEngine::Tilemaps {
  // Forward declaring type: ITilemap
  class ITilemap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Tilemaps::ITilemap);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Tilemaps::ITilemap*, "UnityEngine.Tilemaps", "ITilemap");
// Type namespace: UnityEngine.Tilemaps
namespace UnityEngine::Tilemaps {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Tilemaps.ITilemap
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: FFFFFFFF
  class ITilemap : public ::Il2CppObject {
    public:
    public:
    // UnityEngine.Tilemaps.Tilemap m_Tilemap
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Tilemaps::Tilemap* m_Tilemap;
    // Field size check
    static_assert(sizeof(::UnityEngine::Tilemaps::Tilemap*) == 0x8);
    // System.Boolean m_AddToList
    // Size: 0x1
    // Offset: 0x18
    bool m_AddToList;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Int32 m_RefreshCount
    // Size: 0x4
    // Offset: 0x1C
    int m_RefreshCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Unity.Collections.NativeArray`1<UnityEngine.Vector3Int> m_RefreshPos
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3Int> m_RefreshPos;
    public:
    // Get static field: static UnityEngine.Tilemaps.ITilemap s_Instance
    static ::UnityEngine::Tilemaps::ITilemap* _get_s_Instance();
    // Set static field: static UnityEngine.Tilemaps.ITilemap s_Instance
    static void _set_s_Instance(::UnityEngine::Tilemaps::ITilemap* value);
    // Get instance field reference: UnityEngine.Tilemaps.Tilemap m_Tilemap
    [[deprecated("Use field access instead!")]] ::UnityEngine::Tilemaps::Tilemap*& dyn_m_Tilemap();
    // Get instance field reference: System.Boolean m_AddToList
    [[deprecated("Use field access instead!")]] bool& dyn_m_AddToList();
    // Get instance field reference: System.Int32 m_RefreshCount
    [[deprecated("Use field access instead!")]] int& dyn_m_RefreshCount();
    // Get instance field reference: Unity.Collections.NativeArray`1<UnityEngine.Vector3Int> m_RefreshPos
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3Int>& dyn_m_RefreshPos();
    // System.Void .ctor()
    // Offset: 0x5577E20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ITilemap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Tilemaps::ITilemap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ITilemap*, creationType>()));
    }
    // public System.Void RefreshTile(UnityEngine.Vector3Int position)
    // Offset: 0x5577E28
    void RefreshTile(::UnityEngine::Vector3Int position);
    // static private UnityEngine.Tilemaps.ITilemap CreateInstance()
    // Offset: 0x5577FD0
    static ::UnityEngine::Tilemaps::ITilemap* CreateInstance();
    // static private System.Void FindAllRefreshPositions(UnityEngine.Tilemaps.ITilemap tilemap, System.Int32 count, System.IntPtr oldTilesIntPtr, System.IntPtr newTilesIntPtr, System.IntPtr positionsIntPtr)
    // Offset: 0x5578048
    static void FindAllRefreshPositions(::UnityEngine::Tilemaps::ITilemap* tilemap, int count, ::System::IntPtr oldTilesIntPtr, ::System::IntPtr newTilesIntPtr, ::System::IntPtr positionsIntPtr);
    // static private System.Void GetAllTileData(UnityEngine.Tilemaps.ITilemap tilemap, System.Int32 count, System.IntPtr tilesIntPtr, System.IntPtr positionsIntPtr, System.IntPtr outTileDataIntPtr)
    // Offset: 0x55783A4
    static void GetAllTileData(::UnityEngine::Tilemaps::ITilemap* tilemap, int count, ::System::IntPtr tilesIntPtr, ::System::IntPtr positionsIntPtr, ::System::IntPtr outTileDataIntPtr);
  }; // UnityEngine.Tilemaps.ITilemap
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Tilemaps::ITilemap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Tilemaps::ITilemap::RefreshTile
// Il2CppName: RefreshTile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Tilemaps::ITilemap::*)(::UnityEngine::Vector3Int)>(&UnityEngine::Tilemaps::ITilemap::RefreshTile)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3Int")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Tilemaps::ITilemap*), "RefreshTile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: UnityEngine::Tilemaps::ITilemap::CreateInstance
// Il2CppName: CreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Tilemaps::ITilemap* (*)()>(&UnityEngine::Tilemaps::ITilemap::CreateInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Tilemaps::ITilemap*), "CreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Tilemaps::ITilemap::FindAllRefreshPositions
// Il2CppName: FindAllRefreshPositions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Tilemaps::ITilemap*, int, ::System::IntPtr, ::System::IntPtr, ::System::IntPtr)>(&UnityEngine::Tilemaps::ITilemap::FindAllRefreshPositions)> {
  static const MethodInfo* get() {
    static auto* tilemap = &::il2cpp_utils::GetClassFromName("UnityEngine.Tilemaps", "ITilemap")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* oldTilesIntPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* newTilesIntPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* positionsIntPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Tilemaps::ITilemap*), "FindAllRefreshPositions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tilemap, count, oldTilesIntPtr, newTilesIntPtr, positionsIntPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Tilemaps::ITilemap::GetAllTileData
// Il2CppName: GetAllTileData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Tilemaps::ITilemap*, int, ::System::IntPtr, ::System::IntPtr, ::System::IntPtr)>(&UnityEngine::Tilemaps::ITilemap::GetAllTileData)> {
  static const MethodInfo* get() {
    static auto* tilemap = &::il2cpp_utils::GetClassFromName("UnityEngine.Tilemaps", "ITilemap")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tilesIntPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* positionsIntPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* outTileDataIntPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Tilemaps::ITilemap*), "GetAllTileData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tilemap, count, tilesIntPtr, positionsIntPtr, outTileDataIntPtr});
  }
};
