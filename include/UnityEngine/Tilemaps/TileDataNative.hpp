// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Tilemaps.TileFlags
#include "UnityEngine/Tilemaps/TileFlags.hpp"
// Including type: UnityEngine.Tilemaps.Tile/ColliderType
#include "UnityEngine/Tilemaps/Tile.hpp"
// Completed includes
// Type namespace: UnityEngine.Tilemaps
namespace UnityEngine::Tilemaps {
  // Forward declaring type: TileDataNative
  struct TileDataNative;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Tilemaps::TileDataNative, "UnityEngine.Tilemaps", "TileDataNative");
// Type namespace: UnityEngine.Tilemaps
namespace UnityEngine::Tilemaps {
  // Size: 0x60
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Tilemaps.TileDataNative
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeTypeAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: FFFFFFFF
  struct TileDataNative/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 m_Sprite
    // Size: 0x4
    // Offset: 0x0
    int m_Sprite;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Color m_Color
    // Size: 0x10
    // Offset: 0x4
    ::UnityEngine::Color m_Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Matrix4x4 m_Transform
    // Size: 0x40
    // Offset: 0x14
    ::UnityEngine::Matrix4x4 m_Transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private System.Int32 m_GameObject
    // Size: 0x4
    // Offset: 0x54
    int m_GameObject;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Tilemaps.TileFlags m_Flags
    // Size: 0x4
    // Offset: 0x58
    ::UnityEngine::Tilemaps::TileFlags m_Flags;
    // Field size check
    static_assert(sizeof(::UnityEngine::Tilemaps::TileFlags) == 0x4);
    // private UnityEngine.Tilemaps.Tile/ColliderType m_ColliderType
    // Size: 0x4
    // Offset: 0x5C
    ::UnityEngine::Tilemaps::Tile::ColliderType m_ColliderType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Tilemaps::Tile::ColliderType) == 0x4);
    public:
    // Creating value type constructor for type: TileDataNative
    constexpr TileDataNative(int m_Sprite_ = {}, ::UnityEngine::Color m_Color_ = {}, ::UnityEngine::Matrix4x4 m_Transform_ = {}, int m_GameObject_ = {}, ::UnityEngine::Tilemaps::TileFlags m_Flags_ = {}, ::UnityEngine::Tilemaps::Tile::ColliderType m_ColliderType_ = {}) noexcept : m_Sprite{m_Sprite_}, m_Color{m_Color_}, m_Transform{m_Transform_}, m_GameObject{m_GameObject_}, m_Flags{m_Flags_}, m_ColliderType{m_ColliderType_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int32 m_Sprite
    [[deprecated("Use field access instead!")]] int& dyn_m_Sprite();
    // Get instance field reference: private UnityEngine.Color m_Color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_Color();
    // Get instance field reference: private UnityEngine.Matrix4x4 m_Transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_m_Transform();
    // Get instance field reference: private System.Int32 m_GameObject
    [[deprecated("Use field access instead!")]] int& dyn_m_GameObject();
    // Get instance field reference: private UnityEngine.Tilemaps.TileFlags m_Flags
    [[deprecated("Use field access instead!")]] ::UnityEngine::Tilemaps::TileFlags& dyn_m_Flags();
    // Get instance field reference: private UnityEngine.Tilemaps.Tile/ColliderType m_ColliderType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Tilemaps::Tile::ColliderType& dyn_m_ColliderType();
  }; // UnityEngine.Tilemaps.TileDataNative
  #pragma pack(pop)
  static check_size<sizeof(TileDataNative), 92 + sizeof(::UnityEngine::Tilemaps::Tile::ColliderType)> __UnityEngine_Tilemaps_TileDataNativeSizeCheck;
  static_assert(sizeof(TileDataNative) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
