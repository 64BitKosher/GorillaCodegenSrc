// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Tilemaps.Tilemap
#include "UnityEngine/Tilemaps/Tilemap.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Tilemaps::Tilemap::SyncTileCallbackSettings, "UnityEngine.Tilemaps", "Tilemap/SyncTileCallbackSettings");
// Type namespace: UnityEngine.Tilemaps
namespace UnityEngine::Tilemaps {
  // Size: 0x3
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Tilemaps.Tilemap/SyncTileCallbackSettings
  // [TokenAttribute] Offset: FFFFFFFF
  struct Tilemap::SyncTileCallbackSettings/*, public ::System::ValueType*/ {
    public:
    public:
    // System.Boolean hasSyncTileCallback
    // Size: 0x1
    // Offset: 0x0
    bool hasSyncTileCallback;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean hasPositionsChangedCallback
    // Size: 0x1
    // Offset: 0x1
    bool hasPositionsChangedCallback;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean isBufferSyncTile
    // Size: 0x1
    // Offset: 0x2
    bool isBufferSyncTile;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: SyncTileCallbackSettings
    constexpr SyncTileCallbackSettings(bool hasSyncTileCallback_ = {}, bool hasPositionsChangedCallback_ = {}, bool isBufferSyncTile_ = {}) noexcept : hasSyncTileCallback{hasSyncTileCallback_}, hasPositionsChangedCallback{hasPositionsChangedCallback_}, isBufferSyncTile{isBufferSyncTile_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.Boolean hasSyncTileCallback
    [[deprecated("Use field access instead!")]] bool& dyn_hasSyncTileCallback();
    // Get instance field reference: System.Boolean hasPositionsChangedCallback
    [[deprecated("Use field access instead!")]] bool& dyn_hasPositionsChangedCallback();
    // Get instance field reference: System.Boolean isBufferSyncTile
    [[deprecated("Use field access instead!")]] bool& dyn_isBufferSyncTile();
  }; // UnityEngine.Tilemaps.Tilemap/SyncTileCallbackSettings
  #pragma pack(pop)
  static check_size<sizeof(Tilemap::SyncTileCallbackSettings), 2 + sizeof(bool)> __UnityEngine_Tilemaps_Tilemap_SyncTileCallbackSettingsSizeCheck;
  static_assert(sizeof(Tilemap::SyncTileCallbackSettings) == 0x3);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
