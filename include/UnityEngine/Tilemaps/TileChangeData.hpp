// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3Int
#include "UnityEngine/Vector3Int.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
}
// Completed forward declares
// Type namespace: UnityEngine.Tilemaps
namespace UnityEngine::Tilemaps {
  // Forward declaring type: TileChangeData
  struct TileChangeData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Tilemaps::TileChangeData, "UnityEngine.Tilemaps", "TileChangeData");
// Type namespace: UnityEngine.Tilemaps
namespace UnityEngine::Tilemaps {
  // Size: 0x68
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Tilemaps.TileChangeData
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeTypeAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: FFFFFFFF
  struct TileChangeData/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.Vector3Int m_Position
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3Int m_Position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3Int) == 0xC);
    // Padding between fields: m_Position and: m_TileAsset
    char __padding0[0x4] = {};
    // private UnityEngine.Object m_TileAsset
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Object* m_TileAsset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private UnityEngine.Color m_Color
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Color m_Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Matrix4x4 m_Transform
    // Size: 0x40
    // Offset: 0x28
    ::UnityEngine::Matrix4x4 m_Transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    public:
    // Creating value type constructor for type: TileChangeData
    constexpr TileChangeData(::UnityEngine::Vector3Int m_Position_ = {}, ::UnityEngine::Object* m_TileAsset_ = {}, ::UnityEngine::Color m_Color_ = {}, ::UnityEngine::Matrix4x4 m_Transform_ = {}) noexcept : m_Position{m_Position_}, m_TileAsset{m_TileAsset_}, m_Color{m_Color_}, m_Transform{m_Transform_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private UnityEngine.Vector3Int m_Position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3Int& dyn_m_Position();
    // Get instance field reference: private UnityEngine.Object m_TileAsset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn_m_TileAsset();
    // Get instance field reference: private UnityEngine.Color m_Color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_Color();
    // Get instance field reference: private UnityEngine.Matrix4x4 m_Transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_m_Transform();
  }; // UnityEngine.Tilemaps.TileChangeData
  #pragma pack(pop)
  static check_size<sizeof(TileChangeData), 40 + sizeof(::UnityEngine::Matrix4x4)> __UnityEngine_Tilemaps_TileChangeDataSizeCheck;
  static_assert(sizeof(TileChangeData) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
