// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.RenderInstancedDataLayout
#include "UnityEngine/RenderInstancedDataLayout.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: GraphicsTier
  struct GraphicsTier;
  // Forward declaring type: OpenGLESVersion
  struct OpenGLESVersion;
  // Forward declaring type: ShadowCastingMode
  struct ShadowCastingMode;
  // Forward declaring type: LightProbeUsage
  struct LightProbeUsage;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderBuffer
  struct RenderBuffer;
  // Forward declaring type: CubemapFace
  struct CubemapFace;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Bounds
  struct Bounds;
  // Forward declaring type: Internal_DrawTextureArguments
  struct Internal_DrawTextureArguments;
  // Forward declaring type: RenderParams
  struct RenderParams;
  // Forward declaring type: GraphicsBuffer
  class GraphicsBuffer;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: LightProbeProxyVolume
  class LightProbeProxyVolume;
  // Forward declaring type: ComputeBuffer
  class ComputeBuffer;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Rect
  struct Rect;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Graphics
  class Graphics;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Graphics);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Graphics*, "UnityEngine", "Graphics");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Graphics
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  class Graphics : public ::Il2CppObject {
    public:
    // Get static field: static readonly System.Int32 kMaxDrawMeshInstanceCount
    static int _get_kMaxDrawMeshInstanceCount();
    // Set static field: static readonly System.Int32 kMaxDrawMeshInstanceCount
    static void _set_kMaxDrawMeshInstanceCount(int value);
    // Get static field: static System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.RenderInstancedDataLayout> s_RenderInstancedDataLayouts
    static ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::RenderInstancedDataLayout>* _get_s_RenderInstancedDataLayouts();
    // Set static field: static System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.RenderInstancedDataLayout> s_RenderInstancedDataLayouts
    static void _set_s_RenderInstancedDataLayouts(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::RenderInstancedDataLayout>* value);
    // static private System.Int32 Internal_GetMaxDrawMeshInstanceCount()
    // Offset: 0x5489AF0
    static int Internal_GetMaxDrawMeshInstanceCount();
    // static public UnityEngine.Rendering.GraphicsTier get_activeTier()
    // Offset: 0x5489B18
    static ::UnityEngine::Rendering::GraphicsTier get_activeTier();
    // static public System.Void set_activeTier(UnityEngine.Rendering.GraphicsTier value)
    // Offset: 0x5489B40
    static void set_activeTier(::UnityEngine::Rendering::GraphicsTier value);
    // static System.Boolean GetPreserveFramebufferAlpha()
    // Offset: 0x5489B7C
    static bool GetPreserveFramebufferAlpha();
    // static public System.Boolean get_preserveFramebufferAlpha()
    // Offset: 0x5489BA4
    static bool get_preserveFramebufferAlpha();
    // static UnityEngine.Rendering.OpenGLESVersion GetMinOpenGLESVersion()
    // Offset: 0x5489C0C
    static ::UnityEngine::Rendering::OpenGLESVersion GetMinOpenGLESVersion();
    // static public UnityEngine.Rendering.OpenGLESVersion get_minOpenGLESVersion()
    // Offset: 0x5489C34
    static ::UnityEngine::Rendering::OpenGLESVersion get_minOpenGLESVersion();
    // static private System.Void Internal_SetNullRT()
    // Offset: 0x5489C9C
    static void Internal_SetNullRT();
    // static private System.Void Internal_SetRTSimple(UnityEngine.RenderBuffer color, UnityEngine.RenderBuffer depth, System.Int32 mip, UnityEngine.CubemapFace face, System.Int32 depthSlice)
    // Offset: 0x5489CC4
    static void Internal_SetRTSimple(::UnityEngine::RenderBuffer color, ::UnityEngine::RenderBuffer depth, int mip, ::UnityEngine::CubemapFace face, int depthSlice);
    // static private System.Void CopyTexture_Full(UnityEngine.Texture src, UnityEngine.Texture dst)
    // Offset: 0x5489DD8
    static void CopyTexture_Full(::UnityEngine::Texture* src, ::UnityEngine::Texture* dst);
    // static private System.Void CopyTexture_Slice(UnityEngine.Texture src, System.Int32 srcElement, System.Int32 srcMip, UnityEngine.Texture dst, System.Int32 dstElement, System.Int32 dstMip)
    // Offset: 0x5489E1C
    static void CopyTexture_Slice(::UnityEngine::Texture* src, int srcElement, int srcMip, ::UnityEngine::Texture* dst, int dstElement, int dstMip);
    // static private System.Void CopyTexture_Region(UnityEngine.Texture src, System.Int32 srcElement, System.Int32 srcMip, System.Int32 srcX, System.Int32 srcY, System.Int32 srcWidth, System.Int32 srcHeight, UnityEngine.Texture dst, System.Int32 dstElement, System.Int32 dstMip, System.Int32 dstX, System.Int32 dstY)
    // Offset: 0x5489E90
    static void CopyTexture_Region(::UnityEngine::Texture* src, int srcElement, int srcMip, int srcX, int srcY, int srcWidth, int srcHeight, ::UnityEngine::Texture* dst, int dstElement, int dstMip, int dstX, int dstY);
    // static private System.Void Internal_DrawMeshNow2(UnityEngine.Mesh mesh, System.Int32 subsetIndex, UnityEngine.Matrix4x4 matrix)
    // Offset: 0x5489F50
    static void Internal_DrawMeshNow2(::UnityEngine::Mesh* mesh, int subsetIndex, ::UnityEngine::Matrix4x4 matrix);
    // static System.Void Internal_DrawTexture(ref UnityEngine.Internal_DrawTextureArguments args)
    // Offset: 0x548A030
    static void Internal_DrawTexture(ByRef<::UnityEngine::Internal_DrawTextureArguments> args);
    // static private System.Void Internal_RenderMeshIndirect(UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, UnityEngine.GraphicsBuffer commandBuffer, System.Int32 commandCount, System.Int32 startCommand)
    // Offset: 0x548A06C
    static void Internal_RenderMeshIndirect(::UnityEngine::RenderParams rparams, ::UnityEngine::Mesh* mesh, ::UnityEngine::GraphicsBuffer* commandBuffer, int commandCount, int startCommand);
    // static private System.Void Internal_DrawMesh(UnityEngine.Mesh mesh, System.Int32 submeshIndex, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, System.Int32 layer, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, System.Boolean receiveShadows, UnityEngine.Transform probeAnchor, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume)
    // Offset: 0x548A17C
    static void Internal_DrawMesh(::UnityEngine::Mesh* mesh, int submeshIndex, ::UnityEngine::Matrix4x4 matrix, ::UnityEngine::Material* material, int layer, ::UnityEngine::Camera* camera, ::UnityEngine::MaterialPropertyBlock* properties, ::UnityEngine::Rendering::ShadowCastingMode castShadows, bool receiveShadows, ::UnityEngine::Transform* probeAnchor, ::UnityEngine::Rendering::LightProbeUsage lightProbeUsage, ::UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume);
    // static private System.Void Internal_DrawMeshInstanced(UnityEngine.Mesh mesh, System.Int32 submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, System.Int32 count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, System.Boolean receiveShadows, System.Int32 layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume)
    // Offset: 0x548A32C
    static void Internal_DrawMeshInstanced(::UnityEngine::Mesh* mesh, int submeshIndex, ::UnityEngine::Material* material, ::ArrayW<::UnityEngine::Matrix4x4> matrices, int count, ::UnityEngine::MaterialPropertyBlock* properties, ::UnityEngine::Rendering::ShadowCastingMode castShadows, bool receiveShadows, int layer, ::UnityEngine::Camera* camera, ::UnityEngine::Rendering::LightProbeUsage lightProbeUsage, ::UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume);
    // static private System.Void Internal_DrawMeshInstancedIndirect(UnityEngine.Mesh mesh, System.Int32 submeshIndex, UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.ComputeBuffer bufferWithArgs, System.Int32 argsOffset, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, System.Boolean receiveShadows, System.Int32 layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume)
    // Offset: 0x548A3EC
    static void Internal_DrawMeshInstancedIndirect(::UnityEngine::Mesh* mesh, int submeshIndex, ::UnityEngine::Material* material, ::UnityEngine::Bounds bounds, ::UnityEngine::ComputeBuffer* bufferWithArgs, int argsOffset, ::UnityEngine::MaterialPropertyBlock* properties, ::UnityEngine::Rendering::ShadowCastingMode castShadows, bool receiveShadows, int layer, ::UnityEngine::Camera* camera, ::UnityEngine::Rendering::LightProbeUsage lightProbeUsage, ::UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume);
    // static private System.Void Internal_BlitMaterial5(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Material mat, System.Int32 pass, System.Boolean setRT)
    // Offset: 0x548A5B4
    static void Internal_BlitMaterial5(::UnityEngine::Texture* source, ::UnityEngine::RenderTexture* dest, ::UnityEngine::Material* mat, int pass, bool setRT);
    // static private System.Void Blit2(UnityEngine.Texture source, UnityEngine.RenderTexture dest)
    // Offset: 0x548A620
    static void Blit2(::UnityEngine::Texture* source, ::UnityEngine::RenderTexture* dest);
    // static private System.Void Blit4(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset)
    // Offset: 0x548A664
    static void Blit4(::UnityEngine::Texture* source, ::UnityEngine::RenderTexture* dest, ::UnityEngine::Vector2 scale, ::UnityEngine::Vector2 offset);
    // static System.Void SetRenderTargetImpl(UnityEngine.RenderBuffer colorBuffer, UnityEngine.RenderBuffer depthBuffer, System.Int32 mipLevel, UnityEngine.CubemapFace face, System.Int32 depthSlice)
    // Offset: 0x548A760
    static void SetRenderTargetImpl(::UnityEngine::RenderBuffer colorBuffer, ::UnityEngine::RenderBuffer depthBuffer, int mipLevel, ::UnityEngine::CubemapFace face, int depthSlice);
    // static System.Void SetRenderTargetImpl(UnityEngine.RenderTexture rt, System.Int32 mipLevel, UnityEngine.CubemapFace face, System.Int32 depthSlice)
    // Offset: 0x548A7FC
    static void SetRenderTargetImpl(::UnityEngine::RenderTexture* rt, int mipLevel, ::UnityEngine::CubemapFace face, int depthSlice);
    // static public System.Void SetRenderTarget(UnityEngine.RenderTexture rt, System.Int32 mipLevel, UnityEngine.CubemapFace face, System.Int32 depthSlice)
    // Offset: 0x548A930
    static void SetRenderTarget(::UnityEngine::RenderTexture* rt, int mipLevel, ::UnityEngine::CubemapFace face, int depthSlice);
    // static public System.Void CopyTexture(UnityEngine.Texture src, UnityEngine.Texture dst)
    // Offset: 0x548A9AC
    static void CopyTexture(::UnityEngine::Texture* src, ::UnityEngine::Texture* dst);
    // static public System.Void CopyTexture(UnityEngine.Texture src, System.Int32 srcElement, System.Int32 srcMip, UnityEngine.Texture dst, System.Int32 dstElement, System.Int32 dstMip)
    // Offset: 0x548AA30
    static void CopyTexture(::UnityEngine::Texture* src, int srcElement, int srcMip, ::UnityEngine::Texture* dst, int dstElement, int dstMip);
    // static public System.Void CopyTexture(UnityEngine.Texture src, System.Int32 srcElement, System.Int32 srcMip, System.Int32 srcX, System.Int32 srcY, System.Int32 srcWidth, System.Int32 srcHeight, UnityEngine.Texture dst, System.Int32 dstElement, System.Int32 dstMip, System.Int32 dstX, System.Int32 dstY)
    // Offset: 0x548AAE4
    static void CopyTexture(::UnityEngine::Texture* src, int srcElement, int srcMip, int srcX, int srcY, int srcWidth, int srcHeight, ::UnityEngine::Texture* dst, int dstElement, int dstMip, int dstX, int dstY);
    // static private System.Void DrawTextureImpl(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Rect sourceRect, System.Int32 leftBorder, System.Int32 rightBorder, System.Int32 topBorder, System.Int32 bottomBorder, UnityEngine.Color color, UnityEngine.Material mat, System.Int32 pass)
    // Offset: 0x548ABD0
    static void DrawTextureImpl(::UnityEngine::Rect screenRect, ::UnityEngine::Texture* texture, ::UnityEngine::Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, ::UnityEngine::Color color, ::UnityEngine::Material* mat, int pass);
    // static public System.Void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Rect sourceRect, System.Int32 leftBorder, System.Int32 rightBorder, System.Int32 topBorder, System.Int32 bottomBorder, UnityEngine.Material mat, System.Int32 pass)
    // Offset: 0x548AD70
    static void DrawTexture(::UnityEngine::Rect screenRect, ::UnityEngine::Texture* texture, ::UnityEngine::Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, ::UnityEngine::Material* mat, int pass);
    // static public System.Void RenderMeshIndirect(in UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, UnityEngine.GraphicsBuffer commandBuffer, System.Int32 commandCount, System.Int32 startCommand)
    // Offset: 0x548AE88
    static void RenderMeshIndirect(ByRef<::UnityEngine::RenderParams> rparams, ::UnityEngine::Mesh* mesh, ::UnityEngine::GraphicsBuffer* commandBuffer, int commandCount, int startCommand);
    // static public System.Void DrawMeshNow(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, System.Int32 materialIndex)
    // Offset: 0x548AFB8
    static void DrawMeshNow(::UnityEngine::Mesh* mesh, ::UnityEngine::Matrix4x4 matrix, int materialIndex);
    // static public System.Void DrawMeshNow(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix)
    // Offset: 0x548B0D0
    static void DrawMeshNow(::UnityEngine::Mesh* mesh, ::UnityEngine::Matrix4x4 matrix);
    // static public System.Void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Material material, System.Int32 layer, UnityEngine.Camera camera, System.Int32 submeshIndex, UnityEngine.MaterialPropertyBlock properties, System.Boolean castShadows, System.Boolean receiveShadows, System.Boolean useLightProbes)
    // Offset: 0x548B164
    static void DrawMesh(::UnityEngine::Mesh* mesh, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Material* material, int layer, ::UnityEngine::Camera* camera, int submeshIndex, ::UnityEngine::MaterialPropertyBlock* properties, bool castShadows, bool receiveShadows, bool useLightProbes);
    // static public System.Void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, System.Int32 layer, UnityEngine.Camera camera, System.Int32 submeshIndex, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, System.Boolean receiveShadows, UnityEngine.Transform probeAnchor, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume)
    // Offset: 0x548B350
    static void DrawMesh(::UnityEngine::Mesh* mesh, ::UnityEngine::Matrix4x4 matrix, ::UnityEngine::Material* material, int layer, ::UnityEngine::Camera* camera, int submeshIndex, ::UnityEngine::MaterialPropertyBlock* properties, ::UnityEngine::Rendering::ShadowCastingMode castShadows, bool receiveShadows, ::UnityEngine::Transform* probeAnchor, ::UnityEngine::Rendering::LightProbeUsage lightProbeUsage, ::UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume);
    // static public System.Void DrawMeshInstanced(UnityEngine.Mesh mesh, System.Int32 submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, System.Int32 count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, System.Boolean receiveShadows, System.Int32 layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume)
    // Offset: 0x548B4E8
    static void DrawMeshInstanced(::UnityEngine::Mesh* mesh, int submeshIndex, ::UnityEngine::Material* material, ::ArrayW<::UnityEngine::Matrix4x4> matrices, int count, ::UnityEngine::MaterialPropertyBlock* properties, ::UnityEngine::Rendering::ShadowCastingMode castShadows, bool receiveShadows, int layer, ::UnityEngine::Camera* camera, ::UnityEngine::Rendering::LightProbeUsage lightProbeUsage, ::UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume);
    // static public System.Void DrawMeshInstancedIndirect(UnityEngine.Mesh mesh, System.Int32 submeshIndex, UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.ComputeBuffer bufferWithArgs, System.Int32 argsOffset, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, System.Boolean receiveShadows, System.Int32 layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume)
    // Offset: 0x548B9A4
    static void DrawMeshInstancedIndirect(::UnityEngine::Mesh* mesh, int submeshIndex, ::UnityEngine::Material* material, ::UnityEngine::Bounds bounds, ::UnityEngine::ComputeBuffer* bufferWithArgs, int argsOffset, ::UnityEngine::MaterialPropertyBlock* properties, ::UnityEngine::Rendering::ShadowCastingMode castShadows, bool receiveShadows, int layer, ::UnityEngine::Camera* camera, ::UnityEngine::Rendering::LightProbeUsage lightProbeUsage, ::UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume);
    // static public System.Void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture dest)
    // Offset: 0x548BCE4
    static void Blit(::UnityEngine::Texture* source, ::UnityEngine::RenderTexture* dest);
    // static public System.Void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset)
    // Offset: 0x548BD68
    static void Blit(::UnityEngine::Texture* source, ::UnityEngine::RenderTexture* dest, ::UnityEngine::Vector2 scale, ::UnityEngine::Vector2 offset);
    // static public System.Void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Material mat, System.Int32 pass)
    // Offset: 0x548BDFC
    static void Blit(::UnityEngine::Texture* source, ::UnityEngine::RenderTexture* dest, ::UnityEngine::Material* mat, int pass);
    // static public System.Void Blit(UnityEngine.Texture source, UnityEngine.RenderTexture dest, UnityEngine.Material mat)
    // Offset: 0x548BE9C
    static void Blit(::UnityEngine::Texture* source, ::UnityEngine::RenderTexture* dest, ::UnityEngine::Material* mat);
    // static public System.Void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, System.Int32 layer, UnityEngine.Camera camera, System.Int32 submeshIndex)
    // Offset: 0x548BF0C
    static void DrawMesh(::UnityEngine::Mesh* mesh, ::UnityEngine::Matrix4x4 matrix, ::UnityEngine::Material* material, int layer, ::UnityEngine::Camera* camera, int submeshIndex);
    // static public System.Void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, System.Int32 layer, UnityEngine.Camera camera, System.Int32 submeshIndex, UnityEngine.MaterialPropertyBlock properties)
    // Offset: 0x548BFE8
    static void DrawMesh(::UnityEngine::Mesh* mesh, ::UnityEngine::Matrix4x4 matrix, ::UnityEngine::Material* material, int layer, ::UnityEngine::Camera* camera, int submeshIndex, ::UnityEngine::MaterialPropertyBlock* properties);
    // static public System.Void DrawMeshInstanced(UnityEngine.Mesh mesh, System.Int32 submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, System.Int32 count)
    // Offset: 0x548C0D0
    static void DrawMeshInstanced(::UnityEngine::Mesh* mesh, int submeshIndex, ::UnityEngine::Material* material, ::ArrayW<::UnityEngine::Matrix4x4> matrices, int count);
    // static public System.Void DrawMeshInstanced(UnityEngine.Mesh mesh, System.Int32 submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, System.Int32 count, UnityEngine.MaterialPropertyBlock properties)
    // Offset: 0x548C180
    static void DrawMeshInstanced(::UnityEngine::Mesh* mesh, int submeshIndex, ::UnityEngine::Material* material, ::ArrayW<::UnityEngine::Matrix4x4> matrices, int count, ::UnityEngine::MaterialPropertyBlock* properties);
    // static public System.Void DrawMeshInstanced(UnityEngine.Mesh mesh, System.Int32 submeshIndex, UnityEngine.Material material, UnityEngine.Matrix4x4[] matrices, System.Int32 count, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, System.Boolean receiveShadows, System.Int32 layer, UnityEngine.Camera camera)
    // Offset: 0x548C23C
    static void DrawMeshInstanced(::UnityEngine::Mesh* mesh, int submeshIndex, ::UnityEngine::Material* material, ::ArrayW<::UnityEngine::Matrix4x4> matrices, int count, ::UnityEngine::MaterialPropertyBlock* properties, ::UnityEngine::Rendering::ShadowCastingMode castShadows, bool receiveShadows, int layer, ::UnityEngine::Camera* camera);
    // static public System.Void DrawMeshInstancedIndirect(UnityEngine.Mesh mesh, System.Int32 submeshIndex, UnityEngine.Material material, UnityEngine.Bounds bounds, UnityEngine.ComputeBuffer bufferWithArgs, System.Int32 argsOffset, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, System.Boolean receiveShadows, System.Int32 layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage)
    // Offset: 0x548C310
    static void DrawMeshInstancedIndirect(::UnityEngine::Mesh* mesh, int submeshIndex, ::UnityEngine::Material* material, ::UnityEngine::Bounds bounds, ::UnityEngine::ComputeBuffer* bufferWithArgs, int argsOffset, ::UnityEngine::MaterialPropertyBlock* properties, ::UnityEngine::Rendering::ShadowCastingMode castShadows, bool receiveShadows, int layer, ::UnityEngine::Camera* camera, ::UnityEngine::Rendering::LightProbeUsage lightProbeUsage);
    // static public System.Void DrawTexture(UnityEngine.Rect screenRect, UnityEngine.Texture texture, UnityEngine.Rect sourceRect, System.Int32 leftBorder, System.Int32 rightBorder, System.Int32 topBorder, System.Int32 bottomBorder, UnityEngine.Material mat)
    // Offset: 0x548C410
    static void DrawTexture(::UnityEngine::Rect screenRect, ::UnityEngine::Texture* texture, ::UnityEngine::Rect sourceRect, int leftBorder, int rightBorder, int topBorder, int bottomBorder, ::UnityEngine::Material* mat);
    // static public System.Void SetRenderTarget(UnityEngine.RenderTexture rt)
    // Offset: 0x548C508
    static void SetRenderTarget(::UnityEngine::RenderTexture* rt);
    // static public System.Void SetRenderTarget(UnityEngine.RenderTexture rt, System.Int32 mipLevel)
    // Offset: 0x548C568
    static void SetRenderTarget(::UnityEngine::RenderTexture* rt, int mipLevel);
    // static private System.Void .cctor()
    // Offset: 0x548C5D4
    static void _cctor();
    // static private System.Void Internal_SetRTSimple_Injected(ref UnityEngine.RenderBuffer color, ref UnityEngine.RenderBuffer depth, System.Int32 mip, UnityEngine.CubemapFace face, System.Int32 depthSlice)
    // Offset: 0x5489D6C
    static void Internal_SetRTSimple_Injected(ByRef<::UnityEngine::RenderBuffer> color, ByRef<::UnityEngine::RenderBuffer> depth, int mip, ::UnityEngine::CubemapFace face, int depthSlice);
    // static private System.Void Internal_DrawMeshNow2_Injected(UnityEngine.Mesh mesh, System.Int32 subsetIndex, ref UnityEngine.Matrix4x4 matrix)
    // Offset: 0x5489FDC
    static void Internal_DrawMeshNow2_Injected(::UnityEngine::Mesh* mesh, int subsetIndex, ByRef<::UnityEngine::Matrix4x4> matrix);
    // static private System.Void Internal_RenderMeshIndirect_Injected(ref UnityEngine.RenderParams rparams, UnityEngine.Mesh mesh, UnityEngine.GraphicsBuffer commandBuffer, System.Int32 commandCount, System.Int32 startCommand)
    // Offset: 0x548A110
    static void Internal_RenderMeshIndirect_Injected(ByRef<::UnityEngine::RenderParams> rparams, ::UnityEngine::Mesh* mesh, ::UnityEngine::GraphicsBuffer* commandBuffer, int commandCount, int startCommand);
    // static private System.Void Internal_DrawMesh_Injected(UnityEngine.Mesh mesh, System.Int32 submeshIndex, ref UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, System.Int32 layer, UnityEngine.Camera camera, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, System.Boolean receiveShadows, UnityEngine.Transform probeAnchor, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume)
    // Offset: 0x548A26C
    static void Internal_DrawMesh_Injected(::UnityEngine::Mesh* mesh, int submeshIndex, ByRef<::UnityEngine::Matrix4x4> matrix, ::UnityEngine::Material* material, int layer, ::UnityEngine::Camera* camera, ::UnityEngine::MaterialPropertyBlock* properties, ::UnityEngine::Rendering::ShadowCastingMode castShadows, bool receiveShadows, ::UnityEngine::Transform* probeAnchor, ::UnityEngine::Rendering::LightProbeUsage lightProbeUsage, ::UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume);
    // static private System.Void Internal_DrawMeshInstancedIndirect_Injected(UnityEngine.Mesh mesh, System.Int32 submeshIndex, UnityEngine.Material material, ref UnityEngine.Bounds bounds, UnityEngine.ComputeBuffer bufferWithArgs, System.Int32 argsOffset, UnityEngine.MaterialPropertyBlock properties, UnityEngine.Rendering.ShadowCastingMode castShadows, System.Boolean receiveShadows, System.Int32 layer, UnityEngine.Camera camera, UnityEngine.Rendering.LightProbeUsage lightProbeUsage, UnityEngine.LightProbeProxyVolume lightProbeProxyVolume)
    // Offset: 0x548A4EC
    static void Internal_DrawMeshInstancedIndirect_Injected(::UnityEngine::Mesh* mesh, int submeshIndex, ::UnityEngine::Material* material, ByRef<::UnityEngine::Bounds> bounds, ::UnityEngine::ComputeBuffer* bufferWithArgs, int argsOffset, ::UnityEngine::MaterialPropertyBlock* properties, ::UnityEngine::Rendering::ShadowCastingMode castShadows, bool receiveShadows, int layer, ::UnityEngine::Camera* camera, ::UnityEngine::Rendering::LightProbeUsage lightProbeUsage, ::UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume);
    // static private System.Void Blit4_Injected(UnityEngine.Texture source, UnityEngine.RenderTexture dest, ref UnityEngine.Vector2 scale, ref UnityEngine.Vector2 offset)
    // Offset: 0x548A704
    static void Blit4_Injected(::UnityEngine::Texture* source, ::UnityEngine::RenderTexture* dest, ByRef<::UnityEngine::Vector2> scale, ByRef<::UnityEngine::Vector2> offset);
  }; // UnityEngine.Graphics
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Graphics::Internal_GetMaxDrawMeshInstanceCount
// Il2CppName: Internal_GetMaxDrawMeshInstanceCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::Graphics::Internal_GetMaxDrawMeshInstanceCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Internal_GetMaxDrawMeshInstanceCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::get_activeTier
// Il2CppName: get_activeTier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::GraphicsTier (*)()>(&UnityEngine::Graphics::get_activeTier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "get_activeTier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::set_activeTier
// Il2CppName: set_activeTier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::GraphicsTier)>(&UnityEngine::Graphics::set_activeTier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "GraphicsTier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "set_activeTier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::GetPreserveFramebufferAlpha
// Il2CppName: GetPreserveFramebufferAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::Graphics::GetPreserveFramebufferAlpha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "GetPreserveFramebufferAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::get_preserveFramebufferAlpha
// Il2CppName: get_preserveFramebufferAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::Graphics::get_preserveFramebufferAlpha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "get_preserveFramebufferAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::GetMinOpenGLESVersion
// Il2CppName: GetMinOpenGLESVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::OpenGLESVersion (*)()>(&UnityEngine::Graphics::GetMinOpenGLESVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "GetMinOpenGLESVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::get_minOpenGLESVersion
// Il2CppName: get_minOpenGLESVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::OpenGLESVersion (*)()>(&UnityEngine::Graphics::get_minOpenGLESVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "get_minOpenGLESVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Internal_SetNullRT
// Il2CppName: Internal_SetNullRT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Graphics::Internal_SetNullRT)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Internal_SetNullRT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Internal_SetRTSimple
// Il2CppName: Internal_SetRTSimple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::RenderBuffer, ::UnityEngine::RenderBuffer, int, ::UnityEngine::CubemapFace, int)>(&UnityEngine::Graphics::Internal_SetRTSimple)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderBuffer")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderBuffer")->byval_arg;
    static auto* mip = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* face = &::il2cpp_utils::GetClassFromName("UnityEngine", "CubemapFace")->byval_arg;
    static auto* depthSlice = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Internal_SetRTSimple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, depth, mip, face, depthSlice});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::CopyTexture_Full
// Il2CppName: CopyTexture_Full
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture*, ::UnityEngine::Texture*)>(&UnityEngine::Graphics::CopyTexture_Full)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* dst = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "CopyTexture_Full", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, dst});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::CopyTexture_Slice
// Il2CppName: CopyTexture_Slice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture*, int, int, ::UnityEngine::Texture*, int, int)>(&UnityEngine::Graphics::CopyTexture_Slice)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* srcElement = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcMip = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dst = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* dstElement = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dstMip = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "CopyTexture_Slice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, srcElement, srcMip, dst, dstElement, dstMip});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::CopyTexture_Region
// Il2CppName: CopyTexture_Region
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture*, int, int, int, int, int, int, ::UnityEngine::Texture*, int, int, int, int)>(&UnityEngine::Graphics::CopyTexture_Region)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* srcElement = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcMip = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dst = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* dstElement = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dstMip = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dstX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dstY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "CopyTexture_Region", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, srcElement, srcMip, srcX, srcY, srcWidth, srcHeight, dst, dstElement, dstMip, dstX, dstY});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Internal_DrawMeshNow2
// Il2CppName: Internal_DrawMeshNow2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, ::UnityEngine::Matrix4x4)>(&UnityEngine::Graphics::Internal_DrawMeshNow2)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* subsetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Internal_DrawMeshNow2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, subsetIndex, matrix});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Internal_DrawTexture
// Il2CppName: Internal_DrawTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Internal_DrawTextureArguments>)>(&UnityEngine::Graphics::Internal_DrawTexture)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine", "Internal_DrawTextureArguments")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Internal_DrawTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Internal_RenderMeshIndirect
// Il2CppName: Internal_RenderMeshIndirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::RenderParams, ::UnityEngine::Mesh*, ::UnityEngine::GraphicsBuffer*, int, int)>(&UnityEngine::Graphics::Internal_RenderMeshIndirect)> {
  static const MethodInfo* get() {
    static auto* rparams = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderParams")->byval_arg;
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* commandBuffer = &::il2cpp_utils::GetClassFromName("UnityEngine", "GraphicsBuffer")->byval_arg;
    static auto* commandCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startCommand = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Internal_RenderMeshIndirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rparams, mesh, commandBuffer, commandCount, startCommand});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Internal_DrawMesh
// Il2CppName: Internal_DrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, ::UnityEngine::Matrix4x4, ::UnityEngine::Material*, int, ::UnityEngine::Camera*, ::UnityEngine::MaterialPropertyBlock*, ::UnityEngine::Rendering::ShadowCastingMode, bool, ::UnityEngine::Transform*, ::UnityEngine::Rendering::LightProbeUsage, ::UnityEngine::LightProbeProxyVolume*)>(&UnityEngine::Graphics::Internal_DrawMesh)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* castShadows = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShadowCastingMode")->byval_arg;
    static auto* receiveShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* probeAnchor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* lightProbeUsage = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LightProbeUsage")->byval_arg;
    static auto* lightProbeProxyVolume = &::il2cpp_utils::GetClassFromName("UnityEngine", "LightProbeProxyVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Internal_DrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, submeshIndex, matrix, material, layer, camera, properties, castShadows, receiveShadows, probeAnchor, lightProbeUsage, lightProbeProxyVolume});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Internal_DrawMeshInstanced
// Il2CppName: Internal_DrawMeshInstanced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, ::UnityEngine::Material*, ::ArrayW<::UnityEngine::Matrix4x4>, int, ::UnityEngine::MaterialPropertyBlock*, ::UnityEngine::Rendering::ShadowCastingMode, bool, int, ::UnityEngine::Camera*, ::UnityEngine::Rendering::LightProbeUsage, ::UnityEngine::LightProbeProxyVolume*)>(&UnityEngine::Graphics::Internal_DrawMeshInstanced)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* matrices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* castShadows = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShadowCastingMode")->byval_arg;
    static auto* receiveShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* lightProbeUsage = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LightProbeUsage")->byval_arg;
    static auto* lightProbeProxyVolume = &::il2cpp_utils::GetClassFromName("UnityEngine", "LightProbeProxyVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Internal_DrawMeshInstanced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, submeshIndex, material, matrices, count, properties, castShadows, receiveShadows, layer, camera, lightProbeUsage, lightProbeProxyVolume});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Internal_DrawMeshInstancedIndirect
// Il2CppName: Internal_DrawMeshInstancedIndirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, ::UnityEngine::Material*, ::UnityEngine::Bounds, ::UnityEngine::ComputeBuffer*, int, ::UnityEngine::MaterialPropertyBlock*, ::UnityEngine::Rendering::ShadowCastingMode, bool, int, ::UnityEngine::Camera*, ::UnityEngine::Rendering::LightProbeUsage, ::UnityEngine::LightProbeProxyVolume*)>(&UnityEngine::Graphics::Internal_DrawMeshInstancedIndirect)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* bufferWithArgs = &::il2cpp_utils::GetClassFromName("UnityEngine", "ComputeBuffer")->byval_arg;
    static auto* argsOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* castShadows = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShadowCastingMode")->byval_arg;
    static auto* receiveShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* lightProbeUsage = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LightProbeUsage")->byval_arg;
    static auto* lightProbeProxyVolume = &::il2cpp_utils::GetClassFromName("UnityEngine", "LightProbeProxyVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Internal_DrawMeshInstancedIndirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, submeshIndex, material, bounds, bufferWithArgs, argsOffset, properties, castShadows, receiveShadows, layer, camera, lightProbeUsage, lightProbeProxyVolume});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Internal_BlitMaterial5
// Il2CppName: Internal_BlitMaterial5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture*, ::UnityEngine::RenderTexture*, ::UnityEngine::Material*, int, bool)>(&UnityEngine::Graphics::Internal_BlitMaterial5)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* pass = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* setRT = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Internal_BlitMaterial5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest, mat, pass, setRT});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Blit2
// Il2CppName: Blit2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture*, ::UnityEngine::RenderTexture*)>(&UnityEngine::Graphics::Blit2)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Blit2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Blit4
// Il2CppName: Blit4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture*, ::UnityEngine::RenderTexture*, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&UnityEngine::Graphics::Blit4)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Blit4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest, scale, offset});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::SetRenderTargetImpl
// Il2CppName: SetRenderTargetImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::RenderBuffer, ::UnityEngine::RenderBuffer, int, ::UnityEngine::CubemapFace, int)>(&UnityEngine::Graphics::SetRenderTargetImpl)> {
  static const MethodInfo* get() {
    static auto* colorBuffer = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderBuffer")->byval_arg;
    static auto* depthBuffer = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderBuffer")->byval_arg;
    static auto* mipLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* face = &::il2cpp_utils::GetClassFromName("UnityEngine", "CubemapFace")->byval_arg;
    static auto* depthSlice = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "SetRenderTargetImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorBuffer, depthBuffer, mipLevel, face, depthSlice});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::SetRenderTargetImpl
// Il2CppName: SetRenderTargetImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::RenderTexture*, int, ::UnityEngine::CubemapFace, int)>(&UnityEngine::Graphics::SetRenderTargetImpl)> {
  static const MethodInfo* get() {
    static auto* rt = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* mipLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* face = &::il2cpp_utils::GetClassFromName("UnityEngine", "CubemapFace")->byval_arg;
    static auto* depthSlice = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "SetRenderTargetImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rt, mipLevel, face, depthSlice});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::RenderTexture*, int, ::UnityEngine::CubemapFace, int)>(&UnityEngine::Graphics::SetRenderTarget)> {
  static const MethodInfo* get() {
    static auto* rt = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* mipLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* face = &::il2cpp_utils::GetClassFromName("UnityEngine", "CubemapFace")->byval_arg;
    static auto* depthSlice = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rt, mipLevel, face, depthSlice});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::CopyTexture
// Il2CppName: CopyTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture*, ::UnityEngine::Texture*)>(&UnityEngine::Graphics::CopyTexture)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* dst = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "CopyTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, dst});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::CopyTexture
// Il2CppName: CopyTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture*, int, int, ::UnityEngine::Texture*, int, int)>(&UnityEngine::Graphics::CopyTexture)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* srcElement = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcMip = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dst = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* dstElement = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dstMip = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "CopyTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, srcElement, srcMip, dst, dstElement, dstMip});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::CopyTexture
// Il2CppName: CopyTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture*, int, int, int, int, int, int, ::UnityEngine::Texture*, int, int, int, int)>(&UnityEngine::Graphics::CopyTexture)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* srcElement = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcMip = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dst = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* dstElement = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dstMip = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dstX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dstY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "CopyTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, srcElement, srcMip, srcX, srcY, srcWidth, srcHeight, dst, dstElement, dstMip, dstX, dstY});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::DrawTextureImpl
// Il2CppName: DrawTextureImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rect, ::UnityEngine::Texture*, ::UnityEngine::Rect, int, int, int, int, ::UnityEngine::Color, ::UnityEngine::Material*, int)>(&UnityEngine::Graphics::DrawTextureImpl)> {
  static const MethodInfo* get() {
    static auto* screenRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* sourceRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* leftBorder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rightBorder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* topBorder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bottomBorder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* pass = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "DrawTextureImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screenRect, texture, sourceRect, leftBorder, rightBorder, topBorder, bottomBorder, color, mat, pass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::DrawTexture
// Il2CppName: DrawTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rect, ::UnityEngine::Texture*, ::UnityEngine::Rect, int, int, int, int, ::UnityEngine::Material*, int)>(&UnityEngine::Graphics::DrawTexture)> {
  static const MethodInfo* get() {
    static auto* screenRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* sourceRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* leftBorder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rightBorder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* topBorder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bottomBorder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* pass = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "DrawTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screenRect, texture, sourceRect, leftBorder, rightBorder, topBorder, bottomBorder, mat, pass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::RenderMeshIndirect
// Il2CppName: RenderMeshIndirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::RenderParams>, ::UnityEngine::Mesh*, ::UnityEngine::GraphicsBuffer*, int, int)>(&UnityEngine::Graphics::RenderMeshIndirect)> {
  static const MethodInfo* get() {
    static auto* rparams = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderParams")->this_arg;
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* commandBuffer = &::il2cpp_utils::GetClassFromName("UnityEngine", "GraphicsBuffer")->byval_arg;
    static auto* commandCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startCommand = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "RenderMeshIndirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rparams, mesh, commandBuffer, commandCount, startCommand});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::DrawMeshNow
// Il2CppName: DrawMeshNow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, ::UnityEngine::Matrix4x4, int)>(&UnityEngine::Graphics::DrawMeshNow)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* materialIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "DrawMeshNow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, matrix, materialIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::DrawMeshNow
// Il2CppName: DrawMeshNow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, ::UnityEngine::Matrix4x4)>(&UnityEngine::Graphics::DrawMeshNow)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "DrawMeshNow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, matrix});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::DrawMesh
// Il2CppName: DrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Material*, int, ::UnityEngine::Camera*, int, ::UnityEngine::MaterialPropertyBlock*, bool, bool, bool)>(&UnityEngine::Graphics::DrawMesh)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* castShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* receiveShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useLightProbes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "DrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, position, rotation, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows, useLightProbes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::DrawMesh
// Il2CppName: DrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, ::UnityEngine::Matrix4x4, ::UnityEngine::Material*, int, ::UnityEngine::Camera*, int, ::UnityEngine::MaterialPropertyBlock*, ::UnityEngine::Rendering::ShadowCastingMode, bool, ::UnityEngine::Transform*, ::UnityEngine::Rendering::LightProbeUsage, ::UnityEngine::LightProbeProxyVolume*)>(&UnityEngine::Graphics::DrawMesh)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* castShadows = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShadowCastingMode")->byval_arg;
    static auto* receiveShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* probeAnchor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* lightProbeUsage = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LightProbeUsage")->byval_arg;
    static auto* lightProbeProxyVolume = &::il2cpp_utils::GetClassFromName("UnityEngine", "LightProbeProxyVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "DrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, matrix, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows, probeAnchor, lightProbeUsage, lightProbeProxyVolume});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::DrawMeshInstanced
// Il2CppName: DrawMeshInstanced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, ::UnityEngine::Material*, ::ArrayW<::UnityEngine::Matrix4x4>, int, ::UnityEngine::MaterialPropertyBlock*, ::UnityEngine::Rendering::ShadowCastingMode, bool, int, ::UnityEngine::Camera*, ::UnityEngine::Rendering::LightProbeUsage, ::UnityEngine::LightProbeProxyVolume*)>(&UnityEngine::Graphics::DrawMeshInstanced)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* matrices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* castShadows = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShadowCastingMode")->byval_arg;
    static auto* receiveShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* lightProbeUsage = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LightProbeUsage")->byval_arg;
    static auto* lightProbeProxyVolume = &::il2cpp_utils::GetClassFromName("UnityEngine", "LightProbeProxyVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "DrawMeshInstanced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, submeshIndex, material, matrices, count, properties, castShadows, receiveShadows, layer, camera, lightProbeUsage, lightProbeProxyVolume});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::DrawMeshInstancedIndirect
// Il2CppName: DrawMeshInstancedIndirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, ::UnityEngine::Material*, ::UnityEngine::Bounds, ::UnityEngine::ComputeBuffer*, int, ::UnityEngine::MaterialPropertyBlock*, ::UnityEngine::Rendering::ShadowCastingMode, bool, int, ::UnityEngine::Camera*, ::UnityEngine::Rendering::LightProbeUsage, ::UnityEngine::LightProbeProxyVolume*)>(&UnityEngine::Graphics::DrawMeshInstancedIndirect)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* bufferWithArgs = &::il2cpp_utils::GetClassFromName("UnityEngine", "ComputeBuffer")->byval_arg;
    static auto* argsOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* castShadows = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShadowCastingMode")->byval_arg;
    static auto* receiveShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* lightProbeUsage = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LightProbeUsage")->byval_arg;
    static auto* lightProbeProxyVolume = &::il2cpp_utils::GetClassFromName("UnityEngine", "LightProbeProxyVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "DrawMeshInstancedIndirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, submeshIndex, material, bounds, bufferWithArgs, argsOffset, properties, castShadows, receiveShadows, layer, camera, lightProbeUsage, lightProbeProxyVolume});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture*, ::UnityEngine::RenderTexture*)>(&UnityEngine::Graphics::Blit)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture*, ::UnityEngine::RenderTexture*, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&UnityEngine::Graphics::Blit)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest, scale, offset});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture*, ::UnityEngine::RenderTexture*, ::UnityEngine::Material*, int)>(&UnityEngine::Graphics::Blit)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* pass = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest, mat, pass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture*, ::UnityEngine::RenderTexture*, ::UnityEngine::Material*)>(&UnityEngine::Graphics::Blit)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest, mat});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::DrawMesh
// Il2CppName: DrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, ::UnityEngine::Matrix4x4, ::UnityEngine::Material*, int, ::UnityEngine::Camera*, int)>(&UnityEngine::Graphics::DrawMesh)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "DrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, matrix, material, layer, camera, submeshIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::DrawMesh
// Il2CppName: DrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, ::UnityEngine::Matrix4x4, ::UnityEngine::Material*, int, ::UnityEngine::Camera*, int, ::UnityEngine::MaterialPropertyBlock*)>(&UnityEngine::Graphics::DrawMesh)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "DrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, matrix, material, layer, camera, submeshIndex, properties});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::DrawMeshInstanced
// Il2CppName: DrawMeshInstanced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, ::UnityEngine::Material*, ::ArrayW<::UnityEngine::Matrix4x4>, int)>(&UnityEngine::Graphics::DrawMeshInstanced)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* matrices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "DrawMeshInstanced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, submeshIndex, material, matrices, count});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::DrawMeshInstanced
// Il2CppName: DrawMeshInstanced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, ::UnityEngine::Material*, ::ArrayW<::UnityEngine::Matrix4x4>, int, ::UnityEngine::MaterialPropertyBlock*)>(&UnityEngine::Graphics::DrawMeshInstanced)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* matrices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "DrawMeshInstanced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, submeshIndex, material, matrices, count, properties});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::DrawMeshInstanced
// Il2CppName: DrawMeshInstanced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, ::UnityEngine::Material*, ::ArrayW<::UnityEngine::Matrix4x4>, int, ::UnityEngine::MaterialPropertyBlock*, ::UnityEngine::Rendering::ShadowCastingMode, bool, int, ::UnityEngine::Camera*)>(&UnityEngine::Graphics::DrawMeshInstanced)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* matrices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* castShadows = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShadowCastingMode")->byval_arg;
    static auto* receiveShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "DrawMeshInstanced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, submeshIndex, material, matrices, count, properties, castShadows, receiveShadows, layer, camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::DrawMeshInstancedIndirect
// Il2CppName: DrawMeshInstancedIndirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, ::UnityEngine::Material*, ::UnityEngine::Bounds, ::UnityEngine::ComputeBuffer*, int, ::UnityEngine::MaterialPropertyBlock*, ::UnityEngine::Rendering::ShadowCastingMode, bool, int, ::UnityEngine::Camera*, ::UnityEngine::Rendering::LightProbeUsage)>(&UnityEngine::Graphics::DrawMeshInstancedIndirect)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* bufferWithArgs = &::il2cpp_utils::GetClassFromName("UnityEngine", "ComputeBuffer")->byval_arg;
    static auto* argsOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* castShadows = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShadowCastingMode")->byval_arg;
    static auto* receiveShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* lightProbeUsage = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LightProbeUsage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "DrawMeshInstancedIndirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, submeshIndex, material, bounds, bufferWithArgs, argsOffset, properties, castShadows, receiveShadows, layer, camera, lightProbeUsage});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::DrawTexture
// Il2CppName: DrawTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rect, ::UnityEngine::Texture*, ::UnityEngine::Rect, int, int, int, int, ::UnityEngine::Material*)>(&UnityEngine::Graphics::DrawTexture)> {
  static const MethodInfo* get() {
    static auto* screenRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* sourceRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* leftBorder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rightBorder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* topBorder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bottomBorder = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "DrawTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screenRect, texture, sourceRect, leftBorder, rightBorder, topBorder, bottomBorder, mat});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::RenderTexture*)>(&UnityEngine::Graphics::SetRenderTarget)> {
  static const MethodInfo* get() {
    static auto* rt = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rt});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::RenderTexture*, int)>(&UnityEngine::Graphics::SetRenderTarget)> {
  static const MethodInfo* get() {
    static auto* rt = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* mipLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rt, mipLevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Graphics::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Internal_SetRTSimple_Injected
// Il2CppName: Internal_SetRTSimple_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::RenderBuffer>, ByRef<::UnityEngine::RenderBuffer>, int, ::UnityEngine::CubemapFace, int)>(&UnityEngine::Graphics::Internal_SetRTSimple_Injected)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderBuffer")->this_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderBuffer")->this_arg;
    static auto* mip = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* face = &::il2cpp_utils::GetClassFromName("UnityEngine", "CubemapFace")->byval_arg;
    static auto* depthSlice = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Internal_SetRTSimple_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, depth, mip, face, depthSlice});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Internal_DrawMeshNow2_Injected
// Il2CppName: Internal_DrawMeshNow2_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, ByRef<::UnityEngine::Matrix4x4>)>(&UnityEngine::Graphics::Internal_DrawMeshNow2_Injected)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* subsetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Internal_DrawMeshNow2_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, subsetIndex, matrix});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Internal_RenderMeshIndirect_Injected
// Il2CppName: Internal_RenderMeshIndirect_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::RenderParams>, ::UnityEngine::Mesh*, ::UnityEngine::GraphicsBuffer*, int, int)>(&UnityEngine::Graphics::Internal_RenderMeshIndirect_Injected)> {
  static const MethodInfo* get() {
    static auto* rparams = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderParams")->this_arg;
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* commandBuffer = &::il2cpp_utils::GetClassFromName("UnityEngine", "GraphicsBuffer")->byval_arg;
    static auto* commandCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startCommand = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Internal_RenderMeshIndirect_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rparams, mesh, commandBuffer, commandCount, startCommand});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Internal_DrawMesh_Injected
// Il2CppName: Internal_DrawMesh_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, ByRef<::UnityEngine::Matrix4x4>, ::UnityEngine::Material*, int, ::UnityEngine::Camera*, ::UnityEngine::MaterialPropertyBlock*, ::UnityEngine::Rendering::ShadowCastingMode, bool, ::UnityEngine::Transform*, ::UnityEngine::Rendering::LightProbeUsage, ::UnityEngine::LightProbeProxyVolume*)>(&UnityEngine::Graphics::Internal_DrawMesh_Injected)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* castShadows = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShadowCastingMode")->byval_arg;
    static auto* receiveShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* probeAnchor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* lightProbeUsage = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LightProbeUsage")->byval_arg;
    static auto* lightProbeProxyVolume = &::il2cpp_utils::GetClassFromName("UnityEngine", "LightProbeProxyVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Internal_DrawMesh_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, submeshIndex, matrix, material, layer, camera, properties, castShadows, receiveShadows, probeAnchor, lightProbeUsage, lightProbeProxyVolume});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Internal_DrawMeshInstancedIndirect_Injected
// Il2CppName: Internal_DrawMeshInstancedIndirect_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, ::UnityEngine::Material*, ByRef<::UnityEngine::Bounds>, ::UnityEngine::ComputeBuffer*, int, ::UnityEngine::MaterialPropertyBlock*, ::UnityEngine::Rendering::ShadowCastingMode, bool, int, ::UnityEngine::Camera*, ::UnityEngine::Rendering::LightProbeUsage, ::UnityEngine::LightProbeProxyVolume*)>(&UnityEngine::Graphics::Internal_DrawMeshInstancedIndirect_Injected)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->this_arg;
    static auto* bufferWithArgs = &::il2cpp_utils::GetClassFromName("UnityEngine", "ComputeBuffer")->byval_arg;
    static auto* argsOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* castShadows = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ShadowCastingMode")->byval_arg;
    static auto* receiveShadows = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* lightProbeUsage = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "LightProbeUsage")->byval_arg;
    static auto* lightProbeProxyVolume = &::il2cpp_utils::GetClassFromName("UnityEngine", "LightProbeProxyVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Internal_DrawMeshInstancedIndirect_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, submeshIndex, material, bounds, bufferWithArgs, argsOffset, properties, castShadows, receiveShadows, layer, camera, lightProbeUsage, lightProbeProxyVolume});
  }
};
// Writing MetadataGetter for method: UnityEngine::Graphics::Blit4_Injected
// Il2CppName: Blit4_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture*, ::UnityEngine::RenderTexture*, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>)>(&UnityEngine::Graphics::Blit4_Injected)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Graphics*), "Blit4_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest, scale, offset});
  }
};
