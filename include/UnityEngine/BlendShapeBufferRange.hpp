// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: BlendShapeBufferRange
  struct BlendShapeBufferRange;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::BlendShapeBufferRange, "UnityEngine", "BlendShapeBufferRange");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.BlendShapeBufferRange
  // [TokenAttribute] Offset: FFFFFFFF
  struct BlendShapeBufferRange/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.UInt32 m_StartIndex
    // Size: 0x4
    // Offset: 0x0
    uint m_StartIndex;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_EndIndex
    // Size: 0x4
    // Offset: 0x4
    uint m_EndIndex;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: BlendShapeBufferRange
    constexpr BlendShapeBufferRange(uint m_StartIndex_ = {}, uint m_EndIndex_ = {}) noexcept : m_StartIndex{m_StartIndex_}, m_EndIndex{m_EndIndex_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.UInt32 m_StartIndex
    [[deprecated("Use field access instead!")]] uint& dyn_m_StartIndex();
    // Get instance field reference: private System.UInt32 m_EndIndex
    [[deprecated("Use field access instead!")]] uint& dyn_m_EndIndex();
    // System.Void set_startIndex(System.UInt32 value)
    // Offset: 0x54A5318
    void set_startIndex(uint value);
    // System.Void set_endIndex(System.UInt32 value)
    // Offset: 0x54A5328
    void set_endIndex(uint value);
  }; // UnityEngine.BlendShapeBufferRange
  #pragma pack(pop)
  static check_size<sizeof(BlendShapeBufferRange), 4 + sizeof(uint)> __UnityEngine_BlendShapeBufferRangeSizeCheck;
  static_assert(sizeof(BlendShapeBufferRange) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::BlendShapeBufferRange::set_startIndex
// Il2CppName: set_startIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::BlendShapeBufferRange::*)(uint)>(&UnityEngine::BlendShapeBufferRange::set_startIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::BlendShapeBufferRange), "set_startIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::BlendShapeBufferRange::set_endIndex
// Il2CppName: set_endIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::BlendShapeBufferRange::*)(uint)>(&UnityEngine::BlendShapeBufferRange::set_endIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::BlendShapeBufferRange), "set_endIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
