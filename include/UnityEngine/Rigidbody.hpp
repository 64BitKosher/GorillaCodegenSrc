// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: RigidbodyConstraints
  struct RigidbodyConstraints;
  // Forward declaring type: CollisionDetectionMode
  struct CollisionDetectionMode;
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: RigidbodyInterpolation
  struct RigidbodyInterpolation;
  // Forward declaring type: LayerMask
  struct LayerMask;
  // Forward declaring type: ForceMode
  struct ForceMode;
  // Forward declaring type: QueryTriggerInteraction
  struct QueryTriggerInteraction;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rigidbody
  class Rigidbody;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rigidbody);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rigidbody*, "UnityEngine", "Rigidbody");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rigidbody
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  class Rigidbody : public ::UnityEngine::Component {
    public:
    // public UnityEngine.Vector3 get_velocity()
    // Offset: 0x552DEE0
    ::UnityEngine::Vector3 get_velocity();
    // public System.Void set_velocity(UnityEngine.Vector3 value)
    // Offset: 0x552DF80
    void set_velocity(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_angularVelocity()
    // Offset: 0x552E018
    ::UnityEngine::Vector3 get_angularVelocity();
    // public System.Void set_angularVelocity(UnityEngine.Vector3 value)
    // Offset: 0x552E0B8
    void set_angularVelocity(::UnityEngine::Vector3 value);
    // public System.Single get_drag()
    // Offset: 0x552E150
    float get_drag();
    // public System.Void set_drag(System.Single value)
    // Offset: 0x552E18C
    void set_drag(float value);
    // public System.Single get_angularDrag()
    // Offset: 0x552E1D8
    float get_angularDrag();
    // public System.Void set_angularDrag(System.Single value)
    // Offset: 0x552E214
    void set_angularDrag(float value);
    // public System.Single get_mass()
    // Offset: 0x552E260
    float get_mass();
    // public System.Void set_mass(System.Single value)
    // Offset: 0x552E29C
    void set_mass(float value);
    // public System.Void SetDensity(System.Single density)
    // Offset: 0x552E2E8
    void SetDensity(float density);
    // public System.Boolean get_useGravity()
    // Offset: 0x552E334
    bool get_useGravity();
    // public System.Void set_useGravity(System.Boolean value)
    // Offset: 0x552E370
    void set_useGravity(bool value);
    // public System.Single get_maxDepenetrationVelocity()
    // Offset: 0x552E3B4
    float get_maxDepenetrationVelocity();
    // public System.Void set_maxDepenetrationVelocity(System.Single value)
    // Offset: 0x552E3F0
    void set_maxDepenetrationVelocity(float value);
    // public System.Boolean get_isKinematic()
    // Offset: 0x552E43C
    bool get_isKinematic();
    // public System.Void set_isKinematic(System.Boolean value)
    // Offset: 0x552E478
    void set_isKinematic(bool value);
    // public System.Boolean get_freezeRotation()
    // Offset: 0x552E4BC
    bool get_freezeRotation();
    // public System.Void set_freezeRotation(System.Boolean value)
    // Offset: 0x552E4F8
    void set_freezeRotation(bool value);
    // public UnityEngine.RigidbodyConstraints get_constraints()
    // Offset: 0x552E53C
    ::UnityEngine::RigidbodyConstraints get_constraints();
    // public System.Void set_constraints(UnityEngine.RigidbodyConstraints value)
    // Offset: 0x552E578
    void set_constraints(::UnityEngine::RigidbodyConstraints value);
    // public UnityEngine.CollisionDetectionMode get_collisionDetectionMode()
    // Offset: 0x552E5BC
    ::UnityEngine::CollisionDetectionMode get_collisionDetectionMode();
    // public System.Void set_collisionDetectionMode(UnityEngine.CollisionDetectionMode value)
    // Offset: 0x552E5F8
    void set_collisionDetectionMode(::UnityEngine::CollisionDetectionMode value);
    // public System.Boolean get_automaticCenterOfMass()
    // Offset: 0x552E63C
    bool get_automaticCenterOfMass();
    // public System.Void set_automaticCenterOfMass(System.Boolean value)
    // Offset: 0x552E678
    void set_automaticCenterOfMass(bool value);
    // public UnityEngine.Vector3 get_centerOfMass()
    // Offset: 0x552E6BC
    ::UnityEngine::Vector3 get_centerOfMass();
    // public System.Void set_centerOfMass(UnityEngine.Vector3 value)
    // Offset: 0x552E75C
    void set_centerOfMass(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_worldCenterOfMass()
    // Offset: 0x552E7F4
    ::UnityEngine::Vector3 get_worldCenterOfMass();
    // public System.Boolean get_automaticInertiaTensor()
    // Offset: 0x552E894
    bool get_automaticInertiaTensor();
    // public System.Void set_automaticInertiaTensor(System.Boolean value)
    // Offset: 0x552E8D0
    void set_automaticInertiaTensor(bool value);
    // public UnityEngine.Quaternion get_inertiaTensorRotation()
    // Offset: 0x552E914
    ::UnityEngine::Quaternion get_inertiaTensorRotation();
    // public System.Void set_inertiaTensorRotation(UnityEngine.Quaternion value)
    // Offset: 0x552E9B0
    void set_inertiaTensorRotation(::UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_inertiaTensor()
    // Offset: 0x552EA48
    ::UnityEngine::Vector3 get_inertiaTensor();
    // public System.Void set_inertiaTensor(UnityEngine.Vector3 value)
    // Offset: 0x552EAE8
    void set_inertiaTensor(::UnityEngine::Vector3 value);
    // public System.Boolean get_detectCollisions()
    // Offset: 0x552EB80
    bool get_detectCollisions();
    // public System.Void set_detectCollisions(System.Boolean value)
    // Offset: 0x552EBBC
    void set_detectCollisions(bool value);
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x552EC00
    ::UnityEngine::Vector3 get_position();
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x552ECA0
    void set_position(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_rotation()
    // Offset: 0x552ED38
    ::UnityEngine::Quaternion get_rotation();
    // public System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0x552EDD4
    void set_rotation(::UnityEngine::Quaternion value);
    // public UnityEngine.RigidbodyInterpolation get_interpolation()
    // Offset: 0x552EE6C
    ::UnityEngine::RigidbodyInterpolation get_interpolation();
    // public System.Void set_interpolation(UnityEngine.RigidbodyInterpolation value)
    // Offset: 0x552EEA8
    void set_interpolation(::UnityEngine::RigidbodyInterpolation value);
    // public System.Int32 get_solverIterations()
    // Offset: 0x552EEEC
    int get_solverIterations();
    // public System.Void set_solverIterations(System.Int32 value)
    // Offset: 0x552EF28
    void set_solverIterations(int value);
    // public System.Single get_sleepThreshold()
    // Offset: 0x552EF6C
    float get_sleepThreshold();
    // public System.Void set_sleepThreshold(System.Single value)
    // Offset: 0x552EFA8
    void set_sleepThreshold(float value);
    // public System.Single get_maxAngularVelocity()
    // Offset: 0x552EFF4
    float get_maxAngularVelocity();
    // public System.Void set_maxAngularVelocity(System.Single value)
    // Offset: 0x552F030
    void set_maxAngularVelocity(float value);
    // public System.Single get_maxLinearVelocity()
    // Offset: 0x552F07C
    float get_maxLinearVelocity();
    // public System.Void set_maxLinearVelocity(System.Single value)
    // Offset: 0x552F0B8
    void set_maxLinearVelocity(float value);
    // public System.Void MovePosition(UnityEngine.Vector3 position)
    // Offset: 0x552F104
    void MovePosition(::UnityEngine::Vector3 position);
    // public System.Void MoveRotation(UnityEngine.Quaternion rot)
    // Offset: 0x552F19C
    void MoveRotation(::UnityEngine::Quaternion rot);
    // public System.Void Move(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    // Offset: 0x552F234
    void Move(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation);
    // public System.Void Sleep()
    // Offset: 0x552F2E8
    void Sleep();
    // public System.Boolean IsSleeping()
    // Offset: 0x552F324
    bool IsSleeping();
    // public System.Void WakeUp()
    // Offset: 0x552F360
    void WakeUp();
    // public System.Void ResetCenterOfMass()
    // Offset: 0x552F39C
    void ResetCenterOfMass();
    // public System.Void ResetInertiaTensor()
    // Offset: 0x552F3D8
    void ResetInertiaTensor();
    // public UnityEngine.Vector3 GetRelativePointVelocity(UnityEngine.Vector3 relativePoint)
    // Offset: 0x552F414
    ::UnityEngine::Vector3 GetRelativePointVelocity(::UnityEngine::Vector3 relativePoint);
    // public UnityEngine.Vector3 GetPointVelocity(UnityEngine.Vector3 worldPoint)
    // Offset: 0x552F4D0
    ::UnityEngine::Vector3 GetPointVelocity(::UnityEngine::Vector3 worldPoint);
    // public System.Int32 get_solverVelocityIterations()
    // Offset: 0x552F58C
    int get_solverVelocityIterations();
    // public System.Void set_solverVelocityIterations(System.Int32 value)
    // Offset: 0x552F5C8
    void set_solverVelocityIterations(int value);
    // public UnityEngine.LayerMask get_excludeLayers()
    // Offset: 0x552F60C
    ::UnityEngine::LayerMask get_excludeLayers();
    // public System.Void set_excludeLayers(UnityEngine.LayerMask value)
    // Offset: 0x552F69C
    void set_excludeLayers(::UnityEngine::LayerMask value);
    // public UnityEngine.LayerMask get_includeLayers()
    // Offset: 0x552F728
    ::UnityEngine::LayerMask get_includeLayers();
    // public System.Void set_includeLayers(UnityEngine.LayerMask value)
    // Offset: 0x552F7B8
    void set_includeLayers(::UnityEngine::LayerMask value);
    // public UnityEngine.Vector3 GetAccumulatedForce(System.Single step)
    // Offset: 0x552F844
    ::UnityEngine::Vector3 GetAccumulatedForce(float step);
    // public UnityEngine.Vector3 GetAccumulatedForce()
    // Offset: 0x552F904
    ::UnityEngine::Vector3 GetAccumulatedForce();
    // public UnityEngine.Vector3 GetAccumulatedTorque(System.Single step)
    // Offset: 0x552F920
    ::UnityEngine::Vector3 GetAccumulatedTorque(float step);
    // public UnityEngine.Vector3 GetAccumulatedTorque()
    // Offset: 0x552F9E0
    ::UnityEngine::Vector3 GetAccumulatedTorque();
    // public System.Void AddForce(UnityEngine.Vector3 force, UnityEngine.ForceMode mode)
    // Offset: 0x552F9FC
    void AddForce(::UnityEngine::Vector3 force, ::UnityEngine::ForceMode mode);
    // public System.Void AddForce(UnityEngine.Vector3 force)
    // Offset: 0x552FAAC
    void AddForce(::UnityEngine::Vector3 force);
    // public System.Void AddForce(System.Single x, System.Single y, System.Single z, UnityEngine.ForceMode mode)
    // Offset: 0x552FAB4
    void AddForce(float x, float y, float z, ::UnityEngine::ForceMode mode);
    // public System.Void AddForce(System.Single x, System.Single y, System.Single z)
    // Offset: 0x552FAB8
    void AddForce(float x, float y, float z);
    // public System.Void AddRelativeForce(UnityEngine.Vector3 force, UnityEngine.ForceMode mode)
    // Offset: 0x552FAC0
    void AddRelativeForce(::UnityEngine::Vector3 force, ::UnityEngine::ForceMode mode);
    // public System.Void AddRelativeForce(UnityEngine.Vector3 force)
    // Offset: 0x552FB70
    void AddRelativeForce(::UnityEngine::Vector3 force);
    // public System.Void AddRelativeForce(System.Single x, System.Single y, System.Single z, UnityEngine.ForceMode mode)
    // Offset: 0x552FB78
    void AddRelativeForce(float x, float y, float z, ::UnityEngine::ForceMode mode);
    // public System.Void AddRelativeForce(System.Single x, System.Single y, System.Single z)
    // Offset: 0x552FB7C
    void AddRelativeForce(float x, float y, float z);
    // public System.Void AddTorque(UnityEngine.Vector3 torque, UnityEngine.ForceMode mode)
    // Offset: 0x552FB84
    void AddTorque(::UnityEngine::Vector3 torque, ::UnityEngine::ForceMode mode);
    // public System.Void AddTorque(UnityEngine.Vector3 torque)
    // Offset: 0x552FC34
    void AddTorque(::UnityEngine::Vector3 torque);
    // public System.Void AddTorque(System.Single x, System.Single y, System.Single z, UnityEngine.ForceMode mode)
    // Offset: 0x552FC3C
    void AddTorque(float x, float y, float z, ::UnityEngine::ForceMode mode);
    // public System.Void AddTorque(System.Single x, System.Single y, System.Single z)
    // Offset: 0x552FC40
    void AddTorque(float x, float y, float z);
    // public System.Void AddRelativeTorque(UnityEngine.Vector3 torque, UnityEngine.ForceMode mode)
    // Offset: 0x552FC48
    void AddRelativeTorque(::UnityEngine::Vector3 torque, ::UnityEngine::ForceMode mode);
    // public System.Void AddRelativeTorque(UnityEngine.Vector3 torque)
    // Offset: 0x552FCF8
    void AddRelativeTorque(::UnityEngine::Vector3 torque);
    // public System.Void AddRelativeTorque(System.Single x, System.Single y, System.Single z, UnityEngine.ForceMode mode)
    // Offset: 0x552FD00
    void AddRelativeTorque(float x, float y, float z, ::UnityEngine::ForceMode mode);
    // public System.Void AddRelativeTorque(System.Single x, System.Single y, System.Single z)
    // Offset: 0x552FD04
    void AddRelativeTorque(float x, float y, float z);
    // public System.Void AddForceAtPosition(UnityEngine.Vector3 force, UnityEngine.Vector3 position, UnityEngine.ForceMode mode)
    // Offset: 0x552FD0C
    void AddForceAtPosition(::UnityEngine::Vector3 force, ::UnityEngine::Vector3 position, ::UnityEngine::ForceMode mode);
    // public System.Void AddForceAtPosition(UnityEngine.Vector3 force, UnityEngine.Vector3 position)
    // Offset: 0x552FDD0
    void AddForceAtPosition(::UnityEngine::Vector3 force, ::UnityEngine::Vector3 position);
    // public System.Void AddExplosionForce(System.Single explosionForce, UnityEngine.Vector3 explosionPosition, System.Single explosionRadius, System.Single upwardsModifier, UnityEngine.ForceMode mode)
    // Offset: 0x552FDD8
    void AddExplosionForce(float explosionForce, ::UnityEngine::Vector3 explosionPosition, float explosionRadius, float upwardsModifier, ::UnityEngine::ForceMode mode);
    // public System.Void AddExplosionForce(System.Single explosionForce, UnityEngine.Vector3 explosionPosition, System.Single explosionRadius, System.Single upwardsModifier)
    // Offset: 0x552FED8
    void AddExplosionForce(float explosionForce, ::UnityEngine::Vector3 explosionPosition, float explosionRadius, float upwardsModifier);
    // public System.Void AddExplosionForce(System.Single explosionForce, UnityEngine.Vector3 explosionPosition, System.Single explosionRadius)
    // Offset: 0x552FEE0
    void AddExplosionForce(float explosionForce, ::UnityEngine::Vector3 explosionPosition, float explosionRadius);
    // private System.Void Internal_ClosestPointOnBounds(UnityEngine.Vector3 point, ref UnityEngine.Vector3 outPos, ref System.Single distance)
    // Offset: 0x552FEEC
    void Internal_ClosestPointOnBounds(::UnityEngine::Vector3 point, ByRef<::UnityEngine::Vector3> outPos, ByRef<float> distance);
    // public UnityEngine.Vector3 ClosestPointOnBounds(UnityEngine.Vector3 position)
    // Offset: 0x552FFB4
    ::UnityEngine::Vector3 ClosestPointOnBounds(::UnityEngine::Vector3 position);
    // private UnityEngine.RaycastHit SweepTest(UnityEngine.Vector3 direction, System.Single maxDistance, UnityEngine.QueryTriggerInteraction queryTriggerInteraction, ref System.Boolean hasHit)
    // Offset: 0x5530058
    ::UnityEngine::RaycastHit SweepTest(::UnityEngine::Vector3 direction, float maxDistance, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction, ByRef<bool> hasHit);
    // public System.Boolean SweepTest(UnityEngine.Vector3 direction, out UnityEngine.RaycastHit hitInfo, System.Single maxDistance, UnityEngine.QueryTriggerInteraction queryTriggerInteraction)
    // Offset: 0x5530174
    bool SweepTest(::UnityEngine::Vector3 direction, ByRef<::UnityEngine::RaycastHit> hitInfo, float maxDistance, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction);
    // public System.Boolean SweepTest(UnityEngine.Vector3 direction, out UnityEngine.RaycastHit hitInfo, System.Single maxDistance)
    // Offset: 0x553027C
    bool SweepTest(::UnityEngine::Vector3 direction, ByRef<::UnityEngine::RaycastHit> hitInfo, float maxDistance);
    // public System.Boolean SweepTest(UnityEngine.Vector3 direction, out UnityEngine.RaycastHit hitInfo)
    // Offset: 0x5530284
    bool SweepTest(::UnityEngine::Vector3 direction, ByRef<::UnityEngine::RaycastHit> hitInfo);
    // private UnityEngine.RaycastHit[] Internal_SweepTestAll(UnityEngine.Vector3 direction, System.Single maxDistance, UnityEngine.QueryTriggerInteraction queryTriggerInteraction)
    // Offset: 0x5530294
    ::ArrayW<::UnityEngine::RaycastHit> Internal_SweepTestAll(::UnityEngine::Vector3 direction, float maxDistance, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction);
    // public UnityEngine.RaycastHit[] SweepTestAll(UnityEngine.Vector3 direction, System.Single maxDistance, UnityEngine.QueryTriggerInteraction queryTriggerInteraction)
    // Offset: 0x5530364
    ::ArrayW<::UnityEngine::RaycastHit> SweepTestAll(::UnityEngine::Vector3 direction, float maxDistance, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction);
    // public UnityEngine.RaycastHit[] SweepTestAll(UnityEngine.Vector3 direction, System.Single maxDistance)
    // Offset: 0x553045C
    ::ArrayW<::UnityEngine::RaycastHit> SweepTestAll(::UnityEngine::Vector3 direction, float maxDistance);
    // public UnityEngine.RaycastHit[] SweepTestAll(UnityEngine.Vector3 direction)
    // Offset: 0x5530464
    ::ArrayW<::UnityEngine::RaycastHit> SweepTestAll(::UnityEngine::Vector3 direction);
    // public System.Single get_sleepVelocity()
    // Offset: 0x5530474
    float get_sleepVelocity();
    // public System.Void set_sleepVelocity(System.Single value)
    // Offset: 0x553047C
    void set_sleepVelocity(float value);
    // public System.Single get_sleepAngularVelocity()
    // Offset: 0x5530480
    float get_sleepAngularVelocity();
    // public System.Void set_sleepAngularVelocity(System.Single value)
    // Offset: 0x5530488
    void set_sleepAngularVelocity(float value);
    // public System.Void SetMaxAngularVelocity(System.Single a)
    // Offset: 0x553048C
    void SetMaxAngularVelocity(float a);
    // public System.Boolean get_useConeFriction()
    // Offset: 0x55304D8
    bool get_useConeFriction();
    // public System.Void set_useConeFriction(System.Boolean value)
    // Offset: 0x55304E0
    void set_useConeFriction(bool value);
    // public System.Int32 get_solverIterationCount()
    // Offset: 0x55304E4
    int get_solverIterationCount();
    // public System.Void set_solverIterationCount(System.Int32 value)
    // Offset: 0x5530520
    void set_solverIterationCount(int value);
    // public System.Int32 get_solverVelocityIterationCount()
    // Offset: 0x5530564
    int get_solverVelocityIterationCount();
    // public System.Void set_solverVelocityIterationCount(System.Int32 value)
    // Offset: 0x55305A0
    void set_solverVelocityIterationCount(int value);
    // public System.Void .ctor()
    // Offset: 0x55305E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Rigidbody* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rigidbody::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Rigidbody*, creationType>()));
    }
    // private System.Void get_velocity_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x552DF3C
    void get_velocity_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_velocity_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x552DFD4
    void set_velocity_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_angularVelocity_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x552E074
    void get_angularVelocity_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_angularVelocity_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x552E10C
    void set_angularVelocity_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_centerOfMass_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x552E718
    void get_centerOfMass_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_centerOfMass_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x552E7B0
    void set_centerOfMass_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_worldCenterOfMass_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x552E850
    void get_worldCenterOfMass_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void get_inertiaTensorRotation_Injected(out UnityEngine.Quaternion ret)
    // Offset: 0x552E96C
    void get_inertiaTensorRotation_Injected(ByRef<::UnityEngine::Quaternion> ret);
    // private System.Void set_inertiaTensorRotation_Injected(ref UnityEngine.Quaternion value)
    // Offset: 0x552EA04
    void set_inertiaTensorRotation_Injected(ByRef<::UnityEngine::Quaternion> value);
    // private System.Void get_inertiaTensor_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x552EAA4
    void get_inertiaTensor_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_inertiaTensor_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x552EB3C
    void set_inertiaTensor_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_position_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x552EC5C
    void get_position_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_position_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x552ECF4
    void set_position_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_rotation_Injected(out UnityEngine.Quaternion ret)
    // Offset: 0x552ED90
    void get_rotation_Injected(ByRef<::UnityEngine::Quaternion> ret);
    // private System.Void set_rotation_Injected(ref UnityEngine.Quaternion value)
    // Offset: 0x552EE28
    void set_rotation_Injected(ByRef<::UnityEngine::Quaternion> value);
    // private System.Void MovePosition_Injected(ref UnityEngine.Vector3 position)
    // Offset: 0x552F158
    void MovePosition_Injected(ByRef<::UnityEngine::Vector3> position);
    // private System.Void MoveRotation_Injected(ref UnityEngine.Quaternion rot)
    // Offset: 0x552F1F0
    void MoveRotation_Injected(ByRef<::UnityEngine::Quaternion> rot);
    // private System.Void Move_Injected(ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation)
    // Offset: 0x552F294
    void Move_Injected(ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation);
    // private System.Void GetRelativePointVelocity_Injected(ref UnityEngine.Vector3 relativePoint, out UnityEngine.Vector3 ret)
    // Offset: 0x552F47C
    void GetRelativePointVelocity_Injected(ByRef<::UnityEngine::Vector3> relativePoint, ByRef<::UnityEngine::Vector3> ret);
    // private System.Void GetPointVelocity_Injected(ref UnityEngine.Vector3 worldPoint, out UnityEngine.Vector3 ret)
    // Offset: 0x552F538
    void GetPointVelocity_Injected(ByRef<::UnityEngine::Vector3> worldPoint, ByRef<::UnityEngine::Vector3> ret);
    // private System.Void get_excludeLayers_Injected(out UnityEngine.LayerMask ret)
    // Offset: 0x552F658
    void get_excludeLayers_Injected(ByRef<::UnityEngine::LayerMask> ret);
    // private System.Void set_excludeLayers_Injected(ref UnityEngine.LayerMask value)
    // Offset: 0x552F6E4
    void set_excludeLayers_Injected(ByRef<::UnityEngine::LayerMask> value);
    // private System.Void get_includeLayers_Injected(out UnityEngine.LayerMask ret)
    // Offset: 0x552F774
    void get_includeLayers_Injected(ByRef<::UnityEngine::LayerMask> ret);
    // private System.Void set_includeLayers_Injected(ref UnityEngine.LayerMask value)
    // Offset: 0x552F800
    void set_includeLayers_Injected(ByRef<::UnityEngine::LayerMask> value);
    // private System.Void GetAccumulatedForce_Injected(System.Single step, out UnityEngine.Vector3 ret)
    // Offset: 0x552F8B0
    void GetAccumulatedForce_Injected(float step, ByRef<::UnityEngine::Vector3> ret);
    // private System.Void GetAccumulatedTorque_Injected(System.Single step, out UnityEngine.Vector3 ret)
    // Offset: 0x552F98C
    void GetAccumulatedTorque_Injected(float step, ByRef<::UnityEngine::Vector3> ret);
    // private System.Void AddForce_Injected(ref UnityEngine.Vector3 force, UnityEngine.ForceMode mode)
    // Offset: 0x552FA58
    void AddForce_Injected(ByRef<::UnityEngine::Vector3> force, ::UnityEngine::ForceMode mode);
    // private System.Void AddRelativeForce_Injected(ref UnityEngine.Vector3 force, UnityEngine.ForceMode mode)
    // Offset: 0x552FB1C
    void AddRelativeForce_Injected(ByRef<::UnityEngine::Vector3> force, ::UnityEngine::ForceMode mode);
    // private System.Void AddTorque_Injected(ref UnityEngine.Vector3 torque, UnityEngine.ForceMode mode)
    // Offset: 0x552FBE0
    void AddTorque_Injected(ByRef<::UnityEngine::Vector3> torque, ::UnityEngine::ForceMode mode);
    // private System.Void AddRelativeTorque_Injected(ref UnityEngine.Vector3 torque, UnityEngine.ForceMode mode)
    // Offset: 0x552FCA4
    void AddRelativeTorque_Injected(ByRef<::UnityEngine::Vector3> torque, ::UnityEngine::ForceMode mode);
    // private System.Void AddForceAtPosition_Injected(ref UnityEngine.Vector3 force, ref UnityEngine.Vector3 position, UnityEngine.ForceMode mode)
    // Offset: 0x552FD74
    void AddForceAtPosition_Injected(ByRef<::UnityEngine::Vector3> force, ByRef<::UnityEngine::Vector3> position, ::UnityEngine::ForceMode mode);
    // private System.Void AddExplosionForce_Injected(System.Single explosionForce, ref UnityEngine.Vector3 explosionPosition, System.Single explosionRadius, System.Single upwardsModifier, UnityEngine.ForceMode mode)
    // Offset: 0x552FE5C
    void AddExplosionForce_Injected(float explosionForce, ByRef<::UnityEngine::Vector3> explosionPosition, float explosionRadius, float upwardsModifier, ::UnityEngine::ForceMode mode);
    // private System.Void Internal_ClosestPointOnBounds_Injected(ref UnityEngine.Vector3 point, ref UnityEngine.Vector3 outPos, ref System.Single distance)
    // Offset: 0x552FF58
    void Internal_ClosestPointOnBounds_Injected(ByRef<::UnityEngine::Vector3> point, ByRef<::UnityEngine::Vector3> outPos, ByRef<float> distance);
    // private System.Void SweepTest_Injected(ref UnityEngine.Vector3 direction, System.Single maxDistance, UnityEngine.QueryTriggerInteraction queryTriggerInteraction, ref System.Boolean hasHit, out UnityEngine.RaycastHit ret)
    // Offset: 0x55300F8
    void SweepTest_Injected(ByRef<::UnityEngine::Vector3> direction, float maxDistance, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction, ByRef<bool> hasHit, ByRef<::UnityEngine::RaycastHit> ret);
    // private UnityEngine.RaycastHit[] Internal_SweepTestAll_Injected(ref UnityEngine.Vector3 direction, System.Single maxDistance, UnityEngine.QueryTriggerInteraction queryTriggerInteraction)
    // Offset: 0x5530300
    ::ArrayW<::UnityEngine::RaycastHit> Internal_SweepTestAll_Injected(ByRef<::UnityEngine::Vector3> direction, float maxDistance, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction);
  }; // UnityEngine.Rigidbody
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_velocity
// Il2CppName: get_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_velocity
// Il2CppName: set_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::set_velocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_angularVelocity
// Il2CppName: get_angularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_angularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_angularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_angularVelocity
// Il2CppName: set_angularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::set_angularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_angularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_drag
// Il2CppName: get_drag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_drag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_drag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_drag
// Il2CppName: set_drag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::set_drag)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_drag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_angularDrag
// Il2CppName: get_angularDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_angularDrag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_angularDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_angularDrag
// Il2CppName: set_angularDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::set_angularDrag)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_angularDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_mass
// Il2CppName: get_mass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_mass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_mass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_mass
// Il2CppName: set_mass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::set_mass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_mass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::SetDensity
// Il2CppName: SetDensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::SetDensity)> {
  static const MethodInfo* get() {
    static auto* density = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "SetDensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{density});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_useGravity
// Il2CppName: get_useGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_useGravity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_useGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_useGravity
// Il2CppName: set_useGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(bool)>(&UnityEngine::Rigidbody::set_useGravity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_useGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_maxDepenetrationVelocity
// Il2CppName: get_maxDepenetrationVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_maxDepenetrationVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_maxDepenetrationVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_maxDepenetrationVelocity
// Il2CppName: set_maxDepenetrationVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::set_maxDepenetrationVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_maxDepenetrationVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_isKinematic
// Il2CppName: get_isKinematic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_isKinematic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_isKinematic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_isKinematic
// Il2CppName: set_isKinematic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(bool)>(&UnityEngine::Rigidbody::set_isKinematic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_isKinematic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_freezeRotation
// Il2CppName: get_freezeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_freezeRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_freezeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_freezeRotation
// Il2CppName: set_freezeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(bool)>(&UnityEngine::Rigidbody::set_freezeRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_freezeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_constraints
// Il2CppName: get_constraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RigidbodyConstraints (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_constraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_constraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_constraints
// Il2CppName: set_constraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::RigidbodyConstraints)>(&UnityEngine::Rigidbody::set_constraints)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "RigidbodyConstraints")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_constraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_collisionDetectionMode
// Il2CppName: get_collisionDetectionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::CollisionDetectionMode (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_collisionDetectionMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_collisionDetectionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_collisionDetectionMode
// Il2CppName: set_collisionDetectionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::CollisionDetectionMode)>(&UnityEngine::Rigidbody::set_collisionDetectionMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "CollisionDetectionMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_collisionDetectionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_automaticCenterOfMass
// Il2CppName: get_automaticCenterOfMass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_automaticCenterOfMass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_automaticCenterOfMass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_automaticCenterOfMass
// Il2CppName: set_automaticCenterOfMass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(bool)>(&UnityEngine::Rigidbody::set_automaticCenterOfMass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_automaticCenterOfMass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_centerOfMass
// Il2CppName: get_centerOfMass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_centerOfMass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_centerOfMass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_centerOfMass
// Il2CppName: set_centerOfMass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::set_centerOfMass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_centerOfMass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_worldCenterOfMass
// Il2CppName: get_worldCenterOfMass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_worldCenterOfMass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_worldCenterOfMass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_automaticInertiaTensor
// Il2CppName: get_automaticInertiaTensor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_automaticInertiaTensor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_automaticInertiaTensor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_automaticInertiaTensor
// Il2CppName: set_automaticInertiaTensor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(bool)>(&UnityEngine::Rigidbody::set_automaticInertiaTensor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_automaticInertiaTensor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_inertiaTensorRotation
// Il2CppName: get_inertiaTensorRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_inertiaTensorRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_inertiaTensorRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_inertiaTensorRotation
// Il2CppName: set_inertiaTensorRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Quaternion)>(&UnityEngine::Rigidbody::set_inertiaTensorRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_inertiaTensorRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_inertiaTensor
// Il2CppName: get_inertiaTensor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_inertiaTensor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_inertiaTensor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_inertiaTensor
// Il2CppName: set_inertiaTensor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::set_inertiaTensor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_inertiaTensor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_detectCollisions
// Il2CppName: get_detectCollisions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_detectCollisions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_detectCollisions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_detectCollisions
// Il2CppName: set_detectCollisions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(bool)>(&UnityEngine::Rigidbody::set_detectCollisions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_detectCollisions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::set_position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Quaternion)>(&UnityEngine::Rigidbody::set_rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_interpolation
// Il2CppName: get_interpolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RigidbodyInterpolation (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_interpolation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_interpolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_interpolation
// Il2CppName: set_interpolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::RigidbodyInterpolation)>(&UnityEngine::Rigidbody::set_interpolation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "RigidbodyInterpolation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_interpolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_solverIterations
// Il2CppName: get_solverIterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_solverIterations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_solverIterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_solverIterations
// Il2CppName: set_solverIterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(int)>(&UnityEngine::Rigidbody::set_solverIterations)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_solverIterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_sleepThreshold
// Il2CppName: get_sleepThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_sleepThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_sleepThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_sleepThreshold
// Il2CppName: set_sleepThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::set_sleepThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_sleepThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_maxAngularVelocity
// Il2CppName: get_maxAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_maxAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_maxAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_maxAngularVelocity
// Il2CppName: set_maxAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::set_maxAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_maxAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_maxLinearVelocity
// Il2CppName: get_maxLinearVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_maxLinearVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_maxLinearVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_maxLinearVelocity
// Il2CppName: set_maxLinearVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::set_maxLinearVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_maxLinearVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::MovePosition
// Il2CppName: MovePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::MovePosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "MovePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::MoveRotation
// Il2CppName: MoveRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Quaternion)>(&UnityEngine::Rigidbody::MoveRotation)> {
  static const MethodInfo* get() {
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "MoveRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rot});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::Move
// Il2CppName: Move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&UnityEngine::Rigidbody::Move)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "Move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::Sleep
// Il2CppName: Sleep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::Sleep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "Sleep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::IsSleeping
// Il2CppName: IsSleeping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::IsSleeping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "IsSleeping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::WakeUp
// Il2CppName: WakeUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::WakeUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "WakeUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::ResetCenterOfMass
// Il2CppName: ResetCenterOfMass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::ResetCenterOfMass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "ResetCenterOfMass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::ResetInertiaTensor
// Il2CppName: ResetInertiaTensor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::ResetInertiaTensor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "ResetInertiaTensor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::GetRelativePointVelocity
// Il2CppName: GetRelativePointVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::GetRelativePointVelocity)> {
  static const MethodInfo* get() {
    static auto* relativePoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "GetRelativePointVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativePoint});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::GetPointVelocity
// Il2CppName: GetPointVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::GetPointVelocity)> {
  static const MethodInfo* get() {
    static auto* worldPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "GetPointVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPoint});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_solverVelocityIterations
// Il2CppName: get_solverVelocityIterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_solverVelocityIterations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_solverVelocityIterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_solverVelocityIterations
// Il2CppName: set_solverVelocityIterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(int)>(&UnityEngine::Rigidbody::set_solverVelocityIterations)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_solverVelocityIterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_excludeLayers
// Il2CppName: get_excludeLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_excludeLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_excludeLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_excludeLayers
// Il2CppName: set_excludeLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::LayerMask)>(&UnityEngine::Rigidbody::set_excludeLayers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_excludeLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_includeLayers
// Il2CppName: get_includeLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_includeLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_includeLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_includeLayers
// Il2CppName: set_includeLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::LayerMask)>(&UnityEngine::Rigidbody::set_includeLayers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_includeLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::GetAccumulatedForce
// Il2CppName: GetAccumulatedForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::GetAccumulatedForce)> {
  static const MethodInfo* get() {
    static auto* step = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "GetAccumulatedForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{step});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::GetAccumulatedForce
// Il2CppName: GetAccumulatedForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::GetAccumulatedForce)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "GetAccumulatedForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::GetAccumulatedTorque
// Il2CppName: GetAccumulatedTorque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::GetAccumulatedTorque)> {
  static const MethodInfo* get() {
    static auto* step = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "GetAccumulatedTorque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{step});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::GetAccumulatedTorque
// Il2CppName: GetAccumulatedTorque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::GetAccumulatedTorque)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "GetAccumulatedTorque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddForce
// Il2CppName: AddForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddForce)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddForce
// Il2CppName: AddForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::AddForce)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddForce
// Il2CppName: AddForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, float, float, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddForce)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddForce
// Il2CppName: AddForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, float, float)>(&UnityEngine::Rigidbody::AddForce)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddRelativeForce
// Il2CppName: AddRelativeForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddRelativeForce)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddRelativeForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddRelativeForce
// Il2CppName: AddRelativeForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::AddRelativeForce)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddRelativeForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddRelativeForce
// Il2CppName: AddRelativeForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, float, float, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddRelativeForce)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddRelativeForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddRelativeForce
// Il2CppName: AddRelativeForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, float, float)>(&UnityEngine::Rigidbody::AddRelativeForce)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddRelativeForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddTorque
// Il2CppName: AddTorque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddTorque)> {
  static const MethodInfo* get() {
    static auto* torque = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddTorque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{torque, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddTorque
// Il2CppName: AddTorque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::AddTorque)> {
  static const MethodInfo* get() {
    static auto* torque = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddTorque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{torque});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddTorque
// Il2CppName: AddTorque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, float, float, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddTorque)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddTorque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddTorque
// Il2CppName: AddTorque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, float, float)>(&UnityEngine::Rigidbody::AddTorque)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddTorque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddRelativeTorque
// Il2CppName: AddRelativeTorque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddRelativeTorque)> {
  static const MethodInfo* get() {
    static auto* torque = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddRelativeTorque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{torque, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddRelativeTorque
// Il2CppName: AddRelativeTorque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::AddRelativeTorque)> {
  static const MethodInfo* get() {
    static auto* torque = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddRelativeTorque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{torque});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddRelativeTorque
// Il2CppName: AddRelativeTorque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, float, float, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddRelativeTorque)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddRelativeTorque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddRelativeTorque
// Il2CppName: AddRelativeTorque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, float, float)>(&UnityEngine::Rigidbody::AddRelativeTorque)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddRelativeTorque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddForceAtPosition
// Il2CppName: AddForceAtPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddForceAtPosition)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddForceAtPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force, position, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddForceAtPosition
// Il2CppName: AddForceAtPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::AddForceAtPosition)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddForceAtPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force, position});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddExplosionForce
// Il2CppName: AddExplosionForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, ::UnityEngine::Vector3, float, float, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddExplosionForce)> {
  static const MethodInfo* get() {
    static auto* explosionForce = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* explosionPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* explosionRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* upwardsModifier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddExplosionForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{explosionForce, explosionPosition, explosionRadius, upwardsModifier, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddExplosionForce
// Il2CppName: AddExplosionForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, ::UnityEngine::Vector3, float, float)>(&UnityEngine::Rigidbody::AddExplosionForce)> {
  static const MethodInfo* get() {
    static auto* explosionForce = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* explosionPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* explosionRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* upwardsModifier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddExplosionForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{explosionForce, explosionPosition, explosionRadius, upwardsModifier});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddExplosionForce
// Il2CppName: AddExplosionForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, ::UnityEngine::Vector3, float)>(&UnityEngine::Rigidbody::AddExplosionForce)> {
  static const MethodInfo* get() {
    static auto* explosionForce = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* explosionPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* explosionRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddExplosionForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{explosionForce, explosionPosition, explosionRadius});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::Internal_ClosestPointOnBounds
// Il2CppName: Internal_ClosestPointOnBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, ByRef<float>)>(&UnityEngine::Rigidbody::Internal_ClosestPointOnBounds)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* outPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "Internal_ClosestPointOnBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, outPos, distance});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::ClosestPointOnBounds
// Il2CppName: ClosestPointOnBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::ClosestPointOnBounds)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "ClosestPointOnBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::SweepTest
// Il2CppName: SweepTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RaycastHit (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, float, ::UnityEngine::QueryTriggerInteraction, ByRef<bool>)>(&UnityEngine::Rigidbody::SweepTest)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    static auto* hasHit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "SweepTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, maxDistance, queryTriggerInteraction, hasHit});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::SweepTest
// Il2CppName: SweepTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, ByRef<::UnityEngine::RaycastHit>, float, ::UnityEngine::QueryTriggerInteraction)>(&UnityEngine::Rigidbody::SweepTest)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hitInfo = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "SweepTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, hitInfo, maxDistance, queryTriggerInteraction});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::SweepTest
// Il2CppName: SweepTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, ByRef<::UnityEngine::RaycastHit>, float)>(&UnityEngine::Rigidbody::SweepTest)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hitInfo = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "SweepTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, hitInfo, maxDistance});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::SweepTest
// Il2CppName: SweepTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, ByRef<::UnityEngine::RaycastHit>)>(&UnityEngine::Rigidbody::SweepTest)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hitInfo = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "SweepTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, hitInfo});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::Internal_SweepTestAll
// Il2CppName: Internal_SweepTestAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::RaycastHit> (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, float, ::UnityEngine::QueryTriggerInteraction)>(&UnityEngine::Rigidbody::Internal_SweepTestAll)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "Internal_SweepTestAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, maxDistance, queryTriggerInteraction});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::SweepTestAll
// Il2CppName: SweepTestAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::RaycastHit> (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, float, ::UnityEngine::QueryTriggerInteraction)>(&UnityEngine::Rigidbody::SweepTestAll)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "SweepTestAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, maxDistance, queryTriggerInteraction});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::SweepTestAll
// Il2CppName: SweepTestAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::RaycastHit> (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, float)>(&UnityEngine::Rigidbody::SweepTestAll)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "SweepTestAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, maxDistance});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::SweepTestAll
// Il2CppName: SweepTestAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::RaycastHit> (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::SweepTestAll)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "SweepTestAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_sleepVelocity
// Il2CppName: get_sleepVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_sleepVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_sleepVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_sleepVelocity
// Il2CppName: set_sleepVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::set_sleepVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_sleepVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_sleepAngularVelocity
// Il2CppName: get_sleepAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_sleepAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_sleepAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_sleepAngularVelocity
// Il2CppName: set_sleepAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::set_sleepAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_sleepAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::SetMaxAngularVelocity
// Il2CppName: SetMaxAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::SetMaxAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "SetMaxAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_useConeFriction
// Il2CppName: get_useConeFriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_useConeFriction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_useConeFriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_useConeFriction
// Il2CppName: set_useConeFriction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(bool)>(&UnityEngine::Rigidbody::set_useConeFriction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_useConeFriction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_solverIterationCount
// Il2CppName: get_solverIterationCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_solverIterationCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_solverIterationCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_solverIterationCount
// Il2CppName: set_solverIterationCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(int)>(&UnityEngine::Rigidbody::set_solverIterationCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_solverIterationCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_solverVelocityIterationCount
// Il2CppName: get_solverVelocityIterationCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_solverVelocityIterationCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_solverVelocityIterationCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_solverVelocityIterationCount
// Il2CppName: set_solverVelocityIterationCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(int)>(&UnityEngine::Rigidbody::set_solverVelocityIterationCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_solverVelocityIterationCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_velocity_Injected
// Il2CppName: get_velocity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::get_velocity_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_velocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_velocity_Injected
// Il2CppName: set_velocity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::set_velocity_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_velocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_angularVelocity_Injected
// Il2CppName: get_angularVelocity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::get_angularVelocity_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_angularVelocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_angularVelocity_Injected
// Il2CppName: set_angularVelocity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::set_angularVelocity_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_angularVelocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_centerOfMass_Injected
// Il2CppName: get_centerOfMass_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::get_centerOfMass_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_centerOfMass_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_centerOfMass_Injected
// Il2CppName: set_centerOfMass_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::set_centerOfMass_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_centerOfMass_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_worldCenterOfMass_Injected
// Il2CppName: get_worldCenterOfMass_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::get_worldCenterOfMass_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_worldCenterOfMass_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_inertiaTensorRotation_Injected
// Il2CppName: get_inertiaTensorRotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Rigidbody::get_inertiaTensorRotation_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_inertiaTensorRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_inertiaTensorRotation_Injected
// Il2CppName: set_inertiaTensorRotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Rigidbody::set_inertiaTensorRotation_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_inertiaTensorRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_inertiaTensor_Injected
// Il2CppName: get_inertiaTensor_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::get_inertiaTensor_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_inertiaTensor_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_inertiaTensor_Injected
// Il2CppName: set_inertiaTensor_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::set_inertiaTensor_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_inertiaTensor_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_position_Injected
// Il2CppName: get_position_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::get_position_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_position_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_position_Injected
// Il2CppName: set_position_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::set_position_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_position_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_rotation_Injected
// Il2CppName: get_rotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Rigidbody::get_rotation_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_rotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_rotation_Injected
// Il2CppName: set_rotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Rigidbody::set_rotation_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_rotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::MovePosition_Injected
// Il2CppName: MovePosition_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::MovePosition_Injected)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "MovePosition_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::MoveRotation_Injected
// Il2CppName: MoveRotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Rigidbody::MoveRotation_Injected)> {
  static const MethodInfo* get() {
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "MoveRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rot});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::Move_Injected
// Il2CppName: Move_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Rigidbody::Move_Injected)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "Move_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::GetRelativePointVelocity_Injected
// Il2CppName: GetRelativePointVelocity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::GetRelativePointVelocity_Injected)> {
  static const MethodInfo* get() {
    static auto* relativePoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "GetRelativePointVelocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativePoint, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::GetPointVelocity_Injected
// Il2CppName: GetPointVelocity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::GetPointVelocity_Injected)> {
  static const MethodInfo* get() {
    static auto* worldPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "GetPointVelocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPoint, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_excludeLayers_Injected
// Il2CppName: get_excludeLayers_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::LayerMask>)>(&UnityEngine::Rigidbody::get_excludeLayers_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_excludeLayers_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_excludeLayers_Injected
// Il2CppName: set_excludeLayers_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::LayerMask>)>(&UnityEngine::Rigidbody::set_excludeLayers_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_excludeLayers_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_includeLayers_Injected
// Il2CppName: get_includeLayers_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::LayerMask>)>(&UnityEngine::Rigidbody::get_includeLayers_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_includeLayers_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_includeLayers_Injected
// Il2CppName: set_includeLayers_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::LayerMask>)>(&UnityEngine::Rigidbody::set_includeLayers_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_includeLayers_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::GetAccumulatedForce_Injected
// Il2CppName: GetAccumulatedForce_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::GetAccumulatedForce_Injected)> {
  static const MethodInfo* get() {
    static auto* step = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "GetAccumulatedForce_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{step, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::GetAccumulatedTorque_Injected
// Il2CppName: GetAccumulatedTorque_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::GetAccumulatedTorque_Injected)> {
  static const MethodInfo* get() {
    static auto* step = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "GetAccumulatedTorque_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{step, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddForce_Injected
// Il2CppName: AddForce_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddForce_Injected)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddForce_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddRelativeForce_Injected
// Il2CppName: AddRelativeForce_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddRelativeForce_Injected)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddRelativeForce_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddTorque_Injected
// Il2CppName: AddTorque_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddTorque_Injected)> {
  static const MethodInfo* get() {
    static auto* torque = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddTorque_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{torque, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddRelativeTorque_Injected
// Il2CppName: AddRelativeTorque_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddRelativeTorque_Injected)> {
  static const MethodInfo* get() {
    static auto* torque = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddRelativeTorque_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{torque, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddForceAtPosition_Injected
// Il2CppName: AddForceAtPosition_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddForceAtPosition_Injected)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddForceAtPosition_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force, position, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddExplosionForce_Injected
// Il2CppName: AddExplosionForce_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, ByRef<::UnityEngine::Vector3>, float, float, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddExplosionForce_Injected)> {
  static const MethodInfo* get() {
    static auto* explosionForce = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* explosionPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* explosionRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* upwardsModifier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddExplosionForce_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{explosionForce, explosionPosition, explosionRadius, upwardsModifier, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::Internal_ClosestPointOnBounds_Injected
// Il2CppName: Internal_ClosestPointOnBounds_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<float>)>(&UnityEngine::Rigidbody::Internal_ClosestPointOnBounds_Injected)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* outPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "Internal_ClosestPointOnBounds_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, outPos, distance});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::SweepTest_Injected
// Il2CppName: SweepTest_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>, float, ::UnityEngine::QueryTriggerInteraction, ByRef<bool>, ByRef<::UnityEngine::RaycastHit>)>(&UnityEngine::Rigidbody::SweepTest_Injected)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    static auto* hasHit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "SweepTest_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, maxDistance, queryTriggerInteraction, hasHit, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::Internal_SweepTestAll_Injected
// Il2CppName: Internal_SweepTestAll_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::RaycastHit> (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>, float, ::UnityEngine::QueryTriggerInteraction)>(&UnityEngine::Rigidbody::Internal_SweepTestAll_Injected)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "Internal_SweepTestAll_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, maxDistance, queryTriggerInteraction});
  }
};
