// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IFormattable
#include "System/IFormattable.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectInt
  struct RectInt;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::RectInt, "UnityEngine", "RectInt");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.RectInt
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  struct RectInt/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::RectInt>, public ::System::IFormattable*/ {
    public:
    public:
    // private System.Int32 m_XMin
    // Size: 0x4
    // Offset: 0x0
    int m_XMin;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_YMin
    // Size: 0x4
    // Offset: 0x4
    int m_YMin;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_Width
    // Size: 0x4
    // Offset: 0x8
    int m_Width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_Height
    // Size: 0x4
    // Offset: 0xC
    int m_Height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: RectInt
    constexpr RectInt(int m_XMin_ = {}, int m_YMin_ = {}, int m_Width_ = {}, int m_Height_ = {}) noexcept : m_XMin{m_XMin_}, m_YMin{m_YMin_}, m_Width{m_Width_}, m_Height{m_Height_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::RectInt>
    operator ::System::IEquatable_1<::UnityEngine::RectInt>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::RectInt>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IFormattable
    operator ::System::IFormattable() noexcept {
      return *reinterpret_cast<::System::IFormattable*>(this);
    }
    // Get instance field reference: private System.Int32 m_XMin
    [[deprecated("Use field access instead!")]] int& dyn_m_XMin();
    // Get instance field reference: private System.Int32 m_YMin
    [[deprecated("Use field access instead!")]] int& dyn_m_YMin();
    // Get instance field reference: private System.Int32 m_Width
    [[deprecated("Use field access instead!")]] int& dyn_m_Width();
    // Get instance field reference: private System.Int32 m_Height
    [[deprecated("Use field access instead!")]] int& dyn_m_Height();
    // public System.Int32 get_x()
    // Offset: 0x5487498
    int get_x();
    // public System.Void set_x(System.Int32 value)
    // Offset: 0x54874A0
    void set_x(int value);
    // public System.Int32 get_y()
    // Offset: 0x54874A8
    int get_y();
    // public System.Void set_y(System.Int32 value)
    // Offset: 0x54874B0
    void set_y(int value);
    // public System.Int32 get_width()
    // Offset: 0x54874B8
    int get_width();
    // public System.Void set_width(System.Int32 value)
    // Offset: 0x54874C0
    void set_width(int value);
    // public System.Int32 get_height()
    // Offset: 0x54874C8
    int get_height();
    // public System.Void set_height(System.Int32 value)
    // Offset: 0x54874D0
    void set_height(int value);
    // public System.Int32 get_xMin()
    // Offset: 0x54874D8
    int get_xMin();
    // public System.Int32 get_yMin()
    // Offset: 0x548753C
    int get_yMin();
    // public System.Int32 get_xMax()
    // Offset: 0x54875A0
    int get_xMax();
    // public System.Int32 get_yMax()
    // Offset: 0x5487604
    int get_yMax();
    // public System.Void .ctor(System.Int32 xMin, System.Int32 yMin, System.Int32 width, System.Int32 height)
    // Offset: 0x5487668
    // ABORTED: conflicts with another method.  RectInt(int xMin, int yMin, int width, int height);
    // public System.Boolean Overlaps(UnityEngine.RectInt other)
    // Offset: 0x5487674
    bool Overlaps(::UnityEngine::RectInt other);
    // public System.String ToString(System.String format, System.IFormatProvider formatProvider)
    // Offset: 0x5487924
    ::StringW ToString(::StringW format, ::System::IFormatProvider* formatProvider);
    // public System.Boolean Equals(UnityEngine.RectInt other)
    // Offset: 0x5487B5C
    bool Equals(::UnityEngine::RectInt other);
    // public override System.String ToString()
    // Offset: 0x5487914
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.RectInt
  #pragma pack(pop)
  static check_size<sizeof(RectInt), 12 + sizeof(int)> __UnityEngine_RectIntSizeCheck;
  static_assert(sizeof(RectInt) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::RectInt::get_x
// Il2CppName: get_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::RectInt::*)()>(&UnityEngine::RectInt::get_x)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "get_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::RectInt::set_x
// Il2CppName: set_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RectInt::*)(int)>(&UnityEngine::RectInt::set_x)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "set_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RectInt::get_y
// Il2CppName: get_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::RectInt::*)()>(&UnityEngine::RectInt::get_y)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "get_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::RectInt::set_y
// Il2CppName: set_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RectInt::*)(int)>(&UnityEngine::RectInt::set_y)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "set_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RectInt::get_width
// Il2CppName: get_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::RectInt::*)()>(&UnityEngine::RectInt::get_width)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "get_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::RectInt::set_width
// Il2CppName: set_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RectInt::*)(int)>(&UnityEngine::RectInt::set_width)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "set_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RectInt::get_height
// Il2CppName: get_height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::RectInt::*)()>(&UnityEngine::RectInt::get_height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "get_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::RectInt::set_height
// Il2CppName: set_height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::RectInt::*)(int)>(&UnityEngine::RectInt::set_height)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "set_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::RectInt::get_xMin
// Il2CppName: get_xMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::RectInt::*)()>(&UnityEngine::RectInt::get_xMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "get_xMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::RectInt::get_yMin
// Il2CppName: get_yMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::RectInt::*)()>(&UnityEngine::RectInt::get_yMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "get_yMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::RectInt::get_xMax
// Il2CppName: get_xMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::RectInt::*)()>(&UnityEngine::RectInt::get_xMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "get_xMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::RectInt::get_yMax
// Il2CppName: get_yMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::RectInt::*)()>(&UnityEngine::RectInt::get_yMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "get_yMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::RectInt::RectInt
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::RectInt::Overlaps
// Il2CppName: Overlaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::RectInt::*)(::UnityEngine::RectInt)>(&UnityEngine::RectInt::Overlaps)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectInt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "Overlaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::RectInt::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::RectInt::*)(::StringW, ::System::IFormatProvider*)>(&UnityEngine::RectInt::ToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* formatProvider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, formatProvider});
  }
};
// Writing MetadataGetter for method: UnityEngine::RectInt::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::RectInt::*)(::UnityEngine::RectInt)>(&UnityEngine::RectInt::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectInt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::RectInt::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::RectInt::*)()>(&UnityEngine::RectInt::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::RectInt), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
