// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.SecondarySpriteTexture
#include "UnityEngine/SecondarySpriteTexture.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rect
  struct Rect;
  // Forward declaring type: Vector4
  struct Vector4;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: SpriteMeshType
  struct SpriteMeshType;
  // Forward declaring type: Bounds
  struct Bounds;
  // Forward declaring type: SpritePackingMode
  struct SpritePackingMode;
  // Forward declaring type: SpritePackingRotation
  struct SpritePackingRotation;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Sprite);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Sprite*, "UnityEngine", "Sprite");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Sprite
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeTypeAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [ExcludeFromPresetAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  class Sprite : public ::UnityEngine::Object {
    public:
    // System.Int32 GetPackingMode()
    // Offset: 0x54D4CEC
    int GetPackingMode();
    // System.Int32 GetPackingRotation()
    // Offset: 0x54D4D28
    int GetPackingRotation();
    // System.Int32 GetPacked()
    // Offset: 0x54D4D64
    int GetPacked();
    // UnityEngine.Rect GetTextureRect()
    // Offset: 0x54D4DA0
    ::UnityEngine::Rect GetTextureRect();
    // UnityEngine.Vector2 GetTextureRectOffset()
    // Offset: 0x54D4E3C
    ::UnityEngine::Vector2 GetTextureRectOffset();
    // UnityEngine.Vector4 GetInnerUVs()
    // Offset: 0x54D4ECC
    ::UnityEngine::Vector4 GetInnerUVs();
    // UnityEngine.Vector4 GetOuterUVs()
    // Offset: 0x54D4F68
    ::UnityEngine::Vector4 GetOuterUVs();
    // UnityEngine.Vector4 GetPadding()
    // Offset: 0x54D5004
    ::UnityEngine::Vector4 GetPadding();
    // static UnityEngine.Sprite CreateSpriteWithoutTextureScripting(UnityEngine.Rect rect, UnityEngine.Vector2 pivot, System.Single pixelsToUnits, UnityEngine.Texture2D texture)
    // Offset: 0x54D50A0
    static ::UnityEngine::Sprite* CreateSpriteWithoutTextureScripting(::UnityEngine::Rect rect, ::UnityEngine::Vector2 pivot, float pixelsToUnits, ::UnityEngine::Texture2D* texture);
    // static UnityEngine.Sprite CreateSprite(UnityEngine.Texture2D texture, UnityEngine.Rect rect, UnityEngine.Vector2 pivot, System.Single pixelsPerUnit, System.UInt32 extrude, UnityEngine.SpriteMeshType meshType, UnityEngine.Vector4 border, System.Boolean generateFallbackPhysicsShape, UnityEngine.SecondarySpriteTexture[] secondaryTexture)
    // Offset: 0x54D5170
    static ::UnityEngine::Sprite* CreateSprite(::UnityEngine::Texture2D* texture, ::UnityEngine::Rect rect, ::UnityEngine::Vector2 pivot, float pixelsPerUnit, uint extrude, ::UnityEngine::SpriteMeshType meshType, ::UnityEngine::Vector4 border, bool generateFallbackPhysicsShape, ::ArrayW<::UnityEngine::SecondarySpriteTexture> secondaryTexture);
    // public UnityEngine.Bounds get_bounds()
    // Offset: 0x54D52B4
    ::UnityEngine::Bounds get_bounds();
    // public UnityEngine.Rect get_rect()
    // Offset: 0x54D5360
    ::UnityEngine::Rect get_rect();
    // public UnityEngine.Vector4 get_border()
    // Offset: 0x54D53FC
    ::UnityEngine::Vector4 get_border();
    // public UnityEngine.Texture2D get_texture()
    // Offset: 0x54D5498
    ::UnityEngine::Texture2D* get_texture();
    // UnityEngine.Texture2D GetSecondaryTexture(System.Int32 index)
    // Offset: 0x54D54D4
    ::UnityEngine::Texture2D* GetSecondaryTexture(int index);
    // public System.Int32 GetSecondaryTextureCount()
    // Offset: 0x54D5518
    int GetSecondaryTextureCount();
    // public System.Int32 GetSecondaryTextures(UnityEngine.SecondarySpriteTexture[] secondaryTexture)
    // Offset: 0x54D5554
    int GetSecondaryTextures(::ArrayW<::UnityEngine::SecondarySpriteTexture> secondaryTexture);
    // public System.Single get_pixelsPerUnit()
    // Offset: 0x54D5598
    float get_pixelsPerUnit();
    // public System.Single get_spriteAtlasTextureScale()
    // Offset: 0x54D55D4
    float get_spriteAtlasTextureScale();
    // public UnityEngine.Texture2D get_associatedAlphaSplitTexture()
    // Offset: 0x54D5610
    ::UnityEngine::Texture2D* get_associatedAlphaSplitTexture();
    // public UnityEngine.Vector2 get_pivot()
    // Offset: 0x54D564C
    ::UnityEngine::Vector2 get_pivot();
    // public System.Boolean get_packed()
    // Offset: 0x54D56DC
    bool get_packed();
    // public UnityEngine.SpritePackingMode get_packingMode()
    // Offset: 0x54D5724
    ::UnityEngine::SpritePackingMode get_packingMode();
    // public UnityEngine.SpritePackingRotation get_packingRotation()
    // Offset: 0x54D5760
    ::UnityEngine::SpritePackingRotation get_packingRotation();
    // public UnityEngine.Rect get_textureRect()
    // Offset: 0x54D579C
    ::UnityEngine::Rect get_textureRect();
    // public UnityEngine.Vector2 get_textureRectOffset()
    // Offset: 0x54D57A0
    ::UnityEngine::Vector2 get_textureRectOffset();
    // public UnityEngine.Vector2[] get_vertices()
    // Offset: 0x54D57A4
    ::ArrayW<::UnityEngine::Vector2> get_vertices();
    // public System.UInt16[] get_triangles()
    // Offset: 0x54D57E0
    ::ArrayW<uint16_t> get_triangles();
    // public UnityEngine.Vector2[] get_uv()
    // Offset: 0x54D581C
    ::ArrayW<::UnityEngine::Vector2> get_uv();
    // public System.Int32 GetPhysicsShapeCount()
    // Offset: 0x54D5858
    int GetPhysicsShapeCount();
    // public System.Int32 GetPhysicsShapePointCount(System.Int32 shapeIdx)
    // Offset: 0x54D5894
    int GetPhysicsShapePointCount(int shapeIdx);
    // private System.Int32 Internal_GetPhysicsShapePointCount(System.Int32 shapeIdx)
    // Offset: 0x54D59AC
    int Internal_GetPhysicsShapePointCount(int shapeIdx);
    // public System.Int32 GetPhysicsShape(System.Int32 shapeIdx, System.Collections.Generic.List`1<UnityEngine.Vector2> physicsShape)
    // Offset: 0x54D59F0
    int GetPhysicsShape(int shapeIdx, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* physicsShape);
    // static private System.Void GetPhysicsShapeImpl(UnityEngine.Sprite sprite, System.Int32 shapeIdx, System.Collections.Generic.List`1<UnityEngine.Vector2> physicsShape)
    // Offset: 0x54D5B40
    static void GetPhysicsShapeImpl(::UnityEngine::Sprite* sprite, int shapeIdx, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* physicsShape);
    // public System.Void OverridePhysicsShape(System.Collections.Generic.IList`1<UnityEngine.Vector2[]> physicsShapes)
    // Offset: 0x54D5B94
    void OverridePhysicsShape(::System::Collections::Generic::IList_1<::ArrayW<::UnityEngine::Vector2>>* physicsShapes);
    // static private System.Void OverridePhysicsShapeCount(UnityEngine.Sprite sprite, System.Int32 physicsShapeCount)
    // Offset: 0x54D5FC8
    static void OverridePhysicsShapeCount(::UnityEngine::Sprite* sprite, int physicsShapeCount);
    // static private System.Void OverridePhysicsShape(UnityEngine.Sprite sprite, UnityEngine.Vector2[] physicsShape, System.Int32 idx)
    // Offset: 0x54D600C
    static void OverridePhysicsShape(::UnityEngine::Sprite* sprite, ::ArrayW<::UnityEngine::Vector2> physicsShape, int idx);
    // public System.Void OverrideGeometry(UnityEngine.Vector2[] vertices, System.UInt16[] triangles)
    // Offset: 0x54D6060
    void OverrideGeometry(::ArrayW<::UnityEngine::Vector2> vertices, ::ArrayW<uint16_t> triangles);
    // static UnityEngine.Sprite Create(UnityEngine.Rect rect, UnityEngine.Vector2 pivot, System.Single pixelsToUnits, UnityEngine.Texture2D texture)
    // Offset: 0x54D60B4
    static ::UnityEngine::Sprite* Create(::UnityEngine::Rect rect, ::UnityEngine::Vector2 pivot, float pixelsToUnits, ::UnityEngine::Texture2D* texture);
    // static UnityEngine.Sprite Create(UnityEngine.Rect rect, UnityEngine.Vector2 pivot, System.Single pixelsToUnits)
    // Offset: 0x54D60B8
    static ::UnityEngine::Sprite* Create(::UnityEngine::Rect rect, ::UnityEngine::Vector2 pivot, float pixelsToUnits);
    // static public UnityEngine.Sprite Create(UnityEngine.Texture2D texture, UnityEngine.Rect rect, UnityEngine.Vector2 pivot, System.Single pixelsPerUnit, System.UInt32 extrude, UnityEngine.SpriteMeshType meshType, UnityEngine.Vector4 border, System.Boolean generateFallbackPhysicsShape)
    // Offset: 0x54D60C0
    static ::UnityEngine::Sprite* Create(::UnityEngine::Texture2D* texture, ::UnityEngine::Rect rect, ::UnityEngine::Vector2 pivot, float pixelsPerUnit, uint extrude, ::UnityEngine::SpriteMeshType meshType, ::UnityEngine::Vector4 border, bool generateFallbackPhysicsShape);
    // static public UnityEngine.Sprite Create(UnityEngine.Texture2D texture, UnityEngine.Rect rect, UnityEngine.Vector2 pivot, System.Single pixelsPerUnit, System.UInt32 extrude, UnityEngine.SpriteMeshType meshType, UnityEngine.Vector4 border, System.Boolean generateFallbackPhysicsShape, UnityEngine.SecondarySpriteTexture[] secondaryTextures)
    // Offset: 0x54D60D4
    static ::UnityEngine::Sprite* Create(::UnityEngine::Texture2D* texture, ::UnityEngine::Rect rect, ::UnityEngine::Vector2 pivot, float pixelsPerUnit, uint extrude, ::UnityEngine::SpriteMeshType meshType, ::UnityEngine::Vector4 border, bool generateFallbackPhysicsShape, ::ArrayW<::UnityEngine::SecondarySpriteTexture> secondaryTextures);
    // static public UnityEngine.Sprite Create(UnityEngine.Texture2D texture, UnityEngine.Rect rect, UnityEngine.Vector2 pivot, System.Single pixelsPerUnit, System.UInt32 extrude, UnityEngine.SpriteMeshType meshType, UnityEngine.Vector4 border)
    // Offset: 0x54D6558
    static ::UnityEngine::Sprite* Create(::UnityEngine::Texture2D* texture, ::UnityEngine::Rect rect, ::UnityEngine::Vector2 pivot, float pixelsPerUnit, uint extrude, ::UnityEngine::SpriteMeshType meshType, ::UnityEngine::Vector4 border);
    // static public UnityEngine.Sprite Create(UnityEngine.Texture2D texture, UnityEngine.Rect rect, UnityEngine.Vector2 pivot, System.Single pixelsPerUnit, System.UInt32 extrude, UnityEngine.SpriteMeshType meshType)
    // Offset: 0x54D656C
    static ::UnityEngine::Sprite* Create(::UnityEngine::Texture2D* texture, ::UnityEngine::Rect rect, ::UnityEngine::Vector2 pivot, float pixelsPerUnit, uint extrude, ::UnityEngine::SpriteMeshType meshType);
    // static public UnityEngine.Sprite Create(UnityEngine.Texture2D texture, UnityEngine.Rect rect, UnityEngine.Vector2 pivot, System.Single pixelsPerUnit, System.UInt32 extrude)
    // Offset: 0x54D6654
    static ::UnityEngine::Sprite* Create(::UnityEngine::Texture2D* texture, ::UnityEngine::Rect rect, ::UnityEngine::Vector2 pivot, float pixelsPerUnit, uint extrude);
    // static public UnityEngine.Sprite Create(UnityEngine.Texture2D texture, UnityEngine.Rect rect, UnityEngine.Vector2 pivot, System.Single pixelsPerUnit)
    // Offset: 0x54D665C
    static ::UnityEngine::Sprite* Create(::UnityEngine::Texture2D* texture, ::UnityEngine::Rect rect, ::UnityEngine::Vector2 pivot, float pixelsPerUnit);
    // static public UnityEngine.Sprite Create(UnityEngine.Texture2D texture, UnityEngine.Rect rect, UnityEngine.Vector2 pivot)
    // Offset: 0x54D6668
    static ::UnityEngine::Sprite* Create(::UnityEngine::Texture2D* texture, ::UnityEngine::Rect rect, ::UnityEngine::Vector2 pivot);
    // private System.Void GetTextureRect_Injected(out UnityEngine.Rect ret)
    // Offset: 0x54D4DF8
    void GetTextureRect_Injected(ByRef<::UnityEngine::Rect> ret);
    // private System.Void GetTextureRectOffset_Injected(out UnityEngine.Vector2 ret)
    // Offset: 0x54D4E88
    void GetTextureRectOffset_Injected(ByRef<::UnityEngine::Vector2> ret);
    // private System.Void GetInnerUVs_Injected(out UnityEngine.Vector4 ret)
    // Offset: 0x54D4F24
    void GetInnerUVs_Injected(ByRef<::UnityEngine::Vector4> ret);
    // private System.Void GetOuterUVs_Injected(out UnityEngine.Vector4 ret)
    // Offset: 0x54D4FC0
    void GetOuterUVs_Injected(ByRef<::UnityEngine::Vector4> ret);
    // private System.Void GetPadding_Injected(out UnityEngine.Vector4 ret)
    // Offset: 0x54D505C
    void GetPadding_Injected(ByRef<::UnityEngine::Vector4> ret);
    // static private UnityEngine.Sprite CreateSpriteWithoutTextureScripting_Injected(ref UnityEngine.Rect rect, ref UnityEngine.Vector2 pivot, System.Single pixelsToUnits, UnityEngine.Texture2D texture)
    // Offset: 0x54D510C
    static ::UnityEngine::Sprite* CreateSpriteWithoutTextureScripting_Injected(ByRef<::UnityEngine::Rect> rect, ByRef<::UnityEngine::Vector2> pivot, float pixelsToUnits, ::UnityEngine::Texture2D* texture);
    // static private UnityEngine.Sprite CreateSprite_Injected(UnityEngine.Texture2D texture, ref UnityEngine.Rect rect, ref UnityEngine.Vector2 pivot, System.Single pixelsPerUnit, System.UInt32 extrude, UnityEngine.SpriteMeshType meshType, ref UnityEngine.Vector4 border, System.Boolean generateFallbackPhysicsShape, UnityEngine.SecondarySpriteTexture[] secondaryTexture)
    // Offset: 0x54D5218
    static ::UnityEngine::Sprite* CreateSprite_Injected(::UnityEngine::Texture2D* texture, ByRef<::UnityEngine::Rect> rect, ByRef<::UnityEngine::Vector2> pivot, float pixelsPerUnit, uint extrude, ::UnityEngine::SpriteMeshType meshType, ByRef<::UnityEngine::Vector4> border, bool generateFallbackPhysicsShape, ::ArrayW<::UnityEngine::SecondarySpriteTexture> secondaryTexture);
    // private System.Void get_bounds_Injected(out UnityEngine.Bounds ret)
    // Offset: 0x54D531C
    void get_bounds_Injected(ByRef<::UnityEngine::Bounds> ret);
    // private System.Void get_rect_Injected(out UnityEngine.Rect ret)
    // Offset: 0x54D53B8
    void get_rect_Injected(ByRef<::UnityEngine::Rect> ret);
    // private System.Void get_border_Injected(out UnityEngine.Vector4 ret)
    // Offset: 0x54D5454
    void get_border_Injected(ByRef<::UnityEngine::Vector4> ret);
    // private System.Void get_pivot_Injected(out UnityEngine.Vector2 ret)
    // Offset: 0x54D5698
    void get_pivot_Injected(ByRef<::UnityEngine::Vector2> ret);
    // private System.Void .ctor()
    // Offset: 0x54D4C94
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Sprite* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Sprite::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Sprite*, creationType>()));
    }
  }; // UnityEngine.Sprite
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Sprite::GetPackingMode
// Il2CppName: GetPackingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::GetPackingMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetPackingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetPackingRotation
// Il2CppName: GetPackingRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::GetPackingRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetPackingRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetPacked
// Il2CppName: GetPacked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::GetPacked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetPacked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetTextureRect
// Il2CppName: GetTextureRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::GetTextureRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetTextureRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetTextureRectOffset
// Il2CppName: GetTextureRectOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::GetTextureRectOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetTextureRectOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetInnerUVs
// Il2CppName: GetInnerUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::GetInnerUVs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetInnerUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetOuterUVs
// Il2CppName: GetOuterUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::GetOuterUVs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetOuterUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetPadding
// Il2CppName: GetPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::GetPadding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::CreateSpriteWithoutTextureScripting
// Il2CppName: CreateSpriteWithoutTextureScripting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (*)(::UnityEngine::Rect, ::UnityEngine::Vector2, float, ::UnityEngine::Texture2D*)>(&UnityEngine::Sprite::CreateSpriteWithoutTextureScripting)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* pixelsToUnits = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "CreateSpriteWithoutTextureScripting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, pivot, pixelsToUnits, texture});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::CreateSprite
// Il2CppName: CreateSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (*)(::UnityEngine::Texture2D*, ::UnityEngine::Rect, ::UnityEngine::Vector2, float, uint, ::UnityEngine::SpriteMeshType, ::UnityEngine::Vector4, bool, ::ArrayW<::UnityEngine::SecondarySpriteTexture>)>(&UnityEngine::Sprite::CreateSprite)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* pixelsPerUnit = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* extrude = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* meshType = &::il2cpp_utils::GetClassFromName("UnityEngine", "SpriteMeshType")->byval_arg;
    static auto* border = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* generateFallbackPhysicsShape = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* secondaryTexture = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "SecondarySpriteTexture"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "CreateSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, rect, pivot, pixelsPerUnit, extrude, meshType, border, generateFallbackPhysicsShape, secondaryTexture});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_bounds
// Il2CppName: get_bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_bounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_rect
// Il2CppName: get_rect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_rect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_rect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_border
// Il2CppName: get_border
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_border)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_border", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_texture
// Il2CppName: get_texture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_texture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_texture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetSecondaryTexture
// Il2CppName: GetSecondaryTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (UnityEngine::Sprite::*)(int)>(&UnityEngine::Sprite::GetSecondaryTexture)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetSecondaryTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetSecondaryTextureCount
// Il2CppName: GetSecondaryTextureCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::GetSecondaryTextureCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetSecondaryTextureCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetSecondaryTextures
// Il2CppName: GetSecondaryTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Sprite::*)(::ArrayW<::UnityEngine::SecondarySpriteTexture>)>(&UnityEngine::Sprite::GetSecondaryTextures)> {
  static const MethodInfo* get() {
    static auto* secondaryTexture = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "SecondarySpriteTexture"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetSecondaryTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{secondaryTexture});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_pixelsPerUnit
// Il2CppName: get_pixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_pixelsPerUnit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_pixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_spriteAtlasTextureScale
// Il2CppName: get_spriteAtlasTextureScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_spriteAtlasTextureScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_spriteAtlasTextureScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_associatedAlphaSplitTexture
// Il2CppName: get_associatedAlphaSplitTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_associatedAlphaSplitTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_associatedAlphaSplitTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_pivot
// Il2CppName: get_pivot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_pivot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_pivot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_packed
// Il2CppName: get_packed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_packed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_packed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_packingMode
// Il2CppName: get_packingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SpritePackingMode (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_packingMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_packingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_packingRotation
// Il2CppName: get_packingRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SpritePackingRotation (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_packingRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_packingRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_textureRect
// Il2CppName: get_textureRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_textureRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_textureRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_textureRectOffset
// Il2CppName: get_textureRectOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_textureRectOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_textureRectOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_vertices
// Il2CppName: get_vertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector2> (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_vertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_vertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_triangles
// Il2CppName: get_triangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint16_t> (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_triangles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_triangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_uv
// Il2CppName: get_uv
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector2> (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::get_uv)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_uv", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetPhysicsShapeCount
// Il2CppName: GetPhysicsShapeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Sprite::*)()>(&UnityEngine::Sprite::GetPhysicsShapeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetPhysicsShapeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetPhysicsShapePointCount
// Il2CppName: GetPhysicsShapePointCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Sprite::*)(int)>(&UnityEngine::Sprite::GetPhysicsShapePointCount)> {
  static const MethodInfo* get() {
    static auto* shapeIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetPhysicsShapePointCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shapeIdx});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::Internal_GetPhysicsShapePointCount
// Il2CppName: Internal_GetPhysicsShapePointCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Sprite::*)(int)>(&UnityEngine::Sprite::Internal_GetPhysicsShapePointCount)> {
  static const MethodInfo* get() {
    static auto* shapeIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "Internal_GetPhysicsShapePointCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shapeIdx});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetPhysicsShape
// Il2CppName: GetPhysicsShape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Sprite::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>*)>(&UnityEngine::Sprite::GetPhysicsShape)> {
  static const MethodInfo* get() {
    static auto* shapeIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* physicsShape = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetPhysicsShape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shapeIdx, physicsShape});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetPhysicsShapeImpl
// Il2CppName: GetPhysicsShapeImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Sprite*, int, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>*)>(&UnityEngine::Sprite::GetPhysicsShapeImpl)> {
  static const MethodInfo* get() {
    static auto* sprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    static auto* shapeIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* physicsShape = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetPhysicsShapeImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sprite, shapeIdx, physicsShape});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::OverridePhysicsShape
// Il2CppName: OverridePhysicsShape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Sprite::*)(::System::Collections::Generic::IList_1<::ArrayW<::UnityEngine::Vector2>>*)>(&UnityEngine::Sprite::OverridePhysicsShape)> {
  static const MethodInfo* get() {
    static auto* physicsShapes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "OverridePhysicsShape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsShapes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::OverridePhysicsShapeCount
// Il2CppName: OverridePhysicsShapeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Sprite*, int)>(&UnityEngine::Sprite::OverridePhysicsShapeCount)> {
  static const MethodInfo* get() {
    static auto* sprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    static auto* physicsShapeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "OverridePhysicsShapeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sprite, physicsShapeCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::OverridePhysicsShape
// Il2CppName: OverridePhysicsShape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Sprite*, ::ArrayW<::UnityEngine::Vector2>, int)>(&UnityEngine::Sprite::OverridePhysicsShape)> {
  static const MethodInfo* get() {
    static auto* sprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    static auto* physicsShape = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "OverridePhysicsShape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sprite, physicsShape, idx});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::OverrideGeometry
// Il2CppName: OverrideGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Sprite::*)(::ArrayW<::UnityEngine::Vector2>, ::ArrayW<uint16_t>)>(&UnityEngine::Sprite::OverrideGeometry)> {
  static const MethodInfo* get() {
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "OverrideGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, triangles});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (*)(::UnityEngine::Rect, ::UnityEngine::Vector2, float, ::UnityEngine::Texture2D*)>(&UnityEngine::Sprite::Create)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* pixelsToUnits = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, pivot, pixelsToUnits, texture});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (*)(::UnityEngine::Rect, ::UnityEngine::Vector2, float)>(&UnityEngine::Sprite::Create)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* pixelsToUnits = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, pivot, pixelsToUnits});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (*)(::UnityEngine::Texture2D*, ::UnityEngine::Rect, ::UnityEngine::Vector2, float, uint, ::UnityEngine::SpriteMeshType, ::UnityEngine::Vector4, bool)>(&UnityEngine::Sprite::Create)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* pixelsPerUnit = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* extrude = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* meshType = &::il2cpp_utils::GetClassFromName("UnityEngine", "SpriteMeshType")->byval_arg;
    static auto* border = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* generateFallbackPhysicsShape = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, rect, pivot, pixelsPerUnit, extrude, meshType, border, generateFallbackPhysicsShape});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (*)(::UnityEngine::Texture2D*, ::UnityEngine::Rect, ::UnityEngine::Vector2, float, uint, ::UnityEngine::SpriteMeshType, ::UnityEngine::Vector4, bool, ::ArrayW<::UnityEngine::SecondarySpriteTexture>)>(&UnityEngine::Sprite::Create)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* pixelsPerUnit = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* extrude = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* meshType = &::il2cpp_utils::GetClassFromName("UnityEngine", "SpriteMeshType")->byval_arg;
    static auto* border = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* generateFallbackPhysicsShape = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* secondaryTextures = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "SecondarySpriteTexture"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, rect, pivot, pixelsPerUnit, extrude, meshType, border, generateFallbackPhysicsShape, secondaryTextures});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (*)(::UnityEngine::Texture2D*, ::UnityEngine::Rect, ::UnityEngine::Vector2, float, uint, ::UnityEngine::SpriteMeshType, ::UnityEngine::Vector4)>(&UnityEngine::Sprite::Create)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* pixelsPerUnit = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* extrude = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* meshType = &::il2cpp_utils::GetClassFromName("UnityEngine", "SpriteMeshType")->byval_arg;
    static auto* border = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, rect, pivot, pixelsPerUnit, extrude, meshType, border});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (*)(::UnityEngine::Texture2D*, ::UnityEngine::Rect, ::UnityEngine::Vector2, float, uint, ::UnityEngine::SpriteMeshType)>(&UnityEngine::Sprite::Create)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* pixelsPerUnit = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* extrude = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* meshType = &::il2cpp_utils::GetClassFromName("UnityEngine", "SpriteMeshType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, rect, pivot, pixelsPerUnit, extrude, meshType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (*)(::UnityEngine::Texture2D*, ::UnityEngine::Rect, ::UnityEngine::Vector2, float, uint)>(&UnityEngine::Sprite::Create)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* pixelsPerUnit = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* extrude = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, rect, pivot, pixelsPerUnit, extrude});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (*)(::UnityEngine::Texture2D*, ::UnityEngine::Rect, ::UnityEngine::Vector2, float)>(&UnityEngine::Sprite::Create)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* pixelsPerUnit = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, rect, pivot, pixelsPerUnit});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (*)(::UnityEngine::Texture2D*, ::UnityEngine::Rect, ::UnityEngine::Vector2)>(&UnityEngine::Sprite::Create)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, rect, pivot});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetTextureRect_Injected
// Il2CppName: GetTextureRect_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Sprite::*)(ByRef<::UnityEngine::Rect>)>(&UnityEngine::Sprite::GetTextureRect_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetTextureRect_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetTextureRectOffset_Injected
// Il2CppName: GetTextureRectOffset_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Sprite::*)(ByRef<::UnityEngine::Vector2>)>(&UnityEngine::Sprite::GetTextureRectOffset_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetTextureRectOffset_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetInnerUVs_Injected
// Il2CppName: GetInnerUVs_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Sprite::*)(ByRef<::UnityEngine::Vector4>)>(&UnityEngine::Sprite::GetInnerUVs_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetInnerUVs_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetOuterUVs_Injected
// Il2CppName: GetOuterUVs_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Sprite::*)(ByRef<::UnityEngine::Vector4>)>(&UnityEngine::Sprite::GetOuterUVs_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetOuterUVs_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::GetPadding_Injected
// Il2CppName: GetPadding_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Sprite::*)(ByRef<::UnityEngine::Vector4>)>(&UnityEngine::Sprite::GetPadding_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "GetPadding_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::CreateSpriteWithoutTextureScripting_Injected
// Il2CppName: CreateSpriteWithoutTextureScripting_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (*)(ByRef<::UnityEngine::Rect>, ByRef<::UnityEngine::Vector2>, float, ::UnityEngine::Texture2D*)>(&UnityEngine::Sprite::CreateSpriteWithoutTextureScripting_Injected)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* pixelsToUnits = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "CreateSpriteWithoutTextureScripting_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, pivot, pixelsToUnits, texture});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::CreateSprite_Injected
// Il2CppName: CreateSprite_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (*)(::UnityEngine::Texture2D*, ByRef<::UnityEngine::Rect>, ByRef<::UnityEngine::Vector2>, float, uint, ::UnityEngine::SpriteMeshType, ByRef<::UnityEngine::Vector4>, bool, ::ArrayW<::UnityEngine::SecondarySpriteTexture>)>(&UnityEngine::Sprite::CreateSprite_Injected)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* pixelsPerUnit = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* extrude = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* meshType = &::il2cpp_utils::GetClassFromName("UnityEngine", "SpriteMeshType")->byval_arg;
    static auto* border = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* generateFallbackPhysicsShape = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* secondaryTexture = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "SecondarySpriteTexture"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "CreateSprite_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, rect, pivot, pixelsPerUnit, extrude, meshType, border, generateFallbackPhysicsShape, secondaryTexture});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_bounds_Injected
// Il2CppName: get_bounds_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Sprite::*)(ByRef<::UnityEngine::Bounds>)>(&UnityEngine::Sprite::get_bounds_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_bounds_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_rect_Injected
// Il2CppName: get_rect_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Sprite::*)(ByRef<::UnityEngine::Rect>)>(&UnityEngine::Sprite::get_rect_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_rect_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_border_Injected
// Il2CppName: get_border_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Sprite::*)(ByRef<::UnityEngine::Vector4>)>(&UnityEngine::Sprite::get_border_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_border_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::get_pivot_Injected
// Il2CppName: get_pivot_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Sprite::*)(ByRef<::UnityEngine::Vector2>)>(&UnityEngine::Sprite::get_pivot_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Sprite*), "get_pivot_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Sprite::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
