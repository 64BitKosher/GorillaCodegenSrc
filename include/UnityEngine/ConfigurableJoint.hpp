// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Joint
#include "UnityEngine/Joint.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: ConfigurableJointMotion
  struct ConfigurableJointMotion;
  // Forward declaring type: SoftJointLimitSpring
  struct SoftJointLimitSpring;
  // Forward declaring type: SoftJointLimit
  struct SoftJointLimit;
  // Forward declaring type: JointDrive
  struct JointDrive;
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: RotationDriveMode
  struct RotationDriveMode;
  // Forward declaring type: JointProjectionMode
  struct JointProjectionMode;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ConfigurableJoint
  class ConfigurableJoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::ConfigurableJoint);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ConfigurableJoint*, "UnityEngine", "ConfigurableJoint");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ConfigurableJoint
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeClassAttribute] Offset: FFFFFFFF
  class ConfigurableJoint : public ::UnityEngine::Joint {
    public:
    // public UnityEngine.Vector3 get_secondaryAxis()
    // Offset: 0x5532DB0
    ::UnityEngine::Vector3 get_secondaryAxis();
    // public System.Void set_secondaryAxis(UnityEngine.Vector3 value)
    // Offset: 0x5532E50
    void set_secondaryAxis(::UnityEngine::Vector3 value);
    // public UnityEngine.ConfigurableJointMotion get_xMotion()
    // Offset: 0x5532EE8
    ::UnityEngine::ConfigurableJointMotion get_xMotion();
    // public System.Void set_xMotion(UnityEngine.ConfigurableJointMotion value)
    // Offset: 0x5532F24
    void set_xMotion(::UnityEngine::ConfigurableJointMotion value);
    // public UnityEngine.ConfigurableJointMotion get_yMotion()
    // Offset: 0x5532F68
    ::UnityEngine::ConfigurableJointMotion get_yMotion();
    // public System.Void set_yMotion(UnityEngine.ConfigurableJointMotion value)
    // Offset: 0x5532FA4
    void set_yMotion(::UnityEngine::ConfigurableJointMotion value);
    // public UnityEngine.ConfigurableJointMotion get_zMotion()
    // Offset: 0x5532FE8
    ::UnityEngine::ConfigurableJointMotion get_zMotion();
    // public System.Void set_zMotion(UnityEngine.ConfigurableJointMotion value)
    // Offset: 0x5533024
    void set_zMotion(::UnityEngine::ConfigurableJointMotion value);
    // public UnityEngine.ConfigurableJointMotion get_angularXMotion()
    // Offset: 0x5533068
    ::UnityEngine::ConfigurableJointMotion get_angularXMotion();
    // public System.Void set_angularXMotion(UnityEngine.ConfigurableJointMotion value)
    // Offset: 0x55330A4
    void set_angularXMotion(::UnityEngine::ConfigurableJointMotion value);
    // public UnityEngine.ConfigurableJointMotion get_angularYMotion()
    // Offset: 0x55330E8
    ::UnityEngine::ConfigurableJointMotion get_angularYMotion();
    // public System.Void set_angularYMotion(UnityEngine.ConfigurableJointMotion value)
    // Offset: 0x5533124
    void set_angularYMotion(::UnityEngine::ConfigurableJointMotion value);
    // public UnityEngine.ConfigurableJointMotion get_angularZMotion()
    // Offset: 0x5533168
    ::UnityEngine::ConfigurableJointMotion get_angularZMotion();
    // public System.Void set_angularZMotion(UnityEngine.ConfigurableJointMotion value)
    // Offset: 0x55331A4
    void set_angularZMotion(::UnityEngine::ConfigurableJointMotion value);
    // public UnityEngine.SoftJointLimitSpring get_linearLimitSpring()
    // Offset: 0x55331E8
    ::UnityEngine::SoftJointLimitSpring get_linearLimitSpring();
    // public System.Void set_linearLimitSpring(UnityEngine.SoftJointLimitSpring value)
    // Offset: 0x5533278
    void set_linearLimitSpring(::UnityEngine::SoftJointLimitSpring value);
    // public UnityEngine.SoftJointLimitSpring get_angularXLimitSpring()
    // Offset: 0x5533304
    ::UnityEngine::SoftJointLimitSpring get_angularXLimitSpring();
    // public System.Void set_angularXLimitSpring(UnityEngine.SoftJointLimitSpring value)
    // Offset: 0x5533394
    void set_angularXLimitSpring(::UnityEngine::SoftJointLimitSpring value);
    // public UnityEngine.SoftJointLimitSpring get_angularYZLimitSpring()
    // Offset: 0x5533420
    ::UnityEngine::SoftJointLimitSpring get_angularYZLimitSpring();
    // public System.Void set_angularYZLimitSpring(UnityEngine.SoftJointLimitSpring value)
    // Offset: 0x55334B0
    void set_angularYZLimitSpring(::UnityEngine::SoftJointLimitSpring value);
    // public UnityEngine.SoftJointLimit get_linearLimit()
    // Offset: 0x553353C
    ::UnityEngine::SoftJointLimit get_linearLimit();
    // public System.Void set_linearLimit(UnityEngine.SoftJointLimit value)
    // Offset: 0x55335DC
    void set_linearLimit(::UnityEngine::SoftJointLimit value);
    // public UnityEngine.SoftJointLimit get_lowAngularXLimit()
    // Offset: 0x5533674
    ::UnityEngine::SoftJointLimit get_lowAngularXLimit();
    // public System.Void set_lowAngularXLimit(UnityEngine.SoftJointLimit value)
    // Offset: 0x5533714
    void set_lowAngularXLimit(::UnityEngine::SoftJointLimit value);
    // public UnityEngine.SoftJointLimit get_highAngularXLimit()
    // Offset: 0x55337AC
    ::UnityEngine::SoftJointLimit get_highAngularXLimit();
    // public System.Void set_highAngularXLimit(UnityEngine.SoftJointLimit value)
    // Offset: 0x553384C
    void set_highAngularXLimit(::UnityEngine::SoftJointLimit value);
    // public UnityEngine.SoftJointLimit get_angularYLimit()
    // Offset: 0x55338E4
    ::UnityEngine::SoftJointLimit get_angularYLimit();
    // public System.Void set_angularYLimit(UnityEngine.SoftJointLimit value)
    // Offset: 0x5533984
    void set_angularYLimit(::UnityEngine::SoftJointLimit value);
    // public UnityEngine.SoftJointLimit get_angularZLimit()
    // Offset: 0x5533A1C
    ::UnityEngine::SoftJointLimit get_angularZLimit();
    // public System.Void set_angularZLimit(UnityEngine.SoftJointLimit value)
    // Offset: 0x5533ABC
    void set_angularZLimit(::UnityEngine::SoftJointLimit value);
    // public UnityEngine.Vector3 get_targetPosition()
    // Offset: 0x5533B54
    ::UnityEngine::Vector3 get_targetPosition();
    // public System.Void set_targetPosition(UnityEngine.Vector3 value)
    // Offset: 0x5533BF4
    void set_targetPosition(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_targetVelocity()
    // Offset: 0x5533C8C
    ::UnityEngine::Vector3 get_targetVelocity();
    // public System.Void set_targetVelocity(UnityEngine.Vector3 value)
    // Offset: 0x5533D2C
    void set_targetVelocity(::UnityEngine::Vector3 value);
    // public UnityEngine.JointDrive get_xDrive()
    // Offset: 0x5533DC4
    ::UnityEngine::JointDrive get_xDrive();
    // public System.Void set_xDrive(UnityEngine.JointDrive value)
    // Offset: 0x5533E5C
    void set_xDrive(::UnityEngine::JointDrive value);
    // public UnityEngine.JointDrive get_yDrive()
    // Offset: 0x5533EF0
    ::UnityEngine::JointDrive get_yDrive();
    // public System.Void set_yDrive(UnityEngine.JointDrive value)
    // Offset: 0x5533F88
    void set_yDrive(::UnityEngine::JointDrive value);
    // public UnityEngine.JointDrive get_zDrive()
    // Offset: 0x553401C
    ::UnityEngine::JointDrive get_zDrive();
    // public System.Void set_zDrive(UnityEngine.JointDrive value)
    // Offset: 0x55340B4
    void set_zDrive(::UnityEngine::JointDrive value);
    // public UnityEngine.Quaternion get_targetRotation()
    // Offset: 0x5534148
    ::UnityEngine::Quaternion get_targetRotation();
    // public System.Void set_targetRotation(UnityEngine.Quaternion value)
    // Offset: 0x55341E4
    void set_targetRotation(::UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_targetAngularVelocity()
    // Offset: 0x553427C
    ::UnityEngine::Vector3 get_targetAngularVelocity();
    // public System.Void set_targetAngularVelocity(UnityEngine.Vector3 value)
    // Offset: 0x553431C
    void set_targetAngularVelocity(::UnityEngine::Vector3 value);
    // public UnityEngine.RotationDriveMode get_rotationDriveMode()
    // Offset: 0x55343B4
    ::UnityEngine::RotationDriveMode get_rotationDriveMode();
    // public System.Void set_rotationDriveMode(UnityEngine.RotationDriveMode value)
    // Offset: 0x55343F0
    void set_rotationDriveMode(::UnityEngine::RotationDriveMode value);
    // public UnityEngine.JointDrive get_angularXDrive()
    // Offset: 0x5534434
    ::UnityEngine::JointDrive get_angularXDrive();
    // public System.Void set_angularXDrive(UnityEngine.JointDrive value)
    // Offset: 0x55344CC
    void set_angularXDrive(::UnityEngine::JointDrive value);
    // public UnityEngine.JointDrive get_angularYZDrive()
    // Offset: 0x5534560
    ::UnityEngine::JointDrive get_angularYZDrive();
    // public System.Void set_angularYZDrive(UnityEngine.JointDrive value)
    // Offset: 0x55345F8
    void set_angularYZDrive(::UnityEngine::JointDrive value);
    // public UnityEngine.JointDrive get_slerpDrive()
    // Offset: 0x553468C
    ::UnityEngine::JointDrive get_slerpDrive();
    // public System.Void set_slerpDrive(UnityEngine.JointDrive value)
    // Offset: 0x5534724
    void set_slerpDrive(::UnityEngine::JointDrive value);
    // public UnityEngine.JointProjectionMode get_projectionMode()
    // Offset: 0x55347B8
    ::UnityEngine::JointProjectionMode get_projectionMode();
    // public System.Void set_projectionMode(UnityEngine.JointProjectionMode value)
    // Offset: 0x55347F4
    void set_projectionMode(::UnityEngine::JointProjectionMode value);
    // public System.Single get_projectionDistance()
    // Offset: 0x5534838
    float get_projectionDistance();
    // public System.Void set_projectionDistance(System.Single value)
    // Offset: 0x5534874
    void set_projectionDistance(float value);
    // public System.Single get_projectionAngle()
    // Offset: 0x55348C0
    float get_projectionAngle();
    // public System.Void set_projectionAngle(System.Single value)
    // Offset: 0x55348FC
    void set_projectionAngle(float value);
    // public System.Boolean get_configuredInWorldSpace()
    // Offset: 0x5534948
    bool get_configuredInWorldSpace();
    // public System.Void set_configuredInWorldSpace(System.Boolean value)
    // Offset: 0x5534984
    void set_configuredInWorldSpace(bool value);
    // public System.Boolean get_swapBodies()
    // Offset: 0x55349C8
    bool get_swapBodies();
    // public System.Void set_swapBodies(System.Boolean value)
    // Offset: 0x5534A04
    void set_swapBodies(bool value);
    // private System.Void get_secondaryAxis_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x5532E0C
    void get_secondaryAxis_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_secondaryAxis_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x5532EA4
    void set_secondaryAxis_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_linearLimitSpring_Injected(out UnityEngine.SoftJointLimitSpring ret)
    // Offset: 0x5533234
    void get_linearLimitSpring_Injected(ByRef<::UnityEngine::SoftJointLimitSpring> ret);
    // private System.Void set_linearLimitSpring_Injected(ref UnityEngine.SoftJointLimitSpring value)
    // Offset: 0x55332C0
    void set_linearLimitSpring_Injected(ByRef<::UnityEngine::SoftJointLimitSpring> value);
    // private System.Void get_angularXLimitSpring_Injected(out UnityEngine.SoftJointLimitSpring ret)
    // Offset: 0x5533350
    void get_angularXLimitSpring_Injected(ByRef<::UnityEngine::SoftJointLimitSpring> ret);
    // private System.Void set_angularXLimitSpring_Injected(ref UnityEngine.SoftJointLimitSpring value)
    // Offset: 0x55333DC
    void set_angularXLimitSpring_Injected(ByRef<::UnityEngine::SoftJointLimitSpring> value);
    // private System.Void get_angularYZLimitSpring_Injected(out UnityEngine.SoftJointLimitSpring ret)
    // Offset: 0x553346C
    void get_angularYZLimitSpring_Injected(ByRef<::UnityEngine::SoftJointLimitSpring> ret);
    // private System.Void set_angularYZLimitSpring_Injected(ref UnityEngine.SoftJointLimitSpring value)
    // Offset: 0x55334F8
    void set_angularYZLimitSpring_Injected(ByRef<::UnityEngine::SoftJointLimitSpring> value);
    // private System.Void get_linearLimit_Injected(out UnityEngine.SoftJointLimit ret)
    // Offset: 0x5533598
    void get_linearLimit_Injected(ByRef<::UnityEngine::SoftJointLimit> ret);
    // private System.Void set_linearLimit_Injected(ref UnityEngine.SoftJointLimit value)
    // Offset: 0x5533630
    void set_linearLimit_Injected(ByRef<::UnityEngine::SoftJointLimit> value);
    // private System.Void get_lowAngularXLimit_Injected(out UnityEngine.SoftJointLimit ret)
    // Offset: 0x55336D0
    void get_lowAngularXLimit_Injected(ByRef<::UnityEngine::SoftJointLimit> ret);
    // private System.Void set_lowAngularXLimit_Injected(ref UnityEngine.SoftJointLimit value)
    // Offset: 0x5533768
    void set_lowAngularXLimit_Injected(ByRef<::UnityEngine::SoftJointLimit> value);
    // private System.Void get_highAngularXLimit_Injected(out UnityEngine.SoftJointLimit ret)
    // Offset: 0x5533808
    void get_highAngularXLimit_Injected(ByRef<::UnityEngine::SoftJointLimit> ret);
    // private System.Void set_highAngularXLimit_Injected(ref UnityEngine.SoftJointLimit value)
    // Offset: 0x55338A0
    void set_highAngularXLimit_Injected(ByRef<::UnityEngine::SoftJointLimit> value);
    // private System.Void get_angularYLimit_Injected(out UnityEngine.SoftJointLimit ret)
    // Offset: 0x5533940
    void get_angularYLimit_Injected(ByRef<::UnityEngine::SoftJointLimit> ret);
    // private System.Void set_angularYLimit_Injected(ref UnityEngine.SoftJointLimit value)
    // Offset: 0x55339D8
    void set_angularYLimit_Injected(ByRef<::UnityEngine::SoftJointLimit> value);
    // private System.Void get_angularZLimit_Injected(out UnityEngine.SoftJointLimit ret)
    // Offset: 0x5533A78
    void get_angularZLimit_Injected(ByRef<::UnityEngine::SoftJointLimit> ret);
    // private System.Void set_angularZLimit_Injected(ref UnityEngine.SoftJointLimit value)
    // Offset: 0x5533B10
    void set_angularZLimit_Injected(ByRef<::UnityEngine::SoftJointLimit> value);
    // private System.Void get_targetPosition_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x5533BB0
    void get_targetPosition_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_targetPosition_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x5533C48
    void set_targetPosition_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_targetVelocity_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x5533CE8
    void get_targetVelocity_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_targetVelocity_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x5533D80
    void set_targetVelocity_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_xDrive_Injected(out UnityEngine.JointDrive ret)
    // Offset: 0x5533E18
    void get_xDrive_Injected(ByRef<::UnityEngine::JointDrive> ret);
    // private System.Void set_xDrive_Injected(ref UnityEngine.JointDrive value)
    // Offset: 0x5533EAC
    void set_xDrive_Injected(ByRef<::UnityEngine::JointDrive> value);
    // private System.Void get_yDrive_Injected(out UnityEngine.JointDrive ret)
    // Offset: 0x5533F44
    void get_yDrive_Injected(ByRef<::UnityEngine::JointDrive> ret);
    // private System.Void set_yDrive_Injected(ref UnityEngine.JointDrive value)
    // Offset: 0x5533FD8
    void set_yDrive_Injected(ByRef<::UnityEngine::JointDrive> value);
    // private System.Void get_zDrive_Injected(out UnityEngine.JointDrive ret)
    // Offset: 0x5534070
    void get_zDrive_Injected(ByRef<::UnityEngine::JointDrive> ret);
    // private System.Void set_zDrive_Injected(ref UnityEngine.JointDrive value)
    // Offset: 0x5534104
    void set_zDrive_Injected(ByRef<::UnityEngine::JointDrive> value);
    // private System.Void get_targetRotation_Injected(out UnityEngine.Quaternion ret)
    // Offset: 0x55341A0
    void get_targetRotation_Injected(ByRef<::UnityEngine::Quaternion> ret);
    // private System.Void set_targetRotation_Injected(ref UnityEngine.Quaternion value)
    // Offset: 0x5534238
    void set_targetRotation_Injected(ByRef<::UnityEngine::Quaternion> value);
    // private System.Void get_targetAngularVelocity_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x55342D8
    void get_targetAngularVelocity_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_targetAngularVelocity_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x5534370
    void set_targetAngularVelocity_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_angularXDrive_Injected(out UnityEngine.JointDrive ret)
    // Offset: 0x5534488
    void get_angularXDrive_Injected(ByRef<::UnityEngine::JointDrive> ret);
    // private System.Void set_angularXDrive_Injected(ref UnityEngine.JointDrive value)
    // Offset: 0x553451C
    void set_angularXDrive_Injected(ByRef<::UnityEngine::JointDrive> value);
    // private System.Void get_angularYZDrive_Injected(out UnityEngine.JointDrive ret)
    // Offset: 0x55345B4
    void get_angularYZDrive_Injected(ByRef<::UnityEngine::JointDrive> ret);
    // private System.Void set_angularYZDrive_Injected(ref UnityEngine.JointDrive value)
    // Offset: 0x5534648
    void set_angularYZDrive_Injected(ByRef<::UnityEngine::JointDrive> value);
    // private System.Void get_slerpDrive_Injected(out UnityEngine.JointDrive ret)
    // Offset: 0x55346E0
    void get_slerpDrive_Injected(ByRef<::UnityEngine::JointDrive> ret);
    // private System.Void set_slerpDrive_Injected(ref UnityEngine.JointDrive value)
    // Offset: 0x5534774
    void set_slerpDrive_Injected(ByRef<::UnityEngine::JointDrive> value);
  }; // UnityEngine.ConfigurableJoint
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_secondaryAxis
// Il2CppName: get_secondaryAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_secondaryAxis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_secondaryAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_secondaryAxis
// Il2CppName: set_secondaryAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::Vector3)>(&UnityEngine::ConfigurableJoint::set_secondaryAxis)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_secondaryAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_xMotion
// Il2CppName: get_xMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ConfigurableJointMotion (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_xMotion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_xMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_xMotion
// Il2CppName: set_xMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::ConfigurableJointMotion)>(&UnityEngine::ConfigurableJoint::set_xMotion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ConfigurableJointMotion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_xMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_yMotion
// Il2CppName: get_yMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ConfigurableJointMotion (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_yMotion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_yMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_yMotion
// Il2CppName: set_yMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::ConfigurableJointMotion)>(&UnityEngine::ConfigurableJoint::set_yMotion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ConfigurableJointMotion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_yMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_zMotion
// Il2CppName: get_zMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ConfigurableJointMotion (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_zMotion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_zMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_zMotion
// Il2CppName: set_zMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::ConfigurableJointMotion)>(&UnityEngine::ConfigurableJoint::set_zMotion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ConfigurableJointMotion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_zMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_angularXMotion
// Il2CppName: get_angularXMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ConfigurableJointMotion (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_angularXMotion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_angularXMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_angularXMotion
// Il2CppName: set_angularXMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::ConfigurableJointMotion)>(&UnityEngine::ConfigurableJoint::set_angularXMotion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ConfigurableJointMotion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_angularXMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_angularYMotion
// Il2CppName: get_angularYMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ConfigurableJointMotion (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_angularYMotion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_angularYMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_angularYMotion
// Il2CppName: set_angularYMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::ConfigurableJointMotion)>(&UnityEngine::ConfigurableJoint::set_angularYMotion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ConfigurableJointMotion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_angularYMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_angularZMotion
// Il2CppName: get_angularZMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ConfigurableJointMotion (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_angularZMotion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_angularZMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_angularZMotion
// Il2CppName: set_angularZMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::ConfigurableJointMotion)>(&UnityEngine::ConfigurableJoint::set_angularZMotion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ConfigurableJointMotion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_angularZMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_linearLimitSpring
// Il2CppName: get_linearLimitSpring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SoftJointLimitSpring (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_linearLimitSpring)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_linearLimitSpring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_linearLimitSpring
// Il2CppName: set_linearLimitSpring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::SoftJointLimitSpring)>(&UnityEngine::ConfigurableJoint::set_linearLimitSpring)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimitSpring")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_linearLimitSpring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_angularXLimitSpring
// Il2CppName: get_angularXLimitSpring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SoftJointLimitSpring (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_angularXLimitSpring)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_angularXLimitSpring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_angularXLimitSpring
// Il2CppName: set_angularXLimitSpring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::SoftJointLimitSpring)>(&UnityEngine::ConfigurableJoint::set_angularXLimitSpring)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimitSpring")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_angularXLimitSpring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_angularYZLimitSpring
// Il2CppName: get_angularYZLimitSpring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SoftJointLimitSpring (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_angularYZLimitSpring)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_angularYZLimitSpring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_angularYZLimitSpring
// Il2CppName: set_angularYZLimitSpring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::SoftJointLimitSpring)>(&UnityEngine::ConfigurableJoint::set_angularYZLimitSpring)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimitSpring")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_angularYZLimitSpring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_linearLimit
// Il2CppName: get_linearLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SoftJointLimit (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_linearLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_linearLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_linearLimit
// Il2CppName: set_linearLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::SoftJointLimit)>(&UnityEngine::ConfigurableJoint::set_linearLimit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimit")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_linearLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_lowAngularXLimit
// Il2CppName: get_lowAngularXLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SoftJointLimit (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_lowAngularXLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_lowAngularXLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_lowAngularXLimit
// Il2CppName: set_lowAngularXLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::SoftJointLimit)>(&UnityEngine::ConfigurableJoint::set_lowAngularXLimit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimit")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_lowAngularXLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_highAngularXLimit
// Il2CppName: get_highAngularXLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SoftJointLimit (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_highAngularXLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_highAngularXLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_highAngularXLimit
// Il2CppName: set_highAngularXLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::SoftJointLimit)>(&UnityEngine::ConfigurableJoint::set_highAngularXLimit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimit")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_highAngularXLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_angularYLimit
// Il2CppName: get_angularYLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SoftJointLimit (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_angularYLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_angularYLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_angularYLimit
// Il2CppName: set_angularYLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::SoftJointLimit)>(&UnityEngine::ConfigurableJoint::set_angularYLimit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimit")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_angularYLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_angularZLimit
// Il2CppName: get_angularZLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SoftJointLimit (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_angularZLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_angularZLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_angularZLimit
// Il2CppName: set_angularZLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::SoftJointLimit)>(&UnityEngine::ConfigurableJoint::set_angularZLimit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimit")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_angularZLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_targetPosition
// Il2CppName: get_targetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_targetPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_targetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_targetPosition
// Il2CppName: set_targetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::Vector3)>(&UnityEngine::ConfigurableJoint::set_targetPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_targetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_targetVelocity
// Il2CppName: get_targetVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_targetVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_targetVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_targetVelocity
// Il2CppName: set_targetVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::Vector3)>(&UnityEngine::ConfigurableJoint::set_targetVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_targetVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_xDrive
// Il2CppName: get_xDrive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::JointDrive (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_xDrive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_xDrive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_xDrive
// Il2CppName: set_xDrive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::JointDrive)>(&UnityEngine::ConfigurableJoint::set_xDrive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_xDrive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_yDrive
// Il2CppName: get_yDrive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::JointDrive (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_yDrive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_yDrive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_yDrive
// Il2CppName: set_yDrive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::JointDrive)>(&UnityEngine::ConfigurableJoint::set_yDrive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_yDrive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_zDrive
// Il2CppName: get_zDrive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::JointDrive (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_zDrive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_zDrive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_zDrive
// Il2CppName: set_zDrive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::JointDrive)>(&UnityEngine::ConfigurableJoint::set_zDrive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_zDrive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_targetRotation
// Il2CppName: get_targetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_targetRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_targetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_targetRotation
// Il2CppName: set_targetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::Quaternion)>(&UnityEngine::ConfigurableJoint::set_targetRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_targetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_targetAngularVelocity
// Il2CppName: get_targetAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_targetAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_targetAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_targetAngularVelocity
// Il2CppName: set_targetAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::Vector3)>(&UnityEngine::ConfigurableJoint::set_targetAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_targetAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_rotationDriveMode
// Il2CppName: get_rotationDriveMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RotationDriveMode (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_rotationDriveMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_rotationDriveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_rotationDriveMode
// Il2CppName: set_rotationDriveMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::RotationDriveMode)>(&UnityEngine::ConfigurableJoint::set_rotationDriveMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "RotationDriveMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_rotationDriveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_angularXDrive
// Il2CppName: get_angularXDrive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::JointDrive (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_angularXDrive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_angularXDrive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_angularXDrive
// Il2CppName: set_angularXDrive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::JointDrive)>(&UnityEngine::ConfigurableJoint::set_angularXDrive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_angularXDrive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_angularYZDrive
// Il2CppName: get_angularYZDrive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::JointDrive (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_angularYZDrive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_angularYZDrive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_angularYZDrive
// Il2CppName: set_angularYZDrive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::JointDrive)>(&UnityEngine::ConfigurableJoint::set_angularYZDrive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_angularYZDrive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_slerpDrive
// Il2CppName: get_slerpDrive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::JointDrive (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_slerpDrive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_slerpDrive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_slerpDrive
// Il2CppName: set_slerpDrive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::JointDrive)>(&UnityEngine::ConfigurableJoint::set_slerpDrive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_slerpDrive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_projectionMode
// Il2CppName: get_projectionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::JointProjectionMode (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_projectionMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_projectionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_projectionMode
// Il2CppName: set_projectionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(::UnityEngine::JointProjectionMode)>(&UnityEngine::ConfigurableJoint::set_projectionMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointProjectionMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_projectionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_projectionDistance
// Il2CppName: get_projectionDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_projectionDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_projectionDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_projectionDistance
// Il2CppName: set_projectionDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(float)>(&UnityEngine::ConfigurableJoint::set_projectionDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_projectionDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_projectionAngle
// Il2CppName: get_projectionAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_projectionAngle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_projectionAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_projectionAngle
// Il2CppName: set_projectionAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(float)>(&UnityEngine::ConfigurableJoint::set_projectionAngle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_projectionAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_configuredInWorldSpace
// Il2CppName: get_configuredInWorldSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_configuredInWorldSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_configuredInWorldSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_configuredInWorldSpace
// Il2CppName: set_configuredInWorldSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(bool)>(&UnityEngine::ConfigurableJoint::set_configuredInWorldSpace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_configuredInWorldSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_swapBodies
// Il2CppName: get_swapBodies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ConfigurableJoint::*)()>(&UnityEngine::ConfigurableJoint::get_swapBodies)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_swapBodies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_swapBodies
// Il2CppName: set_swapBodies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(bool)>(&UnityEngine::ConfigurableJoint::set_swapBodies)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_swapBodies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_secondaryAxis_Injected
// Il2CppName: get_secondaryAxis_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConfigurableJoint::get_secondaryAxis_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_secondaryAxis_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_secondaryAxis_Injected
// Il2CppName: set_secondaryAxis_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConfigurableJoint::set_secondaryAxis_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_secondaryAxis_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_linearLimitSpring_Injected
// Il2CppName: get_linearLimitSpring_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimitSpring>)>(&UnityEngine::ConfigurableJoint::get_linearLimitSpring_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimitSpring")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_linearLimitSpring_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_linearLimitSpring_Injected
// Il2CppName: set_linearLimitSpring_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimitSpring>)>(&UnityEngine::ConfigurableJoint::set_linearLimitSpring_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimitSpring")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_linearLimitSpring_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_angularXLimitSpring_Injected
// Il2CppName: get_angularXLimitSpring_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimitSpring>)>(&UnityEngine::ConfigurableJoint::get_angularXLimitSpring_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimitSpring")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_angularXLimitSpring_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_angularXLimitSpring_Injected
// Il2CppName: set_angularXLimitSpring_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimitSpring>)>(&UnityEngine::ConfigurableJoint::set_angularXLimitSpring_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimitSpring")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_angularXLimitSpring_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_angularYZLimitSpring_Injected
// Il2CppName: get_angularYZLimitSpring_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimitSpring>)>(&UnityEngine::ConfigurableJoint::get_angularYZLimitSpring_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimitSpring")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_angularYZLimitSpring_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_angularYZLimitSpring_Injected
// Il2CppName: set_angularYZLimitSpring_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimitSpring>)>(&UnityEngine::ConfigurableJoint::set_angularYZLimitSpring_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimitSpring")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_angularYZLimitSpring_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_linearLimit_Injected
// Il2CppName: get_linearLimit_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimit>)>(&UnityEngine::ConfigurableJoint::get_linearLimit_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_linearLimit_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_linearLimit_Injected
// Il2CppName: set_linearLimit_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimit>)>(&UnityEngine::ConfigurableJoint::set_linearLimit_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_linearLimit_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_lowAngularXLimit_Injected
// Il2CppName: get_lowAngularXLimit_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimit>)>(&UnityEngine::ConfigurableJoint::get_lowAngularXLimit_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_lowAngularXLimit_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_lowAngularXLimit_Injected
// Il2CppName: set_lowAngularXLimit_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimit>)>(&UnityEngine::ConfigurableJoint::set_lowAngularXLimit_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_lowAngularXLimit_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_highAngularXLimit_Injected
// Il2CppName: get_highAngularXLimit_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimit>)>(&UnityEngine::ConfigurableJoint::get_highAngularXLimit_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_highAngularXLimit_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_highAngularXLimit_Injected
// Il2CppName: set_highAngularXLimit_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimit>)>(&UnityEngine::ConfigurableJoint::set_highAngularXLimit_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_highAngularXLimit_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_angularYLimit_Injected
// Il2CppName: get_angularYLimit_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimit>)>(&UnityEngine::ConfigurableJoint::get_angularYLimit_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_angularYLimit_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_angularYLimit_Injected
// Il2CppName: set_angularYLimit_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimit>)>(&UnityEngine::ConfigurableJoint::set_angularYLimit_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_angularYLimit_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_angularZLimit_Injected
// Il2CppName: get_angularZLimit_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimit>)>(&UnityEngine::ConfigurableJoint::get_angularZLimit_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_angularZLimit_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_angularZLimit_Injected
// Il2CppName: set_angularZLimit_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::SoftJointLimit>)>(&UnityEngine::ConfigurableJoint::set_angularZLimit_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "SoftJointLimit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_angularZLimit_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_targetPosition_Injected
// Il2CppName: get_targetPosition_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConfigurableJoint::get_targetPosition_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_targetPosition_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_targetPosition_Injected
// Il2CppName: set_targetPosition_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConfigurableJoint::set_targetPosition_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_targetPosition_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_targetVelocity_Injected
// Il2CppName: get_targetVelocity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConfigurableJoint::get_targetVelocity_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_targetVelocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_targetVelocity_Injected
// Il2CppName: set_targetVelocity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConfigurableJoint::set_targetVelocity_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_targetVelocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_xDrive_Injected
// Il2CppName: get_xDrive_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::JointDrive>)>(&UnityEngine::ConfigurableJoint::get_xDrive_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_xDrive_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_xDrive_Injected
// Il2CppName: set_xDrive_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::JointDrive>)>(&UnityEngine::ConfigurableJoint::set_xDrive_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_xDrive_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_yDrive_Injected
// Il2CppName: get_yDrive_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::JointDrive>)>(&UnityEngine::ConfigurableJoint::get_yDrive_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_yDrive_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_yDrive_Injected
// Il2CppName: set_yDrive_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::JointDrive>)>(&UnityEngine::ConfigurableJoint::set_yDrive_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_yDrive_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_zDrive_Injected
// Il2CppName: get_zDrive_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::JointDrive>)>(&UnityEngine::ConfigurableJoint::get_zDrive_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_zDrive_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_zDrive_Injected
// Il2CppName: set_zDrive_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::JointDrive>)>(&UnityEngine::ConfigurableJoint::set_zDrive_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_zDrive_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_targetRotation_Injected
// Il2CppName: get_targetRotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::ConfigurableJoint::get_targetRotation_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_targetRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_targetRotation_Injected
// Il2CppName: set_targetRotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::ConfigurableJoint::set_targetRotation_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_targetRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_targetAngularVelocity_Injected
// Il2CppName: get_targetAngularVelocity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConfigurableJoint::get_targetAngularVelocity_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_targetAngularVelocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_targetAngularVelocity_Injected
// Il2CppName: set_targetAngularVelocity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ConfigurableJoint::set_targetAngularVelocity_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_targetAngularVelocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_angularXDrive_Injected
// Il2CppName: get_angularXDrive_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::JointDrive>)>(&UnityEngine::ConfigurableJoint::get_angularXDrive_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_angularXDrive_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_angularXDrive_Injected
// Il2CppName: set_angularXDrive_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::JointDrive>)>(&UnityEngine::ConfigurableJoint::set_angularXDrive_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_angularXDrive_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_angularYZDrive_Injected
// Il2CppName: get_angularYZDrive_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::JointDrive>)>(&UnityEngine::ConfigurableJoint::get_angularYZDrive_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_angularYZDrive_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_angularYZDrive_Injected
// Il2CppName: set_angularYZDrive_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::JointDrive>)>(&UnityEngine::ConfigurableJoint::set_angularYZDrive_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_angularYZDrive_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::get_slerpDrive_Injected
// Il2CppName: get_slerpDrive_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::JointDrive>)>(&UnityEngine::ConfigurableJoint::get_slerpDrive_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "get_slerpDrive_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::ConfigurableJoint::set_slerpDrive_Injected
// Il2CppName: set_slerpDrive_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ConfigurableJoint::*)(ByRef<::UnityEngine::JointDrive>)>(&UnityEngine::ConfigurableJoint::set_slerpDrive_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "JointDrive")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ConfigurableJoint*), "set_slerpDrive_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
