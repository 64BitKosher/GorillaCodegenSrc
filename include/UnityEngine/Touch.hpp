// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.TouchPhase
#include "UnityEngine/TouchPhase.hpp"
// Including type: UnityEngine.TouchType
#include "UnityEngine/TouchType.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Touch
  struct Touch;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Touch, "UnityEngine", "Touch");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x44
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Touch
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  struct Touch/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 m_FingerId
    // Size: 0x4
    // Offset: 0x0
    int m_FingerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector2 m_Position
    // Size: 0x8
    // Offset: 0x4
    ::UnityEngine::Vector2 m_Position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 m_RawPosition
    // Size: 0x8
    // Offset: 0xC
    ::UnityEngine::Vector2 m_RawPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 m_PositionDelta
    // Size: 0x8
    // Offset: 0x14
    ::UnityEngine::Vector2 m_PositionDelta;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single m_TimeDelta
    // Size: 0x4
    // Offset: 0x1C
    float m_TimeDelta;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_TapCount
    // Size: 0x4
    // Offset: 0x20
    int m_TapCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.TouchPhase m_Phase
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::TouchPhase m_Phase;
    // Field size check
    static_assert(sizeof(::UnityEngine::TouchPhase) == 0x4);
    // private UnityEngine.TouchType m_Type
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::TouchType m_Type;
    // Field size check
    static_assert(sizeof(::UnityEngine::TouchType) == 0x4);
    // private System.Single m_Pressure
    // Size: 0x4
    // Offset: 0x2C
    float m_Pressure;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_maximumPossiblePressure
    // Size: 0x4
    // Offset: 0x30
    float m_maximumPossiblePressure;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Radius
    // Size: 0x4
    // Offset: 0x34
    float m_Radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_RadiusVariance
    // Size: 0x4
    // Offset: 0x38
    float m_RadiusVariance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_AltitudeAngle
    // Size: 0x4
    // Offset: 0x3C
    float m_AltitudeAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_AzimuthAngle
    // Size: 0x4
    // Offset: 0x40
    float m_AzimuthAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: Touch
    constexpr Touch(int m_FingerId_ = {}, ::UnityEngine::Vector2 m_Position_ = {}, ::UnityEngine::Vector2 m_RawPosition_ = {}, ::UnityEngine::Vector2 m_PositionDelta_ = {}, float m_TimeDelta_ = {}, int m_TapCount_ = {}, ::UnityEngine::TouchPhase m_Phase_ = {}, ::UnityEngine::TouchType m_Type_ = {}, float m_Pressure_ = {}, float m_maximumPossiblePressure_ = {}, float m_Radius_ = {}, float m_RadiusVariance_ = {}, float m_AltitudeAngle_ = {}, float m_AzimuthAngle_ = {}) noexcept : m_FingerId{m_FingerId_}, m_Position{m_Position_}, m_RawPosition{m_RawPosition_}, m_PositionDelta{m_PositionDelta_}, m_TimeDelta{m_TimeDelta_}, m_TapCount{m_TapCount_}, m_Phase{m_Phase_}, m_Type{m_Type_}, m_Pressure{m_Pressure_}, m_maximumPossiblePressure{m_maximumPossiblePressure_}, m_Radius{m_Radius_}, m_RadiusVariance{m_RadiusVariance_}, m_AltitudeAngle{m_AltitudeAngle_}, m_AzimuthAngle{m_AzimuthAngle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int32 m_FingerId
    [[deprecated("Use field access instead!")]] int& dyn_m_FingerId();
    // Get instance field reference: private UnityEngine.Vector2 m_Position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_Position();
    // Get instance field reference: private UnityEngine.Vector2 m_RawPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_RawPosition();
    // Get instance field reference: private UnityEngine.Vector2 m_PositionDelta
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_PositionDelta();
    // Get instance field reference: private System.Single m_TimeDelta
    [[deprecated("Use field access instead!")]] float& dyn_m_TimeDelta();
    // Get instance field reference: private System.Int32 m_TapCount
    [[deprecated("Use field access instead!")]] int& dyn_m_TapCount();
    // Get instance field reference: private UnityEngine.TouchPhase m_Phase
    [[deprecated("Use field access instead!")]] ::UnityEngine::TouchPhase& dyn_m_Phase();
    // Get instance field reference: private UnityEngine.TouchType m_Type
    [[deprecated("Use field access instead!")]] ::UnityEngine::TouchType& dyn_m_Type();
    // Get instance field reference: private System.Single m_Pressure
    [[deprecated("Use field access instead!")]] float& dyn_m_Pressure();
    // Get instance field reference: private System.Single m_maximumPossiblePressure
    [[deprecated("Use field access instead!")]] float& dyn_m_maximumPossiblePressure();
    // Get instance field reference: private System.Single m_Radius
    [[deprecated("Use field access instead!")]] float& dyn_m_Radius();
    // Get instance field reference: private System.Single m_RadiusVariance
    [[deprecated("Use field access instead!")]] float& dyn_m_RadiusVariance();
    // Get instance field reference: private System.Single m_AltitudeAngle
    [[deprecated("Use field access instead!")]] float& dyn_m_AltitudeAngle();
    // Get instance field reference: private System.Single m_AzimuthAngle
    [[deprecated("Use field access instead!")]] float& dyn_m_AzimuthAngle();
    // public System.Int32 get_fingerId()
    // Offset: 0x55191D8
    int get_fingerId();
    // public UnityEngine.Vector2 get_position()
    // Offset: 0x55191E0
    ::UnityEngine::Vector2 get_position();
    // public System.Void set_position(UnityEngine.Vector2 value)
    // Offset: 0x55191E8
    void set_position(::UnityEngine::Vector2 value);
    // public UnityEngine.Vector2 get_rawPosition()
    // Offset: 0x55191F0
    ::UnityEngine::Vector2 get_rawPosition();
    // public System.Void set_rawPosition(UnityEngine.Vector2 value)
    // Offset: 0x55191F8
    void set_rawPosition(::UnityEngine::Vector2 value);
    // public UnityEngine.Vector2 get_deltaPosition()
    // Offset: 0x5519200
    ::UnityEngine::Vector2 get_deltaPosition();
    // public System.Void set_deltaPosition(UnityEngine.Vector2 value)
    // Offset: 0x5519208
    void set_deltaPosition(::UnityEngine::Vector2 value);
    // public System.Single get_deltaTime()
    // Offset: 0x5519210
    float get_deltaTime();
    // public System.Int32 get_tapCount()
    // Offset: 0x5519218
    int get_tapCount();
    // public UnityEngine.TouchPhase get_phase()
    // Offset: 0x5519220
    ::UnityEngine::TouchPhase get_phase();
    // public System.Single get_pressure()
    // Offset: 0x5519228
    float get_pressure();
    // public System.Single get_maximumPossiblePressure()
    // Offset: 0x5519230
    float get_maximumPossiblePressure();
    // public UnityEngine.TouchType get_type()
    // Offset: 0x5519238
    ::UnityEngine::TouchType get_type();
    // public System.Single get_altitudeAngle()
    // Offset: 0x5519240
    float get_altitudeAngle();
    // public System.Single get_azimuthAngle()
    // Offset: 0x5519248
    float get_azimuthAngle();
    // public System.Single get_radius()
    // Offset: 0x5519250
    float get_radius();
    // public System.Single get_radiusVariance()
    // Offset: 0x5519258
    float get_radiusVariance();
  }; // UnityEngine.Touch
  #pragma pack(pop)
  static check_size<sizeof(Touch), 64 + sizeof(float)> __UnityEngine_TouchSizeCheck;
  static_assert(sizeof(Touch) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Touch::get_fingerId
// Il2CppName: get_fingerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Touch::*)()>(&UnityEngine::Touch::get_fingerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "get_fingerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::Touch::*)()>(&UnityEngine::Touch::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Touch::*)(::UnityEngine::Vector2)>(&UnityEngine::Touch::set_position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::get_rawPosition
// Il2CppName: get_rawPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::Touch::*)()>(&UnityEngine::Touch::get_rawPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "get_rawPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::set_rawPosition
// Il2CppName: set_rawPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Touch::*)(::UnityEngine::Vector2)>(&UnityEngine::Touch::set_rawPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "set_rawPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::get_deltaPosition
// Il2CppName: get_deltaPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::Touch::*)()>(&UnityEngine::Touch::get_deltaPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "get_deltaPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::set_deltaPosition
// Il2CppName: set_deltaPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Touch::*)(::UnityEngine::Vector2)>(&UnityEngine::Touch::set_deltaPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "set_deltaPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::get_deltaTime
// Il2CppName: get_deltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Touch::*)()>(&UnityEngine::Touch::get_deltaTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "get_deltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::get_tapCount
// Il2CppName: get_tapCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Touch::*)()>(&UnityEngine::Touch::get_tapCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "get_tapCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::get_phase
// Il2CppName: get_phase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TouchPhase (UnityEngine::Touch::*)()>(&UnityEngine::Touch::get_phase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "get_phase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::get_pressure
// Il2CppName: get_pressure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Touch::*)()>(&UnityEngine::Touch::get_pressure)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "get_pressure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::get_maximumPossiblePressure
// Il2CppName: get_maximumPossiblePressure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Touch::*)()>(&UnityEngine::Touch::get_maximumPossiblePressure)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "get_maximumPossiblePressure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::get_type
// Il2CppName: get_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TouchType (UnityEngine::Touch::*)()>(&UnityEngine::Touch::get_type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "get_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::get_altitudeAngle
// Il2CppName: get_altitudeAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Touch::*)()>(&UnityEngine::Touch::get_altitudeAngle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "get_altitudeAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::get_azimuthAngle
// Il2CppName: get_azimuthAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Touch::*)()>(&UnityEngine::Touch::get_azimuthAngle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "get_azimuthAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::get_radius
// Il2CppName: get_radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Touch::*)()>(&UnityEngine::Touch::get_radius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "get_radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Touch::get_radiusVariance
// Il2CppName: get_radiusVariance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Touch::*)()>(&UnityEngine::Touch::get_radiusVariance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Touch), "get_radiusVariance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
