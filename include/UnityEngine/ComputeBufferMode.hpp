// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ComputeBufferMode
  struct ComputeBufferMode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ComputeBufferMode, "UnityEngine", "ComputeBufferMode");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ComputeBufferMode
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeTypeAttribute] Offset: FFFFFFFF
  struct ComputeBufferMode/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ComputeBufferMode
    constexpr ComputeBufferMode(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public UnityEngine.ComputeBufferMode Immutable
    static constexpr const int Immutable = 0;
    // Get static field: static public UnityEngine.ComputeBufferMode Immutable
    static ::UnityEngine::ComputeBufferMode _get_Immutable();
    // Set static field: static public UnityEngine.ComputeBufferMode Immutable
    static void _set_Immutable(::UnityEngine::ComputeBufferMode value);
    // static field const value: static public UnityEngine.ComputeBufferMode Dynamic
    static constexpr const int Dynamic = 1;
    // Get static field: static public UnityEngine.ComputeBufferMode Dynamic
    static ::UnityEngine::ComputeBufferMode _get_Dynamic();
    // Set static field: static public UnityEngine.ComputeBufferMode Dynamic
    static void _set_Dynamic(::UnityEngine::ComputeBufferMode value);
    // static field const value: static public UnityEngine.ComputeBufferMode Circular
    static constexpr const int Circular = 2;
    // Get static field: static public UnityEngine.ComputeBufferMode Circular
    static ::UnityEngine::ComputeBufferMode _get_Circular();
    // Set static field: static public UnityEngine.ComputeBufferMode Circular
    static void _set_Circular(::UnityEngine::ComputeBufferMode value);
    // static field const value: static public UnityEngine.ComputeBufferMode StreamOut
    static constexpr const int StreamOut = 3;
    // Get static field: static public UnityEngine.ComputeBufferMode StreamOut
    static ::UnityEngine::ComputeBufferMode _get_StreamOut();
    // Set static field: static public UnityEngine.ComputeBufferMode StreamOut
    static void _set_StreamOut(::UnityEngine::ComputeBufferMode value);
    // static field const value: static public UnityEngine.ComputeBufferMode SubUpdates
    static constexpr const int SubUpdates = 4;
    // Get static field: static public UnityEngine.ComputeBufferMode SubUpdates
    static ::UnityEngine::ComputeBufferMode _get_SubUpdates();
    // Set static field: static public UnityEngine.ComputeBufferMode SubUpdates
    static void _set_SubUpdates(::UnityEngine::ComputeBufferMode value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // UnityEngine.ComputeBufferMode
  #pragma pack(pop)
  static check_size<sizeof(ComputeBufferMode), 0 + sizeof(int)> __UnityEngine_ComputeBufferModeSizeCheck;
  static_assert(sizeof(ComputeBufferMode) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
