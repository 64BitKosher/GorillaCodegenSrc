// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleCollisionEvent
  struct ParticleCollisionEvent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ParticleCollisionEvent, "UnityEngine", "ParticleCollisionEvent");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ParticleCollisionEvent
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: FFFFFFFF
  struct ParticleCollisionEvent/*, public ::System::ValueType*/ {
    public:
    public:
    // UnityEngine.Vector3 m_Intersection
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 m_Intersection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Vector3 m_Normal
    // Size: 0xC
    // Offset: 0xC
    ::UnityEngine::Vector3 m_Normal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Vector3 m_Velocity
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 m_Velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // System.Int32 m_ColliderInstanceID
    // Size: 0x4
    // Offset: 0x24
    int m_ColliderInstanceID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ParticleCollisionEvent
    constexpr ParticleCollisionEvent(::UnityEngine::Vector3 m_Intersection_ = {}, ::UnityEngine::Vector3 m_Normal_ = {}, ::UnityEngine::Vector3 m_Velocity_ = {}, int m_ColliderInstanceID_ = {}) noexcept : m_Intersection{m_Intersection_}, m_Normal{m_Normal_}, m_Velocity{m_Velocity_}, m_ColliderInstanceID{m_ColliderInstanceID_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: UnityEngine.Vector3 m_Intersection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Intersection();
    // Get instance field reference: UnityEngine.Vector3 m_Normal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Normal();
    // Get instance field reference: UnityEngine.Vector3 m_Velocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Velocity();
    // Get instance field reference: System.Int32 m_ColliderInstanceID
    [[deprecated("Use field access instead!")]] int& dyn_m_ColliderInstanceID();
    // public UnityEngine.Vector3 get_intersection()
    // Offset: 0x552320C
    ::UnityEngine::Vector3 get_intersection();
    // public UnityEngine.Vector3 get_normal()
    // Offset: 0x5523218
    ::UnityEngine::Vector3 get_normal();
  }; // UnityEngine.ParticleCollisionEvent
  #pragma pack(pop)
  static check_size<sizeof(ParticleCollisionEvent), 36 + sizeof(int)> __UnityEngine_ParticleCollisionEventSizeCheck;
  static_assert(sizeof(ParticleCollisionEvent) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ParticleCollisionEvent::get_intersection
// Il2CppName: get_intersection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::ParticleCollisionEvent::*)()>(&UnityEngine::ParticleCollisionEvent::get_intersection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleCollisionEvent), "get_intersection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleCollisionEvent::get_normal
// Il2CppName: get_normal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::ParticleCollisionEvent::*)()>(&UnityEngine::ParticleCollisionEvent::get_normal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleCollisionEvent), "get_normal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
