// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RotationOrder
  struct RotationOrder;
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Space
  struct Space;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Span`1<T>
  template<typename T>
  struct Span_1;
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Transform);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Transform*, "UnityEngine", "Transform");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Transform
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: FFFFFFFF
  class Transform : public ::UnityEngine::Component/*, public ::System::Collections::IEnumerable*/ {
    public:
    // Nested type: ::UnityEngine::Transform::Enumerator
    class Enumerator;
    // Creating interface conversion operator: operator ::System::Collections::IEnumerable
    operator ::System::Collections::IEnumerable() noexcept {
      return *reinterpret_cast<::System::Collections::IEnumerable*>(this);
    }
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x54D14D8
    ::UnityEngine::Vector3 get_position();
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x54D1578
    void set_position(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_localPosition()
    // Offset: 0x54D06D8
    ::UnityEngine::Vector3 get_localPosition();
    // public System.Void set_localPosition(UnityEngine.Vector3 value)
    // Offset: 0x54D0764
    void set_localPosition(::UnityEngine::Vector3 value);
    // UnityEngine.Vector3 GetLocalEulerAngles(UnityEngine.RotationOrder order)
    // Offset: 0x54D1698
    ::UnityEngine::Vector3 GetLocalEulerAngles(::UnityEngine::RotationOrder order);
    // System.Void SetLocalEulerAngles(UnityEngine.Vector3 euler, UnityEngine.RotationOrder order)
    // Offset: 0x54D1750
    void SetLocalEulerAngles(::UnityEngine::Vector3 euler, ::UnityEngine::RotationOrder order);
    // System.Void SetLocalEulerHint(UnityEngine.Vector3 euler)
    // Offset: 0x54D1800
    void SetLocalEulerHint(::UnityEngine::Vector3 euler);
    // public UnityEngine.Vector3 get_eulerAngles()
    // Offset: 0x54D1898
    ::UnityEngine::Vector3 get_eulerAngles();
    // public System.Void set_eulerAngles(UnityEngine.Vector3 value)
    // Offset: 0x54D18C8
    void set_eulerAngles(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_localEulerAngles()
    // Offset: 0x54D194C
    ::UnityEngine::Vector3 get_localEulerAngles();
    // public System.Void set_localEulerAngles(UnityEngine.Vector3 value)
    // Offset: 0x54D19D4
    void set_localEulerAngles(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_right()
    // Offset: 0x54D1A58
    ::UnityEngine::Vector3 get_right();
    // public System.Void set_right(UnityEngine.Vector3 value)
    // Offset: 0x54D1AD4
    void set_right(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_up()
    // Offset: 0x54D1B58
    ::UnityEngine::Vector3 get_up();
    // public System.Void set_up(UnityEngine.Vector3 value)
    // Offset: 0x54D1BD4
    void set_up(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_forward()
    // Offset: 0x54D1C58
    ::UnityEngine::Vector3 get_forward();
    // public System.Void set_forward(UnityEngine.Vector3 value)
    // Offset: 0x54D1CD4
    void set_forward(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_rotation()
    // Offset: 0x54CF944
    ::UnityEngine::Quaternion get_rotation();
    // public System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0x54D18F8
    void set_rotation(::UnityEngine::Quaternion value);
    // public UnityEngine.Quaternion get_localRotation()
    // Offset: 0x54D197C
    ::UnityEngine::Quaternion get_localRotation();
    // public System.Void set_localRotation(UnityEngine.Quaternion value)
    // Offset: 0x54D1A04
    void set_localRotation(::UnityEngine::Quaternion value);
    // UnityEngine.RotationOrder get_rotationOrder()
    // Offset: 0x54D1E00
    ::UnityEngine::RotationOrder get_rotationOrder();
    // System.Void set_rotationOrder(UnityEngine.RotationOrder value)
    // Offset: 0x54D1E78
    void set_rotationOrder(::UnityEngine::RotationOrder value);
    // System.Int32 GetRotationOrderInternal()
    // Offset: 0x54D1E3C
    int GetRotationOrderInternal();
    // System.Void SetRotationOrderInternal(UnityEngine.RotationOrder rotationOrder)
    // Offset: 0x54D1EBC
    void SetRotationOrderInternal(::UnityEngine::RotationOrder rotationOrder);
    // public UnityEngine.Vector3 get_localScale()
    // Offset: 0x54D1F00
    ::UnityEngine::Vector3 get_localScale();
    // public System.Void set_localScale(UnityEngine.Vector3 value)
    // Offset: 0x54D1FA0
    void set_localScale(::UnityEngine::Vector3 value);
    // public UnityEngine.Transform get_parent()
    // Offset: 0x54D13C8
    ::UnityEngine::Transform* get_parent();
    // public System.Void set_parent(UnityEngine.Transform value)
    // Offset: 0x54D2074
    void set_parent(::UnityEngine::Transform* value);
    // UnityEngine.Transform get_parentInternal()
    // Offset: 0x54D2038
    ::UnityEngine::Transform* get_parentInternal();
    // System.Void set_parentInternal(UnityEngine.Transform value)
    // Offset: 0x54D2140
    void set_parentInternal(::UnityEngine::Transform* value);
    // private UnityEngine.Transform GetParent()
    // Offset: 0x54D2188
    ::UnityEngine::Transform* GetParent();
    // public System.Void SetParent(UnityEngine.Transform p)
    // Offset: 0x54D21C4
    void SetParent(::UnityEngine::Transform* p);
    // public System.Void SetParent(UnityEngine.Transform parent, System.Boolean worldPositionStays)
    // Offset: 0x54D220C
    void SetParent(::UnityEngine::Transform* parent, bool worldPositionStays);
    // public UnityEngine.Matrix4x4 get_worldToLocalMatrix()
    // Offset: 0x54D2260
    ::UnityEngine::Matrix4x4 get_worldToLocalMatrix();
    // public UnityEngine.Matrix4x4 get_localToWorldMatrix()
    // Offset: 0x54D0E0C
    ::UnityEngine::Matrix4x4 get_localToWorldMatrix();
    // public System.Void SetPositionAndRotation(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    // Offset: 0x54D2354
    void SetPositionAndRotation(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation);
    // public System.Void SetLocalPositionAndRotation(UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation)
    // Offset: 0x54D2408
    void SetLocalPositionAndRotation(::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation);
    // public System.Void GetPositionAndRotation(out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation)
    // Offset: 0x54D24BC
    void GetPositionAndRotation(ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation);
    // public System.Void GetLocalPositionAndRotation(out UnityEngine.Vector3 localPosition, out UnityEngine.Quaternion localRotation)
    // Offset: 0x54D2510
    void GetLocalPositionAndRotation(ByRef<::UnityEngine::Vector3> localPosition, ByRef<::UnityEngine::Quaternion> localRotation);
    // public System.Void Translate(UnityEngine.Vector3 translation, UnityEngine.Space relativeTo)
    // Offset: 0x54D2564
    void Translate(::UnityEngine::Vector3 translation, ::UnityEngine::Space relativeTo);
    // public System.Void Translate(UnityEngine.Vector3 translation)
    // Offset: 0x54D2654
    void Translate(::UnityEngine::Vector3 translation);
    // public System.Void Translate(System.Single x, System.Single y, System.Single z, UnityEngine.Space relativeTo)
    // Offset: 0x54D265C
    void Translate(float x, float y, float z, ::UnityEngine::Space relativeTo);
    // public System.Void Translate(System.Single x, System.Single y, System.Single z)
    // Offset: 0x54D2660
    void Translate(float x, float y, float z);
    // public System.Void Translate(UnityEngine.Vector3 translation, UnityEngine.Transform relativeTo)
    // Offset: 0x54D2668
    void Translate(::UnityEngine::Vector3 translation, ::UnityEngine::Transform* relativeTo);
    // public System.Void Translate(System.Single x, System.Single y, System.Single z, UnityEngine.Transform relativeTo)
    // Offset: 0x54D274C
    void Translate(float x, float y, float z, ::UnityEngine::Transform* relativeTo);
    // public System.Void Rotate(UnityEngine.Vector3 eulers, UnityEngine.Space relativeTo)
    // Offset: 0x54D2750
    void Rotate(::UnityEngine::Vector3 eulers, ::UnityEngine::Space relativeTo);
    // public System.Void Rotate(UnityEngine.Vector3 eulers)
    // Offset: 0x54D29D8
    void Rotate(::UnityEngine::Vector3 eulers);
    // public System.Void Rotate(System.Single xAngle, System.Single yAngle, System.Single zAngle, UnityEngine.Space relativeTo)
    // Offset: 0x54D29E0
    void Rotate(float xAngle, float yAngle, float zAngle, ::UnityEngine::Space relativeTo);
    // public System.Void Rotate(System.Single xAngle, System.Single yAngle, System.Single zAngle)
    // Offset: 0x54D29E4
    void Rotate(float xAngle, float yAngle, float zAngle);
    // System.Void RotateAroundInternal(UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x54D29EC
    void RotateAroundInternal(::UnityEngine::Vector3 axis, float angle);
    // public System.Void Rotate(UnityEngine.Vector3 axis, System.Single angle, UnityEngine.Space relativeTo)
    // Offset: 0x54D2AA4
    void Rotate(::UnityEngine::Vector3 axis, float angle, ::UnityEngine::Space relativeTo);
    // public System.Void Rotate(UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x54D2B30
    void Rotate(::UnityEngine::Vector3 axis, float angle);
    // public System.Void RotateAround(UnityEngine.Vector3 point, UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x54D2B38
    void RotateAround(::UnityEngine::Vector3 point, ::UnityEngine::Vector3 axis, float angle);
    // public System.Void LookAt(UnityEngine.Transform target, UnityEngine.Vector3 worldUp)
    // Offset: 0x54D2BFC
    void LookAt(::UnityEngine::Transform* target, ::UnityEngine::Vector3 worldUp);
    // public System.Void LookAt(UnityEngine.Transform target)
    // Offset: 0x54D2CC0
    void LookAt(::UnityEngine::Transform* target);
    // public System.Void LookAt(UnityEngine.Vector3 worldPosition, UnityEngine.Vector3 worldUp)
    // Offset: 0x54D2CBC
    void LookAt(::UnityEngine::Vector3 worldPosition, ::UnityEngine::Vector3 worldUp);
    // public System.Void LookAt(UnityEngine.Vector3 worldPosition)
    // Offset: 0x54D2E18
    void LookAt(::UnityEngine::Vector3 worldPosition);
    // private System.Void Internal_LookAt(UnityEngine.Vector3 worldPosition, UnityEngine.Vector3 worldUp)
    // Offset: 0x54D2DB8
    void Internal_LookAt(::UnityEngine::Vector3 worldPosition, ::UnityEngine::Vector3 worldUp);
    // public UnityEngine.Vector3 TransformDirection(UnityEngine.Vector3 direction)
    // Offset: 0x54D25EC
    ::UnityEngine::Vector3 TransformDirection(::UnityEngine::Vector3 direction);
    // public UnityEngine.Vector3 TransformDirection(System.Single x, System.Single y, System.Single z)
    // Offset: 0x54D2F3C
    ::UnityEngine::Vector3 TransformDirection(float x, float y, float z);
    // System.Void TransformDirections(UnityEngine.Vector3* directions, System.Int32 count, UnityEngine.Vector3* transformedDirections, System.Int32 transformedCount)
    // Offset: 0x54D2F40
    void TransformDirections(::UnityEngine::Vector3* directions, int count, ::UnityEngine::Vector3* transformedDirections, int transformedCount);
    // public System.Void TransformDirections(System.ReadOnlySpan`1<UnityEngine.Vector3> directions, System.Span`1<UnityEngine.Vector3> transformedDirections)
    // Offset: 0x54D2FAC
    void TransformDirections(::System::ReadOnlySpan_1<::UnityEngine::Vector3> directions, ::System::Span_1<::UnityEngine::Vector3> transformedDirections);
    // public System.Void TransformDirections(System.Span`1<UnityEngine.Vector3> directions)
    // Offset: 0x54D30F0
    void TransformDirections(::System::Span_1<::UnityEngine::Vector3> directions);
    // public UnityEngine.Vector3 InverseTransformDirection(UnityEngine.Vector3 direction)
    // Offset: 0x54D316C
    ::UnityEngine::Vector3 InverseTransformDirection(::UnityEngine::Vector3 direction);
    // public UnityEngine.Vector3 InverseTransformDirection(System.Single x, System.Single y, System.Single z)
    // Offset: 0x54D3228
    ::UnityEngine::Vector3 InverseTransformDirection(float x, float y, float z);
    // System.Void InverseTransformDirections(UnityEngine.Vector3* directions, System.Int32 count, UnityEngine.Vector3* transformedDirections, System.Int32 transformedCount)
    // Offset: 0x54D322C
    void InverseTransformDirections(::UnityEngine::Vector3* directions, int count, ::UnityEngine::Vector3* transformedDirections, int transformedCount);
    // public System.Void InverseTransformDirections(System.ReadOnlySpan`1<UnityEngine.Vector3> directions, System.Span`1<UnityEngine.Vector3> transformedDirections)
    // Offset: 0x54D3298
    void InverseTransformDirections(::System::ReadOnlySpan_1<::UnityEngine::Vector3> directions, ::System::Span_1<::UnityEngine::Vector3> transformedDirections);
    // public System.Void InverseTransformDirections(System.Span`1<UnityEngine.Vector3> directions)
    // Offset: 0x54D33DC
    void InverseTransformDirections(::System::Span_1<::UnityEngine::Vector3> directions);
    // public UnityEngine.Vector3 TransformVector(UnityEngine.Vector3 vector)
    // Offset: 0x54D3458
    ::UnityEngine::Vector3 TransformVector(::UnityEngine::Vector3 vector);
    // public UnityEngine.Vector3 TransformVector(System.Single x, System.Single y, System.Single z)
    // Offset: 0x54D3514
    ::UnityEngine::Vector3 TransformVector(float x, float y, float z);
    // System.Void TransformVectors(UnityEngine.Vector3* vectors, System.Int32 count, UnityEngine.Vector3* transformedVectors, System.Int32 transformedCount)
    // Offset: 0x54D3518
    void TransformVectors(::UnityEngine::Vector3* vectors, int count, ::UnityEngine::Vector3* transformedVectors, int transformedCount);
    // public System.Void TransformVectors(System.ReadOnlySpan`1<UnityEngine.Vector3> vectors, System.Span`1<UnityEngine.Vector3> transformedVectors)
    // Offset: 0x54D3584
    void TransformVectors(::System::ReadOnlySpan_1<::UnityEngine::Vector3> vectors, ::System::Span_1<::UnityEngine::Vector3> transformedVectors);
    // public System.Void TransformVectors(System.Span`1<UnityEngine.Vector3> vectors)
    // Offset: 0x54D36C8
    void TransformVectors(::System::Span_1<::UnityEngine::Vector3> vectors);
    // public UnityEngine.Vector3 InverseTransformVector(UnityEngine.Vector3 vector)
    // Offset: 0x54D3744
    ::UnityEngine::Vector3 InverseTransformVector(::UnityEngine::Vector3 vector);
    // public UnityEngine.Vector3 InverseTransformVector(System.Single x, System.Single y, System.Single z)
    // Offset: 0x54D3800
    ::UnityEngine::Vector3 InverseTransformVector(float x, float y, float z);
    // System.Void InverseTransformVectors(UnityEngine.Vector3* vectors, System.Int32 count, UnityEngine.Vector3* transformedVectors, System.Int32 transformedCount)
    // Offset: 0x54D3804
    void InverseTransformVectors(::UnityEngine::Vector3* vectors, int count, ::UnityEngine::Vector3* transformedVectors, int transformedCount);
    // public System.Void InverseTransformVectors(System.ReadOnlySpan`1<UnityEngine.Vector3> vectors, System.Span`1<UnityEngine.Vector3> transformedVectors)
    // Offset: 0x54D3870
    void InverseTransformVectors(::System::ReadOnlySpan_1<::UnityEngine::Vector3> vectors, ::System::Span_1<::UnityEngine::Vector3> transformedVectors);
    // public System.Void InverseTransformVectors(System.Span`1<UnityEngine.Vector3> vectors)
    // Offset: 0x54D39B4
    void InverseTransformVectors(::System::Span_1<::UnityEngine::Vector3> vectors);
    // public UnityEngine.Vector3 TransformPoint(UnityEngine.Vector3 position)
    // Offset: 0x54CF8DC
    ::UnityEngine::Vector3 TransformPoint(::UnityEngine::Vector3 position);
    // public UnityEngine.Vector3 TransformPoint(System.Single x, System.Single y, System.Single z)
    // Offset: 0x54D3A84
    ::UnityEngine::Vector3 TransformPoint(float x, float y, float z);
    // System.Void TransformPoints(UnityEngine.Vector3* positions, System.Int32 count, UnityEngine.Vector3* transformedPositions, System.Int32 transformedCount)
    // Offset: 0x54D3A88
    void TransformPoints(::UnityEngine::Vector3* positions, int count, ::UnityEngine::Vector3* transformedPositions, int transformedCount);
    // public System.Void TransformPoints(System.ReadOnlySpan`1<UnityEngine.Vector3> positions, System.Span`1<UnityEngine.Vector3> transformedPositions)
    // Offset: 0x54D3AF4
    void TransformPoints(::System::ReadOnlySpan_1<::UnityEngine::Vector3> positions, ::System::Span_1<::UnityEngine::Vector3> transformedPositions);
    // public System.Void TransformPoints(System.Span`1<UnityEngine.Vector3> positions)
    // Offset: 0x54D3C38
    void TransformPoints(::System::Span_1<::UnityEngine::Vector3> positions);
    // public UnityEngine.Vector3 InverseTransformPoint(UnityEngine.Vector3 position)
    // Offset: 0x54D3CB4
    ::UnityEngine::Vector3 InverseTransformPoint(::UnityEngine::Vector3 position);
    // public UnityEngine.Vector3 InverseTransformPoint(System.Single x, System.Single y, System.Single z)
    // Offset: 0x54D3D70
    ::UnityEngine::Vector3 InverseTransformPoint(float x, float y, float z);
    // System.Void InverseTransformPoints(UnityEngine.Vector3* positions, System.Int32 count, UnityEngine.Vector3* transformedPositions, System.Int32 transformedCount)
    // Offset: 0x54D3D74
    void InverseTransformPoints(::UnityEngine::Vector3* positions, int count, ::UnityEngine::Vector3* transformedPositions, int transformedCount);
    // public System.Void InverseTransformPoints(System.ReadOnlySpan`1<UnityEngine.Vector3> positions, System.Span`1<UnityEngine.Vector3> transformedPositions)
    // Offset: 0x54D3DE0
    void InverseTransformPoints(::System::ReadOnlySpan_1<::UnityEngine::Vector3> positions, ::System::Span_1<::UnityEngine::Vector3> transformedPositions);
    // public System.Void InverseTransformPoints(System.Span`1<UnityEngine.Vector3> positions)
    // Offset: 0x54D3F24
    void InverseTransformPoints(::System::Span_1<::UnityEngine::Vector3> positions);
    // public UnityEngine.Transform get_root()
    // Offset: 0x54D3FA0
    ::UnityEngine::Transform* get_root();
    // private UnityEngine.Transform GetRoot()
    // Offset: 0x54D3FDC
    ::UnityEngine::Transform* GetRoot();
    // public System.Int32 get_childCount()
    // Offset: 0x54D4018
    int get_childCount();
    // public System.Void DetachChildren()
    // Offset: 0x54D4054
    void DetachChildren();
    // public System.Void SetAsFirstSibling()
    // Offset: 0x54D4090
    void SetAsFirstSibling();
    // public System.Void SetAsLastSibling()
    // Offset: 0x54D40CC
    void SetAsLastSibling();
    // public System.Void SetSiblingIndex(System.Int32 index)
    // Offset: 0x54D4108
    void SetSiblingIndex(int index);
    // System.Void MoveAfterSibling(UnityEngine.Transform transform, System.Boolean notifyEditorAndMarkDirty)
    // Offset: 0x54D414C
    void MoveAfterSibling(::UnityEngine::Transform* transform, bool notifyEditorAndMarkDirty);
    // public System.Int32 GetSiblingIndex()
    // Offset: 0x54D41A0
    int GetSiblingIndex();
    // static private UnityEngine.Transform FindRelativeTransformWithPath(UnityEngine.Transform transform, System.String path, System.Boolean isActiveOnly)
    // Offset: 0x54D41DC
    static ::UnityEngine::Transform* FindRelativeTransformWithPath(::UnityEngine::Transform* transform, ::StringW path, bool isActiveOnly);
    // public UnityEngine.Transform Find(System.String n)
    // Offset: 0x54D4230
    ::UnityEngine::Transform* Find(::StringW n);
    // System.Void SendTransformChangedScale()
    // Offset: 0x54D42C4
    void SendTransformChangedScale();
    // public UnityEngine.Vector3 get_lossyScale()
    // Offset: 0x54D4300
    ::UnityEngine::Vector3 get_lossyScale();
    // public System.Boolean IsChildOf(UnityEngine.Transform parent)
    // Offset: 0x54D43A0
    bool IsChildOf(::UnityEngine::Transform* parent);
    // public System.Boolean get_hasChanged()
    // Offset: 0x54D43E4
    bool get_hasChanged();
    // public System.Void set_hasChanged(System.Boolean value)
    // Offset: 0x54D4420
    void set_hasChanged(bool value);
    // public UnityEngine.Transform FindChild(System.String n)
    // Offset: 0x54D4464
    ::UnityEngine::Transform* FindChild(::StringW n);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x54D4468
    ::System::Collections::IEnumerator* GetEnumerator();
    // public System.Void RotateAround(UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x54D4510
    void RotateAround(::UnityEngine::Vector3 axis, float angle);
    // public System.Void RotateAroundLocal(UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x54D45C8
    void RotateAroundLocal(::UnityEngine::Vector3 axis, float angle);
    // public UnityEngine.Transform GetChild(System.Int32 index)
    // Offset: 0x54D4680
    ::UnityEngine::Transform* GetChild(int index);
    // public System.Int32 GetChildCount()
    // Offset: 0x54D46C4
    int GetChildCount();
    // public System.Int32 get_hierarchyCapacity()
    // Offset: 0x54D4700
    int get_hierarchyCapacity();
    // public System.Void set_hierarchyCapacity(System.Int32 value)
    // Offset: 0x54D4778
    void set_hierarchyCapacity(int value);
    // private System.Int32 internal_getHierarchyCapacity()
    // Offset: 0x54D473C
    int internal_getHierarchyCapacity();
    // private System.Void internal_setHierarchyCapacity(System.Int32 value)
    // Offset: 0x54D47BC
    void internal_setHierarchyCapacity(int value);
    // public System.Int32 get_hierarchyCount()
    // Offset: 0x54D4800
    int get_hierarchyCount();
    // private System.Int32 internal_getHierarchyCount()
    // Offset: 0x54D483C
    int internal_getHierarchyCount();
    // System.Boolean IsNonUniformScaleTransform()
    // Offset: 0x54D4878
    bool IsNonUniformScaleTransform();
    // System.Boolean get_constrainProportionsScale()
    // Offset: 0x54D48B4
    bool get_constrainProportionsScale();
    // System.Void set_constrainProportionsScale(System.Boolean value)
    // Offset: 0x54D492C
    void set_constrainProportionsScale(bool value);
    // private System.Void SetConstrainProportionsScale(System.Boolean isLinked)
    // Offset: 0x54D4970
    void SetConstrainProportionsScale(bool isLinked);
    // private System.Boolean IsConstrainProportionsScale()
    // Offset: 0x54D48F0
    bool IsConstrainProportionsScale();
    // private System.Void get_position_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x54D1534
    void get_position_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_position_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x54D15CC
    void set_position_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_localPosition_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x54D1610
    void get_localPosition_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_localPosition_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x54D1654
    void set_localPosition_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void GetLocalEulerAngles_Injected(UnityEngine.RotationOrder order, out UnityEngine.Vector3 ret)
    // Offset: 0x54D16FC
    void GetLocalEulerAngles_Injected(::UnityEngine::RotationOrder order, ByRef<::UnityEngine::Vector3> ret);
    // private System.Void SetLocalEulerAngles_Injected(ref UnityEngine.Vector3 euler, UnityEngine.RotationOrder order)
    // Offset: 0x54D17AC
    void SetLocalEulerAngles_Injected(ByRef<::UnityEngine::Vector3> euler, ::UnityEngine::RotationOrder order);
    // private System.Void SetLocalEulerHint_Injected(ref UnityEngine.Vector3 euler)
    // Offset: 0x54D1854
    void SetLocalEulerHint_Injected(ByRef<::UnityEngine::Vector3> euler);
    // private System.Void get_rotation_Injected(out UnityEngine.Quaternion ret)
    // Offset: 0x54D1CF0
    void get_rotation_Injected(ByRef<::UnityEngine::Quaternion> ret);
    // private System.Void set_rotation_Injected(ref UnityEngine.Quaternion value)
    // Offset: 0x54D1D34
    void set_rotation_Injected(ByRef<::UnityEngine::Quaternion> value);
    // private System.Void get_localRotation_Injected(out UnityEngine.Quaternion ret)
    // Offset: 0x54D1D78
    void get_localRotation_Injected(ByRef<::UnityEngine::Quaternion> ret);
    // private System.Void set_localRotation_Injected(ref UnityEngine.Quaternion value)
    // Offset: 0x54D1DBC
    void set_localRotation_Injected(ByRef<::UnityEngine::Quaternion> value);
    // private System.Void get_localScale_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x54D1F5C
    void get_localScale_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_localScale_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x54D1FF4
    void set_localScale_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_worldToLocalMatrix_Injected(out UnityEngine.Matrix4x4 ret)
    // Offset: 0x54D22CC
    void get_worldToLocalMatrix_Injected(ByRef<::UnityEngine::Matrix4x4> ret);
    // private System.Void get_localToWorldMatrix_Injected(out UnityEngine.Matrix4x4 ret)
    // Offset: 0x54D2310
    void get_localToWorldMatrix_Injected(ByRef<::UnityEngine::Matrix4x4> ret);
    // private System.Void SetPositionAndRotation_Injected(ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation)
    // Offset: 0x54D23B4
    void SetPositionAndRotation_Injected(ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation);
    // private System.Void SetLocalPositionAndRotation_Injected(ref UnityEngine.Vector3 localPosition, ref UnityEngine.Quaternion localRotation)
    // Offset: 0x54D2468
    void SetLocalPositionAndRotation_Injected(ByRef<::UnityEngine::Vector3> localPosition, ByRef<::UnityEngine::Quaternion> localRotation);
    // private System.Void RotateAroundInternal_Injected(ref UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x54D2A50
    void RotateAroundInternal_Injected(ByRef<::UnityEngine::Vector3> axis, float angle);
    // private System.Void Internal_LookAt_Injected(ref UnityEngine.Vector3 worldPosition, ref UnityEngine.Vector3 worldUp)
    // Offset: 0x54D2E94
    void Internal_LookAt_Injected(ByRef<::UnityEngine::Vector3> worldPosition, ByRef<::UnityEngine::Vector3> worldUp);
    // private System.Void TransformDirection_Injected(ref UnityEngine.Vector3 direction, out UnityEngine.Vector3 ret)
    // Offset: 0x54D2EE8
    void TransformDirection_Injected(ByRef<::UnityEngine::Vector3> direction, ByRef<::UnityEngine::Vector3> ret);
    // private System.Void InverseTransformDirection_Injected(ref UnityEngine.Vector3 direction, out UnityEngine.Vector3 ret)
    // Offset: 0x54D31D4
    void InverseTransformDirection_Injected(ByRef<::UnityEngine::Vector3> direction, ByRef<::UnityEngine::Vector3> ret);
    // private System.Void TransformVector_Injected(ref UnityEngine.Vector3 vector, out UnityEngine.Vector3 ret)
    // Offset: 0x54D34C0
    void TransformVector_Injected(ByRef<::UnityEngine::Vector3> vector, ByRef<::UnityEngine::Vector3> ret);
    // private System.Void InverseTransformVector_Injected(ref UnityEngine.Vector3 vector, out UnityEngine.Vector3 ret)
    // Offset: 0x54D37AC
    void InverseTransformVector_Injected(ByRef<::UnityEngine::Vector3> vector, ByRef<::UnityEngine::Vector3> ret);
    // private System.Void TransformPoint_Injected(ref UnityEngine.Vector3 position, out UnityEngine.Vector3 ret)
    // Offset: 0x54D3A30
    void TransformPoint_Injected(ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Vector3> ret);
    // private System.Void InverseTransformPoint_Injected(ref UnityEngine.Vector3 position, out UnityEngine.Vector3 ret)
    // Offset: 0x54D3D1C
    void InverseTransformPoint_Injected(ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Vector3> ret);
    // private System.Void get_lossyScale_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x54D435C
    void get_lossyScale_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void RotateAround_Injected(ref UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x54D4574
    void RotateAround_Injected(ByRef<::UnityEngine::Vector3> axis, float angle);
    // private System.Void RotateAroundLocal_Injected(ref UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x54D462C
    void RotateAroundLocal_Injected(ByRef<::UnityEngine::Vector3> axis, float angle);
    // protected System.Void .ctor()
    // Offset: 0x54D140C
    // Implemented from: UnityEngine.Component
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Transform* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Transform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Transform*, creationType>()));
    }
  }; // UnityEngine.Transform
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Transform::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::set_position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_localPosition
// Il2CppName: get_localPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_localPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_localPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_localPosition
// Il2CppName: set_localPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::set_localPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_localPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::GetLocalEulerAngles
// Il2CppName: GetLocalEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)(::UnityEngine::RotationOrder)>(&UnityEngine::Transform::GetLocalEulerAngles)> {
  static const MethodInfo* get() {
    static auto* order = &::il2cpp_utils::GetClassFromName("UnityEngine", "RotationOrder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "GetLocalEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{order});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SetLocalEulerAngles
// Il2CppName: SetLocalEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3, ::UnityEngine::RotationOrder)>(&UnityEngine::Transform::SetLocalEulerAngles)> {
  static const MethodInfo* get() {
    static auto* euler = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* order = &::il2cpp_utils::GetClassFromName("UnityEngine", "RotationOrder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SetLocalEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{euler, order});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SetLocalEulerHint
// Il2CppName: SetLocalEulerHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::SetLocalEulerHint)> {
  static const MethodInfo* get() {
    static auto* euler = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SetLocalEulerHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{euler});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_eulerAngles
// Il2CppName: get_eulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_eulerAngles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_eulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_eulerAngles
// Il2CppName: set_eulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::set_eulerAngles)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_eulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_localEulerAngles
// Il2CppName: get_localEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_localEulerAngles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_localEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_localEulerAngles
// Il2CppName: set_localEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::set_localEulerAngles)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_localEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_right
// Il2CppName: get_right
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_right)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_right", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_right
// Il2CppName: set_right
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::set_right)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_right", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_up
// Il2CppName: get_up
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_up)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_up", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_up
// Il2CppName: set_up
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::set_up)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_up", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_forward
// Il2CppName: get_forward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_forward)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_forward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_forward
// Il2CppName: set_forward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::set_forward)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_forward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Quaternion)>(&UnityEngine::Transform::set_rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_localRotation
// Il2CppName: get_localRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_localRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_localRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_localRotation
// Il2CppName: set_localRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Quaternion)>(&UnityEngine::Transform::set_localRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_localRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_rotationOrder
// Il2CppName: get_rotationOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RotationOrder (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_rotationOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_rotationOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_rotationOrder
// Il2CppName: set_rotationOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::RotationOrder)>(&UnityEngine::Transform::set_rotationOrder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "RotationOrder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_rotationOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::GetRotationOrderInternal
// Il2CppName: GetRotationOrderInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Transform::*)()>(&UnityEngine::Transform::GetRotationOrderInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "GetRotationOrderInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SetRotationOrderInternal
// Il2CppName: SetRotationOrderInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::RotationOrder)>(&UnityEngine::Transform::SetRotationOrderInternal)> {
  static const MethodInfo* get() {
    static auto* rotationOrder = &::il2cpp_utils::GetClassFromName("UnityEngine", "RotationOrder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SetRotationOrderInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotationOrder});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_localScale
// Il2CppName: get_localScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_localScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_localScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_localScale
// Il2CppName: set_localScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::set_localScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_localScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_parent
// Il2CppName: get_parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_parent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_parent
// Il2CppName: set_parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Transform*)>(&UnityEngine::Transform::set_parent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_parentInternal
// Il2CppName: get_parentInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_parentInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_parentInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_parentInternal
// Il2CppName: set_parentInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Transform*)>(&UnityEngine::Transform::set_parentInternal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_parentInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::GetParent
// Il2CppName: GetParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Transform::*)()>(&UnityEngine::Transform::GetParent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "GetParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SetParent
// Il2CppName: SetParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Transform*)>(&UnityEngine::Transform::SetParent)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SetParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SetParent
// Il2CppName: SetParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Transform*, bool)>(&UnityEngine::Transform::SetParent)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* worldPositionStays = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SetParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent, worldPositionStays});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_worldToLocalMatrix
// Il2CppName: get_worldToLocalMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_worldToLocalMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_worldToLocalMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_localToWorldMatrix
// Il2CppName: get_localToWorldMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_localToWorldMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_localToWorldMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SetPositionAndRotation
// Il2CppName: SetPositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&UnityEngine::Transform::SetPositionAndRotation)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SetPositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SetLocalPositionAndRotation
// Il2CppName: SetLocalPositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&UnityEngine::Transform::SetLocalPositionAndRotation)> {
  static const MethodInfo* get() {
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SetLocalPositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPosition, localRotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::GetPositionAndRotation
// Il2CppName: GetPositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Transform::GetPositionAndRotation)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "GetPositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::GetLocalPositionAndRotation
// Il2CppName: GetLocalPositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Transform::GetLocalPositionAndRotation)> {
  static const MethodInfo* get() {
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "GetLocalPositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPosition, localRotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::Translate
// Il2CppName: Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3, ::UnityEngine::Space)>(&UnityEngine::Transform::Translate)> {
  static const MethodInfo* get() {
    static auto* translation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Space")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{translation, relativeTo});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::Translate
// Il2CppName: Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::Translate)> {
  static const MethodInfo* get() {
    static auto* translation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{translation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::Translate
// Il2CppName: Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(float, float, float, ::UnityEngine::Space)>(&UnityEngine::Transform::Translate)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Space")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z, relativeTo});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::Translate
// Il2CppName: Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(float, float, float)>(&UnityEngine::Transform::Translate)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::Translate
// Il2CppName: Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3, ::UnityEngine::Transform*)>(&UnityEngine::Transform::Translate)> {
  static const MethodInfo* get() {
    static auto* translation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{translation, relativeTo});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::Translate
// Il2CppName: Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(float, float, float, ::UnityEngine::Transform*)>(&UnityEngine::Transform::Translate)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z, relativeTo});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::Rotate
// Il2CppName: Rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3, ::UnityEngine::Space)>(&UnityEngine::Transform::Rotate)> {
  static const MethodInfo* get() {
    static auto* eulers = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Space")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "Rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eulers, relativeTo});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::Rotate
// Il2CppName: Rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::Rotate)> {
  static const MethodInfo* get() {
    static auto* eulers = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "Rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eulers});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::Rotate
// Il2CppName: Rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(float, float, float, ::UnityEngine::Space)>(&UnityEngine::Transform::Rotate)> {
  static const MethodInfo* get() {
    static auto* xAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* yAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* zAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Space")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "Rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xAngle, yAngle, zAngle, relativeTo});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::Rotate
// Il2CppName: Rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(float, float, float)>(&UnityEngine::Transform::Rotate)> {
  static const MethodInfo* get() {
    static auto* xAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* yAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* zAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "Rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xAngle, yAngle, zAngle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::RotateAroundInternal
// Il2CppName: RotateAroundInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3, float)>(&UnityEngine::Transform::RotateAroundInternal)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "RotateAroundInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, angle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::Rotate
// Il2CppName: Rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3, float, ::UnityEngine::Space)>(&UnityEngine::Transform::Rotate)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Space")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "Rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, angle, relativeTo});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::Rotate
// Il2CppName: Rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3, float)>(&UnityEngine::Transform::Rotate)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "Rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, angle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::RotateAround
// Il2CppName: RotateAround
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&UnityEngine::Transform::RotateAround)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "RotateAround", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, axis, angle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::LookAt
// Il2CppName: LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&UnityEngine::Transform::LookAt)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, worldUp});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::LookAt
// Il2CppName: LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Transform*)>(&UnityEngine::Transform::LookAt)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::LookAt
// Il2CppName: LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&UnityEngine::Transform::LookAt)> {
  static const MethodInfo* get() {
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPosition, worldUp});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::LookAt
// Il2CppName: LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::LookAt)> {
  static const MethodInfo* get() {
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::Internal_LookAt
// Il2CppName: Internal_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&UnityEngine::Transform::Internal_LookAt)> {
  static const MethodInfo* get() {
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "Internal_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPosition, worldUp});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformDirection
// Il2CppName: TransformDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::TransformDirection)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformDirection
// Il2CppName: TransformDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)(float, float, float)>(&UnityEngine::Transform::TransformDirection)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformDirections
// Il2CppName: TransformDirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3*, int, ::UnityEngine::Vector3*, int)>(&UnityEngine::Transform::TransformDirections)> {
  static const MethodInfo* get() {
    static auto* directions = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* transformedDirections = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"))->byval_arg;
    static auto* transformedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformDirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{directions, count, transformedDirections, transformedCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformDirections
// Il2CppName: TransformDirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::System::ReadOnlySpan_1<::UnityEngine::Vector3>, ::System::Span_1<::UnityEngine::Vector3>)>(&UnityEngine::Transform::TransformDirections)> {
  static const MethodInfo* get() {
    static auto* directions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* transformedDirections = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformDirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{directions, transformedDirections});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformDirections
// Il2CppName: TransformDirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::System::Span_1<::UnityEngine::Vector3>)>(&UnityEngine::Transform::TransformDirections)> {
  static const MethodInfo* get() {
    static auto* directions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformDirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{directions});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformDirection
// Il2CppName: InverseTransformDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::InverseTransformDirection)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformDirection
// Il2CppName: InverseTransformDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)(float, float, float)>(&UnityEngine::Transform::InverseTransformDirection)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformDirections
// Il2CppName: InverseTransformDirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3*, int, ::UnityEngine::Vector3*, int)>(&UnityEngine::Transform::InverseTransformDirections)> {
  static const MethodInfo* get() {
    static auto* directions = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* transformedDirections = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"))->byval_arg;
    static auto* transformedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformDirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{directions, count, transformedDirections, transformedCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformDirections
// Il2CppName: InverseTransformDirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::System::ReadOnlySpan_1<::UnityEngine::Vector3>, ::System::Span_1<::UnityEngine::Vector3>)>(&UnityEngine::Transform::InverseTransformDirections)> {
  static const MethodInfo* get() {
    static auto* directions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* transformedDirections = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformDirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{directions, transformedDirections});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformDirections
// Il2CppName: InverseTransformDirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::System::Span_1<::UnityEngine::Vector3>)>(&UnityEngine::Transform::InverseTransformDirections)> {
  static const MethodInfo* get() {
    static auto* directions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformDirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{directions});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformVector
// Il2CppName: TransformVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::TransformVector)> {
  static const MethodInfo* get() {
    static auto* vector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vector});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformVector
// Il2CppName: TransformVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)(float, float, float)>(&UnityEngine::Transform::TransformVector)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformVectors
// Il2CppName: TransformVectors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3*, int, ::UnityEngine::Vector3*, int)>(&UnityEngine::Transform::TransformVectors)> {
  static const MethodInfo* get() {
    static auto* vectors = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* transformedVectors = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"))->byval_arg;
    static auto* transformedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformVectors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vectors, count, transformedVectors, transformedCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformVectors
// Il2CppName: TransformVectors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::System::ReadOnlySpan_1<::UnityEngine::Vector3>, ::System::Span_1<::UnityEngine::Vector3>)>(&UnityEngine::Transform::TransformVectors)> {
  static const MethodInfo* get() {
    static auto* vectors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* transformedVectors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformVectors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vectors, transformedVectors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformVectors
// Il2CppName: TransformVectors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::System::Span_1<::UnityEngine::Vector3>)>(&UnityEngine::Transform::TransformVectors)> {
  static const MethodInfo* get() {
    static auto* vectors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformVectors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vectors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformVector
// Il2CppName: InverseTransformVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::InverseTransformVector)> {
  static const MethodInfo* get() {
    static auto* vector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vector});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformVector
// Il2CppName: InverseTransformVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)(float, float, float)>(&UnityEngine::Transform::InverseTransformVector)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformVectors
// Il2CppName: InverseTransformVectors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3*, int, ::UnityEngine::Vector3*, int)>(&UnityEngine::Transform::InverseTransformVectors)> {
  static const MethodInfo* get() {
    static auto* vectors = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* transformedVectors = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"))->byval_arg;
    static auto* transformedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformVectors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vectors, count, transformedVectors, transformedCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformVectors
// Il2CppName: InverseTransformVectors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::System::ReadOnlySpan_1<::UnityEngine::Vector3>, ::System::Span_1<::UnityEngine::Vector3>)>(&UnityEngine::Transform::InverseTransformVectors)> {
  static const MethodInfo* get() {
    static auto* vectors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* transformedVectors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformVectors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vectors, transformedVectors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformVectors
// Il2CppName: InverseTransformVectors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::System::Span_1<::UnityEngine::Vector3>)>(&UnityEngine::Transform::InverseTransformVectors)> {
  static const MethodInfo* get() {
    static auto* vectors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformVectors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vectors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformPoint
// Il2CppName: TransformPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::TransformPoint)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformPoint
// Il2CppName: TransformPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)(float, float, float)>(&UnityEngine::Transform::TransformPoint)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformPoints
// Il2CppName: TransformPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3*, int, ::UnityEngine::Vector3*, int)>(&UnityEngine::Transform::TransformPoints)> {
  static const MethodInfo* get() {
    static auto* positions = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* transformedPositions = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"))->byval_arg;
    static auto* transformedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positions, count, transformedPositions, transformedCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformPoints
// Il2CppName: TransformPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::System::ReadOnlySpan_1<::UnityEngine::Vector3>, ::System::Span_1<::UnityEngine::Vector3>)>(&UnityEngine::Transform::TransformPoints)> {
  static const MethodInfo* get() {
    static auto* positions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* transformedPositions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positions, transformedPositions});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformPoints
// Il2CppName: TransformPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::System::Span_1<::UnityEngine::Vector3>)>(&UnityEngine::Transform::TransformPoints)> {
  static const MethodInfo* get() {
    static auto* positions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positions});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformPoint
// Il2CppName: InverseTransformPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)(::UnityEngine::Vector3)>(&UnityEngine::Transform::InverseTransformPoint)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformPoint
// Il2CppName: InverseTransformPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)(float, float, float)>(&UnityEngine::Transform::InverseTransformPoint)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformPoints
// Il2CppName: InverseTransformPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3*, int, ::UnityEngine::Vector3*, int)>(&UnityEngine::Transform::InverseTransformPoints)> {
  static const MethodInfo* get() {
    static auto* positions = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* transformedPositions = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"))->byval_arg;
    static auto* transformedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positions, count, transformedPositions, transformedCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformPoints
// Il2CppName: InverseTransformPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::System::ReadOnlySpan_1<::UnityEngine::Vector3>, ::System::Span_1<::UnityEngine::Vector3>)>(&UnityEngine::Transform::InverseTransformPoints)> {
  static const MethodInfo* get() {
    static auto* positions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* transformedPositions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positions, transformedPositions});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformPoints
// Il2CppName: InverseTransformPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::System::Span_1<::UnityEngine::Vector3>)>(&UnityEngine::Transform::InverseTransformPoints)> {
  static const MethodInfo* get() {
    static auto* positions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positions});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_root
// Il2CppName: get_root
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_root)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_root", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::GetRoot
// Il2CppName: GetRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Transform::*)()>(&UnityEngine::Transform::GetRoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "GetRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_childCount
// Il2CppName: get_childCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_childCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_childCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::DetachChildren
// Il2CppName: DetachChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)()>(&UnityEngine::Transform::DetachChildren)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "DetachChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SetAsFirstSibling
// Il2CppName: SetAsFirstSibling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)()>(&UnityEngine::Transform::SetAsFirstSibling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SetAsFirstSibling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SetAsLastSibling
// Il2CppName: SetAsLastSibling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)()>(&UnityEngine::Transform::SetAsLastSibling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SetAsLastSibling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SetSiblingIndex
// Il2CppName: SetSiblingIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(int)>(&UnityEngine::Transform::SetSiblingIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SetSiblingIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::MoveAfterSibling
// Il2CppName: MoveAfterSibling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Transform*, bool)>(&UnityEngine::Transform::MoveAfterSibling)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* notifyEditorAndMarkDirty = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "MoveAfterSibling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, notifyEditorAndMarkDirty});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::GetSiblingIndex
// Il2CppName: GetSiblingIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Transform::*)()>(&UnityEngine::Transform::GetSiblingIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "GetSiblingIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::FindRelativeTransformWithPath
// Il2CppName: FindRelativeTransformWithPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (*)(::UnityEngine::Transform*, ::StringW, bool)>(&UnityEngine::Transform::FindRelativeTransformWithPath)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isActiveOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "FindRelativeTransformWithPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, path, isActiveOnly});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::Find
// Il2CppName: Find
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Transform::*)(::StringW)>(&UnityEngine::Transform::Find)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "Find", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SendTransformChangedScale
// Il2CppName: SendTransformChangedScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)()>(&UnityEngine::Transform::SendTransformChangedScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SendTransformChangedScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_lossyScale
// Il2CppName: get_lossyScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_lossyScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_lossyScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::IsChildOf
// Il2CppName: IsChildOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Transform::*)(::UnityEngine::Transform*)>(&UnityEngine::Transform::IsChildOf)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "IsChildOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_hasChanged
// Il2CppName: get_hasChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_hasChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_hasChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_hasChanged
// Il2CppName: set_hasChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(bool)>(&UnityEngine::Transform::set_hasChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_hasChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::FindChild
// Il2CppName: FindChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Transform::*)(::StringW)>(&UnityEngine::Transform::FindChild)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "FindChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (UnityEngine::Transform::*)()>(&UnityEngine::Transform::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::RotateAround
// Il2CppName: RotateAround
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3, float)>(&UnityEngine::Transform::RotateAround)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "RotateAround", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, angle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::RotateAroundLocal
// Il2CppName: RotateAroundLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::Vector3, float)>(&UnityEngine::Transform::RotateAroundLocal)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "RotateAroundLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, angle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::GetChild
// Il2CppName: GetChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Transform::*)(int)>(&UnityEngine::Transform::GetChild)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "GetChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::GetChildCount
// Il2CppName: GetChildCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Transform::*)()>(&UnityEngine::Transform::GetChildCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "GetChildCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_hierarchyCapacity
// Il2CppName: get_hierarchyCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_hierarchyCapacity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_hierarchyCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_hierarchyCapacity
// Il2CppName: set_hierarchyCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(int)>(&UnityEngine::Transform::set_hierarchyCapacity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_hierarchyCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::internal_getHierarchyCapacity
// Il2CppName: internal_getHierarchyCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Transform::*)()>(&UnityEngine::Transform::internal_getHierarchyCapacity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "internal_getHierarchyCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::internal_setHierarchyCapacity
// Il2CppName: internal_setHierarchyCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(int)>(&UnityEngine::Transform::internal_setHierarchyCapacity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "internal_setHierarchyCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_hierarchyCount
// Il2CppName: get_hierarchyCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_hierarchyCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_hierarchyCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::internal_getHierarchyCount
// Il2CppName: internal_getHierarchyCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Transform::*)()>(&UnityEngine::Transform::internal_getHierarchyCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "internal_getHierarchyCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::IsNonUniformScaleTransform
// Il2CppName: IsNonUniformScaleTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Transform::*)()>(&UnityEngine::Transform::IsNonUniformScaleTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "IsNonUniformScaleTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_constrainProportionsScale
// Il2CppName: get_constrainProportionsScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Transform::*)()>(&UnityEngine::Transform::get_constrainProportionsScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_constrainProportionsScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_constrainProportionsScale
// Il2CppName: set_constrainProportionsScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(bool)>(&UnityEngine::Transform::set_constrainProportionsScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_constrainProportionsScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SetConstrainProportionsScale
// Il2CppName: SetConstrainProportionsScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(bool)>(&UnityEngine::Transform::SetConstrainProportionsScale)> {
  static const MethodInfo* get() {
    static auto* isLinked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SetConstrainProportionsScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLinked});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::IsConstrainProportionsScale
// Il2CppName: IsConstrainProportionsScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Transform::*)()>(&UnityEngine::Transform::IsConstrainProportionsScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "IsConstrainProportionsScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_position_Injected
// Il2CppName: get_position_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::get_position_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_position_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_position_Injected
// Il2CppName: set_position_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::set_position_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_position_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_localPosition_Injected
// Il2CppName: get_localPosition_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::get_localPosition_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_localPosition_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_localPosition_Injected
// Il2CppName: set_localPosition_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::set_localPosition_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_localPosition_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::GetLocalEulerAngles_Injected
// Il2CppName: GetLocalEulerAngles_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(::UnityEngine::RotationOrder, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::GetLocalEulerAngles_Injected)> {
  static const MethodInfo* get() {
    static auto* order = &::il2cpp_utils::GetClassFromName("UnityEngine", "RotationOrder")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "GetLocalEulerAngles_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{order, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SetLocalEulerAngles_Injected
// Il2CppName: SetLocalEulerAngles_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>, ::UnityEngine::RotationOrder)>(&UnityEngine::Transform::SetLocalEulerAngles_Injected)> {
  static const MethodInfo* get() {
    static auto* euler = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* order = &::il2cpp_utils::GetClassFromName("UnityEngine", "RotationOrder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SetLocalEulerAngles_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{euler, order});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SetLocalEulerHint_Injected
// Il2CppName: SetLocalEulerHint_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::SetLocalEulerHint_Injected)> {
  static const MethodInfo* get() {
    static auto* euler = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SetLocalEulerHint_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{euler});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_rotation_Injected
// Il2CppName: get_rotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Transform::get_rotation_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_rotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_rotation_Injected
// Il2CppName: set_rotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Transform::set_rotation_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_rotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_localRotation_Injected
// Il2CppName: get_localRotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Transform::get_localRotation_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_localRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_localRotation_Injected
// Il2CppName: set_localRotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Transform::set_localRotation_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_localRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_localScale_Injected
// Il2CppName: get_localScale_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::get_localScale_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_localScale_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::set_localScale_Injected
// Il2CppName: set_localScale_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::set_localScale_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "set_localScale_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_worldToLocalMatrix_Injected
// Il2CppName: get_worldToLocalMatrix_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Matrix4x4>)>(&UnityEngine::Transform::get_worldToLocalMatrix_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_worldToLocalMatrix_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_localToWorldMatrix_Injected
// Il2CppName: get_localToWorldMatrix_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Matrix4x4>)>(&UnityEngine::Transform::get_localToWorldMatrix_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_localToWorldMatrix_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SetPositionAndRotation_Injected
// Il2CppName: SetPositionAndRotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Transform::SetPositionAndRotation_Injected)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SetPositionAndRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::SetLocalPositionAndRotation_Injected
// Il2CppName: SetLocalPositionAndRotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Transform::SetLocalPositionAndRotation_Injected)> {
  static const MethodInfo* get() {
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "SetLocalPositionAndRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPosition, localRotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::RotateAroundInternal_Injected
// Il2CppName: RotateAroundInternal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>, float)>(&UnityEngine::Transform::RotateAroundInternal_Injected)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "RotateAroundInternal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, angle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::Internal_LookAt_Injected
// Il2CppName: Internal_LookAt_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::Internal_LookAt_Injected)> {
  static const MethodInfo* get() {
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "Internal_LookAt_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPosition, worldUp});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformDirection_Injected
// Il2CppName: TransformDirection_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::TransformDirection_Injected)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformDirection_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformDirection_Injected
// Il2CppName: InverseTransformDirection_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::InverseTransformDirection_Injected)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformDirection_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformVector_Injected
// Il2CppName: TransformVector_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::TransformVector_Injected)> {
  static const MethodInfo* get() {
    static auto* vector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformVector_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vector, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformVector_Injected
// Il2CppName: InverseTransformVector_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::InverseTransformVector_Injected)> {
  static const MethodInfo* get() {
    static auto* vector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformVector_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vector, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::TransformPoint_Injected
// Il2CppName: TransformPoint_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::TransformPoint_Injected)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "TransformPoint_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::InverseTransformPoint_Injected
// Il2CppName: InverseTransformPoint_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::InverseTransformPoint_Injected)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "InverseTransformPoint_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::get_lossyScale_Injected
// Il2CppName: get_lossyScale_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Transform::get_lossyScale_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "get_lossyScale_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::RotateAround_Injected
// Il2CppName: RotateAround_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>, float)>(&UnityEngine::Transform::RotateAround_Injected)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "RotateAround_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, angle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::RotateAroundLocal_Injected
// Il2CppName: RotateAroundLocal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Transform::*)(ByRef<::UnityEngine::Vector3>, float)>(&UnityEngine::Transform::RotateAroundLocal_Injected)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Transform*), "RotateAroundLocal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, angle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Transform::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
