// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.Controls.ButtonControl
#include "UnityEngine/InputSystem/Controls/ButtonControl.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.InputSystem.Controls
namespace UnityEngine::InputSystem::Controls {
  // Forward declaring type: DiscreteButtonControl
  class DiscreteButtonControl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::Controls::DiscreteButtonControl);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Controls::DiscreteButtonControl*, "UnityEngine.InputSystem.Controls", "DiscreteButtonControl");
// Type namespace: UnityEngine.InputSystem.Controls
namespace UnityEngine::InputSystem::Controls {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.InputSystem.Controls.DiscreteButtonControl
  // [TokenAttribute] Offset: FFFFFFFF
  class DiscreteButtonControl : public ::UnityEngine::InputSystem::Controls::ButtonControl {
    public:
    // Nested type: ::UnityEngine::InputSystem::Controls::DiscreteButtonControl::WriteMode
    struct WriteMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.Controls.DiscreteButtonControl/WriteMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct WriteMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: WriteMode
      constexpr WriteMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.Controls.DiscreteButtonControl/WriteMode WriteDisabled
      static constexpr const int WriteDisabled = 0;
      // Get static field: static public UnityEngine.InputSystem.Controls.DiscreteButtonControl/WriteMode WriteDisabled
      static ::UnityEngine::InputSystem::Controls::DiscreteButtonControl::WriteMode _get_WriteDisabled();
      // Set static field: static public UnityEngine.InputSystem.Controls.DiscreteButtonControl/WriteMode WriteDisabled
      static void _set_WriteDisabled(::UnityEngine::InputSystem::Controls::DiscreteButtonControl::WriteMode value);
      // static field const value: static public UnityEngine.InputSystem.Controls.DiscreteButtonControl/WriteMode WriteNullAndMaxValue
      static constexpr const int WriteNullAndMaxValue = 1;
      // Get static field: static public UnityEngine.InputSystem.Controls.DiscreteButtonControl/WriteMode WriteNullAndMaxValue
      static ::UnityEngine::InputSystem::Controls::DiscreteButtonControl::WriteMode _get_WriteNullAndMaxValue();
      // Set static field: static public UnityEngine.InputSystem.Controls.DiscreteButtonControl/WriteMode WriteNullAndMaxValue
      static void _set_WriteNullAndMaxValue(::UnityEngine::InputSystem::Controls::DiscreteButtonControl::WriteMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.Controls.DiscreteButtonControl/WriteMode
    #pragma pack(pop)
    static check_size<sizeof(DiscreteButtonControl::WriteMode), 0 + sizeof(int)> __UnityEngine_InputSystem_Controls_DiscreteButtonControl_WriteModeSizeCheck;
    static_assert(sizeof(DiscreteButtonControl::WriteMode) == 0x4);
    public:
    // public System.Int32 minValue
    // Size: 0x4
    // Offset: 0x130
    int minValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 maxValue
    // Size: 0x4
    // Offset: 0x134
    int maxValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 wrapAtValue
    // Size: 0x4
    // Offset: 0x138
    int wrapAtValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 nullValue
    // Size: 0x4
    // Offset: 0x13C
    int nullValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.InputSystem.Controls.DiscreteButtonControl/WriteMode writeMode
    // Size: 0x4
    // Offset: 0x140
    ::UnityEngine::InputSystem::Controls::DiscreteButtonControl::WriteMode writeMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::DiscreteButtonControl::WriteMode) == 0x4);
    public:
    // Deleting conversion operator: operator float
    constexpr operator float() const noexcept = delete;
    // Get instance field reference: public System.Int32 minValue
    [[deprecated("Use field access instead!")]] int& dyn_minValue();
    // Get instance field reference: public System.Int32 maxValue
    [[deprecated("Use field access instead!")]] int& dyn_maxValue();
    // Get instance field reference: public System.Int32 wrapAtValue
    [[deprecated("Use field access instead!")]] int& dyn_wrapAtValue();
    // Get instance field reference: public System.Int32 nullValue
    [[deprecated("Use field access instead!")]] int& dyn_nullValue();
    // Get instance field reference: public UnityEngine.InputSystem.Controls.DiscreteButtonControl/WriteMode writeMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::DiscreteButtonControl::WriteMode& dyn_writeMode();
    // protected override System.Void FinishSetup()
    // Offset: 0x516C728
    // Implemented from: UnityEngine.InputSystem.Controls.AxisControl
    // Base method: System.Void AxisControl::FinishSetup()
    void FinishSetup();
    // public override System.Single ReadUnprocessedValueFromState(System.Void* statePtr)
    // Offset: 0x516C7CC
    // Implemented from: UnityEngine.InputSystem.Controls.AxisControl
    // Base method: System.Single AxisControl::ReadUnprocessedValueFromState(System.Void* statePtr)
    float ReadUnprocessedValueFromState(void* statePtr);
    // public override System.Void WriteValueIntoState(System.Single value, System.Void* statePtr)
    // Offset: 0x516C928
    // Implemented from: UnityEngine.InputSystem.Controls.AxisControl
    // Base method: System.Void AxisControl::WriteValueIntoState(System.Single value, System.Void* statePtr)
    void WriteValueIntoState(float value, void* statePtr);
    // public System.Void .ctor()
    // Offset: 0x516CA10
    // Implemented from: UnityEngine.InputSystem.Controls.ButtonControl
    // Base method: System.Void ButtonControl::.ctor()
    // Base method: System.Void AxisControl::.ctor()
    // Base method: System.Void InputControl_1::.ctor()
    // Base method: System.Void InputControl::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DiscreteButtonControl* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Controls::DiscreteButtonControl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DiscreteButtonControl*, creationType>()));
    }
  }; // UnityEngine.InputSystem.Controls.DiscreteButtonControl
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Controls::DiscreteButtonControl::WriteMode, "UnityEngine.InputSystem.Controls", "DiscreteButtonControl/WriteMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Controls::DiscreteButtonControl::FinishSetup
// Il2CppName: FinishSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Controls::DiscreteButtonControl::*)()>(&UnityEngine::InputSystem::Controls::DiscreteButtonControl::FinishSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Controls::DiscreteButtonControl*), "FinishSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Controls::DiscreteButtonControl::ReadUnprocessedValueFromState
// Il2CppName: ReadUnprocessedValueFromState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::Controls::DiscreteButtonControl::*)(void*)>(&UnityEngine::InputSystem::Controls::DiscreteButtonControl::ReadUnprocessedValueFromState)> {
  static const MethodInfo* get() {
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Controls::DiscreteButtonControl*), "ReadUnprocessedValueFromState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statePtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Controls::DiscreteButtonControl::WriteValueIntoState
// Il2CppName: WriteValueIntoState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Controls::DiscreteButtonControl::*)(float, void*)>(&UnityEngine::InputSystem::Controls::DiscreteButtonControl::WriteValueIntoState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Controls::DiscreteButtonControl*), "WriteValueIntoState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, statePtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Controls::DiscreteButtonControl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
