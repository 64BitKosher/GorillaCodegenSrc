// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.Layouts.InputControlLayout/Collection
#include "UnityEngine/InputSystem/Layouts/InputControlLayout.hpp"
// Including type: UnityEngine.InputSystem.Utilities.TypeTable
#include "UnityEngine/InputSystem/Utilities/TypeTable.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputUpdateType
#include "UnityEngine/InputSystem/LowLevel/InputUpdateType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputStateBuffers
#include "UnityEngine/InputSystem/LowLevel/InputStateBuffers.hpp"
// Including type: UnityEngine.InputSystem.Utilities.CallbackArray`1
#include "UnityEngine/InputSystem/Utilities/CallbackArray_1.hpp"
// Including type: UnityEngine.InputSystem.InputDeviceChange
#include "UnityEngine/InputSystem/InputDeviceChange.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEventPtr
#include "UnityEngine/InputSystem/LowLevel/InputEventPtr.hpp"
// Including type: UnityEngine.InputSystem.InputControlLayoutChange
#include "UnityEngine/InputSystem/InputControlLayoutChange.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEventStream
#include "UnityEngine/InputSystem/LowLevel/InputEventStream.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputMetrics
#include "UnityEngine/InputSystem/LowLevel/InputMetrics.hpp"
// Including type: UnityEngine.InputSystem.InputControlList`1
#include "UnityEngine/InputSystem/InputControlList_1.hpp"
// Including type: UnityEngine.InputSystem.InputDevice
#include "UnityEngine/InputSystem/InputDevice.hpp"
// Including type: UnityEngine.InputSystem.Utilities.MemoryHelpers/BitRegion
#include "UnityEngine/InputSystem/Utilities/MemoryHelpers_BitRegion.hpp"
// Including type: UnityEngine.InputSystem.DynamicBitfield
#include "UnityEngine/InputSystem/DynamicBitfield.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Skipping declaration: StateChangeMonitorListener because it is already included!
  // Forward declaring type: InputSettings
  class InputSettings;
  // Skipping declaration: InputControl because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: ReadOnlyArray`1<TValue>
  template<typename TValue>
  struct ReadOnlyArray_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Skipping declaration: IEnumerable`1 because it is already included!
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::InputSystem::Layouts
namespace UnityEngine::InputSystem::Layouts {
  // Forward declaring type: InputDeviceFindControlLayoutDelegate
  class InputDeviceFindControlLayoutDelegate;
  // Skipping declaration: InputControlLayout because it is already included!
  // Skipping declaration: InputDeviceMatcher because it is already included!
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputDeviceCommandDelegate
  class InputDeviceCommandDelegate;
  // Forward declaring type: InputDeviceExecuteCommandDelegate
  class InputDeviceExecuteCommandDelegate;
  // Forward declaring type: IInputRuntime
  class IInputRuntime;
  // Forward declaring type: InputEvent
  struct InputEvent;
  // Forward declaring type: IInputEventTypeInfo
  class IInputEventTypeInfo;
  // Forward declaring type: IInputDeviceCommandInfo
  class IInputDeviceCommandInfo;
  // Skipping declaration: InputEventBuffer because it is already included!
  // Skipping declaration: InputStateBlock because it is already included!
  // Forward declaring type: IInputStateChangeMonitor
  class IInputStateChangeMonitor;
  // Forward declaring type: InputDeviceCommand
  struct InputDeviceCommand;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputManager
  class InputManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::InputManager);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputManager*, "UnityEngine.InputSystem", "InputManager");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.InputSystem.InputManager
  // [TokenAttribute] Offset: FFFFFFFF
  class InputManager : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::InputSystem::InputManager::DeviceDisableScope
    struct DeviceDisableScope;
    // Nested type: ::UnityEngine::InputSystem::InputManager::AvailableDevice
    struct AvailableDevice;
    // Nested type: ::UnityEngine::InputSystem::InputManager::StateChangeMonitorTimeout
    struct StateChangeMonitorTimeout;
    // Nested type: ::UnityEngine::InputSystem::InputManager::StateChangeMonitorListener
    struct StateChangeMonitorListener;
    // Nested type: ::UnityEngine::InputSystem::InputManager::StateChangeMonitorsForDevice
    struct StateChangeMonitorsForDevice;
    // Nested type: ::UnityEngine::InputSystem::InputManager::$$c
    class $$c;
    // Nested type: ::UnityEngine::InputSystem::InputManager::$$c__60_1<TDevice>
    template<typename TDevice>
    class $$c__60_1;
    // Nested type: ::UnityEngine::InputSystem::InputManager::$ListControlLayouts$d__75
    class $ListControlLayouts$d__75;
    // Size: 0x3E
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.InputManager/AvailableDevice
    // [TokenAttribute] Offset: FFFFFFFF
    struct AvailableDevice/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.InputSystem.Layouts.InputDeviceDescription description
      // Size: 0x38
      // Offset: 0x0
      ::UnityEngine::InputSystem::Layouts::InputDeviceDescription description;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::Layouts::InputDeviceDescription) == 0x38);
      // public System.Int32 deviceId
      // Size: 0x4
      // Offset: 0x38
      int deviceId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Boolean isNative
      // Size: 0x1
      // Offset: 0x3C
      bool isNative;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean isRemoved
      // Size: 0x1
      // Offset: 0x3D
      bool isRemoved;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: AvailableDevice
      constexpr AvailableDevice(::UnityEngine::InputSystem::Layouts::InputDeviceDescription description_ = {}, int deviceId_ = {}, bool isNative_ = {}, bool isRemoved_ = {}) noexcept : description{description_}, deviceId{deviceId_}, isNative{isNative_}, isRemoved{isRemoved_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.InputSystem.Layouts.InputDeviceDescription description
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Layouts::InputDeviceDescription& dyn_description();
      // Get instance field reference: public System.Int32 deviceId
      [[deprecated("Use field access instead!")]] int& dyn_deviceId();
      // Get instance field reference: public System.Boolean isNative
      [[deprecated("Use field access instead!")]] bool& dyn_isNative();
      // Get instance field reference: public System.Boolean isRemoved
      [[deprecated("Use field access instead!")]] bool& dyn_isRemoved();
    }; // UnityEngine.InputSystem.InputManager/AvailableDevice
    #pragma pack(pop)
    static check_size<sizeof(InputManager::AvailableDevice), 61 + sizeof(bool)> __UnityEngine_InputSystem_InputManager_AvailableDeviceSizeCheck;
    static_assert(sizeof(InputManager::AvailableDevice) == 0x3E);
    // Size: 0x24
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.InputManager/StateChangeMonitorTimeout
    // [TokenAttribute] Offset: FFFFFFFF
    struct StateChangeMonitorTimeout/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.InputSystem.InputControl control
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::InputSystem::InputControl* control;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::InputControl*) == 0x8);
      // public System.Double time
      // Size: 0x8
      // Offset: 0x8
      double time;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      // public UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor
      // Size: 0x8
      // Offset: 0x10
      ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor* monitor;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor*) == 0x8);
      // public System.Int64 monitorIndex
      // Size: 0x8
      // Offset: 0x18
      int64_t monitorIndex;
      // Field size check
      static_assert(sizeof(int64_t) == 0x8);
      // public System.Int32 timerIndex
      // Size: 0x4
      // Offset: 0x20
      int timerIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: StateChangeMonitorTimeout
      constexpr StateChangeMonitorTimeout(::UnityEngine::InputSystem::InputControl* control_ = {}, double time_ = {}, ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor* monitor_ = {}, int64_t monitorIndex_ = {}, int timerIndex_ = {}) noexcept : control{control_}, time{time_}, monitor{monitor_}, monitorIndex{monitorIndex_}, timerIndex{timerIndex_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.InputSystem.InputControl control
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputControl*& dyn_control();
      // Get instance field reference: public System.Double time
      [[deprecated("Use field access instead!")]] double& dyn_time();
      // Get instance field reference: public UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor*& dyn_monitor();
      // Get instance field reference: public System.Int64 monitorIndex
      [[deprecated("Use field access instead!")]] int64_t& dyn_monitorIndex();
      // Get instance field reference: public System.Int32 timerIndex
      [[deprecated("Use field access instead!")]] int& dyn_timerIndex();
    }; // UnityEngine.InputSystem.InputManager/StateChangeMonitorTimeout
    #pragma pack(pop)
    static check_size<sizeof(InputManager::StateChangeMonitorTimeout), 32 + sizeof(int)> __UnityEngine_InputSystem_InputManager_StateChangeMonitorTimeoutSizeCheck;
    static_assert(sizeof(InputManager::StateChangeMonitorTimeout) == 0x24);
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.InputManager/StateChangeMonitorListener
    // [TokenAttribute] Offset: FFFFFFFF
    struct StateChangeMonitorListener/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.InputSystem.InputControl control
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::InputSystem::InputControl* control;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::InputControl*) == 0x8);
      // public UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor* monitor;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor*) == 0x8);
      // public System.Int64 monitorIndex
      // Size: 0x8
      // Offset: 0x10
      int64_t monitorIndex;
      // Field size check
      static_assert(sizeof(int64_t) == 0x8);
      // public System.UInt32 groupIndex
      // Size: 0x4
      // Offset: 0x18
      uint groupIndex;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      public:
      // Creating value type constructor for type: StateChangeMonitorListener
      constexpr StateChangeMonitorListener(::UnityEngine::InputSystem::InputControl* control_ = {}, ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor* monitor_ = {}, int64_t monitorIndex_ = {}, uint groupIndex_ = {}) noexcept : control{control_}, monitor{monitor_}, monitorIndex{monitorIndex_}, groupIndex{groupIndex_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.InputSystem.InputControl control
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputControl*& dyn_control();
      // Get instance field reference: public UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor*& dyn_monitor();
      // Get instance field reference: public System.Int64 monitorIndex
      [[deprecated("Use field access instead!")]] int64_t& dyn_monitorIndex();
      // Get instance field reference: public System.UInt32 groupIndex
      [[deprecated("Use field access instead!")]] uint& dyn_groupIndex();
    }; // UnityEngine.InputSystem.InputManager/StateChangeMonitorListener
    #pragma pack(pop)
    static check_size<sizeof(InputManager::StateChangeMonitorListener), 24 + sizeof(uint)> __UnityEngine_InputSystem_InputManager_StateChangeMonitorListenerSizeCheck;
    static_assert(sizeof(InputManager::StateChangeMonitorListener) == 0x1C);
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.InputManager/StateChangeMonitorsForDevice
    // [TokenAttribute] Offset: FFFFFFFF
    struct StateChangeMonitorsForDevice/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.InputSystem.Utilities.MemoryHelpers/BitRegion[] memoryRegions
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<::UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion> memoryRegions;
      // Field size check
      static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion>) == 0x8);
      // public UnityEngine.InputSystem.InputManager/StateChangeMonitorListener[] listeners
      // Size: 0x8
      // Offset: 0x8
      ::ArrayW<::UnityEngine::InputSystem::InputManager::StateChangeMonitorListener> listeners;
      // Field size check
      static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputManager::StateChangeMonitorListener>) == 0x8);
      // public UnityEngine.InputSystem.DynamicBitfield signalled
      // Size: 0xFFFFFFFF
      // Offset: 0x10
      ::UnityEngine::InputSystem::DynamicBitfield signalled;
      // public System.Boolean needToUpdateOrderingOfMonitors
      // Size: 0x1
      // Offset: 0x30
      bool needToUpdateOrderingOfMonitors;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean needToCompactArrays
      // Size: 0x1
      // Offset: 0x31
      bool needToCompactArrays;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: StateChangeMonitorsForDevice
      constexpr StateChangeMonitorsForDevice(::ArrayW<::UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion> memoryRegions_ = ::ArrayW<::UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::InputSystem::InputManager::StateChangeMonitorListener> listeners_ = ::ArrayW<::UnityEngine::InputSystem::InputManager::StateChangeMonitorListener>(static_cast<void*>(nullptr)), ::UnityEngine::InputSystem::DynamicBitfield signalled_ = {}, bool needToUpdateOrderingOfMonitors_ = {}, bool needToCompactArrays_ = {}) noexcept : memoryRegions{memoryRegions_}, listeners{listeners_}, signalled{signalled_}, needToUpdateOrderingOfMonitors{needToUpdateOrderingOfMonitors_}, needToCompactArrays{needToCompactArrays_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.InputSystem.Utilities.MemoryHelpers/BitRegion[] memoryRegions
      [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion>& dyn_memoryRegions();
      // Get instance field reference: public UnityEngine.InputSystem.InputManager/StateChangeMonitorListener[] listeners
      [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputManager::StateChangeMonitorListener>& dyn_listeners();
      // Get instance field reference: public UnityEngine.InputSystem.DynamicBitfield signalled
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::DynamicBitfield& dyn_signalled();
      // Get instance field reference: public System.Boolean needToUpdateOrderingOfMonitors
      [[deprecated("Use field access instead!")]] bool& dyn_needToUpdateOrderingOfMonitors();
      // Get instance field reference: public System.Boolean needToCompactArrays
      [[deprecated("Use field access instead!")]] bool& dyn_needToCompactArrays();
      // public System.Int32 get_count()
      // Offset: 0x511787C
      int get_count();
      // public System.Void Add(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Int64 monitorIndex, System.UInt32 groupIndex)
      // Offset: 0x5117884
      void Add(::UnityEngine::InputSystem::InputControl* control, ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor* monitor, int64_t monitorIndex, uint groupIndex);
      // public System.Void Remove(UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Int64 monitorIndex, System.Boolean deferRemoval)
      // Offset: 0x5117A40
      void Remove(::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor* monitor, int64_t monitorIndex, bool deferRemoval);
      // public System.Void Clear()
      // Offset: 0x5117C38
      void Clear();
      // public System.Void CompactArrays()
      // Offset: 0x5117C9C
      void CompactArrays();
      // private System.Void RemoveAt(System.Int32 i)
      // Offset: 0x5117B8C
      void RemoveAt(int i);
      // public System.Void SortMonitorsByIndex()
      // Offset: 0x5117D00
      void SortMonitorsByIndex();
    }; // UnityEngine.InputSystem.InputManager/StateChangeMonitorsForDevice
    // WARNING Not writing size check since size may be invalid!
    public:
    // System.Int32 m_LayoutRegistrationVersion
    // Size: 0x4
    // Offset: 0x10
    int m_LayoutRegistrationVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_PollingFrequency
    // Size: 0x4
    // Offset: 0x14
    float m_PollingFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // UnityEngine.InputSystem.Layouts.InputControlLayout/Collection m_Layouts
    // Size: 0x40
    // Offset: 0x18
    ::UnityEngine::InputSystem::Layouts::InputControlLayout::Collection m_Layouts;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Layouts::InputControlLayout::Collection) == 0x40);
    // private UnityEngine.InputSystem.Utilities.TypeTable m_Processors
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::InputSystem::Utilities::TypeTable m_Processors;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Utilities::TypeTable) == 0x8);
    // private UnityEngine.InputSystem.Utilities.TypeTable m_Interactions
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::InputSystem::Utilities::TypeTable m_Interactions;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Utilities::TypeTable) == 0x8);
    // private UnityEngine.InputSystem.Utilities.TypeTable m_Composites
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::InputSystem::Utilities::TypeTable m_Composites;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Utilities::TypeTable) == 0x8);
    // private System.Int32 m_DevicesCount
    // Size: 0x4
    // Offset: 0x70
    int m_DevicesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.InputSystem.InputDevice[] m_Devices
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::UnityEngine::InputSystem::InputDevice*> m_Devices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputDevice*>) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.InputSystem.InputDevice> m_DevicesById
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::InputSystem::InputDevice*>* m_DevicesById;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::InputSystem::InputDevice*>*) == 0x8);
    // System.Int32 m_AvailableDeviceCount
    // Size: 0x4
    // Offset: 0x88
    int m_AvailableDeviceCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.InputSystem.InputManager/AvailableDevice[] m_AvailableDevices
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<::UnityEngine::InputSystem::InputManager::AvailableDevice> m_AvailableDevices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputManager::AvailableDevice>) == 0x8);
    // System.Int32 m_DisconnectedDevicesCount
    // Size: 0x4
    // Offset: 0x98
    int m_DisconnectedDevicesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.InputSystem.InputDevice[] m_DisconnectedDevices
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<::UnityEngine::InputSystem::InputDevice*> m_DisconnectedDevices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputDevice*>) == 0x8);
    // UnityEngine.InputSystem.LowLevel.InputUpdateType m_UpdateMask
    // Size: 0x4
    // Offset: 0xA8
    ::UnityEngine::InputSystem::LowLevel::InputUpdateType m_UpdateMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputUpdateType) == 0x4);
    // private UnityEngine.InputSystem.LowLevel.InputUpdateType m_CurrentUpdate
    // Size: 0x4
    // Offset: 0xAC
    ::UnityEngine::InputSystem::LowLevel::InputUpdateType m_CurrentUpdate;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputUpdateType) == 0x4);
    // UnityEngine.InputSystem.LowLevel.InputStateBuffers m_StateBuffers
    // Size: 0x30
    // Offset: 0xB0
    ::UnityEngine::InputSystem::LowLevel::InputStateBuffers m_StateBuffers;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputStateBuffers) == 0x30);
    // private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action`2<UnityEngine.InputSystem.InputDevice,UnityEngine.InputSystem.InputDeviceChange>> m_DeviceChangeListeners
    // Size: 0xFFFFFFFF
    // Offset: 0xE0
    ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_2<::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::InputDeviceChange>*> m_DeviceChangeListeners;
    // private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action`2<UnityEngine.InputSystem.InputDevice,UnityEngine.InputSystem.LowLevel.InputEventPtr>> m_DeviceStateChangeListeners
    // Size: 0xFFFFFFFF
    // Offset: 0x130
    ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_2<::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr>*> m_DeviceStateChangeListeners;
    // private UnityEngine.InputSystem.Utilities.CallbackArray`1<UnityEngine.InputSystem.Layouts.InputDeviceFindControlLayoutDelegate> m_DeviceFindLayoutCallbacks
    // Size: 0xFFFFFFFF
    // Offset: 0x180
    ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::UnityEngine::InputSystem::Layouts::InputDeviceFindControlLayoutDelegate*> m_DeviceFindLayoutCallbacks;
    // UnityEngine.InputSystem.Utilities.CallbackArray`1<UnityEngine.InputSystem.LowLevel.InputDeviceCommandDelegate> m_DeviceCommandCallbacks
    // Size: 0xFFFFFFFF
    // Offset: 0x1D0
    ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::UnityEngine::InputSystem::LowLevel::InputDeviceCommandDelegate*> m_DeviceCommandCallbacks;
    // private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action`2<System.String,UnityEngine.InputSystem.InputControlLayoutChange>> m_LayoutChangeListeners
    // Size: 0xFFFFFFFF
    // Offset: 0x220
    ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_2<::StringW, ::UnityEngine::InputSystem::InputControlLayoutChange>*> m_LayoutChangeListeners;
    // private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action`2<UnityEngine.InputSystem.LowLevel.InputEventPtr,UnityEngine.InputSystem.InputDevice>> m_EventListeners
    // Size: 0xFFFFFFFF
    // Offset: 0x270
    ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_2<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*>*> m_EventListeners;
    // private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action> m_BeforeUpdateListeners
    // Size: 0xFFFFFFFF
    // Offset: 0x2C0
    ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action*> m_BeforeUpdateListeners;
    // private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action> m_AfterUpdateListeners
    // Size: 0xFFFFFFFF
    // Offset: 0x310
    ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action*> m_AfterUpdateListeners;
    // private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action> m_SettingsChangedListeners
    // Size: 0xFFFFFFFF
    // Offset: 0x360
    ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action*> m_SettingsChangedListeners;
    // private System.Boolean m_NativeBeforeUpdateHooked
    // Size: 0x1
    // Offset: 0x3B0
    bool m_NativeBeforeUpdateHooked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_HaveDevicesWithStateCallbackReceivers
    // Size: 0x1
    // Offset: 0x3B1
    bool m_HaveDevicesWithStateCallbackReceivers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_HasFocus
    // Size: 0x1
    // Offset: 0x3B2
    bool m_HasFocus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.InputSystem.LowLevel.InputEventStream m_InputEventStream
    // Size: 0xFFFFFFFF
    // Offset: 0x3B8
    ::UnityEngine::InputSystem::LowLevel::InputEventStream m_InputEventStream;
    // private UnityEngine.InputSystem.LowLevel.InputDeviceExecuteCommandDelegate m_DeviceFindExecuteCommandDelegate
    // Size: 0x8
    // Offset: 0x430
    ::UnityEngine::InputSystem::LowLevel::InputDeviceExecuteCommandDelegate* m_DeviceFindExecuteCommandDelegate;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputDeviceExecuteCommandDelegate*) == 0x8);
    // private System.Int32 m_DeviceFindExecuteCommandDeviceId
    // Size: 0x4
    // Offset: 0x438
    int m_DeviceFindExecuteCommandDeviceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.InputSystem.LowLevel.IInputRuntime m_Runtime
    // Size: 0x8
    // Offset: 0x440
    ::UnityEngine::InputSystem::LowLevel::IInputRuntime* m_Runtime;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::IInputRuntime*) == 0x8);
    // UnityEngine.InputSystem.LowLevel.InputMetrics m_Metrics
    // Size: 0x38
    // Offset: 0x448
    ::UnityEngine::InputSystem::LowLevel::InputMetrics m_Metrics;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputMetrics) == 0x38);
    // UnityEngine.InputSystem.InputSettings m_Settings
    // Size: 0x8
    // Offset: 0x480
    ::UnityEngine::InputSystem::InputSettings* m_Settings;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputSettings*) == 0x8);
    // private System.Boolean m_ShouldMakeCurrentlyUpdatingDeviceCurrent
    // Size: 0x1
    // Offset: 0x488
    bool m_ShouldMakeCurrentlyUpdatingDeviceCurrent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // UnityEngine.InputSystem.InputManager/StateChangeMonitorsForDevice[] m_StateChangeMonitors
    // Size: 0x8
    // Offset: 0x490
    ::ArrayW<::UnityEngine::InputSystem::InputManager::StateChangeMonitorsForDevice> m_StateChangeMonitors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputManager::StateChangeMonitorsForDevice>) == 0x8);
    // private UnityEngine.InputSystem.Utilities.InlinedArray`1<UnityEngine.InputSystem.InputManager/StateChangeMonitorTimeout> m_StateChangeMonitorTimeouts
    // Size: 0xFFFFFFFF
    // Offset: 0x498
    ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::InputManager::StateChangeMonitorTimeout> m_StateChangeMonitorTimeouts;
    public:
    // Get instance field reference: System.Int32 m_LayoutRegistrationVersion
    [[deprecated("Use field access instead!")]] int& dyn_m_LayoutRegistrationVersion();
    // Get instance field reference: private System.Single m_PollingFrequency
    [[deprecated("Use field access instead!")]] float& dyn_m_PollingFrequency();
    // Get instance field reference: UnityEngine.InputSystem.Layouts.InputControlLayout/Collection m_Layouts
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Layouts::InputControlLayout::Collection& dyn_m_Layouts();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.TypeTable m_Processors
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::TypeTable& dyn_m_Processors();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.TypeTable m_Interactions
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::TypeTable& dyn_m_Interactions();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.TypeTable m_Composites
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::TypeTable& dyn_m_Composites();
    // Get instance field reference: private System.Int32 m_DevicesCount
    [[deprecated("Use field access instead!")]] int& dyn_m_DevicesCount();
    // Get instance field reference: private UnityEngine.InputSystem.InputDevice[] m_Devices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputDevice*>& dyn_m_Devices();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.InputSystem.InputDevice> m_DevicesById
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::InputSystem::InputDevice*>*& dyn_m_DevicesById();
    // Get instance field reference: System.Int32 m_AvailableDeviceCount
    [[deprecated("Use field access instead!")]] int& dyn_m_AvailableDeviceCount();
    // Get instance field reference: UnityEngine.InputSystem.InputManager/AvailableDevice[] m_AvailableDevices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputManager::AvailableDevice>& dyn_m_AvailableDevices();
    // Get instance field reference: System.Int32 m_DisconnectedDevicesCount
    [[deprecated("Use field access instead!")]] int& dyn_m_DisconnectedDevicesCount();
    // Get instance field reference: UnityEngine.InputSystem.InputDevice[] m_DisconnectedDevices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputDevice*>& dyn_m_DisconnectedDevices();
    // Get instance field reference: UnityEngine.InputSystem.LowLevel.InputUpdateType m_UpdateMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputUpdateType& dyn_m_UpdateMask();
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.InputUpdateType m_CurrentUpdate
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputUpdateType& dyn_m_CurrentUpdate();
    // Get instance field reference: UnityEngine.InputSystem.LowLevel.InputStateBuffers m_StateBuffers
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputStateBuffers& dyn_m_StateBuffers();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action`2<UnityEngine.InputSystem.InputDevice,UnityEngine.InputSystem.InputDeviceChange>> m_DeviceChangeListeners
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_2<::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::InputDeviceChange>*>& dyn_m_DeviceChangeListeners();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action`2<UnityEngine.InputSystem.InputDevice,UnityEngine.InputSystem.LowLevel.InputEventPtr>> m_DeviceStateChangeListeners
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_2<::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr>*>& dyn_m_DeviceStateChangeListeners();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.CallbackArray`1<UnityEngine.InputSystem.Layouts.InputDeviceFindControlLayoutDelegate> m_DeviceFindLayoutCallbacks
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::UnityEngine::InputSystem::Layouts::InputDeviceFindControlLayoutDelegate*>& dyn_m_DeviceFindLayoutCallbacks();
    // Get instance field reference: UnityEngine.InputSystem.Utilities.CallbackArray`1<UnityEngine.InputSystem.LowLevel.InputDeviceCommandDelegate> m_DeviceCommandCallbacks
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::UnityEngine::InputSystem::LowLevel::InputDeviceCommandDelegate*>& dyn_m_DeviceCommandCallbacks();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action`2<System.String,UnityEngine.InputSystem.InputControlLayoutChange>> m_LayoutChangeListeners
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_2<::StringW, ::UnityEngine::InputSystem::InputControlLayoutChange>*>& dyn_m_LayoutChangeListeners();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action`2<UnityEngine.InputSystem.LowLevel.InputEventPtr,UnityEngine.InputSystem.InputDevice>> m_EventListeners
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_2<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*>*>& dyn_m_EventListeners();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action> m_BeforeUpdateListeners
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action*>& dyn_m_BeforeUpdateListeners();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action> m_AfterUpdateListeners
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action*>& dyn_m_AfterUpdateListeners();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action> m_SettingsChangedListeners
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action*>& dyn_m_SettingsChangedListeners();
    // Get instance field reference: private System.Boolean m_NativeBeforeUpdateHooked
    [[deprecated("Use field access instead!")]] bool& dyn_m_NativeBeforeUpdateHooked();
    // Get instance field reference: private System.Boolean m_HaveDevicesWithStateCallbackReceivers
    [[deprecated("Use field access instead!")]] bool& dyn_m_HaveDevicesWithStateCallbackReceivers();
    // Get instance field reference: private System.Boolean m_HasFocus
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasFocus();
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.InputEventStream m_InputEventStream
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputEventStream& dyn_m_InputEventStream();
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.InputDeviceExecuteCommandDelegate m_DeviceFindExecuteCommandDelegate
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputDeviceExecuteCommandDelegate*& dyn_m_DeviceFindExecuteCommandDelegate();
    // Get instance field reference: private System.Int32 m_DeviceFindExecuteCommandDeviceId
    [[deprecated("Use field access instead!")]] int& dyn_m_DeviceFindExecuteCommandDeviceId();
    // Get instance field reference: UnityEngine.InputSystem.LowLevel.IInputRuntime m_Runtime
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::IInputRuntime*& dyn_m_Runtime();
    // Get instance field reference: UnityEngine.InputSystem.LowLevel.InputMetrics m_Metrics
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputMetrics& dyn_m_Metrics();
    // Get instance field reference: UnityEngine.InputSystem.InputSettings m_Settings
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputSettings*& dyn_m_Settings();
    // Get instance field reference: private System.Boolean m_ShouldMakeCurrentlyUpdatingDeviceCurrent
    [[deprecated("Use field access instead!")]] bool& dyn_m_ShouldMakeCurrentlyUpdatingDeviceCurrent();
    // Get instance field reference: UnityEngine.InputSystem.InputManager/StateChangeMonitorsForDevice[] m_StateChangeMonitors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputManager::StateChangeMonitorsForDevice>& dyn_m_StateChangeMonitors();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.InlinedArray`1<UnityEngine.InputSystem.InputManager/StateChangeMonitorTimeout> m_StateChangeMonitorTimeouts
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::InputManager::StateChangeMonitorTimeout>& dyn_m_StateChangeMonitorTimeouts();
    // public UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputDevice> get_devices()
    // Offset: 0x51062E0
    ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::InputDevice*> get_devices();
    // public UnityEngine.InputSystem.Utilities.TypeTable get_processors()
    // Offset: 0x510C558
    ::UnityEngine::InputSystem::Utilities::TypeTable get_processors();
    // public UnityEngine.InputSystem.Utilities.TypeTable get_interactions()
    // Offset: 0x510C560
    ::UnityEngine::InputSystem::Utilities::TypeTable get_interactions();
    // public UnityEngine.InputSystem.Utilities.TypeTable get_composites()
    // Offset: 0x510C568
    ::UnityEngine::InputSystem::Utilities::TypeTable get_composites();
    // public UnityEngine.InputSystem.LowLevel.InputMetrics get_metrics()
    // Offset: 0x510C570
    ::UnityEngine::InputSystem::LowLevel::InputMetrics get_metrics();
    // public UnityEngine.InputSystem.InputSettings get_settings()
    // Offset: 0x510C70C
    ::UnityEngine::InputSystem::InputSettings* get_settings();
    // public System.Void set_settings(UnityEngine.InputSystem.InputSettings value)
    // Offset: 0x510C714
    void set_settings(::UnityEngine::InputSystem::InputSettings* value);
    // public UnityEngine.InputSystem.LowLevel.InputUpdateType get_updateMask()
    // Offset: 0x510CDB0
    ::UnityEngine::InputSystem::LowLevel::InputUpdateType get_updateMask();
    // public System.Void set_updateMask(UnityEngine.InputSystem.LowLevel.InputUpdateType value)
    // Offset: 0x510CDB8
    void set_updateMask(::UnityEngine::InputSystem::LowLevel::InputUpdateType value);
    // public UnityEngine.InputSystem.LowLevel.InputUpdateType get_defaultUpdateType()
    // Offset: 0x510CF68
    ::UnityEngine::InputSystem::LowLevel::InputUpdateType get_defaultUpdateType();
    // public System.Single get_pollingFrequency()
    // Offset: 0x510CF84
    float get_pollingFrequency();
    // public System.Void set_pollingFrequency(System.Single value)
    // Offset: 0x510CF8C
    void set_pollingFrequency(float value);
    // public System.Void add_onDeviceChange(System.Action`2<UnityEngine.InputSystem.InputDevice,UnityEngine.InputSystem.InputDeviceChange> value)
    // Offset: 0x5104B90
    void add_onDeviceChange(::System::Action_2<::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::InputDeviceChange>* value);
    // public System.Void remove_onDeviceChange(System.Action`2<UnityEngine.InputSystem.InputDevice,UnityEngine.InputSystem.InputDeviceChange> value)
    // Offset: 0x5104DFC
    void remove_onDeviceChange(::System::Action_2<::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::InputDeviceChange>* value);
    // public System.Void add_onDeviceStateChange(System.Action`2<UnityEngine.InputSystem.InputDevice,UnityEngine.InputSystem.LowLevel.InputEventPtr> value)
    // Offset: 0x510D0B4
    void add_onDeviceStateChange(::System::Action_2<::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr>* value);
    // public System.Void remove_onDeviceStateChange(System.Action`2<UnityEngine.InputSystem.InputDevice,UnityEngine.InputSystem.LowLevel.InputEventPtr> value)
    // Offset: 0x510D10C
    void remove_onDeviceStateChange(::System::Action_2<::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr>* value);
    // public System.Void add_onDeviceCommand(UnityEngine.InputSystem.LowLevel.InputDeviceCommandDelegate value)
    // Offset: 0x510D164
    void add_onDeviceCommand(::UnityEngine::InputSystem::LowLevel::InputDeviceCommandDelegate* value);
    // public System.Void remove_onDeviceCommand(UnityEngine.InputSystem.LowLevel.InputDeviceCommandDelegate value)
    // Offset: 0x510D1BC
    void remove_onDeviceCommand(::UnityEngine::InputSystem::LowLevel::InputDeviceCommandDelegate* value);
    // public System.Void add_onFindControlLayoutForDevice(UnityEngine.InputSystem.Layouts.InputDeviceFindControlLayoutDelegate value)
    // Offset: 0x510D214
    void add_onFindControlLayoutForDevice(::UnityEngine::InputSystem::Layouts::InputDeviceFindControlLayoutDelegate* value);
    // public System.Void remove_onFindControlLayoutForDevice(UnityEngine.InputSystem.Layouts.InputDeviceFindControlLayoutDelegate value)
    // Offset: 0x510D4F8
    void remove_onFindControlLayoutForDevice(::UnityEngine::InputSystem::Layouts::InputDeviceFindControlLayoutDelegate* value);
    // public System.Void add_onLayoutChange(System.Action`2<System.String,UnityEngine.InputSystem.InputControlLayoutChange> value)
    // Offset: 0x5104BE8
    void add_onLayoutChange(::System::Action_2<::StringW, ::UnityEngine::InputSystem::InputControlLayoutChange>* value);
    // public System.Void remove_onLayoutChange(System.Action`2<System.String,UnityEngine.InputSystem.InputControlLayoutChange> value)
    // Offset: 0x5104E54
    void remove_onLayoutChange(::System::Action_2<::StringW, ::UnityEngine::InputSystem::InputControlLayoutChange>* value);
    // public System.Void add_onEvent(System.Action`2<UnityEngine.InputSystem.LowLevel.InputEventPtr,UnityEngine.InputSystem.InputDevice> value)
    // Offset: 0x5104B38
    void add_onEvent(::System::Action_2<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*>* value);
    // public System.Void remove_onEvent(System.Action`2<UnityEngine.InputSystem.LowLevel.InputEventPtr,UnityEngine.InputSystem.InputDevice> value)
    // Offset: 0x5104DA4
    void remove_onEvent(::System::Action_2<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*>* value);
    // public System.Void add_onBeforeUpdate(System.Action value)
    // Offset: 0x510D550
    void add_onBeforeUpdate(::System::Action* value);
    // public System.Void remove_onBeforeUpdate(System.Action value)
    // Offset: 0x510D6AC
    void remove_onBeforeUpdate(::System::Action* value);
    // public System.Void add_onAfterUpdate(System.Action value)
    // Offset: 0x510D704
    void add_onAfterUpdate(::System::Action* value);
    // public System.Void remove_onAfterUpdate(System.Action value)
    // Offset: 0x510D75C
    void remove_onAfterUpdate(::System::Action* value);
    // public System.Void add_onSettingsChange(System.Action value)
    // Offset: 0x510D7B4
    void add_onSettingsChange(::System::Action* value);
    // public System.Void remove_onSettingsChange(System.Action value)
    // Offset: 0x510D80C
    void remove_onSettingsChange(::System::Action* value);
    // public System.Boolean get_isProcessingEvents()
    // Offset: 0x510D864
    bool get_isProcessingEvents();
    // private System.Boolean get_gameIsPlaying()
    // Offset: 0x510D86C
    bool get_gameIsPlaying();
    // private System.Boolean get_gameHasFocus()
    // Offset: 0x510D874
    bool get_gameHasFocus();
    // private System.Boolean get_gameShouldGetInputRegardlessOfFocus()
    // Offset: 0x510D8A8
    bool get_gameShouldGetInputRegardlessOfFocus();
    // public System.Void RegisterControlLayout(System.String name, System.Type type)
    // Offset: 0x510D8CC
    void RegisterControlLayout(::StringW name, ::System::Type* type);
    // public System.Void RegisterControlLayout(System.String json, System.String name, System.Boolean isOverride)
    // Offset: 0x5107524
    void RegisterControlLayout(::StringW json, ::StringW name, bool isOverride);
    // public System.Void RegisterControlLayoutBuilder(System.Func`1<UnityEngine.InputSystem.Layouts.InputControlLayout> method, System.String name, System.String baseLayout)
    // Offset: 0x510E3F4
    void RegisterControlLayoutBuilder(::System::Func_1<::UnityEngine::InputSystem::Layouts::InputControlLayout*>* method, ::StringW name, ::StringW baseLayout);
    // private System.Void PerformLayoutPostRegistration(UnityEngine.InputSystem.Utilities.InternedString layoutName, UnityEngine.InputSystem.Utilities.InlinedArray`1<UnityEngine.InputSystem.Utilities.InternedString> baseLayouts, System.Boolean isReplacement, System.Boolean isKnownToBeDeviceLayout, System.Boolean isOverride)
    // Offset: 0x510DE78
    void PerformLayoutPostRegistration(::UnityEngine::InputSystem::Utilities::InternedString layoutName, ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::Utilities::InternedString> baseLayouts, bool isReplacement, bool isKnownToBeDeviceLayout, bool isOverride);
    // public System.Void RegisterPrecompiledLayout(System.String metadata)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TDevice>
    void RegisterPrecompiledLayout(::StringW metadata) {
      static_assert(std::is_convertible_v<TDevice, ::UnityEngine::InputSystem::InputDevice*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputManager::RegisterPrecompiledLayout");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterPrecompiledLayout", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(metadata)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, metadata);
    }
    // private System.Void RecreateDevicesUsingLayout(UnityEngine.InputSystem.Utilities.InternedString layout, System.Boolean isKnownToBeDeviceLayout)
    // Offset: 0x510E580
    void RecreateDevicesUsingLayout(::UnityEngine::InputSystem::Utilities::InternedString layout, bool isKnownToBeDeviceLayout);
    // private System.Boolean IsControlOrChildUsingLayoutRecursive(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.Utilities.InternedString layout)
    // Offset: 0x510E8BC
    bool IsControlOrChildUsingLayoutRecursive(::UnityEngine::InputSystem::InputControl* control, ::UnityEngine::InputSystem::Utilities::InternedString layout);
    // private System.Boolean IsControlUsingLayout(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.Utilities.InternedString layout)
    // Offset: 0x510E7EC
    bool IsControlUsingLayout(::UnityEngine::InputSystem::InputControl* control, ::UnityEngine::InputSystem::Utilities::InternedString layout);
    // public System.Void RegisterControlLayoutMatcher(System.String layoutName, UnityEngine.InputSystem.Layouts.InputDeviceMatcher matcher)
    // Offset: 0x510E2DC
    void RegisterControlLayoutMatcher(::StringW layoutName, ::UnityEngine::InputSystem::Layouts::InputDeviceMatcher matcher);
    // public System.Void RegisterControlLayoutMatcher(System.Type type, UnityEngine.InputSystem.Layouts.InputDeviceMatcher matcher)
    // Offset: 0x510F058
    void RegisterControlLayoutMatcher(::System::Type* type, ::UnityEngine::InputSystem::Layouts::InputDeviceMatcher matcher);
    // private System.Void RecreateDevicesUsingLayoutWithInferiorMatch(UnityEngine.InputSystem.Layouts.InputDeviceMatcher deviceMatcher)
    // Offset: 0x510EB0C
    void RecreateDevicesUsingLayoutWithInferiorMatch(::UnityEngine::InputSystem::Layouts::InputDeviceMatcher deviceMatcher);
    // private System.Void RecreateDevice(UnityEngine.InputSystem.InputDevice oldDevice, UnityEngine.InputSystem.Utilities.InternedString newLayout)
    // Offset: 0x510E9B0
    void RecreateDevice(::UnityEngine::InputSystem::InputDevice* oldDevice, ::UnityEngine::InputSystem::Utilities::InternedString newLayout);
    // private System.Void AddAvailableDevicesMatchingDescription(UnityEngine.InputSystem.Layouts.InputDeviceMatcher matcher, UnityEngine.InputSystem.Utilities.InternedString layout)
    // Offset: 0x510ECF8
    void AddAvailableDevicesMatchingDescription(::UnityEngine::InputSystem::Layouts::InputDeviceMatcher matcher, ::UnityEngine::InputSystem::Utilities::InternedString layout);
    // public System.Void RemoveControlLayout(System.String name)
    // Offset: 0x510FD54
    void RemoveControlLayout(::StringW name);
    // public UnityEngine.InputSystem.Layouts.InputControlLayout TryLoadControlLayout(System.Type type)
    // Offset: 0x510FF64
    ::UnityEngine::InputSystem::Layouts::InputControlLayout* TryLoadControlLayout(::System::Type* type);
    // public UnityEngine.InputSystem.Layouts.InputControlLayout TryLoadControlLayout(UnityEngine.InputSystem.Utilities.InternedString name)
    // Offset: 0x5107514
    ::UnityEngine::InputSystem::Layouts::InputControlLayout* TryLoadControlLayout(::UnityEngine::InputSystem::Utilities::InternedString name);
    // public UnityEngine.InputSystem.Utilities.InternedString TryFindMatchingControlLayout(ref UnityEngine.InputSystem.Layouts.InputDeviceDescription deviceDescription, System.Int32 deviceId)
    // Offset: 0x510F250
    ::UnityEngine::InputSystem::Utilities::InternedString TryFindMatchingControlLayout(ByRef<::UnityEngine::InputSystem::Layouts::InputDeviceDescription> deviceDescription, int deviceId);
    // private UnityEngine.InputSystem.Utilities.InternedString FindOrRegisterDeviceLayoutForType(System.Type type)
    // Offset: 0x511018C
    ::UnityEngine::InputSystem::Utilities::InternedString FindOrRegisterDeviceLayoutForType(::System::Type* type);
    // private System.Boolean IsDeviceLayoutMarkedAsSupportedInSettings(UnityEngine.InputSystem.Utilities.InternedString layoutName)
    // Offset: 0x511022C
    bool IsDeviceLayoutMarkedAsSupportedInSettings(::UnityEngine::InputSystem::Utilities::InternedString layoutName);
    // public System.Collections.Generic.IEnumerable`1<System.String> ListControlLayouts(System.String basedOn)
    // Offset: 0x5110334
    ::System::Collections::Generic::IEnumerable_1<::StringW>* ListControlLayouts(::StringW basedOn);
    // public System.Int32 GetControls(System.String path, ref UnityEngine.InputSystem.InputControlList`1<TControl> controls)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TControl>
    int GetControls(::StringW path, ByRef<::UnityEngine::InputSystem::InputControlList_1<TControl>> controls) {
      static_assert(std::is_convertible_v<TControl, ::UnityEngine::InputSystem::InputControl*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputManager::GetControls");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControls", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(controls)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___generic__method, path, byref(controls));
    }
    // public System.Void SetDeviceUsage(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.Utilities.InternedString usage)
    // Offset: 0x51103C4
    void SetDeviceUsage(::UnityEngine::InputSystem::InputDevice* device, ::UnityEngine::InputSystem::Utilities::InternedString usage);
    // public System.Void AddDeviceUsage(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.Utilities.InternedString usage)
    // Offset: 0x5107B18
    void AddDeviceUsage(::UnityEngine::InputSystem::InputDevice* device, ::UnityEngine::InputSystem::Utilities::InternedString usage);
    // public System.Void RemoveDeviceUsage(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.Utilities.InternedString usage)
    // Offset: 0x5107CDC
    void RemoveDeviceUsage(::UnityEngine::InputSystem::InputDevice* device, ::UnityEngine::InputSystem::Utilities::InternedString usage);
    // private System.Void NotifyUsageChanged(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x5110518
    void NotifyUsageChanged(::UnityEngine::InputSystem::InputDevice* device);
    // public UnityEngine.InputSystem.InputDevice AddDevice(System.Type type, System.String name)
    // Offset: 0x51105BC
    ::UnityEngine::InputSystem::InputDevice* AddDevice(::System::Type* type, ::StringW name);
    // public UnityEngine.InputSystem.InputDevice AddDevice(System.String layout, System.String name, UnityEngine.InputSystem.Utilities.InternedString variants)
    // Offset: 0x51079CC
    ::UnityEngine::InputSystem::InputDevice* AddDevice(::StringW layout, ::StringW name, ::UnityEngine::InputSystem::Utilities::InternedString variants);
    // private UnityEngine.InputSystem.InputDevice AddDevice(UnityEngine.InputSystem.Utilities.InternedString layout, System.Int32 deviceId, System.String deviceName, UnityEngine.InputSystem.Layouts.InputDeviceDescription deviceDescription, UnityEngine.InputSystem.InputDevice/DeviceFlags deviceFlags, UnityEngine.InputSystem.Utilities.InternedString variants)
    // Offset: 0x510FB9C
    ::UnityEngine::InputSystem::InputDevice* AddDevice(::UnityEngine::InputSystem::Utilities::InternedString layout, int deviceId, ::StringW deviceName, ::UnityEngine::InputSystem::Layouts::InputDeviceDescription deviceDescription, ::UnityEngine::InputSystem::InputDevice::DeviceFlags deviceFlags, ::UnityEngine::InputSystem::Utilities::InternedString variants);
    // public System.Void AddDevice(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x510F68C
    void AddDevice(::UnityEngine::InputSystem::InputDevice* device);
    // public UnityEngine.InputSystem.InputDevice AddDevice(UnityEngine.InputSystem.Layouts.InputDeviceDescription description)
    // Offset: 0x5111054
    ::UnityEngine::InputSystem::InputDevice* AddDevice(::UnityEngine::InputSystem::Layouts::InputDeviceDescription description);
    // public UnityEngine.InputSystem.InputDevice AddDevice(UnityEngine.InputSystem.Layouts.InputDeviceDescription description, System.Boolean throwIfNoLayoutFound, System.String deviceName, System.Int32 deviceId, UnityEngine.InputSystem.InputDevice/DeviceFlags deviceFlags)
    // Offset: 0x5111098
    ::UnityEngine::InputSystem::InputDevice* AddDevice(::UnityEngine::InputSystem::Layouts::InputDeviceDescription description, bool throwIfNoLayoutFound, ::StringW deviceName, int deviceId, ::UnityEngine::InputSystem::InputDevice::DeviceFlags deviceFlags);
    // public UnityEngine.InputSystem.InputDevice AddDevice(UnityEngine.InputSystem.Layouts.InputDeviceDescription description, UnityEngine.InputSystem.Utilities.InternedString layout, System.String deviceName, System.Int32 deviceId, UnityEngine.InputSystem.InputDevice/DeviceFlags deviceFlags)
    // Offset: 0x5111278
    ::UnityEngine::InputSystem::InputDevice* AddDevice(::UnityEngine::InputSystem::Layouts::InputDeviceDescription description, ::UnityEngine::InputSystem::Utilities::InternedString layout, ::StringW deviceName, int deviceId, ::UnityEngine::InputSystem::InputDevice::DeviceFlags deviceFlags);
    // public System.Void RemoveDevice(UnityEngine.InputSystem.InputDevice device, System.Boolean keepOnListOfAvailableDevices)
    // Offset: 0x5107060
    void RemoveDevice(::UnityEngine::InputSystem::InputDevice* device, bool keepOnListOfAvailableDevices);
    // public System.Void FlushDisconnectedDevices()
    // Offset: 0x511147C
    void FlushDisconnectedDevices();
    // public System.Void ResetDevice(UnityEngine.InputSystem.InputDevice device, System.Boolean alsoResetDontResetControls, System.Nullable`1<System.Boolean> issueResetCommand)
    // Offset: 0x51114D0
    void ResetDevice(::UnityEngine::InputSystem::InputDevice* device, bool alsoResetDontResetControls, ::System::Nullable_1<bool> issueResetCommand);
    // public UnityEngine.InputSystem.InputDevice TryGetDevice(System.String nameOrLayout)
    // Offset: 0x5111BFC
    ::UnityEngine::InputSystem::InputDevice* TryGetDevice(::StringW nameOrLayout);
    // public UnityEngine.InputSystem.InputDevice GetDevice(System.String nameOrLayout)
    // Offset: 0x5111D20
    ::UnityEngine::InputSystem::InputDevice* GetDevice(::StringW nameOrLayout);
    // public UnityEngine.InputSystem.InputDevice TryGetDevice(System.Type layoutType)
    // Offset: 0x5111DC0
    ::UnityEngine::InputSystem::InputDevice* TryGetDevice(::System::Type* layoutType);
    // public UnityEngine.InputSystem.InputDevice TryGetDeviceById(System.Int32 id)
    // Offset: 0x5106EE4
    ::UnityEngine::InputSystem::InputDevice* TryGetDeviceById(int id);
    // public System.Int32 GetUnsupportedDevices(System.Collections.Generic.List`1<UnityEngine.InputSystem.Layouts.InputDeviceDescription> descriptions)
    // Offset: 0x5111E18
    int GetUnsupportedDevices(::System::Collections::Generic::List_1<::UnityEngine::InputSystem::Layouts::InputDeviceDescription>* descriptions);
    // public System.Void EnableOrDisableDevice(UnityEngine.InputSystem.InputDevice device, System.Boolean enable, UnityEngine.InputSystem.InputManager/DeviceDisableScope scope)
    // Offset: 0x5110C18
    void EnableOrDisableDevice(::UnityEngine::InputSystem::InputDevice* device, bool enable, ::UnityEngine::InputSystem::InputManager::DeviceDisableScope scope);
    // private System.Void QueueEvent(UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr)
    // Offset: 0x5112004
    void QueueEvent(::UnityEngine::InputSystem::LowLevel::InputEvent* eventPtr);
    // public System.Void QueueEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr ptr)
    // Offset: 0x5107CD8
    void QueueEvent(::UnityEngine::InputSystem::LowLevel::InputEventPtr ptr);
    // public System.Void QueueEvent(ref TEvent inputEvent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEvent>
    void QueueEvent(ByRef<TEvent> inputEvent) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TEvent>, ::UnityEngine::InputSystem::LowLevel::IInputEventTypeInfo> && std::is_convertible_v<TEvent, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputManager::QueueEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "QueueEvent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEvent>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputEvent)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEvent>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, byref(inputEvent));
    }
    // public System.Void Update()
    // Offset: 0x51120D0
    void Update();
    // public System.Void Update(UnityEngine.InputSystem.LowLevel.InputUpdateType updateType)
    // Offset: 0x51120FC
    void Update(::UnityEngine::InputSystem::LowLevel::InputUpdateType updateType);
    // System.Void Initialize(UnityEngine.InputSystem.LowLevel.IInputRuntime runtime, UnityEngine.InputSystem.InputSettings settings)
    // Offset: 0x51121A8
    void Initialize(::UnityEngine::InputSystem::LowLevel::IInputRuntime* runtime, ::UnityEngine::InputSystem::InputSettings* settings);
    // System.Void Destroy()
    // Offset: 0x5113FCC
    void Destroy();
    // System.Void InitializeData()
    // Offset: 0x51121F4
    void InitializeData();
    // System.Void InstallRuntime(UnityEngine.InputSystem.LowLevel.IInputRuntime runtime)
    // Offset: 0x5113684
    void InstallRuntime(::UnityEngine::InputSystem::LowLevel::IInputRuntime* runtime);
    // System.Void InstallGlobals()
    // Offset: 0x5113D6C
    void InstallGlobals();
    // System.Void UninstallGlobals()
    // Offset: 0x51140D8
    void UninstallGlobals();
    // private System.Void MakeDeviceNameUnique(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x51106A0
    void MakeDeviceNameUnique(::UnityEngine::InputSystem::InputDevice* device);
    // static private System.Void ResetControlPathsRecursive(UnityEngine.InputSystem.InputControl control)
    // Offset: 0x511447C
    static void ResetControlPathsRecursive(::UnityEngine::InputSystem::InputControl* control);
    // private System.Void AssignUniqueDeviceId(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x5110834
    void AssignUniqueDeviceId(::UnityEngine::InputSystem::InputDevice* device);
    // private System.Void ReallocateStateBuffers()
    // Offset: 0x510CDDC
    void ReallocateStateBuffers();
    // private System.Void InitializeDefaultState(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x5114528
    void InitializeDefaultState(::UnityEngine::InputSystem::InputDevice* device);
    // private System.Void InitializeDeviceState(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x51109B8
    void InitializeDeviceState(::UnityEngine::InputSystem::InputDevice* device);
    // private System.Void OnNativeDeviceDiscovered(System.Int32 deviceId, System.String deviceDescriptor)
    // Offset: 0x511467C
    void OnNativeDeviceDiscovered(int deviceId, ::StringW deviceDescriptor);
    // private UnityEngine.InputSystem.InputDevice TryMatchDisconnectedDevice(System.String deviceDescriptor)
    // Offset: 0x5114AA8
    ::UnityEngine::InputSystem::InputDevice* TryMatchDisconnectedDevice(::StringW deviceDescriptor);
    // private System.Void InstallBeforeUpdateHookIfNecessary()
    // Offset: 0x510D5B0
    void InstallBeforeUpdateHookIfNecessary();
    // private System.Void RestoreDevicesAfterDomainReloadIfNecessary()
    // Offset: 0x5114AA4
    void RestoreDevicesAfterDomainReloadIfNecessary();
    // private System.Void WarnAboutDevicesFailingToRecreateAfterDomainReload()
    // Offset: 0x5114C8C
    void WarnAboutDevicesFailingToRecreateAfterDomainReload();
    // private System.Void OnBeforeUpdate(UnityEngine.InputSystem.LowLevel.InputUpdateType updateType)
    // Offset: 0x5114C90
    void OnBeforeUpdate(::UnityEngine::InputSystem::LowLevel::InputUpdateType updateType);
    // System.Void ApplySettings()
    // Offset: 0x510C818
    void ApplySettings();
    // System.Int64 ExecuteGlobalCommand(ref TCommand command)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TCommand>
    int64_t ExecuteGlobalCommand(ByRef<TCommand> command) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TCommand>, ::UnityEngine::InputSystem::LowLevel::IInputDeviceCommandInfo> && std::is_convertible_v<TCommand, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputManager::ExecuteGlobalCommand");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteGlobalCommand", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TCommand>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(command)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TCommand>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___generic__method, byref(command));
    }
    // System.Void AddAvailableDevicesThatAreNowRecognized()
    // Offset: 0x510D274
    void AddAvailableDevicesThatAreNowRecognized();
    // private System.Boolean ShouldRunDeviceInBackground(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x5110BDC
    bool ShouldRunDeviceInBackground(::UnityEngine::InputSystem::InputDevice* device);
    // System.Void OnFocusChanged(System.Boolean focus)
    // Offset: 0x5114E50
    void OnFocusChanged(bool focus);
    // System.Boolean ShouldRunUpdate(UnityEngine.InputSystem.LowLevel.InputUpdateType updateType)
    // Offset: 0x5115090
    bool ShouldRunUpdate(::UnityEngine::InputSystem::LowLevel::InputUpdateType updateType);
    // private System.Void OnUpdate(UnityEngine.InputSystem.LowLevel.InputUpdateType updateType, ref UnityEngine.InputSystem.LowLevel.InputEventBuffer eventBuffer)
    // Offset: 0x51150AC
    void OnUpdate(::UnityEngine::InputSystem::LowLevel::InputUpdateType updateType, ByRef<::UnityEngine::InputSystem::LowLevel::InputEventBuffer> eventBuffer);
    // private System.Void InvokeAfterUpdateCallback(UnityEngine.InputSystem.LowLevel.InputUpdateType updateType)
    // Offset: 0x511669C
    void InvokeAfterUpdateCallback(::UnityEngine::InputSystem::LowLevel::InputUpdateType updateType);
    // System.Void DontMakeCurrentlyUpdatingDeviceCurrent()
    // Offset: 0x511683C
    void DontMakeCurrentlyUpdatingDeviceCurrent();
    // System.Boolean UpdateState(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr, UnityEngine.InputSystem.LowLevel.InputUpdateType updateType)
    // Offset: 0x5116704
    bool UpdateState(::UnityEngine::InputSystem::InputDevice* device, ::UnityEngine::InputSystem::LowLevel::InputEvent* eventPtr, ::UnityEngine::InputSystem::LowLevel::InputUpdateType updateType);
    // System.Boolean UpdateState(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.LowLevel.InputUpdateType updateType, System.Void* statePtr, System.UInt32 stateOffsetInDevice, System.UInt32 stateSize, System.Double internalTime, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Offset: 0x5111A30
    bool UpdateState(::UnityEngine::InputSystem::InputDevice* device, ::UnityEngine::InputSystem::LowLevel::InputUpdateType updateType, void* statePtr, uint stateOffsetInDevice, uint stateSize, double internalTime, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr);
    // private System.Void WriteStateChange(UnityEngine.InputSystem.LowLevel.InputStateBuffers/DoubleBuffers buffers, System.Int32 deviceIndex, ref UnityEngine.InputSystem.LowLevel.InputStateBlock deviceStateBlock, System.UInt32 stateOffsetInDevice, System.Void* statePtr, System.UInt32 stateSizeInBytes, System.Boolean flippedBuffers)
    // Offset: 0x5116BC4
    void WriteStateChange(::UnityEngine::InputSystem::LowLevel::InputStateBuffers::DoubleBuffers buffers, int deviceIndex, ByRef<::UnityEngine::InputSystem::LowLevel::InputStateBlock> deviceStateBlock, uint stateOffsetInDevice, void* statePtr, uint stateSizeInBytes, bool flippedBuffers);
    // private System.Boolean FlipBuffersForDeviceIfNecessary(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.LowLevel.InputUpdateType updateType)
    // Offset: 0x5116B20
    bool FlipBuffersForDeviceIfNecessary(::UnityEngine::InputSystem::InputDevice* device, ::UnityEngine::InputSystem::LowLevel::InputUpdateType updateType);
    // public System.Void AddStateChangeMonitor(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Int64 monitorIndex, System.UInt32 groupIndex)
    // Offset: 0x5117140
    void AddStateChangeMonitor(::UnityEngine::InputSystem::InputControl* control, ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor* monitor, int64_t monitorIndex, uint groupIndex);
    // private System.Void RemoveStateChangeMonitors(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x5111350
    void RemoveStateChangeMonitors(::UnityEngine::InputSystem::InputDevice* device);
    // public System.Void RemoveStateChangeMonitor(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Int64 monitorIndex)
    // Offset: 0x5117288
    void RemoveStateChangeMonitor(::UnityEngine::InputSystem::InputControl* control, ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor* monitor, int64_t monitorIndex);
    // public System.Void AddStateChangeMonitorTimeout(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Double time, System.Int64 monitorIndex, System.Int32 timerIndex)
    // Offset: 0x51173E0
    void AddStateChangeMonitorTimeout(::UnityEngine::InputSystem::InputControl* control, ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor* monitor, double time, int64_t monitorIndex, int timerIndex);
    // public System.Void RemoveStateChangeMonitorTimeout(UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, System.Int64 monitorIndex, System.Int32 timerIndex)
    // Offset: 0x51174B4
    void RemoveStateChangeMonitorTimeout(::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor* monitor, int64_t monitorIndex, int timerIndex);
    // private System.Void SortStateChangeMonitorsIfNecessary(System.Int32 deviceIndex)
    // Offset: 0x5116844
    void SortStateChangeMonitorsIfNecessary(int deviceIndex);
    // public System.Void SignalStateChangeMonitor(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor)
    // Offset: 0x51175D0
    void SignalStateChangeMonitor(::UnityEngine::InputSystem::InputControl* control, ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor* monitor);
    // public System.Void FireStateChangeNotifications()
    // Offset: 0x51176C0
    void FireStateChangeNotifications();
    // private System.Boolean ProcessStateChangeMonitors(System.Int32 deviceIndex, System.Void* newStateFromEvent, System.Void* oldStateOfDevice, System.UInt32 newStateSizeInBytes, System.UInt32 newStateOffsetInBytes)
    // Offset: 0x5116898
    bool ProcessStateChangeMonitors(int deviceIndex, void* newStateFromEvent, void* oldStateOfDevice, uint newStateSizeInBytes, uint newStateOffsetInBytes);
    // System.Void FireStateChangeNotifications(System.Int32 deviceIndex, System.Double internalTime, UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr)
    // Offset: 0x5116D28
    void FireStateChangeNotifications(int deviceIndex, double internalTime, ::UnityEngine::InputSystem::LowLevel::InputEvent* eventPtr);
    // private System.Void ProcessStateChangeMonitorTimeouts()
    // Offset: 0x51163E8
    void ProcessStateChangeMonitorTimeouts();
    // public System.Void .ctor()
    // Offset: 0x511780C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputManager*, creationType>()));
    }
    // private System.Int64 <TryFindMatchingControlLayout>b__72_0(ref UnityEngine.InputSystem.LowLevel.InputDeviceCommand commandRef)
    // Offset: 0x5117814
    int64_t $TryFindMatchingControlLayout$b__72_0(ByRef<::UnityEngine::InputSystem::LowLevel::InputDeviceCommand> commandRef);
  }; // UnityEngine.InputSystem.InputManager
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputManager::StateChangeMonitorsForDevice, "UnityEngine.InputSystem", "InputManager/StateChangeMonitorsForDevice");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputManager::StateChangeMonitorListener, "UnityEngine.InputSystem", "InputManager/StateChangeMonitorListener");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputManager::StateChangeMonitorTimeout, "UnityEngine.InputSystem", "InputManager/StateChangeMonitorTimeout");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputManager::AvailableDevice, "UnityEngine.InputSystem", "InputManager/AvailableDevice");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::get_devices
// Il2CppName: get_devices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::InputDevice*> (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::get_devices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "get_devices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::get_processors
// Il2CppName: get_processors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::TypeTable (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::get_processors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "get_processors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::get_interactions
// Il2CppName: get_interactions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::TypeTable (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::get_interactions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "get_interactions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::get_composites
// Il2CppName: get_composites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::TypeTable (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::get_composites)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "get_composites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::get_metrics
// Il2CppName: get_metrics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputMetrics (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::get_metrics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "get_metrics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::get_settings
// Il2CppName: get_settings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputSettings* (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::get_settings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "get_settings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::set_settings
// Il2CppName: set_settings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputSettings*)>(&UnityEngine::InputSystem::InputManager::set_settings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "set_settings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::get_updateMask
// Il2CppName: get_updateMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputUpdateType (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::get_updateMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "get_updateMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::set_updateMask
// Il2CppName: set_updateMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::LowLevel::InputUpdateType)>(&UnityEngine::InputSystem::InputManager::set_updateMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputUpdateType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "set_updateMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::get_defaultUpdateType
// Il2CppName: get_defaultUpdateType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputUpdateType (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::get_defaultUpdateType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "get_defaultUpdateType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::get_pollingFrequency
// Il2CppName: get_pollingFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::get_pollingFrequency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "get_pollingFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::set_pollingFrequency
// Il2CppName: set_pollingFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(float)>(&UnityEngine::InputSystem::InputManager::set_pollingFrequency)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "set_pollingFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::add_onDeviceChange
// Il2CppName: add_onDeviceChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Action_2<::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::InputDeviceChange>*)>(&UnityEngine::InputSystem::InputManager::add_onDeviceChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice"), ::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDeviceChange")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "add_onDeviceChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::remove_onDeviceChange
// Il2CppName: remove_onDeviceChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Action_2<::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::InputDeviceChange>*)>(&UnityEngine::InputSystem::InputManager::remove_onDeviceChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice"), ::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDeviceChange")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "remove_onDeviceChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::add_onDeviceStateChange
// Il2CppName: add_onDeviceStateChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Action_2<::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr>*)>(&UnityEngine::InputSystem::InputManager::add_onDeviceStateChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice"), ::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "add_onDeviceStateChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::remove_onDeviceStateChange
// Il2CppName: remove_onDeviceStateChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Action_2<::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr>*)>(&UnityEngine::InputSystem::InputManager::remove_onDeviceStateChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice"), ::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "remove_onDeviceStateChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::add_onDeviceCommand
// Il2CppName: add_onDeviceCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::LowLevel::InputDeviceCommandDelegate*)>(&UnityEngine::InputSystem::InputManager::add_onDeviceCommand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputDeviceCommandDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "add_onDeviceCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::remove_onDeviceCommand
// Il2CppName: remove_onDeviceCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::LowLevel::InputDeviceCommandDelegate*)>(&UnityEngine::InputSystem::InputManager::remove_onDeviceCommand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputDeviceCommandDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "remove_onDeviceCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::add_onFindControlLayoutForDevice
// Il2CppName: add_onFindControlLayoutForDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::Layouts::InputDeviceFindControlLayoutDelegate*)>(&UnityEngine::InputSystem::InputManager::add_onFindControlLayoutForDevice)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputDeviceFindControlLayoutDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "add_onFindControlLayoutForDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::remove_onFindControlLayoutForDevice
// Il2CppName: remove_onFindControlLayoutForDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::Layouts::InputDeviceFindControlLayoutDelegate*)>(&UnityEngine::InputSystem::InputManager::remove_onFindControlLayoutForDevice)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputDeviceFindControlLayoutDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "remove_onFindControlLayoutForDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::add_onLayoutChange
// Il2CppName: add_onLayoutChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Action_2<::StringW, ::UnityEngine::InputSystem::InputControlLayoutChange>*)>(&UnityEngine::InputSystem::InputManager::add_onLayoutChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlLayoutChange")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "add_onLayoutChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::remove_onLayoutChange
// Il2CppName: remove_onLayoutChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Action_2<::StringW, ::UnityEngine::InputSystem::InputControlLayoutChange>*)>(&UnityEngine::InputSystem::InputManager::remove_onLayoutChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlLayoutChange")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "remove_onLayoutChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::add_onEvent
// Il2CppName: add_onEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Action_2<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*>*)>(&UnityEngine::InputSystem::InputManager::add_onEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr"), ::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "add_onEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::remove_onEvent
// Il2CppName: remove_onEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Action_2<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*>*)>(&UnityEngine::InputSystem::InputManager::remove_onEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr"), ::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "remove_onEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::add_onBeforeUpdate
// Il2CppName: add_onBeforeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Action*)>(&UnityEngine::InputSystem::InputManager::add_onBeforeUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "add_onBeforeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::remove_onBeforeUpdate
// Il2CppName: remove_onBeforeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Action*)>(&UnityEngine::InputSystem::InputManager::remove_onBeforeUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "remove_onBeforeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::add_onAfterUpdate
// Il2CppName: add_onAfterUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Action*)>(&UnityEngine::InputSystem::InputManager::add_onAfterUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "add_onAfterUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::remove_onAfterUpdate
// Il2CppName: remove_onAfterUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Action*)>(&UnityEngine::InputSystem::InputManager::remove_onAfterUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "remove_onAfterUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::add_onSettingsChange
// Il2CppName: add_onSettingsChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Action*)>(&UnityEngine::InputSystem::InputManager::add_onSettingsChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "add_onSettingsChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::remove_onSettingsChange
// Il2CppName: remove_onSettingsChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Action*)>(&UnityEngine::InputSystem::InputManager::remove_onSettingsChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "remove_onSettingsChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::get_isProcessingEvents
// Il2CppName: get_isProcessingEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::get_isProcessingEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "get_isProcessingEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::get_gameIsPlaying
// Il2CppName: get_gameIsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::get_gameIsPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "get_gameIsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::get_gameHasFocus
// Il2CppName: get_gameHasFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::get_gameHasFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "get_gameHasFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::get_gameShouldGetInputRegardlessOfFocus
// Il2CppName: get_gameShouldGetInputRegardlessOfFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::get_gameShouldGetInputRegardlessOfFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "get_gameShouldGetInputRegardlessOfFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RegisterControlLayout
// Il2CppName: RegisterControlLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::StringW, ::System::Type*)>(&UnityEngine::InputSystem::InputManager::RegisterControlLayout)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "RegisterControlLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, type});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RegisterControlLayout
// Il2CppName: RegisterControlLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::StringW, ::StringW, bool)>(&UnityEngine::InputSystem::InputManager::RegisterControlLayout)> {
  static const MethodInfo* get() {
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isOverride = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "RegisterControlLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{json, name, isOverride});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RegisterControlLayoutBuilder
// Il2CppName: RegisterControlLayoutBuilder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Func_1<::UnityEngine::InputSystem::Layouts::InputControlLayout*>*, ::StringW, ::StringW)>(&UnityEngine::InputSystem::InputManager::RegisterControlLayoutBuilder)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputControlLayout")})->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* baseLayout = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "RegisterControlLayoutBuilder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method, name, baseLayout});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::PerformLayoutPostRegistration
// Il2CppName: PerformLayoutPostRegistration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::Utilities::InternedString, ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::Utilities::InternedString>, bool, bool, bool)>(&UnityEngine::InputSystem::InputManager::PerformLayoutPostRegistration)> {
  static const MethodInfo* get() {
    static auto* layoutName = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    static auto* baseLayouts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InlinedArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")})->byval_arg;
    static auto* isReplacement = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isKnownToBeDeviceLayout = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isOverride = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "PerformLayoutPostRegistration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layoutName, baseLayouts, isReplacement, isKnownToBeDeviceLayout, isOverride});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RegisterPrecompiledLayout
// Il2CppName: RegisterPrecompiledLayout
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RecreateDevicesUsingLayout
// Il2CppName: RecreateDevicesUsingLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::Utilities::InternedString, bool)>(&UnityEngine::InputSystem::InputManager::RecreateDevicesUsingLayout)> {
  static const MethodInfo* get() {
    static auto* layout = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    static auto* isKnownToBeDeviceLayout = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "RecreateDevicesUsingLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layout, isKnownToBeDeviceLayout});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::IsControlOrChildUsingLayoutRecursive
// Il2CppName: IsControlOrChildUsingLayoutRecursive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputControl*, ::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputManager::IsControlOrChildUsingLayoutRecursive)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* layout = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "IsControlOrChildUsingLayoutRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, layout});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::IsControlUsingLayout
// Il2CppName: IsControlUsingLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputControl*, ::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputManager::IsControlUsingLayout)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* layout = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "IsControlUsingLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, layout});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RegisterControlLayoutMatcher
// Il2CppName: RegisterControlLayoutMatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::StringW, ::UnityEngine::InputSystem::Layouts::InputDeviceMatcher)>(&UnityEngine::InputSystem::InputManager::RegisterControlLayoutMatcher)> {
  static const MethodInfo* get() {
    static auto* layoutName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* matcher = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputDeviceMatcher")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "RegisterControlLayoutMatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layoutName, matcher});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RegisterControlLayoutMatcher
// Il2CppName: RegisterControlLayoutMatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::System::Type*, ::UnityEngine::InputSystem::Layouts::InputDeviceMatcher)>(&UnityEngine::InputSystem::InputManager::RegisterControlLayoutMatcher)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* matcher = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputDeviceMatcher")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "RegisterControlLayoutMatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, matcher});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RecreateDevicesUsingLayoutWithInferiorMatch
// Il2CppName: RecreateDevicesUsingLayoutWithInferiorMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::Layouts::InputDeviceMatcher)>(&UnityEngine::InputSystem::InputManager::RecreateDevicesUsingLayoutWithInferiorMatch)> {
  static const MethodInfo* get() {
    static auto* deviceMatcher = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputDeviceMatcher")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "RecreateDevicesUsingLayoutWithInferiorMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceMatcher});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RecreateDevice
// Il2CppName: RecreateDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputManager::RecreateDevice)> {
  static const MethodInfo* get() {
    static auto* oldDevice = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* newLayout = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "RecreateDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldDevice, newLayout});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::AddAvailableDevicesMatchingDescription
// Il2CppName: AddAvailableDevicesMatchingDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::Layouts::InputDeviceMatcher, ::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputManager::AddAvailableDevicesMatchingDescription)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputDeviceMatcher")->byval_arg;
    static auto* layout = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "AddAvailableDevicesMatchingDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher, layout});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RemoveControlLayout
// Il2CppName: RemoveControlLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::StringW)>(&UnityEngine::InputSystem::InputManager::RemoveControlLayout)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "RemoveControlLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::TryLoadControlLayout
// Il2CppName: TryLoadControlLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Layouts::InputControlLayout* (UnityEngine::InputSystem::InputManager::*)(::System::Type*)>(&UnityEngine::InputSystem::InputManager::TryLoadControlLayout)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "TryLoadControlLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::TryLoadControlLayout
// Il2CppName: TryLoadControlLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Layouts::InputControlLayout* (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputManager::TryLoadControlLayout)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "TryLoadControlLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::TryFindMatchingControlLayout
// Il2CppName: TryFindMatchingControlLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::InternedString (UnityEngine::InputSystem::InputManager::*)(ByRef<::UnityEngine::InputSystem::Layouts::InputDeviceDescription>, int)>(&UnityEngine::InputSystem::InputManager::TryFindMatchingControlLayout)> {
  static const MethodInfo* get() {
    static auto* deviceDescription = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputDeviceDescription")->this_arg;
    static auto* deviceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "TryFindMatchingControlLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceDescription, deviceId});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::FindOrRegisterDeviceLayoutForType
// Il2CppName: FindOrRegisterDeviceLayoutForType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::InternedString (UnityEngine::InputSystem::InputManager::*)(::System::Type*)>(&UnityEngine::InputSystem::InputManager::FindOrRegisterDeviceLayoutForType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "FindOrRegisterDeviceLayoutForType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::IsDeviceLayoutMarkedAsSupportedInSettings
// Il2CppName: IsDeviceLayoutMarkedAsSupportedInSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputManager::IsDeviceLayoutMarkedAsSupportedInSettings)> {
  static const MethodInfo* get() {
    static auto* layoutName = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "IsDeviceLayoutMarkedAsSupportedInSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layoutName});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::ListControlLayouts
// Il2CppName: ListControlLayouts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::StringW>* (UnityEngine::InputSystem::InputManager::*)(::StringW)>(&UnityEngine::InputSystem::InputManager::ListControlLayouts)> {
  static const MethodInfo* get() {
    static auto* basedOn = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "ListControlLayouts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{basedOn});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::GetControls
// Il2CppName: GetControls
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::SetDeviceUsage
// Il2CppName: SetDeviceUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputManager::SetDeviceUsage)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* usage = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "SetDeviceUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, usage});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::AddDeviceUsage
// Il2CppName: AddDeviceUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputManager::AddDeviceUsage)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* usage = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "AddDeviceUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, usage});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RemoveDeviceUsage
// Il2CppName: RemoveDeviceUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputManager::RemoveDeviceUsage)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* usage = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "RemoveDeviceUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, usage});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::NotifyUsageChanged
// Il2CppName: NotifyUsageChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::InputManager::NotifyUsageChanged)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "NotifyUsageChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::AddDevice
// Il2CppName: AddDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputDevice* (UnityEngine::InputSystem::InputManager::*)(::System::Type*, ::StringW)>(&UnityEngine::InputSystem::InputManager::AddDevice)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "AddDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, name});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::AddDevice
// Il2CppName: AddDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputDevice* (UnityEngine::InputSystem::InputManager::*)(::StringW, ::StringW, ::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputManager::AddDevice)> {
  static const MethodInfo* get() {
    static auto* layout = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* variants = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "AddDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layout, name, variants});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::AddDevice
// Il2CppName: AddDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputDevice* (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::Utilities::InternedString, int, ::StringW, ::UnityEngine::InputSystem::Layouts::InputDeviceDescription, ::UnityEngine::InputSystem::InputDevice::DeviceFlags, ::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputManager::AddDevice)> {
  static const MethodInfo* get() {
    static auto* layout = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    static auto* deviceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* deviceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* deviceDescription = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputDeviceDescription")->byval_arg;
    static auto* deviceFlags = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice/DeviceFlags")->byval_arg;
    static auto* variants = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "AddDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layout, deviceId, deviceName, deviceDescription, deviceFlags, variants});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::AddDevice
// Il2CppName: AddDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::InputManager::AddDevice)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "AddDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::AddDevice
// Il2CppName: AddDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputDevice* (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::Layouts::InputDeviceDescription)>(&UnityEngine::InputSystem::InputManager::AddDevice)> {
  static const MethodInfo* get() {
    static auto* description = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputDeviceDescription")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "AddDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{description});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::AddDevice
// Il2CppName: AddDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputDevice* (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::Layouts::InputDeviceDescription, bool, ::StringW, int, ::UnityEngine::InputSystem::InputDevice::DeviceFlags)>(&UnityEngine::InputSystem::InputManager::AddDevice)> {
  static const MethodInfo* get() {
    static auto* description = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputDeviceDescription")->byval_arg;
    static auto* throwIfNoLayoutFound = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* deviceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* deviceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* deviceFlags = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice/DeviceFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "AddDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{description, throwIfNoLayoutFound, deviceName, deviceId, deviceFlags});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::AddDevice
// Il2CppName: AddDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputDevice* (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::Layouts::InputDeviceDescription, ::UnityEngine::InputSystem::Utilities::InternedString, ::StringW, int, ::UnityEngine::InputSystem::InputDevice::DeviceFlags)>(&UnityEngine::InputSystem::InputManager::AddDevice)> {
  static const MethodInfo* get() {
    static auto* description = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputDeviceDescription")->byval_arg;
    static auto* layout = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    static auto* deviceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* deviceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* deviceFlags = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice/DeviceFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "AddDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{description, layout, deviceName, deviceId, deviceFlags});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RemoveDevice
// Il2CppName: RemoveDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*, bool)>(&UnityEngine::InputSystem::InputManager::RemoveDevice)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* keepOnListOfAvailableDevices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "RemoveDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, keepOnListOfAvailableDevices});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::FlushDisconnectedDevices
// Il2CppName: FlushDisconnectedDevices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::FlushDisconnectedDevices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "FlushDisconnectedDevices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::ResetDevice
// Il2CppName: ResetDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*, bool, ::System::Nullable_1<bool>)>(&UnityEngine::InputSystem::InputManager::ResetDevice)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* alsoResetDontResetControls = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* issueResetCommand = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "ResetDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, alsoResetDontResetControls, issueResetCommand});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::TryGetDevice
// Il2CppName: TryGetDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputDevice* (UnityEngine::InputSystem::InputManager::*)(::StringW)>(&UnityEngine::InputSystem::InputManager::TryGetDevice)> {
  static const MethodInfo* get() {
    static auto* nameOrLayout = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "TryGetDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameOrLayout});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::GetDevice
// Il2CppName: GetDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputDevice* (UnityEngine::InputSystem::InputManager::*)(::StringW)>(&UnityEngine::InputSystem::InputManager::GetDevice)> {
  static const MethodInfo* get() {
    static auto* nameOrLayout = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "GetDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameOrLayout});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::TryGetDevice
// Il2CppName: TryGetDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputDevice* (UnityEngine::InputSystem::InputManager::*)(::System::Type*)>(&UnityEngine::InputSystem::InputManager::TryGetDevice)> {
  static const MethodInfo* get() {
    static auto* layoutType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "TryGetDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layoutType});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::TryGetDeviceById
// Il2CppName: TryGetDeviceById
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputDevice* (UnityEngine::InputSystem::InputManager::*)(int)>(&UnityEngine::InputSystem::InputManager::TryGetDeviceById)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "TryGetDeviceById", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::GetUnsupportedDevices
// Il2CppName: GetUnsupportedDevices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputManager::*)(::System::Collections::Generic::List_1<::UnityEngine::InputSystem::Layouts::InputDeviceDescription>*)>(&UnityEngine::InputSystem::InputManager::GetUnsupportedDevices)> {
  static const MethodInfo* get() {
    static auto* descriptions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputDeviceDescription")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "GetUnsupportedDevices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{descriptions});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::EnableOrDisableDevice
// Il2CppName: EnableOrDisableDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*, bool, ::UnityEngine::InputSystem::InputManager::DeviceDisableScope)>(&UnityEngine::InputSystem::InputManager::EnableOrDisableDevice)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* scope = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputManager/DeviceDisableScope")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "EnableOrDisableDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, enable, scope});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::QueueEvent
// Il2CppName: QueueEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::LowLevel::InputEvent*)>(&UnityEngine::InputSystem::InputManager::QueueEvent)> {
  static const MethodInfo* get() {
    static auto* eventPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEvent"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "QueueEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::QueueEvent
// Il2CppName: QueueEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::LowLevel::InputEventPtr)>(&UnityEngine::InputSystem::InputManager::QueueEvent)> {
  static const MethodInfo* get() {
    static auto* ptr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "QueueEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::QueueEvent
// Il2CppName: QueueEvent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::LowLevel::InputUpdateType)>(&UnityEngine::InputSystem::InputManager::Update)> {
  static const MethodInfo* get() {
    static auto* updateType = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputUpdateType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateType});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::LowLevel::IInputRuntime*, ::UnityEngine::InputSystem::InputSettings*)>(&UnityEngine::InputSystem::InputManager::Initialize)> {
  static const MethodInfo* get() {
    static auto* runtime = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "IInputRuntime")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runtime, settings});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::InitializeData
// Il2CppName: InitializeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::InitializeData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "InitializeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::InstallRuntime
// Il2CppName: InstallRuntime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::LowLevel::IInputRuntime*)>(&UnityEngine::InputSystem::InputManager::InstallRuntime)> {
  static const MethodInfo* get() {
    static auto* runtime = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "IInputRuntime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "InstallRuntime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runtime});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::InstallGlobals
// Il2CppName: InstallGlobals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::InstallGlobals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "InstallGlobals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::UninstallGlobals
// Il2CppName: UninstallGlobals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::UninstallGlobals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "UninstallGlobals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::MakeDeviceNameUnique
// Il2CppName: MakeDeviceNameUnique
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::InputManager::MakeDeviceNameUnique)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "MakeDeviceNameUnique", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::ResetControlPathsRecursive
// Il2CppName: ResetControlPathsRecursive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::InputSystem::InputControl*)>(&UnityEngine::InputSystem::InputManager::ResetControlPathsRecursive)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "ResetControlPathsRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::AssignUniqueDeviceId
// Il2CppName: AssignUniqueDeviceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::InputManager::AssignUniqueDeviceId)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "AssignUniqueDeviceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::ReallocateStateBuffers
// Il2CppName: ReallocateStateBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::ReallocateStateBuffers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "ReallocateStateBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::InitializeDefaultState
// Il2CppName: InitializeDefaultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::InputManager::InitializeDefaultState)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "InitializeDefaultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::InitializeDeviceState
// Il2CppName: InitializeDeviceState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::InputManager::InitializeDeviceState)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "InitializeDeviceState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::OnNativeDeviceDiscovered
// Il2CppName: OnNativeDeviceDiscovered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(int, ::StringW)>(&UnityEngine::InputSystem::InputManager::OnNativeDeviceDiscovered)> {
  static const MethodInfo* get() {
    static auto* deviceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* deviceDescriptor = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "OnNativeDeviceDiscovered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceId, deviceDescriptor});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::TryMatchDisconnectedDevice
// Il2CppName: TryMatchDisconnectedDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputDevice* (UnityEngine::InputSystem::InputManager::*)(::StringW)>(&UnityEngine::InputSystem::InputManager::TryMatchDisconnectedDevice)> {
  static const MethodInfo* get() {
    static auto* deviceDescriptor = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "TryMatchDisconnectedDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceDescriptor});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::InstallBeforeUpdateHookIfNecessary
// Il2CppName: InstallBeforeUpdateHookIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::InstallBeforeUpdateHookIfNecessary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "InstallBeforeUpdateHookIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RestoreDevicesAfterDomainReloadIfNecessary
// Il2CppName: RestoreDevicesAfterDomainReloadIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::RestoreDevicesAfterDomainReloadIfNecessary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "RestoreDevicesAfterDomainReloadIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::WarnAboutDevicesFailingToRecreateAfterDomainReload
// Il2CppName: WarnAboutDevicesFailingToRecreateAfterDomainReload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::WarnAboutDevicesFailingToRecreateAfterDomainReload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "WarnAboutDevicesFailingToRecreateAfterDomainReload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::OnBeforeUpdate
// Il2CppName: OnBeforeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::LowLevel::InputUpdateType)>(&UnityEngine::InputSystem::InputManager::OnBeforeUpdate)> {
  static const MethodInfo* get() {
    static auto* updateType = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputUpdateType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "OnBeforeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateType});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::ApplySettings
// Il2CppName: ApplySettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::ApplySettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "ApplySettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::ExecuteGlobalCommand
// Il2CppName: ExecuteGlobalCommand
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::AddAvailableDevicesThatAreNowRecognized
// Il2CppName: AddAvailableDevicesThatAreNowRecognized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::AddAvailableDevicesThatAreNowRecognized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "AddAvailableDevicesThatAreNowRecognized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::ShouldRunDeviceInBackground
// Il2CppName: ShouldRunDeviceInBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::InputManager::ShouldRunDeviceInBackground)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "ShouldRunDeviceInBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::OnFocusChanged
// Il2CppName: OnFocusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(bool)>(&UnityEngine::InputSystem::InputManager::OnFocusChanged)> {
  static const MethodInfo* get() {
    static auto* focus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "OnFocusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focus});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::ShouldRunUpdate
// Il2CppName: ShouldRunUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::LowLevel::InputUpdateType)>(&UnityEngine::InputSystem::InputManager::ShouldRunUpdate)> {
  static const MethodInfo* get() {
    static auto* updateType = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputUpdateType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "ShouldRunUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateType});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::LowLevel::InputUpdateType, ByRef<::UnityEngine::InputSystem::LowLevel::InputEventBuffer>)>(&UnityEngine::InputSystem::InputManager::OnUpdate)> {
  static const MethodInfo* get() {
    static auto* updateType = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputUpdateType")->byval_arg;
    static auto* eventBuffer = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateType, eventBuffer});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::InvokeAfterUpdateCallback
// Il2CppName: InvokeAfterUpdateCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::LowLevel::InputUpdateType)>(&UnityEngine::InputSystem::InputManager::InvokeAfterUpdateCallback)> {
  static const MethodInfo* get() {
    static auto* updateType = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputUpdateType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "InvokeAfterUpdateCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateType});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::DontMakeCurrentlyUpdatingDeviceCurrent
// Il2CppName: DontMakeCurrentlyUpdatingDeviceCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::DontMakeCurrentlyUpdatingDeviceCurrent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "DontMakeCurrentlyUpdatingDeviceCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::LowLevel::InputEvent*, ::UnityEngine::InputSystem::LowLevel::InputUpdateType)>(&UnityEngine::InputSystem::InputManager::UpdateState)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* eventPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEvent"))->byval_arg;
    static auto* updateType = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputUpdateType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, eventPtr, updateType});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::LowLevel::InputUpdateType, void*, uint, uint, double, ::UnityEngine::InputSystem::LowLevel::InputEventPtr)>(&UnityEngine::InputSystem::InputManager::UpdateState)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* updateType = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputUpdateType")->byval_arg;
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* stateOffsetInDevice = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* stateSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* internalTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, updateType, statePtr, stateOffsetInDevice, stateSize, internalTime, eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::WriteStateChange
// Il2CppName: WriteStateChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::LowLevel::InputStateBuffers::DoubleBuffers, int, ByRef<::UnityEngine::InputSystem::LowLevel::InputStateBlock>, uint, void*, uint, bool)>(&UnityEngine::InputSystem::InputManager::WriteStateChange)> {
  static const MethodInfo* get() {
    static auto* buffers = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputStateBuffers/DoubleBuffers")->byval_arg;
    static auto* deviceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* deviceStateBlock = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputStateBlock")->this_arg;
    static auto* stateOffsetInDevice = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* stateSizeInBytes = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* flippedBuffers = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "WriteStateChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffers, deviceIndex, deviceStateBlock, stateOffsetInDevice, statePtr, stateSizeInBytes, flippedBuffers});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::FlipBuffersForDeviceIfNecessary
// Il2CppName: FlipBuffersForDeviceIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::LowLevel::InputUpdateType)>(&UnityEngine::InputSystem::InputManager::FlipBuffersForDeviceIfNecessary)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* updateType = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputUpdateType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "FlipBuffersForDeviceIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, updateType});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::AddStateChangeMonitor
// Il2CppName: AddStateChangeMonitor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputControl*, ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor*, int64_t, uint)>(&UnityEngine::InputSystem::InputManager::AddStateChangeMonitor)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* monitor = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "IInputStateChangeMonitor")->byval_arg;
    static auto* monitorIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* groupIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "AddStateChangeMonitor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, monitor, monitorIndex, groupIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RemoveStateChangeMonitors
// Il2CppName: RemoveStateChangeMonitors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::InputManager::RemoveStateChangeMonitors)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "RemoveStateChangeMonitors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RemoveStateChangeMonitor
// Il2CppName: RemoveStateChangeMonitor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputControl*, ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor*, int64_t)>(&UnityEngine::InputSystem::InputManager::RemoveStateChangeMonitor)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* monitor = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "IInputStateChangeMonitor")->byval_arg;
    static auto* monitorIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "RemoveStateChangeMonitor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, monitor, monitorIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::AddStateChangeMonitorTimeout
// Il2CppName: AddStateChangeMonitorTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputControl*, ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor*, double, int64_t, int)>(&UnityEngine::InputSystem::InputManager::AddStateChangeMonitorTimeout)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* monitor = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "IInputStateChangeMonitor")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* monitorIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* timerIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "AddStateChangeMonitorTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, monitor, time, monitorIndex, timerIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::RemoveStateChangeMonitorTimeout
// Il2CppName: RemoveStateChangeMonitorTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor*, int64_t, int)>(&UnityEngine::InputSystem::InputManager::RemoveStateChangeMonitorTimeout)> {
  static const MethodInfo* get() {
    static auto* monitor = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "IInputStateChangeMonitor")->byval_arg;
    static auto* monitorIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* timerIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "RemoveStateChangeMonitorTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{monitor, monitorIndex, timerIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::SortStateChangeMonitorsIfNecessary
// Il2CppName: SortStateChangeMonitorsIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(int)>(&UnityEngine::InputSystem::InputManager::SortStateChangeMonitorsIfNecessary)> {
  static const MethodInfo* get() {
    static auto* deviceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "SortStateChangeMonitorsIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::SignalStateChangeMonitor
// Il2CppName: SignalStateChangeMonitor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(::UnityEngine::InputSystem::InputControl*, ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor*)>(&UnityEngine::InputSystem::InputManager::SignalStateChangeMonitor)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* monitor = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "IInputStateChangeMonitor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "SignalStateChangeMonitor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, monitor});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::FireStateChangeNotifications
// Il2CppName: FireStateChangeNotifications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::FireStateChangeNotifications)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "FireStateChangeNotifications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::ProcessStateChangeMonitors
// Il2CppName: ProcessStateChangeMonitors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputManager::*)(int, void*, void*, uint, uint)>(&UnityEngine::InputSystem::InputManager::ProcessStateChangeMonitors)> {
  static const MethodInfo* get() {
    static auto* deviceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newStateFromEvent = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* oldStateOfDevice = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* newStateSizeInBytes = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* newStateOffsetInBytes = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "ProcessStateChangeMonitors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceIndex, newStateFromEvent, oldStateOfDevice, newStateSizeInBytes, newStateOffsetInBytes});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::FireStateChangeNotifications
// Il2CppName: FireStateChangeNotifications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)(int, double, ::UnityEngine::InputSystem::LowLevel::InputEvent*)>(&UnityEngine::InputSystem::InputManager::FireStateChangeNotifications)> {
  static const MethodInfo* get() {
    static auto* deviceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* internalTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* eventPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEvent"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "FireStateChangeNotifications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceIndex, internalTime, eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::ProcessStateChangeMonitorTimeouts
// Il2CppName: ProcessStateChangeMonitorTimeouts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputManager::*)()>(&UnityEngine::InputSystem::InputManager::ProcessStateChangeMonitorTimeouts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "ProcessStateChangeMonitorTimeouts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputManager::$TryFindMatchingControlLayout$b__72_0
// Il2CppName: <TryFindMatchingControlLayout>b__72_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::InputSystem::InputManager::*)(ByRef<::UnityEngine::InputSystem::LowLevel::InputDeviceCommand>)>(&UnityEngine::InputSystem::InputManager::$TryFindMatchingControlLayout$b__72_0)> {
  static const MethodInfo* get() {
    static auto* commandRef = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputDeviceCommand")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputManager*), "<TryFindMatchingControlLayout>b__72_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{commandRef});
  }
};
