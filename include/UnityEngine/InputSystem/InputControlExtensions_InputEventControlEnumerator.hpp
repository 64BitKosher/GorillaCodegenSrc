// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputControlExtensions
#include "UnityEngine/InputSystem/InputControlExtensions.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: UnityEngine.InputSystem.InputControlExtensions/Enumerate
#include "UnityEngine/InputSystem/InputControlExtensions_Enumerate.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEventPtr
#include "UnityEngine/InputSystem/LowLevel/InputEventPtr.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputControl
  class InputControl;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator, "UnityEngine.InputSystem", "InputControlExtensions/InputEventControlEnumerator");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x6C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputControlExtensions/InputEventControlEnumerator
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputControlExtensions::InputEventControlEnumerator/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::InputControl*>*/ {
    public:
    public:
    // private UnityEngine.InputSystem.InputControlExtensions/Enumerate m_Flags
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::InputSystem::InputControlExtensions::Enumerate m_Flags;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputControlExtensions::Enumerate) == 0x4);
    // Padding between fields: m_Flags and: m_Device
    char __padding0[0x4] = {};
    // private readonly UnityEngine.InputSystem.InputDevice m_Device
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::InputSystem::InputDevice* m_Device;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputDevice*) == 0x8);
    // private readonly System.UInt32[] m_StateOffsetToControlIndex
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint> m_StateOffsetToControlIndex;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // private readonly System.Int32 m_StateOffsetToControlIndexLength
    // Size: 0x4
    // Offset: 0x18
    int m_StateOffsetToControlIndexLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_StateOffsetToControlIndexLength and: m_AllControls
    char __padding3[0x4] = {};
    // private readonly UnityEngine.InputSystem.InputControl[] m_AllControls
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::InputSystem::InputControl*> m_AllControls;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputControl*>) == 0x8);
    // private System.Byte* m_DefaultState
    // Size: 0x8
    // Offset: 0x28
    uint8_t* m_DefaultState;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    // private System.Byte* m_CurrentState
    // Size: 0x8
    // Offset: 0x30
    uint8_t* m_CurrentState;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    // private System.Byte* m_NoiseMask
    // Size: 0x8
    // Offset: 0x38
    uint8_t* m_NoiseMask;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    // private UnityEngine.InputSystem.LowLevel.InputEventPtr m_EventPtr
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::InputSystem::LowLevel::InputEventPtr m_EventPtr;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputEventPtr) == 0x8);
    // private UnityEngine.InputSystem.InputControl m_CurrentControl
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::InputSystem::InputControl* m_CurrentControl;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputControl*) == 0x8);
    // private System.Int32 m_CurrentIndexInStateOffsetToControlIndexMap
    // Size: 0x4
    // Offset: 0x50
    int m_CurrentIndexInStateOffsetToControlIndexMap;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt32 m_CurrentControlStateBitOffset
    // Size: 0x4
    // Offset: 0x54
    uint m_CurrentControlStateBitOffset;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Byte* m_EventState
    // Size: 0x8
    // Offset: 0x58
    uint8_t* m_EventState;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    // private System.UInt32 m_CurrentBitOffset
    // Size: 0x4
    // Offset: 0x60
    uint m_CurrentBitOffset;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_EndBitOffset
    // Size: 0x4
    // Offset: 0x64
    uint m_EndBitOffset;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Single m_MagnitudeThreshold
    // Size: 0x4
    // Offset: 0x68
    float m_MagnitudeThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: InputEventControlEnumerator
    constexpr InputEventControlEnumerator(::UnityEngine::InputSystem::InputControlExtensions::Enumerate m_Flags_ = {}, ::UnityEngine::InputSystem::InputDevice* m_Device_ = {}, ::ArrayW<uint> m_StateOffsetToControlIndex_ = ::ArrayW<uint>(static_cast<void*>(nullptr)), int m_StateOffsetToControlIndexLength_ = {}, ::ArrayW<::UnityEngine::InputSystem::InputControl*> m_AllControls_ = ::ArrayW<::UnityEngine::InputSystem::InputControl*>(static_cast<void*>(nullptr)), uint8_t* m_DefaultState_ = {}, uint8_t* m_CurrentState_ = {}, uint8_t* m_NoiseMask_ = {}, ::UnityEngine::InputSystem::LowLevel::InputEventPtr m_EventPtr_ = {}, ::UnityEngine::InputSystem::InputControl* m_CurrentControl_ = {}, int m_CurrentIndexInStateOffsetToControlIndexMap_ = {}, uint m_CurrentControlStateBitOffset_ = {}, uint8_t* m_EventState_ = {}, uint m_CurrentBitOffset_ = {}, uint m_EndBitOffset_ = {}, float m_MagnitudeThreshold_ = {}) noexcept : m_Flags{m_Flags_}, m_Device{m_Device_}, m_StateOffsetToControlIndex{m_StateOffsetToControlIndex_}, m_StateOffsetToControlIndexLength{m_StateOffsetToControlIndexLength_}, m_AllControls{m_AllControls_}, m_DefaultState{m_DefaultState_}, m_CurrentState{m_CurrentState_}, m_NoiseMask{m_NoiseMask_}, m_EventPtr{m_EventPtr_}, m_CurrentControl{m_CurrentControl_}, m_CurrentIndexInStateOffsetToControlIndexMap{m_CurrentIndexInStateOffsetToControlIndexMap_}, m_CurrentControlStateBitOffset{m_CurrentControlStateBitOffset_}, m_EventState{m_EventState_}, m_CurrentBitOffset{m_CurrentBitOffset_}, m_EndBitOffset{m_EndBitOffset_}, m_MagnitudeThreshold{m_MagnitudeThreshold_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::InputControl*>
    operator ::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::InputControl*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::InputControl*>*>(this);
    }
    // Get instance field reference: private UnityEngine.InputSystem.InputControlExtensions/Enumerate m_Flags
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputControlExtensions::Enumerate& dyn_m_Flags();
    // Get instance field reference: private readonly UnityEngine.InputSystem.InputDevice m_Device
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputDevice*& dyn_m_Device();
    // Get instance field reference: private readonly System.UInt32[] m_StateOffsetToControlIndex
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_m_StateOffsetToControlIndex();
    // Get instance field reference: private readonly System.Int32 m_StateOffsetToControlIndexLength
    [[deprecated("Use field access instead!")]] int& dyn_m_StateOffsetToControlIndexLength();
    // Get instance field reference: private readonly UnityEngine.InputSystem.InputControl[] m_AllControls
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputControl*>& dyn_m_AllControls();
    // Get instance field reference: private System.Byte* m_DefaultState
    [[deprecated("Use field access instead!")]] uint8_t*& dyn_m_DefaultState();
    // Get instance field reference: private System.Byte* m_CurrentState
    [[deprecated("Use field access instead!")]] uint8_t*& dyn_m_CurrentState();
    // Get instance field reference: private System.Byte* m_NoiseMask
    [[deprecated("Use field access instead!")]] uint8_t*& dyn_m_NoiseMask();
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.InputEventPtr m_EventPtr
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputEventPtr& dyn_m_EventPtr();
    // Get instance field reference: private UnityEngine.InputSystem.InputControl m_CurrentControl
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputControl*& dyn_m_CurrentControl();
    // Get instance field reference: private System.Int32 m_CurrentIndexInStateOffsetToControlIndexMap
    [[deprecated("Use field access instead!")]] int& dyn_m_CurrentIndexInStateOffsetToControlIndexMap();
    // Get instance field reference: private System.UInt32 m_CurrentControlStateBitOffset
    [[deprecated("Use field access instead!")]] uint& dyn_m_CurrentControlStateBitOffset();
    // Get instance field reference: private System.Byte* m_EventState
    [[deprecated("Use field access instead!")]] uint8_t*& dyn_m_EventState();
    // Get instance field reference: private System.UInt32 m_CurrentBitOffset
    [[deprecated("Use field access instead!")]] uint& dyn_m_CurrentBitOffset();
    // Get instance field reference: private System.UInt32 m_EndBitOffset
    [[deprecated("Use field access instead!")]] uint& dyn_m_EndBitOffset();
    // Get instance field reference: private System.Single m_MagnitudeThreshold
    [[deprecated("Use field access instead!")]] float& dyn_m_MagnitudeThreshold();
    // System.Void .ctor(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.InputControlExtensions/Enumerate flags, System.Single magnitudeThreshold)
    // Offset: 0x50C016C
    InputEventControlEnumerator(::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr, ::UnityEngine::InputSystem::InputDevice* device, ::UnityEngine::InputSystem::InputControlExtensions::Enumerate flags, float magnitudeThreshold);
    // private System.Boolean CheckDefault(System.UInt32 numBits)
    // Offset: 0x50C0880
    bool CheckDefault(uint numBits);
    // private System.Boolean CheckCurrent(System.UInt32 numBits)
    // Offset: 0x50C08A4
    bool CheckCurrent(uint numBits);
    // public System.Boolean MoveNext()
    // Offset: 0x50BFA14
    bool MoveNext();
    // public System.Void Reset()
    // Offset: 0x50C0450
    void Reset();
    // public System.Void Dispose()
    // Offset: 0x50C08E0
    void Dispose();
    // public UnityEngine.InputSystem.InputControl get_Current()
    // Offset: 0x50C08E8
    ::UnityEngine::InputSystem::InputControl* get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x50C08F0
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
  }; // UnityEngine.InputSystem.InputControlExtensions/InputEventControlEnumerator
  #pragma pack(pop)
  static check_size<sizeof(InputControlExtensions::InputEventControlEnumerator), 104 + sizeof(float)> __UnityEngine_InputSystem_InputControlExtensions_InputEventControlEnumeratorSizeCheck;
  static_assert(sizeof(InputControlExtensions::InputEventControlEnumerator) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::InputEventControlEnumerator
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::CheckDefault
// Il2CppName: CheckDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::*)(uint)>(&UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::CheckDefault)> {
  static const MethodInfo* get() {
    static auto* numBits = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator), "CheckDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numBits});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::CheckCurrent
// Il2CppName: CheckCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::*)(uint)>(&UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::CheckCurrent)> {
  static const MethodInfo* get() {
    static auto* numBits = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator), "CheckCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numBits});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::*)()>(&UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::*)()>(&UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::*)()>(&UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControl* (UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::*)()>(&UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::*)()>(&UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::InputEventControlEnumerator), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
