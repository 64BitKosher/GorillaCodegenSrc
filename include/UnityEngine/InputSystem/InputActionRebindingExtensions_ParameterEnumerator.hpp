// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputActionRebindingExtensions
#include "UnityEngine/InputSystem/InputActionRebindingExtensions.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: UnityEngine.InputSystem.InputActionRebindingExtensions/Parameter
#include "UnityEngine/InputSystem/InputActionRebindingExtensions_Parameter.hpp"
// Including type: UnityEngine.InputSystem.InputBinding
#include "UnityEngine/InputSystem/InputBinding.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputActionState
  class InputActionState;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: FieldInfo
  class FieldInfo;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator, "UnityEngine.InputSystem", "InputActionRebindingExtensions/ParameterEnumerator");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0xA8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputActionRebindingExtensions/ParameterEnumerator
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputActionRebindingExtensions::ParameterEnumerator/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::InputActionRebindingExtensions::Parameter>*/ {
    public:
    public:
    // private UnityEngine.InputSystem.InputActionState m_State
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::InputSystem::InputActionState* m_State;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionState*) == 0x8);
    // private System.Int32 m_MapIndex
    // Size: 0x4
    // Offset: 0x8
    int m_MapIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_BindingCurrentIndex
    // Size: 0x4
    // Offset: 0xC
    int m_BindingCurrentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_BindingEndIndex
    // Size: 0x4
    // Offset: 0x10
    int m_BindingEndIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_InteractionCurrentIndex
    // Size: 0x4
    // Offset: 0x14
    int m_InteractionCurrentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_InteractionEndIndex
    // Size: 0x4
    // Offset: 0x18
    int m_InteractionEndIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_ProcessorCurrentIndex
    // Size: 0x4
    // Offset: 0x1C
    int m_ProcessorCurrentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_ProcessorEndIndex
    // Size: 0x4
    // Offset: 0x20
    int m_ProcessorEndIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_ProcessorEndIndex and: m_BindingMask
    char __padding7[0x4] = {};
    // private UnityEngine.InputSystem.InputBinding m_BindingMask
    // Size: 0x58
    // Offset: 0x28
    ::UnityEngine::InputSystem::InputBinding m_BindingMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputBinding) == 0x58);
    // private System.Type m_ObjectType
    // Size: 0x8
    // Offset: 0x80
    ::System::Type* m_ObjectType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.String m_ParameterName
    // Size: 0x8
    // Offset: 0x88
    ::StringW m_ParameterName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean m_MayBeInteraction
    // Size: 0x1
    // Offset: 0x90
    bool m_MayBeInteraction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_MayBeProcessor
    // Size: 0x1
    // Offset: 0x91
    bool m_MayBeProcessor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_MayBeComposite
    // Size: 0x1
    // Offset: 0x92
    bool m_MayBeComposite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_CurrentBindingIsComposite
    // Size: 0x1
    // Offset: 0x93
    bool m_CurrentBindingIsComposite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_CurrentBindingIsComposite and: m_CurrentObject
    char __padding14[0x4] = {};
    // private System.Object m_CurrentObject
    // Size: 0x8
    // Offset: 0x98
    ::Il2CppObject* m_CurrentObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Reflection.FieldInfo m_CurrentParameter
    // Size: 0x8
    // Offset: 0xA0
    ::System::Reflection::FieldInfo* m_CurrentParameter;
    // Field size check
    static_assert(sizeof(::System::Reflection::FieldInfo*) == 0x8);
    public:
    // Creating value type constructor for type: ParameterEnumerator
    constexpr ParameterEnumerator(::UnityEngine::InputSystem::InputActionState* m_State_ = {}, int m_MapIndex_ = {}, int m_BindingCurrentIndex_ = {}, int m_BindingEndIndex_ = {}, int m_InteractionCurrentIndex_ = {}, int m_InteractionEndIndex_ = {}, int m_ProcessorCurrentIndex_ = {}, int m_ProcessorEndIndex_ = {}, ::UnityEngine::InputSystem::InputBinding m_BindingMask_ = {}, ::System::Type* m_ObjectType_ = {}, ::StringW m_ParameterName_ = {}, bool m_MayBeInteraction_ = {}, bool m_MayBeProcessor_ = {}, bool m_MayBeComposite_ = {}, bool m_CurrentBindingIsComposite_ = {}, ::Il2CppObject* m_CurrentObject_ = {}, ::System::Reflection::FieldInfo* m_CurrentParameter_ = {}) noexcept : m_State{m_State_}, m_MapIndex{m_MapIndex_}, m_BindingCurrentIndex{m_BindingCurrentIndex_}, m_BindingEndIndex{m_BindingEndIndex_}, m_InteractionCurrentIndex{m_InteractionCurrentIndex_}, m_InteractionEndIndex{m_InteractionEndIndex_}, m_ProcessorCurrentIndex{m_ProcessorCurrentIndex_}, m_ProcessorEndIndex{m_ProcessorEndIndex_}, m_BindingMask{m_BindingMask_}, m_ObjectType{m_ObjectType_}, m_ParameterName{m_ParameterName_}, m_MayBeInteraction{m_MayBeInteraction_}, m_MayBeProcessor{m_MayBeProcessor_}, m_MayBeComposite{m_MayBeComposite_}, m_CurrentBindingIsComposite{m_CurrentBindingIsComposite_}, m_CurrentObject{m_CurrentObject_}, m_CurrentParameter{m_CurrentParameter_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::InputActionRebindingExtensions::Parameter>
    operator ::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::InputActionRebindingExtensions::Parameter>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::InputActionRebindingExtensions::Parameter>*>(this);
    }
    // Get instance field reference: private UnityEngine.InputSystem.InputActionState m_State
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionState*& dyn_m_State();
    // Get instance field reference: private System.Int32 m_MapIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_MapIndex();
    // Get instance field reference: private System.Int32 m_BindingCurrentIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_BindingCurrentIndex();
    // Get instance field reference: private System.Int32 m_BindingEndIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_BindingEndIndex();
    // Get instance field reference: private System.Int32 m_InteractionCurrentIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_InteractionCurrentIndex();
    // Get instance field reference: private System.Int32 m_InteractionEndIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_InteractionEndIndex();
    // Get instance field reference: private System.Int32 m_ProcessorCurrentIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_ProcessorCurrentIndex();
    // Get instance field reference: private System.Int32 m_ProcessorEndIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_ProcessorEndIndex();
    // Get instance field reference: private UnityEngine.InputSystem.InputBinding m_BindingMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputBinding& dyn_m_BindingMask();
    // Get instance field reference: private System.Type m_ObjectType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_m_ObjectType();
    // Get instance field reference: private System.String m_ParameterName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_ParameterName();
    // Get instance field reference: private System.Boolean m_MayBeInteraction
    [[deprecated("Use field access instead!")]] bool& dyn_m_MayBeInteraction();
    // Get instance field reference: private System.Boolean m_MayBeProcessor
    [[deprecated("Use field access instead!")]] bool& dyn_m_MayBeProcessor();
    // Get instance field reference: private System.Boolean m_MayBeComposite
    [[deprecated("Use field access instead!")]] bool& dyn_m_MayBeComposite();
    // Get instance field reference: private System.Boolean m_CurrentBindingIsComposite
    [[deprecated("Use field access instead!")]] bool& dyn_m_CurrentBindingIsComposite();
    // Get instance field reference: private System.Object m_CurrentObject
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_m_CurrentObject();
    // Get instance field reference: private System.Reflection.FieldInfo m_CurrentParameter
    [[deprecated("Use field access instead!")]] ::System::Reflection::FieldInfo*& dyn_m_CurrentParameter();
    // public System.Void .ctor(UnityEngine.InputSystem.InputActionState state, UnityEngine.InputSystem.InputActionRebindingExtensions/ParameterOverride parameter, System.Int32 mapIndex)
    // Offset: 0x509C8E4
    ParameterEnumerator(::UnityEngine::InputSystem::InputActionState* state, ::UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterOverride parameter, int mapIndex);
    // private System.Boolean MoveToNextBinding()
    // Offset: 0x509CE6C
    bool MoveToNextBinding();
    // private System.Boolean MoveToNextInteraction()
    // Offset: 0x509D028
    bool MoveToNextInteraction();
    // private System.Boolean MoveToNextProcessor()
    // Offset: 0x509D19C
    bool MoveToNextProcessor();
    // private System.Boolean FindParameter(System.Object instance)
    // Offset: 0x509D098
    bool FindParameter(::Il2CppObject* instance);
    // public System.Boolean MoveNext()
    // Offset: 0x50973B8
    bool MoveNext();
    // public System.Void Reset()
    // Offset: 0x509CD84
    void Reset();
    // public UnityEngine.InputSystem.InputActionRebindingExtensions/Parameter get_Current()
    // Offset: 0x5097350
    ::UnityEngine::InputSystem::InputActionRebindingExtensions::Parameter get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x509D20C
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Void Dispose()
    // Offset: 0x509D27C
    void Dispose();
  }; // UnityEngine.InputSystem.InputActionRebindingExtensions/ParameterEnumerator
  #pragma pack(pop)
  static check_size<sizeof(InputActionRebindingExtensions::ParameterEnumerator), 160 + sizeof(::System::Reflection::FieldInfo*)> __UnityEngine_InputSystem_InputActionRebindingExtensions_ParameterEnumeratorSizeCheck;
  static_assert(sizeof(InputActionRebindingExtensions::ParameterEnumerator) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::ParameterEnumerator
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::MoveToNextBinding
// Il2CppName: MoveToNextBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::*)()>(&UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::MoveToNextBinding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator), "MoveToNextBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::MoveToNextInteraction
// Il2CppName: MoveToNextInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::*)()>(&UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::MoveToNextInteraction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator), "MoveToNextInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::MoveToNextProcessor
// Il2CppName: MoveToNextProcessor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::*)()>(&UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::MoveToNextProcessor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator), "MoveToNextProcessor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::FindParameter
// Il2CppName: FindParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::*)(::Il2CppObject*)>(&UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::FindParameter)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator), "FindParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::*)()>(&UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::*)()>(&UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionRebindingExtensions::Parameter (UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::*)()>(&UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::*)()>(&UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::*)()>(&UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionRebindingExtensions::ParameterEnumerator), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
