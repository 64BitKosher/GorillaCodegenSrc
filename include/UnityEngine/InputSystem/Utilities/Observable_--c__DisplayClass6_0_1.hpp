// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.Utilities.Observable
#include "UnityEngine/InputSystem/Utilities/Observable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IDisposable
  class IDisposable;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::InputSystem::Utilities::Observable::$$c__DisplayClass6_0_1, "UnityEngine.InputSystem.Utilities", "Observable/<>c__DisplayClass6_0`1");
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.InputSystem.Utilities.Observable/<>c__DisplayClass6_0`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  template<typename TValue>
  class Observable::$$c__DisplayClass6_0_1 : public ::Il2CppObject {
    public:
    public:
    // public System.IDisposable subscription
    // Size: 0x8
    // Offset: 0x0
    ::System::IDisposable* subscription;
    // Field size check
    static_assert(sizeof(::System::IDisposable*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::IDisposable*
    constexpr operator ::System::IDisposable*() const noexcept {
      return subscription;
    }
    // Autogenerated instance field getter
    // Get instance field: public System.IDisposable subscription
    [[deprecated("Use field access instead!")]] ::System::IDisposable*& dyn_subscription() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::Observable::$$c__DisplayClass6_0_1::dyn_subscription");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subscription"))->offset;
      return *reinterpret_cast<::System::IDisposable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Observable::$$c__DisplayClass6_0_1<TValue>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::Observable::$$c__DisplayClass6_0_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Observable::$$c__DisplayClass6_0_1<TValue>*, creationType>()));
    }
    // System.Void <CallOnce>b__0()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void $CallOnce$b__0() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::Observable::$$c__DisplayClass6_0_1::<CallOnce>b__0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CallOnce>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // UnityEngine.InputSystem.Utilities.Observable/<>c__DisplayClass6_0`1
  // Could not write size check! Type: UnityEngine.InputSystem.Utilities.Observable/<>c__DisplayClass6_0`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
