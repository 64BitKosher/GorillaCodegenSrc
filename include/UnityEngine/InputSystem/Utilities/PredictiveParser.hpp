// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: PredictiveParser
  struct PredictiveParser;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Utilities::PredictiveParser, "UnityEngine.InputSystem.Utilities", "PredictiveParser");
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.Utilities.PredictiveParser
  // [TokenAttribute] Offset: FFFFFFFF
  struct PredictiveParser/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 m_Position
    // Size: 0x4
    // Offset: 0x0
    int m_Position;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: PredictiveParser
    constexpr PredictiveParser(int m_Position_ = {}) noexcept : m_Position{m_Position_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return m_Position;
    }
    // Get instance field reference: private System.Int32 m_Position
    [[deprecated("Use field access instead!")]] int& dyn_m_Position();
    // public System.Void ExpectSingleChar(System.ReadOnlySpan`1<System.Char> str, System.Char c)
    // Offset: 0x517894C
    void ExpectSingleChar(::System::ReadOnlySpan_1<::Il2CppChar> str, ::Il2CppChar c);
    // public System.Int32 ExpectInt(System.ReadOnlySpan`1<System.Char> str)
    // Offset: 0x5178A4C
    int ExpectInt(::System::ReadOnlySpan_1<::Il2CppChar> str);
    // public System.ReadOnlySpan`1<System.Char> ExpectString(System.ReadOnlySpan`1<System.Char> str)
    // Offset: 0x5178B70
    ::System::ReadOnlySpan_1<::Il2CppChar> ExpectString(::System::ReadOnlySpan_1<::Il2CppChar> str);
    // public System.Boolean AcceptSingleChar(System.ReadOnlySpan`1<System.Char> str, System.Char c)
    // Offset: 0x5178D98
    bool AcceptSingleChar(::System::ReadOnlySpan_1<::Il2CppChar> str, ::Il2CppChar c);
    // public System.Boolean AcceptString(System.ReadOnlySpan`1<System.Char> input, out System.ReadOnlySpan`1<System.Char> output)
    // Offset: 0x5178DD0
    bool AcceptString(::System::ReadOnlySpan_1<::Il2CppChar> input, ByRef<::System::ReadOnlySpan_1<::Il2CppChar>> output);
    // public System.Void AcceptInt(System.ReadOnlySpan`1<System.Char> str)
    // Offset: 0x5178F00
    void AcceptInt(::System::ReadOnlySpan_1<::Il2CppChar> str);
  }; // UnityEngine.InputSystem.Utilities.PredictiveParser
  #pragma pack(pop)
  static check_size<sizeof(PredictiveParser), 0 + sizeof(int)> __UnityEngine_InputSystem_Utilities_PredictiveParserSizeCheck;
  static_assert(sizeof(PredictiveParser) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::PredictiveParser::ExpectSingleChar
// Il2CppName: ExpectSingleChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::PredictiveParser::*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::Il2CppChar)>(&UnityEngine::InputSystem::Utilities::PredictiveParser::ExpectSingleChar)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::PredictiveParser), "ExpectSingleChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, c});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::PredictiveParser::ExpectInt
// Il2CppName: ExpectInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::Utilities::PredictiveParser::*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&UnityEngine::InputSystem::Utilities::PredictiveParser::ExpectInt)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::PredictiveParser), "ExpectInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::PredictiveParser::ExpectString
// Il2CppName: ExpectString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (UnityEngine::InputSystem::Utilities::PredictiveParser::*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&UnityEngine::InputSystem::Utilities::PredictiveParser::ExpectString)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::PredictiveParser), "ExpectString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::PredictiveParser::AcceptSingleChar
// Il2CppName: AcceptSingleChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::PredictiveParser::*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::Il2CppChar)>(&UnityEngine::InputSystem::Utilities::PredictiveParser::AcceptSingleChar)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::PredictiveParser), "AcceptSingleChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, c});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::PredictiveParser::AcceptString
// Il2CppName: AcceptString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::PredictiveParser::*)(::System::ReadOnlySpan_1<::Il2CppChar>, ByRef<::System::ReadOnlySpan_1<::Il2CppChar>>)>(&UnityEngine::InputSystem::Utilities::PredictiveParser::AcceptString)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::PredictiveParser), "AcceptString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, output});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::PredictiveParser::AcceptInt
// Il2CppName: AcceptInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::PredictiveParser::*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&UnityEngine::InputSystem::Utilities::PredictiveParser::AcceptInt)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::PredictiveParser), "AcceptInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
