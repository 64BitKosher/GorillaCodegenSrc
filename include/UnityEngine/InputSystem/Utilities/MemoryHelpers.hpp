// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: MemoryHelpers
  class MemoryHelpers;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::Utilities::MemoryHelpers);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Utilities::MemoryHelpers*, "UnityEngine.InputSystem.Utilities", "MemoryHelpers");
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.Utilities.MemoryHelpers
  // [TokenAttribute] Offset: FFFFFFFF
  class MemoryHelpers : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion
    struct BitRegion;
    // static public System.Boolean Compare(System.Void* ptr1, System.Void* ptr2, UnityEngine.InputSystem.Utilities.MemoryHelpers/BitRegion region)
    // Offset: 0x5175CC8
    static bool Compare(void* ptr1, void* ptr2, ::UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion region);
    // static public System.UInt32 ComputeFollowingByteOffset(System.UInt32 byteOffset, System.UInt32 sizeInBits)
    // Offset: 0x5175E70
    static uint ComputeFollowingByteOffset(uint byteOffset, uint sizeInBits);
    // static public System.Void WriteSingleBit(System.Void* ptr, System.UInt32 bitOffset, System.Boolean value)
    // Offset: 0x5175E80
    static void WriteSingleBit(void* ptr, uint bitOffset, bool value);
    // static public System.Boolean ReadSingleBit(System.Void* ptr, System.UInt32 bitOffset)
    // Offset: 0x5175D0C
    static bool ReadSingleBit(void* ptr, uint bitOffset);
    // static public System.Void MemCpyBitRegion(System.Void* destination, System.Void* source, System.UInt32 bitOffset, System.UInt32 bitCount)
    // Offset: 0x5175EB0
    static void MemCpyBitRegion(void* destination, void* source, uint bitOffset, uint bitCount);
    // static public System.Boolean MemCmpBitRegion(System.Void* ptr1, System.Void* ptr2, System.UInt32 bitOffset, System.UInt32 bitCount, System.Void* mask)
    // Offset: 0x5175D28
    static bool MemCmpBitRegion(void* ptr1, void* ptr2, uint bitOffset, uint bitCount, void* mask);
    // static public System.Void MemSet(System.Void* destination, System.Int32 numBytes, System.Byte value)
    // Offset: 0x5175FA0
    static void MemSet(void* destination, int numBytes, uint8_t value);
    // static public System.Void MemCpyMasked(System.Void* destination, System.Void* source, System.Int32 numBytes, System.Void* mask)
    // Offset: 0x517603C
    static void MemCpyMasked(void* destination, void* source, int numBytes, void* mask);
    // static public System.UInt32 ReadMultipleBitsAsUInt(System.Void* ptr, System.UInt32 bitOffset, System.UInt32 bitCount)
    // Offset: 0x516E5E8
    static uint ReadMultipleBitsAsUInt(void* ptr, uint bitOffset, uint bitCount);
    // static public System.Void WriteUIntAsMultipleBits(System.Void* ptr, System.UInt32 bitOffset, System.UInt32 bitCount, System.UInt32 value)
    // Offset: 0x51760C0
    static void WriteUIntAsMultipleBits(void* ptr, uint bitOffset, uint bitCount, uint value);
    // static public System.Int32 ReadTwosComplementMultipleBitsAsInt(System.Void* ptr, System.UInt32 bitOffset, System.UInt32 bitCount)
    // Offset: 0x516C924
    static int ReadTwosComplementMultipleBitsAsInt(void* ptr, uint bitOffset, uint bitCount);
    // static public System.Void WriteIntAsTwosComplementMultipleBits(System.Void* ptr, System.UInt32 bitOffset, System.UInt32 bitCount, System.Int32 value)
    // Offset: 0x516CA0C
    static void WriteIntAsTwosComplementMultipleBits(void* ptr, uint bitOffset, uint bitCount, int value);
    // static public System.Int32 ReadExcessKMultipleBitsAsInt(System.Void* ptr, System.UInt32 bitOffset, System.UInt32 bitCount)
    // Offset: 0x517626C
    static int ReadExcessKMultipleBitsAsInt(void* ptr, uint bitOffset, uint bitCount);
    // static public System.Void WriteIntAsExcessKMultipleBits(System.Void* ptr, System.UInt32 bitOffset, System.UInt32 bitCount, System.Int32 value)
    // Offset: 0x5176290
    static void WriteIntAsExcessKMultipleBits(void* ptr, uint bitOffset, uint bitCount, int value);
    // static public System.Single ReadMultipleBitsAsNormalizedUInt(System.Void* ptr, System.UInt32 bitOffset, System.UInt32 bitCount)
    // Offset: 0x51762A4
    static float ReadMultipleBitsAsNormalizedUInt(void* ptr, uint bitOffset, uint bitCount);
    // static public System.Void WriteNormalizedUIntAsMultipleBits(System.Void* ptr, System.UInt32 bitOffset, System.UInt32 bitCount, System.Single value)
    // Offset: 0x51762EC
    static void WriteNormalizedUIntAsMultipleBits(void* ptr, uint bitOffset, uint bitCount, float value);
    // static public System.Void SetBitsInBuffer(System.Void* buffer, System.Int32 byteOffset, System.Int32 bitOffset, System.Int32 sizeInBits, System.Boolean value)
    // Offset: 0x517633C
    static void SetBitsInBuffer(void* buffer, int byteOffset, int bitOffset, int sizeInBits, bool value);
    // static public System.Void Swap(ref TValue a, ref TValue b)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void Swap(ByRef<TValue> a, ByRef<TValue> b) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::MemoryHelpers::Swap");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "MemoryHelpers", "Swap", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(a), byref(b));
    }
    // static public System.UInt32 AlignNatural(System.UInt32 offset, System.UInt32 sizeInBytes)
    // Offset: 0x5176500
    static uint AlignNatural(uint offset, uint sizeInBytes);
  }; // UnityEngine.InputSystem.Utilities.MemoryHelpers
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(void*, void*, ::UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::Compare)> {
  static const MethodInfo* get() {
    static auto* ptr1 = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* ptr2 = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* region = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "MemoryHelpers/BitRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr1, ptr2, region});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::ComputeFollowingByteOffset
// Il2CppName: ComputeFollowingByteOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, uint)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::ComputeFollowingByteOffset)> {
  static const MethodInfo* get() {
    static auto* byteOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* sizeInBits = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "ComputeFollowingByteOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{byteOffset, sizeInBits});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::WriteSingleBit
// Il2CppName: WriteSingleBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, uint, bool)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::WriteSingleBit)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bitOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "WriteSingleBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, bitOffset, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::ReadSingleBit
// Il2CppName: ReadSingleBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(void*, uint)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::ReadSingleBit)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bitOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "ReadSingleBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, bitOffset});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::MemCpyBitRegion
// Il2CppName: MemCpyBitRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, void*, uint, uint)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::MemCpyBitRegion)> {
  static const MethodInfo* get() {
    static auto* destination = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* source = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bitOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "MemCpyBitRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, source, bitOffset, bitCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::MemCmpBitRegion
// Il2CppName: MemCmpBitRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(void*, void*, uint, uint, void*)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::MemCmpBitRegion)> {
  static const MethodInfo* get() {
    static auto* ptr1 = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* ptr2 = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bitOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* mask = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "MemCmpBitRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr1, ptr2, bitOffset, bitCount, mask});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::MemSet
// Il2CppName: MemSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, int, uint8_t)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::MemSet)> {
  static const MethodInfo* get() {
    static auto* destination = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* numBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "MemSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, numBytes, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::MemCpyMasked
// Il2CppName: MemCpyMasked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, void*, int, void*)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::MemCpyMasked)> {
  static const MethodInfo* get() {
    static auto* destination = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* source = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* numBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mask = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "MemCpyMasked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, source, numBytes, mask});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::ReadMultipleBitsAsUInt
// Il2CppName: ReadMultipleBitsAsUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(void*, uint, uint)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::ReadMultipleBitsAsUInt)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bitOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "ReadMultipleBitsAsUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, bitOffset, bitCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::WriteUIntAsMultipleBits
// Il2CppName: WriteUIntAsMultipleBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, uint, uint, uint)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::WriteUIntAsMultipleBits)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bitOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "WriteUIntAsMultipleBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, bitOffset, bitCount, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::ReadTwosComplementMultipleBitsAsInt
// Il2CppName: ReadTwosComplementMultipleBitsAsInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(void*, uint, uint)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::ReadTwosComplementMultipleBitsAsInt)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bitOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "ReadTwosComplementMultipleBitsAsInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, bitOffset, bitCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::WriteIntAsTwosComplementMultipleBits
// Il2CppName: WriteIntAsTwosComplementMultipleBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, uint, uint, int)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::WriteIntAsTwosComplementMultipleBits)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bitOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "WriteIntAsTwosComplementMultipleBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, bitOffset, bitCount, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::ReadExcessKMultipleBitsAsInt
// Il2CppName: ReadExcessKMultipleBitsAsInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(void*, uint, uint)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::ReadExcessKMultipleBitsAsInt)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bitOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "ReadExcessKMultipleBitsAsInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, bitOffset, bitCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::WriteIntAsExcessKMultipleBits
// Il2CppName: WriteIntAsExcessKMultipleBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, uint, uint, int)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::WriteIntAsExcessKMultipleBits)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bitOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "WriteIntAsExcessKMultipleBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, bitOffset, bitCount, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::ReadMultipleBitsAsNormalizedUInt
// Il2CppName: ReadMultipleBitsAsNormalizedUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(void*, uint, uint)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::ReadMultipleBitsAsNormalizedUInt)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bitOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "ReadMultipleBitsAsNormalizedUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, bitOffset, bitCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::WriteNormalizedUIntAsMultipleBits
// Il2CppName: WriteNormalizedUIntAsMultipleBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, uint, uint, float)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::WriteNormalizedUIntAsMultipleBits)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bitOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "WriteNormalizedUIntAsMultipleBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, bitOffset, bitCount, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::SetBitsInBuffer
// Il2CppName: SetBitsInBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, int, int, int, bool)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::SetBitsInBuffer)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* byteOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bitOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sizeInBits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "SetBitsInBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, byteOffset, bitOffset, sizeInBits, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::Swap
// Il2CppName: Swap
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::AlignNatural
// Il2CppName: AlignNatural
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, uint)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::AlignNatural)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* sizeInBytes = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers*), "AlignNatural", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, sizeInBytes});
  }
};
