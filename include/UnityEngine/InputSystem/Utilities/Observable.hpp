// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEventPtr
#include "UnityEngine/InputSystem/LowLevel/InputEventPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IObservable`1<T>
  template<typename T>
  class IObservable_1;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: IDisposable
  class IDisposable;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: Observable
  class Observable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::Utilities::Observable);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Utilities::Observable*, "UnityEngine.InputSystem.Utilities", "Observable");
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.Utilities.Observable
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class Observable : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::InputSystem::Utilities::Observable::$$c__DisplayClass6_0_1<TValue>
    template<typename TValue>
    class $$c__DisplayClass6_0_1;
    // static public System.IObservable`1<TValue> Where(System.IObservable`1<TValue> source, System.Func`2<TValue,System.Boolean> predicate)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static ::System::IObservable_1<TValue>* Where(::System::IObservable_1<TValue>* source, ::System::Func_2<TValue, bool>* predicate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::Observable::Where");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "Observable", "Where", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(predicate)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::IObservable_1<TValue>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, predicate);
    }
    // static public System.IObservable`1<TResult> Select(System.IObservable`1<TSource> source, System.Func`2<TSource,TResult> filter)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource, class TResult>
    static ::System::IObservable_1<TResult>* Select(::System::IObservable_1<TSource>* source, ::System::Func_2<TSource, TResult>* filter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::Observable::Select");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "Observable", "Select", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(filter)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::IObservable_1<TResult>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, filter);
    }
    // static public System.IObservable`1<TResult> SelectMany(System.IObservable`1<TSource> source, System.Func`2<TSource,System.Collections.Generic.IEnumerable`1<TResult>> filter)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource, class TResult>
    static ::System::IObservable_1<TResult>* SelectMany(::System::IObservable_1<TSource>* source, ::System::Func_2<TSource, ::System::Collections::Generic::IEnumerable_1<TResult>*>* filter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::Observable::SelectMany");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "Observable", "SelectMany", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(filter)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::IObservable_1<TResult>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, filter);
    }
    // static public System.IObservable`1<TValue> Take(System.IObservable`1<TValue> source, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static ::System::IObservable_1<TValue>* Take(::System::IObservable_1<TValue>* source, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::Observable::Take");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "Observable", "Take", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::IObservable_1<TValue>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, count);
    }
    // static public System.IObservable`1<UnityEngine.InputSystem.LowLevel.InputEventPtr> ForDevice(System.IObservable`1<UnityEngine.InputSystem.LowLevel.InputEventPtr> source, UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x517889C
    static ::System::IObservable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>* ForDevice(::System::IObservable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>* source, ::UnityEngine::InputSystem::InputDevice* device);
    // static public System.IObservable`1<UnityEngine.InputSystem.LowLevel.InputEventPtr> ForDevice(System.IObservable`1<UnityEngine.InputSystem.LowLevel.InputEventPtr> source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TDevice>
    static ::System::IObservable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>* ForDevice(::System::IObservable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>* source) {
      static_assert(std::is_convertible_v<TDevice, ::UnityEngine::InputSystem::InputDevice*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::Observable::ForDevice");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "Observable", "ForDevice", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::IObservable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source);
    }
    // static public System.IDisposable CallOnce(System.IObservable`1<TValue> source, System.Action`1<TValue> action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static ::System::IDisposable* CallOnce(::System::IObservable_1<TValue>* source, ::System::Action_1<TValue>* action) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::Observable::CallOnce");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "Observable", "CallOnce", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::IDisposable*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, action);
    }
    // static public System.IDisposable Call(System.IObservable`1<TValue> source, System.Action`1<TValue> action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static ::System::IDisposable* Call(::System::IObservable_1<TValue>* source, ::System::Action_1<TValue>* action) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::Observable::Call");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "Observable", "Call", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::IDisposable*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, action);
    }
  }; // UnityEngine.InputSystem.Utilities.Observable
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Observable::Where
// Il2CppName: Where
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Observable::Select
// Il2CppName: Select
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Observable::SelectMany
// Il2CppName: SelectMany
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Observable::Take
// Il2CppName: Take
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Observable::ForDevice
// Il2CppName: ForDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IObservable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>* (*)(::System::IObservable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>*, ::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::Utilities::Observable::ForDevice)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "IObservable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")})->byval_arg;
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::Observable*), "ForDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Observable::ForDevice
// Il2CppName: ForDevice
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Observable::CallOnce
// Il2CppName: CallOnce
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Observable::Call
// Il2CppName: Call
// Cannot write MetadataGetter for generic methods!
