// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Skipping declaration: Enumerator because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: ReadOnlyArray`1<TValue>
  template<typename TValue>
  struct ReadOnlyArray_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1, "UnityEngine.InputSystem.Utilities", "ReadOnlyArray`1");
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  template<typename TValue>
  struct ReadOnlyArray_1/*, public ::System::ValueType, public ::System::Collections::Generic::IReadOnlyList_1<TValue>*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::Enumerator<TValue>
    struct Enumerator;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1/Enumerator
    // [TokenAttribute] Offset: FFFFFFFF
    struct Enumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<TValue>*/ {
      public:
      using declaring_type = ReadOnlyArray_1<TValue>;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // private readonly TValue[] m_Array
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<TValue> m_Array;
      // Field size check
      static_assert(sizeof(::ArrayW<TValue>) == 0x8);
      // private readonly System.Int32 m_IndexStart
      // Size: 0x4
      // Offset: 0x0
      int m_IndexStart;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private readonly System.Int32 m_IndexEnd
      // Size: 0x4
      // Offset: 0x0
      int m_IndexEnd;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Int32 m_Index
      // Size: 0x4
      // Offset: 0x0
      int m_Index;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Enumerator
      constexpr Enumerator(::ArrayW<TValue> m_Array_ = ::ArrayW<TValue>(static_cast<void*>(nullptr)), int m_IndexStart_ = {}, int m_IndexEnd_ = {}, int m_Index_ = {}) noexcept : m_Array{m_Array_}, m_IndexStart{m_IndexStart_}, m_IndexEnd{m_IndexEnd_}, m_Index{m_Index_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<TValue>
      operator ::System::Collections::Generic::IEnumerator_1<TValue>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<TValue>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly TValue[] m_Array
      [[deprecated("Use field access instead!")]] ::ArrayW<TValue>& dyn_m_Array() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::Enumerator::dyn_m_Array");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Array"))->offset;
        return *reinterpret_cast<::ArrayW<TValue>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly System.Int32 m_IndexStart
      [[deprecated("Use field access instead!")]] int& dyn_m_IndexStart() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::Enumerator::dyn_m_IndexStart");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_IndexStart"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly System.Int32 m_IndexEnd
      [[deprecated("Use field access instead!")]] int& dyn_m_IndexEnd() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::Enumerator::dyn_m_IndexEnd");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_IndexEnd"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 m_Index
      [[deprecated("Use field access instead!")]] int& dyn_m_Index() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::Enumerator::dyn_m_Index");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Index"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void .ctor(TValue[] array, System.Int32 index, System.Int32 length)
      // Offset: 0xFFFFFFFFFFFFFFFF
      Enumerator(::ArrayW<TValue> array, int index, int length) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::Enumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(length)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index, length);
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::Enumerator::Dispose");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<TValue>::Enumerator), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::Enumerator::MoveNext");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<TValue>::Enumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Void Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::Enumerator::Reset");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<TValue>::Enumerator), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public TValue get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      TValue get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::Enumerator::get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<TValue>::Enumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::Enumerator::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<TValue>::Enumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
    }; // UnityEngine.InputSystem.Utilities.ReadOnlyArray`1/Enumerator
    // Could not write size check! Type: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1/Enumerator is generic, or has no fields that are valid for size checks!
    public:
    // TValue[] m_Array
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<TValue> m_Array;
    // Field size check
    static_assert(sizeof(::ArrayW<TValue>) == 0x8);
    // System.Int32 m_StartIndex
    // Size: 0x4
    // Offset: 0x0
    int m_StartIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_Length
    // Size: 0x4
    // Offset: 0x0
    int m_Length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ReadOnlyArray_1
    constexpr ReadOnlyArray_1(::ArrayW<TValue> m_Array_ = ::ArrayW<TValue>(static_cast<void*>(nullptr)), int m_StartIndex_ = {}, int m_Length_ = {}) noexcept : m_Array{m_Array_}, m_StartIndex{m_StartIndex_}, m_Length{m_Length_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyList_1<TValue>
    operator ::System::Collections::Generic::IReadOnlyList_1<TValue>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<TValue>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: TValue[] m_Array
    [[deprecated("Use field access instead!")]] ::ArrayW<TValue>& dyn_m_Array() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::dyn_m_Array");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Array"))->offset;
      return *reinterpret_cast<::ArrayW<TValue>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: System.Int32 m_StartIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_StartIndex() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::dyn_m_StartIndex");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_StartIndex"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: System.Int32 m_Length
    [[deprecated("Use field access instead!")]] int& dyn_m_Length() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::dyn_m_Length");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Length"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(TValue[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ReadOnlyArray_1(::ArrayW<TValue> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array);
    }
    // public System.Void .ctor(TValue[] array, System.Int32 index, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // ABORTED: conflicts with another method.  ReadOnlyArray_1(::ArrayW<TValue> array, int index, int length)
    // public TValue[] ToArray()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<TValue> ToArray() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::ToArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<TValue>, false>(this, ___internal__method);
    }
    // public System.Int32 IndexOf(System.Predicate`1<TValue> predicate)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int IndexOf(::System::Predicate_1<TValue>* predicate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(predicate)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, predicate);
    }
    // public UnityEngine.InputSystem.Utilities.ReadOnlyArray`1/Enumerator<TValue> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<TValue>::Enumerator GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<TValue>::Enumerator, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerator`1<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<TValue>* System_Collections_Generic_IEnumerable$TValue$_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::System.Collections.Generic.IEnumerable<TValue>.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<TValue>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<TValue>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<TValue>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::get_Count");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<TValue>), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public TValue get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValue get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1::get_Item");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<TValue>), -1));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___internal__method, index);
    }
  }; // UnityEngine.InputSystem.Utilities.ReadOnlyArray`1
  // Could not write size check! Type: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
