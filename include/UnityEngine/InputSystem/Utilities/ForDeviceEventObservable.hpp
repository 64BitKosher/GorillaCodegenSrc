// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IObservable`1
#include "System/IObservable_1.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEventPtr
#include "UnityEngine/InputSystem/LowLevel/InputEventPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: IDisposable
  class IDisposable;
  // Forward declaring type: IObserver`1<T>
  template<typename T>
  class IObserver_1;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: ForDeviceEventObservable
  class ForDeviceEventObservable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::Utilities::ForDeviceEventObservable);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Utilities::ForDeviceEventObservable*, "UnityEngine.InputSystem.Utilities", "ForDeviceEventObservable");
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.Utilities.ForDeviceEventObservable
  // [TokenAttribute] Offset: FFFFFFFF
  class ForDeviceEventObservable : public ::Il2CppObject/*, public ::System::IObservable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::Utilities::ForDeviceEventObservable::ForDevice
    class ForDevice;
    public:
    // private System.IObservable`1<UnityEngine.InputSystem.LowLevel.InputEventPtr> m_Source
    // Size: 0x8
    // Offset: 0x10
    ::System::IObservable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>* m_Source;
    // Field size check
    static_assert(sizeof(::System::IObservable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>*) == 0x8);
    // private UnityEngine.InputSystem.InputDevice m_Device
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::InputSystem::InputDevice* m_Device;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputDevice*) == 0x8);
    // private System.Type m_DeviceType
    // Size: 0x8
    // Offset: 0x20
    ::System::Type* m_DeviceType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IObservable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>
    operator ::System::IObservable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>() noexcept {
      return *reinterpret_cast<::System::IObservable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>*>(this);
    }
    // Get instance field reference: private System.IObservable`1<UnityEngine.InputSystem.LowLevel.InputEventPtr> m_Source
    [[deprecated("Use field access instead!")]] ::System::IObservable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>*& dyn_m_Source();
    // Get instance field reference: private UnityEngine.InputSystem.InputDevice m_Device
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputDevice*& dyn_m_Device();
    // Get instance field reference: private System.Type m_DeviceType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_m_DeviceType();
    // public System.Void .ctor(System.IObservable`1<UnityEngine.InputSystem.LowLevel.InputEventPtr> source, System.Type deviceType, UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x5178510
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ForDeviceEventObservable* New_ctor(::System::IObservable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>* source, ::System::Type* deviceType, ::UnityEngine::InputSystem::InputDevice* device) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ForDeviceEventObservable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ForDeviceEventObservable*, creationType>(source, deviceType, device)));
    }
    // public System.IDisposable Subscribe(System.IObserver`1<UnityEngine.InputSystem.LowLevel.InputEventPtr> observer)
    // Offset: 0x5178570
    ::System::IDisposable* Subscribe(::System::IObserver_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>* observer);
  }; // UnityEngine.InputSystem.Utilities.ForDeviceEventObservable
  #pragma pack(pop)
  static check_size<sizeof(ForDeviceEventObservable), 32 + sizeof(::System::Type*)> __UnityEngine_InputSystem_Utilities_ForDeviceEventObservableSizeCheck;
  static_assert(sizeof(ForDeviceEventObservable) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ForDeviceEventObservable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ForDeviceEventObservable::Subscribe
// Il2CppName: Subscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IDisposable* (UnityEngine::InputSystem::Utilities::ForDeviceEventObservable::*)(::System::IObserver_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>*)>(&UnityEngine::InputSystem::Utilities::ForDeviceEventObservable::Subscribe)> {
  static const MethodInfo* get() {
    static auto* observer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "IObserver`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::ForDeviceEventObservable*), "Subscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{observer});
  }
};
