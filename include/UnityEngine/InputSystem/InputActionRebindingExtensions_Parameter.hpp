// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputActionRebindingExtensions
#include "UnityEngine/InputSystem/InputActionRebindingExtensions.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: FieldInfo
  class FieldInfo;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputActionRebindingExtensions::Parameter, "UnityEngine.InputSystem", "InputActionRebindingExtensions/Parameter");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputActionRebindingExtensions/Parameter
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputActionRebindingExtensions::Parameter/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Object instance
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppObject* instance;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public System.Reflection.FieldInfo field
    // Size: 0x8
    // Offset: 0x8
    ::System::Reflection::FieldInfo* field;
    // Field size check
    static_assert(sizeof(::System::Reflection::FieldInfo*) == 0x8);
    // public System.Int32 bindingIndex
    // Size: 0x4
    // Offset: 0x10
    int bindingIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Parameter
    constexpr Parameter(::Il2CppObject* instance_ = {}, ::System::Reflection::FieldInfo* field_ = {}, int bindingIndex_ = {}) noexcept : instance{instance_}, field{field_}, bindingIndex{bindingIndex_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Object instance
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_instance();
    // Get instance field reference: public System.Reflection.FieldInfo field
    [[deprecated("Use field access instead!")]] ::System::Reflection::FieldInfo*& dyn_field();
    // Get instance field reference: public System.Int32 bindingIndex
    [[deprecated("Use field access instead!")]] int& dyn_bindingIndex();
  }; // UnityEngine.InputSystem.InputActionRebindingExtensions/Parameter
  #pragma pack(pop)
  static check_size<sizeof(InputActionRebindingExtensions::Parameter), 16 + sizeof(int)> __UnityEngine_InputSystem_InputActionRebindingExtensions_ParameterSizeCheck;
  static_assert(sizeof(InputActionRebindingExtensions::Parameter) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
