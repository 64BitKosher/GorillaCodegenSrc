// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputActionState
#include "UnityEngine/InputSystem/InputActionState.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputActionPhase
  struct InputActionPhase;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputActionState::TriggerState, "UnityEngine.InputSystem", "InputActionState/TriggerState");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputActionState/TriggerState
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputActionState::TriggerState/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::InputActionState::TriggerState::Flags
    struct Flags;
    public:
    // private System.Byte m_Phase
    // Size: 0x1
    // Offset: 0x0
    uint8_t m_Phase;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_Flags
    // Size: 0x1
    // Offset: 0x1
    uint8_t m_Flags;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_MapIndex
    // Size: 0x1
    // Offset: 0x2
    uint8_t m_MapIndex;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: m_MapIndex and: m_ControlIndex
    char __padding2[0x1] = {};
    // private System.UInt16 m_ControlIndex
    // Size: 0x2
    // Offset: 0x4
    uint16_t m_ControlIndex;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: m_ControlIndex and: m_Time
    char __padding3[0x2] = {};
    // private System.Double m_Time
    // Size: 0x8
    // Offset: 0x8
    double m_Time;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_StartTime
    // Size: 0x8
    // Offset: 0x10
    double m_StartTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.UInt16 m_BindingIndex
    // Size: 0x2
    // Offset: 0x18
    uint16_t m_BindingIndex;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.UInt16 m_InteractionIndex
    // Size: 0x2
    // Offset: 0x1A
    uint16_t m_InteractionIndex;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.Single m_Magnitude
    // Size: 0x4
    // Offset: 0x1C
    float m_Magnitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.UInt32 m_LastPerformedInUpdate
    // Size: 0x4
    // Offset: 0x20
    uint m_LastPerformedInUpdate;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_LastCanceledInUpdate
    // Size: 0x4
    // Offset: 0x24
    uint m_LastCanceledInUpdate;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_PressedInUpdate
    // Size: 0x4
    // Offset: 0x28
    uint m_PressedInUpdate;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_ReleasedInUpdate
    // Size: 0x4
    // Offset: 0x2C
    uint m_ReleasedInUpdate;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: TriggerState
    constexpr TriggerState(uint8_t m_Phase_ = {}, uint8_t m_Flags_ = {}, uint8_t m_MapIndex_ = {}, uint16_t m_ControlIndex_ = {}, double m_Time_ = {}, double m_StartTime_ = {}, uint16_t m_BindingIndex_ = {}, uint16_t m_InteractionIndex_ = {}, float m_Magnitude_ = {}, uint m_LastPerformedInUpdate_ = {}, uint m_LastCanceledInUpdate_ = {}, uint m_PressedInUpdate_ = {}, uint m_ReleasedInUpdate_ = {}) noexcept : m_Phase{m_Phase_}, m_Flags{m_Flags_}, m_MapIndex{m_MapIndex_}, m_ControlIndex{m_ControlIndex_}, m_Time{m_Time_}, m_StartTime{m_StartTime_}, m_BindingIndex{m_BindingIndex_}, m_InteractionIndex{m_InteractionIndex_}, m_Magnitude{m_Magnitude_}, m_LastPerformedInUpdate{m_LastPerformedInUpdate_}, m_LastCanceledInUpdate{m_LastCanceledInUpdate_}, m_PressedInUpdate{m_PressedInUpdate_}, m_ReleasedInUpdate{m_ReleasedInUpdate_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 kMaxNumMaps
    static constexpr const int kMaxNumMaps = 255;
    // Get static field: static public System.Int32 kMaxNumMaps
    static int _get_kMaxNumMaps();
    // Set static field: static public System.Int32 kMaxNumMaps
    static void _set_kMaxNumMaps(int value);
    // static field const value: static public System.Int32 kMaxNumControls
    static constexpr const int kMaxNumControls = 65535;
    // Get static field: static public System.Int32 kMaxNumControls
    static int _get_kMaxNumControls();
    // Set static field: static public System.Int32 kMaxNumControls
    static void _set_kMaxNumControls(int value);
    // static field const value: static public System.Int32 kMaxNumBindings
    static constexpr const int kMaxNumBindings = 65535;
    // Get static field: static public System.Int32 kMaxNumBindings
    static int _get_kMaxNumBindings();
    // Set static field: static public System.Int32 kMaxNumBindings
    static void _set_kMaxNumBindings(int value);
    // Get instance field reference: private System.Byte m_Phase
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_Phase();
    // Get instance field reference: private System.Byte m_Flags
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_Flags();
    // Get instance field reference: private System.Byte m_MapIndex
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_MapIndex();
    // Get instance field reference: private System.UInt16 m_ControlIndex
    [[deprecated("Use field access instead!")]] uint16_t& dyn_m_ControlIndex();
    // Get instance field reference: private System.Double m_Time
    [[deprecated("Use field access instead!")]] double& dyn_m_Time();
    // Get instance field reference: private System.Double m_StartTime
    [[deprecated("Use field access instead!")]] double& dyn_m_StartTime();
    // Get instance field reference: private System.UInt16 m_BindingIndex
    [[deprecated("Use field access instead!")]] uint16_t& dyn_m_BindingIndex();
    // Get instance field reference: private System.UInt16 m_InteractionIndex
    [[deprecated("Use field access instead!")]] uint16_t& dyn_m_InteractionIndex();
    // Get instance field reference: private System.Single m_Magnitude
    [[deprecated("Use field access instead!")]] float& dyn_m_Magnitude();
    // Get instance field reference: private System.UInt32 m_LastPerformedInUpdate
    [[deprecated("Use field access instead!")]] uint& dyn_m_LastPerformedInUpdate();
    // Get instance field reference: private System.UInt32 m_LastCanceledInUpdate
    [[deprecated("Use field access instead!")]] uint& dyn_m_LastCanceledInUpdate();
    // Get instance field reference: private System.UInt32 m_PressedInUpdate
    [[deprecated("Use field access instead!")]] uint& dyn_m_PressedInUpdate();
    // Get instance field reference: private System.UInt32 m_ReleasedInUpdate
    [[deprecated("Use field access instead!")]] uint& dyn_m_ReleasedInUpdate();
    // public UnityEngine.InputSystem.InputActionPhase get_phase()
    // Offset: 0x50ACE3C
    ::UnityEngine::InputSystem::InputActionPhase get_phase();
    // public System.Void set_phase(UnityEngine.InputSystem.InputActionPhase value)
    // Offset: 0x50A77F8
    void set_phase(::UnityEngine::InputSystem::InputActionPhase value);
    // public System.Boolean get_isDisabled()
    // Offset: 0x50A7814
    bool get_isDisabled();
    // public System.Boolean get_isWaiting()
    // Offset: 0x50ACE44
    bool get_isWaiting();
    // public System.Boolean get_isStarted()
    // Offset: 0x50ACE54
    bool get_isStarted();
    // public System.Boolean get_isPerformed()
    // Offset: 0x50ACE64
    bool get_isPerformed();
    // public System.Boolean get_isCanceled()
    // Offset: 0x50ACE74
    bool get_isCanceled();
    // public System.Double get_time()
    // Offset: 0x50ACE84
    double get_time();
    // public System.Void set_time(System.Double value)
    // Offset: 0x50ACE8C
    void set_time(double value);
    // public System.Double get_startTime()
    // Offset: 0x50ACE94
    double get_startTime();
    // public System.Void set_startTime(System.Double value)
    // Offset: 0x50ACE9C
    void set_startTime(double value);
    // public System.Single get_magnitude()
    // Offset: 0x50ACEA4
    float get_magnitude();
    // public System.Void set_magnitude(System.Single value)
    // Offset: 0x50A7AA8
    void set_magnitude(float value);
    // public System.Boolean get_haveMagnitude()
    // Offset: 0x50ACEAC
    bool get_haveMagnitude();
    // public System.Int32 get_mapIndex()
    // Offset: 0x50ACEB8
    int get_mapIndex();
    // public System.Void set_mapIndex(System.Int32 value)
    // Offset: 0x50A7BC4
    void set_mapIndex(int value);
    // public System.Int32 get_controlIndex()
    // Offset: 0x50A6D00
    int get_controlIndex();
    // public System.Void set_controlIndex(System.Int32 value)
    // Offset: 0x50A7A38
    void set_controlIndex(int value);
    // public System.Int32 get_bindingIndex()
    // Offset: 0x50ACEC0
    int get_bindingIndex();
    // public System.Void set_bindingIndex(System.Int32 value)
    // Offset: 0x50A7C24
    void set_bindingIndex(int value);
    // public System.Int32 get_interactionIndex()
    // Offset: 0x50A7ABC
    int get_interactionIndex();
    // public System.Void set_interactionIndex(System.Int32 value)
    // Offset: 0x50A7AD0
    void set_interactionIndex(int value);
    // public System.UInt32 get_lastPerformedInUpdate()
    // Offset: 0x50ACEC8
    uint get_lastPerformedInUpdate();
    // public System.Void set_lastPerformedInUpdate(System.UInt32 value)
    // Offset: 0x50ACED0
    void set_lastPerformedInUpdate(uint value);
    // public System.UInt32 get_lastCanceledInUpdate()
    // Offset: 0x50ACED8
    uint get_lastCanceledInUpdate();
    // public System.Void set_lastCanceledInUpdate(System.UInt32 value)
    // Offset: 0x50ACEE0
    void set_lastCanceledInUpdate(uint value);
    // public System.UInt32 get_pressedInUpdate()
    // Offset: 0x50ACEE8
    uint get_pressedInUpdate();
    // public System.Void set_pressedInUpdate(System.UInt32 value)
    // Offset: 0x50ACEF0
    void set_pressedInUpdate(uint value);
    // public System.UInt32 get_releasedInUpdate()
    // Offset: 0x50ACEF8
    uint get_releasedInUpdate();
    // public System.Void set_releasedInUpdate(System.UInt32 value)
    // Offset: 0x50ACF00
    void set_releasedInUpdate(uint value);
    // public System.Boolean get_isPassThrough()
    // Offset: 0x50A82A4
    bool get_isPassThrough();
    // public System.Void set_isPassThrough(System.Boolean value)
    // Offset: 0x50A95B8
    void set_isPassThrough(bool value);
    // public System.Boolean get_isButton()
    // Offset: 0x50A95D8
    bool get_isButton();
    // public System.Void set_isButton(System.Boolean value)
    // Offset: 0x50A95E4
    void set_isButton(bool value);
    // public System.Boolean get_isPressed()
    // Offset: 0x50AA170
    bool get_isPressed();
    // public System.Void set_isPressed(System.Boolean value)
    // Offset: 0x50A865C
    void set_isPressed(bool value);
    // public System.Boolean get_mayNeedConflictResolution()
    // Offset: 0x50AA17C
    bool get_mayNeedConflictResolution();
    // public System.Void set_mayNeedConflictResolution(System.Boolean value)
    // Offset: 0x50ACF08
    void set_mayNeedConflictResolution(bool value);
    // public System.Boolean get_hasMultipleConcurrentActuations()
    // Offset: 0x50AA188
    bool get_hasMultipleConcurrentActuations();
    // public System.Void set_hasMultipleConcurrentActuations(System.Boolean value)
    // Offset: 0x50A861C
    void set_hasMultipleConcurrentActuations(bool value);
    // public System.Boolean get_inProcessing()
    // Offset: 0x50AA9BC
    bool get_inProcessing();
    // public System.Void set_inProcessing(System.Boolean value)
    // Offset: 0x50A863C
    void set_inProcessing(bool value);
    // public UnityEngine.InputSystem.InputActionState/TriggerState/Flags get_flags()
    // Offset: 0x50ACF28
    ::UnityEngine::InputSystem::InputActionState::TriggerState::Flags get_flags();
    // public System.Void set_flags(UnityEngine.InputSystem.InputActionState/TriggerState/Flags value)
    // Offset: 0x50AA9C8
    void set_flags(::UnityEngine::InputSystem::InputActionState::TriggerState::Flags value);
  }; // UnityEngine.InputSystem.InputActionState/TriggerState
  #pragma pack(pop)
  static check_size<sizeof(InputActionState::TriggerState), 44 + sizeof(uint)> __UnityEngine_InputSystem_InputActionState_TriggerStateSizeCheck;
  static_assert(sizeof(InputActionState::TriggerState) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_phase
// Il2CppName: get_phase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionPhase (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_phase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_phase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_phase
// Il2CppName: set_phase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(::UnityEngine::InputSystem::InputActionPhase)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_phase)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionPhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_phase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_isDisabled
// Il2CppName: get_isDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_isDisabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_isDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_isWaiting
// Il2CppName: get_isWaiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_isWaiting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_isWaiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_isStarted
// Il2CppName: get_isStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_isStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_isStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_isPerformed
// Il2CppName: get_isPerformed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_isPerformed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_isPerformed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_isCanceled
// Il2CppName: get_isCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_isCanceled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_isCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_time)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(double)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_time)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_startTime
// Il2CppName: get_startTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_startTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_startTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_startTime
// Il2CppName: set_startTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(double)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_startTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_startTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_magnitude
// Il2CppName: get_magnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_magnitude)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_magnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_magnitude
// Il2CppName: set_magnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(float)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_magnitude)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_magnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_haveMagnitude
// Il2CppName: get_haveMagnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_haveMagnitude)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_haveMagnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_mapIndex
// Il2CppName: get_mapIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_mapIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_mapIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_mapIndex
// Il2CppName: set_mapIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(int)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_mapIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_mapIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_controlIndex
// Il2CppName: get_controlIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_controlIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_controlIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_controlIndex
// Il2CppName: set_controlIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(int)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_controlIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_controlIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_bindingIndex
// Il2CppName: get_bindingIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_bindingIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_bindingIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_bindingIndex
// Il2CppName: set_bindingIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(int)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_bindingIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_bindingIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_interactionIndex
// Il2CppName: get_interactionIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_interactionIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_interactionIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_interactionIndex
// Il2CppName: set_interactionIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(int)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_interactionIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_interactionIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_lastPerformedInUpdate
// Il2CppName: get_lastPerformedInUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_lastPerformedInUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_lastPerformedInUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_lastPerformedInUpdate
// Il2CppName: set_lastPerformedInUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(uint)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_lastPerformedInUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_lastPerformedInUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_lastCanceledInUpdate
// Il2CppName: get_lastCanceledInUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_lastCanceledInUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_lastCanceledInUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_lastCanceledInUpdate
// Il2CppName: set_lastCanceledInUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(uint)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_lastCanceledInUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_lastCanceledInUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_pressedInUpdate
// Il2CppName: get_pressedInUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_pressedInUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_pressedInUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_pressedInUpdate
// Il2CppName: set_pressedInUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(uint)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_pressedInUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_pressedInUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_releasedInUpdate
// Il2CppName: get_releasedInUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_releasedInUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_releasedInUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_releasedInUpdate
// Il2CppName: set_releasedInUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(uint)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_releasedInUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_releasedInUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_isPassThrough
// Il2CppName: get_isPassThrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_isPassThrough)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_isPassThrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_isPassThrough
// Il2CppName: set_isPassThrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(bool)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_isPassThrough)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_isPassThrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_isButton
// Il2CppName: get_isButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_isButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_isButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_isButton
// Il2CppName: set_isButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(bool)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_isButton)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_isButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_isPressed
// Il2CppName: get_isPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_isPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_isPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_isPressed
// Il2CppName: set_isPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(bool)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_isPressed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_isPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_mayNeedConflictResolution
// Il2CppName: get_mayNeedConflictResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_mayNeedConflictResolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_mayNeedConflictResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_mayNeedConflictResolution
// Il2CppName: set_mayNeedConflictResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(bool)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_mayNeedConflictResolution)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_mayNeedConflictResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_hasMultipleConcurrentActuations
// Il2CppName: get_hasMultipleConcurrentActuations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_hasMultipleConcurrentActuations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_hasMultipleConcurrentActuations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_hasMultipleConcurrentActuations
// Il2CppName: set_hasMultipleConcurrentActuations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(bool)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_hasMultipleConcurrentActuations)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_hasMultipleConcurrentActuations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_inProcessing
// Il2CppName: get_inProcessing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_inProcessing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_inProcessing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_inProcessing
// Il2CppName: set_inProcessing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(bool)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_inProcessing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_inProcessing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::get_flags
// Il2CppName: get_flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionState::TriggerState::Flags (UnityEngine::InputSystem::InputActionState::TriggerState::*)()>(&UnityEngine::InputSystem::InputActionState::TriggerState::get_flags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "get_flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::TriggerState::set_flags
// Il2CppName: set_flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::TriggerState::*)(::UnityEngine::InputSystem::InputActionState::TriggerState::Flags)>(&UnityEngine::InputSystem::InputActionState::TriggerState::set_flags)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState/Flags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::TriggerState), "set_flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
