// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Skipping declaration: UpdateMode because it is already included!
  // Skipping declaration: BackgroundBehavior because it is already included!
  // Skipping declaration: EditorInputBehaviorInPlayMode because it is already included!
}
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: ReadOnlyArray`1<TValue>
  template<typename TValue>
  struct ReadOnlyArray_1;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputSettings
  class InputSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::InputSettings);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputSettings*, "UnityEngine.InputSystem", "InputSettings");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.InputSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class InputSettings : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::UnityEngine::InputSystem::InputSettings::UpdateMode
    struct UpdateMode;
    // Nested type: ::UnityEngine::InputSystem::InputSettings::BackgroundBehavior
    struct BackgroundBehavior;
    // Nested type: ::UnityEngine::InputSystem::InputSettings::EditorInputBehaviorInPlayMode
    struct EditorInputBehaviorInPlayMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.InputSettings/UpdateMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct UpdateMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UpdateMode
      constexpr UpdateMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.InputSettings/UpdateMode ProcessEventsInDynamicUpdate
      static constexpr const int ProcessEventsInDynamicUpdate = 1;
      // Get static field: static public UnityEngine.InputSystem.InputSettings/UpdateMode ProcessEventsInDynamicUpdate
      static ::UnityEngine::InputSystem::InputSettings::UpdateMode _get_ProcessEventsInDynamicUpdate();
      // Set static field: static public UnityEngine.InputSystem.InputSettings/UpdateMode ProcessEventsInDynamicUpdate
      static void _set_ProcessEventsInDynamicUpdate(::UnityEngine::InputSystem::InputSettings::UpdateMode value);
      // static field const value: static public UnityEngine.InputSystem.InputSettings/UpdateMode ProcessEventsInFixedUpdate
      static constexpr const int ProcessEventsInFixedUpdate = 2;
      // Get static field: static public UnityEngine.InputSystem.InputSettings/UpdateMode ProcessEventsInFixedUpdate
      static ::UnityEngine::InputSystem::InputSettings::UpdateMode _get_ProcessEventsInFixedUpdate();
      // Set static field: static public UnityEngine.InputSystem.InputSettings/UpdateMode ProcessEventsInFixedUpdate
      static void _set_ProcessEventsInFixedUpdate(::UnityEngine::InputSystem::InputSettings::UpdateMode value);
      // static field const value: static public UnityEngine.InputSystem.InputSettings/UpdateMode ProcessEventsManually
      static constexpr const int ProcessEventsManually = 3;
      // Get static field: static public UnityEngine.InputSystem.InputSettings/UpdateMode ProcessEventsManually
      static ::UnityEngine::InputSystem::InputSettings::UpdateMode _get_ProcessEventsManually();
      // Set static field: static public UnityEngine.InputSystem.InputSettings/UpdateMode ProcessEventsManually
      static void _set_ProcessEventsManually(::UnityEngine::InputSystem::InputSettings::UpdateMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.InputSettings/UpdateMode
    #pragma pack(pop)
    static check_size<sizeof(InputSettings::UpdateMode), 0 + sizeof(int)> __UnityEngine_InputSystem_InputSettings_UpdateModeSizeCheck;
    static_assert(sizeof(InputSettings::UpdateMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.InputSettings/BackgroundBehavior
    // [TokenAttribute] Offset: FFFFFFFF
    struct BackgroundBehavior/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BackgroundBehavior
      constexpr BackgroundBehavior(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.InputSettings/BackgroundBehavior ResetAndDisableNonBackgroundDevices
      static constexpr const int ResetAndDisableNonBackgroundDevices = 0;
      // Get static field: static public UnityEngine.InputSystem.InputSettings/BackgroundBehavior ResetAndDisableNonBackgroundDevices
      static ::UnityEngine::InputSystem::InputSettings::BackgroundBehavior _get_ResetAndDisableNonBackgroundDevices();
      // Set static field: static public UnityEngine.InputSystem.InputSettings/BackgroundBehavior ResetAndDisableNonBackgroundDevices
      static void _set_ResetAndDisableNonBackgroundDevices(::UnityEngine::InputSystem::InputSettings::BackgroundBehavior value);
      // static field const value: static public UnityEngine.InputSystem.InputSettings/BackgroundBehavior ResetAndDisableAllDevices
      static constexpr const int ResetAndDisableAllDevices = 1;
      // Get static field: static public UnityEngine.InputSystem.InputSettings/BackgroundBehavior ResetAndDisableAllDevices
      static ::UnityEngine::InputSystem::InputSettings::BackgroundBehavior _get_ResetAndDisableAllDevices();
      // Set static field: static public UnityEngine.InputSystem.InputSettings/BackgroundBehavior ResetAndDisableAllDevices
      static void _set_ResetAndDisableAllDevices(::UnityEngine::InputSystem::InputSettings::BackgroundBehavior value);
      // static field const value: static public UnityEngine.InputSystem.InputSettings/BackgroundBehavior IgnoreFocus
      static constexpr const int IgnoreFocus = 2;
      // Get static field: static public UnityEngine.InputSystem.InputSettings/BackgroundBehavior IgnoreFocus
      static ::UnityEngine::InputSystem::InputSettings::BackgroundBehavior _get_IgnoreFocus();
      // Set static field: static public UnityEngine.InputSystem.InputSettings/BackgroundBehavior IgnoreFocus
      static void _set_IgnoreFocus(::UnityEngine::InputSystem::InputSettings::BackgroundBehavior value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.InputSettings/BackgroundBehavior
    #pragma pack(pop)
    static check_size<sizeof(InputSettings::BackgroundBehavior), 0 + sizeof(int)> __UnityEngine_InputSystem_InputSettings_BackgroundBehaviorSizeCheck;
    static_assert(sizeof(InputSettings::BackgroundBehavior) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct EditorInputBehaviorInPlayMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: EditorInputBehaviorInPlayMode
      constexpr EditorInputBehaviorInPlayMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode PointersAndKeyboardsRespectGameViewFocus
      static constexpr const int PointersAndKeyboardsRespectGameViewFocus = 0;
      // Get static field: static public UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode PointersAndKeyboardsRespectGameViewFocus
      static ::UnityEngine::InputSystem::InputSettings::EditorInputBehaviorInPlayMode _get_PointersAndKeyboardsRespectGameViewFocus();
      // Set static field: static public UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode PointersAndKeyboardsRespectGameViewFocus
      static void _set_PointersAndKeyboardsRespectGameViewFocus(::UnityEngine::InputSystem::InputSettings::EditorInputBehaviorInPlayMode value);
      // static field const value: static public UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode AllDevicesRespectGameViewFocus
      static constexpr const int AllDevicesRespectGameViewFocus = 1;
      // Get static field: static public UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode AllDevicesRespectGameViewFocus
      static ::UnityEngine::InputSystem::InputSettings::EditorInputBehaviorInPlayMode _get_AllDevicesRespectGameViewFocus();
      // Set static field: static public UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode AllDevicesRespectGameViewFocus
      static void _set_AllDevicesRespectGameViewFocus(::UnityEngine::InputSystem::InputSettings::EditorInputBehaviorInPlayMode value);
      // static field const value: static public UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode AllDeviceInputAlwaysGoesToGameView
      static constexpr const int AllDeviceInputAlwaysGoesToGameView = 2;
      // Get static field: static public UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode AllDeviceInputAlwaysGoesToGameView
      static ::UnityEngine::InputSystem::InputSettings::EditorInputBehaviorInPlayMode _get_AllDeviceInputAlwaysGoesToGameView();
      // Set static field: static public UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode AllDeviceInputAlwaysGoesToGameView
      static void _set_AllDeviceInputAlwaysGoesToGameView(::UnityEngine::InputSystem::InputSettings::EditorInputBehaviorInPlayMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode
    #pragma pack(pop)
    static check_size<sizeof(InputSettings::EditorInputBehaviorInPlayMode), 0 + sizeof(int)> __UnityEngine_InputSystem_InputSettings_EditorInputBehaviorInPlayModeSizeCheck;
    static_assert(sizeof(InputSettings::EditorInputBehaviorInPlayMode) == 0x4);
    public:
    // private System.String[] m_SupportedDevices
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::StringW> m_SupportedDevices;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private UnityEngine.InputSystem.InputSettings/UpdateMode m_UpdateMode
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::InputSystem::InputSettings::UpdateMode m_UpdateMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputSettings::UpdateMode) == 0x4);
    // private System.Int32 m_MaxEventBytesPerUpdate
    // Size: 0x4
    // Offset: 0x24
    int m_MaxEventBytesPerUpdate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_MaxQueuedEventsPerUpdate
    // Size: 0x4
    // Offset: 0x28
    int m_MaxQueuedEventsPerUpdate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_CompensateForScreenOrientation
    // Size: 0x1
    // Offset: 0x2C
    bool m_CompensateForScreenOrientation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_CompensateForScreenOrientation and: m_BackgroundBehavior
    char __padding4[0x3] = {};
    // private UnityEngine.InputSystem.InputSettings/BackgroundBehavior m_BackgroundBehavior
    // Size: 0x4
    // Offset: 0x30
    ::UnityEngine::InputSystem::InputSettings::BackgroundBehavior m_BackgroundBehavior;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputSettings::BackgroundBehavior) == 0x4);
    // private UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode m_EditorInputBehaviorInPlayMode
    // Size: 0x4
    // Offset: 0x34
    ::UnityEngine::InputSystem::InputSettings::EditorInputBehaviorInPlayMode m_EditorInputBehaviorInPlayMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputSettings::EditorInputBehaviorInPlayMode) == 0x4);
    // private System.Single m_DefaultDeadzoneMin
    // Size: 0x4
    // Offset: 0x38
    float m_DefaultDeadzoneMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_DefaultDeadzoneMax
    // Size: 0x4
    // Offset: 0x3C
    float m_DefaultDeadzoneMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_DefaultButtonPressPoint
    // Size: 0x4
    // Offset: 0x40
    float m_DefaultButtonPressPoint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ButtonReleaseThreshold
    // Size: 0x4
    // Offset: 0x44
    float m_ButtonReleaseThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_DefaultTapTime
    // Size: 0x4
    // Offset: 0x48
    float m_DefaultTapTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_DefaultSlowTapTime
    // Size: 0x4
    // Offset: 0x4C
    float m_DefaultSlowTapTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_DefaultHoldTime
    // Size: 0x4
    // Offset: 0x50
    float m_DefaultHoldTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_TapRadius
    // Size: 0x4
    // Offset: 0x54
    float m_TapRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MultiTapDelayTime
    // Size: 0x4
    // Offset: 0x58
    float m_MultiTapDelayTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_DisableRedundantEventsMerging
    // Size: 0x1
    // Offset: 0x5C
    bool m_DisableRedundantEventsMerging;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ShortcutKeysConsumeInputs
    // Size: 0x1
    // Offset: 0x5D
    bool m_ShortcutKeysConsumeInputs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ShortcutKeysConsumeInputs and: m_FeatureFlags
    char __padding17[0x2] = {};
    // System.Collections.Generic.HashSet`1<System.String> m_FeatureFlags
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::HashSet_1<::StringW>* m_FeatureFlags;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static System.Boolean optimizedControlsFeatureEnabled
    static bool _get_optimizedControlsFeatureEnabled();
    // Set static field: static System.Boolean optimizedControlsFeatureEnabled
    static void _set_optimizedControlsFeatureEnabled(bool value);
    // Get static field: static System.Boolean readValueCachingFeatureEnabled
    static bool _get_readValueCachingFeatureEnabled();
    // Set static field: static System.Boolean readValueCachingFeatureEnabled
    static void _set_readValueCachingFeatureEnabled(bool value);
    // Get static field: static System.Boolean paranoidReadValueCachingChecksEnabled
    static bool _get_paranoidReadValueCachingChecksEnabled();
    // Set static field: static System.Boolean paranoidReadValueCachingChecksEnabled
    static void _set_paranoidReadValueCachingChecksEnabled(bool value);
    // static field const value: static System.Int32 s_OldUnsupportedFixedAndDynamicUpdateSetting
    static constexpr const int s_OldUnsupportedFixedAndDynamicUpdateSetting = 0;
    // Get static field: static System.Int32 s_OldUnsupportedFixedAndDynamicUpdateSetting
    static int _get_s_OldUnsupportedFixedAndDynamicUpdateSetting();
    // Set static field: static System.Int32 s_OldUnsupportedFixedAndDynamicUpdateSetting
    static void _set_s_OldUnsupportedFixedAndDynamicUpdateSetting(int value);
    // Get instance field reference: private System.String[] m_SupportedDevices
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_m_SupportedDevices();
    // Get instance field reference: private UnityEngine.InputSystem.InputSettings/UpdateMode m_UpdateMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputSettings::UpdateMode& dyn_m_UpdateMode();
    // Get instance field reference: private System.Int32 m_MaxEventBytesPerUpdate
    [[deprecated("Use field access instead!")]] int& dyn_m_MaxEventBytesPerUpdate();
    // Get instance field reference: private System.Int32 m_MaxQueuedEventsPerUpdate
    [[deprecated("Use field access instead!")]] int& dyn_m_MaxQueuedEventsPerUpdate();
    // Get instance field reference: private System.Boolean m_CompensateForScreenOrientation
    [[deprecated("Use field access instead!")]] bool& dyn_m_CompensateForScreenOrientation();
    // Get instance field reference: private UnityEngine.InputSystem.InputSettings/BackgroundBehavior m_BackgroundBehavior
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputSettings::BackgroundBehavior& dyn_m_BackgroundBehavior();
    // Get instance field reference: private UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode m_EditorInputBehaviorInPlayMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputSettings::EditorInputBehaviorInPlayMode& dyn_m_EditorInputBehaviorInPlayMode();
    // Get instance field reference: private System.Single m_DefaultDeadzoneMin
    [[deprecated("Use field access instead!")]] float& dyn_m_DefaultDeadzoneMin();
    // Get instance field reference: private System.Single m_DefaultDeadzoneMax
    [[deprecated("Use field access instead!")]] float& dyn_m_DefaultDeadzoneMax();
    // Get instance field reference: private System.Single m_DefaultButtonPressPoint
    [[deprecated("Use field access instead!")]] float& dyn_m_DefaultButtonPressPoint();
    // Get instance field reference: private System.Single m_ButtonReleaseThreshold
    [[deprecated("Use field access instead!")]] float& dyn_m_ButtonReleaseThreshold();
    // Get instance field reference: private System.Single m_DefaultTapTime
    [[deprecated("Use field access instead!")]] float& dyn_m_DefaultTapTime();
    // Get instance field reference: private System.Single m_DefaultSlowTapTime
    [[deprecated("Use field access instead!")]] float& dyn_m_DefaultSlowTapTime();
    // Get instance field reference: private System.Single m_DefaultHoldTime
    [[deprecated("Use field access instead!")]] float& dyn_m_DefaultHoldTime();
    // Get instance field reference: private System.Single m_TapRadius
    [[deprecated("Use field access instead!")]] float& dyn_m_TapRadius();
    // Get instance field reference: private System.Single m_MultiTapDelayTime
    [[deprecated("Use field access instead!")]] float& dyn_m_MultiTapDelayTime();
    // Get instance field reference: private System.Boolean m_DisableRedundantEventsMerging
    [[deprecated("Use field access instead!")]] bool& dyn_m_DisableRedundantEventsMerging();
    // Get instance field reference: private System.Boolean m_ShortcutKeysConsumeInputs
    [[deprecated("Use field access instead!")]] bool& dyn_m_ShortcutKeysConsumeInputs();
    // Get instance field reference: System.Collections.Generic.HashSet`1<System.String> m_FeatureFlags
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn_m_FeatureFlags();
    // public UnityEngine.InputSystem.InputSettings/UpdateMode get_updateMode()
    // Offset: 0x51189D4
    ::UnityEngine::InputSystem::InputSettings::UpdateMode get_updateMode();
    // public System.Void set_updateMode(UnityEngine.InputSystem.InputSettings/UpdateMode value)
    // Offset: 0x51189DC
    void set_updateMode(::UnityEngine::InputSystem::InputSettings::UpdateMode value);
    // public System.Boolean get_compensateForScreenOrientation()
    // Offset: 0x5118AC0
    bool get_compensateForScreenOrientation();
    // public System.Void set_compensateForScreenOrientation(System.Boolean value)
    // Offset: 0x5118AC8
    void set_compensateForScreenOrientation(bool value);
    // public System.Boolean get_filterNoiseOnCurrent()
    // Offset: 0x5118AE4
    bool get_filterNoiseOnCurrent();
    // public System.Void set_filterNoiseOnCurrent(System.Boolean value)
    // Offset: 0x5118AEC
    void set_filterNoiseOnCurrent(bool value);
    // public System.Single get_defaultDeadzoneMin()
    // Offset: 0x5118AF0
    float get_defaultDeadzoneMin();
    // public System.Void set_defaultDeadzoneMin(System.Single value)
    // Offset: 0x5118AF8
    void set_defaultDeadzoneMin(float value);
    // public System.Single get_defaultDeadzoneMax()
    // Offset: 0x5118B10
    float get_defaultDeadzoneMax();
    // public System.Void set_defaultDeadzoneMax(System.Single value)
    // Offset: 0x5118B18
    void set_defaultDeadzoneMax(float value);
    // public System.Single get_defaultButtonPressPoint()
    // Offset: 0x5118B30
    float get_defaultButtonPressPoint();
    // public System.Void set_defaultButtonPressPoint(System.Single value)
    // Offset: 0x5118B38
    void set_defaultButtonPressPoint(float value);
    // public System.Single get_buttonReleaseThreshold()
    // Offset: 0x5118B6C
    float get_buttonReleaseThreshold();
    // public System.Void set_buttonReleaseThreshold(System.Single value)
    // Offset: 0x5118B74
    void set_buttonReleaseThreshold(float value);
    // public System.Single get_defaultTapTime()
    // Offset: 0x5118B8C
    float get_defaultTapTime();
    // public System.Void set_defaultTapTime(System.Single value)
    // Offset: 0x5118B94
    void set_defaultTapTime(float value);
    // public System.Single get_defaultSlowTapTime()
    // Offset: 0x5118BAC
    float get_defaultSlowTapTime();
    // public System.Void set_defaultSlowTapTime(System.Single value)
    // Offset: 0x5118BB4
    void set_defaultSlowTapTime(float value);
    // public System.Single get_defaultHoldTime()
    // Offset: 0x5118BCC
    float get_defaultHoldTime();
    // public System.Void set_defaultHoldTime(System.Single value)
    // Offset: 0x5118BD4
    void set_defaultHoldTime(float value);
    // public System.Single get_tapRadius()
    // Offset: 0x5118BEC
    float get_tapRadius();
    // public System.Void set_tapRadius(System.Single value)
    // Offset: 0x5118BF4
    void set_tapRadius(float value);
    // public System.Single get_multiTapDelayTime()
    // Offset: 0x5118C0C
    float get_multiTapDelayTime();
    // public System.Void set_multiTapDelayTime(System.Single value)
    // Offset: 0x5118C14
    void set_multiTapDelayTime(float value);
    // public UnityEngine.InputSystem.InputSettings/BackgroundBehavior get_backgroundBehavior()
    // Offset: 0x5118C2C
    ::UnityEngine::InputSystem::InputSettings::BackgroundBehavior get_backgroundBehavior();
    // public System.Void set_backgroundBehavior(UnityEngine.InputSystem.InputSettings/BackgroundBehavior value)
    // Offset: 0x5118C34
    void set_backgroundBehavior(::UnityEngine::InputSystem::InputSettings::BackgroundBehavior value);
    // public UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode get_editorInputBehaviorInPlayMode()
    // Offset: 0x5118C4C
    ::UnityEngine::InputSystem::InputSettings::EditorInputBehaviorInPlayMode get_editorInputBehaviorInPlayMode();
    // public System.Void set_editorInputBehaviorInPlayMode(UnityEngine.InputSystem.InputSettings/EditorInputBehaviorInPlayMode value)
    // Offset: 0x5118C54
    void set_editorInputBehaviorInPlayMode(::UnityEngine::InputSystem::InputSettings::EditorInputBehaviorInPlayMode value);
    // public System.Int32 get_maxEventBytesPerUpdate()
    // Offset: 0x5118C6C
    int get_maxEventBytesPerUpdate();
    // public System.Void set_maxEventBytesPerUpdate(System.Int32 value)
    // Offset: 0x5118C74
    void set_maxEventBytesPerUpdate(int value);
    // public System.Int32 get_maxQueuedEventsPerUpdate()
    // Offset: 0x5118C8C
    int get_maxQueuedEventsPerUpdate();
    // public System.Void set_maxQueuedEventsPerUpdate(System.Int32 value)
    // Offset: 0x5118C94
    void set_maxQueuedEventsPerUpdate(int value);
    // public UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<System.String> get_supportedDevices()
    // Offset: 0x5118CAC
    ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::StringW> get_supportedDevices();
    // public System.Void set_supportedDevices(UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<System.String> value)
    // Offset: 0x5118D0C
    void set_supportedDevices(::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::StringW> value);
    // public System.Boolean get_disableRedundantEventsMerging()
    // Offset: 0x5118E3C
    bool get_disableRedundantEventsMerging();
    // public System.Void set_disableRedundantEventsMerging(System.Boolean value)
    // Offset: 0x5118E44
    void set_disableRedundantEventsMerging(bool value);
    // public System.Boolean get_shortcutKeysConsumeInput()
    // Offset: 0x5118E60
    bool get_shortcutKeysConsumeInput();
    // public System.Void set_shortcutKeysConsumeInput(System.Boolean value)
    // Offset: 0x5118E68
    void set_shortcutKeysConsumeInput(bool value);
    // public System.Void SetInternalFeatureFlag(System.String featureName, System.Boolean enabled)
    // Offset: 0x5118E84
    void SetInternalFeatureFlag(::StringW featureName, bool enabled);
    // System.Boolean IsFeatureEnabled(System.String featureName)
    // Offset: 0x51190AC
    bool IsFeatureEnabled(::StringW featureName);
    // System.Void OnChange()
    // Offset: 0x51189F4
    void OnChange();
    // public System.Void .ctor()
    // Offset: 0x5119128
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputSettings*, creationType>()));
    }
  }; // UnityEngine.InputSystem.InputSettings
  #pragma pack(pop)
  static check_size<sizeof(InputSettings), 96 + sizeof(::System::Collections::Generic::HashSet_1<::StringW>*)> __UnityEngine_InputSystem_InputSettingsSizeCheck;
  static_assert(sizeof(InputSettings) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputSettings::EditorInputBehaviorInPlayMode, "UnityEngine.InputSystem", "InputSettings/EditorInputBehaviorInPlayMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputSettings::BackgroundBehavior, "UnityEngine.InputSystem", "InputSettings/BackgroundBehavior");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputSettings::UpdateMode, "UnityEngine.InputSystem", "InputSettings/UpdateMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_updateMode
// Il2CppName: get_updateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputSettings::UpdateMode (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_updateMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_updateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_updateMode
// Il2CppName: set_updateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(::UnityEngine::InputSystem::InputSettings::UpdateMode)>(&UnityEngine::InputSystem::InputSettings::set_updateMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputSettings/UpdateMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_updateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_compensateForScreenOrientation
// Il2CppName: get_compensateForScreenOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_compensateForScreenOrientation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_compensateForScreenOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_compensateForScreenOrientation
// Il2CppName: set_compensateForScreenOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(bool)>(&UnityEngine::InputSystem::InputSettings::set_compensateForScreenOrientation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_compensateForScreenOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_filterNoiseOnCurrent
// Il2CppName: get_filterNoiseOnCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_filterNoiseOnCurrent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_filterNoiseOnCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_filterNoiseOnCurrent
// Il2CppName: set_filterNoiseOnCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(bool)>(&UnityEngine::InputSystem::InputSettings::set_filterNoiseOnCurrent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_filterNoiseOnCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_defaultDeadzoneMin
// Il2CppName: get_defaultDeadzoneMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_defaultDeadzoneMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_defaultDeadzoneMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_defaultDeadzoneMin
// Il2CppName: set_defaultDeadzoneMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(float)>(&UnityEngine::InputSystem::InputSettings::set_defaultDeadzoneMin)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_defaultDeadzoneMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_defaultDeadzoneMax
// Il2CppName: get_defaultDeadzoneMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_defaultDeadzoneMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_defaultDeadzoneMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_defaultDeadzoneMax
// Il2CppName: set_defaultDeadzoneMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(float)>(&UnityEngine::InputSystem::InputSettings::set_defaultDeadzoneMax)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_defaultDeadzoneMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_defaultButtonPressPoint
// Il2CppName: get_defaultButtonPressPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_defaultButtonPressPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_defaultButtonPressPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_defaultButtonPressPoint
// Il2CppName: set_defaultButtonPressPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(float)>(&UnityEngine::InputSystem::InputSettings::set_defaultButtonPressPoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_defaultButtonPressPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_buttonReleaseThreshold
// Il2CppName: get_buttonReleaseThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_buttonReleaseThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_buttonReleaseThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_buttonReleaseThreshold
// Il2CppName: set_buttonReleaseThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(float)>(&UnityEngine::InputSystem::InputSettings::set_buttonReleaseThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_buttonReleaseThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_defaultTapTime
// Il2CppName: get_defaultTapTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_defaultTapTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_defaultTapTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_defaultTapTime
// Il2CppName: set_defaultTapTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(float)>(&UnityEngine::InputSystem::InputSettings::set_defaultTapTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_defaultTapTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_defaultSlowTapTime
// Il2CppName: get_defaultSlowTapTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_defaultSlowTapTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_defaultSlowTapTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_defaultSlowTapTime
// Il2CppName: set_defaultSlowTapTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(float)>(&UnityEngine::InputSystem::InputSettings::set_defaultSlowTapTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_defaultSlowTapTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_defaultHoldTime
// Il2CppName: get_defaultHoldTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_defaultHoldTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_defaultHoldTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_defaultHoldTime
// Il2CppName: set_defaultHoldTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(float)>(&UnityEngine::InputSystem::InputSettings::set_defaultHoldTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_defaultHoldTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_tapRadius
// Il2CppName: get_tapRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_tapRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_tapRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_tapRadius
// Il2CppName: set_tapRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(float)>(&UnityEngine::InputSystem::InputSettings::set_tapRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_tapRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_multiTapDelayTime
// Il2CppName: get_multiTapDelayTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_multiTapDelayTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_multiTapDelayTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_multiTapDelayTime
// Il2CppName: set_multiTapDelayTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(float)>(&UnityEngine::InputSystem::InputSettings::set_multiTapDelayTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_multiTapDelayTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_backgroundBehavior
// Il2CppName: get_backgroundBehavior
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputSettings::BackgroundBehavior (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_backgroundBehavior)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_backgroundBehavior", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_backgroundBehavior
// Il2CppName: set_backgroundBehavior
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(::UnityEngine::InputSystem::InputSettings::BackgroundBehavior)>(&UnityEngine::InputSystem::InputSettings::set_backgroundBehavior)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputSettings/BackgroundBehavior")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_backgroundBehavior", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_editorInputBehaviorInPlayMode
// Il2CppName: get_editorInputBehaviorInPlayMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputSettings::EditorInputBehaviorInPlayMode (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_editorInputBehaviorInPlayMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_editorInputBehaviorInPlayMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_editorInputBehaviorInPlayMode
// Il2CppName: set_editorInputBehaviorInPlayMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(::UnityEngine::InputSystem::InputSettings::EditorInputBehaviorInPlayMode)>(&UnityEngine::InputSystem::InputSettings::set_editorInputBehaviorInPlayMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputSettings/EditorInputBehaviorInPlayMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_editorInputBehaviorInPlayMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_maxEventBytesPerUpdate
// Il2CppName: get_maxEventBytesPerUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_maxEventBytesPerUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_maxEventBytesPerUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_maxEventBytesPerUpdate
// Il2CppName: set_maxEventBytesPerUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(int)>(&UnityEngine::InputSystem::InputSettings::set_maxEventBytesPerUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_maxEventBytesPerUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_maxQueuedEventsPerUpdate
// Il2CppName: get_maxQueuedEventsPerUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_maxQueuedEventsPerUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_maxQueuedEventsPerUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_maxQueuedEventsPerUpdate
// Il2CppName: set_maxQueuedEventsPerUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(int)>(&UnityEngine::InputSystem::InputSettings::set_maxQueuedEventsPerUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_maxQueuedEventsPerUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_supportedDevices
// Il2CppName: get_supportedDevices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::StringW> (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_supportedDevices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_supportedDevices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_supportedDevices
// Il2CppName: set_supportedDevices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::StringW>)>(&UnityEngine::InputSystem::InputSettings::set_supportedDevices)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "ReadOnlyArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_supportedDevices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_disableRedundantEventsMerging
// Il2CppName: get_disableRedundantEventsMerging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_disableRedundantEventsMerging)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_disableRedundantEventsMerging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_disableRedundantEventsMerging
// Il2CppName: set_disableRedundantEventsMerging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(bool)>(&UnityEngine::InputSystem::InputSettings::set_disableRedundantEventsMerging)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_disableRedundantEventsMerging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::get_shortcutKeysConsumeInput
// Il2CppName: get_shortcutKeysConsumeInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::get_shortcutKeysConsumeInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "get_shortcutKeysConsumeInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::set_shortcutKeysConsumeInput
// Il2CppName: set_shortcutKeysConsumeInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(bool)>(&UnityEngine::InputSystem::InputSettings::set_shortcutKeysConsumeInput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "set_shortcutKeysConsumeInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::SetInternalFeatureFlag
// Il2CppName: SetInternalFeatureFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)(::StringW, bool)>(&UnityEngine::InputSystem::InputSettings::SetInternalFeatureFlag)> {
  static const MethodInfo* get() {
    static auto* featureName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "SetInternalFeatureFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{featureName, enabled});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::IsFeatureEnabled
// Il2CppName: IsFeatureEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputSettings::*)(::StringW)>(&UnityEngine::InputSystem::InputSettings::IsFeatureEnabled)> {
  static const MethodInfo* get() {
    static auto* featureName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "IsFeatureEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{featureName});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::OnChange
// Il2CppName: OnChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputSettings::*)()>(&UnityEngine::InputSystem::InputSettings::OnChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputSettings*), "OnChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
