// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor
#include "UnityEngine/InputSystem/LowLevel/IInputStateChangeMonitor.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.InputSystem.InputDeviceChange
#include "UnityEngine/InputSystem/InputDeviceChange.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEventPtr
#include "UnityEngine/InputSystem/LowLevel/InputEventPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: Touchscreen
  class Touchscreen;
  // Forward declaring type: Pointer
  class Pointer;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: TouchPhase
  struct TouchPhase;
  // Forward declaring type: InputControl
  class InputControl;
}
// Forward declaring namespace: UnityEngine::InputSystem::Controls
namespace UnityEngine::InputSystem::Controls {
  // Forward declaring type: ButtonControl
  class ButtonControl;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.EnhancedTouch
namespace UnityEngine::InputSystem::EnhancedTouch {
  // Forward declaring type: TouchSimulation
  class TouchSimulation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::EnhancedTouch::TouchSimulation);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*, "UnityEngine.InputSystem.EnhancedTouch", "TouchSimulation");
// Type namespace: UnityEngine.InputSystem.EnhancedTouch
namespace UnityEngine::InputSystem::EnhancedTouch {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.EnhancedTouch.TouchSimulation
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class TouchSimulation : public ::UnityEngine::MonoBehaviour/*, public ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor*/ {
    public:
    public:
    // private UnityEngine.InputSystem.Touchscreen <simulatedTouchscreen>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::InputSystem::Touchscreen* simulatedTouchscreen;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Touchscreen*) == 0x8);
    // private System.Int32 m_NumPointers
    // Size: 0x4
    // Offset: 0x28
    int m_NumPointers;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_NumPointers and: m_Pointers
    char __padding1[0x4] = {};
    // private UnityEngine.InputSystem.Pointer[] m_Pointers
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::InputSystem::Pointer*> m_Pointers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::Pointer*>) == 0x8);
    // private UnityEngine.Vector2[] m_CurrentPositions
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Vector2> m_CurrentPositions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private System.Int32[] m_CurrentDisplayIndices
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<int> m_CurrentDisplayIndices;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private UnityEngine.InputSystem.Controls.ButtonControl[] m_Touches
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::InputSystem::Controls::ButtonControl*> m_Touches;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::Controls::ButtonControl*>) == 0x8);
    // private System.Int32 m_LastTouchId
    // Size: 0x4
    // Offset: 0x50
    int m_LastTouchId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_PrimaryTouchIndex
    // Size: 0x4
    // Offset: 0x54
    int m_PrimaryTouchIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Action`2<UnityEngine.InputSystem.InputDevice,UnityEngine.InputSystem.InputDeviceChange> m_OnDeviceChange
    // Size: 0x8
    // Offset: 0x58
    ::System::Action_2<::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::InputDeviceChange>* m_OnDeviceChange;
    // Field size check
    static_assert(sizeof(::System::Action_2<::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::InputDeviceChange>*) == 0x8);
    // private System.Action`2<UnityEngine.InputSystem.LowLevel.InputEventPtr,UnityEngine.InputSystem.InputDevice> m_OnEvent
    // Size: 0x8
    // Offset: 0x60
    ::System::Action_2<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*>* m_OnEvent;
    // Field size check
    static_assert(sizeof(::System::Action_2<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor
    operator ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor*>(this);
    }
    // Get static field: static UnityEngine.InputSystem.EnhancedTouch.TouchSimulation s_Instance
    static ::UnityEngine::InputSystem::EnhancedTouch::TouchSimulation* _get_s_Instance();
    // Set static field: static UnityEngine.InputSystem.EnhancedTouch.TouchSimulation s_Instance
    static void _set_s_Instance(::UnityEngine::InputSystem::EnhancedTouch::TouchSimulation* value);
    // Get instance field reference: private UnityEngine.InputSystem.Touchscreen <simulatedTouchscreen>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Touchscreen*& dyn_$simulatedTouchscreen$k__BackingField();
    // Get instance field reference: private System.Int32 m_NumPointers
    [[deprecated("Use field access instead!")]] int& dyn_m_NumPointers();
    // Get instance field reference: private UnityEngine.InputSystem.Pointer[] m_Pointers
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::Pointer*>& dyn_m_Pointers();
    // Get instance field reference: private UnityEngine.Vector2[] m_CurrentPositions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_m_CurrentPositions();
    // Get instance field reference: private System.Int32[] m_CurrentDisplayIndices
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_m_CurrentDisplayIndices();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl[] m_Touches
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::Controls::ButtonControl*>& dyn_m_Touches();
    // Get instance field reference: private System.Int32 m_LastTouchId
    [[deprecated("Use field access instead!")]] int& dyn_m_LastTouchId();
    // Get instance field reference: private System.Int32 m_PrimaryTouchIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_PrimaryTouchIndex();
    // Get instance field reference: private System.Action`2<UnityEngine.InputSystem.InputDevice,UnityEngine.InputSystem.InputDeviceChange> m_OnDeviceChange
    [[deprecated("Use field access instead!")]] ::System::Action_2<::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::InputDeviceChange>*& dyn_m_OnDeviceChange();
    // Get instance field reference: private System.Action`2<UnityEngine.InputSystem.LowLevel.InputEventPtr,UnityEngine.InputSystem.InputDevice> m_OnEvent
    [[deprecated("Use field access instead!")]] ::System::Action_2<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*>*& dyn_m_OnEvent();
    // public UnityEngine.InputSystem.Touchscreen get_simulatedTouchscreen()
    // Offset: 0x51462C8
    ::UnityEngine::InputSystem::Touchscreen* get_simulatedTouchscreen();
    // private System.Void set_simulatedTouchscreen(UnityEngine.InputSystem.Touchscreen value)
    // Offset: 0x51462D0
    void set_simulatedTouchscreen(::UnityEngine::InputSystem::Touchscreen* value);
    // static public UnityEngine.InputSystem.EnhancedTouch.TouchSimulation get_instance()
    // Offset: 0x51462D8
    static ::UnityEngine::InputSystem::EnhancedTouch::TouchSimulation* get_instance();
    // static public System.Void Enable()
    // Offset: 0x5146320
    static void Enable();
    // static public System.Void Disable()
    // Offset: 0x51464C4
    static void Disable();
    // static public System.Void Destroy()
    // Offset: 0x514659C
    static void Destroy();
    // protected System.Void AddPointer(UnityEngine.InputSystem.Pointer pointer)
    // Offset: 0x5146684
    void AddPointer(::UnityEngine::InputSystem::Pointer* pointer);
    // protected System.Void RemovePointer(UnityEngine.InputSystem.Pointer pointer)
    // Offset: 0x51467F4
    void RemovePointer(::UnityEngine::InputSystem::Pointer* pointer);
    // private System.Void OnEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x5146DC0
    void OnEvent(::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr, ::UnityEngine::InputSystem::InputDevice* device);
    // private System.Void OnDeviceChange(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.InputDeviceChange change)
    // Offset: 0x5147380
    void OnDeviceChange(::UnityEngine::InputSystem::InputDevice* device, ::UnityEngine::InputSystem::InputDeviceChange change);
    // protected System.Void OnEnable()
    // Offset: 0x51474CC
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x5147A2C
    void OnDisable();
    // private System.Void UpdateTouch(System.Int32 touchIndex, System.Int32 pointerIndex, UnityEngine.InputSystem.TouchPhase phase, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Offset: 0x51469E8
    void UpdateTouch(int touchIndex, int pointerIndex, ::UnityEngine::InputSystem::TouchPhase phase, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr);
    // private System.Void UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyControlStateChanged(UnityEngine.InputSystem.InputControl control, System.Double time, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, System.Int64 monitorIndex)
    // Offset: 0x5147E84
    void UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyControlStateChanged(::UnityEngine::InputSystem::InputControl* control, double time, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr, int64_t monitorIndex);
    // private System.Void UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyTimerExpired(UnityEngine.InputSystem.InputControl control, System.Double time, System.Int64 monitorIndex, System.Int32 timerIndex)
    // Offset: 0x5147E88
    void UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyTimerExpired(::UnityEngine::InputSystem::InputControl* control, double time, int64_t monitorIndex, int timerIndex);
    // protected System.Void InstallStateChangeMonitors(System.Int32 startIndex)
    // Offset: 0x5147E8C
    void InstallStateChangeMonitors(int startIndex);
    // protected System.Void OnSourceControlChangedValue(UnityEngine.InputSystem.InputControl control, System.Double time, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, System.Int64 sourceDeviceAndButtonIndex)
    // Offset: 0x5147E90
    void OnSourceControlChangedValue(::UnityEngine::InputSystem::InputControl* control, double time, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr, int64_t sourceDeviceAndButtonIndex);
    // protected System.Void UninstallStateChangeMonitors(System.Int32 startIndex)
    // Offset: 0x5147E94
    void UninstallStateChangeMonitors(int startIndex);
    // public System.Void .ctor()
    // Offset: 0x5147E98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TouchSimulation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TouchSimulation*, creationType>()));
    }
  }; // UnityEngine.InputSystem.EnhancedTouch.TouchSimulation
  #pragma pack(pop)
  static check_size<sizeof(TouchSimulation), 96 + sizeof(::System::Action_2<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*>*)> __UnityEngine_InputSystem_EnhancedTouch_TouchSimulationSizeCheck;
  static_assert(sizeof(TouchSimulation) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::get_simulatedTouchscreen
// Il2CppName: get_simulatedTouchscreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Touchscreen* (UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::*)()>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::get_simulatedTouchscreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "get_simulatedTouchscreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::set_simulatedTouchscreen
// Il2CppName: set_simulatedTouchscreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::*)(::UnityEngine::InputSystem::Touchscreen*)>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::set_simulatedTouchscreen)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "Touchscreen")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "set_simulatedTouchscreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::EnhancedTouch::TouchSimulation* (*)()>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::Enable
// Il2CppName: Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::Enable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::Disable
// Il2CppName: Disable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::Disable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "Disable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::AddPointer
// Il2CppName: AddPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::*)(::UnityEngine::InputSystem::Pointer*)>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::AddPointer)> {
  static const MethodInfo* get() {
    static auto* pointer = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "Pointer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "AddPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointer});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::RemovePointer
// Il2CppName: RemovePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::*)(::UnityEngine::InputSystem::Pointer*)>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::RemovePointer)> {
  static const MethodInfo* get() {
    static auto* pointer = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "Pointer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "RemovePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointer});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::OnEvent
// Il2CppName: OnEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::*)(::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::OnEvent)> {
  static const MethodInfo* get() {
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "OnEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventPtr, device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::OnDeviceChange
// Il2CppName: OnDeviceChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::*)(::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::InputDeviceChange)>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::OnDeviceChange)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* change = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDeviceChange")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "OnDeviceChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, change});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::*)()>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::*)()>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::UpdateTouch
// Il2CppName: UpdateTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::*)(int, int, ::UnityEngine::InputSystem::TouchPhase, ::UnityEngine::InputSystem::LowLevel::InputEventPtr)>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::UpdateTouch)> {
  static const MethodInfo* get() {
    static auto* touchIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pointerIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* phase = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "TouchPhase")->byval_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "UpdateTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{touchIndex, pointerIndex, phase, eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyControlStateChanged
// Il2CppName: UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyControlStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::*)(::UnityEngine::InputSystem::InputControl*, double, ::UnityEngine::InputSystem::LowLevel::InputEventPtr, int64_t)>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyControlStateChanged)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    static auto* monitorIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyControlStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, time, eventPtr, monitorIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyTimerExpired
// Il2CppName: UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyTimerExpired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::*)(::UnityEngine::InputSystem::InputControl*, double, int64_t, int)>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyTimerExpired)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* monitorIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* timerIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyTimerExpired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, time, monitorIndex, timerIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::InstallStateChangeMonitors
// Il2CppName: InstallStateChangeMonitors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::*)(int)>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::InstallStateChangeMonitors)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "InstallStateChangeMonitors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::OnSourceControlChangedValue
// Il2CppName: OnSourceControlChangedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::*)(::UnityEngine::InputSystem::InputControl*, double, ::UnityEngine::InputSystem::LowLevel::InputEventPtr, int64_t)>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::OnSourceControlChangedValue)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    static auto* sourceDeviceAndButtonIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "OnSourceControlChangedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, time, eventPtr, sourceDeviceAndButtonIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::UninstallStateChangeMonitors
// Il2CppName: UninstallStateChangeMonitors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::*)(int)>(&UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::UninstallStateChangeMonitors)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchSimulation*), "UninstallStateChangeMonitors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchSimulation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
