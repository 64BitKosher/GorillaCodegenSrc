// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: UnityEngine.InputSystem.InputActionProperty
#include "UnityEngine/InputSystem/InputActionProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputAction
  class InputAction;
  // Forward declaring type: CallbackContext
  struct InputAction_CallbackContext;
}
// Forward declaring namespace: UnityEngine::InputSystem::XR
namespace UnityEngine::InputSystem::XR {
  // Skipping declaration: TrackingType because it is already included!
  // Skipping declaration: UpdateType because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.XR
namespace UnityEngine::InputSystem::XR {
  // Forward declaring type: TrackedPoseDriver
  class TrackedPoseDriver;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::XR::TrackedPoseDriver);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XR::TrackedPoseDriver*, "UnityEngine.InputSystem.XR", "TrackedPoseDriver");
// Type namespace: UnityEngine.InputSystem.XR
namespace UnityEngine::InputSystem::XR {
  // Size: 0xB1
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.XR.TrackedPoseDriver
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class TrackedPoseDriver : public ::UnityEngine::MonoBehaviour/*, public ::UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingType
    struct TrackingType;
    // Nested type: ::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingStates
    struct TrackingStates;
    // Nested type: ::UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateType
    struct UpdateType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType
    // [TokenAttribute] Offset: FFFFFFFF
    struct TrackingType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TrackingType
      constexpr TrackingType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType RotationAndPosition
      static constexpr const int RotationAndPosition = 0;
      // Get static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType RotationAndPosition
      static ::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingType _get_RotationAndPosition();
      // Set static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType RotationAndPosition
      static void _set_RotationAndPosition(::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingType value);
      // static field const value: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType RotationOnly
      static constexpr const int RotationOnly = 1;
      // Get static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType RotationOnly
      static ::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingType _get_RotationOnly();
      // Set static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType RotationOnly
      static void _set_RotationOnly(::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingType value);
      // static field const value: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType PositionOnly
      static constexpr const int PositionOnly = 2;
      // Get static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType PositionOnly
      static ::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingType _get_PositionOnly();
      // Set static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType PositionOnly
      static void _set_PositionOnly(::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType
    #pragma pack(pop)
    static check_size<sizeof(TrackedPoseDriver::TrackingType), 0 + sizeof(int)> __UnityEngine_InputSystem_XR_TrackedPoseDriver_TrackingTypeSizeCheck;
    static_assert(sizeof(TrackedPoseDriver::TrackingType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingStates
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct TrackingStates/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TrackingStates
      constexpr TrackingStates(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingStates None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingStates None
      static ::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingStates _get_None();
      // Set static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingStates None
      static void _set_None(::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingStates value);
      // static field const value: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingStates Position
      static constexpr const int Position = 1;
      // Get static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingStates Position
      static ::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingStates _get_Position();
      // Set static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingStates Position
      static void _set_Position(::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingStates value);
      // static field const value: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingStates Rotation
      static constexpr const int Rotation = 2;
      // Get static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingStates Rotation
      static ::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingStates _get_Rotation();
      // Set static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingStates Rotation
      static void _set_Rotation(::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingStates value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingStates
    #pragma pack(pop)
    static check_size<sizeof(TrackedPoseDriver::TrackingStates), 0 + sizeof(int)> __UnityEngine_InputSystem_XR_TrackedPoseDriver_TrackingStatesSizeCheck;
    static_assert(sizeof(TrackedPoseDriver::TrackingStates) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType
    // [TokenAttribute] Offset: FFFFFFFF
    struct UpdateType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UpdateType
      constexpr UpdateType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType UpdateAndBeforeRender
      static constexpr const int UpdateAndBeforeRender = 0;
      // Get static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType UpdateAndBeforeRender
      static ::UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateType _get_UpdateAndBeforeRender();
      // Set static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType UpdateAndBeforeRender
      static void _set_UpdateAndBeforeRender(::UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateType value);
      // static field const value: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType Update
      static constexpr const int Update = 1;
      // Get static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType Update
      static ::UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateType _get_Update();
      // Set static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType Update
      static void _set_Update(::UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateType value);
      // static field const value: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType BeforeRender
      static constexpr const int BeforeRender = 2;
      // Get static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType BeforeRender
      static ::UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateType _get_BeforeRender();
      // Set static field: static public UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType BeforeRender
      static void _set_BeforeRender(::UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType
    #pragma pack(pop)
    static check_size<sizeof(TrackedPoseDriver::UpdateType), 0 + sizeof(int)> __UnityEngine_InputSystem_XR_TrackedPoseDriver_UpdateTypeSizeCheck;
    static_assert(sizeof(TrackedPoseDriver::UpdateType) == 0x4);
    public:
    // private UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType m_TrackingType
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingType m_TrackingType;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingType) == 0x4);
    // private UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType m_UpdateType
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateType m_UpdateType;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateType) == 0x4);
    // private System.Boolean m_IgnoreTrackingState
    // Size: 0x1
    // Offset: 0x28
    bool m_IgnoreTrackingState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_IgnoreTrackingState and: m_PositionInput
    char __padding2[0x7] = {};
    // private UnityEngine.InputSystem.InputActionProperty m_PositionInput
    // Size: 0x18
    // Offset: 0x30
    ::UnityEngine::InputSystem::InputActionProperty m_PositionInput;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.InputSystem.InputActionProperty m_RotationInput
    // Size: 0x18
    // Offset: 0x48
    ::UnityEngine::InputSystem::InputActionProperty m_RotationInput;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.InputSystem.InputActionProperty m_TrackingStateInput
    // Size: 0x18
    // Offset: 0x60
    ::UnityEngine::InputSystem::InputActionProperty m_TrackingStateInput;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.Vector3 m_CurrentPosition
    // Size: 0xC
    // Offset: 0x78
    ::UnityEngine::Vector3 m_CurrentPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion m_CurrentRotation
    // Size: 0x10
    // Offset: 0x84
    ::UnityEngine::Quaternion m_CurrentRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingStates m_CurrentTrackingState
    // Size: 0x4
    // Offset: 0x94
    ::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingStates m_CurrentTrackingState;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingStates) == 0x4);
    // private System.Boolean m_RotationBound
    // Size: 0x1
    // Offset: 0x98
    bool m_RotationBound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_PositionBound
    // Size: 0x1
    // Offset: 0x99
    bool m_PositionBound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_TrackingStateBound
    // Size: 0x1
    // Offset: 0x9A
    bool m_TrackingStateBound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsFirstUpdate
    // Size: 0x1
    // Offset: 0x9B
    bool m_IsFirstUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_IsFirstUpdate and: m_PositionAction
    char __padding12[0x4] = {};
    // private UnityEngine.InputSystem.InputAction m_PositionAction
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::InputSystem::InputAction* m_PositionAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputAction*) == 0x8);
    // private UnityEngine.InputSystem.InputAction m_RotationAction
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::InputSystem::InputAction* m_RotationAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputAction*) == 0x8);
    // private System.Boolean m_HasMigratedActions
    // Size: 0x1
    // Offset: 0xB0
    bool m_HasMigratedActions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Get instance field reference: private UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType m_TrackingType
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingType& dyn_m_TrackingType();
    // Get instance field reference: private UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType m_UpdateType
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateType& dyn_m_UpdateType();
    // Get instance field reference: private System.Boolean m_IgnoreTrackingState
    [[deprecated("Use field access instead!")]] bool& dyn_m_IgnoreTrackingState();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_PositionInput
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_PositionInput();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_RotationInput
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_RotationInput();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_TrackingStateInput
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_TrackingStateInput();
    // Get instance field reference: private UnityEngine.Vector3 m_CurrentPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_CurrentPosition();
    // Get instance field reference: private UnityEngine.Quaternion m_CurrentRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_CurrentRotation();
    // Get instance field reference: private UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingStates m_CurrentTrackingState
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingStates& dyn_m_CurrentTrackingState();
    // Get instance field reference: private System.Boolean m_RotationBound
    [[deprecated("Use field access instead!")]] bool& dyn_m_RotationBound();
    // Get instance field reference: private System.Boolean m_PositionBound
    [[deprecated("Use field access instead!")]] bool& dyn_m_PositionBound();
    // Get instance field reference: private System.Boolean m_TrackingStateBound
    [[deprecated("Use field access instead!")]] bool& dyn_m_TrackingStateBound();
    // Get instance field reference: private System.Boolean m_IsFirstUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsFirstUpdate();
    // Get instance field reference: private UnityEngine.InputSystem.InputAction m_PositionAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputAction*& dyn_m_PositionAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputAction m_RotationAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputAction*& dyn_m_RotationAction();
    // Get instance field reference: private System.Boolean m_HasMigratedActions
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasMigratedActions();
    // public UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType get_trackingType()
    // Offset: 0x5126C0C
    ::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingType get_trackingType();
    // public System.Void set_trackingType(UnityEngine.InputSystem.XR.TrackedPoseDriver/TrackingType value)
    // Offset: 0x5126C14
    void set_trackingType(::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingType value);
    // public UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType get_updateType()
    // Offset: 0x5126C1C
    ::UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateType get_updateType();
    // public System.Void set_updateType(UnityEngine.InputSystem.XR.TrackedPoseDriver/UpdateType value)
    // Offset: 0x5126C24
    void set_updateType(::UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateType value);
    // public System.Boolean get_ignoreTrackingState()
    // Offset: 0x5126C2C
    bool get_ignoreTrackingState();
    // public System.Void set_ignoreTrackingState(System.Boolean value)
    // Offset: 0x5126C34
    void set_ignoreTrackingState(bool value);
    // public UnityEngine.InputSystem.InputActionProperty get_positionInput()
    // Offset: 0x5126C40
    ::UnityEngine::InputSystem::InputActionProperty get_positionInput();
    // public System.Void set_positionInput(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0x5126C54
    void set_positionInput(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_rotationInput()
    // Offset: 0x5127004
    ::UnityEngine::InputSystem::InputActionProperty get_rotationInput();
    // public System.Void set_rotationInput(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0x5127018
    void set_rotationInput(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_trackingStateInput()
    // Offset: 0x51273C8
    ::UnityEngine::InputSystem::InputActionProperty get_trackingStateInput();
    // public System.Void set_trackingStateInput(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0x51273DC
    void set_trackingStateInput(::UnityEngine::InputSystem::InputActionProperty value);
    // private System.Void BindActions()
    // Offset: 0x512778C
    void BindActions();
    // private System.Void UnbindActions()
    // Offset: 0x51277AC
    void UnbindActions();
    // private System.Void BindPosition()
    // Offset: 0x5126E64
    void BindPosition();
    // private System.Void BindRotation()
    // Offset: 0x5127228
    void BindRotation();
    // private System.Void BindTrackingState()
    // Offset: 0x51275EC
    void BindTrackingState();
    // private System.Void UnbindPosition()
    // Offset: 0x5126D20
    void UnbindPosition();
    // private System.Void UnbindRotation()
    // Offset: 0x51270E4
    void UnbindRotation();
    // private System.Void UnbindTrackingState()
    // Offset: 0x51274A8
    void UnbindTrackingState();
    // private System.Void OnPositionPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)
    // Offset: 0x51277CC
    void OnPositionPerformed(::UnityEngine::InputSystem::InputAction_CallbackContext context);
    // private System.Void OnPositionCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)
    // Offset: 0x512782C
    void OnPositionCanceled(::UnityEngine::InputSystem::InputAction_CallbackContext context);
    // private System.Void OnRotationPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)
    // Offset: 0x5127884
    void OnRotationPerformed(::UnityEngine::InputSystem::InputAction_CallbackContext context);
    // private System.Void OnRotationCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)
    // Offset: 0x51278E4
    void OnRotationCanceled(::UnityEngine::InputSystem::InputAction_CallbackContext context);
    // private System.Void OnTrackingStatePerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)
    // Offset: 0x5127934
    void OnTrackingStatePerformed(::UnityEngine::InputSystem::InputAction_CallbackContext context);
    // private System.Void OnTrackingStateCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)
    // Offset: 0x5127990
    void OnTrackingStateCanceled(::UnityEngine::InputSystem::InputAction_CallbackContext context);
    // protected System.Void Reset()
    // Offset: 0x5127998
    void Reset();
    // protected System.Void Awake()
    // Offset: 0x5127B98
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x5127C48
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x5127D00
    void OnDisable();
    // protected System.Void OnDestroy()
    // Offset: 0x5127DAC
    void OnDestroy();
    // protected System.Void UpdateCallback()
    // Offset: 0x5127DD8
    void UpdateCallback();
    // private System.Void ReadTrackingState()
    // Offset: 0x5127EFC
    void ReadTrackingState();
    // protected System.Void OnUpdate()
    // Offset: 0x5128030
    void OnUpdate();
    // protected System.Void OnBeforeRender()
    // Offset: 0x512804C
    void OnBeforeRender();
    // protected System.Void PerformUpdate()
    // Offset: 0x512806C
    void PerformUpdate();
    // protected System.Void SetLocalTransform(UnityEngine.Vector3 newPosition, UnityEngine.Quaternion newRotation)
    // Offset: 0x5128088
    void SetLocalTransform(::UnityEngine::Vector3 newPosition, ::UnityEngine::Quaternion newRotation);
    // private System.Boolean HasStereoCamera(out UnityEngine.Camera cameraComponent)
    // Offset: 0x5127BC4
    bool HasStereoCamera(ByRef<::UnityEngine::Camera*> cameraComponent);
    // public UnityEngine.InputSystem.InputAction get_positionAction()
    // Offset: 0x5128180
    ::UnityEngine::InputSystem::InputAction* get_positionAction();
    // public System.Void set_positionAction(UnityEngine.InputSystem.InputAction value)
    // Offset: 0x512818C
    void set_positionAction(::UnityEngine::InputSystem::InputAction* value);
    // public UnityEngine.InputSystem.InputAction get_rotationAction()
    // Offset: 0x51281D4
    ::UnityEngine::InputSystem::InputAction* get_rotationAction();
    // public System.Void set_rotationAction(UnityEngine.InputSystem.InputAction value)
    // Offset: 0x51281E0
    void set_rotationAction(::UnityEngine::InputSystem::InputAction* value);
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
    // Offset: 0x5128228
    void UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize();
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
    // Offset: 0x512822C
    void UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize();
    // public System.Void .ctor()
    // Offset: 0x51282BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrackedPoseDriver* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::XR::TrackedPoseDriver::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrackedPoseDriver*, creationType>()));
    }
  }; // UnityEngine.InputSystem.XR.TrackedPoseDriver
  #pragma pack(pop)
  static check_size<sizeof(TrackedPoseDriver), 176 + sizeof(bool)> __UnityEngine_InputSystem_XR_TrackedPoseDriverSizeCheck;
  static_assert(sizeof(TrackedPoseDriver) == 0xB1);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateType, "UnityEngine.InputSystem.XR", "TrackedPoseDriver/UpdateType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingStates, "UnityEngine.InputSystem.XR", "TrackedPoseDriver/TrackingStates");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingType, "UnityEngine.InputSystem.XR", "TrackedPoseDriver/TrackingType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::get_trackingType
// Il2CppName: get_trackingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingType (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::get_trackingType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "get_trackingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::set_trackingType
// Il2CppName: set_trackingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(::UnityEngine::InputSystem::XR::TrackedPoseDriver::TrackingType)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::set_trackingType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.XR", "TrackedPoseDriver/TrackingType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "set_trackingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::get_updateType
// Il2CppName: get_updateType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateType (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::get_updateType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "get_updateType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::set_updateType
// Il2CppName: set_updateType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(::UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateType)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::set_updateType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.XR", "TrackedPoseDriver/UpdateType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "set_updateType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::get_ignoreTrackingState
// Il2CppName: get_ignoreTrackingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::get_ignoreTrackingState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "get_ignoreTrackingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::set_ignoreTrackingState
// Il2CppName: set_ignoreTrackingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(bool)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::set_ignoreTrackingState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "set_ignoreTrackingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::get_positionInput
// Il2CppName: get_positionInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::get_positionInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "get_positionInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::set_positionInput
// Il2CppName: set_positionInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::set_positionInput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "set_positionInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::get_rotationInput
// Il2CppName: get_rotationInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::get_rotationInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "get_rotationInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::set_rotationInput
// Il2CppName: set_rotationInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::set_rotationInput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "set_rotationInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::get_trackingStateInput
// Il2CppName: get_trackingStateInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::get_trackingStateInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "get_trackingStateInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::set_trackingStateInput
// Il2CppName: set_trackingStateInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::set_trackingStateInput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "set_trackingStateInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::BindActions
// Il2CppName: BindActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::BindActions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "BindActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::UnbindActions
// Il2CppName: UnbindActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::UnbindActions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "UnbindActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::BindPosition
// Il2CppName: BindPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::BindPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "BindPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::BindRotation
// Il2CppName: BindRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::BindRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "BindRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::BindTrackingState
// Il2CppName: BindTrackingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::BindTrackingState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "BindTrackingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::UnbindPosition
// Il2CppName: UnbindPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::UnbindPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "UnbindPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::UnbindRotation
// Il2CppName: UnbindRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::UnbindRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "UnbindRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::UnbindTrackingState
// Il2CppName: UnbindTrackingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::UnbindTrackingState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "UnbindTrackingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::OnPositionPerformed
// Il2CppName: OnPositionPerformed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(::UnityEngine::InputSystem::InputAction_CallbackContext)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::OnPositionPerformed)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction/CallbackContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "OnPositionPerformed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::OnPositionCanceled
// Il2CppName: OnPositionCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(::UnityEngine::InputSystem::InputAction_CallbackContext)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::OnPositionCanceled)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction/CallbackContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "OnPositionCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::OnRotationPerformed
// Il2CppName: OnRotationPerformed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(::UnityEngine::InputSystem::InputAction_CallbackContext)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::OnRotationPerformed)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction/CallbackContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "OnRotationPerformed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::OnRotationCanceled
// Il2CppName: OnRotationCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(::UnityEngine::InputSystem::InputAction_CallbackContext)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::OnRotationCanceled)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction/CallbackContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "OnRotationCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::OnTrackingStatePerformed
// Il2CppName: OnTrackingStatePerformed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(::UnityEngine::InputSystem::InputAction_CallbackContext)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::OnTrackingStatePerformed)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction/CallbackContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "OnTrackingStatePerformed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::OnTrackingStateCanceled
// Il2CppName: OnTrackingStateCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(::UnityEngine::InputSystem::InputAction_CallbackContext)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::OnTrackingStateCanceled)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction/CallbackContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "OnTrackingStateCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateCallback
// Il2CppName: UpdateCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::UpdateCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "UpdateCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::ReadTrackingState
// Il2CppName: ReadTrackingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::ReadTrackingState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "ReadTrackingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::OnUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::OnBeforeRender
// Il2CppName: OnBeforeRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::OnBeforeRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "OnBeforeRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::PerformUpdate
// Il2CppName: PerformUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::PerformUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "PerformUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::SetLocalTransform
// Il2CppName: SetLocalTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::SetLocalTransform)> {
  static const MethodInfo* get() {
    static auto* newPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* newRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "SetLocalTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPosition, newRotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::HasStereoCamera
// Il2CppName: HasStereoCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(ByRef<::UnityEngine::Camera*>)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::HasStereoCamera)> {
  static const MethodInfo* get() {
    static auto* cameraComponent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "HasStereoCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraComponent});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::get_positionAction
// Il2CppName: get_positionAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputAction* (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::get_positionAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "get_positionAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::set_positionAction
// Il2CppName: set_positionAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(::UnityEngine::InputSystem::InputAction*)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::set_positionAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "set_positionAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::get_rotationAction
// Il2CppName: get_rotationAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputAction* (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::get_rotationAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "get_rotationAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::set_rotationAction
// Il2CppName: set_rotationAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)(::UnityEngine::InputSystem::InputAction*)>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::set_rotationAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "set_rotationAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::TrackedPoseDriver::*)()>(&UnityEngine::InputSystem::XR::TrackedPoseDriver::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::TrackedPoseDriver*), "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::TrackedPoseDriver::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
