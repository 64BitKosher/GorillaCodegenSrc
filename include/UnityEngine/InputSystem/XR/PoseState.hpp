// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo
#include "UnityEngine/InputSystem/LowLevel/IInputStateTypeInfo.hpp"
// Including type: UnityEngine.XR.InputTrackingState
#include "UnityEngine/XR/InputTrackingState.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.InputSystem.Utilities.FourCC
#include "UnityEngine/InputSystem/Utilities/FourCC.hpp"
// Completed includes
// Type namespace: UnityEngine.InputSystem.XR
namespace UnityEngine::InputSystem::XR {
  // Forward declaring type: PoseState
  struct PoseState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XR::PoseState, "UnityEngine.InputSystem.XR", "PoseState");
// Type namespace: UnityEngine.InputSystem.XR
namespace UnityEngine::InputSystem::XR {
  // Size: 0x3C
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.XR.PoseState
  // [TokenAttribute] Offset: FFFFFFFF
  struct PoseState/*, public ::System::ValueType, public ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*/ {
    public:
    public:
    // public System.Boolean isTracked
    // Size: 0x1
    // Offset: 0x0
    bool isTracked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isTracked and: trackingState
    char __padding0[0x3] = {};
    // public UnityEngine.XR.InputTrackingState trackingState
    // Size: 0x4
    // Offset: 0x4
    ::UnityEngine::XR::InputTrackingState trackingState;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputTrackingState) == 0x4);
    // public UnityEngine.Vector3 position
    // Size: 0xC
    // Offset: 0x8
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion rotation
    // Size: 0x10
    // Offset: 0x14
    ::UnityEngine::Quaternion rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 velocity
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 angularVelocity
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 angularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating value type constructor for type: PoseState
    constexpr PoseState(bool isTracked_ = {}, ::UnityEngine::XR::InputTrackingState trackingState_ = {}, ::UnityEngine::Vector3 position_ = {}, ::UnityEngine::Quaternion rotation_ = {}, ::UnityEngine::Vector3 velocity_ = {}, ::UnityEngine::Vector3 angularVelocity_ = {}) noexcept : isTracked{isTracked_}, trackingState{trackingState_}, position{position_}, rotation{rotation_}, velocity{velocity_}, angularVelocity{angularVelocity_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo
    operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*>(this);
    }
    // static field const value: static System.Int32 kSizeInBytes
    static constexpr const int kSizeInBytes = 60;
    // Get static field: static System.Int32 kSizeInBytes
    static int _get_kSizeInBytes();
    // Set static field: static System.Int32 kSizeInBytes
    static void _set_kSizeInBytes(int value);
    // Get static field: static readonly UnityEngine.InputSystem.Utilities.FourCC s_Format
    static ::UnityEngine::InputSystem::Utilities::FourCC _get_s_Format();
    // Set static field: static readonly UnityEngine.InputSystem.Utilities.FourCC s_Format
    static void _set_s_Format(::UnityEngine::InputSystem::Utilities::FourCC value);
    // Get instance field reference: public System.Boolean isTracked
    [[deprecated("Use field access instead!")]] bool& dyn_isTracked();
    // Get instance field reference: public UnityEngine.XR.InputTrackingState trackingState
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputTrackingState& dyn_trackingState();
    // Get instance field reference: public UnityEngine.Vector3 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
    // Get instance field reference: public UnityEngine.Quaternion rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rotation();
    // Get instance field reference: public UnityEngine.Vector3 velocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_velocity();
    // Get instance field reference: public UnityEngine.Vector3 angularVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_angularVelocity();
    // public UnityEngine.InputSystem.Utilities.FourCC get_format()
    // Offset: 0x5125D94
    ::UnityEngine::InputSystem::Utilities::FourCC get_format();
    // public System.Void .ctor(System.Boolean isTracked, UnityEngine.XR.InputTrackingState trackingState, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 velocity, UnityEngine.Vector3 angularVelocity)
    // Offset: 0x5125DEC
    // ABORTED: conflicts with another method.  PoseState(bool isTracked, ::UnityEngine::XR::InputTrackingState trackingState, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 velocity, ::UnityEngine::Vector3 angularVelocity);
    // static private System.Void .cctor()
    // Offset: 0x5125E2C
    static void _cctor();
  }; // UnityEngine.InputSystem.XR.PoseState
  #pragma pack(pop)
  static check_size<sizeof(PoseState), 48 + sizeof(::UnityEngine::Vector3)> __UnityEngine_InputSystem_XR_PoseStateSizeCheck;
  static_assert(sizeof(PoseState) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::PoseState::get_format
// Il2CppName: get_format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (UnityEngine::InputSystem::XR::PoseState::*)()>(&UnityEngine::InputSystem::XR::PoseState::get_format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::PoseState), "get_format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::PoseState::PoseState
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::PoseState::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::XR::PoseState::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::PoseState), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
