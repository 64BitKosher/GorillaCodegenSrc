// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.InputSystem.InputActionProperty
#include "UnityEngine/InputSystem/InputActionProperty.hpp"
// Including type: UnityEngine.InputSystem.InputAction/CallbackContext
#include "UnityEngine/InputSystem/InputAction_CallbackContext.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Graphic
  class Graphic;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Canvas
  class Canvas;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: Mouse
  class Mouse;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine::InputSystem::UI
namespace UnityEngine::InputSystem::UI {
  // Skipping declaration: CursorMode because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.UI
namespace UnityEngine::InputSystem::UI {
  // Forward declaring type: VirtualMouseInput
  class VirtualMouseInput;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::UI::VirtualMouseInput);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::UI::VirtualMouseInput*, "UnityEngine.InputSystem.UI", "VirtualMouseInput");
// Type namespace: UnityEngine.InputSystem.UI
namespace UnityEngine::InputSystem::UI {
  // Size: 0x120
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.UI.VirtualMouseInput
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class VirtualMouseInput : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::UnityEngine::InputSystem::UI::VirtualMouseInput::CursorMode
    struct CursorMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.UI.VirtualMouseInput/CursorMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct CursorMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: CursorMode
      constexpr CursorMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.UI.VirtualMouseInput/CursorMode SoftwareCursor
      static constexpr const int SoftwareCursor = 0;
      // Get static field: static public UnityEngine.InputSystem.UI.VirtualMouseInput/CursorMode SoftwareCursor
      static ::UnityEngine::InputSystem::UI::VirtualMouseInput::CursorMode _get_SoftwareCursor();
      // Set static field: static public UnityEngine.InputSystem.UI.VirtualMouseInput/CursorMode SoftwareCursor
      static void _set_SoftwareCursor(::UnityEngine::InputSystem::UI::VirtualMouseInput::CursorMode value);
      // static field const value: static public UnityEngine.InputSystem.UI.VirtualMouseInput/CursorMode HardwareCursorIfAvailable
      static constexpr const int HardwareCursorIfAvailable = 1;
      // Get static field: static public UnityEngine.InputSystem.UI.VirtualMouseInput/CursorMode HardwareCursorIfAvailable
      static ::UnityEngine::InputSystem::UI::VirtualMouseInput::CursorMode _get_HardwareCursorIfAvailable();
      // Set static field: static public UnityEngine.InputSystem.UI.VirtualMouseInput/CursorMode HardwareCursorIfAvailable
      static void _set_HardwareCursorIfAvailable(::UnityEngine::InputSystem::UI::VirtualMouseInput::CursorMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.UI.VirtualMouseInput/CursorMode
    #pragma pack(pop)
    static check_size<sizeof(VirtualMouseInput::CursorMode), 0 + sizeof(int)> __UnityEngine_InputSystem_UI_VirtualMouseInput_CursorModeSizeCheck;
    static_assert(sizeof(VirtualMouseInput::CursorMode) == 0x4);
    public:
    // private UnityEngine.InputSystem.UI.VirtualMouseInput/CursorMode m_CursorMode
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::InputSystem::UI::VirtualMouseInput::CursorMode m_CursorMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::UI::VirtualMouseInput::CursorMode) == 0x4);
    // Padding between fields: m_CursorMode and: m_CursorGraphic
    char __padding0[0x4] = {};
    // private UnityEngine.UI.Graphic m_CursorGraphic
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Graphic* m_CursorGraphic;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Graphic*) == 0x8);
    // private UnityEngine.RectTransform m_CursorTransform
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::RectTransform* m_CursorTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private System.Single m_CursorSpeed
    // Size: 0x4
    // Offset: 0x38
    float m_CursorSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ScrollSpeed
    // Size: 0x4
    // Offset: 0x3C
    float m_ScrollSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.InputSystem.InputActionProperty m_StickAction
    // Size: 0x18
    // Offset: 0x40
    ::UnityEngine::InputSystem::InputActionProperty m_StickAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.InputSystem.InputActionProperty m_LeftButtonAction
    // Size: 0x18
    // Offset: 0x58
    ::UnityEngine::InputSystem::InputActionProperty m_LeftButtonAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.InputSystem.InputActionProperty m_MiddleButtonAction
    // Size: 0x18
    // Offset: 0x70
    ::UnityEngine::InputSystem::InputActionProperty m_MiddleButtonAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.InputSystem.InputActionProperty m_RightButtonAction
    // Size: 0x18
    // Offset: 0x88
    ::UnityEngine::InputSystem::InputActionProperty m_RightButtonAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.InputSystem.InputActionProperty m_ForwardButtonAction
    // Size: 0x18
    // Offset: 0xA0
    ::UnityEngine::InputSystem::InputActionProperty m_ForwardButtonAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.InputSystem.InputActionProperty m_BackButtonAction
    // Size: 0x18
    // Offset: 0xB8
    ::UnityEngine::InputSystem::InputActionProperty m_BackButtonAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.InputSystem.InputActionProperty m_ScrollWheelAction
    // Size: 0x18
    // Offset: 0xD0
    ::UnityEngine::InputSystem::InputActionProperty m_ScrollWheelAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.Canvas m_Canvas
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Canvas* m_Canvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::Canvas*) == 0x8);
    // private UnityEngine.InputSystem.Mouse m_VirtualMouse
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::InputSystem::Mouse* m_VirtualMouse;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Mouse*) == 0x8);
    // private UnityEngine.InputSystem.Mouse m_SystemMouse
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::InputSystem::Mouse* m_SystemMouse;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Mouse*) == 0x8);
    // private System.Action m_AfterInputUpdateDelegate
    // Size: 0x8
    // Offset: 0x100
    ::System::Action* m_AfterInputUpdateDelegate;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action`1<UnityEngine.InputSystem.InputAction/CallbackContext> m_ButtonActionTriggeredDelegate
    // Size: 0x8
    // Offset: 0x108
    ::System::Action_1<::UnityEngine::InputSystem::InputAction_CallbackContext>* m_ButtonActionTriggeredDelegate;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::InputSystem::InputAction_CallbackContext>*) == 0x8);
    // private System.Double m_LastTime
    // Size: 0x8
    // Offset: 0x110
    double m_LastTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private UnityEngine.Vector2 m_LastStickValue
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Vector2 m_LastStickValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.InputSystem.UI.VirtualMouseInput/CursorMode m_CursorMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::UI::VirtualMouseInput::CursorMode& dyn_m_CursorMode();
    // Get instance field reference: private UnityEngine.UI.Graphic m_CursorGraphic
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Graphic*& dyn_m_CursorGraphic();
    // Get instance field reference: private UnityEngine.RectTransform m_CursorTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_m_CursorTransform();
    // Get instance field reference: private System.Single m_CursorSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_CursorSpeed();
    // Get instance field reference: private System.Single m_ScrollSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_ScrollSpeed();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_StickAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_StickAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_LeftButtonAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_LeftButtonAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_MiddleButtonAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_MiddleButtonAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_RightButtonAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_RightButtonAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_ForwardButtonAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_ForwardButtonAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_BackButtonAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_BackButtonAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_ScrollWheelAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_ScrollWheelAction();
    // Get instance field reference: private UnityEngine.Canvas m_Canvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::Canvas*& dyn_m_Canvas();
    // Get instance field reference: private UnityEngine.InputSystem.Mouse m_VirtualMouse
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Mouse*& dyn_m_VirtualMouse();
    // Get instance field reference: private UnityEngine.InputSystem.Mouse m_SystemMouse
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Mouse*& dyn_m_SystemMouse();
    // Get instance field reference: private System.Action m_AfterInputUpdateDelegate
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_m_AfterInputUpdateDelegate();
    // Get instance field reference: private System.Action`1<UnityEngine.InputSystem.InputAction/CallbackContext> m_ButtonActionTriggeredDelegate
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::InputSystem::InputAction_CallbackContext>*& dyn_m_ButtonActionTriggeredDelegate();
    // Get instance field reference: private System.Double m_LastTime
    [[deprecated("Use field access instead!")]] double& dyn_m_LastTime();
    // Get instance field reference: private UnityEngine.Vector2 m_LastStickValue
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_LastStickValue();
    // public UnityEngine.RectTransform get_cursorTransform()
    // Offset: 0x513872C
    ::UnityEngine::RectTransform* get_cursorTransform();
    // public System.Void set_cursorTransform(UnityEngine.RectTransform value)
    // Offset: 0x5138734
    void set_cursorTransform(::UnityEngine::RectTransform* value);
    // public System.Single get_cursorSpeed()
    // Offset: 0x513873C
    float get_cursorSpeed();
    // public System.Void set_cursorSpeed(System.Single value)
    // Offset: 0x5138744
    void set_cursorSpeed(float value);
    // public UnityEngine.InputSystem.UI.VirtualMouseInput/CursorMode get_cursorMode()
    // Offset: 0x513874C
    ::UnityEngine::InputSystem::UI::VirtualMouseInput::CursorMode get_cursorMode();
    // public System.Void set_cursorMode(UnityEngine.InputSystem.UI.VirtualMouseInput/CursorMode value)
    // Offset: 0x5138754
    void set_cursorMode(::UnityEngine::InputSystem::UI::VirtualMouseInput::CursorMode value);
    // public UnityEngine.UI.Graphic get_cursorGraphic()
    // Offset: 0x5138A90
    ::UnityEngine::UI::Graphic* get_cursorGraphic();
    // public System.Void set_cursorGraphic(UnityEngine.UI.Graphic value)
    // Offset: 0x5138A98
    void set_cursorGraphic(::UnityEngine::UI::Graphic* value);
    // public System.Single get_scrollSpeed()
    // Offset: 0x5138B18
    float get_scrollSpeed();
    // public System.Void set_scrollSpeed(System.Single value)
    // Offset: 0x5138B20
    void set_scrollSpeed(float value);
    // public UnityEngine.InputSystem.Mouse get_virtualMouse()
    // Offset: 0x5138B28
    ::UnityEngine::InputSystem::Mouse* get_virtualMouse();
    // public UnityEngine.InputSystem.InputActionProperty get_stickAction()
    // Offset: 0x5138B30
    ::UnityEngine::InputSystem::InputActionProperty get_stickAction();
    // public System.Void set_stickAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0x5138B44
    void set_stickAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_leftButtonAction()
    // Offset: 0x5138CA8
    ::UnityEngine::InputSystem::InputActionProperty get_leftButtonAction();
    // public System.Void set_leftButtonAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0x5138CBC
    void set_leftButtonAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_rightButtonAction()
    // Offset: 0x5138DBC
    ::UnityEngine::InputSystem::InputActionProperty get_rightButtonAction();
    // public System.Void set_rightButtonAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0x5138DD0
    void set_rightButtonAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_middleButtonAction()
    // Offset: 0x5138E60
    ::UnityEngine::InputSystem::InputActionProperty get_middleButtonAction();
    // public System.Void set_middleButtonAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0x5138E74
    void set_middleButtonAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_forwardButtonAction()
    // Offset: 0x5138F04
    ::UnityEngine::InputSystem::InputActionProperty get_forwardButtonAction();
    // public System.Void set_forwardButtonAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0x5138F18
    void set_forwardButtonAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_backButtonAction()
    // Offset: 0x5138FA8
    ::UnityEngine::InputSystem::InputActionProperty get_backButtonAction();
    // public System.Void set_backButtonAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0x5138FBC
    void set_backButtonAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_scrollWheelAction()
    // Offset: 0x513904C
    ::UnityEngine::InputSystem::InputActionProperty get_scrollWheelAction();
    // public System.Void set_scrollWheelAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0x5139060
    void set_scrollWheelAction(::UnityEngine::InputSystem::InputActionProperty value);
    // protected System.Void OnEnable()
    // Offset: 0x5139090
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x51394D0
    void OnDisable();
    // private System.Void TryFindCanvas()
    // Offset: 0x5138AB4
    void TryFindCanvas();
    // private System.Void TryEnableHardwareCursor()
    // Offset: 0x513886C
    void TryEnableHardwareCursor();
    // private System.Void UpdateMotion()
    // Offset: 0x513971C
    void UpdateMotion();
    // private System.Void OnButtonActionTriggered(UnityEngine.InputSystem.InputAction/CallbackContext context)
    // Offset: 0x5139AB8
    void OnButtonActionTriggered(::UnityEngine::InputSystem::InputAction_CallbackContext context);
    // static private System.Void SetActionCallback(UnityEngine.InputSystem.InputActionProperty field, System.Action`1<UnityEngine.InputSystem.InputAction/CallbackContext> callback, System.Boolean install)
    // Offset: 0x5138D4C
    static void SetActionCallback(::UnityEngine::InputSystem::InputActionProperty field, ::System::Action_1<::UnityEngine::InputSystem::InputAction_CallbackContext>* callback, bool install);
    // static private System.Void SetAction(ref UnityEngine.InputSystem.InputActionProperty field, UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0x5138B74
    static void SetAction(ByRef<::UnityEngine::InputSystem::InputActionProperty> field, ::UnityEngine::InputSystem::InputActionProperty value);
    // private System.Void OnAfterInputUpdate()
    // Offset: 0x5139CB0
    void OnAfterInputUpdate();
    // public System.Void .ctor()
    // Offset: 0x5139CB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VirtualMouseInput* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::UI::VirtualMouseInput::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VirtualMouseInput*, creationType>()));
    }
  }; // UnityEngine.InputSystem.UI.VirtualMouseInput
  #pragma pack(pop)
  static check_size<sizeof(VirtualMouseInput), 280 + sizeof(::UnityEngine::Vector2)> __UnityEngine_InputSystem_UI_VirtualMouseInputSizeCheck;
  static_assert(sizeof(VirtualMouseInput) == 0x120);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::UI::VirtualMouseInput::CursorMode, "UnityEngine.InputSystem.UI", "VirtualMouseInput/CursorMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::get_cursorTransform
// Il2CppName: get_cursorTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::get_cursorTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "get_cursorTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::set_cursorTransform
// Il2CppName: set_cursorTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)(::UnityEngine::RectTransform*)>(&UnityEngine::InputSystem::UI::VirtualMouseInput::set_cursorTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "set_cursorTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::get_cursorSpeed
// Il2CppName: get_cursorSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::get_cursorSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "get_cursorSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::set_cursorSpeed
// Il2CppName: set_cursorSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)(float)>(&UnityEngine::InputSystem::UI::VirtualMouseInput::set_cursorSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "set_cursorSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::get_cursorMode
// Il2CppName: get_cursorMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::UI::VirtualMouseInput::CursorMode (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::get_cursorMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "get_cursorMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::set_cursorMode
// Il2CppName: set_cursorMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)(::UnityEngine::InputSystem::UI::VirtualMouseInput::CursorMode)>(&UnityEngine::InputSystem::UI::VirtualMouseInput::set_cursorMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.UI", "VirtualMouseInput/CursorMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "set_cursorMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::get_cursorGraphic
// Il2CppName: get_cursorGraphic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Graphic* (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::get_cursorGraphic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "get_cursorGraphic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::set_cursorGraphic
// Il2CppName: set_cursorGraphic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)(::UnityEngine::UI::Graphic*)>(&UnityEngine::InputSystem::UI::VirtualMouseInput::set_cursorGraphic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Graphic")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "set_cursorGraphic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::get_scrollSpeed
// Il2CppName: get_scrollSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::get_scrollSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "get_scrollSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::set_scrollSpeed
// Il2CppName: set_scrollSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)(float)>(&UnityEngine::InputSystem::UI::VirtualMouseInput::set_scrollSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "set_scrollSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::get_virtualMouse
// Il2CppName: get_virtualMouse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Mouse* (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::get_virtualMouse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "get_virtualMouse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::get_stickAction
// Il2CppName: get_stickAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::get_stickAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "get_stickAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::set_stickAction
// Il2CppName: set_stickAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::InputSystem::UI::VirtualMouseInput::set_stickAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "set_stickAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::get_leftButtonAction
// Il2CppName: get_leftButtonAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::get_leftButtonAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "get_leftButtonAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::set_leftButtonAction
// Il2CppName: set_leftButtonAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::InputSystem::UI::VirtualMouseInput::set_leftButtonAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "set_leftButtonAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::get_rightButtonAction
// Il2CppName: get_rightButtonAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::get_rightButtonAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "get_rightButtonAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::set_rightButtonAction
// Il2CppName: set_rightButtonAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::InputSystem::UI::VirtualMouseInput::set_rightButtonAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "set_rightButtonAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::get_middleButtonAction
// Il2CppName: get_middleButtonAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::get_middleButtonAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "get_middleButtonAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::set_middleButtonAction
// Il2CppName: set_middleButtonAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::InputSystem::UI::VirtualMouseInput::set_middleButtonAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "set_middleButtonAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::get_forwardButtonAction
// Il2CppName: get_forwardButtonAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::get_forwardButtonAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "get_forwardButtonAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::set_forwardButtonAction
// Il2CppName: set_forwardButtonAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::InputSystem::UI::VirtualMouseInput::set_forwardButtonAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "set_forwardButtonAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::get_backButtonAction
// Il2CppName: get_backButtonAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::get_backButtonAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "get_backButtonAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::set_backButtonAction
// Il2CppName: set_backButtonAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::InputSystem::UI::VirtualMouseInput::set_backButtonAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "set_backButtonAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::get_scrollWheelAction
// Il2CppName: get_scrollWheelAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::get_scrollWheelAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "get_scrollWheelAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::set_scrollWheelAction
// Il2CppName: set_scrollWheelAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::InputSystem::UI::VirtualMouseInput::set_scrollWheelAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "set_scrollWheelAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::TryFindCanvas
// Il2CppName: TryFindCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::TryFindCanvas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "TryFindCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::TryEnableHardwareCursor
// Il2CppName: TryEnableHardwareCursor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::TryEnableHardwareCursor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "TryEnableHardwareCursor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::UpdateMotion
// Il2CppName: UpdateMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::UpdateMotion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "UpdateMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::OnButtonActionTriggered
// Il2CppName: OnButtonActionTriggered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)(::UnityEngine::InputSystem::InputAction_CallbackContext)>(&UnityEngine::InputSystem::UI::VirtualMouseInput::OnButtonActionTriggered)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction/CallbackContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "OnButtonActionTriggered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::SetActionCallback
// Il2CppName: SetActionCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::InputSystem::InputActionProperty, ::System::Action_1<::UnityEngine::InputSystem::InputAction_CallbackContext>*, bool)>(&UnityEngine::InputSystem::UI::VirtualMouseInput::SetActionCallback)> {
  static const MethodInfo* get() {
    static auto* field = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction/CallbackContext")})->byval_arg;
    static auto* install = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "SetActionCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{field, callback, install});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::SetAction
// Il2CppName: SetAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::InputSystem::InputActionProperty>, ::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::InputSystem::UI::VirtualMouseInput::SetAction)> {
  static const MethodInfo* get() {
    static auto* field = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "SetAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{field, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::OnAfterInputUpdate
// Il2CppName: OnAfterInputUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::VirtualMouseInput::*)()>(&UnityEngine::InputSystem::UI::VirtualMouseInput::OnAfterInputUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::VirtualMouseInput*), "OnAfterInputUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::VirtualMouseInput::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
