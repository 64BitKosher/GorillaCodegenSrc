// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData/FramePressState
#include "UnityEngine/EventSystems/PointerEventData_FramePressState.hpp"
// Including type: UnityEngine.EventSystems.RaycastResult
#include "UnityEngine/EventSystems/RaycastResult.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::UI
namespace UnityEngine::InputSystem::UI {
  // Forward declaring type: ExtendedPointerEventData
  class ExtendedPointerEventData;
  // Forward declaring type: UIPointerType
  struct UIPointerType;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Skipping declaration: PointerEventData because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.UI
namespace UnityEngine::InputSystem::UI {
  // Forward declaring type: PointerModel
  struct PointerModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::UI::PointerModel, "UnityEngine.InputSystem.UI", "PointerModel");
// Type namespace: UnityEngine.InputSystem.UI
namespace UnityEngine::InputSystem::UI {
  // Size: 0x21C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.UI.PointerModel
  // [TokenAttribute] Offset: FFFFFFFF
  struct PointerModel/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::UI::PointerModel::ButtonState
    struct ButtonState;
    // Size: 0x93
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.UI.PointerModel/ButtonState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ButtonState/*, public ::System::ValueType*/ {
      public:
      public:
      // private System.Boolean m_IsPressed
      // Size: 0x1
      // Offset: 0x0
      bool m_IsPressed;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: m_IsPressed and: m_FramePressState
      char __padding0[0x3] = {};
      // private UnityEngine.EventSystems.PointerEventData/FramePressState m_FramePressState
      // Size: 0x4
      // Offset: 0x4
      ::UnityEngine::EventSystems::PointerEventData::FramePressState m_FramePressState;
      // Field size check
      static_assert(sizeof(::UnityEngine::EventSystems::PointerEventData::FramePressState) == 0x4);
      // private System.Single m_PressTime
      // Size: 0x4
      // Offset: 0x8
      float m_PressTime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // Padding between fields: m_PressTime and: m_PressRaycast
      char __padding2[0x4] = {};
      // private UnityEngine.EventSystems.RaycastResult m_PressRaycast
      // Size: 0x50
      // Offset: 0x10
      ::UnityEngine::EventSystems::RaycastResult m_PressRaycast;
      // Field size check
      static_assert(sizeof(::UnityEngine::EventSystems::RaycastResult) == 0x50);
      // private UnityEngine.GameObject m_PressObject
      // Size: 0x8
      // Offset: 0x60
      ::UnityEngine::GameObject* m_PressObject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private UnityEngine.GameObject m_RawPressObject
      // Size: 0x8
      // Offset: 0x68
      ::UnityEngine::GameObject* m_RawPressObject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private UnityEngine.GameObject m_LastPressObject
      // Size: 0x8
      // Offset: 0x70
      ::UnityEngine::GameObject* m_LastPressObject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private UnityEngine.GameObject m_DragObject
      // Size: 0x8
      // Offset: 0x78
      ::UnityEngine::GameObject* m_DragObject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private UnityEngine.Vector2 m_PressPosition
      // Size: 0x8
      // Offset: 0x80
      ::UnityEngine::Vector2 m_PressPosition;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
      // private System.Single m_ClickTime
      // Size: 0x4
      // Offset: 0x88
      float m_ClickTime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private System.Int32 m_ClickCount
      // Size: 0x4
      // Offset: 0x8C
      int m_ClickCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Boolean m_Dragging
      // Size: 0x1
      // Offset: 0x90
      bool m_Dragging;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // private System.Boolean m_ClickedOnSameGameObject
      // Size: 0x1
      // Offset: 0x91
      bool m_ClickedOnSameGameObject;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // private System.Boolean m_IgnoreNextClick
      // Size: 0x1
      // Offset: 0x92
      bool m_IgnoreNextClick;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: ButtonState
      constexpr ButtonState(bool m_IsPressed_ = {}, ::UnityEngine::EventSystems::PointerEventData::FramePressState m_FramePressState_ = {}, float m_PressTime_ = {}, ::UnityEngine::EventSystems::RaycastResult m_PressRaycast_ = {}, ::UnityEngine::GameObject* m_PressObject_ = {}, ::UnityEngine::GameObject* m_RawPressObject_ = {}, ::UnityEngine::GameObject* m_LastPressObject_ = {}, ::UnityEngine::GameObject* m_DragObject_ = {}, ::UnityEngine::Vector2 m_PressPosition_ = {}, float m_ClickTime_ = {}, int m_ClickCount_ = {}, bool m_Dragging_ = {}, bool m_ClickedOnSameGameObject_ = {}, bool m_IgnoreNextClick_ = {}) noexcept : m_IsPressed{m_IsPressed_}, m_FramePressState{m_FramePressState_}, m_PressTime{m_PressTime_}, m_PressRaycast{m_PressRaycast_}, m_PressObject{m_PressObject_}, m_RawPressObject{m_RawPressObject_}, m_LastPressObject{m_LastPressObject_}, m_DragObject{m_DragObject_}, m_PressPosition{m_PressPosition_}, m_ClickTime{m_ClickTime_}, m_ClickCount{m_ClickCount_}, m_Dragging{m_Dragging_}, m_ClickedOnSameGameObject{m_ClickedOnSameGameObject_}, m_IgnoreNextClick{m_IgnoreNextClick_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private System.Boolean m_IsPressed
      [[deprecated("Use field access instead!")]] bool& dyn_m_IsPressed();
      // Get instance field reference: private UnityEngine.EventSystems.PointerEventData/FramePressState m_FramePressState
      [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::PointerEventData::FramePressState& dyn_m_FramePressState();
      // Get instance field reference: private System.Single m_PressTime
      [[deprecated("Use field access instead!")]] float& dyn_m_PressTime();
      // Get instance field reference: private UnityEngine.EventSystems.RaycastResult m_PressRaycast
      [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::RaycastResult& dyn_m_PressRaycast();
      // Get instance field reference: private UnityEngine.GameObject m_PressObject
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_PressObject();
      // Get instance field reference: private UnityEngine.GameObject m_RawPressObject
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_RawPressObject();
      // Get instance field reference: private UnityEngine.GameObject m_LastPressObject
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_LastPressObject();
      // Get instance field reference: private UnityEngine.GameObject m_DragObject
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_DragObject();
      // Get instance field reference: private UnityEngine.Vector2 m_PressPosition
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_PressPosition();
      // Get instance field reference: private System.Single m_ClickTime
      [[deprecated("Use field access instead!")]] float& dyn_m_ClickTime();
      // Get instance field reference: private System.Int32 m_ClickCount
      [[deprecated("Use field access instead!")]] int& dyn_m_ClickCount();
      // Get instance field reference: private System.Boolean m_Dragging
      [[deprecated("Use field access instead!")]] bool& dyn_m_Dragging();
      // Get instance field reference: private System.Boolean m_ClickedOnSameGameObject
      [[deprecated("Use field access instead!")]] bool& dyn_m_ClickedOnSameGameObject();
      // Get instance field reference: private System.Boolean m_IgnoreNextClick
      [[deprecated("Use field access instead!")]] bool& dyn_m_IgnoreNextClick();
      // public System.Boolean get_isPressed()
      // Offset: 0x51378E0
      bool get_isPressed();
      // public System.Void set_isPressed(System.Boolean value)
      // Offset: 0x5136980
      void set_isPressed(bool value);
      // public System.Boolean get_ignoreNextClick()
      // Offset: 0x51378E8
      bool get_ignoreNextClick();
      // public System.Void set_ignoreNextClick(System.Boolean value)
      // Offset: 0x51378F0
      void set_ignoreNextClick(bool value);
      // public System.Single get_pressTime()
      // Offset: 0x51378FC
      float get_pressTime();
      // public System.Void set_pressTime(System.Single value)
      // Offset: 0x5137904
      void set_pressTime(float value);
      // public System.Boolean get_clickedOnSameGameObject()
      // Offset: 0x513790C
      bool get_clickedOnSameGameObject();
      // public System.Void set_clickedOnSameGameObject(System.Boolean value)
      // Offset: 0x5137914
      void set_clickedOnSameGameObject(bool value);
      // public System.Boolean get_wasPressedThisFrame()
      // Offset: 0x51333FC
      bool get_wasPressedThisFrame();
      // public System.Boolean get_wasReleasedThisFrame()
      // Offset: 0x5132D24
      bool get_wasReleasedThisFrame();
      // public System.Void CopyPressStateTo(UnityEngine.EventSystems.PointerEventData eventData)
      // Offset: 0x5131DDC
      void CopyPressStateTo(::UnityEngine::EventSystems::PointerEventData* eventData);
      // public System.Void CopyPressStateFrom(UnityEngine.EventSystems.PointerEventData eventData)
      // Offset: 0x513340C
      void CopyPressStateFrom(::UnityEngine::EventSystems::PointerEventData* eventData);
      // public System.Void OnEndFrame()
      // Offset: 0x51378D4
      void OnEndFrame();
    }; // UnityEngine.InputSystem.UI.PointerModel/ButtonState
    #pragma pack(pop)
    static check_size<sizeof(PointerModel::ButtonState), 146 + sizeof(bool)> __UnityEngine_InputSystem_UI_PointerModel_ButtonStateSizeCheck;
    static_assert(sizeof(PointerModel::ButtonState) == 0x93);
    public:
    // public System.Boolean changedThisFrame
    // Size: 0x1
    // Offset: 0x0
    bool changedThisFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: changedThisFrame and: leftButton
    char __padding0[0x7] = {};
    // public UnityEngine.InputSystem.UI.PointerModel/ButtonState leftButton
    // Size: 0x93
    // Offset: 0x8
    ::UnityEngine::InputSystem::UI::PointerModel::ButtonState leftButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::UI::PointerModel::ButtonState) == 0x93);
    // Padding between fields: leftButton and: rightButton
    char __padding1[0x5] = {};
    // public UnityEngine.InputSystem.UI.PointerModel/ButtonState rightButton
    // Size: 0x93
    // Offset: 0xA0
    ::UnityEngine::InputSystem::UI::PointerModel::ButtonState rightButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::UI::PointerModel::ButtonState) == 0x93);
    // Padding between fields: rightButton and: middleButton
    char __padding2[0x5] = {};
    // public UnityEngine.InputSystem.UI.PointerModel/ButtonState middleButton
    // Size: 0x93
    // Offset: 0x138
    ::UnityEngine::InputSystem::UI::PointerModel::ButtonState middleButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::UI::PointerModel::ButtonState) == 0x93);
    // Padding between fields: middleButton and: eventData
    char __padding3[0x5] = {};
    // public UnityEngine.InputSystem.UI.ExtendedPointerEventData eventData
    // Size: 0x8
    // Offset: 0x1D0
    ::UnityEngine::InputSystem::UI::ExtendedPointerEventData* eventData;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::UI::ExtendedPointerEventData*) == 0x8);
    // private UnityEngine.Vector2 m_ScreenPosition
    // Size: 0x8
    // Offset: 0x1D8
    ::UnityEngine::Vector2 m_ScreenPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 m_ScrollDelta
    // Size: 0x8
    // Offset: 0x1E0
    ::UnityEngine::Vector2 m_ScrollDelta;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector3 m_WorldPosition
    // Size: 0xC
    // Offset: 0x1E8
    ::UnityEngine::Vector3 m_WorldPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion m_WorldOrientation
    // Size: 0x10
    // Offset: 0x1F4
    ::UnityEngine::Quaternion m_WorldOrientation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Single m_Pressure
    // Size: 0x4
    // Offset: 0x204
    float m_Pressure;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_AzimuthAngle
    // Size: 0x4
    // Offset: 0x208
    float m_AzimuthAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_AltitudeAngle
    // Size: 0x4
    // Offset: 0x20C
    float m_AltitudeAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Twist
    // Size: 0x4
    // Offset: 0x210
    float m_Twist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 m_Radius
    // Size: 0x8
    // Offset: 0x214
    ::UnityEngine::Vector2 m_Radius;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Creating value type constructor for type: PointerModel
    constexpr PointerModel(bool changedThisFrame_ = {}, ::UnityEngine::InputSystem::UI::PointerModel::ButtonState leftButton_ = {}, ::UnityEngine::InputSystem::UI::PointerModel::ButtonState rightButton_ = {}, ::UnityEngine::InputSystem::UI::PointerModel::ButtonState middleButton_ = {}, ::UnityEngine::InputSystem::UI::ExtendedPointerEventData* eventData_ = {}, ::UnityEngine::Vector2 m_ScreenPosition_ = {}, ::UnityEngine::Vector2 m_ScrollDelta_ = {}, ::UnityEngine::Vector3 m_WorldPosition_ = {}, ::UnityEngine::Quaternion m_WorldOrientation_ = {}, float m_Pressure_ = {}, float m_AzimuthAngle_ = {}, float m_AltitudeAngle_ = {}, float m_Twist_ = {}, ::UnityEngine::Vector2 m_Radius_ = {}) noexcept : changedThisFrame{changedThisFrame_}, leftButton{leftButton_}, rightButton{rightButton_}, middleButton{middleButton_}, eventData{eventData_}, m_ScreenPosition{m_ScreenPosition_}, m_ScrollDelta{m_ScrollDelta_}, m_WorldPosition{m_WorldPosition_}, m_WorldOrientation{m_WorldOrientation_}, m_Pressure{m_Pressure_}, m_AzimuthAngle{m_AzimuthAngle_}, m_AltitudeAngle{m_AltitudeAngle_}, m_Twist{m_Twist_}, m_Radius{m_Radius_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Boolean changedThisFrame
    [[deprecated("Use field access instead!")]] bool& dyn_changedThisFrame();
    // Get instance field reference: public UnityEngine.InputSystem.UI.PointerModel/ButtonState leftButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::UI::PointerModel::ButtonState& dyn_leftButton();
    // Get instance field reference: public UnityEngine.InputSystem.UI.PointerModel/ButtonState rightButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::UI::PointerModel::ButtonState& dyn_rightButton();
    // Get instance field reference: public UnityEngine.InputSystem.UI.PointerModel/ButtonState middleButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::UI::PointerModel::ButtonState& dyn_middleButton();
    // Get instance field reference: public UnityEngine.InputSystem.UI.ExtendedPointerEventData eventData
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::UI::ExtendedPointerEventData*& dyn_eventData();
    // Get instance field reference: private UnityEngine.Vector2 m_ScreenPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_ScreenPosition();
    // Get instance field reference: private UnityEngine.Vector2 m_ScrollDelta
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_ScrollDelta();
    // Get instance field reference: private UnityEngine.Vector3 m_WorldPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_WorldPosition();
    // Get instance field reference: private UnityEngine.Quaternion m_WorldOrientation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_WorldOrientation();
    // Get instance field reference: private System.Single m_Pressure
    [[deprecated("Use field access instead!")]] float& dyn_m_Pressure();
    // Get instance field reference: private System.Single m_AzimuthAngle
    [[deprecated("Use field access instead!")]] float& dyn_m_AzimuthAngle();
    // Get instance field reference: private System.Single m_AltitudeAngle
    [[deprecated("Use field access instead!")]] float& dyn_m_AltitudeAngle();
    // Get instance field reference: private System.Single m_Twist
    [[deprecated("Use field access instead!")]] float& dyn_m_Twist();
    // Get instance field reference: private UnityEngine.Vector2 m_Radius
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_Radius();
    // public UnityEngine.InputSystem.UI.UIPointerType get_pointerType()
    // Offset: 0x5131EF8
    ::UnityEngine::InputSystem::UI::UIPointerType get_pointerType();
    // public UnityEngine.Vector2 get_screenPosition()
    // Offset: 0x51377AC
    ::UnityEngine::Vector2 get_screenPosition();
    // public System.Void set_screenPosition(UnityEngine.Vector2 value)
    // Offset: 0x51362A0
    void set_screenPosition(::UnityEngine::Vector2 value);
    // public UnityEngine.Vector3 get_worldPosition()
    // Offset: 0x51377B8
    ::UnityEngine::Vector3 get_worldPosition();
    // public System.Void set_worldPosition(UnityEngine.Vector3 value)
    // Offset: 0x5136E24
    void set_worldPosition(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_worldOrientation()
    // Offset: 0x51377C8
    ::UnityEngine::Quaternion get_worldOrientation();
    // public System.Void set_worldOrientation(UnityEngine.Quaternion value)
    // Offset: 0x5136D48
    void set_worldOrientation(::UnityEngine::Quaternion value);
    // public UnityEngine.Vector2 get_scrollDelta()
    // Offset: 0x51377DC
    ::UnityEngine::Vector2 get_scrollDelta();
    // public System.Void set_scrollDelta(UnityEngine.Vector2 value)
    // Offset: 0x5136C24
    void set_scrollDelta(::UnityEngine::Vector2 value);
    // public System.Single get_pressure()
    // Offset: 0x51377E8
    float get_pressure();
    // public System.Void set_pressure(System.Single value)
    // Offset: 0x51377F0
    void set_pressure(float value);
    // public System.Single get_azimuthAngle()
    // Offset: 0x5137810
    float get_azimuthAngle();
    // public System.Void set_azimuthAngle(System.Single value)
    // Offset: 0x5137818
    void set_azimuthAngle(float value);
    // public System.Single get_altitudeAngle()
    // Offset: 0x5137838
    float get_altitudeAngle();
    // public System.Void set_altitudeAngle(System.Single value)
    // Offset: 0x5137840
    void set_altitudeAngle(float value);
    // public System.Single get_twist()
    // Offset: 0x5137860
    float get_twist();
    // public System.Void set_twist(System.Single value)
    // Offset: 0x5137868
    void set_twist(float value);
    // public UnityEngine.Vector2 get_radius()
    // Offset: 0x5137888
    ::UnityEngine::Vector2 get_radius();
    // public System.Void set_radius(UnityEngine.Vector2 value)
    // Offset: 0x5137894
    void set_radius(::UnityEngine::Vector2 value);
    // public System.Void .ctor(UnityEngine.InputSystem.UI.ExtendedPointerEventData eventData)
    // Offset: 0x51362E0
    PointerModel(::UnityEngine::InputSystem::UI::ExtendedPointerEventData* eventData);
    // public System.Void OnFrameFinished()
    // Offset: 0x5137030
    void OnFrameFinished();
    // public System.Void CopyTouchOrPenStateFrom(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x5137078
    void CopyTouchOrPenStateFrom(::UnityEngine::EventSystems::PointerEventData* eventData);
  }; // UnityEngine.InputSystem.UI.PointerModel
  #pragma pack(pop)
  static check_size<sizeof(PointerModel), 532 + sizeof(::UnityEngine::Vector2)> __UnityEngine_InputSystem_UI_PointerModelSizeCheck;
  static_assert(sizeof(PointerModel) == 0x21C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::UI::PointerModel::ButtonState, "UnityEngine.InputSystem.UI", "PointerModel/ButtonState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::get_pointerType
// Il2CppName: get_pointerType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::UI::UIPointerType (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::get_pointerType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "get_pointerType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::get_screenPosition
// Il2CppName: get_screenPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::get_screenPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "get_screenPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::set_screenPosition
// Il2CppName: set_screenPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)(::UnityEngine::Vector2)>(&UnityEngine::InputSystem::UI::PointerModel::set_screenPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "set_screenPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::get_worldPosition
// Il2CppName: get_worldPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::get_worldPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "get_worldPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::set_worldPosition
// Il2CppName: set_worldPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)(::UnityEngine::Vector3)>(&UnityEngine::InputSystem::UI::PointerModel::set_worldPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "set_worldPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::get_worldOrientation
// Il2CppName: get_worldOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::get_worldOrientation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "get_worldOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::set_worldOrientation
// Il2CppName: set_worldOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)(::UnityEngine::Quaternion)>(&UnityEngine::InputSystem::UI::PointerModel::set_worldOrientation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "set_worldOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::get_scrollDelta
// Il2CppName: get_scrollDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::get_scrollDelta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "get_scrollDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::set_scrollDelta
// Il2CppName: set_scrollDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)(::UnityEngine::Vector2)>(&UnityEngine::InputSystem::UI::PointerModel::set_scrollDelta)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "set_scrollDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::get_pressure
// Il2CppName: get_pressure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::get_pressure)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "get_pressure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::set_pressure
// Il2CppName: set_pressure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)(float)>(&UnityEngine::InputSystem::UI::PointerModel::set_pressure)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "set_pressure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::get_azimuthAngle
// Il2CppName: get_azimuthAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::get_azimuthAngle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "get_azimuthAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::set_azimuthAngle
// Il2CppName: set_azimuthAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)(float)>(&UnityEngine::InputSystem::UI::PointerModel::set_azimuthAngle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "set_azimuthAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::get_altitudeAngle
// Il2CppName: get_altitudeAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::get_altitudeAngle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "get_altitudeAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::set_altitudeAngle
// Il2CppName: set_altitudeAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)(float)>(&UnityEngine::InputSystem::UI::PointerModel::set_altitudeAngle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "set_altitudeAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::get_twist
// Il2CppName: get_twist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::get_twist)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "get_twist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::set_twist
// Il2CppName: set_twist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)(float)>(&UnityEngine::InputSystem::UI::PointerModel::set_twist)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "set_twist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::get_radius
// Il2CppName: get_radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::get_radius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "get_radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::set_radius
// Il2CppName: set_radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)(::UnityEngine::Vector2)>(&UnityEngine::InputSystem::UI::PointerModel::set_radius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "set_radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::PointerModel
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::OnFrameFinished
// Il2CppName: OnFrameFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::OnFrameFinished)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "OnFrameFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::CopyTouchOrPenStateFrom
// Il2CppName: CopyTouchOrPenStateFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)(::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::InputSystem::UI::PointerModel::CopyTouchOrPenStateFrom)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "CopyTouchOrPenStateFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
