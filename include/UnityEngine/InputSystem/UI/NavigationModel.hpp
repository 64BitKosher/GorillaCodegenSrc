// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.EventSystems.MoveDirection
#include "UnityEngine/EventSystems/MoveDirection.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: AxisEventData
  class AxisEventData;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.UI
namespace UnityEngine::InputSystem::UI {
  // Forward declaring type: NavigationModel
  struct NavigationModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::UI::NavigationModel, "UnityEngine.InputSystem.UI", "NavigationModel");
// Type namespace: UnityEngine.InputSystem.UI
namespace UnityEngine::InputSystem::UI {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.UI.NavigationModel
  // [TokenAttribute] Offset: FFFFFFFF
  struct NavigationModel/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector2 move
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Vector2 move;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Int32 consecutiveMoveCount
    // Size: 0x4
    // Offset: 0x8
    int consecutiveMoveCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.EventSystems.MoveDirection lastMoveDirection
    // Size: 0x4
    // Offset: 0xC
    ::UnityEngine::EventSystems::MoveDirection lastMoveDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventSystems::MoveDirection) == 0x4);
    // public System.Single lastMoveTime
    // Size: 0x4
    // Offset: 0x10
    float lastMoveTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastMoveTime and: eventData
    char __padding3[0x4] = {};
    // public UnityEngine.EventSystems.AxisEventData eventData
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::EventSystems::AxisEventData* eventData;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventSystems::AxisEventData*) == 0x8);
    public:
    // Creating value type constructor for type: NavigationModel
    constexpr NavigationModel(::UnityEngine::Vector2 move_ = {}, int consecutiveMoveCount_ = {}, ::UnityEngine::EventSystems::MoveDirection lastMoveDirection_ = {}, float lastMoveTime_ = {}, ::UnityEngine::EventSystems::AxisEventData* eventData_ = {}) noexcept : move{move_}, consecutiveMoveCount{consecutiveMoveCount_}, lastMoveDirection{lastMoveDirection_}, lastMoveTime{lastMoveTime_}, eventData{eventData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector2 move
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_move();
    // Get instance field reference: public System.Int32 consecutiveMoveCount
    [[deprecated("Use field access instead!")]] int& dyn_consecutiveMoveCount();
    // Get instance field reference: public UnityEngine.EventSystems.MoveDirection lastMoveDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::MoveDirection& dyn_lastMoveDirection();
    // Get instance field reference: public System.Single lastMoveTime
    [[deprecated("Use field access instead!")]] float& dyn_lastMoveTime();
    // Get instance field reference: public UnityEngine.EventSystems.AxisEventData eventData
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::AxisEventData*& dyn_eventData();
    // public System.Void Reset()
    // Offset: 0x5134C3C
    void Reset();
  }; // UnityEngine.InputSystem.UI.NavigationModel
  #pragma pack(pop)
  static check_size<sizeof(NavigationModel), 24 + sizeof(::UnityEngine::EventSystems::AxisEventData*)> __UnityEngine_InputSystem_UI_NavigationModelSizeCheck;
  static_assert(sizeof(NavigationModel) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::NavigationModel::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::NavigationModel::*)()>(&UnityEngine::InputSystem::UI::NavigationModel::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::NavigationModel), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
