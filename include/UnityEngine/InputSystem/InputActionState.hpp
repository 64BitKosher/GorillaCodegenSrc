// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor
#include "UnityEngine/InputSystem/LowLevel/IInputStateChangeMonitor.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEventPtr
#include "UnityEngine/InputSystem/LowLevel/InputEventPtr.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.InputSystem.InputAction/CallbackContext
#include "UnityEngine/InputSystem/InputAction_CallbackContext.hpp"
// Including type: UnityEngine.InputSystem.Utilities.InlinedArray`1
#include "UnityEngine/InputSystem/Utilities/InlinedArray_1.hpp"
// Including type: System.Runtime.InteropServices.GCHandle
#include "System/Runtime/InteropServices/GCHandle.hpp"
// Including type: UnityEngine.InputSystem.Utilities.CallbackArray`1
#include "UnityEngine/InputSystem/Utilities/CallbackArray_1.hpp"
// Including type: UnityEngine.InputSystem.InputActionChange
#include "UnityEngine/InputSystem/InputActionChange.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputBindingResolver
  struct InputBindingResolver;
  // Forward declaring type: InputActionMap
  class InputActionMap;
  // Forward declaring type: InputControl
  class InputControl;
  // Forward declaring type: IInputInteraction
  class IInputInteraction;
  // Forward declaring type: InputProcessor
  class InputProcessor;
  // Forward declaring type: InputBindingComposite
  class InputBindingComposite;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: InputControlList`1<TControl>
  template<typename TControl>
  struct InputControlList_1;
  // Skipping declaration: UnmanagedMemory because it is already included!
  // Forward declaring type: InputActionPhase
  struct InputActionPhase;
  // Forward declaring type: InputAction
  class InputAction;
  // Forward declaring type: InputBinding
  struct InputBinding;
  // Forward declaring type: InputControl`1<TValue>
  template<typename TValue>
  class InputControl_1;
  // Forward declaring type: InputDeviceChange
  struct InputDeviceChange;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputEvent
  struct InputEvent;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IComparer`1<T>
  template<typename T>
  class IComparer_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: ISavedState
  class ISavedState;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputActionState
  class InputActionState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::InputActionState);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputActionState*, "UnityEngine.InputSystem", "InputActionState");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0xE0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.InputActionState
  // [TokenAttribute] Offset: FFFFFFFF
  class InputActionState : public ::Il2CppObject/*, public ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor, public ::System::ICloneable, public ::System::IDisposable*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::InputActionState::InteractionState
    struct InteractionState;
    // Nested type: ::UnityEngine::InputSystem::InputActionState::BindingState
    struct BindingState;
    // Nested type: ::UnityEngine::InputSystem::InputActionState::TriggerState
    struct TriggerState;
    // Nested type: ::UnityEngine::InputSystem::InputActionState::ActionMapIndices
    struct ActionMapIndices;
    // Nested type: ::UnityEngine::InputSystem::InputActionState::UnmanagedMemory
    struct UnmanagedMemory;
    // Nested type: ::UnityEngine::InputSystem::InputActionState::GlobalState
    struct GlobalState;
    // Nested type: ::UnityEngine::InputSystem::InputActionState::$$c
    class $$c;
    // Size: 0x80
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.InputActionState/UnmanagedMemory
    // [TokenAttribute] Offset: FFFFFFFF
    struct UnmanagedMemory/*, public ::System::ValueType, public ::System::IDisposable*/ {
      public:
      public:
      // public System.Void* basePtr
      // Size: 0x8
      // Offset: 0x0
      void* basePtr;
      // Field size check
      static_assert(sizeof(void*) == 0x8);
      // public System.Int32 mapCount
      // Size: 0x4
      // Offset: 0x8
      int mapCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 actionCount
      // Size: 0x4
      // Offset: 0xC
      int actionCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 interactionCount
      // Size: 0x4
      // Offset: 0x10
      int interactionCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 bindingCount
      // Size: 0x4
      // Offset: 0x14
      int bindingCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 controlCount
      // Size: 0x4
      // Offset: 0x18
      int controlCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 compositeCount
      // Size: 0x4
      // Offset: 0x1C
      int compositeCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public UnityEngine.InputSystem.InputActionState/TriggerState* actionStates
      // Size: 0x8
      // Offset: 0x20
      ::UnityEngine::InputSystem::InputActionState::TriggerState* actionStates;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::InputActionState::TriggerState*) == 0x8);
      // public UnityEngine.InputSystem.InputActionState/BindingState* bindingStates
      // Size: 0x8
      // Offset: 0x28
      ::UnityEngine::InputSystem::InputActionState::BindingState* bindingStates;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::InputActionState::BindingState*) == 0x8);
      // public UnityEngine.InputSystem.InputActionState/InteractionState* interactionStates
      // Size: 0x8
      // Offset: 0x30
      ::UnityEngine::InputSystem::InputActionState::InteractionState* interactionStates;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::InputActionState::InteractionState*) == 0x8);
      // public System.Single* controlMagnitudes
      // Size: 0x8
      // Offset: 0x38
      float* controlMagnitudes;
      // Field size check
      static_assert(sizeof(float*) == 0x8);
      // public System.Single* compositeMagnitudes
      // Size: 0x8
      // Offset: 0x40
      float* compositeMagnitudes;
      // Field size check
      static_assert(sizeof(float*) == 0x8);
      // public System.Int32* enabledControls
      // Size: 0x8
      // Offset: 0x48
      int* enabledControls;
      // Field size check
      static_assert(sizeof(int*) == 0x8);
      // public System.UInt16* actionBindingIndicesAndCounts
      // Size: 0x8
      // Offset: 0x50
      uint16_t* actionBindingIndicesAndCounts;
      // Field size check
      static_assert(sizeof(uint16_t*) == 0x8);
      // public System.UInt16* actionBindingIndices
      // Size: 0x8
      // Offset: 0x58
      uint16_t* actionBindingIndices;
      // Field size check
      static_assert(sizeof(uint16_t*) == 0x8);
      // public System.Int32* controlIndexToBindingIndex
      // Size: 0x8
      // Offset: 0x60
      int* controlIndexToBindingIndex;
      // Field size check
      static_assert(sizeof(int*) == 0x8);
      // public System.UInt16* controlGroupingAndComplexity
      // Size: 0x8
      // Offset: 0x68
      uint16_t* controlGroupingAndComplexity;
      // Field size check
      static_assert(sizeof(uint16_t*) == 0x8);
      // public System.Boolean controlGroupingInitialized
      // Size: 0x1
      // Offset: 0x70
      bool controlGroupingInitialized;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: controlGroupingInitialized and: mapIndices
      char __padding17[0x7] = {};
      // public UnityEngine.InputSystem.InputActionState/ActionMapIndices* mapIndices
      // Size: 0x8
      // Offset: 0x78
      ::UnityEngine::InputSystem::InputActionState::ActionMapIndices* mapIndices;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::InputActionState::ActionMapIndices*) == 0x8);
      public:
      // Creating value type constructor for type: UnmanagedMemory
      constexpr UnmanagedMemory(void* basePtr_ = {}, int mapCount_ = {}, int actionCount_ = {}, int interactionCount_ = {}, int bindingCount_ = {}, int controlCount_ = {}, int compositeCount_ = {}, ::UnityEngine::InputSystem::InputActionState::TriggerState* actionStates_ = {}, ::UnityEngine::InputSystem::InputActionState::BindingState* bindingStates_ = {}, ::UnityEngine::InputSystem::InputActionState::InteractionState* interactionStates_ = {}, float* controlMagnitudes_ = {}, float* compositeMagnitudes_ = {}, int* enabledControls_ = {}, uint16_t* actionBindingIndicesAndCounts_ = {}, uint16_t* actionBindingIndices_ = {}, int* controlIndexToBindingIndex_ = {}, uint16_t* controlGroupingAndComplexity_ = {}, bool controlGroupingInitialized_ = {}, ::UnityEngine::InputSystem::InputActionState::ActionMapIndices* mapIndices_ = {}) noexcept : basePtr{basePtr_}, mapCount{mapCount_}, actionCount{actionCount_}, interactionCount{interactionCount_}, bindingCount{bindingCount_}, controlCount{controlCount_}, compositeCount{compositeCount_}, actionStates{actionStates_}, bindingStates{bindingStates_}, interactionStates{interactionStates_}, controlMagnitudes{controlMagnitudes_}, compositeMagnitudes{compositeMagnitudes_}, enabledControls{enabledControls_}, actionBindingIndicesAndCounts{actionBindingIndicesAndCounts_}, actionBindingIndices{actionBindingIndices_}, controlIndexToBindingIndex{controlIndexToBindingIndex_}, controlGroupingAndComplexity{controlGroupingAndComplexity_}, controlGroupingInitialized{controlGroupingInitialized_}, mapIndices{mapIndices_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::IDisposable
      operator ::System::IDisposable() noexcept {
        return *reinterpret_cast<::System::IDisposable*>(this);
      }
      // Get instance field reference: public System.Void* basePtr
      [[deprecated("Use field access instead!")]] void*& dyn_basePtr();
      // Get instance field reference: public System.Int32 mapCount
      [[deprecated("Use field access instead!")]] int& dyn_mapCount();
      // Get instance field reference: public System.Int32 actionCount
      [[deprecated("Use field access instead!")]] int& dyn_actionCount();
      // Get instance field reference: public System.Int32 interactionCount
      [[deprecated("Use field access instead!")]] int& dyn_interactionCount();
      // Get instance field reference: public System.Int32 bindingCount
      [[deprecated("Use field access instead!")]] int& dyn_bindingCount();
      // Get instance field reference: public System.Int32 controlCount
      [[deprecated("Use field access instead!")]] int& dyn_controlCount();
      // Get instance field reference: public System.Int32 compositeCount
      [[deprecated("Use field access instead!")]] int& dyn_compositeCount();
      // Get instance field reference: public UnityEngine.InputSystem.InputActionState/TriggerState* actionStates
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionState::TriggerState*& dyn_actionStates();
      // Get instance field reference: public UnityEngine.InputSystem.InputActionState/BindingState* bindingStates
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionState::BindingState*& dyn_bindingStates();
      // Get instance field reference: public UnityEngine.InputSystem.InputActionState/InteractionState* interactionStates
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionState::InteractionState*& dyn_interactionStates();
      // Get instance field reference: public System.Single* controlMagnitudes
      [[deprecated("Use field access instead!")]] float*& dyn_controlMagnitudes();
      // Get instance field reference: public System.Single* compositeMagnitudes
      [[deprecated("Use field access instead!")]] float*& dyn_compositeMagnitudes();
      // Get instance field reference: public System.Int32* enabledControls
      [[deprecated("Use field access instead!")]] int*& dyn_enabledControls();
      // Get instance field reference: public System.UInt16* actionBindingIndicesAndCounts
      [[deprecated("Use field access instead!")]] uint16_t*& dyn_actionBindingIndicesAndCounts();
      // Get instance field reference: public System.UInt16* actionBindingIndices
      [[deprecated("Use field access instead!")]] uint16_t*& dyn_actionBindingIndices();
      // Get instance field reference: public System.Int32* controlIndexToBindingIndex
      [[deprecated("Use field access instead!")]] int*& dyn_controlIndexToBindingIndex();
      // Get instance field reference: public System.UInt16* controlGroupingAndComplexity
      [[deprecated("Use field access instead!")]] uint16_t*& dyn_controlGroupingAndComplexity();
      // Get instance field reference: public System.Boolean controlGroupingInitialized
      [[deprecated("Use field access instead!")]] bool& dyn_controlGroupingInitialized();
      // Get instance field reference: public UnityEngine.InputSystem.InputActionState/ActionMapIndices* mapIndices
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionState::ActionMapIndices*& dyn_mapIndices();
      // public System.Boolean get_isAllocated()
      // Offset: 0x50ACF30
      bool get_isAllocated();
      // public System.Int32 get_sizeInBytes()
      // Offset: 0x50ACF40
      int get_sizeInBytes();
      // public System.Void Allocate(System.Int32 mapCount, System.Int32 actionCount, System.Int32 bindingCount, System.Int32 controlCount, System.Int32 interactionCount, System.Int32 compositeCount)
      // Offset: 0x50ACF8C
      void Allocate(int mapCount, int actionCount, int bindingCount, int controlCount, int interactionCount, int compositeCount);
      // public System.Void Dispose()
      // Offset: 0x50A5F68
      void Dispose();
      // public System.Void CopyDataFrom(UnityEngine.InputSystem.InputActionState/UnmanagedMemory memory)
      // Offset: 0x50AD0B4
      void CopyDataFrom(::UnityEngine::InputSystem::InputActionState::UnmanagedMemory memory);
      // public UnityEngine.InputSystem.InputActionState/UnmanagedMemory Clone()
      // Offset: 0x50A6138
      ::UnityEngine::InputSystem::InputActionState::UnmanagedMemory Clone();
    }; // UnityEngine.InputSystem.InputActionState/UnmanagedMemory
    #pragma pack(pop)
    static check_size<sizeof(InputActionState::UnmanagedMemory), 120 + sizeof(::UnityEngine::InputSystem::InputActionState::ActionMapIndices*)> __UnityEngine_InputSystem_InputActionState_UnmanagedMemorySizeCheck;
    static_assert(sizeof(InputActionState::UnmanagedMemory) == 0x80);
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.InputActionState/GlobalState
    // [TokenAttribute] Offset: FFFFFFFF
    struct GlobalState/*, public ::System::ValueType*/ {
      public:
      public:
      // UnityEngine.InputSystem.Utilities.InlinedArray`1<System.Runtime.InteropServices.GCHandle> globalList
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::System::Runtime::InteropServices::GCHandle> globalList;
      // UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action`2<System.Object,UnityEngine.InputSystem.InputActionChange>> onActionChange
      // Size: 0xFFFFFFFF
      // Offset: 0x18
      ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_2<::Il2CppObject*, ::UnityEngine::InputSystem::InputActionChange>*> onActionChange;
      // UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action`1<System.Object>> onActionControlsChanged
      // Size: 0xFFFFFFFF
      // Offset: 0x68
      ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_1<::Il2CppObject*>*> onActionControlsChanged;
      public:
      // Creating value type constructor for type: GlobalState
      constexpr GlobalState(::UnityEngine::InputSystem::Utilities::InlinedArray_1<::System::Runtime::InteropServices::GCHandle> globalList_ = {}, ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_2<::Il2CppObject*, ::UnityEngine::InputSystem::InputActionChange>*> onActionChange_ = {}, ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_1<::Il2CppObject*>*> onActionControlsChanged_ = {}) noexcept : globalList{globalList_}, onActionChange{onActionChange_}, onActionControlsChanged{onActionControlsChanged_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: UnityEngine.InputSystem.Utilities.InlinedArray`1<System.Runtime.InteropServices.GCHandle> globalList
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::System::Runtime::InteropServices::GCHandle>& dyn_globalList();
      // Get instance field reference: UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action`2<System.Object,UnityEngine.InputSystem.InputActionChange>> onActionChange
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_2<::Il2CppObject*, ::UnityEngine::InputSystem::InputActionChange>*>& dyn_onActionChange();
      // Get instance field reference: UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action`1<System.Object>> onActionControlsChanged
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_1<::Il2CppObject*>*>& dyn_onActionControlsChanged();
    }; // UnityEngine.InputSystem.InputActionState/GlobalState
    // WARNING Not writing size check since size may be invalid!
    public:
    // public UnityEngine.InputSystem.InputActionMap[] maps
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::InputSystem::InputActionMap*> maps;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputActionMap*>) == 0x8);
    // public UnityEngine.InputSystem.InputControl[] controls
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::InputSystem::InputControl*> controls;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputControl*>) == 0x8);
    // public UnityEngine.InputSystem.IInputInteraction[] interactions
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::InputSystem::IInputInteraction*> interactions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::IInputInteraction*>) == 0x8);
    // public UnityEngine.InputSystem.InputProcessor[] processors
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::InputSystem::InputProcessor*> processors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputProcessor*>) == 0x8);
    // public UnityEngine.InputSystem.InputBindingComposite[] composites
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::InputSystem::InputBindingComposite*> composites;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputBindingComposite*>) == 0x8);
    // public System.Int32 totalProcessorCount
    // Size: 0x4
    // Offset: 0x38
    int totalProcessorCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: totalProcessorCount and: memory
    char __padding5[0x4] = {};
    // public UnityEngine.InputSystem.InputActionState/UnmanagedMemory memory
    // Size: 0x80
    // Offset: 0x40
    ::UnityEngine::InputSystem::InputActionState::UnmanagedMemory memory;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionState::UnmanagedMemory) == 0x80);
    // private System.Boolean m_OnBeforeUpdateHooked
    // Size: 0x1
    // Offset: 0xC0
    bool m_OnBeforeUpdateHooked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_OnAfterUpdateHooked
    // Size: 0x1
    // Offset: 0xC1
    bool m_OnAfterUpdateHooked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_InProcessControlStateChange
    // Size: 0x1
    // Offset: 0xC2
    bool m_InProcessControlStateChange;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_InProcessControlStateChange and: m_CurrentlyProcessingThisEvent
    char __padding9[0x5] = {};
    // private UnityEngine.InputSystem.LowLevel.InputEventPtr m_CurrentlyProcessingThisEvent
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::InputSystem::LowLevel::InputEventPtr m_CurrentlyProcessingThisEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputEventPtr) == 0x8);
    // private System.Action m_OnBeforeUpdateDelegate
    // Size: 0x8
    // Offset: 0xD0
    ::System::Action* m_OnBeforeUpdateDelegate;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action m_OnAfterUpdateDelegate
    // Size: 0x8
    // Offset: 0xD8
    ::System::Action* m_OnAfterUpdateDelegate;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor
    operator ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor*>(this);
    }
    // Creating interface conversion operator: operator ::System::ICloneable
    operator ::System::ICloneable() noexcept {
      return *reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // static field const value: static public System.Int32 kInvalidIndex
    static constexpr const int kInvalidIndex = -1;
    // Get static field: static public System.Int32 kInvalidIndex
    static int _get_kInvalidIndex();
    // Set static field: static public System.Int32 kInvalidIndex
    static void _set_kInvalidIndex(int value);
    // Get static field: static UnityEngine.InputSystem.InputActionState/GlobalState s_GlobalState
    static ::UnityEngine::InputSystem::InputActionState::GlobalState _get_s_GlobalState();
    // Set static field: static UnityEngine.InputSystem.InputActionState/GlobalState s_GlobalState
    static void _set_s_GlobalState(::UnityEngine::InputSystem::InputActionState::GlobalState value);
    // Get instance field reference: public UnityEngine.InputSystem.InputActionMap[] maps
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputActionMap*>& dyn_maps();
    // Get instance field reference: public UnityEngine.InputSystem.InputControl[] controls
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputControl*>& dyn_controls();
    // Get instance field reference: public UnityEngine.InputSystem.IInputInteraction[] interactions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::IInputInteraction*>& dyn_interactions();
    // Get instance field reference: public UnityEngine.InputSystem.InputProcessor[] processors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputProcessor*>& dyn_processors();
    // Get instance field reference: public UnityEngine.InputSystem.InputBindingComposite[] composites
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputBindingComposite*>& dyn_composites();
    // Get instance field reference: public System.Int32 totalProcessorCount
    [[deprecated("Use field access instead!")]] int& dyn_totalProcessorCount();
    // Get instance field reference: public UnityEngine.InputSystem.InputActionState/UnmanagedMemory memory
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionState::UnmanagedMemory& dyn_memory();
    // Get instance field reference: private System.Boolean m_OnBeforeUpdateHooked
    [[deprecated("Use field access instead!")]] bool& dyn_m_OnBeforeUpdateHooked();
    // Get instance field reference: private System.Boolean m_OnAfterUpdateHooked
    [[deprecated("Use field access instead!")]] bool& dyn_m_OnAfterUpdateHooked();
    // Get instance field reference: private System.Boolean m_InProcessControlStateChange
    [[deprecated("Use field access instead!")]] bool& dyn_m_InProcessControlStateChange();
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.InputEventPtr m_CurrentlyProcessingThisEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputEventPtr& dyn_m_CurrentlyProcessingThisEvent();
    // Get instance field reference: private System.Action m_OnBeforeUpdateDelegate
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_m_OnBeforeUpdateDelegate();
    // Get instance field reference: private System.Action m_OnAfterUpdateDelegate
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_m_OnAfterUpdateDelegate();
    // public System.Int32 get_totalCompositeCount()
    // Offset: 0x50A56A8
    int get_totalCompositeCount();
    // public System.Int32 get_totalMapCount()
    // Offset: 0x50A56B0
    int get_totalMapCount();
    // public System.Int32 get_totalActionCount()
    // Offset: 0x50A56B8
    int get_totalActionCount();
    // public System.Int32 get_totalBindingCount()
    // Offset: 0x50A56C0
    int get_totalBindingCount();
    // public System.Int32 get_totalInteractionCount()
    // Offset: 0x50A56C8
    int get_totalInteractionCount();
    // public System.Int32 get_totalControlCount()
    // Offset: 0x50A56D0
    int get_totalControlCount();
    // public UnityEngine.InputSystem.InputActionState/ActionMapIndices* get_mapIndices()
    // Offset: 0x50A56D8
    ::UnityEngine::InputSystem::InputActionState::ActionMapIndices* get_mapIndices();
    // public UnityEngine.InputSystem.InputActionState/TriggerState* get_actionStates()
    // Offset: 0x50A56E0
    ::UnityEngine::InputSystem::InputActionState::TriggerState* get_actionStates();
    // public UnityEngine.InputSystem.InputActionState/BindingState* get_bindingStates()
    // Offset: 0x50A56E8
    ::UnityEngine::InputSystem::InputActionState::BindingState* get_bindingStates();
    // public UnityEngine.InputSystem.InputActionState/InteractionState* get_interactionStates()
    // Offset: 0x50A56F0
    ::UnityEngine::InputSystem::InputActionState::InteractionState* get_interactionStates();
    // public System.Int32* get_controlIndexToBindingIndex()
    // Offset: 0x50A56F8
    int* get_controlIndexToBindingIndex();
    // public System.UInt16* get_controlGroupingAndComplexity()
    // Offset: 0x50A5700
    uint16_t* get_controlGroupingAndComplexity();
    // public System.Single* get_controlMagnitudes()
    // Offset: 0x50A5708
    float* get_controlMagnitudes();
    // public System.UInt32* get_enabledControls()
    // Offset: 0x50A5710
    uint* get_enabledControls();
    // public System.Boolean get_isProcessingControlStateChange()
    // Offset: 0x50A5718
    bool get_isProcessingControlStateChange();
    // public System.Void Initialize(UnityEngine.InputSystem.InputBindingResolver resolver)
    // Offset: 0x50A5720
    void Initialize(::UnityEngine::InputSystem::InputBindingResolver resolver);
    // private System.Void ComputeControlGroupingIfNecessary()
    // Offset: 0x50A58A0
    void ComputeControlGroupingIfNecessary();
    // public System.Void ClaimDataFrom(UnityEngine.InputSystem.InputBindingResolver resolver)
    // Offset: 0x50A575C
    void ClaimDataFrom(::UnityEngine::InputSystem::InputBindingResolver resolver);
    // public System.Void Dispose()
    // Offset: 0x50A5CA8
    void Dispose();
    // private System.Void Destroy(System.Boolean isFinalizing)
    // Offset: 0x50A5B04
    void Destroy(bool isFinalizing);
    // public UnityEngine.InputSystem.InputActionState Clone()
    // Offset: 0x50A5FA4
    ::UnityEngine::InputSystem::InputActionState* Clone();
    // private System.Object System.ICloneable.Clone()
    // Offset: 0x50A61D0
    ::Il2CppObject* System_ICloneable_Clone();
    // private System.Boolean IsUsingDevice(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x50A61D4
    bool IsUsingDevice(::UnityEngine::InputSystem::InputDevice* device);
    // private System.Boolean CanUseDevice(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x50A638C
    bool CanUseDevice(::UnityEngine::InputSystem::InputDevice* device);
    // public System.Boolean HasEnabledActions()
    // Offset: 0x50A65A4
    bool HasEnabledActions();
    // private System.Void FinishBindingCompositeSetups()
    // Offset: 0x50A661C
    void FinishBindingCompositeSetups();
    // System.Void PrepareForBindingReResolution(System.Boolean needFullResolve, ref UnityEngine.InputSystem.InputControlList`1<UnityEngine.InputSystem.InputControl> activeControls, ref System.Boolean hasEnabledActions)
    // Offset: 0x50A6704
    void PrepareForBindingReResolution(bool needFullResolve, ByRef<::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputControl*>> activeControls, ByRef<bool> hasEnabledActions);
    // public System.Void FinishBindingResolution(System.Boolean hasEnabledActions, UnityEngine.InputSystem.InputActionState/UnmanagedMemory oldMemory, UnityEngine.InputSystem.InputControlList`1<UnityEngine.InputSystem.InputControl> activeControls, System.Boolean isFullResolve)
    // Offset: 0x50A70E4
    void FinishBindingResolution(bool hasEnabledActions, ::UnityEngine::InputSystem::InputActionState::UnmanagedMemory oldMemory, ::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputControl*> activeControls, bool isFullResolve);
    // private System.Void RestoreActionStatesAfterReResolvingBindings(UnityEngine.InputSystem.InputActionState/UnmanagedMemory oldState, UnityEngine.InputSystem.InputControlList`1<UnityEngine.InputSystem.InputControl> activeControls, System.Boolean isFullResolve)
    // Offset: 0x50A716C
    void RestoreActionStatesAfterReResolvingBindings(::UnityEngine::InputSystem::InputActionState::UnmanagedMemory oldState, ::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputControl*> activeControls, bool isFullResolve);
    // private System.Boolean IsActiveControl(System.Int32 bindingIndex, System.Int32 controlIndex)
    // Offset: 0x50A7FBC
    bool IsActiveControl(int bindingIndex, int controlIndex);
    // private System.Int32 FindControlIndexOnBinding(System.Int32 bindingIndex, UnityEngine.InputSystem.InputControl control)
    // Offset: 0x50A79D8
    int FindControlIndexOnBinding(int bindingIndex, ::UnityEngine::InputSystem::InputControl* control);
    // private System.Void ResetActionStatesDrivenBy(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x50A8070
    void ResetActionStatesDrivenBy(::UnityEngine::InputSystem::InputDevice* device);
    // private System.Boolean IsActionBoundToControlFromDevice(UnityEngine.InputSystem.InputDevice device, System.Int32 actionIndex)
    // Offset: 0x50A82B0
    bool IsActionBoundToControlFromDevice(::UnityEngine::InputSystem::InputDevice* device, int actionIndex);
    // public System.Void ResetActionState(System.Int32 actionIndex, UnityEngine.InputSystem.InputActionPhase toPhase, System.Boolean hardReset)
    // Offset: 0x50A6E94
    void ResetActionState(int actionIndex, ::UnityEngine::InputSystem::InputActionPhase toPhase, bool hardReset);
    // public UnityEngine.InputSystem.InputActionState/TriggerState FetchActionState(UnityEngine.InputSystem.InputAction action)
    // Offset: 0x50A867C
    ::UnityEngine::InputSystem::InputActionState::TriggerState FetchActionState(::UnityEngine::InputSystem::InputAction* action);
    // public UnityEngine.InputSystem.InputActionState/ActionMapIndices FetchMapIndices(UnityEngine.InputSystem.InputActionMap map)
    // Offset: 0x50A86A0
    ::UnityEngine::InputSystem::InputActionState::ActionMapIndices FetchMapIndices(::UnityEngine::InputSystem::InputActionMap* map);
    // public System.Void EnableAllActions(UnityEngine.InputSystem.InputActionMap map)
    // Offset: 0x50A86D4
    void EnableAllActions(::UnityEngine::InputSystem::InputActionMap* map);
    // private System.Void EnableControls(UnityEngine.InputSystem.InputActionMap map)
    // Offset: 0x50A8780
    void EnableControls(::UnityEngine::InputSystem::InputActionMap* map);
    // public System.Void EnableSingleAction(UnityEngine.InputSystem.InputAction action)
    // Offset: 0x50A87C0
    void EnableSingleAction(::UnityEngine::InputSystem::InputAction* action);
    // private System.Void EnableControls(UnityEngine.InputSystem.InputAction action)
    // Offset: 0x50A8824
    void EnableControls(::UnityEngine::InputSystem::InputAction* action);
    // public System.Void DisableAllActions(UnityEngine.InputSystem.InputActionMap map)
    // Offset: 0x50A6C00
    void DisableAllActions(::UnityEngine::InputSystem::InputActionMap* map);
    // public System.Void DisableControls(UnityEngine.InputSystem.InputActionMap map)
    // Offset: 0x50A6FB0
    void DisableControls(::UnityEngine::InputSystem::InputActionMap* map);
    // public System.Void DisableSingleAction(UnityEngine.InputSystem.InputAction action)
    // Offset: 0x50A88D4
    void DisableSingleAction(::UnityEngine::InputSystem::InputAction* action);
    // private System.Void DisableControls(UnityEngine.InputSystem.InputAction action)
    // Offset: 0x50A892C
    void DisableControls(::UnityEngine::InputSystem::InputAction* action);
    // private System.Void EnableControls(System.Int32 mapIndex, System.Int32 controlStartIndex, System.Int32 numControls)
    // Offset: 0x50A7850
    void EnableControls(int mapIndex, int controlStartIndex, int numControls);
    // private System.Void DisableControls(System.Int32 mapIndex, System.Int32 controlStartIndex, System.Int32 numControls)
    // Offset: 0x50A5CB0
    void DisableControls(int mapIndex, int controlStartIndex, int numControls);
    // public System.Void SetInitialStateCheckPending(System.Int32 actionIndex, System.Boolean value)
    // Offset: 0x50A8AAC
    void SetInitialStateCheckPending(int actionIndex, bool value);
    // private System.Void SetInitialStateCheckPending(UnityEngine.InputSystem.InputActionState/BindingState* bindingStatePtr, System.Boolean value)
    // Offset: 0x50A8A28
    void SetInitialStateCheckPending(::UnityEngine::InputSystem::InputActionState::BindingState* bindingStatePtr, bool value);
    // private System.Boolean IsControlEnabled(System.Int32 controlIndex)
    // Offset: 0x50A89DC
    bool IsControlEnabled(int controlIndex);
    // private System.Void SetControlEnabled(System.Int32 controlIndex, System.Boolean state)
    // Offset: 0x50A8A74
    void SetControlEnabled(int controlIndex, bool state);
    // private System.Void HookOnBeforeUpdate()
    // Offset: 0x50A7DDC
    void HookOnBeforeUpdate();
    // private System.Void UnhookOnBeforeUpdate()
    // Offset: 0x50A8B40
    void UnhookOnBeforeUpdate();
    // private System.Void OnBeforeInitialUpdate()
    // Offset: 0x50A8BBC
    void OnBeforeInitialUpdate();
    // private System.Void UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyControlStateChanged(UnityEngine.InputSystem.InputControl control, System.Double time, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, System.Int64 mapControlAndBindingIndex)
    // Offset: 0x50A8DB8
    void UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyControlStateChanged(::UnityEngine::InputSystem::InputControl* control, double time, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr, int64_t mapControlAndBindingIndex);
    // private System.Void UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyTimerExpired(UnityEngine.InputSystem.InputControl control, System.Double time, System.Int64 mapControlAndBindingIndex, System.Int32 interactionIndex)
    // Offset: 0x50A938C
    void UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyTimerExpired(::UnityEngine::InputSystem::InputControl* control, double time, int64_t mapControlAndBindingIndex, int interactionIndex);
    // private System.Int64 ToCombinedMapAndControlAndBindingIndex(System.Int32 mapIndex, System.Int32 controlIndex, System.Int32 bindingIndex)
    // Offset: 0x50A8A00
    int64_t ToCombinedMapAndControlAndBindingIndex(int mapIndex, int controlIndex, int bindingIndex);
    // private System.Void SplitUpMapAndControlAndBindingIndex(System.Int64 mapControlAndBindingIndex, out System.Int32 mapIndex, out System.Int32 controlIndex, out System.Int32 bindingIndex)
    // Offset: 0x50A8DD0
    void SplitUpMapAndControlAndBindingIndex(int64_t mapControlAndBindingIndex, ByRef<int> mapIndex, ByRef<int> controlIndex, ByRef<int> bindingIndex);
    // static System.Int32 GetComplexityFromMonitorIndex(System.Int64 mapControlAndBindingIndex)
    // Offset: 0x50A95B0
    static int GetComplexityFromMonitorIndex(int64_t mapControlAndBindingIndex);
    // private System.Void ProcessControlStateChange(System.Int32 mapIndex, System.Int32 controlIndex, System.Int32 bindingIndex, System.Double time, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Offset: 0x50A8DEC
    void ProcessControlStateChange(int mapIndex, int controlIndex, int bindingIndex, double time, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr);
    // private System.Void ProcessButtonState(ref UnityEngine.InputSystem.InputActionState/TriggerState trigger, System.Int32 actionIndex, UnityEngine.InputSystem.InputActionState/BindingState* bindingStatePtr)
    // Offset: 0x50A9C10
    void ProcessButtonState(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState> trigger, int actionIndex, ::UnityEngine::InputSystem::InputActionState::BindingState* bindingStatePtr);
    // static private System.Boolean ShouldIgnoreInputOnCompositeBinding(UnityEngine.InputSystem.InputActionState/BindingState* binding, UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr)
    // Offset: 0x50A9604
    static bool ShouldIgnoreInputOnCompositeBinding(::UnityEngine::InputSystem::InputActionState::BindingState* binding, ::UnityEngine::InputSystem::LowLevel::InputEvent* eventPtr);
    // private System.Boolean IsConflictingInput(ref UnityEngine.InputSystem.InputActionState/TriggerState trigger, System.Int32 actionIndex)
    // Offset: 0x50A9800
    bool IsConflictingInput(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState> trigger, int actionIndex);
    // private System.UInt16 GetActionBindingStartIndexAndCount(System.Int32 actionIndex, out System.UInt16 bindingCount)
    // Offset: 0x50A8360
    uint16_t GetActionBindingStartIndexAndCount(int actionIndex, ByRef<uint16_t> bindingCount);
    // private System.Void ProcessDefaultInteraction(ref UnityEngine.InputSystem.InputActionState/TriggerState trigger, System.Int32 actionIndex)
    // Offset: 0x50A9DC8
    void ProcessDefaultInteraction(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState> trigger, int actionIndex);
    // private System.Void ProcessInteractions(ref UnityEngine.InputSystem.InputActionState/TriggerState trigger, System.Int32 interactionStartIndex, System.Int32 interactionCount)
    // Offset: 0x50A9650
    void ProcessInteractions(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState> trigger, int interactionStartIndex, int interactionCount);
    // private System.Void ProcessTimeout(System.Double time, System.Int32 mapIndex, System.Int32 controlIndex, System.Int32 bindingIndex, System.Int32 interactionIndex)
    // Offset: 0x50A93A4
    void ProcessTimeout(double time, int mapIndex, int controlIndex, int bindingIndex, int interactionIndex);
    // System.Void SetTotalTimeoutCompletionTime(System.Single seconds, ref UnityEngine.InputSystem.InputActionState/TriggerState trigger)
    // Offset: 0x50AA24C
    void SetTotalTimeoutCompletionTime(float seconds, ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState> trigger);
    // System.Void StartTimeout(System.Single seconds, ref UnityEngine.InputSystem.InputActionState/TriggerState trigger)
    // Offset: 0x50A7C84
    void StartTimeout(float seconds, ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState> trigger);
    // private System.Void StopTimeout(System.Int32 interactionIndex)
    // Offset: 0x50AA27C
    void StopTimeout(int interactionIndex);
    // System.Void ChangePhaseOfInteraction(UnityEngine.InputSystem.InputActionPhase newPhase, ref UnityEngine.InputSystem.InputActionState/TriggerState trigger, UnityEngine.InputSystem.InputActionPhase phaseAfterPerformed, System.Boolean processNextInteractionOnCancel)
    // Offset: 0x50AA340
    void ChangePhaseOfInteraction(::UnityEngine::InputSystem::InputActionPhase newPhase, ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState> trigger, ::UnityEngine::InputSystem::InputActionPhase phaseAfterPerformed, bool processNextInteractionOnCancel);
    // private System.Boolean ChangePhaseOfAction(UnityEngine.InputSystem.InputActionPhase newPhase, ref UnityEngine.InputSystem.InputActionState/TriggerState trigger, UnityEngine.InputSystem.InputActionPhase phaseAfterPerformedOrCanceled)
    // Offset: 0x50A8424
    bool ChangePhaseOfAction(::UnityEngine::InputSystem::InputActionPhase newPhase, ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState> trigger, ::UnityEngine::InputSystem::InputActionPhase phaseAfterPerformedOrCanceled);
    // private System.Void ChangePhaseOfActionInternal(System.Int32 actionIndex, UnityEngine.InputSystem.InputActionState/TriggerState* actionState, UnityEngine.InputSystem.InputActionPhase newPhase, ref UnityEngine.InputSystem.InputActionState/TriggerState trigger)
    // Offset: 0x50AA74C
    void ChangePhaseOfActionInternal(int actionIndex, ::UnityEngine::InputSystem::InputActionState::TriggerState* actionState, ::UnityEngine::InputSystem::InputActionPhase newPhase, ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState> trigger);
    // private System.Void CallActionListeners(System.Int32 actionIndex, UnityEngine.InputSystem.InputActionMap actionMap, UnityEngine.InputSystem.InputActionPhase phase, ref UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action`1<UnityEngine.InputSystem.InputAction/CallbackContext>> listeners, System.String callbackName)
    // Offset: 0x50AA9D0
    void CallActionListeners(int actionIndex, ::UnityEngine::InputSystem::InputActionMap* actionMap, ::UnityEngine::InputSystem::InputActionPhase phase, ByRef<::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_1<::UnityEngine::InputSystem::InputAction_CallbackContext>*>> listeners, ::StringW callbackName);
    // private System.Object GetActionOrNoneString(ref UnityEngine.InputSystem.InputActionState/TriggerState trigger)
    // Offset: 0x50AABA8
    ::Il2CppObject* GetActionOrNoneString(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState> trigger);
    // UnityEngine.InputSystem.InputAction GetActionOrNull(System.Int32 bindingIndex)
    // Offset: 0x50AACA0
    ::UnityEngine::InputSystem::InputAction* GetActionOrNull(int bindingIndex);
    // UnityEngine.InputSystem.InputAction GetActionOrNull(ref UnityEngine.InputSystem.InputActionState/TriggerState trigger)
    // Offset: 0x50AAC0C
    ::UnityEngine::InputSystem::InputAction* GetActionOrNull(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState> trigger);
    // UnityEngine.InputSystem.InputControl GetControl(ref UnityEngine.InputSystem.InputActionState/TriggerState trigger)
    // Offset: 0x50AAD34
    ::UnityEngine::InputSystem::InputControl* GetControl(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState> trigger);
    // private UnityEngine.InputSystem.IInputInteraction GetInteractionOrNull(ref UnityEngine.InputSystem.InputActionState/TriggerState trigger)
    // Offset: 0x50AAD74
    ::UnityEngine::InputSystem::IInputInteraction* GetInteractionOrNull(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState> trigger);
    // System.Int32 GetBindingIndexInMap(System.Int32 bindingIndex)
    // Offset: 0x50AADBC
    int GetBindingIndexInMap(int bindingIndex);
    // System.Int32 GetBindingIndexInState(System.Int32 mapIndex, System.Int32 bindingIndexInMap)
    // Offset: 0x50AADF8
    int GetBindingIndexInState(int mapIndex, int bindingIndexInMap);
    // UnityEngine.InputSystem.InputActionState/BindingState GetBindingState(System.Int32 bindingIndex)
    // Offset: 0x50AAE20
    ::UnityEngine::InputSystem::InputActionState::BindingState GetBindingState(int bindingIndex);
    // UnityEngine.InputSystem.InputBinding GetBinding(System.Int32 bindingIndex)
    // Offset: 0x50AAE30
    ::UnityEngine::InputSystem::InputBinding GetBinding(int bindingIndex);
    // UnityEngine.InputSystem.InputActionMap GetActionMap(System.Int32 bindingIndex)
    // Offset: 0x50AAEB0
    ::UnityEngine::InputSystem::InputActionMap* GetActionMap(int bindingIndex);
    // private System.Void ResetInteractionStateAndCancelIfNecessary(System.Int32 mapIndex, System.Int32 bindingIndex, System.Int32 interactionIndex)
    // Offset: 0x50A8380
    void ResetInteractionStateAndCancelIfNecessary(int mapIndex, int bindingIndex, int interactionIndex);
    // private System.Void ResetInteractionState(System.Int32 interactionIndex)
    // Offset: 0x50A6D3C
    void ResetInteractionState(int interactionIndex);
    // System.Int32 GetValueSizeInBytes(System.Int32 bindingIndex, System.Int32 controlIndex)
    // Offset: 0x50AAEF0
    int GetValueSizeInBytes(int bindingIndex, int controlIndex);
    // System.Type GetValueType(System.Int32 bindingIndex, System.Int32 controlIndex)
    // Offset: 0x50AAF84
    ::System::Type* GetValueType(int bindingIndex, int controlIndex);
    // static System.Boolean IsActuated(ref UnityEngine.InputSystem.InputActionState/TriggerState trigger, System.Single threshold)
    // Offset: 0x50AA194
    static bool IsActuated(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState> trigger, float threshold);
    // System.Void ReadValue(System.Int32 bindingIndex, System.Int32 controlIndex, System.Void* buffer, System.Int32 bufferSize, System.Boolean ignoreComposites)
    // Offset: 0x50AB018
    void ReadValue(int bindingIndex, int controlIndex, void* buffer, int bufferSize, bool ignoreComposites);
    // TValue ReadValue(System.Int32 bindingIndex, System.Int32 controlIndex, System.Boolean ignoreComposites)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    TValue ReadValue(int bindingIndex, int controlIndex, bool ignoreComposites) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputActionState::ReadValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingIndex), ::il2cpp_utils::ExtractType(controlIndex), ::il2cpp_utils::ExtractType(ignoreComposites)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___generic__method, bindingIndex, controlIndex, ignoreComposites);
    }
    // TValue ApplyProcessors(System.Int32 bindingIndex, TValue value, UnityEngine.InputSystem.InputControl`1<TValue> controlOfType)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    TValue ApplyProcessors(int bindingIndex, TValue value, ::UnityEngine::InputSystem::InputControl_1<TValue>* controlOfType) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputActionState::ApplyProcessors");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyProcessors", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingIndex), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(controlOfType)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___generic__method, bindingIndex, value, controlOfType);
    }
    // public System.Single EvaluateCompositePartMagnitude(System.Int32 bindingIndex, System.Int32 partNumber)
    // Offset: 0x50AB1BC
    float EvaluateCompositePartMagnitude(int bindingIndex, int partNumber);
    // System.Double GetCompositePartPressTime(System.Int32 bindingIndex, System.Int32 partNumber)
    // Offset: 0x50AB290
    double GetCompositePartPressTime(int bindingIndex, int partNumber);
    // TValue ReadCompositePartValue(System.Int32 bindingIndex, System.Int32 partNumber, System.Boolean* buttonValuePtr, out System.Int32 controlIndex, TComparer comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue, class TComparer>
    TValue ReadCompositePartValue(int bindingIndex, int partNumber, bool* buttonValuePtr, ByRef<int> controlIndex, TComparer comparer) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static_assert(std::is_convertible_v<std::remove_pointer_t<TComparer>, ::System::Collections::Generic::IComparer_1<TValue>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputActionState::ReadCompositePartValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadCompositePartValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TComparer>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingIndex), ::il2cpp_utils::ExtractType(partNumber), ::il2cpp_utils::ExtractType(buttonValuePtr), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(comparer)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TComparer>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___generic__method, bindingIndex, partNumber, buttonValuePtr, byref(controlIndex), comparer);
    }
    // System.Boolean ReadCompositePartValue(System.Int32 bindingIndex, System.Int32 partNumber, System.Void* buffer, System.Int32 bufferSize)
    // Offset: 0x50AB310
    bool ReadCompositePartValue(int bindingIndex, int partNumber, void* buffer, int bufferSize);
    // System.Object ReadCompositePartValueAsObject(System.Int32 bindingIndex, System.Int32 partNumber)
    // Offset: 0x50AB424
    ::Il2CppObject* ReadCompositePartValueAsObject(int bindingIndex, int partNumber);
    // System.Object ReadValueAsObject(System.Int32 bindingIndex, System.Int32 controlIndex, System.Boolean ignoreComposites)
    // Offset: 0x50AB520
    ::Il2CppObject* ReadValueAsObject(int bindingIndex, int controlIndex, bool ignoreComposites);
    // System.Boolean ReadValueAsButton(System.Int32 bindingIndex, System.Int32 controlIndex)
    // Offset: 0x50AB6AC
    bool ReadValueAsButton(int bindingIndex, int controlIndex);
    // static UnityEngine.InputSystem.Utilities.ISavedState SaveAndResetState()
    // Offset: 0x50AB7DC
    static ::UnityEngine::InputSystem::Utilities::ISavedState* SaveAndResetState();
    // private System.Void AddToGlobalList()
    // Offset: 0x50A5818
    void AddToGlobalList();
    // private System.Void RemoveMapFromGlobalList()
    // Offset: 0x50A5E30
    void RemoveMapFromGlobalList();
    // static private System.Void CompactGlobalList()
    // Offset: 0x50AB9CC
    static void CompactGlobalList();
    // System.Void NotifyListenersOfActionChange(UnityEngine.InputSystem.InputActionChange change)
    // Offset: 0x50A6FF0
    void NotifyListenersOfActionChange(::UnityEngine::InputSystem::InputActionChange change);
    // static System.Void NotifyListenersOfActionChange(UnityEngine.InputSystem.InputActionChange change, System.Object actionOrMapOrAsset)
    // Offset: 0x50A7EBC
    static void NotifyListenersOfActionChange(::UnityEngine::InputSystem::InputActionChange change, ::Il2CppObject* actionOrMapOrAsset);
    // static private System.Void ResetGlobals()
    // Offset: 0x50ABB34
    static void ResetGlobals();
    // static System.Int32 FindAllEnabledActions(System.Collections.Generic.List`1<UnityEngine.InputSystem.InputAction> result)
    // Offset: 0x50ABDC8
    static int FindAllEnabledActions(::System::Collections::Generic::List_1<::UnityEngine::InputSystem::InputAction*>* result);
    // static System.Void OnDeviceChange(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.InputDeviceChange change)
    // Offset: 0x50AC07C
    static void OnDeviceChange(::UnityEngine::InputSystem::InputDevice* device, ::UnityEngine::InputSystem::InputDeviceChange change);
    // static System.Void DeferredResolutionOfBindings()
    // Offset: 0x50AC394
    static void DeferredResolutionOfBindings();
    // static System.Void DisableAllActions()
    // Offset: 0x50AC628
    static void DisableAllActions();
    // static System.Void DestroyAllActionMapStates()
    // Offset: 0x50ABC58
    static void DestroyAllActionMapStates();
    // public System.Void .ctor()
    // Offset: 0x50A6130
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputActionState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputActionState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputActionState*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x50A5A6C
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // UnityEngine.InputSystem.InputActionState
  #pragma pack(pop)
  static check_size<sizeof(InputActionState), 216 + sizeof(::System::Action*)> __UnityEngine_InputSystem_InputActionStateSizeCheck;
  static_assert(sizeof(InputActionState) == 0xE0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputActionState::GlobalState, "UnityEngine.InputSystem", "InputActionState/GlobalState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputActionState::UnmanagedMemory, "UnityEngine.InputSystem", "InputActionState/UnmanagedMemory");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::get_totalCompositeCount
// Il2CppName: get_totalCompositeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::get_totalCompositeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "get_totalCompositeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::get_totalMapCount
// Il2CppName: get_totalMapCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::get_totalMapCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "get_totalMapCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::get_totalActionCount
// Il2CppName: get_totalActionCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::get_totalActionCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "get_totalActionCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::get_totalBindingCount
// Il2CppName: get_totalBindingCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::get_totalBindingCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "get_totalBindingCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::get_totalInteractionCount
// Il2CppName: get_totalInteractionCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::get_totalInteractionCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "get_totalInteractionCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::get_totalControlCount
// Il2CppName: get_totalControlCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::get_totalControlCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "get_totalControlCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::get_mapIndices
// Il2CppName: get_mapIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionState::ActionMapIndices* (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::get_mapIndices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "get_mapIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::get_actionStates
// Il2CppName: get_actionStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionState::TriggerState* (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::get_actionStates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "get_actionStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::get_bindingStates
// Il2CppName: get_bindingStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionState::BindingState* (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::get_bindingStates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "get_bindingStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::get_interactionStates
// Il2CppName: get_interactionStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionState::InteractionState* (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::get_interactionStates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "get_interactionStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::get_controlIndexToBindingIndex
// Il2CppName: get_controlIndexToBindingIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int* (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::get_controlIndexToBindingIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "get_controlIndexToBindingIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::get_controlGroupingAndComplexity
// Il2CppName: get_controlGroupingAndComplexity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t* (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::get_controlGroupingAndComplexity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "get_controlGroupingAndComplexity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::get_controlMagnitudes
// Il2CppName: get_controlMagnitudes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float* (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::get_controlMagnitudes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "get_controlMagnitudes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::get_enabledControls
// Il2CppName: get_enabledControls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint* (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::get_enabledControls)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "get_enabledControls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::get_isProcessingControlStateChange
// Il2CppName: get_isProcessingControlStateChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::get_isProcessingControlStateChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "get_isProcessingControlStateChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputBindingResolver)>(&UnityEngine::InputSystem::InputActionState::Initialize)> {
  static const MethodInfo* get() {
    static auto* resolver = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputBindingResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resolver});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ComputeControlGroupingIfNecessary
// Il2CppName: ComputeControlGroupingIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::ComputeControlGroupingIfNecessary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ComputeControlGroupingIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ClaimDataFrom
// Il2CppName: ClaimDataFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputBindingResolver)>(&UnityEngine::InputSystem::InputActionState::ClaimDataFrom)> {
  static const MethodInfo* get() {
    static auto* resolver = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputBindingResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ClaimDataFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resolver});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(bool)>(&UnityEngine::InputSystem::InputActionState::Destroy)> {
  static const MethodInfo* get() {
    static auto* isFinalizing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isFinalizing});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionState* (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::System_ICloneable_Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::IsUsingDevice
// Il2CppName: IsUsingDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::InputActionState::IsUsingDevice)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "IsUsingDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::CanUseDevice
// Il2CppName: CanUseDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::InputActionState::CanUseDevice)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "CanUseDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::HasEnabledActions
// Il2CppName: HasEnabledActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::HasEnabledActions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "HasEnabledActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::FinishBindingCompositeSetups
// Il2CppName: FinishBindingCompositeSetups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::FinishBindingCompositeSetups)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "FinishBindingCompositeSetups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::PrepareForBindingReResolution
// Il2CppName: PrepareForBindingReResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(bool, ByRef<::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputControl*>>, ByRef<bool>)>(&UnityEngine::InputSystem::InputActionState::PrepareForBindingReResolution)> {
  static const MethodInfo* get() {
    static auto* needFullResolve = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* activeControls = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")})->this_arg;
    static auto* hasEnabledActions = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "PrepareForBindingReResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{needFullResolve, activeControls, hasEnabledActions});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::FinishBindingResolution
// Il2CppName: FinishBindingResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(bool, ::UnityEngine::InputSystem::InputActionState::UnmanagedMemory, ::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputControl*>, bool)>(&UnityEngine::InputSystem::InputActionState::FinishBindingResolution)> {
  static const MethodInfo* get() {
    static auto* hasEnabledActions = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* oldMemory = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/UnmanagedMemory")->byval_arg;
    static auto* activeControls = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")})->byval_arg;
    static auto* isFullResolve = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "FinishBindingResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hasEnabledActions, oldMemory, activeControls, isFullResolve});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::RestoreActionStatesAfterReResolvingBindings
// Il2CppName: RestoreActionStatesAfterReResolvingBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputActionState::UnmanagedMemory, ::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputControl*>, bool)>(&UnityEngine::InputSystem::InputActionState::RestoreActionStatesAfterReResolvingBindings)> {
  static const MethodInfo* get() {
    static auto* oldState = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/UnmanagedMemory")->byval_arg;
    static auto* activeControls = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")})->byval_arg;
    static auto* isFullResolve = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "RestoreActionStatesAfterReResolvingBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldState, activeControls, isFullResolve});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::IsActiveControl
// Il2CppName: IsActiveControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::*)(int, int)>(&UnityEngine::InputSystem::InputActionState::IsActiveControl)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "IsActiveControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex, controlIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::FindControlIndexOnBinding
// Il2CppName: FindControlIndexOnBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionState::*)(int, ::UnityEngine::InputSystem::InputControl*)>(&UnityEngine::InputSystem::InputActionState::FindControlIndexOnBinding)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "FindControlIndexOnBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex, control});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ResetActionStatesDrivenBy
// Il2CppName: ResetActionStatesDrivenBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::InputActionState::ResetActionStatesDrivenBy)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ResetActionStatesDrivenBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::IsActionBoundToControlFromDevice
// Il2CppName: IsActionBoundToControlFromDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputDevice*, int)>(&UnityEngine::InputSystem::InputActionState::IsActionBoundToControlFromDevice)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* actionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "IsActionBoundToControlFromDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, actionIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ResetActionState
// Il2CppName: ResetActionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(int, ::UnityEngine::InputSystem::InputActionPhase, bool)>(&UnityEngine::InputSystem::InputActionState::ResetActionState)> {
  static const MethodInfo* get() {
    static auto* actionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* toPhase = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionPhase")->byval_arg;
    static auto* hardReset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ResetActionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actionIndex, toPhase, hardReset});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::FetchActionState
// Il2CppName: FetchActionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionState::TriggerState (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputAction*)>(&UnityEngine::InputSystem::InputActionState::FetchActionState)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "FetchActionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::FetchMapIndices
// Il2CppName: FetchMapIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionState::ActionMapIndices (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputActionMap*)>(&UnityEngine::InputSystem::InputActionState::FetchMapIndices)> {
  static const MethodInfo* get() {
    static auto* map = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "FetchMapIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::EnableAllActions
// Il2CppName: EnableAllActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputActionMap*)>(&UnityEngine::InputSystem::InputActionState::EnableAllActions)> {
  static const MethodInfo* get() {
    static auto* map = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "EnableAllActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::EnableControls
// Il2CppName: EnableControls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputActionMap*)>(&UnityEngine::InputSystem::InputActionState::EnableControls)> {
  static const MethodInfo* get() {
    static auto* map = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "EnableControls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::EnableSingleAction
// Il2CppName: EnableSingleAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputAction*)>(&UnityEngine::InputSystem::InputActionState::EnableSingleAction)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "EnableSingleAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::EnableControls
// Il2CppName: EnableControls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputAction*)>(&UnityEngine::InputSystem::InputActionState::EnableControls)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "EnableControls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::DisableAllActions
// Il2CppName: DisableAllActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputActionMap*)>(&UnityEngine::InputSystem::InputActionState::DisableAllActions)> {
  static const MethodInfo* get() {
    static auto* map = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "DisableAllActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::DisableControls
// Il2CppName: DisableControls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputActionMap*)>(&UnityEngine::InputSystem::InputActionState::DisableControls)> {
  static const MethodInfo* get() {
    static auto* map = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "DisableControls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::DisableSingleAction
// Il2CppName: DisableSingleAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputAction*)>(&UnityEngine::InputSystem::InputActionState::DisableSingleAction)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "DisableSingleAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::DisableControls
// Il2CppName: DisableControls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputAction*)>(&UnityEngine::InputSystem::InputActionState::DisableControls)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "DisableControls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::EnableControls
// Il2CppName: EnableControls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(int, int, int)>(&UnityEngine::InputSystem::InputActionState::EnableControls)> {
  static const MethodInfo* get() {
    static auto* mapIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* controlStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* numControls = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "EnableControls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mapIndex, controlStartIndex, numControls});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::DisableControls
// Il2CppName: DisableControls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(int, int, int)>(&UnityEngine::InputSystem::InputActionState::DisableControls)> {
  static const MethodInfo* get() {
    static auto* mapIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* controlStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* numControls = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "DisableControls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mapIndex, controlStartIndex, numControls});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::SetInitialStateCheckPending
// Il2CppName: SetInitialStateCheckPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(int, bool)>(&UnityEngine::InputSystem::InputActionState::SetInitialStateCheckPending)> {
  static const MethodInfo* get() {
    static auto* actionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "SetInitialStateCheckPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actionIndex, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::SetInitialStateCheckPending
// Il2CppName: SetInitialStateCheckPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputActionState::BindingState*, bool)>(&UnityEngine::InputSystem::InputActionState::SetInitialStateCheckPending)> {
  static const MethodInfo* get() {
    static auto* bindingStatePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/BindingState"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "SetInitialStateCheckPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingStatePtr, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::IsControlEnabled
// Il2CppName: IsControlEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::*)(int)>(&UnityEngine::InputSystem::InputActionState::IsControlEnabled)> {
  static const MethodInfo* get() {
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "IsControlEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::SetControlEnabled
// Il2CppName: SetControlEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(int, bool)>(&UnityEngine::InputSystem::InputActionState::SetControlEnabled)> {
  static const MethodInfo* get() {
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "SetControlEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlIndex, state});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::HookOnBeforeUpdate
// Il2CppName: HookOnBeforeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::HookOnBeforeUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "HookOnBeforeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::UnhookOnBeforeUpdate
// Il2CppName: UnhookOnBeforeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::UnhookOnBeforeUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "UnhookOnBeforeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::OnBeforeInitialUpdate
// Il2CppName: OnBeforeInitialUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::OnBeforeInitialUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "OnBeforeInitialUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyControlStateChanged
// Il2CppName: UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyControlStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputControl*, double, ::UnityEngine::InputSystem::LowLevel::InputEventPtr, int64_t)>(&UnityEngine::InputSystem::InputActionState::UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyControlStateChanged)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    static auto* mapControlAndBindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyControlStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, time, eventPtr, mapControlAndBindingIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyTimerExpired
// Il2CppName: UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyTimerExpired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputControl*, double, int64_t, int)>(&UnityEngine::InputSystem::InputActionState::UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyTimerExpired)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* mapControlAndBindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* interactionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyTimerExpired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, time, mapControlAndBindingIndex, interactionIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ToCombinedMapAndControlAndBindingIndex
// Il2CppName: ToCombinedMapAndControlAndBindingIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::InputSystem::InputActionState::*)(int, int, int)>(&UnityEngine::InputSystem::InputActionState::ToCombinedMapAndControlAndBindingIndex)> {
  static const MethodInfo* get() {
    static auto* mapIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ToCombinedMapAndControlAndBindingIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mapIndex, controlIndex, bindingIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::SplitUpMapAndControlAndBindingIndex
// Il2CppName: SplitUpMapAndControlAndBindingIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(int64_t, ByRef<int>, ByRef<int>, ByRef<int>)>(&UnityEngine::InputSystem::InputActionState::SplitUpMapAndControlAndBindingIndex)> {
  static const MethodInfo* get() {
    static auto* mapControlAndBindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* mapIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "SplitUpMapAndControlAndBindingIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mapControlAndBindingIndex, mapIndex, controlIndex, bindingIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::GetComplexityFromMonitorIndex
// Il2CppName: GetComplexityFromMonitorIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int64_t)>(&UnityEngine::InputSystem::InputActionState::GetComplexityFromMonitorIndex)> {
  static const MethodInfo* get() {
    static auto* mapControlAndBindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "GetComplexityFromMonitorIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mapControlAndBindingIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ProcessControlStateChange
// Il2CppName: ProcessControlStateChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(int, int, int, double, ::UnityEngine::InputSystem::LowLevel::InputEventPtr)>(&UnityEngine::InputSystem::InputActionState::ProcessControlStateChange)> {
  static const MethodInfo* get() {
    static auto* mapIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ProcessControlStateChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mapIndex, controlIndex, bindingIndex, time, eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ProcessButtonState
// Il2CppName: ProcessButtonState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState>, int, ::UnityEngine::InputSystem::InputActionState::BindingState*)>(&UnityEngine::InputSystem::InputActionState::ProcessButtonState)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState")->this_arg;
    static auto* actionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bindingStatePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/BindingState"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ProcessButtonState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger, actionIndex, bindingStatePtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ShouldIgnoreInputOnCompositeBinding
// Il2CppName: ShouldIgnoreInputOnCompositeBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::InputActionState::BindingState*, ::UnityEngine::InputSystem::LowLevel::InputEvent*)>(&UnityEngine::InputSystem::InputActionState::ShouldIgnoreInputOnCompositeBinding)> {
  static const MethodInfo* get() {
    static auto* binding = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/BindingState"))->byval_arg;
    static auto* eventPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEvent"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ShouldIgnoreInputOnCompositeBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{binding, eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::IsConflictingInput
// Il2CppName: IsConflictingInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::*)(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState>, int)>(&UnityEngine::InputSystem::InputActionState::IsConflictingInput)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState")->this_arg;
    static auto* actionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "IsConflictingInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger, actionIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::GetActionBindingStartIndexAndCount
// Il2CppName: GetActionBindingStartIndexAndCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (UnityEngine::InputSystem::InputActionState::*)(int, ByRef<uint16_t>)>(&UnityEngine::InputSystem::InputActionState::GetActionBindingStartIndexAndCount)> {
  static const MethodInfo* get() {
    static auto* actionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bindingCount = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "GetActionBindingStartIndexAndCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actionIndex, bindingCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ProcessDefaultInteraction
// Il2CppName: ProcessDefaultInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState>, int)>(&UnityEngine::InputSystem::InputActionState::ProcessDefaultInteraction)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState")->this_arg;
    static auto* actionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ProcessDefaultInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger, actionIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ProcessInteractions
// Il2CppName: ProcessInteractions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState>, int, int)>(&UnityEngine::InputSystem::InputActionState::ProcessInteractions)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState")->this_arg;
    static auto* interactionStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* interactionCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ProcessInteractions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger, interactionStartIndex, interactionCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ProcessTimeout
// Il2CppName: ProcessTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(double, int, int, int, int)>(&UnityEngine::InputSystem::InputActionState::ProcessTimeout)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* mapIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* interactionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ProcessTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, mapIndex, controlIndex, bindingIndex, interactionIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::SetTotalTimeoutCompletionTime
// Il2CppName: SetTotalTimeoutCompletionTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(float, ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState>)>(&UnityEngine::InputSystem::InputActionState::SetTotalTimeoutCompletionTime)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "SetTotalTimeoutCompletionTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds, trigger});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::StartTimeout
// Il2CppName: StartTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(float, ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState>)>(&UnityEngine::InputSystem::InputActionState::StartTimeout)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "StartTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds, trigger});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::StopTimeout
// Il2CppName: StopTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(int)>(&UnityEngine::InputSystem::InputActionState::StopTimeout)> {
  static const MethodInfo* get() {
    static auto* interactionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "StopTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactionIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ChangePhaseOfInteraction
// Il2CppName: ChangePhaseOfInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputActionPhase, ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState>, ::UnityEngine::InputSystem::InputActionPhase, bool)>(&UnityEngine::InputSystem::InputActionState::ChangePhaseOfInteraction)> {
  static const MethodInfo* get() {
    static auto* newPhase = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionPhase")->byval_arg;
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState")->this_arg;
    static auto* phaseAfterPerformed = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionPhase")->byval_arg;
    static auto* processNextInteractionOnCancel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ChangePhaseOfInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPhase, trigger, phaseAfterPerformed, processNextInteractionOnCancel});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ChangePhaseOfAction
// Il2CppName: ChangePhaseOfAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputActionPhase, ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState>, ::UnityEngine::InputSystem::InputActionPhase)>(&UnityEngine::InputSystem::InputActionState::ChangePhaseOfAction)> {
  static const MethodInfo* get() {
    static auto* newPhase = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionPhase")->byval_arg;
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState")->this_arg;
    static auto* phaseAfterPerformedOrCanceled = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionPhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ChangePhaseOfAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPhase, trigger, phaseAfterPerformedOrCanceled});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ChangePhaseOfActionInternal
// Il2CppName: ChangePhaseOfActionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(int, ::UnityEngine::InputSystem::InputActionState::TriggerState*, ::UnityEngine::InputSystem::InputActionPhase, ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState>)>(&UnityEngine::InputSystem::InputActionState::ChangePhaseOfActionInternal)> {
  static const MethodInfo* get() {
    static auto* actionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* actionState = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState"))->byval_arg;
    static auto* newPhase = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionPhase")->byval_arg;
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ChangePhaseOfActionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actionIndex, actionState, newPhase, trigger});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::CallActionListeners
// Il2CppName: CallActionListeners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(int, ::UnityEngine::InputSystem::InputActionMap*, ::UnityEngine::InputSystem::InputActionPhase, ByRef<::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_1<::UnityEngine::InputSystem::InputAction_CallbackContext>*>>, ::StringW)>(&UnityEngine::InputSystem::InputActionState::CallActionListeners)> {
  static const MethodInfo* get() {
    static auto* actionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* actionMap = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionMap")->byval_arg;
    static auto* phase = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionPhase")->byval_arg;
    static auto* listeners = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "CallbackArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction/CallbackContext")})})->this_arg;
    static auto* callbackName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "CallActionListeners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actionIndex, actionMap, phase, listeners, callbackName});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::GetActionOrNoneString
// Il2CppName: GetActionOrNoneString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::InputSystem::InputActionState::*)(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState>)>(&UnityEngine::InputSystem::InputActionState::GetActionOrNoneString)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "GetActionOrNoneString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::GetActionOrNull
// Il2CppName: GetActionOrNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputAction* (UnityEngine::InputSystem::InputActionState::*)(int)>(&UnityEngine::InputSystem::InputActionState::GetActionOrNull)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "GetActionOrNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::GetActionOrNull
// Il2CppName: GetActionOrNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputAction* (UnityEngine::InputSystem::InputActionState::*)(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState>)>(&UnityEngine::InputSystem::InputActionState::GetActionOrNull)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "GetActionOrNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::GetControl
// Il2CppName: GetControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControl* (UnityEngine::InputSystem::InputActionState::*)(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState>)>(&UnityEngine::InputSystem::InputActionState::GetControl)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "GetControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::GetInteractionOrNull
// Il2CppName: GetInteractionOrNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::IInputInteraction* (UnityEngine::InputSystem::InputActionState::*)(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState>)>(&UnityEngine::InputSystem::InputActionState::GetInteractionOrNull)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "GetInteractionOrNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::GetBindingIndexInMap
// Il2CppName: GetBindingIndexInMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionState::*)(int)>(&UnityEngine::InputSystem::InputActionState::GetBindingIndexInMap)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "GetBindingIndexInMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::GetBindingIndexInState
// Il2CppName: GetBindingIndexInState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionState::*)(int, int)>(&UnityEngine::InputSystem::InputActionState::GetBindingIndexInState)> {
  static const MethodInfo* get() {
    static auto* mapIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bindingIndexInMap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "GetBindingIndexInState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mapIndex, bindingIndexInMap});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::GetBindingState
// Il2CppName: GetBindingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionState::BindingState (UnityEngine::InputSystem::InputActionState::*)(int)>(&UnityEngine::InputSystem::InputActionState::GetBindingState)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "GetBindingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::GetBinding
// Il2CppName: GetBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputBinding (UnityEngine::InputSystem::InputActionState::*)(int)>(&UnityEngine::InputSystem::InputActionState::GetBinding)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "GetBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::GetActionMap
// Il2CppName: GetActionMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionMap* (UnityEngine::InputSystem::InputActionState::*)(int)>(&UnityEngine::InputSystem::InputActionState::GetActionMap)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "GetActionMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ResetInteractionStateAndCancelIfNecessary
// Il2CppName: ResetInteractionStateAndCancelIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(int, int, int)>(&UnityEngine::InputSystem::InputActionState::ResetInteractionStateAndCancelIfNecessary)> {
  static const MethodInfo* get() {
    static auto* mapIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* interactionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ResetInteractionStateAndCancelIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mapIndex, bindingIndex, interactionIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ResetInteractionState
// Il2CppName: ResetInteractionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(int)>(&UnityEngine::InputSystem::InputActionState::ResetInteractionState)> {
  static const MethodInfo* get() {
    static auto* interactionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ResetInteractionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactionIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::GetValueSizeInBytes
// Il2CppName: GetValueSizeInBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionState::*)(int, int)>(&UnityEngine::InputSystem::InputActionState::GetValueSizeInBytes)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "GetValueSizeInBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex, controlIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::GetValueType
// Il2CppName: GetValueType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (UnityEngine::InputSystem::InputActionState::*)(int, int)>(&UnityEngine::InputSystem::InputActionState::GetValueType)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "GetValueType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex, controlIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::IsActuated
// Il2CppName: IsActuated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::InputSystem::InputActionState::TriggerState>, float)>(&UnityEngine::InputSystem::InputActionState::IsActuated)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState/TriggerState")->this_arg;
    static auto* threshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "IsActuated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger, threshold});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ReadValue
// Il2CppName: ReadValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(int, int, void*, int, bool)>(&UnityEngine::InputSystem::InputActionState::ReadValue)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bufferSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ignoreComposites = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ReadValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex, controlIndex, buffer, bufferSize, ignoreComposites});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ReadValue
// Il2CppName: ReadValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ApplyProcessors
// Il2CppName: ApplyProcessors
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::EvaluateCompositePartMagnitude
// Il2CppName: EvaluateCompositePartMagnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::InputActionState::*)(int, int)>(&UnityEngine::InputSystem::InputActionState::EvaluateCompositePartMagnitude)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "EvaluateCompositePartMagnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex, partNumber});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::GetCompositePartPressTime
// Il2CppName: GetCompositePartPressTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::InputSystem::InputActionState::*)(int, int)>(&UnityEngine::InputSystem::InputActionState::GetCompositePartPressTime)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "GetCompositePartPressTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex, partNumber});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ReadCompositePartValue
// Il2CppName: ReadCompositePartValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ReadCompositePartValue
// Il2CppName: ReadCompositePartValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::*)(int, int, void*, int)>(&UnityEngine::InputSystem::InputActionState::ReadCompositePartValue)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bufferSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ReadCompositePartValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex, partNumber, buffer, bufferSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ReadCompositePartValueAsObject
// Il2CppName: ReadCompositePartValueAsObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::InputSystem::InputActionState::*)(int, int)>(&UnityEngine::InputSystem::InputActionState::ReadCompositePartValueAsObject)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ReadCompositePartValueAsObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex, partNumber});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ReadValueAsObject
// Il2CppName: ReadValueAsObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::InputSystem::InputActionState::*)(int, int, bool)>(&UnityEngine::InputSystem::InputActionState::ReadValueAsObject)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ignoreComposites = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ReadValueAsObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex, controlIndex, ignoreComposites});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ReadValueAsButton
// Il2CppName: ReadValueAsButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::*)(int, int)>(&UnityEngine::InputSystem::InputActionState::ReadValueAsButton)> {
  static const MethodInfo* get() {
    static auto* bindingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ReadValueAsButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingIndex, controlIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::SaveAndResetState
// Il2CppName: SaveAndResetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::ISavedState* (*)()>(&UnityEngine::InputSystem::InputActionState::SaveAndResetState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "SaveAndResetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::AddToGlobalList
// Il2CppName: AddToGlobalList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::AddToGlobalList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "AddToGlobalList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::RemoveMapFromGlobalList
// Il2CppName: RemoveMapFromGlobalList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::RemoveMapFromGlobalList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "RemoveMapFromGlobalList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::CompactGlobalList
// Il2CppName: CompactGlobalList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::InputActionState::CompactGlobalList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "CompactGlobalList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::NotifyListenersOfActionChange
// Il2CppName: NotifyListenersOfActionChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)(::UnityEngine::InputSystem::InputActionChange)>(&UnityEngine::InputSystem::InputActionState::NotifyListenersOfActionChange)> {
  static const MethodInfo* get() {
    static auto* change = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionChange")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "NotifyListenersOfActionChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{change});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::NotifyListenersOfActionChange
// Il2CppName: NotifyListenersOfActionChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::InputSystem::InputActionChange, ::Il2CppObject*)>(&UnityEngine::InputSystem::InputActionState::NotifyListenersOfActionChange)> {
  static const MethodInfo* get() {
    static auto* change = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionChange")->byval_arg;
    static auto* actionOrMapOrAsset = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "NotifyListenersOfActionChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{change, actionOrMapOrAsset});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::ResetGlobals
// Il2CppName: ResetGlobals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::InputActionState::ResetGlobals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "ResetGlobals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::FindAllEnabledActions
// Il2CppName: FindAllEnabledActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Collections::Generic::List_1<::UnityEngine::InputSystem::InputAction*>*)>(&UnityEngine::InputSystem::InputActionState::FindAllEnabledActions)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "FindAllEnabledActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::OnDeviceChange
// Il2CppName: OnDeviceChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::InputDeviceChange)>(&UnityEngine::InputSystem::InputActionState::OnDeviceChange)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* change = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDeviceChange")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "OnDeviceChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, change});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::DeferredResolutionOfBindings
// Il2CppName: DeferredResolutionOfBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::InputActionState::DeferredResolutionOfBindings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "DeferredResolutionOfBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::DisableAllActions
// Il2CppName: DisableAllActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::InputActionState::DisableAllActions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "DisableAllActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::DestroyAllActionMapStates
// Il2CppName: DestroyAllActionMapStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::InputActionState::DestroyAllActionMapStates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "DestroyAllActionMapStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::*)()>(&UnityEngine::InputSystem::InputActionState::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
