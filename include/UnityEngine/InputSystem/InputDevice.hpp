// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputControl
#include "UnityEngine/InputSystem/InputControl.hpp"
// Including type: UnityEngine.InputSystem.Layouts.InputDeviceDescription
#include "UnityEngine/InputSystem/Layouts/InputDeviceDescription.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: ReadOnlyArray`1<TValue>
  template<typename TValue>
  struct ReadOnlyArray_1;
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: IInputDeviceCommandInfo
  class IInputDeviceCommandInfo;
  // Forward declaring type: InputDeviceCommand
  struct InputDeviceCommand;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Skipping declaration: ControlBitRangeNode because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputDevice
  class InputDevice;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::InputDevice);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputDevice*, "UnityEngine.InputSystem", "InputDevice");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x170
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.InputDevice
  // [TokenAttribute] Offset: FFFFFFFF
  class InputDevice : public ::UnityEngine::InputSystem::InputControl {
    public:
    // Nested type: ::UnityEngine::InputSystem::InputDevice::DeviceFlags
    struct DeviceFlags;
    // Nested type: ::UnityEngine::InputSystem::InputDevice::ControlBitRangeNode
    struct ControlBitRangeNode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.InputDevice/DeviceFlags
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct DeviceFlags/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DeviceFlags
      constexpr DeviceFlags(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.InputDevice/DeviceFlags UpdateBeforeRender
      static constexpr const int UpdateBeforeRender = 1;
      // Get static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags UpdateBeforeRender
      static ::UnityEngine::InputSystem::InputDevice::DeviceFlags _get_UpdateBeforeRender();
      // Set static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags UpdateBeforeRender
      static void _set_UpdateBeforeRender(::UnityEngine::InputSystem::InputDevice::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.InputDevice/DeviceFlags HasStateCallbacks
      static constexpr const int HasStateCallbacks = 2;
      // Get static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags HasStateCallbacks
      static ::UnityEngine::InputSystem::InputDevice::DeviceFlags _get_HasStateCallbacks();
      // Set static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags HasStateCallbacks
      static void _set_HasStateCallbacks(::UnityEngine::InputSystem::InputDevice::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.InputDevice/DeviceFlags HasControlsWithDefaultState
      static constexpr const int HasControlsWithDefaultState = 4;
      // Get static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags HasControlsWithDefaultState
      static ::UnityEngine::InputSystem::InputDevice::DeviceFlags _get_HasControlsWithDefaultState();
      // Set static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags HasControlsWithDefaultState
      static void _set_HasControlsWithDefaultState(::UnityEngine::InputSystem::InputDevice::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.InputDevice/DeviceFlags HasDontResetControls
      static constexpr const int HasDontResetControls = 1024;
      // Get static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags HasDontResetControls
      static ::UnityEngine::InputSystem::InputDevice::DeviceFlags _get_HasDontResetControls();
      // Set static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags HasDontResetControls
      static void _set_HasDontResetControls(::UnityEngine::InputSystem::InputDevice::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.InputDevice/DeviceFlags HasEventMerger
      static constexpr const int HasEventMerger = 8192;
      // Get static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags HasEventMerger
      static ::UnityEngine::InputSystem::InputDevice::DeviceFlags _get_HasEventMerger();
      // Set static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags HasEventMerger
      static void _set_HasEventMerger(::UnityEngine::InputSystem::InputDevice::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.InputDevice/DeviceFlags HasEventPreProcessor
      static constexpr const int HasEventPreProcessor = 16384;
      // Get static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags HasEventPreProcessor
      static ::UnityEngine::InputSystem::InputDevice::DeviceFlags _get_HasEventPreProcessor();
      // Set static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags HasEventPreProcessor
      static void _set_HasEventPreProcessor(::UnityEngine::InputSystem::InputDevice::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.InputDevice/DeviceFlags Remote
      static constexpr const int Remote = 8;
      // Get static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags Remote
      static ::UnityEngine::InputSystem::InputDevice::DeviceFlags _get_Remote();
      // Set static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags Remote
      static void _set_Remote(::UnityEngine::InputSystem::InputDevice::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.InputDevice/DeviceFlags Native
      static constexpr const int Native = 16;
      // Get static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags Native
      static ::UnityEngine::InputSystem::InputDevice::DeviceFlags _get_Native();
      // Set static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags Native
      static void _set_Native(::UnityEngine::InputSystem::InputDevice::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.InputDevice/DeviceFlags DisabledInFrontend
      static constexpr const int DisabledInFrontend = 32;
      // Get static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags DisabledInFrontend
      static ::UnityEngine::InputSystem::InputDevice::DeviceFlags _get_DisabledInFrontend();
      // Set static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags DisabledInFrontend
      static void _set_DisabledInFrontend(::UnityEngine::InputSystem::InputDevice::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.InputDevice/DeviceFlags DisabledInRuntime
      static constexpr const int DisabledInRuntime = 128;
      // Get static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags DisabledInRuntime
      static ::UnityEngine::InputSystem::InputDevice::DeviceFlags _get_DisabledInRuntime();
      // Set static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags DisabledInRuntime
      static void _set_DisabledInRuntime(::UnityEngine::InputSystem::InputDevice::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.InputDevice/DeviceFlags DisabledWhileInBackground
      static constexpr const int DisabledWhileInBackground = 256;
      // Get static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags DisabledWhileInBackground
      static ::UnityEngine::InputSystem::InputDevice::DeviceFlags _get_DisabledWhileInBackground();
      // Set static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags DisabledWhileInBackground
      static void _set_DisabledWhileInBackground(::UnityEngine::InputSystem::InputDevice::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.InputDevice/DeviceFlags DisabledStateHasBeenQueriedFromRuntime
      static constexpr const int DisabledStateHasBeenQueriedFromRuntime = 64;
      // Get static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags DisabledStateHasBeenQueriedFromRuntime
      static ::UnityEngine::InputSystem::InputDevice::DeviceFlags _get_DisabledStateHasBeenQueriedFromRuntime();
      // Set static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags DisabledStateHasBeenQueriedFromRuntime
      static void _set_DisabledStateHasBeenQueriedFromRuntime(::UnityEngine::InputSystem::InputDevice::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.InputDevice/DeviceFlags CanRunInBackground
      static constexpr const int CanRunInBackground = 2048;
      // Get static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags CanRunInBackground
      static ::UnityEngine::InputSystem::InputDevice::DeviceFlags _get_CanRunInBackground();
      // Set static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags CanRunInBackground
      static void _set_CanRunInBackground(::UnityEngine::InputSystem::InputDevice::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.InputDevice/DeviceFlags CanRunInBackgroundHasBeenQueried
      static constexpr const int CanRunInBackgroundHasBeenQueried = 4096;
      // Get static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags CanRunInBackgroundHasBeenQueried
      static ::UnityEngine::InputSystem::InputDevice::DeviceFlags _get_CanRunInBackgroundHasBeenQueried();
      // Set static field: static public UnityEngine.InputSystem.InputDevice/DeviceFlags CanRunInBackgroundHasBeenQueried
      static void _set_CanRunInBackgroundHasBeenQueried(::UnityEngine::InputSystem::InputDevice::DeviceFlags value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.InputDevice/DeviceFlags
    #pragma pack(pop)
    static check_size<sizeof(InputDevice::DeviceFlags), 0 + sizeof(int)> __UnityEngine_InputSystem_InputDevice_DeviceFlagsSizeCheck;
    static_assert(sizeof(InputDevice::DeviceFlags) == 0x4);
    // Size: 0x7
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.InputDevice/ControlBitRangeNode
    // [TokenAttribute] Offset: FFFFFFFF
    struct ControlBitRangeNode/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.UInt16 endBitOffset
      // Size: 0x2
      // Offset: 0x0
      uint16_t endBitOffset;
      // Field size check
      static_assert(sizeof(uint16_t) == 0x2);
      // public System.Int16 leftChildIndex
      // Size: 0x2
      // Offset: 0x2
      int16_t leftChildIndex;
      // Field size check
      static_assert(sizeof(int16_t) == 0x2);
      // public System.UInt16 controlStartIndex
      // Size: 0x2
      // Offset: 0x4
      uint16_t controlStartIndex;
      // Field size check
      static_assert(sizeof(uint16_t) == 0x2);
      // public System.Byte controlCount
      // Size: 0x1
      // Offset: 0x6
      uint8_t controlCount;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: ControlBitRangeNode
      constexpr ControlBitRangeNode(uint16_t endBitOffset_ = {}, int16_t leftChildIndex_ = {}, uint16_t controlStartIndex_ = {}, uint8_t controlCount_ = {}) noexcept : endBitOffset{endBitOffset_}, leftChildIndex{leftChildIndex_}, controlStartIndex{controlStartIndex_}, controlCount{controlCount_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.UInt16 endBitOffset
      [[deprecated("Use field access instead!")]] uint16_t& dyn_endBitOffset();
      // Get instance field reference: public System.Int16 leftChildIndex
      [[deprecated("Use field access instead!")]] int16_t& dyn_leftChildIndex();
      // Get instance field reference: public System.UInt16 controlStartIndex
      [[deprecated("Use field access instead!")]] uint16_t& dyn_controlStartIndex();
      // Get instance field reference: public System.Byte controlCount
      [[deprecated("Use field access instead!")]] uint8_t& dyn_controlCount();
      // public System.Void .ctor(System.UInt16 endOffset)
      // Offset: 0x50C679C
      ControlBitRangeNode(uint16_t endOffset);
    }; // UnityEngine.InputSystem.InputDevice/ControlBitRangeNode
    #pragma pack(pop)
    static check_size<sizeof(InputDevice::ControlBitRangeNode), 6 + sizeof(uint8_t)> __UnityEngine_InputSystem_InputDevice_ControlBitRangeNodeSizeCheck;
    static_assert(sizeof(InputDevice::ControlBitRangeNode) == 0x7);
    public:
    // UnityEngine.InputSystem.InputDevice/DeviceFlags m_DeviceFlags
    // Size: 0x4
    // Offset: 0xDC
    ::UnityEngine::InputSystem::InputDevice::DeviceFlags m_DeviceFlags;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputDevice::DeviceFlags) == 0x4);
    // System.Int32 m_DeviceId
    // Size: 0x4
    // Offset: 0xE0
    int m_DeviceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_ParticipantId
    // Size: 0x4
    // Offset: 0xE4
    int m_ParticipantId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_DeviceIndex
    // Size: 0x4
    // Offset: 0xE8
    int m_DeviceIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_DeviceIndex and: m_Description
    char __padding3[0x4] = {};
    // UnityEngine.InputSystem.Layouts.InputDeviceDescription m_Description
    // Size: 0x38
    // Offset: 0xF0
    ::UnityEngine::InputSystem::Layouts::InputDeviceDescription m_Description;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Layouts::InputDeviceDescription) == 0x38);
    // System.Double m_LastUpdateTimeInternal
    // Size: 0x8
    // Offset: 0x128
    double m_LastUpdateTimeInternal;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // System.UInt32 m_CurrentUpdateStepCount
    // Size: 0x4
    // Offset: 0x130
    uint m_CurrentUpdateStepCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: m_CurrentUpdateStepCount and: m_AliasesForEachControl
    char __padding6[0x4] = {};
    // UnityEngine.InputSystem.Utilities.InternedString[] m_AliasesForEachControl
    // Size: 0x8
    // Offset: 0x138
    ::ArrayW<::UnityEngine::InputSystem::Utilities::InternedString> m_AliasesForEachControl;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::Utilities::InternedString>) == 0x8);
    // UnityEngine.InputSystem.Utilities.InternedString[] m_UsagesForEachControl
    // Size: 0x8
    // Offset: 0x140
    ::ArrayW<::UnityEngine::InputSystem::Utilities::InternedString> m_UsagesForEachControl;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::Utilities::InternedString>) == 0x8);
    // UnityEngine.InputSystem.InputControl[] m_UsageToControl
    // Size: 0x8
    // Offset: 0x148
    ::ArrayW<::UnityEngine::InputSystem::InputControl*> m_UsageToControl;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputControl*>) == 0x8);
    // UnityEngine.InputSystem.InputControl[] m_ChildrenForEachControl
    // Size: 0x8
    // Offset: 0x150
    ::ArrayW<::UnityEngine::InputSystem::InputControl*> m_ChildrenForEachControl;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputControl*>) == 0x8);
    // System.UInt32[] m_StateOffsetToControlMap
    // Size: 0x8
    // Offset: 0x158
    ::ArrayW<uint> m_StateOffsetToControlMap;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // UnityEngine.InputSystem.InputDevice/ControlBitRangeNode[] m_ControlTreeNodes
    // Size: 0x8
    // Offset: 0x160
    ::ArrayW<::UnityEngine::InputSystem::InputDevice::ControlBitRangeNode> m_ControlTreeNodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputDevice::ControlBitRangeNode>) == 0x8);
    // System.UInt16[] m_ControlTreeIndices
    // Size: 0x8
    // Offset: 0x168
    ::ArrayW<uint16_t> m_ControlTreeIndices;
    // Field size check
    static_assert(sizeof(::ArrayW<uint16_t>) == 0x8);
    public:
    // static field const value: static public System.Int32 InvalidDeviceId
    static constexpr const int InvalidDeviceId = 0;
    // Get static field: static public System.Int32 InvalidDeviceId
    static int _get_InvalidDeviceId();
    // Set static field: static public System.Int32 InvalidDeviceId
    static void _set_InvalidDeviceId(int value);
    // static field const value: static System.Int32 kLocalParticipantId
    static constexpr const int kLocalParticipantId = 0;
    // Get static field: static System.Int32 kLocalParticipantId
    static int _get_kLocalParticipantId();
    // Set static field: static System.Int32 kLocalParticipantId
    static void _set_kLocalParticipantId(int value);
    // static field const value: static System.Int32 kInvalidDeviceIndex
    static constexpr const int kInvalidDeviceIndex = -1;
    // Get static field: static System.Int32 kInvalidDeviceIndex
    static int _get_kInvalidDeviceIndex();
    // Set static field: static System.Int32 kInvalidDeviceIndex
    static void _set_kInvalidDeviceIndex(int value);
    // static field const value: static System.Int32 kControlIndexBits
    static constexpr const int kControlIndexBits = 10;
    // Get static field: static System.Int32 kControlIndexBits
    static int _get_kControlIndexBits();
    // Set static field: static System.Int32 kControlIndexBits
    static void _set_kControlIndexBits(int value);
    // static field const value: static System.Int32 kStateOffsetBits
    static constexpr const int kStateOffsetBits = 13;
    // Get static field: static System.Int32 kStateOffsetBits
    static int _get_kStateOffsetBits();
    // Set static field: static System.Int32 kStateOffsetBits
    static void _set_kStateOffsetBits(int value);
    // static field const value: static System.Int32 kStateSizeBits
    static constexpr const int kStateSizeBits = 9;
    // Get static field: static System.Int32 kStateSizeBits
    static int _get_kStateSizeBits();
    // Set static field: static System.Int32 kStateSizeBits
    static void _set_kStateSizeBits(int value);
    // Get instance field reference: UnityEngine.InputSystem.InputDevice/DeviceFlags m_DeviceFlags
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputDevice::DeviceFlags& dyn_m_DeviceFlags();
    // Get instance field reference: System.Int32 m_DeviceId
    [[deprecated("Use field access instead!")]] int& dyn_m_DeviceId();
    // Get instance field reference: System.Int32 m_ParticipantId
    [[deprecated("Use field access instead!")]] int& dyn_m_ParticipantId();
    // Get instance field reference: System.Int32 m_DeviceIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_DeviceIndex();
    // Get instance field reference: UnityEngine.InputSystem.Layouts.InputDeviceDescription m_Description
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Layouts::InputDeviceDescription& dyn_m_Description();
    // Get instance field reference: System.Double m_LastUpdateTimeInternal
    [[deprecated("Use field access instead!")]] double& dyn_m_LastUpdateTimeInternal();
    // Get instance field reference: System.UInt32 m_CurrentUpdateStepCount
    [[deprecated("Use field access instead!")]] uint& dyn_m_CurrentUpdateStepCount();
    // Get instance field reference: UnityEngine.InputSystem.Utilities.InternedString[] m_AliasesForEachControl
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::Utilities::InternedString>& dyn_m_AliasesForEachControl();
    // Get instance field reference: UnityEngine.InputSystem.Utilities.InternedString[] m_UsagesForEachControl
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::Utilities::InternedString>& dyn_m_UsagesForEachControl();
    // Get instance field reference: UnityEngine.InputSystem.InputControl[] m_UsageToControl
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputControl*>& dyn_m_UsageToControl();
    // Get instance field reference: UnityEngine.InputSystem.InputControl[] m_ChildrenForEachControl
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputControl*>& dyn_m_ChildrenForEachControl();
    // Get instance field reference: System.UInt32[] m_StateOffsetToControlMap
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_m_StateOffsetToControlMap();
    // Get instance field reference: UnityEngine.InputSystem.InputDevice/ControlBitRangeNode[] m_ControlTreeNodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputDevice::ControlBitRangeNode>& dyn_m_ControlTreeNodes();
    // Get instance field reference: System.UInt16[] m_ControlTreeIndices
    [[deprecated("Use field access instead!")]] ::ArrayW<uint16_t>& dyn_m_ControlTreeIndices();
    // public UnityEngine.InputSystem.Layouts.InputDeviceDescription get_description()
    // Offset: 0x50C4F64
    ::UnityEngine::InputSystem::Layouts::InputDeviceDescription get_description();
    // public System.Boolean get_enabled()
    // Offset: 0x50C4F80
    bool get_enabled();
    // public System.Boolean get_canRunInBackground()
    // Offset: 0x50C503C
    bool get_canRunInBackground();
    // public System.Boolean get_added()
    // Offset: 0x50B94B0
    bool get_added();
    // public System.Boolean get_remote()
    // Offset: 0x50C50EC
    bool get_remote();
    // public System.Boolean get_native()
    // Offset: 0x50C50F8
    bool get_native();
    // public System.Boolean get_updateBeforeRender()
    // Offset: 0x50C5104
    bool get_updateBeforeRender();
    // public System.Int32 get_deviceId()
    // Offset: 0x50C5110
    int get_deviceId();
    // public System.Double get_lastUpdateTime()
    // Offset: 0x50C5118
    double get_lastUpdateTime();
    // public System.Boolean get_wasUpdatedThisFrame()
    // Offset: 0x50C516C
    bool get_wasUpdatedThisFrame();
    // public UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputControl> get_allControls()
    // Offset: 0x50C51C4
    ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::InputControl*> get_allControls();
    // static public UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputDevice> get_all()
    // Offset: 0x50C529C
    static ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::InputDevice*> get_all();
    // System.Void NotifyConfigurationChanged()
    // Offset: 0x50C5604
    void NotifyConfigurationChanged();
    // public System.Void MakeCurrent()
    // Offset: 0x50C4D18
    void MakeCurrent();
    // protected System.Void OnAdded()
    // Offset: 0x50C5680
    void OnAdded();
    // protected System.Void OnRemoved()
    // Offset: 0x50C5684
    void OnRemoved();
    // protected System.Void OnConfigurationChanged()
    // Offset: 0x50C5688
    void OnConfigurationChanged();
    // public System.Int64 ExecuteCommand(ref TCommand command)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TCommand>
    int64_t ExecuteCommand(ByRef<TCommand> command) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TCommand>, ::UnityEngine::InputSystem::LowLevel::IInputDeviceCommandInfo> && std::is_convertible_v<TCommand, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputDevice::ExecuteCommand");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteCommand", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TCommand>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(command)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TCommand>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___generic__method, byref(command));
    }
    // protected System.Int64 ExecuteCommand(UnityEngine.InputSystem.LowLevel.InputDeviceCommand* commandPtr)
    // Offset: 0x50C568C
    int64_t ExecuteCommand(::UnityEngine::InputSystem::LowLevel::InputDeviceCommand* commandPtr);
    // System.Boolean QueryEnabledStateFromRuntime()
    // Offset: 0x50C4F9C
    bool QueryEnabledStateFromRuntime();
    // System.Boolean get_disabledInFrontend()
    // Offset: 0x50C5764
    bool get_disabledInFrontend();
    // System.Void set_disabledInFrontend(System.Boolean value)
    // Offset: 0x50C5770
    void set_disabledInFrontend(bool value);
    // System.Boolean get_disabledInRuntime()
    // Offset: 0x50C5790
    bool get_disabledInRuntime();
    // System.Void set_disabledInRuntime(System.Boolean value)
    // Offset: 0x50C579C
    void set_disabledInRuntime(bool value);
    // System.Boolean get_disabledWhileInBackground()
    // Offset: 0x50C57BC
    bool get_disabledWhileInBackground();
    // System.Void set_disabledWhileInBackground(System.Boolean value)
    // Offset: 0x50C57C8
    void set_disabledWhileInBackground(bool value);
    // static System.UInt32 EncodeStateOffsetToControlMapEntry(System.UInt32 controlIndex, System.UInt32 stateOffsetInBits, System.UInt32 stateSizeInBits)
    // Offset: 0x50C57E8
    static uint EncodeStateOffsetToControlMapEntry(uint controlIndex, uint stateOffsetInBits, uint stateSizeInBits);
    // static System.Void DecodeStateOffsetToControlMapEntry(System.UInt32 entry, out System.UInt32 controlIndex, out System.UInt32 stateOffset, out System.UInt32 stateSize)
    // Offset: 0x50C08C4
    static void DecodeStateOffsetToControlMapEntry(uint entry, ByRef<uint> controlIndex, ByRef<uint> stateOffset, ByRef<uint> stateSize);
    // System.Boolean get_hasControlsWithDefaultState()
    // Offset: 0x50C57F4
    bool get_hasControlsWithDefaultState();
    // System.Void set_hasControlsWithDefaultState(System.Boolean value)
    // Offset: 0x50C0BC0
    void set_hasControlsWithDefaultState(bool value);
    // System.Boolean get_hasDontResetControls()
    // Offset: 0x50C5800
    bool get_hasDontResetControls();
    // System.Void set_hasDontResetControls(System.Boolean value)
    // Offset: 0x50C0CBC
    void set_hasDontResetControls(bool value);
    // System.Boolean get_hasStateCallbacks()
    // Offset: 0x50BF124
    bool get_hasStateCallbacks();
    // System.Void set_hasStateCallbacks(System.Boolean value)
    // Offset: 0x50C580C
    void set_hasStateCallbacks(bool value);
    // System.Boolean get_hasEventMerger()
    // Offset: 0x50C582C
    bool get_hasEventMerger();
    // System.Void set_hasEventMerger(System.Boolean value)
    // Offset: 0x50C5838
    void set_hasEventMerger(bool value);
    // System.Boolean get_hasEventPreProcessor()
    // Offset: 0x50C5858
    bool get_hasEventPreProcessor();
    // System.Void set_hasEventPreProcessor(System.Boolean value)
    // Offset: 0x50C5864
    void set_hasEventPreProcessor(bool value);
    // System.Void AddDeviceUsage(UnityEngine.InputSystem.Utilities.InternedString usage)
    // Offset: 0x50C5884
    void AddDeviceUsage(::UnityEngine::InputSystem::Utilities::InternedString usage);
    // System.Void RemoveDeviceUsage(UnityEngine.InputSystem.Utilities.InternedString usage)
    // Offset: 0x50C5938
    void RemoveDeviceUsage(::UnityEngine::InputSystem::Utilities::InternedString usage);
    // System.Void ClearDeviceUsages()
    // Offset: 0x50C5A14
    void ClearDeviceUsages();
    // System.Boolean RequestSync()
    // Offset: 0x50B94C0
    bool RequestSync();
    // System.Boolean RequestReset()
    // Offset: 0x50B960C
    bool RequestReset();
    // System.Boolean ExecuteEnableCommand()
    // Offset: 0x50C5A74
    bool ExecuteEnableCommand();
    // System.Boolean ExecuteDisableCommand()
    // Offset: 0x50C5AEC
    bool ExecuteDisableCommand();
    // System.Void NotifyAdded()
    // Offset: 0x50C5B58
    void NotifyAdded();
    // System.Void NotifyRemoved()
    // Offset: 0x50C5B68
    void NotifyRemoved();
    // static TDevice Build(System.String layoutName, System.String layoutVariants, UnityEngine.InputSystem.Layouts.InputDeviceDescription deviceDescription, System.Boolean noPrecompiledLayouts)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TDevice>
    static TDevice Build(::StringW layoutName, ::StringW layoutVariants, ::UnityEngine::InputSystem::Layouts::InputDeviceDescription deviceDescription, bool noPrecompiledLayouts) {
      static_assert(std::is_convertible_v<TDevice, ::UnityEngine::InputSystem::InputDevice*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputDevice::Build");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputDevice", "Build", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layoutName), ::il2cpp_utils::ExtractType(layoutVariants), ::il2cpp_utils::ExtractType(deviceDescription), ::il2cpp_utils::ExtractType(noPrecompiledLayouts)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TDevice, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, layoutName, layoutVariants, deviceDescription, noPrecompiledLayouts);
    }
    // System.Void WriteChangedControlStates(System.Byte* deviceStateBuffer, System.Void* statePtr, System.UInt32 stateSizeInBytes, System.UInt32 stateOffsetInDevice)
    // Offset: 0x50C5B78
    void WriteChangedControlStates(uint8_t* deviceStateBuffer, void* statePtr, uint stateSizeInBytes, uint stateOffsetInDevice);
    // private System.Void WritePartialChangedControlStatesInternal(System.Void* statePtr, System.UInt32 stateSizeInBits, System.UInt32 stateOffsetInDeviceInBits, System.Byte* deviceStatePtr, UnityEngine.InputSystem.InputDevice/ControlBitRangeNode parentNode, System.UInt32 startOffset)
    // Offset: 0x50C5C2C
    void WritePartialChangedControlStatesInternal(void* statePtr, uint stateSizeInBits, uint stateOffsetInDeviceInBits, uint8_t* deviceStatePtr, ::UnityEngine::InputSystem::InputDevice::ControlBitRangeNode parentNode, uint startOffset);
    // private System.Void DumpControlBitRangeNode(System.Int32 nodeIndex, UnityEngine.InputSystem.InputDevice/ControlBitRangeNode node, System.UInt32 startOffset, System.UInt32 sizeInBits, System.Collections.Generic.List`1<System.String> output)
    // Offset: 0x50C60E8
    void DumpControlBitRangeNode(int nodeIndex, ::UnityEngine::InputSystem::InputDevice::ControlBitRangeNode node, uint startOffset, uint sizeInBits, ::System::Collections::Generic::List_1<::StringW>* output);
    // private System.Void DumpControlTree(UnityEngine.InputSystem.InputDevice/ControlBitRangeNode parentNode, System.UInt32 startOffset, System.Collections.Generic.List`1<System.String> output)
    // Offset: 0x50C6544
    void DumpControlTree(::UnityEngine::InputSystem::InputDevice::ControlBitRangeNode parentNode, uint startOffset, ::System::Collections::Generic::List_1<::StringW>* output);
    // System.String DumpControlTree()
    // Offset: 0x50C6668
    ::StringW DumpControlTree();
    // private System.Void WriteChangedControlStatesInternal(System.Void* statePtr, System.UInt32 stateSizeInBits, System.Byte* deviceStatePtr, UnityEngine.InputSystem.InputDevice/ControlBitRangeNode parentNode, System.UInt32 startOffset)
    // Offset: 0x50C5EA4
    void WriteChangedControlStatesInternal(void* statePtr, uint stateSizeInBits, uint8_t* deviceStatePtr, ::UnityEngine::InputSystem::InputDevice::ControlBitRangeNode parentNode, uint startOffset);
    // static private System.Boolean HasDataChangedInRange(System.Byte* deviceStatePtr, System.Void* statePtr, System.UInt32 startOffset, System.UInt32 sizeInBits)
    // Offset: 0x50C6734
    static bool HasDataChangedInRange(uint8_t* deviceStatePtr, void* statePtr, uint startOffset, uint sizeInBits);
    // public override System.Type get_valueType()
    // Offset: 0x50C5224
    // Implemented from: UnityEngine.InputSystem.InputControl
    // Base method: System.Type InputControl::get_valueType()
    ::System::Type* get_valueType();
    // public override System.Int32 get_valueSizeInBytes()
    // Offset: 0x50C5290
    // Implemented from: UnityEngine.InputSystem.InputControl
    // Base method: System.Int32 InputControl::get_valueSizeInBytes()
    int get_valueSizeInBytes();
    // public System.Void .ctor()
    // Offset: 0x50C4F30
    // Implemented from: UnityEngine.InputSystem.InputControl
    // Base method: System.Void InputControl::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputDevice* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputDevice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputDevice*, creationType>()));
    }
    // public override System.Object ReadValueFromBufferAsObject(System.Void* buffer, System.Int32 bufferSize)
    // Offset: 0x50C52E8
    // Implemented from: UnityEngine.InputSystem.InputControl
    // Base method: System.Object InputControl::ReadValueFromBufferAsObject(System.Void* buffer, System.Int32 bufferSize)
    ::Il2CppObject* ReadValueFromBufferAsObject(void* buffer, int bufferSize);
    // public override System.Object ReadValueFromStateAsObject(System.Void* statePtr)
    // Offset: 0x50C5320
    // Implemented from: UnityEngine.InputSystem.InputControl
    // Base method: System.Object InputControl::ReadValueFromStateAsObject(System.Void* statePtr)
    ::Il2CppObject* ReadValueFromStateAsObject(void* statePtr);
    // public override System.Void ReadValueFromStateIntoBuffer(System.Void* statePtr, System.Void* bufferPtr, System.Int32 bufferSize)
    // Offset: 0x50C53E4
    // Implemented from: UnityEngine.InputSystem.InputControl
    // Base method: System.Void InputControl::ReadValueFromStateIntoBuffer(System.Void* statePtr, System.Void* bufferPtr, System.Int32 bufferSize)
    void ReadValueFromStateIntoBuffer(void* statePtr, void* bufferPtr, int bufferSize);
    // public override System.Boolean CompareValue(System.Void* firstStatePtr, System.Void* secondStatePtr)
    // Offset: 0x50C5558
    // Implemented from: UnityEngine.InputSystem.InputControl
    // Base method: System.Boolean InputControl::CompareValue(System.Void* firstStatePtr, System.Void* secondStatePtr)
    bool CompareValue(void* firstStatePtr, void* secondStatePtr);
  }; // UnityEngine.InputSystem.InputDevice
  #pragma pack(pop)
  static check_size<sizeof(InputDevice), 360 + sizeof(::ArrayW<uint16_t>)> __UnityEngine_InputSystem_InputDeviceSizeCheck;
  static_assert(sizeof(InputDevice) == 0x170);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputDevice::ControlBitRangeNode, "UnityEngine.InputSystem", "InputDevice/ControlBitRangeNode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputDevice::DeviceFlags, "UnityEngine.InputSystem", "InputDevice/DeviceFlags");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_description
// Il2CppName: get_description
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Layouts::InputDeviceDescription (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_description)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_description", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_enabled
// Il2CppName: get_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_enabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_canRunInBackground
// Il2CppName: get_canRunInBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_canRunInBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_canRunInBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_added
// Il2CppName: get_added
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_added)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_added", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_remote
// Il2CppName: get_remote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_remote)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_remote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_native
// Il2CppName: get_native
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_native)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_native", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_updateBeforeRender
// Il2CppName: get_updateBeforeRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_updateBeforeRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_updateBeforeRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_deviceId
// Il2CppName: get_deviceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_deviceId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_deviceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_lastUpdateTime
// Il2CppName: get_lastUpdateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_lastUpdateTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_lastUpdateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_wasUpdatedThisFrame
// Il2CppName: get_wasUpdatedThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_wasUpdatedThisFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_wasUpdatedThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_allControls
// Il2CppName: get_allControls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::InputControl*> (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_allControls)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_allControls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_all
// Il2CppName: get_all
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::InputDevice*> (*)()>(&UnityEngine::InputSystem::InputDevice::get_all)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_all", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::NotifyConfigurationChanged
// Il2CppName: NotifyConfigurationChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::NotifyConfigurationChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "NotifyConfigurationChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::MakeCurrent
// Il2CppName: MakeCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::MakeCurrent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "MakeCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::OnAdded
// Il2CppName: OnAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::OnAdded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "OnAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::OnRemoved
// Il2CppName: OnRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::OnRemoved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "OnRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::OnConfigurationChanged
// Il2CppName: OnConfigurationChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::OnConfigurationChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "OnConfigurationChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::ExecuteCommand
// Il2CppName: ExecuteCommand
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::ExecuteCommand
// Il2CppName: ExecuteCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::InputSystem::InputDevice::*)(::UnityEngine::InputSystem::LowLevel::InputDeviceCommand*)>(&UnityEngine::InputSystem::InputDevice::ExecuteCommand)> {
  static const MethodInfo* get() {
    static auto* commandPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputDeviceCommand"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "ExecuteCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{commandPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::QueryEnabledStateFromRuntime
// Il2CppName: QueryEnabledStateFromRuntime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::QueryEnabledStateFromRuntime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "QueryEnabledStateFromRuntime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_disabledInFrontend
// Il2CppName: get_disabledInFrontend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_disabledInFrontend)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_disabledInFrontend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::set_disabledInFrontend
// Il2CppName: set_disabledInFrontend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(bool)>(&UnityEngine::InputSystem::InputDevice::set_disabledInFrontend)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "set_disabledInFrontend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_disabledInRuntime
// Il2CppName: get_disabledInRuntime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_disabledInRuntime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_disabledInRuntime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::set_disabledInRuntime
// Il2CppName: set_disabledInRuntime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(bool)>(&UnityEngine::InputSystem::InputDevice::set_disabledInRuntime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "set_disabledInRuntime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_disabledWhileInBackground
// Il2CppName: get_disabledWhileInBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_disabledWhileInBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_disabledWhileInBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::set_disabledWhileInBackground
// Il2CppName: set_disabledWhileInBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(bool)>(&UnityEngine::InputSystem::InputDevice::set_disabledWhileInBackground)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "set_disabledWhileInBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::EncodeStateOffsetToControlMapEntry
// Il2CppName: EncodeStateOffsetToControlMapEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, uint, uint)>(&UnityEngine::InputSystem::InputDevice::EncodeStateOffsetToControlMapEntry)> {
  static const MethodInfo* get() {
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* stateOffsetInBits = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* stateSizeInBits = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "EncodeStateOffsetToControlMapEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlIndex, stateOffsetInBits, stateSizeInBits});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::DecodeStateOffsetToControlMapEntry
// Il2CppName: DecodeStateOffsetToControlMapEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<uint>, ByRef<uint>, ByRef<uint>)>(&UnityEngine::InputSystem::InputDevice::DecodeStateOffsetToControlMapEntry)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* stateOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* stateSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "DecodeStateOffsetToControlMapEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry, controlIndex, stateOffset, stateSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_hasControlsWithDefaultState
// Il2CppName: get_hasControlsWithDefaultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_hasControlsWithDefaultState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_hasControlsWithDefaultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::set_hasControlsWithDefaultState
// Il2CppName: set_hasControlsWithDefaultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(bool)>(&UnityEngine::InputSystem::InputDevice::set_hasControlsWithDefaultState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "set_hasControlsWithDefaultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_hasDontResetControls
// Il2CppName: get_hasDontResetControls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_hasDontResetControls)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_hasDontResetControls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::set_hasDontResetControls
// Il2CppName: set_hasDontResetControls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(bool)>(&UnityEngine::InputSystem::InputDevice::set_hasDontResetControls)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "set_hasDontResetControls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_hasStateCallbacks
// Il2CppName: get_hasStateCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_hasStateCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_hasStateCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::set_hasStateCallbacks
// Il2CppName: set_hasStateCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(bool)>(&UnityEngine::InputSystem::InputDevice::set_hasStateCallbacks)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "set_hasStateCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_hasEventMerger
// Il2CppName: get_hasEventMerger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_hasEventMerger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_hasEventMerger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::set_hasEventMerger
// Il2CppName: set_hasEventMerger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(bool)>(&UnityEngine::InputSystem::InputDevice::set_hasEventMerger)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "set_hasEventMerger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_hasEventPreProcessor
// Il2CppName: get_hasEventPreProcessor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_hasEventPreProcessor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_hasEventPreProcessor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::set_hasEventPreProcessor
// Il2CppName: set_hasEventPreProcessor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(bool)>(&UnityEngine::InputSystem::InputDevice::set_hasEventPreProcessor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "set_hasEventPreProcessor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::AddDeviceUsage
// Il2CppName: AddDeviceUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputDevice::AddDeviceUsage)> {
  static const MethodInfo* get() {
    static auto* usage = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "AddDeviceUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{usage});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::RemoveDeviceUsage
// Il2CppName: RemoveDeviceUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputDevice::RemoveDeviceUsage)> {
  static const MethodInfo* get() {
    static auto* usage = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "RemoveDeviceUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{usage});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::ClearDeviceUsages
// Il2CppName: ClearDeviceUsages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::ClearDeviceUsages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "ClearDeviceUsages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::RequestSync
// Il2CppName: RequestSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::RequestSync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "RequestSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::RequestReset
// Il2CppName: RequestReset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::RequestReset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "RequestReset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::ExecuteEnableCommand
// Il2CppName: ExecuteEnableCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::ExecuteEnableCommand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "ExecuteEnableCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::ExecuteDisableCommand
// Il2CppName: ExecuteDisableCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::ExecuteDisableCommand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "ExecuteDisableCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::NotifyAdded
// Il2CppName: NotifyAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::NotifyAdded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "NotifyAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::NotifyRemoved
// Il2CppName: NotifyRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::NotifyRemoved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "NotifyRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::Build
// Il2CppName: Build
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::WriteChangedControlStates
// Il2CppName: WriteChangedControlStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(uint8_t*, void*, uint, uint)>(&UnityEngine::InputSystem::InputDevice::WriteChangedControlStates)> {
  static const MethodInfo* get() {
    static auto* deviceStateBuffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* stateSizeInBytes = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* stateOffsetInDevice = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "WriteChangedControlStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceStateBuffer, statePtr, stateSizeInBytes, stateOffsetInDevice});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::WritePartialChangedControlStatesInternal
// Il2CppName: WritePartialChangedControlStatesInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(void*, uint, uint, uint8_t*, ::UnityEngine::InputSystem::InputDevice::ControlBitRangeNode, uint)>(&UnityEngine::InputSystem::InputDevice::WritePartialChangedControlStatesInternal)> {
  static const MethodInfo* get() {
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* stateSizeInBits = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* stateOffsetInDeviceInBits = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* deviceStatePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* parentNode = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice/ControlBitRangeNode")->byval_arg;
    static auto* startOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "WritePartialChangedControlStatesInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statePtr, stateSizeInBits, stateOffsetInDeviceInBits, deviceStatePtr, parentNode, startOffset});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::DumpControlBitRangeNode
// Il2CppName: DumpControlBitRangeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(int, ::UnityEngine::InputSystem::InputDevice::ControlBitRangeNode, uint, uint, ::System::Collections::Generic::List_1<::StringW>*)>(&UnityEngine::InputSystem::InputDevice::DumpControlBitRangeNode)> {
  static const MethodInfo* get() {
    static auto* nodeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice/ControlBitRangeNode")->byval_arg;
    static auto* startOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* sizeInBits = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "DumpControlBitRangeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeIndex, node, startOffset, sizeInBits, output});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::DumpControlTree
// Il2CppName: DumpControlTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(::UnityEngine::InputSystem::InputDevice::ControlBitRangeNode, uint, ::System::Collections::Generic::List_1<::StringW>*)>(&UnityEngine::InputSystem::InputDevice::DumpControlTree)> {
  static const MethodInfo* get() {
    static auto* parentNode = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice/ControlBitRangeNode")->byval_arg;
    static auto* startOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "DumpControlTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentNode, startOffset, output});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::DumpControlTree
// Il2CppName: DumpControlTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::DumpControlTree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "DumpControlTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::WriteChangedControlStatesInternal
// Il2CppName: WriteChangedControlStatesInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(void*, uint, uint8_t*, ::UnityEngine::InputSystem::InputDevice::ControlBitRangeNode, uint)>(&UnityEngine::InputSystem::InputDevice::WriteChangedControlStatesInternal)> {
  static const MethodInfo* get() {
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* stateSizeInBits = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* deviceStatePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* parentNode = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice/ControlBitRangeNode")->byval_arg;
    static auto* startOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "WriteChangedControlStatesInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statePtr, stateSizeInBits, deviceStatePtr, parentNode, startOffset});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::HasDataChangedInRange
// Il2CppName: HasDataChangedInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t*, void*, uint, uint)>(&UnityEngine::InputSystem::InputDevice::HasDataChangedInRange)> {
  static const MethodInfo* get() {
    static auto* deviceStatePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* startOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* sizeInBits = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "HasDataChangedInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceStatePtr, statePtr, startOffset, sizeInBits});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_valueType
// Il2CppName: get_valueType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_valueType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_valueType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::get_valueSizeInBytes
// Il2CppName: get_valueSizeInBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputDevice::*)()>(&UnityEngine::InputSystem::InputDevice::get_valueSizeInBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "get_valueSizeInBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::ReadValueFromBufferAsObject
// Il2CppName: ReadValueFromBufferAsObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::InputSystem::InputDevice::*)(void*, int)>(&UnityEngine::InputSystem::InputDevice::ReadValueFromBufferAsObject)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bufferSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "ReadValueFromBufferAsObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bufferSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::ReadValueFromStateAsObject
// Il2CppName: ReadValueFromStateAsObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::InputSystem::InputDevice::*)(void*)>(&UnityEngine::InputSystem::InputDevice::ReadValueFromStateAsObject)> {
  static const MethodInfo* get() {
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "ReadValueFromStateAsObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statePtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::ReadValueFromStateIntoBuffer
// Il2CppName: ReadValueFromStateIntoBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputDevice::*)(void*, void*, int)>(&UnityEngine::InputSystem::InputDevice::ReadValueFromStateIntoBuffer)> {
  static const MethodInfo* get() {
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bufferPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bufferSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "ReadValueFromStateIntoBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statePtr, bufferPtr, bufferSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputDevice::CompareValue
// Il2CppName: CompareValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputDevice::*)(void*, void*)>(&UnityEngine::InputSystem::InputDevice::CompareValue)> {
  static const MethodInfo* get() {
    static auto* firstStatePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* secondStatePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputDevice*), "CompareValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstStatePtr, secondStatePtr});
  }
};
