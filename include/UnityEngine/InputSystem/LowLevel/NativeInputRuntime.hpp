// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputRuntime
#include "UnityEngine/InputSystem/LowLevel/IInputRuntime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputUpdateDelegate
  class InputUpdateDelegate;
  // Forward declaring type: InputEvent
  struct InputEvent;
  // Forward declaring type: InputDeviceCommand
  struct InputDeviceCommand;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: ScreenOrientation
  struct ScreenOrientation;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: NativeInputRuntime
  class NativeInputRuntime;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::LowLevel::NativeInputRuntime);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::NativeInputRuntime*, "UnityEngine.InputSystem.LowLevel", "NativeInputRuntime");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.NativeInputRuntime
  // [TokenAttribute] Offset: FFFFFFFF
  class NativeInputRuntime : public ::Il2CppObject/*, public ::UnityEngine::InputSystem::LowLevel::IInputRuntime*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::LowLevel::NativeInputRuntime::$$c__DisplayClass10_0
    class $$c__DisplayClass10_0;
    // Nested type: ::UnityEngine::InputSystem::LowLevel::NativeInputRuntime::$$c__DisplayClass13_0
    class $$c__DisplayClass13_0;
    // Nested type: ::UnityEngine::InputSystem::LowLevel::NativeInputRuntime::$$c__DisplayClass7_0
    class $$c__DisplayClass7_0;
    public:
    // private System.Boolean m_RunInBackground
    // Size: 0x1
    // Offset: 0x10
    bool m_RunInBackground;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RunInBackground and: m_ShutdownMethod
    char __padding0[0x7] = {};
    // private System.Action m_ShutdownMethod
    // Size: 0x8
    // Offset: 0x18
    ::System::Action* m_ShutdownMethod;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private UnityEngine.InputSystem.LowLevel.InputUpdateDelegate m_OnUpdate
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::InputSystem::LowLevel::InputUpdateDelegate* m_OnUpdate;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputUpdateDelegate*) == 0x8);
    // private System.Action`1<UnityEngine.InputSystem.LowLevel.InputUpdateType> m_OnBeforeUpdate
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputUpdateType>* m_OnBeforeUpdate;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputUpdateType>*) == 0x8);
    // private System.Func`2<UnityEngine.InputSystem.LowLevel.InputUpdateType,System.Boolean> m_OnShouldRunUpdate
    // Size: 0x8
    // Offset: 0x30
    ::System::Func_2<::UnityEngine::InputSystem::LowLevel::InputUpdateType, bool>* m_OnShouldRunUpdate;
    // Field size check
    static_assert(sizeof(::System::Func_2<::UnityEngine::InputSystem::LowLevel::InputUpdateType, bool>*) == 0x8);
    // private System.Single m_PollingFrequency
    // Size: 0x4
    // Offset: 0x38
    float m_PollingFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_DidCallOnShutdown
    // Size: 0x1
    // Offset: 0x3C
    bool m_DidCallOnShutdown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_DidCallOnShutdown and: m_FocusChangedMethod
    char __padding6[0x3] = {};
    // private System.Action`1<System.Boolean> m_FocusChangedMethod
    // Size: 0x8
    // Offset: 0x40
    ::System::Action_1<bool>* m_FocusChangedMethod;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputRuntime
    operator ::UnityEngine::InputSystem::LowLevel::IInputRuntime() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputRuntime*>(this);
    }
    // Get static field: static public readonly UnityEngine.InputSystem.LowLevel.NativeInputRuntime instance
    static ::UnityEngine::InputSystem::LowLevel::NativeInputRuntime* _get_instance();
    // Set static field: static public readonly UnityEngine.InputSystem.LowLevel.NativeInputRuntime instance
    static void _set_instance(::UnityEngine::InputSystem::LowLevel::NativeInputRuntime* value);
    // Get instance field reference: private System.Boolean m_RunInBackground
    [[deprecated("Use field access instead!")]] bool& dyn_m_RunInBackground();
    // Get instance field reference: private System.Action m_ShutdownMethod
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_m_ShutdownMethod();
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.InputUpdateDelegate m_OnUpdate
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputUpdateDelegate*& dyn_m_OnUpdate();
    // Get instance field reference: private System.Action`1<UnityEngine.InputSystem.LowLevel.InputUpdateType> m_OnBeforeUpdate
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputUpdateType>*& dyn_m_OnBeforeUpdate();
    // Get instance field reference: private System.Func`2<UnityEngine.InputSystem.LowLevel.InputUpdateType,System.Boolean> m_OnShouldRunUpdate
    [[deprecated("Use field access instead!")]] ::System::Func_2<::UnityEngine::InputSystem::LowLevel::InputUpdateType, bool>*& dyn_m_OnShouldRunUpdate();
    // Get instance field reference: private System.Single m_PollingFrequency
    [[deprecated("Use field access instead!")]] float& dyn_m_PollingFrequency();
    // Get instance field reference: private System.Boolean m_DidCallOnShutdown
    [[deprecated("Use field access instead!")]] bool& dyn_m_DidCallOnShutdown();
    // Get instance field reference: private System.Action`1<System.Boolean> m_FocusChangedMethod
    [[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& dyn_m_FocusChangedMethod();
    // public System.Int32 AllocateDeviceId()
    // Offset: 0x51535D0
    int AllocateDeviceId();
    // public System.Void Update(UnityEngine.InputSystem.LowLevel.InputUpdateType updateType)
    // Offset: 0x5153620
    void Update(::UnityEngine::InputSystem::LowLevel::InputUpdateType updateType);
    // public System.Void QueueEvent(UnityEngine.InputSystem.LowLevel.InputEvent* ptr)
    // Offset: 0x5153678
    void QueueEvent(::UnityEngine::InputSystem::LowLevel::InputEvent* ptr);
    // public System.Int64 DeviceCommand(System.Int32 deviceId, UnityEngine.InputSystem.LowLevel.InputDeviceCommand* commandPtr)
    // Offset: 0x51536E4
    int64_t DeviceCommand(int deviceId, ::UnityEngine::InputSystem::LowLevel::InputDeviceCommand* commandPtr);
    // public UnityEngine.InputSystem.LowLevel.InputUpdateDelegate get_onUpdate()
    // Offset: 0x51537A4
    ::UnityEngine::InputSystem::LowLevel::InputUpdateDelegate* get_onUpdate();
    // public System.Void set_onUpdate(UnityEngine.InputSystem.LowLevel.InputUpdateDelegate value)
    // Offset: 0x51537AC
    void set_onUpdate(::UnityEngine::InputSystem::LowLevel::InputUpdateDelegate* value);
    // public System.Action`1<UnityEngine.InputSystem.LowLevel.InputUpdateType> get_onBeforeUpdate()
    // Offset: 0x51538EC
    ::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputUpdateType>* get_onBeforeUpdate();
    // public System.Void set_onBeforeUpdate(System.Action`1<UnityEngine.InputSystem.LowLevel.InputUpdateType> value)
    // Offset: 0x51538F4
    void set_onBeforeUpdate(::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputUpdateType>* value);
    // public System.Func`2<UnityEngine.InputSystem.LowLevel.InputUpdateType,System.Boolean> get_onShouldRunUpdate()
    // Offset: 0x5153A2C
    ::System::Func_2<::UnityEngine::InputSystem::LowLevel::InputUpdateType, bool>* get_onShouldRunUpdate();
    // public System.Void set_onShouldRunUpdate(System.Func`2<UnityEngine.InputSystem.LowLevel.InputUpdateType,System.Boolean> value)
    // Offset: 0x5153A34
    void set_onShouldRunUpdate(::System::Func_2<::UnityEngine::InputSystem::LowLevel::InputUpdateType, bool>* value);
    // public System.Action`2<System.Int32,System.String> get_onDeviceDiscovered()
    // Offset: 0x5153B6C
    ::System::Action_2<int, ::StringW>* get_onDeviceDiscovered();
    // public System.Void set_onDeviceDiscovered(System.Action`2<System.Int32,System.String> value)
    // Offset: 0x5153BBC
    void set_onDeviceDiscovered(::System::Action_2<int, ::StringW>* value);
    // public System.Action get_onShutdown()
    // Offset: 0x5153C14
    ::System::Action* get_onShutdown();
    // public System.Void set_onShutdown(System.Action value)
    // Offset: 0x5153C1C
    void set_onShutdown(::System::Action* value);
    // public System.Action`1<System.Boolean> get_onPlayerFocusChanged()
    // Offset: 0x5153D2C
    ::System::Action_1<bool>* get_onPlayerFocusChanged();
    // public System.Void set_onPlayerFocusChanged(System.Action`1<System.Boolean> value)
    // Offset: 0x5153D34
    void set_onPlayerFocusChanged(::System::Action_1<bool>* value);
    // public System.Boolean get_isPlayerFocused()
    // Offset: 0x5153E44
    bool get_isPlayerFocused();
    // public System.Single get_pollingFrequency()
    // Offset: 0x5153E94
    float get_pollingFrequency();
    // public System.Void set_pollingFrequency(System.Single value)
    // Offset: 0x5153E9C
    void set_pollingFrequency(float value);
    // public System.Double get_currentTime()
    // Offset: 0x5153F04
    double get_currentTime();
    // public System.Double get_currentTimeForFixedUpdate()
    // Offset: 0x5153F54
    double get_currentTimeForFixedUpdate();
    // public System.Double get_currentTimeOffsetToRealtimeSinceStartup()
    // Offset: 0x5153F80
    double get_currentTimeOffsetToRealtimeSinceStartup();
    // public System.Single get_unscaledGameTime()
    // Offset: 0x5153FD0
    float get_unscaledGameTime();
    // public System.Boolean get_runInBackground()
    // Offset: 0x5153FD8
    bool get_runInBackground();
    // public System.Void set_runInBackground(System.Boolean value)
    // Offset: 0x5154048
    void set_runInBackground(bool value);
    // private System.Void OnShutdown()
    // Offset: 0x5154054
    void OnShutdown();
    // private System.Boolean OnWantsToShutdown()
    // Offset: 0x5154078
    bool OnWantsToShutdown();
    // private System.Void OnFocusChanged(System.Boolean focus)
    // Offset: 0x51540B8
    void OnFocusChanged(bool focus);
    // public UnityEngine.Vector2 get_screenSize()
    // Offset: 0x51540E0
    ::UnityEngine::Vector2 get_screenSize();
    // public UnityEngine.ScreenOrientation get_screenOrientation()
    // Offset: 0x5154108
    ::UnityEngine::ScreenOrientation get_screenOrientation();
    // public System.Boolean get_isInBatchMode()
    // Offset: 0x5154110
    bool get_isInBatchMode();
    // public System.Void RegisterAnalyticsEvent(System.String name, System.Int32 maxPerHour, System.Int32 maxPropertiesPerEvent)
    // Offset: 0x5154160
    void RegisterAnalyticsEvent(::StringW name, int maxPerHour, int maxPropertiesPerEvent);
    // public System.Void SendAnalyticsEvent(System.String name, System.Object data)
    // Offset: 0x5154164
    void SendAnalyticsEvent(::StringW name, ::Il2CppObject* data);
    // public System.Void .ctor()
    // Offset: 0x5154168
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NativeInputRuntime* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::NativeInputRuntime::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NativeInputRuntime*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x5154178
    static void _cctor();
  }; // UnityEngine.InputSystem.LowLevel.NativeInputRuntime
  #pragma pack(pop)
  static check_size<sizeof(NativeInputRuntime), 64 + sizeof(::System::Action_1<bool>*)> __UnityEngine_InputSystem_LowLevel_NativeInputRuntimeSizeCheck;
  static_assert(sizeof(NativeInputRuntime) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::AllocateDeviceId
// Il2CppName: AllocateDeviceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::AllocateDeviceId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "AllocateDeviceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)(::UnityEngine::InputSystem::LowLevel::InputUpdateType)>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::Update)> {
  static const MethodInfo* get() {
    static auto* updateType = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputUpdateType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateType});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::QueueEvent
// Il2CppName: QueueEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)(::UnityEngine::InputSystem::LowLevel::InputEvent*)>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::QueueEvent)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEvent"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "QueueEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::DeviceCommand
// Il2CppName: DeviceCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)(int, ::UnityEngine::InputSystem::LowLevel::InputDeviceCommand*)>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::DeviceCommand)> {
  static const MethodInfo* get() {
    static auto* deviceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* commandPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputDeviceCommand"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "DeviceCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceId, commandPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_onUpdate
// Il2CppName: get_onUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputUpdateDelegate* (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_onUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_onUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_onUpdate
// Il2CppName: set_onUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)(::UnityEngine::InputSystem::LowLevel::InputUpdateDelegate*)>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_onUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputUpdateDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "set_onUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_onBeforeUpdate
// Il2CppName: get_onBeforeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputUpdateType>* (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_onBeforeUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_onBeforeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_onBeforeUpdate
// Il2CppName: set_onBeforeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)(::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputUpdateType>*)>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_onBeforeUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputUpdateType")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "set_onBeforeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_onShouldRunUpdate
// Il2CppName: get_onShouldRunUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_2<::UnityEngine::InputSystem::LowLevel::InputUpdateType, bool>* (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_onShouldRunUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_onShouldRunUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_onShouldRunUpdate
// Il2CppName: set_onShouldRunUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)(::System::Func_2<::UnityEngine::InputSystem::LowLevel::InputUpdateType, bool>*)>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_onShouldRunUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputUpdateType"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "set_onShouldRunUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_onDeviceDiscovered
// Il2CppName: get_onDeviceDiscovered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_2<int, ::StringW>* (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_onDeviceDiscovered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_onDeviceDiscovered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_onDeviceDiscovered
// Il2CppName: set_onDeviceDiscovered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)(::System::Action_2<int, ::StringW>*)>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_onDeviceDiscovered)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "set_onDeviceDiscovered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_onShutdown
// Il2CppName: get_onShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action* (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_onShutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_onShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_onShutdown
// Il2CppName: set_onShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)(::System::Action*)>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_onShutdown)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "set_onShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_onPlayerFocusChanged
// Il2CppName: get_onPlayerFocusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<bool>* (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_onPlayerFocusChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_onPlayerFocusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_onPlayerFocusChanged
// Il2CppName: set_onPlayerFocusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)(::System::Action_1<bool>*)>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_onPlayerFocusChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "set_onPlayerFocusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_isPlayerFocused
// Il2CppName: get_isPlayerFocused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_isPlayerFocused)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_isPlayerFocused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_pollingFrequency
// Il2CppName: get_pollingFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_pollingFrequency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_pollingFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_pollingFrequency
// Il2CppName: set_pollingFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)(float)>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_pollingFrequency)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "set_pollingFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_currentTime
// Il2CppName: get_currentTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_currentTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_currentTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_currentTimeForFixedUpdate
// Il2CppName: get_currentTimeForFixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_currentTimeForFixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_currentTimeForFixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_currentTimeOffsetToRealtimeSinceStartup
// Il2CppName: get_currentTimeOffsetToRealtimeSinceStartup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_currentTimeOffsetToRealtimeSinceStartup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_currentTimeOffsetToRealtimeSinceStartup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_unscaledGameTime
// Il2CppName: get_unscaledGameTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_unscaledGameTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_unscaledGameTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_runInBackground
// Il2CppName: get_runInBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_runInBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_runInBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_runInBackground
// Il2CppName: set_runInBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)(bool)>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::set_runInBackground)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "set_runInBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::OnShutdown
// Il2CppName: OnShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::OnShutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "OnShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::OnWantsToShutdown
// Il2CppName: OnWantsToShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::OnWantsToShutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "OnWantsToShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::OnFocusChanged
// Il2CppName: OnFocusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)(bool)>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::OnFocusChanged)> {
  static const MethodInfo* get() {
    static auto* focus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "OnFocusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focus});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_screenSize
// Il2CppName: get_screenSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_screenSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_screenSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_screenOrientation
// Il2CppName: get_screenOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ScreenOrientation (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_screenOrientation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_screenOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_isInBatchMode
// Il2CppName: get_isInBatchMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::get_isInBatchMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "get_isInBatchMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::RegisterAnalyticsEvent
// Il2CppName: RegisterAnalyticsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)(::StringW, int, int)>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::RegisterAnalyticsEvent)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* maxPerHour = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxPropertiesPerEvent = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "RegisterAnalyticsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, maxPerHour, maxPropertiesPerEvent});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::SendAnalyticsEvent
// Il2CppName: SendAnalyticsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::NativeInputRuntime::*)(::StringW, ::Il2CppObject*)>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::SendAnalyticsEvent)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), "SendAnalyticsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, data});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::NativeInputRuntime::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::LowLevel::NativeInputRuntime::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::NativeInputRuntime*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
