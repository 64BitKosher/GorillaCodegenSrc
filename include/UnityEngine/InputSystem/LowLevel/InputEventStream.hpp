// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEventBuffer
#include "UnityEngine/InputSystem/LowLevel/InputEventBuffer.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputEvent
  struct InputEvent;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputEventStream
  struct InputEventStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::InputEventStream, "UnityEngine.InputSystem.LowLevel", "InputEventStream");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.InputEventStream
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputEventStream/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.InputSystem.LowLevel.InputEventBuffer m_NativeBuffer
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::UnityEngine::InputSystem::LowLevel::InputEventBuffer m_NativeBuffer;
    // private UnityEngine.InputSystem.LowLevel.InputEvent* m_CurrentNativeEventReadPtr
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::InputSystem::LowLevel::InputEvent* m_CurrentNativeEventReadPtr;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputEvent*) == 0x8);
    // private UnityEngine.InputSystem.LowLevel.InputEvent* m_CurrentNativeEventWritePtr
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::InputSystem::LowLevel::InputEvent* m_CurrentNativeEventWritePtr;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputEvent*) == 0x8);
    // private System.Int32 m_RemainingNativeEventCount
    // Size: 0x4
    // Offset: 0x30
    int m_RemainingNativeEventCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 m_MaxAppendedEvents
    // Size: 0x4
    // Offset: 0x34
    int m_MaxAppendedEvents;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.InputSystem.LowLevel.InputEventBuffer m_AppendBuffer
    // Size: 0xFFFFFFFF
    // Offset: 0x38
    ::UnityEngine::InputSystem::LowLevel::InputEventBuffer m_AppendBuffer;
    // private UnityEngine.InputSystem.LowLevel.InputEvent* m_CurrentAppendEventReadPtr
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::InputSystem::LowLevel::InputEvent* m_CurrentAppendEventReadPtr;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputEvent*) == 0x8);
    // private UnityEngine.InputSystem.LowLevel.InputEvent* m_CurrentAppendEventWritePtr
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::InputSystem::LowLevel::InputEvent* m_CurrentAppendEventWritePtr;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputEvent*) == 0x8);
    // private System.Int32 m_RemainingAppendEventCount
    // Size: 0x4
    // Offset: 0x68
    int m_RemainingAppendEventCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_NumEventsRetainedInBuffer
    // Size: 0x4
    // Offset: 0x6C
    int m_NumEventsRetainedInBuffer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_IsOpen
    // Size: 0x1
    // Offset: 0x70
    bool m_IsOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: InputEventStream
    constexpr InputEventStream(::UnityEngine::InputSystem::LowLevel::InputEventBuffer m_NativeBuffer_ = {}, ::UnityEngine::InputSystem::LowLevel::InputEvent* m_CurrentNativeEventReadPtr_ = {}, ::UnityEngine::InputSystem::LowLevel::InputEvent* m_CurrentNativeEventWritePtr_ = {}, int m_RemainingNativeEventCount_ = {}, int m_MaxAppendedEvents_ = {}, ::UnityEngine::InputSystem::LowLevel::InputEventBuffer m_AppendBuffer_ = {}, ::UnityEngine::InputSystem::LowLevel::InputEvent* m_CurrentAppendEventReadPtr_ = {}, ::UnityEngine::InputSystem::LowLevel::InputEvent* m_CurrentAppendEventWritePtr_ = {}, int m_RemainingAppendEventCount_ = {}, int m_NumEventsRetainedInBuffer_ = {}, bool m_IsOpen_ = {}) noexcept : m_NativeBuffer{m_NativeBuffer_}, m_CurrentNativeEventReadPtr{m_CurrentNativeEventReadPtr_}, m_CurrentNativeEventWritePtr{m_CurrentNativeEventWritePtr_}, m_RemainingNativeEventCount{m_RemainingNativeEventCount_}, m_MaxAppendedEvents{m_MaxAppendedEvents_}, m_AppendBuffer{m_AppendBuffer_}, m_CurrentAppendEventReadPtr{m_CurrentAppendEventReadPtr_}, m_CurrentAppendEventWritePtr{m_CurrentAppendEventWritePtr_}, m_RemainingAppendEventCount{m_RemainingAppendEventCount_}, m_NumEventsRetainedInBuffer{m_NumEventsRetainedInBuffer_}, m_IsOpen{m_IsOpen_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.InputEventBuffer m_NativeBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputEventBuffer& dyn_m_NativeBuffer();
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.InputEvent* m_CurrentNativeEventReadPtr
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputEvent*& dyn_m_CurrentNativeEventReadPtr();
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.InputEvent* m_CurrentNativeEventWritePtr
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputEvent*& dyn_m_CurrentNativeEventWritePtr();
    // Get instance field reference: private System.Int32 m_RemainingNativeEventCount
    [[deprecated("Use field access instead!")]] int& dyn_m_RemainingNativeEventCount();
    // Get instance field reference: private readonly System.Int32 m_MaxAppendedEvents
    [[deprecated("Use field access instead!")]] int& dyn_m_MaxAppendedEvents();
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.InputEventBuffer m_AppendBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputEventBuffer& dyn_m_AppendBuffer();
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.InputEvent* m_CurrentAppendEventReadPtr
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputEvent*& dyn_m_CurrentAppendEventReadPtr();
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.InputEvent* m_CurrentAppendEventWritePtr
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputEvent*& dyn_m_CurrentAppendEventWritePtr();
    // Get instance field reference: private System.Int32 m_RemainingAppendEventCount
    [[deprecated("Use field access instead!")]] int& dyn_m_RemainingAppendEventCount();
    // Get instance field reference: private System.Int32 m_NumEventsRetainedInBuffer
    [[deprecated("Use field access instead!")]] int& dyn_m_NumEventsRetainedInBuffer();
    // Get instance field reference: private System.Boolean m_IsOpen
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsOpen();
    // public System.Boolean get_isOpen()
    // Offset: 0x514E608
    bool get_isOpen();
    // public System.Int32 get_remainingEventCount()
    // Offset: 0x514E610
    int get_remainingEventCount();
    // public System.Int32 get_numEventsRetainedInBuffer()
    // Offset: 0x514E620
    int get_numEventsRetainedInBuffer();
    // public UnityEngine.InputSystem.LowLevel.InputEvent* get_currentEventPtr()
    // Offset: 0x514E628
    ::UnityEngine::InputSystem::LowLevel::InputEvent* get_currentEventPtr();
    // public System.UInt32 get_numBytesRetainedInBuffer()
    // Offset: 0x514E65C
    uint get_numBytesRetainedInBuffer();
    // public System.Void .ctor(ref UnityEngine.InputSystem.LowLevel.InputEventBuffer eventBuffer, System.Int32 maxAppendedEvents)
    // Offset: 0x514E6B0
    InputEventStream(ByRef<::UnityEngine::InputSystem::LowLevel::InputEventBuffer> eventBuffer, int maxAppendedEvents);
    // public System.Void Close(ref UnityEngine.InputSystem.LowLevel.InputEventBuffer eventBuffer)
    // Offset: 0x514E73C
    void Close(ByRef<::UnityEngine::InputSystem::LowLevel::InputEventBuffer> eventBuffer);
    // public System.Void CleanUpAfterException()
    // Offset: 0x514E858
    void CleanUpAfterException();
    // public System.Void Write(UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr)
    // Offset: 0x514E8C0
    void Write(::UnityEngine::InputSystem::LowLevel::InputEvent* eventPtr);
    // public UnityEngine.InputSystem.LowLevel.InputEvent* Advance(System.Boolean leaveEventInBuffer)
    // Offset: 0x514EA50
    ::UnityEngine::InputSystem::LowLevel::InputEvent* Advance(bool leaveEventInBuffer);
    // public UnityEngine.InputSystem.LowLevel.InputEvent* Peek()
    // Offset: 0x514EAF4
    ::UnityEngine::InputSystem::LowLevel::InputEvent* Peek();
  }; // UnityEngine.InputSystem.LowLevel.InputEventStream
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventStream::get_isOpen
// Il2CppName: get_isOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::InputEventStream::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventStream::get_isOpen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventStream), "get_isOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventStream::get_remainingEventCount
// Il2CppName: get_remainingEventCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::LowLevel::InputEventStream::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventStream::get_remainingEventCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventStream), "get_remainingEventCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventStream::get_numEventsRetainedInBuffer
// Il2CppName: get_numEventsRetainedInBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::LowLevel::InputEventStream::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventStream::get_numEventsRetainedInBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventStream), "get_numEventsRetainedInBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventStream::get_currentEventPtr
// Il2CppName: get_currentEventPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputEvent* (UnityEngine::InputSystem::LowLevel::InputEventStream::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventStream::get_currentEventPtr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventStream), "get_currentEventPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventStream::get_numBytesRetainedInBuffer
// Il2CppName: get_numBytesRetainedInBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::InputSystem::LowLevel::InputEventStream::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventStream::get_numBytesRetainedInBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventStream), "get_numBytesRetainedInBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventStream::InputEventStream
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventStream::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventStream::*)(ByRef<::UnityEngine::InputSystem::LowLevel::InputEventBuffer>)>(&UnityEngine::InputSystem::LowLevel::InputEventStream::Close)> {
  static const MethodInfo* get() {
    static auto* eventBuffer = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventStream), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventBuffer});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventStream::CleanUpAfterException
// Il2CppName: CleanUpAfterException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventStream::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventStream::CleanUpAfterException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventStream), "CleanUpAfterException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventStream::*)(::UnityEngine::InputSystem::LowLevel::InputEvent*)>(&UnityEngine::InputSystem::LowLevel::InputEventStream::Write)> {
  static const MethodInfo* get() {
    static auto* eventPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEvent"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventStream), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventStream::Advance
// Il2CppName: Advance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputEvent* (UnityEngine::InputSystem::LowLevel::InputEventStream::*)(bool)>(&UnityEngine::InputSystem::LowLevel::InputEventStream::Advance)> {
  static const MethodInfo* get() {
    static auto* leaveEventInBuffer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventStream), "Advance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leaveEventInBuffer});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventStream::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputEvent* (UnityEngine::InputSystem::LowLevel::InputEventStream::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventStream::Peek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventStream), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
