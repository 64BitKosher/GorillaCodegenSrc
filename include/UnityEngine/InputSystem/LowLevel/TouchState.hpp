// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo
#include "UnityEngine/InputSystem/LowLevel/IInputStateTypeInfo.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: FourCC
  struct FourCC;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: TouchPhase
  struct TouchPhase;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: TouchState
  struct TouchState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::TouchState, "UnityEngine.InputSystem.LowLevel", "TouchState");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.TouchState
  // [TokenAttribute] Offset: FFFFFFFF
  struct TouchState/*, public ::System::ValueType, public ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*/ {
    public:
    public:
    // public System.Int32 touchId
    // Size: 0x4
    // Offset: 0x0
    int touchId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Vector2 position
    // Size: 0x8
    // Offset: 0x4
    ::UnityEngine::Vector2 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 delta
    // Size: 0x8
    // Offset: 0xC
    ::UnityEngine::Vector2 delta;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Single pressure
    // Size: 0x4
    // Offset: 0x14
    float pressure;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector2 radius
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Vector2 radius;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Byte phaseId
    // Size: 0x1
    // Offset: 0x20
    uint8_t phaseId;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte tapCount
    // Size: 0x1
    // Offset: 0x21
    uint8_t tapCount;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte displayIndex
    // Size: 0x1
    // Offset: 0x22
    uint8_t displayIndex;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte flags
    // Size: 0x1
    // Offset: 0x23
    uint8_t flags;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.UInt32 updateStepCount
    // Size: 0x4
    // Offset: 0x24
    uint updateStepCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Double startTime
    // Size: 0x8
    // Offset: 0x28
    double startTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public UnityEngine.Vector2 startPosition
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Vector2 startPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Creating value type constructor for type: TouchState
    constexpr TouchState(int touchId_ = {}, ::UnityEngine::Vector2 position_ = {}, ::UnityEngine::Vector2 delta_ = {}, float pressure_ = {}, ::UnityEngine::Vector2 radius_ = {}, uint8_t phaseId_ = {}, uint8_t tapCount_ = {}, uint8_t displayIndex_ = {}, uint8_t flags_ = {}, uint updateStepCount_ = {}, double startTime_ = {}, ::UnityEngine::Vector2 startPosition_ = {}) noexcept : touchId{touchId_}, position{position_}, delta{delta_}, pressure{pressure_}, radius{radius_}, phaseId{phaseId_}, tapCount{tapCount_}, displayIndex{displayIndex_}, flags{flags_}, updateStepCount{updateStepCount_}, startTime{startTime_}, startPosition{startPosition_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo
    operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*>(this);
    }
    // static field const value: static System.Int32 kSizeInBytes
    static constexpr const int kSizeInBytes = 56;
    // Get static field: static System.Int32 kSizeInBytes
    static int _get_kSizeInBytes();
    // Set static field: static System.Int32 kSizeInBytes
    static void _set_kSizeInBytes(int value);
    // Get instance field reference: public System.Int32 touchId
    [[deprecated("Use field access instead!")]] int& dyn_touchId();
    // Get instance field reference: public UnityEngine.Vector2 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_position();
    // Get instance field reference: public UnityEngine.Vector2 delta
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_delta();
    // Get instance field reference: public System.Single pressure
    [[deprecated("Use field access instead!")]] float& dyn_pressure();
    // Get instance field reference: public UnityEngine.Vector2 radius
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_radius();
    // Get instance field reference: public System.Byte phaseId
    [[deprecated("Use field access instead!")]] uint8_t& dyn_phaseId();
    // Get instance field reference: public System.Byte tapCount
    [[deprecated("Use field access instead!")]] uint8_t& dyn_tapCount();
    // Get instance field reference: public System.Byte displayIndex
    [[deprecated("Use field access instead!")]] uint8_t& dyn_displayIndex();
    // Get instance field reference: public System.Byte flags
    [[deprecated("Use field access instead!")]] uint8_t& dyn_flags();
    // Get instance field reference: System.UInt32 updateStepCount
    [[deprecated("Use field access instead!")]] uint& dyn_updateStepCount();
    // Get instance field reference: public System.Double startTime
    [[deprecated("Use field access instead!")]] double& dyn_startTime();
    // Get instance field reference: public UnityEngine.Vector2 startPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_startPosition();
    // static public UnityEngine.InputSystem.Utilities.FourCC get_Format()
    // Offset: 0x514B680
    static ::UnityEngine::InputSystem::Utilities::FourCC get_Format();
    // public UnityEngine.InputSystem.TouchPhase get_phase()
    // Offset: 0x514B6B0
    ::UnityEngine::InputSystem::TouchPhase get_phase();
    // public System.Void set_phase(UnityEngine.InputSystem.TouchPhase value)
    // Offset: 0x5145DEC
    void set_phase(::UnityEngine::InputSystem::TouchPhase value);
    // public System.Boolean get_isNoneEndedOrCanceled()
    // Offset: 0x514B6B8
    bool get_isNoneEndedOrCanceled();
    // public System.Boolean get_isInProgress()
    // Offset: 0x514B6DC
    bool get_isInProgress();
    // public System.Boolean get_isPrimaryTouch()
    // Offset: 0x5147E58
    bool get_isPrimaryTouch();
    // public System.Void set_isPrimaryTouch(System.Boolean value)
    // Offset: 0x5147E38
    void set_isPrimaryTouch(bool value);
    // System.Boolean get_isOrphanedPrimaryTouch()
    // Offset: 0x514B704
    bool get_isOrphanedPrimaryTouch();
    // System.Void set_isOrphanedPrimaryTouch(System.Boolean value)
    // Offset: 0x514B710
    void set_isOrphanedPrimaryTouch(bool value);
    // public System.Boolean get_isIndirectTouch()
    // Offset: 0x514B730
    bool get_isIndirectTouch();
    // public System.Void set_isIndirectTouch(System.Boolean value)
    // Offset: 0x514B73C
    void set_isIndirectTouch(bool value);
    // public System.Boolean get_isTap()
    // Offset: 0x5144530
    bool get_isTap();
    // public System.Void set_isTap(System.Boolean value)
    // Offset: 0x5147E64
    void set_isTap(bool value);
    // System.Boolean get_isTapPress()
    // Offset: 0x514B74C
    bool get_isTapPress();
    // System.Void set_isTapPress(System.Boolean value)
    // Offset: 0x514B758
    void set_isTapPress(bool value);
    // System.Boolean get_isTapRelease()
    // Offset: 0x5143B08
    bool get_isTapRelease();
    // System.Void set_isTapRelease(System.Boolean value)
    // Offset: 0x514B778
    void set_isTapRelease(bool value);
    // System.Boolean get_beganInSameFrame()
    // Offset: 0x5143DA0
    bool get_beganInSameFrame();
    // System.Void set_beganInSameFrame(System.Boolean value)
    // Offset: 0x5143DAC
    void set_beganInSameFrame(bool value);
    // public UnityEngine.InputSystem.Utilities.FourCC get_format()
    // Offset: 0x514B798
    ::UnityEngine::InputSystem::Utilities::FourCC get_format();
    // public override System.String ToString()
    // Offset: 0x514B7C8
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.InputSystem.LowLevel.TouchState
  #pragma pack(pop)
  static check_size<sizeof(TouchState), 48 + sizeof(::UnityEngine::Vector2)> __UnityEngine_InputSystem_LowLevel_TouchStateSizeCheck;
  static_assert(sizeof(TouchState) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::get_Format
// Il2CppName: get_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (*)()>(&UnityEngine::InputSystem::LowLevel::TouchState::get_Format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "get_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::get_phase
// Il2CppName: get_phase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::TouchPhase (UnityEngine::InputSystem::LowLevel::TouchState::*)()>(&UnityEngine::InputSystem::LowLevel::TouchState::get_phase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "get_phase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::set_phase
// Il2CppName: set_phase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::TouchState::*)(::UnityEngine::InputSystem::TouchPhase)>(&UnityEngine::InputSystem::LowLevel::TouchState::set_phase)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "TouchPhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "set_phase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::get_isNoneEndedOrCanceled
// Il2CppName: get_isNoneEndedOrCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::TouchState::*)()>(&UnityEngine::InputSystem::LowLevel::TouchState::get_isNoneEndedOrCanceled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "get_isNoneEndedOrCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::get_isInProgress
// Il2CppName: get_isInProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::TouchState::*)()>(&UnityEngine::InputSystem::LowLevel::TouchState::get_isInProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "get_isInProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::get_isPrimaryTouch
// Il2CppName: get_isPrimaryTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::TouchState::*)()>(&UnityEngine::InputSystem::LowLevel::TouchState::get_isPrimaryTouch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "get_isPrimaryTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::set_isPrimaryTouch
// Il2CppName: set_isPrimaryTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::TouchState::*)(bool)>(&UnityEngine::InputSystem::LowLevel::TouchState::set_isPrimaryTouch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "set_isPrimaryTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::get_isOrphanedPrimaryTouch
// Il2CppName: get_isOrphanedPrimaryTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::TouchState::*)()>(&UnityEngine::InputSystem::LowLevel::TouchState::get_isOrphanedPrimaryTouch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "get_isOrphanedPrimaryTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::set_isOrphanedPrimaryTouch
// Il2CppName: set_isOrphanedPrimaryTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::TouchState::*)(bool)>(&UnityEngine::InputSystem::LowLevel::TouchState::set_isOrphanedPrimaryTouch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "set_isOrphanedPrimaryTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::get_isIndirectTouch
// Il2CppName: get_isIndirectTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::TouchState::*)()>(&UnityEngine::InputSystem::LowLevel::TouchState::get_isIndirectTouch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "get_isIndirectTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::set_isIndirectTouch
// Il2CppName: set_isIndirectTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::TouchState::*)(bool)>(&UnityEngine::InputSystem::LowLevel::TouchState::set_isIndirectTouch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "set_isIndirectTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::get_isTap
// Il2CppName: get_isTap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::TouchState::*)()>(&UnityEngine::InputSystem::LowLevel::TouchState::get_isTap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "get_isTap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::set_isTap
// Il2CppName: set_isTap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::TouchState::*)(bool)>(&UnityEngine::InputSystem::LowLevel::TouchState::set_isTap)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "set_isTap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::get_isTapPress
// Il2CppName: get_isTapPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::TouchState::*)()>(&UnityEngine::InputSystem::LowLevel::TouchState::get_isTapPress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "get_isTapPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::set_isTapPress
// Il2CppName: set_isTapPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::TouchState::*)(bool)>(&UnityEngine::InputSystem::LowLevel::TouchState::set_isTapPress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "set_isTapPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::get_isTapRelease
// Il2CppName: get_isTapRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::TouchState::*)()>(&UnityEngine::InputSystem::LowLevel::TouchState::get_isTapRelease)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "get_isTapRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::set_isTapRelease
// Il2CppName: set_isTapRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::TouchState::*)(bool)>(&UnityEngine::InputSystem::LowLevel::TouchState::set_isTapRelease)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "set_isTapRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::get_beganInSameFrame
// Il2CppName: get_beganInSameFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::TouchState::*)()>(&UnityEngine::InputSystem::LowLevel::TouchState::get_beganInSameFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "get_beganInSameFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::set_beganInSameFrame
// Il2CppName: set_beganInSameFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::TouchState::*)(bool)>(&UnityEngine::InputSystem::LowLevel::TouchState::set_beganInSameFrame)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "set_beganInSameFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::get_format
// Il2CppName: get_format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (UnityEngine::InputSystem::LowLevel::TouchState::*)()>(&UnityEngine::InputSystem::LowLevel::TouchState::get_format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "get_format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchState::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::LowLevel::TouchState::*)()>(&UnityEngine::InputSystem::LowLevel::TouchState::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchState), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
